
HS_thermocouple_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6a4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800b838  0800b838  0001b838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b8b8  0800b8b8  0002017c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b8b8  0800b8b8  0002017c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b8b8  0800b8b8  0002017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b8b8  0800b8b8  0001b8b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b8bc  0800b8bc  0001b8bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000017c  20000000  0800b8c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002017c  2**0
                  CONTENTS
 10 .bss          000011e0  2000017c  2000017c  0002017c  2**2
                  ALLOC
 11 ._user_heap_stack 00009004  2000135c  2000135c  0002017c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000201ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019643  00000000  00000000  000201ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000039e1  00000000  00000000  00039832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001450  00000000  00000000  0003d218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000fbd  00000000  00000000  0003e668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000247ad  00000000  00000000  0003f625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ca46  00000000  00000000  00063dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7ea1  00000000  00000000  00080818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000055b8  00000000  00000000  001586bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  0015dc74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000017c 	.word	0x2000017c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800b820 	.word	0x0800b820

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000180 	.word	0x20000180
 80001d0:	0800b820 	.word	0x0800b820

080001d4 <__aeabi_drsub>:
 80001d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d8:	e002      	b.n	80001e0 <__adddf3>
 80001da:	bf00      	nop

080001dc <__aeabi_dsub>:
 80001dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e0 <__adddf3>:
 80001e0:	b530      	push	{r4, r5, lr}
 80001e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ea:	ea94 0f05 	teq	r4, r5
 80001ee:	bf08      	it	eq
 80001f0:	ea90 0f02 	teqeq	r0, r2
 80001f4:	bf1f      	itttt	ne
 80001f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000202:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000206:	f000 80e2 	beq.w	80003ce <__adddf3+0x1ee>
 800020a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000212:	bfb8      	it	lt
 8000214:	426d      	neglt	r5, r5
 8000216:	dd0c      	ble.n	8000232 <__adddf3+0x52>
 8000218:	442c      	add	r4, r5
 800021a:	ea80 0202 	eor.w	r2, r0, r2
 800021e:	ea81 0303 	eor.w	r3, r1, r3
 8000222:	ea82 0000 	eor.w	r0, r2, r0
 8000226:	ea83 0101 	eor.w	r1, r3, r1
 800022a:	ea80 0202 	eor.w	r2, r0, r2
 800022e:	ea81 0303 	eor.w	r3, r1, r3
 8000232:	2d36      	cmp	r5, #54	; 0x36
 8000234:	bf88      	it	hi
 8000236:	bd30      	pophi	{r4, r5, pc}
 8000238:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800023c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000240:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000244:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000248:	d002      	beq.n	8000250 <__adddf3+0x70>
 800024a:	4240      	negs	r0, r0
 800024c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000250:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000254:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000258:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800025c:	d002      	beq.n	8000264 <__adddf3+0x84>
 800025e:	4252      	negs	r2, r2
 8000260:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000264:	ea94 0f05 	teq	r4, r5
 8000268:	f000 80a7 	beq.w	80003ba <__adddf3+0x1da>
 800026c:	f1a4 0401 	sub.w	r4, r4, #1
 8000270:	f1d5 0e20 	rsbs	lr, r5, #32
 8000274:	db0d      	blt.n	8000292 <__adddf3+0xb2>
 8000276:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027a:	fa22 f205 	lsr.w	r2, r2, r5
 800027e:	1880      	adds	r0, r0, r2
 8000280:	f141 0100 	adc.w	r1, r1, #0
 8000284:	fa03 f20e 	lsl.w	r2, r3, lr
 8000288:	1880      	adds	r0, r0, r2
 800028a:	fa43 f305 	asr.w	r3, r3, r5
 800028e:	4159      	adcs	r1, r3
 8000290:	e00e      	b.n	80002b0 <__adddf3+0xd0>
 8000292:	f1a5 0520 	sub.w	r5, r5, #32
 8000296:	f10e 0e20 	add.w	lr, lr, #32
 800029a:	2a01      	cmp	r2, #1
 800029c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a0:	bf28      	it	cs
 80002a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	18c0      	adds	r0, r0, r3
 80002ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b4:	d507      	bpl.n	80002c6 <__adddf3+0xe6>
 80002b6:	f04f 0e00 	mov.w	lr, #0
 80002ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80002be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ca:	d31b      	bcc.n	8000304 <__adddf3+0x124>
 80002cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d0:	d30c      	bcc.n	80002ec <__adddf3+0x10c>
 80002d2:	0849      	lsrs	r1, r1, #1
 80002d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002dc:	f104 0401 	add.w	r4, r4, #1
 80002e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e8:	f080 809a 	bcs.w	8000420 <__adddf3+0x240>
 80002ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f0:	bf08      	it	eq
 80002f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f6:	f150 0000 	adcs.w	r0, r0, #0
 80002fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fe:	ea41 0105 	orr.w	r1, r1, r5
 8000302:	bd30      	pop	{r4, r5, pc}
 8000304:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000308:	4140      	adcs	r0, r0
 800030a:	eb41 0101 	adc.w	r1, r1, r1
 800030e:	3c01      	subs	r4, #1
 8000310:	bf28      	it	cs
 8000312:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000316:	d2e9      	bcs.n	80002ec <__adddf3+0x10c>
 8000318:	f091 0f00 	teq	r1, #0
 800031c:	bf04      	itt	eq
 800031e:	4601      	moveq	r1, r0
 8000320:	2000      	moveq	r0, #0
 8000322:	fab1 f381 	clz	r3, r1
 8000326:	bf08      	it	eq
 8000328:	3320      	addeq	r3, #32
 800032a:	f1a3 030b 	sub.w	r3, r3, #11
 800032e:	f1b3 0220 	subs.w	r2, r3, #32
 8000332:	da0c      	bge.n	800034e <__adddf3+0x16e>
 8000334:	320c      	adds	r2, #12
 8000336:	dd08      	ble.n	800034a <__adddf3+0x16a>
 8000338:	f102 0c14 	add.w	ip, r2, #20
 800033c:	f1c2 020c 	rsb	r2, r2, #12
 8000340:	fa01 f00c 	lsl.w	r0, r1, ip
 8000344:	fa21 f102 	lsr.w	r1, r1, r2
 8000348:	e00c      	b.n	8000364 <__adddf3+0x184>
 800034a:	f102 0214 	add.w	r2, r2, #20
 800034e:	bfd8      	it	le
 8000350:	f1c2 0c20 	rsble	ip, r2, #32
 8000354:	fa01 f102 	lsl.w	r1, r1, r2
 8000358:	fa20 fc0c 	lsr.w	ip, r0, ip
 800035c:	bfdc      	itt	le
 800035e:	ea41 010c 	orrle.w	r1, r1, ip
 8000362:	4090      	lslle	r0, r2
 8000364:	1ae4      	subs	r4, r4, r3
 8000366:	bfa2      	ittt	ge
 8000368:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800036c:	4329      	orrge	r1, r5
 800036e:	bd30      	popge	{r4, r5, pc}
 8000370:	ea6f 0404 	mvn.w	r4, r4
 8000374:	3c1f      	subs	r4, #31
 8000376:	da1c      	bge.n	80003b2 <__adddf3+0x1d2>
 8000378:	340c      	adds	r4, #12
 800037a:	dc0e      	bgt.n	800039a <__adddf3+0x1ba>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0220 	rsb	r2, r4, #32
 8000384:	fa20 f004 	lsr.w	r0, r0, r4
 8000388:	fa01 f302 	lsl.w	r3, r1, r2
 800038c:	ea40 0003 	orr.w	r0, r0, r3
 8000390:	fa21 f304 	lsr.w	r3, r1, r4
 8000394:	ea45 0103 	orr.w	r1, r5, r3
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	f1c4 040c 	rsb	r4, r4, #12
 800039e:	f1c4 0220 	rsb	r2, r4, #32
 80003a2:	fa20 f002 	lsr.w	r0, r0, r2
 80003a6:	fa01 f304 	lsl.w	r3, r1, r4
 80003aa:	ea40 0003 	orr.w	r0, r0, r3
 80003ae:	4629      	mov	r1, r5
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	fa21 f004 	lsr.w	r0, r1, r4
 80003b6:	4629      	mov	r1, r5
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	f094 0f00 	teq	r4, #0
 80003be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c2:	bf06      	itte	eq
 80003c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c8:	3401      	addeq	r4, #1
 80003ca:	3d01      	subne	r5, #1
 80003cc:	e74e      	b.n	800026c <__adddf3+0x8c>
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf18      	it	ne
 80003d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d8:	d029      	beq.n	800042e <__adddf3+0x24e>
 80003da:	ea94 0f05 	teq	r4, r5
 80003de:	bf08      	it	eq
 80003e0:	ea90 0f02 	teqeq	r0, r2
 80003e4:	d005      	beq.n	80003f2 <__adddf3+0x212>
 80003e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ea:	bf04      	itt	eq
 80003ec:	4619      	moveq	r1, r3
 80003ee:	4610      	moveq	r0, r2
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	ea91 0f03 	teq	r1, r3
 80003f6:	bf1e      	ittt	ne
 80003f8:	2100      	movne	r1, #0
 80003fa:	2000      	movne	r0, #0
 80003fc:	bd30      	popne	{r4, r5, pc}
 80003fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000402:	d105      	bne.n	8000410 <__adddf3+0x230>
 8000404:	0040      	lsls	r0, r0, #1
 8000406:	4149      	adcs	r1, r1
 8000408:	bf28      	it	cs
 800040a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000414:	bf3c      	itt	cc
 8000416:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041a:	bd30      	popcc	{r4, r5, pc}
 800041c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000420:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000424:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000428:	f04f 0000 	mov.w	r0, #0
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000432:	bf1a      	itte	ne
 8000434:	4619      	movne	r1, r3
 8000436:	4610      	movne	r0, r2
 8000438:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800043c:	bf1c      	itt	ne
 800043e:	460b      	movne	r3, r1
 8000440:	4602      	movne	r2, r0
 8000442:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000446:	bf06      	itte	eq
 8000448:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800044c:	ea91 0f03 	teqeq	r1, r3
 8000450:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	bf00      	nop

08000458 <__aeabi_ui2d>:
 8000458:	f090 0f00 	teq	r0, #0
 800045c:	bf04      	itt	eq
 800045e:	2100      	moveq	r1, #0
 8000460:	4770      	bxeq	lr
 8000462:	b530      	push	{r4, r5, lr}
 8000464:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000468:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800046c:	f04f 0500 	mov.w	r5, #0
 8000470:	f04f 0100 	mov.w	r1, #0
 8000474:	e750      	b.n	8000318 <__adddf3+0x138>
 8000476:	bf00      	nop

08000478 <__aeabi_i2d>:
 8000478:	f090 0f00 	teq	r0, #0
 800047c:	bf04      	itt	eq
 800047e:	2100      	moveq	r1, #0
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000488:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000490:	bf48      	it	mi
 8000492:	4240      	negmi	r0, r0
 8000494:	f04f 0100 	mov.w	r1, #0
 8000498:	e73e      	b.n	8000318 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_f2d>:
 800049c:	0042      	lsls	r2, r0, #1
 800049e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004aa:	bf1f      	itttt	ne
 80004ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b8:	4770      	bxne	lr
 80004ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004be:	bf08      	it	eq
 80004c0:	4770      	bxeq	lr
 80004c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c6:	bf04      	itt	eq
 80004c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004dc:	e71c      	b.n	8000318 <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_ul2d>:
 80004e0:	ea50 0201 	orrs.w	r2, r0, r1
 80004e4:	bf08      	it	eq
 80004e6:	4770      	bxeq	lr
 80004e8:	b530      	push	{r4, r5, lr}
 80004ea:	f04f 0500 	mov.w	r5, #0
 80004ee:	e00a      	b.n	8000506 <__aeabi_l2d+0x16>

080004f0 <__aeabi_l2d>:
 80004f0:	ea50 0201 	orrs.w	r2, r0, r1
 80004f4:	bf08      	it	eq
 80004f6:	4770      	bxeq	lr
 80004f8:	b530      	push	{r4, r5, lr}
 80004fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fe:	d502      	bpl.n	8000506 <__aeabi_l2d+0x16>
 8000500:	4240      	negs	r0, r0
 8000502:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000506:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000512:	f43f aed8 	beq.w	80002c6 <__adddf3+0xe6>
 8000516:	f04f 0203 	mov.w	r2, #3
 800051a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051e:	bf18      	it	ne
 8000520:	3203      	addne	r2, #3
 8000522:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000526:	bf18      	it	ne
 8000528:	3203      	addne	r2, #3
 800052a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052e:	f1c2 0320 	rsb	r3, r2, #32
 8000532:	fa00 fc03 	lsl.w	ip, r0, r3
 8000536:	fa20 f002 	lsr.w	r0, r0, r2
 800053a:	fa01 fe03 	lsl.w	lr, r1, r3
 800053e:	ea40 000e 	orr.w	r0, r0, lr
 8000542:	fa21 f102 	lsr.w	r1, r1, r2
 8000546:	4414      	add	r4, r2
 8000548:	e6bd      	b.n	80002c6 <__adddf3+0xe6>
 800054a:	bf00      	nop

0800054c <__aeabi_dmul>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000552:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000556:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055a:	bf1d      	ittte	ne
 800055c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000560:	ea94 0f0c 	teqne	r4, ip
 8000564:	ea95 0f0c 	teqne	r5, ip
 8000568:	f000 f8de 	bleq	8000728 <__aeabi_dmul+0x1dc>
 800056c:	442c      	add	r4, r5
 800056e:	ea81 0603 	eor.w	r6, r1, r3
 8000572:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000576:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057e:	bf18      	it	ne
 8000580:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000588:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800058c:	d038      	beq.n	8000600 <__aeabi_dmul+0xb4>
 800058e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000592:	f04f 0500 	mov.w	r5, #0
 8000596:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a2:	f04f 0600 	mov.w	r6, #0
 80005a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005aa:	f09c 0f00 	teq	ip, #0
 80005ae:	bf18      	it	ne
 80005b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c0:	d204      	bcs.n	80005cc <__aeabi_dmul+0x80>
 80005c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c6:	416d      	adcs	r5, r5
 80005c8:	eb46 0606 	adc.w	r6, r6, r6
 80005cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e4:	bf88      	it	hi
 80005e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ea:	d81e      	bhi.n	800062a <__aeabi_dmul+0xde>
 80005ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000604:	ea46 0101 	orr.w	r1, r6, r1
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	ea81 0103 	eor.w	r1, r1, r3
 8000610:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000614:	bfc2      	ittt	gt
 8000616:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061e:	bd70      	popgt	{r4, r5, r6, pc}
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f04f 0e00 	mov.w	lr, #0
 8000628:	3c01      	subs	r4, #1
 800062a:	f300 80ab 	bgt.w	8000784 <__aeabi_dmul+0x238>
 800062e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000632:	bfde      	ittt	le
 8000634:	2000      	movle	r0, #0
 8000636:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063a:	bd70      	pople	{r4, r5, r6, pc}
 800063c:	f1c4 0400 	rsb	r4, r4, #0
 8000640:	3c20      	subs	r4, #32
 8000642:	da35      	bge.n	80006b0 <__aeabi_dmul+0x164>
 8000644:	340c      	adds	r4, #12
 8000646:	dc1b      	bgt.n	8000680 <__aeabi_dmul+0x134>
 8000648:	f104 0414 	add.w	r4, r4, #20
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f305 	lsl.w	r3, r0, r5
 8000654:	fa20 f004 	lsr.w	r0, r0, r4
 8000658:	fa01 f205 	lsl.w	r2, r1, r5
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000664:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000668:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800066c:	fa21 f604 	lsr.w	r6, r1, r4
 8000670:	eb42 0106 	adc.w	r1, r2, r6
 8000674:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000678:	bf08      	it	eq
 800067a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067e:	bd70      	pop	{r4, r5, r6, pc}
 8000680:	f1c4 040c 	rsb	r4, r4, #12
 8000684:	f1c4 0520 	rsb	r5, r4, #32
 8000688:	fa00 f304 	lsl.w	r3, r0, r4
 800068c:	fa20 f005 	lsr.w	r0, r0, r5
 8000690:	fa01 f204 	lsl.w	r2, r1, r4
 8000694:	ea40 0002 	orr.w	r0, r0, r2
 8000698:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	f141 0100 	adc.w	r1, r1, #0
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f205 	lsl.w	r2, r0, r5
 80006b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006bc:	fa20 f304 	lsr.w	r3, r0, r4
 80006c0:	fa01 f205 	lsl.w	r2, r1, r5
 80006c4:	ea43 0302 	orr.w	r3, r3, r2
 80006c8:	fa21 f004 	lsr.w	r0, r1, r4
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	fa21 f204 	lsr.w	r2, r1, r4
 80006d4:	ea20 0002 	bic.w	r0, r0, r2
 80006d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e0:	bf08      	it	eq
 80006e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e6:	bd70      	pop	{r4, r5, r6, pc}
 80006e8:	f094 0f00 	teq	r4, #0
 80006ec:	d10f      	bne.n	800070e <__aeabi_dmul+0x1c2>
 80006ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f2:	0040      	lsls	r0, r0, #1
 80006f4:	eb41 0101 	adc.w	r1, r1, r1
 80006f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006fc:	bf08      	it	eq
 80006fe:	3c01      	subeq	r4, #1
 8000700:	d0f7      	beq.n	80006f2 <__aeabi_dmul+0x1a6>
 8000702:	ea41 0106 	orr.w	r1, r1, r6
 8000706:	f095 0f00 	teq	r5, #0
 800070a:	bf18      	it	ne
 800070c:	4770      	bxne	lr
 800070e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000712:	0052      	lsls	r2, r2, #1
 8000714:	eb43 0303 	adc.w	r3, r3, r3
 8000718:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800071c:	bf08      	it	eq
 800071e:	3d01      	subeq	r5, #1
 8000720:	d0f7      	beq.n	8000712 <__aeabi_dmul+0x1c6>
 8000722:	ea43 0306 	orr.w	r3, r3, r6
 8000726:	4770      	bx	lr
 8000728:	ea94 0f0c 	teq	r4, ip
 800072c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000730:	bf18      	it	ne
 8000732:	ea95 0f0c 	teqne	r5, ip
 8000736:	d00c      	beq.n	8000752 <__aeabi_dmul+0x206>
 8000738:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800073c:	bf18      	it	ne
 800073e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000742:	d1d1      	bne.n	80006e8 <__aeabi_dmul+0x19c>
 8000744:	ea81 0103 	eor.w	r1, r1, r3
 8000748:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000756:	bf06      	itte	eq
 8000758:	4610      	moveq	r0, r2
 800075a:	4619      	moveq	r1, r3
 800075c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000760:	d019      	beq.n	8000796 <__aeabi_dmul+0x24a>
 8000762:	ea94 0f0c 	teq	r4, ip
 8000766:	d102      	bne.n	800076e <__aeabi_dmul+0x222>
 8000768:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800076c:	d113      	bne.n	8000796 <__aeabi_dmul+0x24a>
 800076e:	ea95 0f0c 	teq	r5, ip
 8000772:	d105      	bne.n	8000780 <__aeabi_dmul+0x234>
 8000774:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000778:	bf1c      	itt	ne
 800077a:	4610      	movne	r0, r2
 800077c:	4619      	movne	r1, r3
 800077e:	d10a      	bne.n	8000796 <__aeabi_dmul+0x24a>
 8000780:	ea81 0103 	eor.w	r1, r1, r3
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079e:	bd70      	pop	{r4, r5, r6, pc}

080007a0 <__aeabi_ddiv>:
 80007a0:	b570      	push	{r4, r5, r6, lr}
 80007a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ae:	bf1d      	ittte	ne
 80007b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b4:	ea94 0f0c 	teqne	r4, ip
 80007b8:	ea95 0f0c 	teqne	r5, ip
 80007bc:	f000 f8a7 	bleq	800090e <__aeabi_ddiv+0x16e>
 80007c0:	eba4 0405 	sub.w	r4, r4, r5
 80007c4:	ea81 0e03 	eor.w	lr, r1, r3
 80007c8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007cc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d0:	f000 8088 	beq.w	80008e4 <__aeabi_ddiv+0x144>
 80007d4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007dc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f8:	429d      	cmp	r5, r3
 80007fa:	bf08      	it	eq
 80007fc:	4296      	cmpeq	r6, r2
 80007fe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000802:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000806:	d202      	bcs.n	800080e <__aeabi_ddiv+0x6e>
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	1ab6      	subs	r6, r6, r2
 8000810:	eb65 0503 	sbc.w	r5, r5, r3
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 000c 	orrcs.w	r0, r0, ip
 8000834:	085b      	lsrs	r3, r3, #1
 8000836:	ea4f 0232 	mov.w	r2, r2, rrx
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800087c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000880:	d018      	beq.n	80008b4 <__aeabi_ddiv+0x114>
 8000882:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000886:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000892:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000896:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089e:	d1c0      	bne.n	8000822 <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	d10b      	bne.n	80008be <__aeabi_ddiv+0x11e>
 80008a6:	ea41 0100 	orr.w	r1, r1, r0
 80008aa:	f04f 0000 	mov.w	r0, #0
 80008ae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b2:	e7b6      	b.n	8000822 <__aeabi_ddiv+0x82>
 80008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b8:	bf04      	itt	eq
 80008ba:	4301      	orreq	r1, r0
 80008bc:	2000      	moveq	r0, #0
 80008be:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c2:	bf88      	it	hi
 80008c4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c8:	f63f aeaf 	bhi.w	800062a <__aeabi_dmul+0xde>
 80008cc:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d0:	bf04      	itt	eq
 80008d2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008da:	f150 0000 	adcs.w	r0, r0, #0
 80008de:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f0:	bfc2      	ittt	gt
 80008f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	popgt	{r4, r5, r6, pc}
 80008fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000900:	f04f 0e00 	mov.w	lr, #0
 8000904:	3c01      	subs	r4, #1
 8000906:	e690      	b.n	800062a <__aeabi_dmul+0xde>
 8000908:	ea45 0e06 	orr.w	lr, r5, r6
 800090c:	e68d      	b.n	800062a <__aeabi_dmul+0xde>
 800090e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000912:	ea94 0f0c 	teq	r4, ip
 8000916:	bf08      	it	eq
 8000918:	ea95 0f0c 	teqeq	r5, ip
 800091c:	f43f af3b 	beq.w	8000796 <__aeabi_dmul+0x24a>
 8000920:	ea94 0f0c 	teq	r4, ip
 8000924:	d10a      	bne.n	800093c <__aeabi_ddiv+0x19c>
 8000926:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092a:	f47f af34 	bne.w	8000796 <__aeabi_dmul+0x24a>
 800092e:	ea95 0f0c 	teq	r5, ip
 8000932:	f47f af25 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e72c      	b.n	8000796 <__aeabi_dmul+0x24a>
 800093c:	ea95 0f0c 	teq	r5, ip
 8000940:	d106      	bne.n	8000950 <__aeabi_ddiv+0x1b0>
 8000942:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000946:	f43f aefd 	beq.w	8000744 <__aeabi_dmul+0x1f8>
 800094a:	4610      	mov	r0, r2
 800094c:	4619      	mov	r1, r3
 800094e:	e722      	b.n	8000796 <__aeabi_dmul+0x24a>
 8000950:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095a:	f47f aec5 	bne.w	80006e8 <__aeabi_dmul+0x19c>
 800095e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000962:	f47f af0d 	bne.w	8000780 <__aeabi_dmul+0x234>
 8000966:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096a:	f47f aeeb 	bne.w	8000744 <__aeabi_dmul+0x1f8>
 800096e:	e712      	b.n	8000796 <__aeabi_dmul+0x24a>

08000970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	f5ad 5d00 	sub.w	sp, sp, #8192	; 0x2000
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800097a:	f000 fef5 	bl	8001768 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097e:	f000 f873 	bl	8000a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000982:	f000 fb33 	bl	8000fec <MX_GPIO_Init>
  MX_DMA_Init();
 8000986:	f000 faef 	bl	8000f68 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800098a:	f000 fabd 	bl	8000f08 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800098e:	f000 f8cf 	bl	8000b30 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000992:	f000 f93d 	bl	8000c10 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000996:	f000 f999 	bl	8000ccc <MX_ADC3_Init>
  MX_ADC4_Init();
 800099a:	f000 fa09 	bl	8000db0 <MX_ADC4_Init>
  MX_TIM2_Init();
 800099e:	f000 fa65 	bl	8000e6c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80009a2:	f00a fa63 	bl	800ae6c <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t bufferA[USB_BUFFER_SIZE];
  uint8_t bufferB[USB_BUFFER_SIZE];
  for(int i = 0; i<USB_BUFFER_SIZE; i++){
 80009a6:	2300      	movs	r3, #0
 80009a8:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 80009ac:	f102 0204 	add.w	r2, r2, #4
 80009b0:	6013      	str	r3, [r2, #0]
 80009b2:	e038      	b.n	8000a26 <main+0xb6>
      bufferA[i] = i%256;
 80009b4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80009b8:	f103 0304 	add.w	r3, r3, #4
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	425a      	negs	r2, r3
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	b2d2      	uxtb	r2, r2
 80009c4:	bf58      	it	pl
 80009c6:	4253      	negpl	r3, r2
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 80009ce:	f103 0308 	add.w	r3, r3, #8
 80009d2:	4619      	mov	r1, r3
 80009d4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80009d8:	f103 0304 	add.w	r3, r3, #4
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	440b      	add	r3, r1
 80009e0:	3b04      	subs	r3, #4
 80009e2:	701a      	strb	r2, [r3, #0]
      bufferB[i] = i%256;
 80009e4:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80009e8:	f103 0304 	add.w	r3, r3, #4
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	425a      	negs	r2, r3
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	b2d2      	uxtb	r2, r2
 80009f4:	bf58      	it	pl
 80009f6:	4253      	negpl	r3, r2
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	f107 0308 	add.w	r3, r7, #8
 80009fe:	4619      	mov	r1, r3
 8000a00:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000a04:	f103 0304 	add.w	r3, r3, #4
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	440b      	add	r3, r1
 8000a0c:	3b04      	subs	r3, #4
 8000a0e:	701a      	strb	r2, [r3, #0]
  for(int i = 0; i<USB_BUFFER_SIZE; i++){
 8000a10:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000a14:	f103 0304 	add.w	r3, r3, #4
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	f507 5200 	add.w	r2, r7, #8192	; 0x2000
 8000a20:	f102 0204 	add.w	r2, r2, #4
 8000a24:	6013      	str	r3, [r2, #0]
 8000a26:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8000a2a:	f103 0304 	add.w	r3, r3, #4
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000a34:	4293      	cmp	r3, r2
 8000a36:	ddbd      	ble.n	80009b4 <main+0x44>
  }
  HAL_Delay(1000);
 8000a38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a3c:	f000 fefa 	bl	8001834 <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      CDC_Transmit_FS(bufferA, USB_BUFFER_SIZE);
 8000a40:	f507 5380 	add.w	r3, r7, #4096	; 0x1000
 8000a44:	f103 0308 	add.w	r3, r3, #8
 8000a48:	3b04      	subs	r3, #4
 8000a4a:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f00a faca 	bl	800afe8 <CDC_Transmit_FS>

      CDC_Transmit_FS(bufferB, USB_BUFFER_SIZE);
 8000a54:	f107 0308 	add.w	r3, r7, #8
 8000a58:	3b04      	subs	r3, #4
 8000a5a:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f00a fac2 	bl	800afe8 <CDC_Transmit_FS>
      CDC_Transmit_FS(bufferA, USB_BUFFER_SIZE);
 8000a64:	e7ec      	b.n	8000a40 <main+0xd0>
	...

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b0a6      	sub	sp, #152	; 0x98
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a72:	2228      	movs	r2, #40	; 0x28
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f00a fea6 	bl	800b7c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2258      	movs	r2, #88	; 0x58
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f00a fe98 	bl	800b7c8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aa0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa6:	2302      	movs	r3, #2
 8000aa8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ab4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ab8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000abc:	2300      	movs	r3, #0
 8000abe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ac2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f003 fdb2 	bl	8004630 <HAL_RCC_OscConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ad2:	f000 fb1b 	bl	800110c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad6:	230f      	movs	r3, #15
 8000ad8:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ada:	2302      	movs	r3, #2
 8000adc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ae2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ae6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000af0:	2102      	movs	r1, #2
 8000af2:	4618      	mov	r0, r3
 8000af4:	f004 fdf0 	bl	80056d8 <HAL_RCC_ClockConfig>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000afe:	f000 fb05 	bl	800110c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_USART2
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <SystemClock_Config+0xc4>)
 8000b04:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
  PeriphClkInit.USBClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	4618      	mov	r0, r3
 8000b16:	f005 f815 	bl	8005b44 <HAL_RCCEx_PeriphCLKConfig>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000b20:	f000 faf4 	bl	800110c <Error_Handler>
  }
}
 8000b24:	bf00      	nop
 8000b26:	3798      	adds	r7, #152	; 0x98
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	00120002 	.word	0x00120002

08000b30 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b36:	f107 031c 	add.w	r3, r7, #28
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b42:	1d3b      	adds	r3, r7, #4
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
 8000b50:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000b52:	4b2e      	ldr	r3, [pc, #184]	; (8000c0c <MX_ADC1_Init+0xdc>)
 8000b54:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b58:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000b5a:	4b2c      	ldr	r3, [pc, #176]	; (8000c0c <MX_ADC1_Init+0xdc>)
 8000b5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b60:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b62:	4b2a      	ldr	r3, [pc, #168]	; (8000c0c <MX_ADC1_Init+0xdc>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b68:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <MX_ADC1_Init+0xdc>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000b6e:	4b27      	ldr	r3, [pc, #156]	; (8000c0c <MX_ADC1_Init+0xdc>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b74:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <MX_ADC1_Init+0xdc>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b7c:	4b23      	ldr	r3, [pc, #140]	; (8000c0c <MX_ADC1_Init+0xdc>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b82:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <MX_ADC1_Init+0xdc>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b88:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <MX_ADC1_Init+0xdc>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	; (8000c0c <MX_ADC1_Init+0xdc>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b94:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <MX_ADC1_Init+0xdc>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <MX_ADC1_Init+0xdc>)
 8000b9e:	2204      	movs	r2, #4
 8000ba0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <MX_ADC1_Init+0xdc>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ba8:	4b18      	ldr	r3, [pc, #96]	; (8000c0c <MX_ADC1_Init+0xdc>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bae:	4817      	ldr	r0, [pc, #92]	; (8000c0c <MX_ADC1_Init+0xdc>)
 8000bb0:	f000 fe64 	bl	800187c <HAL_ADC_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000bba:	f000 faa7 	bl	800110c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bc2:	f107 031c 	add.w	r3, r7, #28
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4810      	ldr	r0, [pc, #64]	; (8000c0c <MX_ADC1_Init+0xdc>)
 8000bca:	f001 fb3b 	bl	8002244 <HAL_ADCEx_MultiModeConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000bd4:	f000 fa9a 	bl	800110c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000be0:	2300      	movs	r3, #0
 8000be2:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000be4:	2300      	movs	r3, #0
 8000be6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_ADC1_Init+0xdc>)
 8000bf6:	f001 f83b 	bl	8001c70 <HAL_ADC_ConfigChannel>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000c00:	f000 fa84 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	3728      	adds	r7, #40	; 0x28
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20000198 	.word	0x20000198

08000c10 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c16:	463b      	mov	r3, r7
 8000c18:	2200      	movs	r2, #0
 8000c1a:	601a      	str	r2, [r3, #0]
 8000c1c:	605a      	str	r2, [r3, #4]
 8000c1e:	609a      	str	r2, [r3, #8]
 8000c20:	60da      	str	r2, [r3, #12]
 8000c22:	611a      	str	r2, [r3, #16]
 8000c24:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000c26:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <MX_ADC2_Init+0xb4>)
 8000c28:	4a27      	ldr	r2, [pc, #156]	; (8000cc8 <MX_ADC2_Init+0xb8>)
 8000c2a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000c2c:	4b25      	ldr	r3, [pc, #148]	; (8000cc4 <MX_ADC2_Init+0xb4>)
 8000c2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c32:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c34:	4b23      	ldr	r3, [pc, #140]	; (8000cc4 <MX_ADC2_Init+0xb4>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c3a:	4b22      	ldr	r3, [pc, #136]	; (8000cc4 <MX_ADC2_Init+0xb4>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000c40:	4b20      	ldr	r3, [pc, #128]	; (8000cc4 <MX_ADC2_Init+0xb4>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000c46:	4b1f      	ldr	r3, [pc, #124]	; (8000cc4 <MX_ADC2_Init+0xb4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c4e:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <MX_ADC2_Init+0xb4>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c54:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <MX_ADC2_Init+0xb4>)
 8000c56:	2201      	movs	r2, #1
 8000c58:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c5a:	4b1a      	ldr	r3, [pc, #104]	; (8000cc4 <MX_ADC2_Init+0xb4>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000c60:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <MX_ADC2_Init+0xb4>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000c66:	4b17      	ldr	r3, [pc, #92]	; (8000cc4 <MX_ADC2_Init+0xb4>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <MX_ADC2_Init+0xb4>)
 8000c70:	2204      	movs	r2, #4
 8000c72:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <MX_ADC2_Init+0xb4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c7a:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <MX_ADC2_Init+0xb4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c80:	4810      	ldr	r0, [pc, #64]	; (8000cc4 <MX_ADC2_Init+0xb4>)
 8000c82:	f000 fdfb 	bl	800187c <HAL_ADC_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000c8c:	f000 fa3e 	bl	800110c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c90:	2303      	movs	r3, #3
 8000c92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ca8:	463b      	mov	r3, r7
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <MX_ADC2_Init+0xb4>)
 8000cae:	f000 ffdf 	bl	8001c70 <HAL_ADC_ConfigChannel>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000cb8:	f000 fa28 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000cbc:	bf00      	nop
 8000cbe:	3718      	adds	r7, #24
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	200001e8 	.word	0x200001e8
 8000cc8:	50000100 	.word	0x50000100

08000ccc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000cd2:	f107 031c 	add.w	r3, r7, #28
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
 8000cec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000cee:	4b2e      	ldr	r3, [pc, #184]	; (8000da8 <MX_ADC3_Init+0xdc>)
 8000cf0:	4a2e      	ldr	r2, [pc, #184]	; (8000dac <MX_ADC3_Init+0xe0>)
 8000cf2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cf4:	4b2c      	ldr	r3, [pc, #176]	; (8000da8 <MX_ADC3_Init+0xdc>)
 8000cf6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000cfa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000cfc:	4b2a      	ldr	r3, [pc, #168]	; (8000da8 <MX_ADC3_Init+0xdc>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d02:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <MX_ADC3_Init+0xdc>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d08:	4b27      	ldr	r3, [pc, #156]	; (8000da8 <MX_ADC3_Init+0xdc>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	765a      	strb	r2, [r3, #25]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d0e:	4b26      	ldr	r3, [pc, #152]	; (8000da8 <MX_ADC3_Init+0xdc>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d16:	4b24      	ldr	r3, [pc, #144]	; (8000da8 <MX_ADC3_Init+0xdc>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d1c:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <MX_ADC3_Init+0xdc>)
 8000d1e:	2201      	movs	r2, #1
 8000d20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d22:	4b21      	ldr	r3, [pc, #132]	; (8000da8 <MX_ADC3_Init+0xdc>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d28:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <MX_ADC3_Init+0xdc>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d2e:	4b1e      	ldr	r3, [pc, #120]	; (8000da8 <MX_ADC3_Init+0xdc>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d36:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <MX_ADC3_Init+0xdc>)
 8000d38:	2204      	movs	r2, #4
 8000d3a:	615a      	str	r2, [r3, #20]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000d3c:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_ADC3_Init+0xdc>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	761a      	strb	r2, [r3, #24]
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <MX_ADC3_Init+0xdc>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d48:	4817      	ldr	r0, [pc, #92]	; (8000da8 <MX_ADC3_Init+0xdc>)
 8000d4a:	f000 fd97 	bl	800187c <HAL_ADC_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 8000d54:	f000 f9da 	bl	800110c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4619      	mov	r1, r3
 8000d62:	4811      	ldr	r0, [pc, #68]	; (8000da8 <MX_ADC3_Init+0xdc>)
 8000d64:	f001 fa6e 	bl	8002244 <HAL_ADCEx_MultiModeConfigChannel>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_ADC3_Init+0xa6>
  {
    Error_Handler();
 8000d6e:	f000 f9cd 	bl	800110c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d72:	2301      	movs	r3, #1
 8000d74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d76:	2301      	movs	r3, #1
 8000d78:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d8a:	1d3b      	adds	r3, r7, #4
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4806      	ldr	r0, [pc, #24]	; (8000da8 <MX_ADC3_Init+0xdc>)
 8000d90:	f000 ff6e 	bl	8001c70 <HAL_ADC_ConfigChannel>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_ADC3_Init+0xd2>
  {
    Error_Handler();
 8000d9a:	f000 f9b7 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	3728      	adds	r7, #40	; 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000238 	.word	0x20000238
 8000dac:	50000400 	.word	0x50000400

08000db0 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000db6:	463b      	mov	r3, r7
 8000db8:	2200      	movs	r2, #0
 8000dba:	601a      	str	r2, [r3, #0]
 8000dbc:	605a      	str	r2, [r3, #4]
 8000dbe:	609a      	str	r2, [r3, #8]
 8000dc0:	60da      	str	r2, [r3, #12]
 8000dc2:	611a      	str	r2, [r3, #16]
 8000dc4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000dc6:	4b27      	ldr	r3, [pc, #156]	; (8000e64 <MX_ADC4_Init+0xb4>)
 8000dc8:	4a27      	ldr	r2, [pc, #156]	; (8000e68 <MX_ADC4_Init+0xb8>)
 8000dca:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dcc:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <MX_ADC4_Init+0xb4>)
 8000dce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000dd2:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000dd4:	4b23      	ldr	r3, [pc, #140]	; (8000e64 <MX_ADC4_Init+0xb4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000dda:	4b22      	ldr	r3, [pc, #136]	; (8000e64 <MX_ADC4_Init+0xb4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	611a      	str	r2, [r3, #16]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000de0:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <MX_ADC4_Init+0xb4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	765a      	strb	r2, [r3, #25]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000de6:	4b1f      	ldr	r3, [pc, #124]	; (8000e64 <MX_ADC4_Init+0xb4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dee:	4b1d      	ldr	r3, [pc, #116]	; (8000e64 <MX_ADC4_Init+0xb4>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <MX_ADC4_Init+0xb4>)
 8000df6:	2201      	movs	r2, #1
 8000df8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	; (8000e64 <MX_ADC4_Init+0xb4>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60da      	str	r2, [r3, #12]
  hadc4.Init.NbrOfConversion = 1;
 8000e00:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <MX_ADC4_Init+0xb4>)
 8000e02:	2201      	movs	r2, #1
 8000e04:	61da      	str	r2, [r3, #28]
  hadc4.Init.DMAContinuousRequests = DISABLE;
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <MX_ADC4_Init+0xb4>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e0e:	4b15      	ldr	r3, [pc, #84]	; (8000e64 <MX_ADC4_Init+0xb4>)
 8000e10:	2204      	movs	r2, #4
 8000e12:	615a      	str	r2, [r3, #20]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <MX_ADC4_Init+0xb4>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	761a      	strb	r2, [r3, #24]
  hadc4.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <MX_ADC4_Init+0xb4>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000e20:	4810      	ldr	r0, [pc, #64]	; (8000e64 <MX_ADC4_Init+0xb4>)
 8000e22:	f000 fd2b 	bl	800187c <HAL_ADC_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_ADC4_Init+0x80>
  {
    Error_Handler();
 8000e2c:	f000 f96e 	bl	800110c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000e30:	2304      	movs	r3, #4
 8000e32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e34:	2301      	movs	r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e40:	2300      	movs	r3, #0
 8000e42:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000e48:	463b      	mov	r3, r7
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <MX_ADC4_Init+0xb4>)
 8000e4e:	f000 ff0f 	bl	8001c70 <HAL_ADC_ConfigChannel>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_ADC4_Init+0xac>
  {
    Error_Handler();
 8000e58:	f000 f958 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000e5c:	bf00      	nop
 8000e5e:	3718      	adds	r7, #24
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	20000288 	.word	0x20000288
 8000e68:	50000500 	.word	0x50000500

08000e6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b088      	sub	sp, #32
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e72:	f107 0310 	add.w	r3, r7, #16
 8000e76:	2200      	movs	r2, #0
 8000e78:	601a      	str	r2, [r3, #0]
 8000e7a:	605a      	str	r2, [r3, #4]
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <MX_TIM2_Init+0x98>)
 8000e8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e90:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72 - 1;
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <MX_TIM2_Init+0x98>)
 8000e94:	2247      	movs	r2, #71	; 0x47
 8000e96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b1a      	ldr	r3, [pc, #104]	; (8000f04 <MX_TIM2_Init+0x98>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000 - 1;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_TIM2_Init+0x98>)
 8000ea0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ea4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea6:	4b17      	ldr	r3, [pc, #92]	; (8000f04 <MX_TIM2_Init+0x98>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eac:	4b15      	ldr	r3, [pc, #84]	; (8000f04 <MX_TIM2_Init+0x98>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eb2:	4814      	ldr	r0, [pc, #80]	; (8000f04 <MX_TIM2_Init+0x98>)
 8000eb4:	f005 f864 	bl	8005f80 <HAL_TIM_Base_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000ebe:	f000 f925 	bl	800110c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ec6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ec8:	f107 0310 	add.w	r3, r7, #16
 8000ecc:	4619      	mov	r1, r3
 8000ece:	480d      	ldr	r0, [pc, #52]	; (8000f04 <MX_TIM2_Init+0x98>)
 8000ed0:	f005 f9cc 	bl	800626c <HAL_TIM_ConfigClockSource>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000eda:	f000 f917 	bl	800110c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_TIM2_Init+0x98>)
 8000eec:	f005 fbf2 	bl	80066d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000ef6:	f000 f909 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	3720      	adds	r7, #32
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	200003e8 	.word	0x200003e8

08000f08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f0e:	4a15      	ldr	r2, [pc, #84]	; (8000f64 <MX_USART2_UART_Init+0x5c>)
 8000f10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f14:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000f18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f2e:	220c      	movs	r2, #12
 8000f30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f4c:	f005 fc6c 	bl	8006828 <HAL_UART_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f56:	f000 f8d9 	bl	800110c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000434 	.word	0x20000434
 8000f64:	40004400 	.word	0x40004400

08000f68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f6e:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <MX_DMA_Init+0x80>)
 8000f70:	695b      	ldr	r3, [r3, #20]
 8000f72:	4a1d      	ldr	r2, [pc, #116]	; (8000fe8 <MX_DMA_Init+0x80>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	6153      	str	r3, [r2, #20]
 8000f7a:	4b1b      	ldr	r3, [pc, #108]	; (8000fe8 <MX_DMA_Init+0x80>)
 8000f7c:	695b      	ldr	r3, [r3, #20]
 8000f7e:	f003 0301 	and.w	r3, r3, #1
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f86:	4b18      	ldr	r3, [pc, #96]	; (8000fe8 <MX_DMA_Init+0x80>)
 8000f88:	695b      	ldr	r3, [r3, #20]
 8000f8a:	4a17      	ldr	r2, [pc, #92]	; (8000fe8 <MX_DMA_Init+0x80>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	6153      	str	r3, [r2, #20]
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <MX_DMA_Init+0x80>)
 8000f94:	695b      	ldr	r3, [r3, #20]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	200b      	movs	r0, #11
 8000fa4:	f001 fb81 	bl	80026aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fa8:	200b      	movs	r0, #11
 8000faa:	f001 fb9a 	bl	80026e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2100      	movs	r1, #0
 8000fb2:	2038      	movs	r0, #56	; 0x38
 8000fb4:	f001 fb79 	bl	80026aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000fb8:	2038      	movs	r0, #56	; 0x38
 8000fba:	f001 fb92 	bl	80026e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	2039      	movs	r0, #57	; 0x39
 8000fc4:	f001 fb71 	bl	80026aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000fc8:	2039      	movs	r0, #57	; 0x39
 8000fca:	f001 fb8a 	bl	80026e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel5_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	203c      	movs	r0, #60	; 0x3c
 8000fd4:	f001 fb69 	bl	80026aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel5_IRQn);
 8000fd8:	203c      	movs	r0, #60	; 0x3c
 8000fda:	f001 fb82 	bl	80026e2 <HAL_NVIC_EnableIRQ>

}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000

08000fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	4b40      	ldr	r3, [pc, #256]	; (8001104 <MX_GPIO_Init+0x118>)
 8001004:	695b      	ldr	r3, [r3, #20]
 8001006:	4a3f      	ldr	r2, [pc, #252]	; (8001104 <MX_GPIO_Init+0x118>)
 8001008:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800100c:	6153      	str	r3, [r2, #20]
 800100e:	4b3d      	ldr	r3, [pc, #244]	; (8001104 <MX_GPIO_Init+0x118>)
 8001010:	695b      	ldr	r3, [r3, #20]
 8001012:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001016:	613b      	str	r3, [r7, #16]
 8001018:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800101a:	4b3a      	ldr	r3, [pc, #232]	; (8001104 <MX_GPIO_Init+0x118>)
 800101c:	695b      	ldr	r3, [r3, #20]
 800101e:	4a39      	ldr	r2, [pc, #228]	; (8001104 <MX_GPIO_Init+0x118>)
 8001020:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001024:	6153      	str	r3, [r2, #20]
 8001026:	4b37      	ldr	r3, [pc, #220]	; (8001104 <MX_GPIO_Init+0x118>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	4b34      	ldr	r3, [pc, #208]	; (8001104 <MX_GPIO_Init+0x118>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	4a33      	ldr	r2, [pc, #204]	; (8001104 <MX_GPIO_Init+0x118>)
 8001038:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800103c:	6153      	str	r3, [r2, #20]
 800103e:	4b31      	ldr	r3, [pc, #196]	; (8001104 <MX_GPIO_Init+0x118>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104a:	4b2e      	ldr	r3, [pc, #184]	; (8001104 <MX_GPIO_Init+0x118>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	4a2d      	ldr	r2, [pc, #180]	; (8001104 <MX_GPIO_Init+0x118>)
 8001050:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001054:	6153      	str	r3, [r2, #20]
 8001056:	4b2b      	ldr	r3, [pc, #172]	; (8001104 <MX_GPIO_Init+0x118>)
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_RESET);
 8001062:	2200      	movs	r2, #0
 8001064:	2101      	movs	r1, #1
 8001066:	4828      	ldr	r0, [pc, #160]	; (8001108 <MX_GPIO_Init+0x11c>)
 8001068:	f001 fe06 	bl	8002c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TEST_OUTPUT_Pin, GPIO_PIN_RESET);
 800106c:	2200      	movs	r2, #0
 800106e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001072:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001076:	f001 fdff 	bl	8002c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800107a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001080:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	481d      	ldr	r0, [pc, #116]	; (8001108 <MX_GPIO_Init+0x11c>)
 8001092:	f001 fc67 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_EN_Pin */
  GPIO_InitStruct.Pin = USB_EN_Pin;
 8001096:	2301      	movs	r3, #1
 8001098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_EN_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4816      	ldr	r0, [pc, #88]	; (8001108 <MX_GPIO_Init+0x11c>)
 80010ae:	f001 fc59 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010b2:	2320      	movs	r3, #32
 80010b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b6:	2301      	movs	r3, #1
 80010b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010cc:	f001 fc4a 	bl	8002964 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUTPUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUTPUT_Pin;
 80010d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d6:	2301      	movs	r3, #1
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010de:	2303      	movs	r3, #3
 80010e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_OUTPUT_GPIO_Port, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ec:	f001 fc3a 	bl	8002964 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_SET);
 80010f0:	2201      	movs	r2, #1
 80010f2:	2101      	movs	r1, #1
 80010f4:	4804      	ldr	r0, [pc, #16]	; (8001108 <MX_GPIO_Init+0x11c>)
 80010f6:	f001 fdbf 	bl	8002c78 <HAL_GPIO_WritePin>
/* USER CODE END MX_GPIO_Init_2 */
}
 80010fa:	bf00      	nop
 80010fc:	3728      	adds	r7, #40	; 0x28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40021000 	.word	0x40021000
 8001108:	48000800 	.word	0x48000800

0800110c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001110:	b672      	cpsid	i
}
 8001112:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001114:	e7fe      	b.n	8001114 <Error_Handler+0x8>
	...

08001118 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111e:	4b0f      	ldr	r3, [pc, #60]	; (800115c <HAL_MspInit+0x44>)
 8001120:	699b      	ldr	r3, [r3, #24]
 8001122:	4a0e      	ldr	r2, [pc, #56]	; (800115c <HAL_MspInit+0x44>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6193      	str	r3, [r2, #24]
 800112a:	4b0c      	ldr	r3, [pc, #48]	; (800115c <HAL_MspInit+0x44>)
 800112c:	699b      	ldr	r3, [r3, #24]
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	4b09      	ldr	r3, [pc, #36]	; (800115c <HAL_MspInit+0x44>)
 8001138:	69db      	ldr	r3, [r3, #28]
 800113a:	4a08      	ldr	r2, [pc, #32]	; (800115c <HAL_MspInit+0x44>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001140:	61d3      	str	r3, [r2, #28]
 8001142:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_MspInit+0x44>)
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800114e:	2007      	movs	r0, #7
 8001150:	f001 faa0 	bl	8002694 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40021000 	.word	0x40021000

08001160 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b090      	sub	sp, #64	; 0x40
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001180:	d156      	bne.n	8001230 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001182:	4b87      	ldr	r3, [pc, #540]	; (80013a0 <HAL_ADC_MspInit+0x240>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	4a85      	ldr	r2, [pc, #532]	; (80013a0 <HAL_ADC_MspInit+0x240>)
 800118a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800118c:	4b84      	ldr	r3, [pc, #528]	; (80013a0 <HAL_ADC_MspInit+0x240>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d10b      	bne.n	80011ac <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001194:	4b83      	ldr	r3, [pc, #524]	; (80013a4 <HAL_ADC_MspInit+0x244>)
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	4a82      	ldr	r2, [pc, #520]	; (80013a4 <HAL_ADC_MspInit+0x244>)
 800119a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119e:	6153      	str	r3, [r2, #20]
 80011a0:	4b80      	ldr	r3, [pc, #512]	; (80013a4 <HAL_ADC_MspInit+0x244>)
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80011aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b7d      	ldr	r3, [pc, #500]	; (80013a4 <HAL_ADC_MspInit+0x244>)
 80011ae:	695b      	ldr	r3, [r3, #20]
 80011b0:	4a7c      	ldr	r2, [pc, #496]	; (80013a4 <HAL_ADC_MspInit+0x244>)
 80011b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b6:	6153      	str	r3, [r2, #20]
 80011b8:	4b7a      	ldr	r3, [pc, #488]	; (80013a4 <HAL_ADC_MspInit+0x244>)
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
 80011c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011c4:	2301      	movs	r3, #1
 80011c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c8:	2303      	movs	r3, #3
 80011ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011d4:	4619      	mov	r1, r3
 80011d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011da:	f001 fbc3 	bl	8002964 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80011de:	4b72      	ldr	r3, [pc, #456]	; (80013a8 <HAL_ADC_MspInit+0x248>)
 80011e0:	4a72      	ldr	r2, [pc, #456]	; (80013ac <HAL_ADC_MspInit+0x24c>)
 80011e2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011e4:	4b70      	ldr	r3, [pc, #448]	; (80013a8 <HAL_ADC_MspInit+0x248>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011ea:	4b6f      	ldr	r3, [pc, #444]	; (80013a8 <HAL_ADC_MspInit+0x248>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011f0:	4b6d      	ldr	r3, [pc, #436]	; (80013a8 <HAL_ADC_MspInit+0x248>)
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011f6:	4b6c      	ldr	r3, [pc, #432]	; (80013a8 <HAL_ADC_MspInit+0x248>)
 80011f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011fc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011fe:	4b6a      	ldr	r3, [pc, #424]	; (80013a8 <HAL_ADC_MspInit+0x248>)
 8001200:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001204:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001206:	4b68      	ldr	r3, [pc, #416]	; (80013a8 <HAL_ADC_MspInit+0x248>)
 8001208:	2200      	movs	r2, #0
 800120a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800120c:	4b66      	ldr	r3, [pc, #408]	; (80013a8 <HAL_ADC_MspInit+0x248>)
 800120e:	2200      	movs	r2, #0
 8001210:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001212:	4865      	ldr	r0, [pc, #404]	; (80013a8 <HAL_ADC_MspInit+0x248>)
 8001214:	f001 fa7f 	bl	8002716 <HAL_DMA_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_ADC_MspInit+0xc2>
    {
      Error_Handler();
 800121e:	f7ff ff75 	bl	800110c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a60      	ldr	r2, [pc, #384]	; (80013a8 <HAL_ADC_MspInit+0x248>)
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
 8001228:	4a5f      	ldr	r2, [pc, #380]	; (80013a8 <HAL_ADC_MspInit+0x248>)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 800122e:	e12a      	b.n	8001486 <HAL_ADC_MspInit+0x326>
  else if(hadc->Instance==ADC2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a5e      	ldr	r2, [pc, #376]	; (80013b0 <HAL_ADC_MspInit+0x250>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d156      	bne.n	80012e8 <HAL_ADC_MspInit+0x188>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800123a:	4b59      	ldr	r3, [pc, #356]	; (80013a0 <HAL_ADC_MspInit+0x240>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	4a57      	ldr	r2, [pc, #348]	; (80013a0 <HAL_ADC_MspInit+0x240>)
 8001242:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001244:	4b56      	ldr	r3, [pc, #344]	; (80013a0 <HAL_ADC_MspInit+0x240>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d10b      	bne.n	8001264 <HAL_ADC_MspInit+0x104>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800124c:	4b55      	ldr	r3, [pc, #340]	; (80013a4 <HAL_ADC_MspInit+0x244>)
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	4a54      	ldr	r2, [pc, #336]	; (80013a4 <HAL_ADC_MspInit+0x244>)
 8001252:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001256:	6153      	str	r3, [r2, #20]
 8001258:	4b52      	ldr	r3, [pc, #328]	; (80013a4 <HAL_ADC_MspInit+0x244>)
 800125a:	695b      	ldr	r3, [r3, #20]
 800125c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001260:	623b      	str	r3, [r7, #32]
 8001262:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001264:	4b4f      	ldr	r3, [pc, #316]	; (80013a4 <HAL_ADC_MspInit+0x244>)
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	4a4e      	ldr	r2, [pc, #312]	; (80013a4 <HAL_ADC_MspInit+0x244>)
 800126a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126e:	6153      	str	r3, [r2, #20]
 8001270:	4b4c      	ldr	r3, [pc, #304]	; (80013a4 <HAL_ADC_MspInit+0x244>)
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001278:	61fb      	str	r3, [r7, #28]
 800127a:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800127c:	2340      	movs	r3, #64	; 0x40
 800127e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001280:	2303      	movs	r3, #3
 8001282:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001288:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800128c:	4619      	mov	r1, r3
 800128e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001292:	f001 fb67 	bl	8002964 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8001296:	4b47      	ldr	r3, [pc, #284]	; (80013b4 <HAL_ADC_MspInit+0x254>)
 8001298:	4a47      	ldr	r2, [pc, #284]	; (80013b8 <HAL_ADC_MspInit+0x258>)
 800129a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800129c:	4b45      	ldr	r3, [pc, #276]	; (80013b4 <HAL_ADC_MspInit+0x254>)
 800129e:	2200      	movs	r2, #0
 80012a0:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80012a2:	4b44      	ldr	r3, [pc, #272]	; (80013b4 <HAL_ADC_MspInit+0x254>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80012a8:	4b42      	ldr	r3, [pc, #264]	; (80013b4 <HAL_ADC_MspInit+0x254>)
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012ae:	4b41      	ldr	r3, [pc, #260]	; (80013b4 <HAL_ADC_MspInit+0x254>)
 80012b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012b4:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012b6:	4b3f      	ldr	r3, [pc, #252]	; (80013b4 <HAL_ADC_MspInit+0x254>)
 80012b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012bc:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80012be:	4b3d      	ldr	r3, [pc, #244]	; (80013b4 <HAL_ADC_MspInit+0x254>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80012c4:	4b3b      	ldr	r3, [pc, #236]	; (80013b4 <HAL_ADC_MspInit+0x254>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80012ca:	483a      	ldr	r0, [pc, #232]	; (80013b4 <HAL_ADC_MspInit+0x254>)
 80012cc:	f001 fa23 	bl	8002716 <HAL_DMA_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_ADC_MspInit+0x17a>
      Error_Handler();
 80012d6:	f7ff ff19 	bl	800110c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a35      	ldr	r2, [pc, #212]	; (80013b4 <HAL_ADC_MspInit+0x254>)
 80012de:	639a      	str	r2, [r3, #56]	; 0x38
 80012e0:	4a34      	ldr	r2, [pc, #208]	; (80013b4 <HAL_ADC_MspInit+0x254>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6253      	str	r3, [r2, #36]	; 0x24
}
 80012e6:	e0ce      	b.n	8001486 <HAL_ADC_MspInit+0x326>
  else if(hadc->Instance==ADC3)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a33      	ldr	r2, [pc, #204]	; (80013bc <HAL_ADC_MspInit+0x25c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d16e      	bne.n	80013d0 <HAL_ADC_MspInit+0x270>
    HAL_RCC_ADC34_CLK_ENABLED++;
 80012f2:	4b33      	ldr	r3, [pc, #204]	; (80013c0 <HAL_ADC_MspInit+0x260>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	3301      	adds	r3, #1
 80012f8:	4a31      	ldr	r2, [pc, #196]	; (80013c0 <HAL_ADC_MspInit+0x260>)
 80012fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 80012fc:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <HAL_ADC_MspInit+0x260>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d10b      	bne.n	800131c <HAL_ADC_MspInit+0x1bc>
      __HAL_RCC_ADC34_CLK_ENABLE();
 8001304:	4b27      	ldr	r3, [pc, #156]	; (80013a4 <HAL_ADC_MspInit+0x244>)
 8001306:	695b      	ldr	r3, [r3, #20]
 8001308:	4a26      	ldr	r2, [pc, #152]	; (80013a4 <HAL_ADC_MspInit+0x244>)
 800130a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800130e:	6153      	str	r3, [r2, #20]
 8001310:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <HAL_ADC_MspInit+0x244>)
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131c:	4b21      	ldr	r3, [pc, #132]	; (80013a4 <HAL_ADC_MspInit+0x244>)
 800131e:	695b      	ldr	r3, [r3, #20]
 8001320:	4a20      	ldr	r2, [pc, #128]	; (80013a4 <HAL_ADC_MspInit+0x244>)
 8001322:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001326:	6153      	str	r3, [r2, #20]
 8001328:	4b1e      	ldr	r3, [pc, #120]	; (80013a4 <HAL_ADC_MspInit+0x244>)
 800132a:	695b      	ldr	r3, [r3, #20]
 800132c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001334:	2302      	movs	r3, #2
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001338:	2303      	movs	r3, #3
 800133a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001340:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001344:	4619      	mov	r1, r3
 8001346:	481f      	ldr	r0, [pc, #124]	; (80013c4 <HAL_ADC_MspInit+0x264>)
 8001348:	f001 fb0c 	bl	8002964 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Channel5;
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <HAL_ADC_MspInit+0x268>)
 800134e:	4a1f      	ldr	r2, [pc, #124]	; (80013cc <HAL_ADC_MspInit+0x26c>)
 8001350:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001352:	4b1d      	ldr	r3, [pc, #116]	; (80013c8 <HAL_ADC_MspInit+0x268>)
 8001354:	2200      	movs	r2, #0
 8001356:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001358:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_ADC_MspInit+0x268>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800135e:	4b1a      	ldr	r3, [pc, #104]	; (80013c8 <HAL_ADC_MspInit+0x268>)
 8001360:	2280      	movs	r2, #128	; 0x80
 8001362:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_ADC_MspInit+0x268>)
 8001366:	f44f 7280 	mov.w	r2, #256	; 0x100
 800136a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_ADC_MspInit+0x268>)
 800136e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001372:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.Mode = DMA_NORMAL;
 8001374:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <HAL_ADC_MspInit+0x268>)
 8001376:	2200      	movs	r2, #0
 8001378:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 800137a:	4b13      	ldr	r3, [pc, #76]	; (80013c8 <HAL_ADC_MspInit+0x268>)
 800137c:	2200      	movs	r2, #0
 800137e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001380:	4811      	ldr	r0, [pc, #68]	; (80013c8 <HAL_ADC_MspInit+0x268>)
 8001382:	f001 f9c8 	bl	8002716 <HAL_DMA_Init>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_ADC_MspInit+0x230>
      Error_Handler();
 800138c:	f7ff febe 	bl	800110c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4a0d      	ldr	r2, [pc, #52]	; (80013c8 <HAL_ADC_MspInit+0x268>)
 8001394:	639a      	str	r2, [r3, #56]	; 0x38
 8001396:	4a0c      	ldr	r2, [pc, #48]	; (80013c8 <HAL_ADC_MspInit+0x268>)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6253      	str	r3, [r2, #36]	; 0x24
}
 800139c:	e073      	b.n	8001486 <HAL_ADC_MspInit+0x326>
 800139e:	bf00      	nop
 80013a0:	200004bc 	.word	0x200004bc
 80013a4:	40021000 	.word	0x40021000
 80013a8:	200002d8 	.word	0x200002d8
 80013ac:	40020008 	.word	0x40020008
 80013b0:	50000100 	.word	0x50000100
 80013b4:	2000031c 	.word	0x2000031c
 80013b8:	40020408 	.word	0x40020408
 80013bc:	50000400 	.word	0x50000400
 80013c0:	200004c0 	.word	0x200004c0
 80013c4:	48000400 	.word	0x48000400
 80013c8:	20000360 	.word	0x20000360
 80013cc:	40020458 	.word	0x40020458
  else if(hadc->Instance==ADC4)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a2e      	ldr	r2, [pc, #184]	; (8001490 <HAL_ADC_MspInit+0x330>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d155      	bne.n	8001486 <HAL_ADC_MspInit+0x326>
    HAL_RCC_ADC34_CLK_ENABLED++;
 80013da:	4b2e      	ldr	r3, [pc, #184]	; (8001494 <HAL_ADC_MspInit+0x334>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	4a2c      	ldr	r2, [pc, #176]	; (8001494 <HAL_ADC_MspInit+0x334>)
 80013e2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC34_CLK_ENABLED==1){
 80013e4:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <HAL_ADC_MspInit+0x334>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d10b      	bne.n	8001404 <HAL_ADC_MspInit+0x2a4>
      __HAL_RCC_ADC34_CLK_ENABLE();
 80013ec:	4b2a      	ldr	r3, [pc, #168]	; (8001498 <HAL_ADC_MspInit+0x338>)
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	4a29      	ldr	r2, [pc, #164]	; (8001498 <HAL_ADC_MspInit+0x338>)
 80013f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80013f6:	6153      	str	r3, [r2, #20]
 80013f8:	4b27      	ldr	r3, [pc, #156]	; (8001498 <HAL_ADC_MspInit+0x338>)
 80013fa:	695b      	ldr	r3, [r3, #20]
 80013fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001404:	4b24      	ldr	r3, [pc, #144]	; (8001498 <HAL_ADC_MspInit+0x338>)
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	4a23      	ldr	r2, [pc, #140]	; (8001498 <HAL_ADC_MspInit+0x338>)
 800140a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800140e:	6153      	str	r3, [r2, #20]
 8001410:	4b21      	ldr	r3, [pc, #132]	; (8001498 <HAL_ADC_MspInit+0x338>)
 8001412:	695b      	ldr	r3, [r3, #20]
 8001414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800141c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001422:	2303      	movs	r3, #3
 8001424:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800142e:	4619      	mov	r1, r3
 8001430:	481a      	ldr	r0, [pc, #104]	; (800149c <HAL_ADC_MspInit+0x33c>)
 8001432:	f001 fa97 	bl	8002964 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA2_Channel2;
 8001436:	4b1a      	ldr	r3, [pc, #104]	; (80014a0 <HAL_ADC_MspInit+0x340>)
 8001438:	4a1a      	ldr	r2, [pc, #104]	; (80014a4 <HAL_ADC_MspInit+0x344>)
 800143a:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800143c:	4b18      	ldr	r3, [pc, #96]	; (80014a0 <HAL_ADC_MspInit+0x340>)
 800143e:	2200      	movs	r2, #0
 8001440:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001442:	4b17      	ldr	r3, [pc, #92]	; (80014a0 <HAL_ADC_MspInit+0x340>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8001448:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <HAL_ADC_MspInit+0x340>)
 800144a:	2280      	movs	r2, #128	; 0x80
 800144c:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <HAL_ADC_MspInit+0x340>)
 8001450:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001454:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001456:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <HAL_ADC_MspInit+0x340>)
 8001458:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800145c:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.Mode = DMA_NORMAL;
 800145e:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <HAL_ADC_MspInit+0x340>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <HAL_ADC_MspInit+0x340>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800146a:	480d      	ldr	r0, [pc, #52]	; (80014a0 <HAL_ADC_MspInit+0x340>)
 800146c:	f001 f953 	bl	8002716 <HAL_DMA_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <HAL_ADC_MspInit+0x31a>
      Error_Handler();
 8001476:	f7ff fe49 	bl	800110c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <HAL_ADC_MspInit+0x340>)
 800147e:	639a      	str	r2, [r3, #56]	; 0x38
 8001480:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <HAL_ADC_MspInit+0x340>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6253      	str	r3, [r2, #36]	; 0x24
}
 8001486:	bf00      	nop
 8001488:	3740      	adds	r7, #64	; 0x40
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	50000500 	.word	0x50000500
 8001494:	200004c0 	.word	0x200004c0
 8001498:	40021000 	.word	0x40021000
 800149c:	48000400 	.word	0x48000400
 80014a0:	200003a4 	.word	0x200003a4
 80014a4:	4002041c 	.word	0x4002041c

080014a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b8:	d113      	bne.n	80014e2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ba:	4b0c      	ldr	r3, [pc, #48]	; (80014ec <HAL_TIM_Base_MspInit+0x44>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	4a0b      	ldr	r2, [pc, #44]	; (80014ec <HAL_TIM_Base_MspInit+0x44>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	61d3      	str	r3, [r2, #28]
 80014c6:	4b09      	ldr	r3, [pc, #36]	; (80014ec <HAL_TIM_Base_MspInit+0x44>)
 80014c8:	69db      	ldr	r3, [r3, #28]
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	60fb      	str	r3, [r7, #12]
 80014d0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2100      	movs	r1, #0
 80014d6:	201c      	movs	r0, #28
 80014d8:	f001 f8e7 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014dc:	201c      	movs	r0, #28
 80014de:	f001 f900 	bl	80026e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000

080014f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a17      	ldr	r2, [pc, #92]	; (800156c <HAL_UART_MspInit+0x7c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d128      	bne.n	8001564 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001512:	4b17      	ldr	r3, [pc, #92]	; (8001570 <HAL_UART_MspInit+0x80>)
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	4a16      	ldr	r2, [pc, #88]	; (8001570 <HAL_UART_MspInit+0x80>)
 8001518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800151c:	61d3      	str	r3, [r2, #28]
 800151e:	4b14      	ldr	r3, [pc, #80]	; (8001570 <HAL_UART_MspInit+0x80>)
 8001520:	69db      	ldr	r3, [r3, #28]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	4b11      	ldr	r3, [pc, #68]	; (8001570 <HAL_UART_MspInit+0x80>)
 800152c:	695b      	ldr	r3, [r3, #20]
 800152e:	4a10      	ldr	r2, [pc, #64]	; (8001570 <HAL_UART_MspInit+0x80>)
 8001530:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001534:	6153      	str	r3, [r2, #20]
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <HAL_UART_MspInit+0x80>)
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001542:	230c      	movs	r3, #12
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001552:	2307      	movs	r3, #7
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001560:	f001 fa00 	bl	8002964 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001564:	bf00      	nop
 8001566:	3728      	adds	r7, #40	; 0x28
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40004400 	.word	0x40004400
 8001570:	40021000 	.word	0x40021000

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001578:	e7fe      	b.n	8001578 <NMI_Handler+0x4>

0800157a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <MemManage_Handler+0x4>

08001586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <UsageFault_Handler+0x4>

08001592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c0:	f000 f918 	bl	80017f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015ce:	4825      	ldr	r0, [pc, #148]	; (8001664 <DMA1_Channel1_IRQHandler+0x9c>)
 80015d0:	f001 f8e8 	bl	80027a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  uint32_t result = 0;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
  for(int i = 1; i < OVERSAMPLE_RATE+1; i++){
 80015d8:	2301      	movs	r3, #1
 80015da:	61bb      	str	r3, [r7, #24]
 80015dc:	e00a      	b.n	80015f4 <DMA1_Channel1_IRQHandler+0x2c>
      result += adc_buffer[i];
 80015de:	4a22      	ldr	r2, [pc, #136]	; (8001668 <DMA1_Channel1_IRQHandler+0xa0>)
 80015e0:	69bb      	ldr	r3, [r7, #24]
 80015e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015e6:	461a      	mov	r2, r3
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	4413      	add	r3, r2
 80015ec:	61fb      	str	r3, [r7, #28]
  for(int i = 1; i < OVERSAMPLE_RATE+1; i++){
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	3301      	adds	r3, #1
 80015f2:	61bb      	str	r3, [r7, #24]
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2b20      	cmp	r3, #32
 80015f8:	ddf1      	ble.n	80015de <DMA1_Channel1_IRQHandler+0x16>
  }
  double original = adc_buffer[10]/4096.0 * 3.0;
 80015fa:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <DMA1_Channel1_IRQHandler+0xa0>)
 80015fc:	8a9b      	ldrh	r3, [r3, #20]
 80015fe:	4618      	mov	r0, r3
 8001600:	f7fe ff3a 	bl	8000478 <__aeabi_i2d>
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <DMA1_Channel1_IRQHandler+0xa4>)
 800160a:	f7ff f8c9 	bl	80007a0 <__aeabi_ddiv>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	f04f 0200 	mov.w	r2, #0
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <DMA1_Channel1_IRQHandler+0xa8>)
 800161c:	f7fe ff96 	bl	800054c <__aeabi_dmul>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double oversampled = (result>>1)/65536.0 * 3.0;
 8001628:	69fb      	ldr	r3, [r7, #28]
 800162a:	085b      	lsrs	r3, r3, #1
 800162c:	4618      	mov	r0, r3
 800162e:	f7fe ff13 	bl	8000458 <__aeabi_ui2d>
 8001632:	f04f 0200 	mov.w	r2, #0
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <DMA1_Channel1_IRQHandler+0xac>)
 8001638:	f7ff f8b2 	bl	80007a0 <__aeabi_ddiv>
 800163c:	4602      	mov	r2, r0
 800163e:	460b      	mov	r3, r1
 8001640:	4610      	mov	r0, r2
 8001642:	4619      	mov	r1, r3
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	4b09      	ldr	r3, [pc, #36]	; (8001670 <DMA1_Channel1_IRQHandler+0xa8>)
 800164a:	f7fe ff7f 	bl	800054c <__aeabi_dmul>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	e9c7 2302 	strd	r2, r3, [r7, #8]
  int a = 10;
 8001656:	230a      	movs	r3, #10
 8001658:	607b      	str	r3, [r7, #4]
  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	3720      	adds	r7, #32
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200002d8 	.word	0x200002d8
 8001668:	200004c4 	.word	0x200004c4
 800166c:	40b00000 	.word	0x40b00000
 8001670:	40080000 	.word	0x40080000
 8001674:	40f00000 	.word	0x40f00000

08001678 <USB_HP_CAN_TX_IRQHandler>:

/**
  * @brief This function handles USB high priority or CAN_TX interrupts.
  */
void USB_HP_CAN_TX_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 0 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <USB_HP_CAN_TX_IRQHandler+0x10>)
 800167e:	f001 fc0b 	bl	8002e98 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_CAN_TX_IRQn 1 */

  /* USER CODE END USB_HP_CAN_TX_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000e50 	.word	0x20000e50

0800168c <USB_LP_CAN_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN_RX0 interrupts.
  */
void USB_LP_CAN_RX0_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <USB_LP_CAN_RX0_IRQHandler+0x10>)
 8001692:	f001 fc01 	bl	8002e98 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN_RX0_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000e50 	.word	0x20000e50

080016a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <TIM2_IRQHandler+0x10>)
 80016a6:	f004 fcc2 	bl	800602e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
//  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
//  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 33);
  /* USER CODE END TIM2_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200003e8 	.word	0x200003e8

080016b4 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80016b8:	4802      	ldr	r0, [pc, #8]	; (80016c4 <DMA2_Channel1_IRQHandler+0x10>)
 80016ba:	f001 f873 	bl	80027a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2000031c 	.word	0x2000031c

080016c8 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80016cc:	4802      	ldr	r0, [pc, #8]	; (80016d8 <DMA2_Channel2_IRQHandler+0x10>)
 80016ce:	f001 f869 	bl	80027a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200003a4 	.word	0x200003a4

080016dc <DMA2_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA2 channel5 global interrupt.
  */
void DMA2_Channel5_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel5_IRQn 0 */

  /* USER CODE END DMA2_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <DMA2_Channel5_IRQHandler+0x10>)
 80016e2:	f001 f85f 	bl	80027a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel5_IRQn 1 */

  /* USER CODE END DMA2_Channel5_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000360 	.word	0x20000360

080016f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f4:	4b06      	ldr	r3, [pc, #24]	; (8001710 <SystemInit+0x20>)
 80016f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016fa:	4a05      	ldr	r2, [pc, #20]	; (8001710 <SystemInit+0x20>)
 80016fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001700:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	; 800174c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001718:	f7ff ffea 	bl	80016f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800171c:	480c      	ldr	r0, [pc, #48]	; (8001750 <LoopForever+0x6>)
  ldr r1, =_edata
 800171e:	490d      	ldr	r1, [pc, #52]	; (8001754 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <LoopForever+0xe>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0a      	ldr	r2, [pc, #40]	; (800175c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001734:	4c0a      	ldr	r4, [pc, #40]	; (8001760 <LoopForever+0x16>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001742:	f00a f849 	bl	800b7d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001746:	f7ff f913 	bl	8000970 <main>

0800174a <LoopForever>:

LoopForever:
    b LoopForever
 800174a:	e7fe      	b.n	800174a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800174c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001754:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 8001758:	0800b8c0 	.word	0x0800b8c0
  ldr r2, =_sbss
 800175c:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 8001760:	2000135c 	.word	0x2000135c

08001764 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC1_2_IRQHandler>
	...

08001768 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_Init+0x28>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a07      	ldr	r2, [pc, #28]	; (8001790 <HAL_Init+0x28>)
 8001772:	f043 0310 	orr.w	r3, r3, #16
 8001776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001778:	2003      	movs	r0, #3
 800177a:	f000 ff8b 	bl	8002694 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177e:	2000      	movs	r0, #0
 8001780:	f000 f808 	bl	8001794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001784:	f7ff fcc8 	bl	8001118 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40022000 	.word	0x40022000

08001794 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_InitTick+0x54>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_InitTick+0x58>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4619      	mov	r1, r3
 80017a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 ffa3 	bl	80026fe <HAL_SYSTICK_Config>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e00e      	b.n	80017e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b0f      	cmp	r3, #15
 80017c6:	d80a      	bhi.n	80017de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c8:	2200      	movs	r2, #0
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295
 80017d0:	f000 ff6b 	bl	80026aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d4:	4a06      	ldr	r2, [pc, #24]	; (80017f0 <HAL_InitTick+0x5c>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	e000      	b.n	80017e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000000 	.word	0x20000000
 80017ec:	20000008 	.word	0x20000008
 80017f0:	20000004 	.word	0x20000004

080017f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_IncTick+0x20>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_IncTick+0x24>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4413      	add	r3, r2
 8001804:	4a04      	ldr	r2, [pc, #16]	; (8001818 <HAL_IncTick+0x24>)
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000008 	.word	0x20000008
 8001818:	20000544 	.word	0x20000544

0800181c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <HAL_GetTick+0x14>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	20000544 	.word	0x20000544

08001834 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800183c:	f7ff ffee 	bl	800181c <HAL_GetTick>
 8001840:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800184c:	d005      	beq.n	800185a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800184e:	4b0a      	ldr	r3, [pc, #40]	; (8001878 <HAL_Delay+0x44>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800185a:	bf00      	nop
 800185c:	f7ff ffde 	bl	800181c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	68bb      	ldr	r3, [r7, #8]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	429a      	cmp	r2, r3
 800186a:	d8f7      	bhi.n	800185c <HAL_Delay+0x28>
  {
  }
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000008 	.word	0x20000008

0800187c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b09a      	sub	sp, #104	; 0x68
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001884:	2300      	movs	r3, #0
 8001886:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800188a:	2300      	movs	r3, #0
 800188c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e1e3      	b.n	8001c64 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	f003 0310 	and.w	r3, r3, #16
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d176      	bne.n	800199c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d152      	bne.n	800195c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff fc45 	bl	8001160 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d13b      	bne.n	800195c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 fd9f 	bl	8002428 <ADC_Disable>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	f003 0310 	and.w	r3, r3, #16
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d12f      	bne.n	800195c <HAL_ADC_Init+0xe0>
 80018fc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001900:	2b00      	cmp	r3, #0
 8001902:	d12b      	bne.n	800195c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800190c:	f023 0302 	bic.w	r3, r3, #2
 8001910:	f043 0202 	orr.w	r2, r3, #2
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001926:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001936:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001938:	4b92      	ldr	r3, [pc, #584]	; (8001b84 <HAL_ADC_Init+0x308>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a92      	ldr	r2, [pc, #584]	; (8001b88 <HAL_ADC_Init+0x30c>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	0c9a      	lsrs	r2, r3, #18
 8001944:	4613      	mov	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	4413      	add	r3, r2
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800194e:	e002      	b.n	8001956 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	3b01      	subs	r3, #1
 8001954:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d1f9      	bne.n	8001950 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d007      	beq.n	800197a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001974:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001978:	d110      	bne.n	800199c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f023 0312 	bic.w	r3, r3, #18
 8001982:	f043 0210 	orr.w	r2, r3, #16
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198e:	f043 0201 	orr.w	r2, r3, #1
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a0:	f003 0310 	and.w	r3, r3, #16
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	f040 8150 	bne.w	8001c4a <HAL_ADC_Init+0x3ce>
 80019aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f040 814b 	bne.w	8001c4a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f040 8143 	bne.w	8001c4a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019cc:	f043 0202 	orr.w	r2, r3, #2
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019dc:	d004      	beq.n	80019e8 <HAL_ADC_Init+0x16c>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a6a      	ldr	r2, [pc, #424]	; (8001b8c <HAL_ADC_Init+0x310>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d101      	bne.n	80019ec <HAL_ADC_Init+0x170>
 80019e8:	4b69      	ldr	r3, [pc, #420]	; (8001b90 <HAL_ADC_Init+0x314>)
 80019ea:	e000      	b.n	80019ee <HAL_ADC_Init+0x172>
 80019ec:	4b69      	ldr	r3, [pc, #420]	; (8001b94 <HAL_ADC_Init+0x318>)
 80019ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019f8:	d102      	bne.n	8001a00 <HAL_ADC_Init+0x184>
 80019fa:	4b64      	ldr	r3, [pc, #400]	; (8001b8c <HAL_ADC_Init+0x310>)
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	e01a      	b.n	8001a36 <HAL_ADC_Init+0x1ba>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a61      	ldr	r2, [pc, #388]	; (8001b8c <HAL_ADC_Init+0x310>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d103      	bne.n	8001a12 <HAL_ADC_Init+0x196>
 8001a0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001a0e:	60fb      	str	r3, [r7, #12]
 8001a10:	e011      	b.n	8001a36 <HAL_ADC_Init+0x1ba>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a60      	ldr	r2, [pc, #384]	; (8001b98 <HAL_ADC_Init+0x31c>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d102      	bne.n	8001a22 <HAL_ADC_Init+0x1a6>
 8001a1c:	4b5f      	ldr	r3, [pc, #380]	; (8001b9c <HAL_ADC_Init+0x320>)
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	e009      	b.n	8001a36 <HAL_ADC_Init+0x1ba>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a5d      	ldr	r2, [pc, #372]	; (8001b9c <HAL_ADC_Init+0x320>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d102      	bne.n	8001a32 <HAL_ADC_Init+0x1b6>
 8001a2c:	4b5a      	ldr	r3, [pc, #360]	; (8001b98 <HAL_ADC_Init+0x31c>)
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	e001      	b.n	8001a36 <HAL_ADC_Init+0x1ba>
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d108      	bne.n	8001a56 <HAL_ADC_Init+0x1da>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d101      	bne.n	8001a56 <HAL_ADC_Init+0x1da>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <HAL_ADC_Init+0x1dc>
 8001a56:	2300      	movs	r3, #0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d11c      	bne.n	8001a96 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a5c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d010      	beq.n	8001a84 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d107      	bne.n	8001a7e <HAL_ADC_Init+0x202>
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0301 	and.w	r3, r3, #1
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d101      	bne.n	8001a7e <HAL_ADC_Init+0x202>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <HAL_ADC_Init+0x204>
 8001a7e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d108      	bne.n	8001a96 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001a84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	431a      	orrs	r2, r3
 8001a92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a94:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	7e5b      	ldrb	r3, [r3, #25]
 8001a9a:	035b      	lsls	r3, r3, #13
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001aa0:	2a01      	cmp	r2, #1
 8001aa2:	d002      	beq.n	8001aaa <HAL_ADC_Init+0x22e>
 8001aa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001aa8:	e000      	b.n	8001aac <HAL_ADC_Init+0x230>
 8001aaa:	2200      	movs	r2, #0
 8001aac:	431a      	orrs	r2, r3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001abc:	4313      	orrs	r3, r2
 8001abe:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d11b      	bne.n	8001b02 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7e5b      	ldrb	r3, [r3, #25]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d109      	bne.n	8001ae6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	045a      	lsls	r2, r3, #17
 8001ada:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001adc:	4313      	orrs	r3, r2
 8001ade:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae2:	663b      	str	r3, [r7, #96]	; 0x60
 8001ae4:	e00d      	b.n	8001b02 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001aee:	f043 0220 	orr.w	r2, r3, #32
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afa:	f043 0201 	orr.w	r2, r3, #1
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d054      	beq.n	8001bb4 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a22      	ldr	r2, [pc, #136]	; (8001b98 <HAL_ADC_Init+0x31c>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d004      	beq.n	8001b1e <HAL_ADC_Init+0x2a2>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a20      	ldr	r2, [pc, #128]	; (8001b9c <HAL_ADC_Init+0x320>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d140      	bne.n	8001ba0 <HAL_ADC_Init+0x324>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b22:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001b26:	d02a      	beq.n	8001b7e <HAL_ADC_Init+0x302>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b30:	d022      	beq.n	8001b78 <HAL_ADC_Init+0x2fc>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b36:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001b3a:	d01a      	beq.n	8001b72 <HAL_ADC_Init+0x2f6>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b40:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001b44:	d012      	beq.n	8001b6c <HAL_ADC_Init+0x2f0>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4a:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001b4e:	d00a      	beq.n	8001b66 <HAL_ADC_Init+0x2ea>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b54:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001b58:	d002      	beq.n	8001b60 <HAL_ADC_Init+0x2e4>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5e:	e023      	b.n	8001ba8 <HAL_ADC_Init+0x32c>
 8001b60:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001b64:	e020      	b.n	8001ba8 <HAL_ADC_Init+0x32c>
 8001b66:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001b6a:	e01d      	b.n	8001ba8 <HAL_ADC_Init+0x32c>
 8001b6c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001b70:	e01a      	b.n	8001ba8 <HAL_ADC_Init+0x32c>
 8001b72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b76:	e017      	b.n	8001ba8 <HAL_ADC_Init+0x32c>
 8001b78:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001b7c:	e014      	b.n	8001ba8 <HAL_ADC_Init+0x32c>
 8001b7e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001b82:	e011      	b.n	8001ba8 <HAL_ADC_Init+0x32c>
 8001b84:	20000000 	.word	0x20000000
 8001b88:	431bde83 	.word	0x431bde83
 8001b8c:	50000100 	.word	0x50000100
 8001b90:	50000300 	.word	0x50000300
 8001b94:	50000700 	.word	0x50000700
 8001b98:	50000400 	.word	0x50000400
 8001b9c:	50000500 	.word	0x50000500
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001bac:	4313      	orrs	r3, r2
 8001bae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d114      	bne.n	8001bec <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	6812      	ldr	r2, [r2, #0]
 8001bcc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bd0:	f023 0302 	bic.w	r3, r3, #2
 8001bd4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	7e1b      	ldrb	r3, [r3, #24]
 8001bda:	039a      	lsls	r2, r3, #14
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4313      	orrs	r3, r2
 8001be6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001be8:	4313      	orrs	r3, r2
 8001bea:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	4b1e      	ldr	r3, [pc, #120]	; (8001c6c <HAL_ADC_Init+0x3f0>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6812      	ldr	r2, [r2, #0]
 8001bfa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001bfc:	430b      	orrs	r3, r1
 8001bfe:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	691b      	ldr	r3, [r3, #16]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d10c      	bne.n	8001c22 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	f023 010f 	bic.w	r1, r3, #15
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69db      	ldr	r3, [r3, #28]
 8001c16:	1e5a      	subs	r2, r3, #1
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	631a      	str	r2, [r3, #48]	; 0x30
 8001c20:	e007      	b.n	8001c32 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 020f 	bic.w	r2, r2, #15
 8001c30:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f023 0303 	bic.w	r3, r3, #3
 8001c40:	f043 0201 	orr.w	r2, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40
 8001c48:	e00a      	b.n	8001c60 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f023 0312 	bic.w	r3, r3, #18
 8001c52:	f043 0210 	orr.w	r2, r3, #16
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001c60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3768      	adds	r7, #104	; 0x68
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	fff0c007 	.word	0xfff0c007

08001c70 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b09b      	sub	sp, #108	; 0x6c
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c8a:	2b01      	cmp	r3, #1
 8001c8c:	d101      	bne.n	8001c92 <HAL_ADC_ConfigChannel+0x22>
 8001c8e:	2302      	movs	r3, #2
 8001c90:	e2c8      	b.n	8002224 <HAL_ADC_ConfigChannel+0x5b4>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2201      	movs	r2, #1
 8001c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	f040 82ac 	bne.w	8002202 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d81c      	bhi.n	8001cec <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685a      	ldr	r2, [r3, #4]
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	231f      	movs	r3, #31
 8001cc8:	4093      	lsls	r3, r2
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	4019      	ands	r1, r3
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	6818      	ldr	r0, [r3, #0]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685a      	ldr	r2, [r3, #4]
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	4413      	add	r3, r2
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fa00 f203 	lsl.w	r2, r0, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	631a      	str	r2, [r3, #48]	; 0x30
 8001cea:	e063      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b09      	cmp	r3, #9
 8001cf2:	d81e      	bhi.n	8001d32 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	3b1e      	subs	r3, #30
 8001d08:	221f      	movs	r2, #31
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	4019      	ands	r1, r3
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	6818      	ldr	r0, [r3, #0]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4413      	add	r3, r2
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	3b1e      	subs	r3, #30
 8001d24:	fa00 f203 	lsl.w	r2, r0, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	635a      	str	r2, [r3, #52]	; 0x34
 8001d30:	e040      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b0e      	cmp	r3, #14
 8001d38:	d81e      	bhi.n	8001d78 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	4413      	add	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	3b3c      	subs	r3, #60	; 0x3c
 8001d4e:	221f      	movs	r2, #31
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	4019      	ands	r1, r3
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	6818      	ldr	r0, [r3, #0]
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	4413      	add	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	3b3c      	subs	r3, #60	; 0x3c
 8001d6a:	fa00 f203 	lsl.w	r2, r0, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	639a      	str	r2, [r3, #56]	; 0x38
 8001d76:	e01d      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	3b5a      	subs	r3, #90	; 0x5a
 8001d8c:	221f      	movs	r2, #31
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	4019      	ands	r1, r3
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	6818      	ldr	r0, [r3, #0]
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	3b5a      	subs	r3, #90	; 0x5a
 8001da8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	430a      	orrs	r2, r1
 8001db2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f003 030c 	and.w	r3, r3, #12
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f040 80e5 	bne.w	8001f8e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b09      	cmp	r3, #9
 8001dca:	d91c      	bls.n	8001e06 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6999      	ldr	r1, [r3, #24]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	005b      	lsls	r3, r3, #1
 8001dda:	4413      	add	r3, r2
 8001ddc:	3b1e      	subs	r3, #30
 8001dde:	2207      	movs	r2, #7
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	4019      	ands	r1, r3
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	6898      	ldr	r0, [r3, #8]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	4613      	mov	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	3b1e      	subs	r3, #30
 8001df8:	fa00 f203 	lsl.w	r2, r0, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	430a      	orrs	r2, r1
 8001e02:	619a      	str	r2, [r3, #24]
 8001e04:	e019      	b.n	8001e3a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6959      	ldr	r1, [r3, #20]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4613      	mov	r3, r2
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4413      	add	r3, r2
 8001e16:	2207      	movs	r2, #7
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	43db      	mvns	r3, r3
 8001e1e:	4019      	ands	r1, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	6898      	ldr	r0, [r3, #8]
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	4413      	add	r3, r2
 8001e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	695a      	ldr	r2, [r3, #20]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	68db      	ldr	r3, [r3, #12]
 8001e44:	08db      	lsrs	r3, r3, #3
 8001e46:	f003 0303 	and.w	r3, r3, #3
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	3b01      	subs	r3, #1
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d84f      	bhi.n	8001efc <HAL_ADC_ConfigChannel+0x28c>
 8001e5c:	a201      	add	r2, pc, #4	; (adr r2, 8001e64 <HAL_ADC_ConfigChannel+0x1f4>)
 8001e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e62:	bf00      	nop
 8001e64:	08001e75 	.word	0x08001e75
 8001e68:	08001e97 	.word	0x08001e97
 8001e6c:	08001eb9 	.word	0x08001eb9
 8001e70:	08001edb 	.word	0x08001edb
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e7a:	4b99      	ldr	r3, [pc, #612]	; (80020e0 <HAL_ADC_ConfigChannel+0x470>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	6812      	ldr	r2, [r2, #0]
 8001e82:	0691      	lsls	r1, r2, #26
 8001e84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001e86:	430a      	orrs	r2, r1
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001e92:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001e94:	e07b      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e9c:	4b90      	ldr	r3, [pc, #576]	; (80020e0 <HAL_ADC_ConfigChannel+0x470>)
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	0691      	lsls	r1, r2, #26
 8001ea6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001eb4:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001eb6:	e06a      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ebe:	4b88      	ldr	r3, [pc, #544]	; (80020e0 <HAL_ADC_ConfigChannel+0x470>)
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	683a      	ldr	r2, [r7, #0]
 8001ec4:	6812      	ldr	r2, [r2, #0]
 8001ec6:	0691      	lsls	r1, r2, #26
 8001ec8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ed6:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ed8:	e059      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ee0:	4b7f      	ldr	r3, [pc, #508]	; (80020e0 <HAL_ADC_ConfigChannel+0x470>)
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	6812      	ldr	r2, [r2, #0]
 8001ee8:	0691      	lsls	r1, r2, #26
 8001eea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001eec:	430a      	orrs	r2, r1
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ef8:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001efa:	e048      	b.n	8001f8e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	069b      	lsls	r3, r3, #26
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d107      	bne.n	8001f20 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f1e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f26:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	069b      	lsls	r3, r3, #26
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d107      	bne.n	8001f44 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f42:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f4a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	069b      	lsls	r3, r3, #26
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d107      	bne.n	8001f68 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f66:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f6e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	069b      	lsls	r3, r3, #26
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d107      	bne.n	8001f8c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f8a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001f8c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	f003 0303 	and.w	r3, r3, #3
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d108      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x33e>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d101      	bne.n	8001fae <HAL_ADC_ConfigChannel+0x33e>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x340>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f040 8131 	bne.w	8002218 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d00f      	beq.n	8001fde <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	43da      	mvns	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	400a      	ands	r2, r1
 8001fd8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001fdc:	e049      	b.n	8002072 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2201      	movs	r2, #1
 8001fec:	409a      	lsls	r2, r3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b09      	cmp	r3, #9
 8001ffe:	d91c      	bls.n	800203a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6999      	ldr	r1, [r3, #24]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	4613      	mov	r3, r2
 800200c:	005b      	lsls	r3, r3, #1
 800200e:	4413      	add	r3, r2
 8002010:	3b1b      	subs	r3, #27
 8002012:	2207      	movs	r2, #7
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	4019      	ands	r1, r3
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	6898      	ldr	r0, [r3, #8]
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4613      	mov	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	4413      	add	r3, r2
 800202a:	3b1b      	subs	r3, #27
 800202c:	fa00 f203 	lsl.w	r2, r0, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	430a      	orrs	r2, r1
 8002036:	619a      	str	r2, [r3, #24]
 8002038:	e01b      	b.n	8002072 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6959      	ldr	r1, [r3, #20]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	1c5a      	adds	r2, r3, #1
 8002046:	4613      	mov	r3, r2
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	4413      	add	r3, r2
 800204c:	2207      	movs	r2, #7
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	43db      	mvns	r3, r3
 8002054:	4019      	ands	r1, r3
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	6898      	ldr	r0, [r3, #8]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	4613      	mov	r3, r2
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4413      	add	r3, r2
 8002066:	fa00 f203 	lsl.w	r2, r0, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800207a:	d004      	beq.n	8002086 <HAL_ADC_ConfigChannel+0x416>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a18      	ldr	r2, [pc, #96]	; (80020e4 <HAL_ADC_ConfigChannel+0x474>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d101      	bne.n	800208a <HAL_ADC_ConfigChannel+0x41a>
 8002086:	4b18      	ldr	r3, [pc, #96]	; (80020e8 <HAL_ADC_ConfigChannel+0x478>)
 8002088:	e000      	b.n	800208c <HAL_ADC_ConfigChannel+0x41c>
 800208a:	4b18      	ldr	r3, [pc, #96]	; (80020ec <HAL_ADC_ConfigChannel+0x47c>)
 800208c:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2b10      	cmp	r3, #16
 8002094:	d105      	bne.n	80020a2 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d015      	beq.n	80020ce <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80020a6:	2b11      	cmp	r3, #17
 80020a8:	d105      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80020aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d00b      	beq.n	80020ce <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80020ba:	2b12      	cmp	r3, #18
 80020bc:	f040 80ac 	bne.w	8002218 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80020c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	f040 80a5 	bne.w	8002218 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020d6:	d10b      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x480>
 80020d8:	4b02      	ldr	r3, [pc, #8]	; (80020e4 <HAL_ADC_ConfigChannel+0x474>)
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	e023      	b.n	8002126 <HAL_ADC_ConfigChannel+0x4b6>
 80020de:	bf00      	nop
 80020e0:	83fff000 	.word	0x83fff000
 80020e4:	50000100 	.word	0x50000100
 80020e8:	50000300 	.word	0x50000300
 80020ec:	50000700 	.word	0x50000700
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a4e      	ldr	r2, [pc, #312]	; (8002230 <HAL_ADC_ConfigChannel+0x5c0>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d103      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x492>
 80020fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020fe:	60fb      	str	r3, [r7, #12]
 8002100:	e011      	b.n	8002126 <HAL_ADC_ConfigChannel+0x4b6>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a4b      	ldr	r2, [pc, #300]	; (8002234 <HAL_ADC_ConfigChannel+0x5c4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d102      	bne.n	8002112 <HAL_ADC_ConfigChannel+0x4a2>
 800210c:	4b4a      	ldr	r3, [pc, #296]	; (8002238 <HAL_ADC_ConfigChannel+0x5c8>)
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	e009      	b.n	8002126 <HAL_ADC_ConfigChannel+0x4b6>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a48      	ldr	r2, [pc, #288]	; (8002238 <HAL_ADC_ConfigChannel+0x5c8>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d102      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x4b2>
 800211c:	4b45      	ldr	r3, [pc, #276]	; (8002234 <HAL_ADC_ConfigChannel+0x5c4>)
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	e001      	b.n	8002126 <HAL_ADC_ConfigChannel+0x4b6>
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b01      	cmp	r3, #1
 8002132:	d108      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x4d6>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_ADC_ConfigChannel+0x4d6>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_ADC_ConfigChannel+0x4d8>
 8002146:	2300      	movs	r3, #0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d150      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800214c:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800214e:	2b00      	cmp	r3, #0
 8002150:	d010      	beq.n	8002174 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b01      	cmp	r3, #1
 800215c:	d107      	bne.n	800216e <HAL_ADC_ConfigChannel+0x4fe>
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	2b01      	cmp	r3, #1
 8002168:	d101      	bne.n	800216e <HAL_ADC_ConfigChannel+0x4fe>
 800216a:	2301      	movs	r3, #1
 800216c:	e000      	b.n	8002170 <HAL_ADC_ConfigChannel+0x500>
 800216e:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002170:	2b00      	cmp	r3, #0
 8002172:	d13c      	bne.n	80021ee <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2b10      	cmp	r3, #16
 800217a:	d11d      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x548>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002184:	d118      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800218e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002190:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002192:	4b2a      	ldr	r3, [pc, #168]	; (800223c <HAL_ADC_ConfigChannel+0x5cc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a2a      	ldr	r2, [pc, #168]	; (8002240 <HAL_ADC_ConfigChannel+0x5d0>)
 8002198:	fba2 2303 	umull	r2, r3, r2, r3
 800219c:	0c9a      	lsrs	r2, r3, #18
 800219e:	4613      	mov	r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021a8:	e002      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	3b01      	subs	r3, #1
 80021ae:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f9      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021b6:	e02e      	b.n	8002216 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b11      	cmp	r3, #17
 80021be:	d10b      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x568>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021c8:	d106      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80021ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80021d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021d4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021d6:	e01e      	b.n	8002216 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2b12      	cmp	r3, #18
 80021de:	d11a      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80021e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ea:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021ec:	e013      	b.n	8002216 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f043 0220 	orr.w	r2, r3, #32
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80021fa:	2301      	movs	r3, #1
 80021fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002200:	e00a      	b.n	8002218 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	f043 0220 	orr.w	r2, r3, #32
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002214:	e000      	b.n	8002218 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002216:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002220:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002224:	4618      	mov	r0, r3
 8002226:	376c      	adds	r7, #108	; 0x6c
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	50000100 	.word	0x50000100
 8002234:	50000400 	.word	0x50000400
 8002238:	50000500 	.word	0x50000500
 800223c:	20000000 	.word	0x20000000
 8002240:	431bde83 	.word	0x431bde83

08002244 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002244:	b480      	push	{r7}
 8002246:	b099      	sub	sp, #100	; 0x64
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800224e:	2300      	movs	r3, #0
 8002250:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800225c:	d102      	bne.n	8002264 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800225e:	4b6d      	ldr	r3, [pc, #436]	; (8002414 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002260:	60bb      	str	r3, [r7, #8]
 8002262:	e01a      	b.n	800229a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a6a      	ldr	r2, [pc, #424]	; (8002414 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d103      	bne.n	8002276 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800226e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002272:	60bb      	str	r3, [r7, #8]
 8002274:	e011      	b.n	800229a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a67      	ldr	r2, [pc, #412]	; (8002418 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d102      	bne.n	8002286 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002280:	4b66      	ldr	r3, [pc, #408]	; (800241c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	e009      	b.n	800229a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a64      	ldr	r2, [pc, #400]	; (800241c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d102      	bne.n	8002296 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002290:	4b61      	ldr	r3, [pc, #388]	; (8002418 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002292:	60bb      	str	r3, [r7, #8]
 8002294:	e001      	b.n	800229a <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002296:	2300      	movs	r3, #0
 8002298:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0b0      	b.n	8002406 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d101      	bne.n	80022b2 <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80022ae:	2302      	movs	r3, #2
 80022b0:	e0a9      	b.n	8002406 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2201      	movs	r2, #1
 80022b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 0304 	and.w	r3, r3, #4
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f040 808d 	bne.w	80023e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 0304 	and.w	r3, r3, #4
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	f040 8086 	bne.w	80023e4 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022e0:	d004      	beq.n	80022ec <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a4b      	ldr	r2, [pc, #300]	; (8002414 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d101      	bne.n	80022f0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80022ec:	4b4c      	ldr	r3, [pc, #304]	; (8002420 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80022ee:	e000      	b.n	80022f2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80022f0:	4b4c      	ldr	r3, [pc, #304]	; (8002424 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80022f2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d040      	beq.n	800237e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80022fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	6859      	ldr	r1, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800230e:	035b      	lsls	r3, r3, #13
 8002310:	430b      	orrs	r3, r1
 8002312:	431a      	orrs	r2, r3
 8002314:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002316:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f003 0303 	and.w	r3, r3, #3
 8002322:	2b01      	cmp	r3, #1
 8002324:	d108      	bne.n	8002338 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002338:	2300      	movs	r3, #0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d15c      	bne.n	80023f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 0303 	and.w	r3, r3, #3
 8002346:	2b01      	cmp	r3, #1
 8002348:	d107      	bne.n	800235a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_ADCEx_MultiModeConfigChannel+0x118>
 800235a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800235c:	2b00      	cmp	r3, #0
 800235e:	d14b      	bne.n	80023f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002360:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002368:	f023 030f 	bic.w	r3, r3, #15
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	6811      	ldr	r1, [r2, #0]
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	6892      	ldr	r2, [r2, #8]
 8002374:	430a      	orrs	r2, r1
 8002376:	431a      	orrs	r2, r3
 8002378:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800237a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800237c:	e03c      	b.n	80023f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800237e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002388:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b01      	cmp	r3, #1
 8002396:	d108      	bne.n	80023aa <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80023a6:	2301      	movs	r3, #1
 80023a8:	e000      	b.n	80023ac <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80023aa:	2300      	movs	r3, #0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d123      	bne.n	80023f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d107      	bne.n	80023cc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80023cc:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d112      	bne.n	80023f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80023d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80023da:	f023 030f 	bic.w	r3, r3, #15
 80023de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80023e0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023e2:	e009      	b.n	80023f8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e8:	f043 0220 	orr.w	r2, r3, #32
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80023f6:	e000      	b.n	80023fa <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023f8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002402:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002406:	4618      	mov	r0, r3
 8002408:	3764      	adds	r7, #100	; 0x64
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	50000100 	.word	0x50000100
 8002418:	50000400 	.word	0x50000400
 800241c:	50000500 	.word	0x50000500
 8002420:	50000300 	.word	0x50000300
 8002424:	50000700 	.word	0x50000700

08002428 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	2b01      	cmp	r3, #1
 8002440:	d108      	bne.n	8002454 <ADC_Disable+0x2c>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b01      	cmp	r3, #1
 800244e:	d101      	bne.n	8002454 <ADC_Disable+0x2c>
 8002450:	2301      	movs	r3, #1
 8002452:	e000      	b.n	8002456 <ADC_Disable+0x2e>
 8002454:	2300      	movs	r3, #0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d047      	beq.n	80024ea <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 030d 	and.w	r3, r3, #13
 8002464:	2b01      	cmp	r3, #1
 8002466:	d10f      	bne.n	8002488 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	689a      	ldr	r2, [r3, #8]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f042 0202 	orr.w	r2, r2, #2
 8002476:	609a      	str	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2203      	movs	r2, #3
 800247e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002480:	f7ff f9cc 	bl	800181c <HAL_GetTick>
 8002484:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002486:	e029      	b.n	80024dc <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	f043 0210 	orr.w	r2, r3, #16
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002498:	f043 0201 	orr.w	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e023      	b.n	80024ec <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80024a4:	f7ff f9ba 	bl	800181c <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d914      	bls.n	80024dc <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f003 0301 	and.w	r3, r3, #1
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d10d      	bne.n	80024dc <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	f043 0210 	orr.w	r2, r3, #16
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d0:	f043 0201 	orr.w	r2, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e007      	b.n	80024ec <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d0dc      	beq.n	80024a4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3710      	adds	r7, #16
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002504:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <__NVIC_SetPriorityGrouping+0x44>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002510:	4013      	ands	r3, r2
 8002512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800251c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002526:	4a04      	ldr	r2, [pc, #16]	; (8002538 <__NVIC_SetPriorityGrouping+0x44>)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	60d3      	str	r3, [r2, #12]
}
 800252c:	bf00      	nop
 800252e:	3714      	adds	r7, #20
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	e000ed00 	.word	0xe000ed00

0800253c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002540:	4b04      	ldr	r3, [pc, #16]	; (8002554 <__NVIC_GetPriorityGrouping+0x18>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	0a1b      	lsrs	r3, r3, #8
 8002546:	f003 0307 	and.w	r3, r3, #7
}
 800254a:	4618      	mov	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	e000ed00 	.word	0xe000ed00

08002558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002558:	b480      	push	{r7}
 800255a:	b083      	sub	sp, #12
 800255c:	af00      	add	r7, sp, #0
 800255e:	4603      	mov	r3, r0
 8002560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002566:	2b00      	cmp	r3, #0
 8002568:	db0b      	blt.n	8002582 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	f003 021f 	and.w	r2, r3, #31
 8002570:	4907      	ldr	r1, [pc, #28]	; (8002590 <__NVIC_EnableIRQ+0x38>)
 8002572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002576:	095b      	lsrs	r3, r3, #5
 8002578:	2001      	movs	r0, #1
 800257a:	fa00 f202 	lsl.w	r2, r0, r2
 800257e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	e000e100 	.word	0xe000e100

08002594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	6039      	str	r1, [r7, #0]
 800259e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	db0a      	blt.n	80025be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	490c      	ldr	r1, [pc, #48]	; (80025e0 <__NVIC_SetPriority+0x4c>)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	0112      	lsls	r2, r2, #4
 80025b4:	b2d2      	uxtb	r2, r2
 80025b6:	440b      	add	r3, r1
 80025b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025bc:	e00a      	b.n	80025d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	4908      	ldr	r1, [pc, #32]	; (80025e4 <__NVIC_SetPriority+0x50>)
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	f003 030f 	and.w	r3, r3, #15
 80025ca:	3b04      	subs	r3, #4
 80025cc:	0112      	lsls	r2, r2, #4
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	440b      	add	r3, r1
 80025d2:	761a      	strb	r2, [r3, #24]
}
 80025d4:	bf00      	nop
 80025d6:	370c      	adds	r7, #12
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	e000e100 	.word	0xe000e100
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	; 0x24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f003 0307 	and.w	r3, r3, #7
 80025fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f1c3 0307 	rsb	r3, r3, #7
 8002602:	2b04      	cmp	r3, #4
 8002604:	bf28      	it	cs
 8002606:	2304      	movcs	r3, #4
 8002608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	3304      	adds	r3, #4
 800260e:	2b06      	cmp	r3, #6
 8002610:	d902      	bls.n	8002618 <NVIC_EncodePriority+0x30>
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3b03      	subs	r3, #3
 8002616:	e000      	b.n	800261a <NVIC_EncodePriority+0x32>
 8002618:	2300      	movs	r3, #0
 800261a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800261c:	f04f 32ff 	mov.w	r2, #4294967295
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	fa02 f303 	lsl.w	r3, r2, r3
 8002626:	43da      	mvns	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	401a      	ands	r2, r3
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002630:	f04f 31ff 	mov.w	r1, #4294967295
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	fa01 f303 	lsl.w	r3, r1, r3
 800263a:	43d9      	mvns	r1, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002640:	4313      	orrs	r3, r2
         );
}
 8002642:	4618      	mov	r0, r3
 8002644:	3724      	adds	r7, #36	; 0x24
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3b01      	subs	r3, #1
 800265c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002660:	d301      	bcc.n	8002666 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002662:	2301      	movs	r3, #1
 8002664:	e00f      	b.n	8002686 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002666:	4a0a      	ldr	r2, [pc, #40]	; (8002690 <SysTick_Config+0x40>)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	3b01      	subs	r3, #1
 800266c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800266e:	210f      	movs	r1, #15
 8002670:	f04f 30ff 	mov.w	r0, #4294967295
 8002674:	f7ff ff8e 	bl	8002594 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <SysTick_Config+0x40>)
 800267a:	2200      	movs	r2, #0
 800267c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800267e:	4b04      	ldr	r3, [pc, #16]	; (8002690 <SysTick_Config+0x40>)
 8002680:	2207      	movs	r2, #7
 8002682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	e000e010 	.word	0xe000e010

08002694 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7ff ff29 	bl	80024f4 <__NVIC_SetPriorityGrouping>
}
 80026a2:	bf00      	nop
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}

080026aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b086      	sub	sp, #24
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	4603      	mov	r3, r0
 80026b2:	60b9      	str	r1, [r7, #8]
 80026b4:	607a      	str	r2, [r7, #4]
 80026b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026bc:	f7ff ff3e 	bl	800253c <__NVIC_GetPriorityGrouping>
 80026c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	68b9      	ldr	r1, [r7, #8]
 80026c6:	6978      	ldr	r0, [r7, #20]
 80026c8:	f7ff ff8e 	bl	80025e8 <NVIC_EncodePriority>
 80026cc:	4602      	mov	r2, r0
 80026ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d2:	4611      	mov	r1, r2
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7ff ff5d 	bl	8002594 <__NVIC_SetPriority>
}
 80026da:	bf00      	nop
 80026dc:	3718      	adds	r7, #24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e2:	b580      	push	{r7, lr}
 80026e4:	b082      	sub	sp, #8
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	4603      	mov	r3, r0
 80026ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7ff ff31 	bl	8002558 <__NVIC_EnableIRQ>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f7ff ffa2 	bl	8002650 <SysTick_Config>
 800270c:	4603      	mov	r3, r0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002716:	b580      	push	{r7, lr}
 8002718:	b084      	sub	sp, #16
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d101      	bne.n	800272c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e037      	b.n	800279c <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2202      	movs	r2, #2
 8002730:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002742:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002746:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002750:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002768:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	69db      	ldr	r3, [r3, #28]
 800276e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f8b4 	bl	80028ec <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 800279a:	2300      	movs	r3, #0
}  
 800279c:	4618      	mov	r0, r3
 800279e:	3710      	adds	r7, #16
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c0:	2204      	movs	r2, #4
 80027c2:	409a      	lsls	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4013      	ands	r3, r2
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d024      	beq.n	8002816 <HAL_DMA_IRQHandler+0x72>
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d01f      	beq.n	8002816 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0320 	and.w	r3, r3, #32
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d107      	bne.n	80027f4 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f022 0204 	bic.w	r2, r2, #4
 80027f2:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fc:	2104      	movs	r1, #4
 80027fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002802:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002808:	2b00      	cmp	r3, #0
 800280a:	d06a      	beq.n	80028e2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002814:	e065      	b.n	80028e2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	2202      	movs	r2, #2
 800281c:	409a      	lsls	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4013      	ands	r3, r2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d02c      	beq.n	8002880 <HAL_DMA_IRQHandler+0xdc>
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d027      	beq.n	8002880 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0320 	and.w	r3, r3, #32
 800283a:	2b00      	cmp	r3, #0
 800283c:	d10b      	bne.n	8002856 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 020a 	bic.w	r2, r2, #10
 800284c:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800285e:	2102      	movs	r1, #2
 8002860:	fa01 f202 	lsl.w	r2, r1, r2
 8002864:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002872:	2b00      	cmp	r3, #0
 8002874:	d035      	beq.n	80028e2 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800287e:	e030      	b.n	80028e2 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	2208      	movs	r2, #8
 8002886:	409a      	lsls	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	4013      	ands	r3, r2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d028      	beq.n	80028e2 <HAL_DMA_IRQHandler+0x13e>
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d023      	beq.n	80028e2 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f022 020e 	bic.w	r2, r2, #14
 80028a8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b2:	2101      	movs	r1, #1
 80028b4:	fa01 f202 	lsl.w	r2, r1, r2
 80028b8:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d004      	beq.n	80028e2 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	4798      	blx	r3
    }
  }
}  
 80028e0:	e7ff      	b.n	80028e2 <HAL_DMA_IRQHandler+0x13e>
 80028e2:	bf00      	nop
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
	...

080028ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	461a      	mov	r2, r3
 80028fa:	4b14      	ldr	r3, [pc, #80]	; (800294c <DMA_CalcBaseAndBitshift+0x60>)
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d80f      	bhi.n	8002920 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	4b12      	ldr	r3, [pc, #72]	; (8002950 <DMA_CalcBaseAndBitshift+0x64>)
 8002908:	4413      	add	r3, r2
 800290a:	4a12      	ldr	r2, [pc, #72]	; (8002954 <DMA_CalcBaseAndBitshift+0x68>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	009a      	lsls	r2, r3, #2
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a0f      	ldr	r2, [pc, #60]	; (8002958 <DMA_CalcBaseAndBitshift+0x6c>)
 800291c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 800291e:	e00e      	b.n	800293e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	461a      	mov	r2, r3
 8002926:	4b0d      	ldr	r3, [pc, #52]	; (800295c <DMA_CalcBaseAndBitshift+0x70>)
 8002928:	4413      	add	r3, r2
 800292a:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <DMA_CalcBaseAndBitshift+0x68>)
 800292c:	fba2 2303 	umull	r2, r3, r2, r3
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	009a      	lsls	r2, r3, #2
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4a09      	ldr	r2, [pc, #36]	; (8002960 <DMA_CalcBaseAndBitshift+0x74>)
 800293c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
 800294a:	bf00      	nop
 800294c:	40020407 	.word	0x40020407
 8002950:	bffdfff8 	.word	0xbffdfff8
 8002954:	cccccccd 	.word	0xcccccccd
 8002958:	40020000 	.word	0x40020000
 800295c:	bffdfbf8 	.word	0xbffdfbf8
 8002960:	40020400 	.word	0x40020400

08002964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002964:	b480      	push	{r7}
 8002966:	b087      	sub	sp, #28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800296e:	2300      	movs	r3, #0
 8002970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002972:	e160      	b.n	8002c36 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	2101      	movs	r1, #1
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	fa01 f303 	lsl.w	r3, r1, r3
 8002980:	4013      	ands	r3, r2
 8002982:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 8152 	beq.w	8002c30 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	f003 0303 	and.w	r3, r3, #3
 8002994:	2b01      	cmp	r3, #1
 8002996:	d005      	beq.n	80029a4 <HAL_GPIO_Init+0x40>
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d130      	bne.n	8002a06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2203      	movs	r2, #3
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	4013      	ands	r3, r2
 80029ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	693a      	ldr	r2, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80029da:	2201      	movs	r2, #1
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	fa02 f303 	lsl.w	r3, r2, r3
 80029e2:	43db      	mvns	r3, r3
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	4013      	ands	r3, r2
 80029e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	091b      	lsrs	r3, r3, #4
 80029f0:	f003 0201 	and.w	r2, r3, #1
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d017      	beq.n	8002a42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	2203      	movs	r2, #3
 8002a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a22:	43db      	mvns	r3, r3
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	4013      	ands	r3, r2
 8002a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	689a      	ldr	r2, [r3, #8]
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d123      	bne.n	8002a96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	08da      	lsrs	r2, r3, #3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	3208      	adds	r2, #8
 8002a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	220f      	movs	r2, #15
 8002a66:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6a:	43db      	mvns	r3, r3
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	691a      	ldr	r2, [r3, #16]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a82:	693a      	ldr	r2, [r7, #16]
 8002a84:	4313      	orrs	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	08da      	lsrs	r2, r3, #3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3208      	adds	r2, #8
 8002a90:	6939      	ldr	r1, [r7, #16]
 8002a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	005b      	lsls	r3, r3, #1
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43db      	mvns	r3, r3
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	f003 0203 	and.w	r2, r3, #3
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	693a      	ldr	r2, [r7, #16]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	693a      	ldr	r2, [r7, #16]
 8002ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	f000 80ac 	beq.w	8002c30 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ad8:	4b5e      	ldr	r3, [pc, #376]	; (8002c54 <HAL_GPIO_Init+0x2f0>)
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	4a5d      	ldr	r2, [pc, #372]	; (8002c54 <HAL_GPIO_Init+0x2f0>)
 8002ade:	f043 0301 	orr.w	r3, r3, #1
 8002ae2:	6193      	str	r3, [r2, #24]
 8002ae4:	4b5b      	ldr	r3, [pc, #364]	; (8002c54 <HAL_GPIO_Init+0x2f0>)
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	60bb      	str	r3, [r7, #8]
 8002aee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002af0:	4a59      	ldr	r2, [pc, #356]	; (8002c58 <HAL_GPIO_Init+0x2f4>)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	089b      	lsrs	r3, r3, #2
 8002af6:	3302      	adds	r3, #2
 8002af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002afc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	f003 0303 	and.w	r3, r3, #3
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	220f      	movs	r2, #15
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4013      	ands	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002b1a:	d025      	beq.n	8002b68 <HAL_GPIO_Init+0x204>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a4f      	ldr	r2, [pc, #316]	; (8002c5c <HAL_GPIO_Init+0x2f8>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d01f      	beq.n	8002b64 <HAL_GPIO_Init+0x200>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	4a4e      	ldr	r2, [pc, #312]	; (8002c60 <HAL_GPIO_Init+0x2fc>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d019      	beq.n	8002b60 <HAL_GPIO_Init+0x1fc>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	4a4d      	ldr	r2, [pc, #308]	; (8002c64 <HAL_GPIO_Init+0x300>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d013      	beq.n	8002b5c <HAL_GPIO_Init+0x1f8>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a4c      	ldr	r2, [pc, #304]	; (8002c68 <HAL_GPIO_Init+0x304>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d00d      	beq.n	8002b58 <HAL_GPIO_Init+0x1f4>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a4b      	ldr	r2, [pc, #300]	; (8002c6c <HAL_GPIO_Init+0x308>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d007      	beq.n	8002b54 <HAL_GPIO_Init+0x1f0>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a4a      	ldr	r2, [pc, #296]	; (8002c70 <HAL_GPIO_Init+0x30c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d101      	bne.n	8002b50 <HAL_GPIO_Init+0x1ec>
 8002b4c:	2306      	movs	r3, #6
 8002b4e:	e00c      	b.n	8002b6a <HAL_GPIO_Init+0x206>
 8002b50:	2307      	movs	r3, #7
 8002b52:	e00a      	b.n	8002b6a <HAL_GPIO_Init+0x206>
 8002b54:	2305      	movs	r3, #5
 8002b56:	e008      	b.n	8002b6a <HAL_GPIO_Init+0x206>
 8002b58:	2304      	movs	r3, #4
 8002b5a:	e006      	b.n	8002b6a <HAL_GPIO_Init+0x206>
 8002b5c:	2303      	movs	r3, #3
 8002b5e:	e004      	b.n	8002b6a <HAL_GPIO_Init+0x206>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e002      	b.n	8002b6a <HAL_GPIO_Init+0x206>
 8002b64:	2301      	movs	r3, #1
 8002b66:	e000      	b.n	8002b6a <HAL_GPIO_Init+0x206>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	f002 0203 	and.w	r2, r2, #3
 8002b70:	0092      	lsls	r2, r2, #2
 8002b72:	4093      	lsls	r3, r2
 8002b74:	693a      	ldr	r2, [r7, #16]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b7a:	4937      	ldr	r1, [pc, #220]	; (8002c58 <HAL_GPIO_Init+0x2f4>)
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	089b      	lsrs	r3, r3, #2
 8002b80:	3302      	adds	r3, #2
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b88:	4b3a      	ldr	r3, [pc, #232]	; (8002c74 <HAL_GPIO_Init+0x310>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	43db      	mvns	r3, r3
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	4013      	ands	r3, r2
 8002b96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d003      	beq.n	8002bac <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002bac:	4a31      	ldr	r2, [pc, #196]	; (8002c74 <HAL_GPIO_Init+0x310>)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bb2:	4b30      	ldr	r3, [pc, #192]	; (8002c74 <HAL_GPIO_Init+0x310>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	43db      	mvns	r3, r3
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002bd6:	4a27      	ldr	r2, [pc, #156]	; (8002c74 <HAL_GPIO_Init+0x310>)
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002bdc:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <HAL_GPIO_Init+0x310>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	43db      	mvns	r3, r3
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d003      	beq.n	8002c00 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c00:	4a1c      	ldr	r2, [pc, #112]	; (8002c74 <HAL_GPIO_Init+0x310>)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c06:	4b1b      	ldr	r3, [pc, #108]	; (8002c74 <HAL_GPIO_Init+0x310>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	43db      	mvns	r3, r3
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4013      	ands	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d003      	beq.n	8002c2a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	4313      	orrs	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c2a:	4a12      	ldr	r2, [pc, #72]	; (8002c74 <HAL_GPIO_Init+0x310>)
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	3301      	adds	r3, #1
 8002c34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f47f ae97 	bne.w	8002974 <HAL_GPIO_Init+0x10>
  }
}
 8002c46:	bf00      	nop
 8002c48:	bf00      	nop
 8002c4a:	371c      	adds	r7, #28
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40010000 	.word	0x40010000
 8002c5c:	48000400 	.word	0x48000400
 8002c60:	48000800 	.word	0x48000800
 8002c64:	48000c00 	.word	0x48000c00
 8002c68:	48001000 	.word	0x48001000
 8002c6c:	48001400 	.word	0x48001400
 8002c70:	48001800 	.word	0x48001800
 8002c74:	40010400 	.word	0x40010400

08002c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	460b      	mov	r3, r1
 8002c82:	807b      	strh	r3, [r7, #2]
 8002c84:	4613      	mov	r3, r2
 8002c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c88:	787b      	ldrb	r3, [r7, #1]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002c8e:	887a      	ldrh	r2, [r7, #2]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002c94:	e002      	b.n	8002c9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002c96:	887a      	ldrh	r2, [r7, #2]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002caa:	b08b      	sub	sp, #44	; 0x2c
 8002cac:	af06      	add	r7, sp, #24
 8002cae:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e0c4      	b.n	8002e44 <HAL_PCD_Init+0x19c>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d106      	bne.n	8002cd4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f008 fac0 	bl	800b254 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2203      	movs	r2, #3
 8002cd8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f004 f9ef 	bl	80070c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	73fb      	strb	r3, [r7, #15]
 8002cea:	e040      	b.n	8002d6e <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cec:	7bfb      	ldrb	r3, [r7, #15]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	440b      	add	r3, r1
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	2201      	movs	r2, #1
 8002d00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d02:	7bfb      	ldrb	r3, [r7, #15]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	1c5a      	adds	r2, r3, #1
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	00db      	lsls	r3, r3, #3
 8002d10:	440b      	add	r3, r1
 8002d12:	7bfa      	ldrb	r2, [r7, #15]
 8002d14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	6879      	ldr	r1, [r7, #4]
 8002d1a:	1c5a      	adds	r2, r3, #1
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4413      	add	r3, r2
 8002d22:	00db      	lsls	r3, r3, #3
 8002d24:	440b      	add	r3, r1
 8002d26:	3303      	adds	r3, #3
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d2c:	7bfa      	ldrb	r2, [r7, #15]
 8002d2e:	6879      	ldr	r1, [r7, #4]
 8002d30:	4613      	mov	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4413      	add	r3, r2
 8002d36:	00db      	lsls	r3, r3, #3
 8002d38:	440b      	add	r3, r1
 8002d3a:	3338      	adds	r3, #56	; 0x38
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d40:	7bfa      	ldrb	r2, [r7, #15]
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	440b      	add	r3, r1
 8002d4e:	333c      	adds	r3, #60	; 0x3c
 8002d50:	2200      	movs	r2, #0
 8002d52:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	440b      	add	r3, r1
 8002d62:	3340      	adds	r3, #64	; 0x40
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d68:	7bfb      	ldrb	r3, [r7, #15]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
 8002d6e:	7bfa      	ldrb	r2, [r7, #15]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d3b9      	bcc.n	8002cec <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d78:	2300      	movs	r3, #0
 8002d7a:	73fb      	strb	r3, [r7, #15]
 8002d7c:	e044      	b.n	8002e08 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d7e:	7bfa      	ldrb	r2, [r7, #15]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4413      	add	r3, r2
 8002d88:	00db      	lsls	r3, r3, #3
 8002d8a:	440b      	add	r3, r1
 8002d8c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d94:	7bfa      	ldrb	r2, [r7, #15]
 8002d96:	6879      	ldr	r1, [r7, #4]
 8002d98:	4613      	mov	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	4413      	add	r3, r2
 8002d9e:	00db      	lsls	r3, r3, #3
 8002da0:	440b      	add	r3, r1
 8002da2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002da6:	7bfa      	ldrb	r2, [r7, #15]
 8002da8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002daa:	7bfa      	ldrb	r2, [r7, #15]
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	440b      	add	r3, r1
 8002db8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dc0:	7bfa      	ldrb	r2, [r7, #15]
 8002dc2:	6879      	ldr	r1, [r7, #4]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	440b      	add	r3, r1
 8002dce:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dd6:	7bfa      	ldrb	r2, [r7, #15]
 8002dd8:	6879      	ldr	r1, [r7, #4]
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	00db      	lsls	r3, r3, #3
 8002de2:	440b      	add	r3, r1
 8002de4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002dec:	7bfa      	ldrb	r2, [r7, #15]
 8002dee:	6879      	ldr	r1, [r7, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	440b      	add	r3, r1
 8002dfa:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002dfe:	2200      	movs	r2, #0
 8002e00:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	3301      	adds	r3, #1
 8002e06:	73fb      	strb	r3, [r7, #15]
 8002e08:	7bfa      	ldrb	r2, [r7, #15]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d3b5      	bcc.n	8002d7e <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	687e      	ldr	r6, [r7, #4]
 8002e1a:	466d      	mov	r5, sp
 8002e1c:	f106 0410 	add.w	r4, r6, #16
 8002e20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e24:	6823      	ldr	r3, [r4, #0]
 8002e26:	602b      	str	r3, [r5, #0]
 8002e28:	1d33      	adds	r3, r6, #4
 8002e2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e2c:	6838      	ldr	r0, [r7, #0]
 8002e2e:	f004 f964 	bl	80070fa <USB_DevInit>

  hpcd->USB_Address = 0U;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3714      	adds	r7, #20
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e4c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d101      	bne.n	8002e62 <HAL_PCD_Start+0x16>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e016      	b.n	8002e90 <HAL_PCD_Start+0x44>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f004 f911 	bl	8007096 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8002e74:	2101      	movs	r1, #1
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f008 fc6e 	bl	800b758 <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f006 fbd0 	bl	8009626 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f006 fbc9 	bl	800963c <USB_ReadInterrupts>
 8002eaa:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fab2 	bl	8003420 <PCD_EP_ISR_Handler>

    return;
 8002ebc:	e0bd      	b.n	800303a <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d013      	beq.n	8002ef0 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eda:	b292      	uxth	r2, r2
 8002edc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f008 fa3a 	bl	800b35a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f8a9 	bl	8003040 <HAL_PCD_SetAddress>

    return;
 8002eee:	e0a4      	b.n	800303a <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00c      	beq.n	8002f14 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f02:	b29a      	uxth	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f0c:	b292      	uxth	r2, r2
 8002f0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002f12:	e092      	b.n	800303a <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00c      	beq.n	8002f38 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f30:	b292      	uxth	r2, r2
 8002f32:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002f36:	e080      	b.n	800303a <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d027      	beq.n	8002f92 <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0204 	bic.w	r2, r2, #4
 8002f54:	b292      	uxth	r2, r2
 8002f56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0208 	bic.w	r2, r2, #8
 8002f6c:	b292      	uxth	r2, r2
 8002f6e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f008 fa2a 	bl	800b3cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f8a:	b292      	uxth	r2, r2
 8002f8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8002f90:	e053      	b.n	800303a <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d027      	beq.n	8002fec <HAL_PCD_IRQHandler+0x154>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0208 	orr.w	r2, r2, #8
 8002fae:	b292      	uxth	r2, r2
 8002fb0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fc6:	b292      	uxth	r2, r2
 8002fc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f042 0204 	orr.w	r2, r2, #4
 8002fde:	b292      	uxth	r2, r2
 8002fe0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f008 f9d7 	bl	800b398 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8002fea:	e026      	b.n	800303a <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d00f      	beq.n	8003016 <HAL_PCD_IRQHandler+0x17e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003008:	b292      	uxth	r2, r2
 800300a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f008 f995 	bl	800b33e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003014:	e011      	b.n	800303a <HAL_PCD_IRQHandler+0x1a2>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00c      	beq.n	800303a <HAL_PCD_IRQHandler+0x1a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003028:	b29a      	uxth	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003032:	b292      	uxth	r2, r2
 8003034:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003038:	bf00      	nop
  }
}
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}

08003040 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	460b      	mov	r3, r1
 800304a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003052:	2b01      	cmp	r3, #1
 8003054:	d101      	bne.n	800305a <HAL_PCD_SetAddress+0x1a>
 8003056:	2302      	movs	r3, #2
 8003058:	e013      	b.n	8003082 <HAL_PCD_SetAddress+0x42>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	78fa      	ldrb	r2, [r7, #3]
 8003066:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	4611      	mov	r1, r2
 8003072:	4618      	mov	r0, r3
 8003074:	f006 fac3 	bl	80095fe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003080:	2300      	movs	r3, #0
}
 8003082:	4618      	mov	r0, r3
 8003084:	3708      	adds	r7, #8
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800308a:	b580      	push	{r7, lr}
 800308c:	b084      	sub	sp, #16
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	4608      	mov	r0, r1
 8003094:	4611      	mov	r1, r2
 8003096:	461a      	mov	r2, r3
 8003098:	4603      	mov	r3, r0
 800309a:	70fb      	strb	r3, [r7, #3]
 800309c:	460b      	mov	r3, r1
 800309e:	803b      	strh	r3, [r7, #0]
 80030a0:	4613      	mov	r3, r2
 80030a2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80030a4:	2300      	movs	r3, #0
 80030a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80030a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	da0e      	bge.n	80030ce <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	4613      	mov	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	4413      	add	r3, r2
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	4413      	add	r3, r2
 80030c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	705a      	strb	r2, [r3, #1]
 80030cc:	e00e      	b.n	80030ec <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80030ce:	78fb      	ldrb	r3, [r7, #3]
 80030d0:	f003 0207 	and.w	r2, r3, #7
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	00db      	lsls	r3, r3, #3
 80030dc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	4413      	add	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80030ec:	78fb      	ldrb	r3, [r7, #3]
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	b2da      	uxtb	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80030f8:	883a      	ldrh	r2, [r7, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	78ba      	ldrb	r2, [r7, #2]
 8003102:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003104:	78bb      	ldrb	r3, [r7, #2]
 8003106:	2b02      	cmp	r3, #2
 8003108:	d102      	bne.n	8003110 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_PCD_EP_Open+0x94>
 800311a:	2302      	movs	r3, #2
 800311c:	e00e      	b.n	800313c <HAL_PCD_EP_Open+0xb2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	68f9      	ldr	r1, [r7, #12]
 800312c:	4618      	mov	r0, r3
 800312e:	f004 f805 	bl	800713c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800313a:	7afb      	ldrb	r3, [r7, #11]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}

08003144 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003154:	2b00      	cmp	r3, #0
 8003156:	da0e      	bge.n	8003176 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	4413      	add	r3, r2
 800316c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	705a      	strb	r2, [r3, #1]
 8003174:	e00e      	b.n	8003194 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003176:	78fb      	ldrb	r3, [r7, #3]
 8003178:	f003 0207 	and.w	r2, r3, #7
 800317c:	4613      	mov	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4413      	add	r3, r2
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	4413      	add	r3, r2
 800318c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	b2da      	uxtb	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_PCD_EP_Close+0x6a>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e00e      	b.n	80031cc <HAL_PCD_EP_Close+0x88>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	68f9      	ldr	r1, [r7, #12]
 80031bc:	4618      	mov	r0, r3
 80031be:	f004 fb81 	bl	80078c4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	607a      	str	r2, [r7, #4]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	460b      	mov	r3, r1
 80031e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80031e4:	7afb      	ldrb	r3, [r7, #11]
 80031e6:	f003 0207 	and.w	r2, r3, #7
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4413      	add	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	2200      	movs	r2, #0
 800320c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	2200      	movs	r2, #0
 8003212:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003214:	7afb      	ldrb	r3, [r7, #11]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	b2da      	uxtb	r2, r3
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6979      	ldr	r1, [r7, #20]
 8003226:	4618      	mov	r0, r3
 8003228:	f004 fd39 	bl	8007c9e <USB_EPStartXfer>

  return HAL_OK;
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3718      	adds	r7, #24
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003236:	b480      	push	{r7}
 8003238:	b083      	sub	sp, #12
 800323a:	af00      	add	r7, sp, #0
 800323c:	6078      	str	r0, [r7, #4]
 800323e:	460b      	mov	r3, r1
 8003240:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	f003 0207 	and.w	r2, r3, #7
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	4413      	add	r3, r2
 8003250:	00db      	lsls	r3, r3, #3
 8003252:	440b      	add	r3, r1
 8003254:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8003258:	681b      	ldr	r3, [r3, #0]
}
 800325a:	4618      	mov	r0, r3
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003266:	b580      	push	{r7, lr}
 8003268:	b086      	sub	sp, #24
 800326a:	af00      	add	r7, sp, #0
 800326c:	60f8      	str	r0, [r7, #12]
 800326e:	607a      	str	r2, [r7, #4]
 8003270:	603b      	str	r3, [r7, #0]
 8003272:	460b      	mov	r3, r1
 8003274:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003276:	7afb      	ldrb	r3, [r7, #11]
 8003278:	f003 0307 	and.w	r3, r3, #7
 800327c:	1c5a      	adds	r2, r3, #1
 800327e:	4613      	mov	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4413      	add	r3, r2
 8003284:	00db      	lsls	r3, r3, #3
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4413      	add	r3, r2
 800328a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	683a      	ldr	r2, [r7, #0]
 8003296:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80032a0:	697b      	ldr	r3, [r7, #20]
 80032a2:	683a      	ldr	r2, [r7, #0]
 80032a4:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2200      	movs	r2, #0
 80032aa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	2201      	movs	r2, #1
 80032b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032b2:	7afb      	ldrb	r3, [r7, #11]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6979      	ldr	r1, [r7, #20]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f004 fcea 	bl	8007c9e <USB_EPStartXfer>

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3718      	adds	r7, #24
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
 80032dc:	460b      	mov	r3, r1
 80032de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	f003 0207 	and.w	r2, r3, #7
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d901      	bls.n	80032f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e03e      	b.n	8003370 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80032f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	da0e      	bge.n	8003318 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	1c5a      	adds	r2, r3, #1
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	687a      	ldr	r2, [r7, #4]
 800330c:	4413      	add	r3, r2
 800330e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2201      	movs	r2, #1
 8003314:	705a      	strb	r2, [r3, #1]
 8003316:	e00c      	b.n	8003332 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003318:	78fa      	ldrb	r2, [r7, #3]
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	00db      	lsls	r3, r3, #3
 8003322:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	4413      	add	r3, r2
 800332a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003338:	78fb      	ldrb	r3, [r7, #3]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	b2da      	uxtb	r2, r3
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800334a:	2b01      	cmp	r3, #1
 800334c:	d101      	bne.n	8003352 <HAL_PCD_EP_SetStall+0x7e>
 800334e:	2302      	movs	r3, #2
 8003350:	e00e      	b.n	8003370 <HAL_PCD_EP_SetStall+0x9c>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68f9      	ldr	r1, [r7, #12]
 8003360:	4618      	mov	r0, r3
 8003362:	f006 f84d 	bl	8009400 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	460b      	mov	r3, r1
 8003382:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003384:	78fb      	ldrb	r3, [r7, #3]
 8003386:	f003 020f 	and.w	r2, r3, #15
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	429a      	cmp	r2, r3
 8003390:	d901      	bls.n	8003396 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e040      	b.n	8003418 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003396:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800339a:	2b00      	cmp	r3, #0
 800339c:	da0e      	bge.n	80033bc <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800339e:	78fb      	ldrb	r3, [r7, #3]
 80033a0:	f003 0307 	and.w	r3, r3, #7
 80033a4:	1c5a      	adds	r2, r3, #1
 80033a6:	4613      	mov	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	4413      	add	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	687a      	ldr	r2, [r7, #4]
 80033b0:	4413      	add	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2201      	movs	r2, #1
 80033b8:	705a      	strb	r2, [r3, #1]
 80033ba:	e00e      	b.n	80033da <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033bc:	78fb      	ldrb	r3, [r7, #3]
 80033be:	f003 0207 	and.w	r2, r3, #7
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	4413      	add	r3, r2
 80033d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	f003 0307 	and.w	r3, r3, #7
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_PCD_EP_ClrStall+0x82>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e00e      	b.n	8003418 <HAL_PCD_EP_ClrStall+0xa0>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	68f9      	ldr	r1, [r7, #12]
 8003408:	4618      	mov	r0, r3
 800340a:	f006 f84a 	bl	80094a2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b096      	sub	sp, #88	; 0x58
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003428:	e3b1      	b.n	8003b8e <PCD_EP_ISR_Handler+0x76e>
  {
    wIstr = hpcd->Instance->ISTR;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003432:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003436:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800343a:	b2db      	uxtb	r3, r3
 800343c:	f003 030f 	and.w	r3, r3, #15
 8003440:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003444:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003448:	2b00      	cmp	r3, #0
 800344a:	f040 8173 	bne.w	8003734 <PCD_EP_ISR_Handler+0x314>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800344e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003452:	f003 0310 	and.w	r3, r3, #16
 8003456:	2b00      	cmp	r3, #0
 8003458:	d150      	bne.n	80034fc <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	b29b      	uxth	r3, r3
 8003462:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800346a:	81fb      	strh	r3, [r7, #14]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	89fb      	ldrh	r3, [r7, #14]
 8003472:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003476:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800347a:	b29b      	uxth	r3, r3
 800347c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	3328      	adds	r3, #40	; 0x28
 8003482:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800348c:	b29b      	uxth	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	00db      	lsls	r3, r3, #3
 8003496:	4413      	add	r3, r2
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6812      	ldr	r2, [r2, #0]
 800349c:	4413      	add	r3, r2
 800349e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80034a2:	881b      	ldrh	r3, [r3, #0]
 80034a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80034a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034aa:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80034ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034ae:	695a      	ldr	r2, [r3, #20]
 80034b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	441a      	add	r2, r3
 80034b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034b8:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80034ba:	2100      	movs	r1, #0
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f007 ff24 	bl	800b30a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 835f 	beq.w	8003b8e <PCD_EP_ISR_Handler+0x76e>
 80034d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f040 835a 	bne.w	8003b8e <PCD_EP_ISR_Handler+0x76e>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	b292      	uxth	r2, r2
 80034ee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80034fa:	e348      	b.n	8003b8e <PCD_EP_ISR_Handler+0x76e>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003502:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	881b      	ldrh	r3, [r3, #0]
 800350a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800350e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003512:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003516:	2b00      	cmp	r3, #0
 8003518:	d032      	beq.n	8003580 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003522:	b29b      	uxth	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	00db      	lsls	r3, r3, #3
 800352c:	4413      	add	r3, r2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6812      	ldr	r2, [r2, #0]
 8003532:	4413      	add	r3, r2
 8003534:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003538:	881b      	ldrh	r3, [r3, #0]
 800353a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800353e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003540:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6818      	ldr	r0, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800354c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800354e:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003550:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003552:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003554:	b29b      	uxth	r3, r3
 8003556:	f006 f8c3 	bl	80096e0 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	b29a      	uxth	r2, r3
 8003562:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003566:	4013      	ands	r3, r2
 8003568:	823b      	strh	r3, [r7, #16]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	8a3a      	ldrh	r2, [r7, #16]
 8003570:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003574:	b292      	uxth	r2, r2
 8003576:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	f007 fe99 	bl	800b2b0 <HAL_PCD_SetupStageCallback>
 800357e:	e306      	b.n	8003b8e <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003580:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003584:	2b00      	cmp	r3, #0
 8003586:	f280 8302 	bge.w	8003b8e <PCD_EP_ISR_Handler+0x76e>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	b29a      	uxth	r2, r3
 8003592:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003596:	4013      	ands	r3, r2
 8003598:	83fb      	strh	r3, [r7, #30]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	8bfa      	ldrh	r2, [r7, #30]
 80035a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80035a4:	b292      	uxth	r2, r2
 80035a6:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	461a      	mov	r2, r3
 80035b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035b6:	781b      	ldrb	r3, [r3, #0]
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4413      	add	r3, r2
 80035bc:	687a      	ldr	r2, [r7, #4]
 80035be:	6812      	ldr	r2, [r2, #0]
 80035c0:	4413      	add	r3, r2
 80035c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80035c6:	881b      	ldrh	r3, [r3, #0]
 80035c8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80035cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ce:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80035d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d019      	beq.n	800360c <PCD_EP_ISR_Handler+0x1ec>
 80035d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d015      	beq.n	800360c <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6818      	ldr	r0, [r3, #0]
 80035e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035e6:	6959      	ldr	r1, [r3, #20]
 80035e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ea:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80035ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ee:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	f006 f875 	bl	80096e0 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80035f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035fc:	69db      	ldr	r3, [r3, #28]
 80035fe:	441a      	add	r2, r3
 8003600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003602:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003604:	2100      	movs	r1, #0
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f007 fe64 	bl	800b2d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	881b      	ldrh	r3, [r3, #0]
 8003612:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003616:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800361a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800361e:	2b00      	cmp	r3, #0
 8003620:	f040 82b5 	bne.w	8003b8e <PCD_EP_ISR_Handler+0x76e>
 8003624:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003628:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800362c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003630:	f000 82ad 	beq.w	8003b8e <PCD_EP_ISR_Handler+0x76e>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003642:	b29b      	uxth	r3, r3
 8003644:	461a      	mov	r2, r3
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	4413      	add	r3, r2
 800364a:	61bb      	str	r3, [r7, #24]
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	881b      	ldrh	r3, [r3, #0]
 8003658:	b29b      	uxth	r3, r3
 800365a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800365e:	b29a      	uxth	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	801a      	strh	r2, [r3, #0]
 8003664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	2b3e      	cmp	r3, #62	; 0x3e
 800366a:	d91d      	bls.n	80036a8 <PCD_EP_ISR_Handler+0x288>
 800366c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	095b      	lsrs	r3, r3, #5
 8003672:	647b      	str	r3, [r7, #68]	; 0x44
 8003674:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003676:	691b      	ldr	r3, [r3, #16]
 8003678:	f003 031f 	and.w	r3, r3, #31
 800367c:	2b00      	cmp	r3, #0
 800367e:	d102      	bne.n	8003686 <PCD_EP_ISR_Handler+0x266>
 8003680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003682:	3b01      	subs	r3, #1
 8003684:	647b      	str	r3, [r7, #68]	; 0x44
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	881b      	ldrh	r3, [r3, #0]
 800368a:	b29a      	uxth	r2, r3
 800368c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800368e:	b29b      	uxth	r3, r3
 8003690:	029b      	lsls	r3, r3, #10
 8003692:	b29b      	uxth	r3, r3
 8003694:	4313      	orrs	r3, r2
 8003696:	b29b      	uxth	r3, r3
 8003698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800369c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	801a      	strh	r2, [r3, #0]
 80036a6:	e026      	b.n	80036f6 <PCD_EP_ISR_Handler+0x2d6>
 80036a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d10a      	bne.n	80036c6 <PCD_EP_ISR_Handler+0x2a6>
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	b29b      	uxth	r3, r3
 80036b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80036ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80036be:	b29a      	uxth	r2, r3
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	801a      	strh	r2, [r3, #0]
 80036c4:	e017      	b.n	80036f6 <PCD_EP_ISR_Handler+0x2d6>
 80036c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	085b      	lsrs	r3, r3, #1
 80036cc:	647b      	str	r3, [r7, #68]	; 0x44
 80036ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f003 0301 	and.w	r3, r3, #1
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <PCD_EP_ISR_Handler+0x2c0>
 80036da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036dc:	3301      	adds	r3, #1
 80036de:	647b      	str	r3, [r7, #68]	; 0x44
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	029b      	lsls	r3, r3, #10
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	4313      	orrs	r3, r2
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	881b      	ldrh	r3, [r3, #0]
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003706:	827b      	strh	r3, [r7, #18]
 8003708:	8a7b      	ldrh	r3, [r7, #18]
 800370a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800370e:	827b      	strh	r3, [r7, #18]
 8003710:	8a7b      	ldrh	r3, [r7, #18]
 8003712:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003716:	827b      	strh	r3, [r7, #18]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	8a7b      	ldrh	r3, [r7, #18]
 800371e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003722:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003726:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800372a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800372e:	b29b      	uxth	r3, r3
 8003730:	8013      	strh	r3, [r2, #0]
 8003732:	e22c      	b.n	8003b8e <PCD_EP_ISR_Handler+0x76e>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	461a      	mov	r2, r3
 800373a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	881b      	ldrh	r3, [r3, #0]
 8003744:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003748:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800374c:	2b00      	cmp	r3, #0
 800374e:	f280 80f6 	bge.w	800393e <PCD_EP_ISR_Handler+0x51e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	461a      	mov	r2, r3
 8003758:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	b29a      	uxth	r2, r3
 8003764:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003768:	4013      	ands	r3, r2
 800376a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	461a      	mov	r2, r3
 8003774:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	4413      	add	r3, r2
 800377c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003780:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003784:	b292      	uxth	r2, r2
 8003786:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003788:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	4413      	add	r3, r2
 800379c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800379e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037a0:	7b1b      	ldrb	r3, [r3, #12]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d123      	bne.n	80037ee <PCD_EP_ISR_Handler+0x3ce>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	461a      	mov	r2, r3
 80037b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	00db      	lsls	r3, r3, #3
 80037b8:	4413      	add	r3, r2
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6812      	ldr	r2, [r2, #0]
 80037be:	4413      	add	r3, r2
 80037c0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80037ca:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80037ce:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 808e 	beq.w	80038f4 <PCD_EP_ISR_Handler+0x4d4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037de:	6959      	ldr	r1, [r3, #20]
 80037e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e2:	88da      	ldrh	r2, [r3, #6]
 80037e4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037e8:	f005 ff7a 	bl	80096e0 <USB_ReadPMA>
 80037ec:	e082      	b.n	80038f4 <PCD_EP_ISR_Handler+0x4d4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80037ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037f0:	78db      	ldrb	r3, [r3, #3]
 80037f2:	2b02      	cmp	r3, #2
 80037f4:	d10a      	bne.n	800380c <PCD_EP_ISR_Handler+0x3ec>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80037f6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80037fa:	461a      	mov	r2, r3
 80037fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f9d3 	bl	8003baa <HAL_PCD_EP_DB_Receive>
 8003804:	4603      	mov	r3, r0
 8003806:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800380a:	e073      	b.n	80038f4 <PCD_EP_ISR_Handler+0x4d4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	461a      	mov	r2, r3
 8003812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	b29b      	uxth	r3, r3
 800381e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003826:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	441a      	add	r2, r3
 8003838:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800383c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003840:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003848:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800384c:	b29b      	uxth	r3, r3
 800384e:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	461a      	mov	r2, r3
 8003856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003858:	781b      	ldrb	r3, [r3, #0]
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	b29b      	uxth	r3, r3
 8003862:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d022      	beq.n	80038b0 <PCD_EP_ISR_Handler+0x490>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003872:	b29b      	uxth	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	00db      	lsls	r3, r3, #3
 800387c:	4413      	add	r3, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	4413      	add	r3, r2
 8003884:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003888:	881b      	ldrh	r3, [r3, #0]
 800388a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800388e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003892:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003896:	2b00      	cmp	r3, #0
 8003898:	d02c      	beq.n	80038f4 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6818      	ldr	r0, [r3, #0]
 800389e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a0:	6959      	ldr	r1, [r3, #20]
 80038a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038a4:	891a      	ldrh	r2, [r3, #8]
 80038a6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038aa:	f005 ff19 	bl	80096e0 <USB_ReadPMA>
 80038ae:	e021      	b.n	80038f4 <PCD_EP_ISR_Handler+0x4d4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	461a      	mov	r2, r3
 80038bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	4413      	add	r3, r2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6812      	ldr	r2, [r2, #0]
 80038c8:	4413      	add	r3, r2
 80038ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038d4:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80038d8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d009      	beq.n	80038f4 <PCD_EP_ISR_Handler+0x4d4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6818      	ldr	r0, [r3, #0]
 80038e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038e6:	6959      	ldr	r1, [r3, #20]
 80038e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038ea:	895a      	ldrh	r2, [r3, #10]
 80038ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038f0:	f005 fef6 	bl	80096e0 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80038f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038f6:	69da      	ldr	r2, [r3, #28]
 80038f8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038fc:	441a      	add	r2, r3
 80038fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003900:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003904:	695a      	ldr	r2, [r3, #20]
 8003906:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800390a:	441a      	add	r2, r3
 800390c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800390e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003910:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <PCD_EP_ISR_Handler+0x504>
 8003918:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 800391c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	429a      	cmp	r2, r3
 8003922:	d206      	bcs.n	8003932 <PCD_EP_ISR_Handler+0x512>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	4619      	mov	r1, r3
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f007 fcd2 	bl	800b2d4 <HAL_PCD_DataOutStageCallback>
 8003930:	e005      	b.n	800393e <PCD_EP_ISR_Handler+0x51e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003938:	4618      	mov	r0, r3
 800393a:	f004 f9b0 	bl	8007c9e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800393e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 8121 	beq.w	8003b8e <PCD_EP_ISR_Handler+0x76e>
      {
        ep = &hpcd->IN_ep[epindex];
 800394c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	4613      	mov	r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	4413      	add	r3, r2
 800395e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	461a      	mov	r2, r3
 8003966:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	881b      	ldrh	r3, [r3, #0]
 8003970:	b29b      	uxth	r3, r3
 8003972:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800397a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	441a      	add	r2, r3
 800398c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003990:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003994:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003998:	b29b      	uxth	r3, r3
 800399a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800399c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800399e:	78db      	ldrb	r3, [r3, #3]
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	f040 80a2 	bne.w	8003aea <PCD_EP_ISR_Handler+0x6ca>
        {
          ep->xfer_len = 0U;
 80039a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039a8:	2200      	movs	r2, #0
 80039aa:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80039ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039ae:	7b1b      	ldrb	r3, [r3, #12]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 8093 	beq.w	8003adc <PCD_EP_ISR_Handler+0x6bc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80039b6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80039ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d046      	beq.n	8003a50 <PCD_EP_ISR_Handler+0x630>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80039c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c4:	785b      	ldrb	r3, [r3, #1]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d126      	bne.n	8003a18 <PCD_EP_ISR_Handler+0x5f8>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80039d8:	b29b      	uxth	r3, r3
 80039da:	461a      	mov	r2, r3
 80039dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039de:	4413      	add	r3, r2
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
 80039e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	00da      	lsls	r2, r3, #3
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	4413      	add	r3, r2
 80039ec:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80039f0:	623b      	str	r3, [r7, #32]
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	801a      	strh	r2, [r3, #0]
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	881b      	ldrh	r3, [r3, #0]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003a0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003a10:	b29a      	uxth	r2, r3
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	801a      	strh	r2, [r3, #0]
 8003a16:	e061      	b.n	8003adc <PCD_EP_ISR_Handler+0x6bc>
 8003a18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a1a:	785b      	ldrb	r3, [r3, #1]
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d15d      	bne.n	8003adc <PCD_EP_ISR_Handler+0x6bc>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	461a      	mov	r2, r3
 8003a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a34:	4413      	add	r3, r2
 8003a36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	00da      	lsls	r2, r3, #3
 8003a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a40:	4413      	add	r3, r2
 8003a42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003a46:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	801a      	strh	r2, [r3, #0]
 8003a4e:	e045      	b.n	8003adc <PCD_EP_ISR_Handler+0x6bc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a58:	785b      	ldrb	r3, [r3, #1]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d126      	bne.n	8003aac <PCD_EP_ISR_Handler+0x68c>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	637b      	str	r3, [r7, #52]	; 0x34
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	461a      	mov	r2, r3
 8003a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a72:	4413      	add	r3, r2
 8003a74:	637b      	str	r3, [r7, #52]	; 0x34
 8003a76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	00da      	lsls	r2, r3, #3
 8003a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7e:	4413      	add	r3, r2
 8003a80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003a84:	633b      	str	r3, [r7, #48]	; 0x30
 8003a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a88:	881b      	ldrh	r3, [r3, #0]
 8003a8a:	b29b      	uxth	r3, r3
 8003a8c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a94:	801a      	strh	r2, [r3, #0]
 8003a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003aa4:	b29a      	uxth	r2, r3
 8003aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa8:	801a      	strh	r2, [r3, #0]
 8003aaa:	e017      	b.n	8003adc <PCD_EP_ISR_Handler+0x6bc>
 8003aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aae:	785b      	ldrb	r3, [r3, #1]
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d113      	bne.n	8003adc <PCD_EP_ISR_Handler+0x6bc>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	461a      	mov	r2, r3
 8003ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac2:	4413      	add	r3, r2
 8003ac4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ac6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	00da      	lsls	r2, r3, #3
 8003acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ace:	4413      	add	r3, r2
 8003ad0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ad4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ad8:	2200      	movs	r2, #0
 8003ada:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f007 fc11 	bl	800b30a <HAL_PCD_DataInStageCallback>
 8003ae8:	e051      	b.n	8003b8e <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8003aea:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d144      	bne.n	8003b80 <PCD_EP_ISR_Handler+0x760>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	461a      	mov	r2, r3
 8003b02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	4413      	add	r3, r2
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	6812      	ldr	r2, [r2, #0]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b14:	881b      	ldrh	r3, [r3, #0]
 8003b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8003b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b20:	699a      	ldr	r2, [r3, #24]
 8003b22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d907      	bls.n	8003b3a <PCD_EP_ISR_Handler+0x71a>
            {
              ep->xfer_len -= TxPctSize;
 8003b2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b2c:	699a      	ldr	r2, [r3, #24]
 8003b2e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b32:	1ad2      	subs	r2, r2, r3
 8003b34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b36:	619a      	str	r2, [r3, #24]
 8003b38:	e002      	b.n	8003b40 <PCD_EP_ISR_Handler+0x720>
            }
            else
            {
              ep->xfer_len = 0U;
 8003b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8003b40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d106      	bne.n	8003b56 <PCD_EP_ISR_Handler+0x736>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f007 fbdb 	bl	800b30a <HAL_PCD_DataInStageCallback>
 8003b54:	e01b      	b.n	8003b8e <PCD_EP_ISR_Handler+0x76e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8003b56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b58:	695a      	ldr	r2, [r3, #20]
 8003b5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b5e:	441a      	add	r2, r3
 8003b60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b62:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8003b64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b66:	69da      	ldr	r2, [r3, #28]
 8003b68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b6c:	441a      	add	r2, r3
 8003b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b70:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f004 f890 	bl	8007c9e <USB_EPStartXfer>
 8003b7e:	e006      	b.n	8003b8e <PCD_EP_ISR_Handler+0x76e>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8003b80:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b84:	461a      	mov	r2, r3
 8003b86:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f917 	bl	8003dbc <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	b21b      	sxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f6ff ac45 	blt.w	800342a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3758      	adds	r7, #88	; 0x58
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003baa:	b580      	push	{r7, lr}
 8003bac:	b088      	sub	sp, #32
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	60f8      	str	r0, [r7, #12]
 8003bb2:	60b9      	str	r1, [r7, #8]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d07c      	beq.n	8003cbc <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	461a      	mov	r2, r3
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	781b      	ldrb	r3, [r3, #0]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	6812      	ldr	r2, [r2, #0]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003be6:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	699a      	ldr	r2, [r3, #24]
 8003bec:	8b7b      	ldrh	r3, [r7, #26]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d306      	bcc.n	8003c00 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	8b7b      	ldrh	r3, [r7, #26]
 8003bf8:	1ad2      	subs	r2, r2, r3
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	619a      	str	r2, [r3, #24]
 8003bfe:	e002      	b.n	8003c06 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2200      	movs	r2, #0
 8003c04:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d123      	bne.n	8003c56 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	461a      	mov	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	4413      	add	r3, r2
 8003c1c:	881b      	ldrh	r3, [r3, #0]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c28:	833b      	strh	r3, [r7, #24]
 8003c2a:	8b3b      	ldrh	r3, [r7, #24]
 8003c2c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c30:	833b      	strh	r3, [r7, #24]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	461a      	mov	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	441a      	add	r2, r3
 8003c40:	8b3b      	ldrh	r3, [r7, #24]
 8003c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003c56:	88fb      	ldrh	r3, [r7, #6]
 8003c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01f      	beq.n	8003ca0 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	461a      	mov	r2, r3
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	881b      	ldrh	r3, [r3, #0]
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7a:	82fb      	strh	r3, [r7, #22]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	461a      	mov	r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	441a      	add	r2, r3
 8003c8a:	8afb      	ldrh	r3, [r7, #22]
 8003c8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c98:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c9c:	b29b      	uxth	r3, r3
 8003c9e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003ca0:	8b7b      	ldrh	r3, [r7, #26]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f000 8085 	beq.w	8003db2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6818      	ldr	r0, [r3, #0]
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	6959      	ldr	r1, [r3, #20]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	891a      	ldrh	r2, [r3, #8]
 8003cb4:	8b7b      	ldrh	r3, [r7, #26]
 8003cb6:	f005 fd13 	bl	80096e0 <USB_ReadPMA>
 8003cba:	e07a      	b.n	8003db2 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4413      	add	r3, r2
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	6812      	ldr	r2, [r2, #0]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ce0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	699a      	ldr	r2, [r3, #24]
 8003ce6:	8b7b      	ldrh	r3, [r7, #26]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d306      	bcc.n	8003cfa <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	699a      	ldr	r2, [r3, #24]
 8003cf0:	8b7b      	ldrh	r3, [r7, #26]
 8003cf2:	1ad2      	subs	r2, r2, r3
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	619a      	str	r2, [r3, #24]
 8003cf8:	e002      	b.n	8003d00 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	699b      	ldr	r3, [r3, #24]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d123      	bne.n	8003d50 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	4413      	add	r3, r2
 8003d16:	881b      	ldrh	r3, [r3, #0]
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d22:	83fb      	strh	r3, [r7, #30]
 8003d24:	8bfb      	ldrh	r3, [r7, #30]
 8003d26:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d2a:	83fb      	strh	r3, [r7, #30]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	461a      	mov	r2, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	441a      	add	r2, r3
 8003d3a:	8bfb      	ldrh	r3, [r7, #30]
 8003d3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8003d50:	88fb      	ldrh	r3, [r7, #6]
 8003d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d11f      	bne.n	8003d9a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d74:	83bb      	strh	r3, [r7, #28]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	441a      	add	r2, r3
 8003d84:	8bbb      	ldrh	r3, [r7, #28]
 8003d86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8003d9a:	8b7b      	ldrh	r3, [r7, #26]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d008      	beq.n	8003db2 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	6818      	ldr	r0, [r3, #0]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	6959      	ldr	r1, [r3, #20]
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	895a      	ldrh	r2, [r3, #10]
 8003dac:	8b7b      	ldrh	r3, [r7, #26]
 8003dae:	f005 fc97 	bl	80096e0 <USB_ReadPMA>
    }
  }

  return count;
 8003db2:	8b7b      	ldrh	r3, [r7, #26]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3720      	adds	r7, #32
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b0a4      	sub	sp, #144	; 0x90
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	60f8      	str	r0, [r7, #12]
 8003dc4:	60b9      	str	r1, [r7, #8]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8003dca:	88fb      	ldrh	r3, [r7, #6]
 8003dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f000 81db 	beq.w	800418c <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	461a      	mov	r2, r3
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4413      	add	r3, r2
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	6812      	ldr	r2, [r2, #0]
 8003dee:	4413      	add	r3, r2
 8003df0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003df4:	881b      	ldrh	r3, [r3, #0]
 8003df6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003dfa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	699a      	ldr	r2, [r3, #24]
 8003e02:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d907      	bls.n	8003e1a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	699a      	ldr	r2, [r3, #24]
 8003e0e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003e12:	1ad2      	subs	r2, r2, r3
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	619a      	str	r2, [r3, #24]
 8003e18:	e002      	b.n	8003e20 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f040 80b9 	bne.w	8003f9c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	785b      	ldrb	r3, [r3, #1]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d126      	bne.n	8003e80 <HAL_PCD_EP_DB_Transmit+0xc4>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e40:	b29b      	uxth	r3, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e46:	4413      	add	r3, r2
 8003e48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	00da      	lsls	r2, r3, #3
 8003e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e52:	4413      	add	r3, r2
 8003e54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003e58:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e5c:	881b      	ldrh	r3, [r3, #0]
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e68:	801a      	strh	r2, [r3, #0]
 8003e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003e74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003e78:	b29a      	uxth	r2, r3
 8003e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7c:	801a      	strh	r2, [r3, #0]
 8003e7e:	e01a      	b.n	8003eb6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	785b      	ldrb	r3, [r3, #1]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d116      	bne.n	8003eb6 <HAL_PCD_EP_DB_Transmit+0xfa>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	461a      	mov	r2, r3
 8003e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e9c:	4413      	add	r3, r2
 8003e9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	00da      	lsls	r2, r3, #3
 8003ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003eae:	633b      	str	r3, [r7, #48]	; 0x30
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	627b      	str	r3, [r7, #36]	; 0x24
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	785b      	ldrb	r3, [r3, #1]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d126      	bne.n	8003f12 <HAL_PCD_EP_DB_Transmit+0x156>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	61fb      	str	r3, [r7, #28]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ed2:	b29b      	uxth	r3, r3
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	4413      	add	r3, r2
 8003eda:	61fb      	str	r3, [r7, #28]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	00da      	lsls	r2, r3, #3
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	4413      	add	r3, r2
 8003ee6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003eea:	61bb      	str	r3, [r7, #24]
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	881b      	ldrh	r3, [r3, #0]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ef6:	b29a      	uxth	r2, r3
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	801a      	strh	r2, [r3, #0]
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	801a      	strh	r2, [r3, #0]
 8003f10:	e017      	b.n	8003f42 <HAL_PCD_EP_DB_Transmit+0x186>
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	785b      	ldrb	r3, [r3, #1]
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d113      	bne.n	8003f42 <HAL_PCD_EP_DB_Transmit+0x186>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	461a      	mov	r2, r3
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	4413      	add	r3, r2
 8003f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	00da      	lsls	r2, r3, #3
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	4413      	add	r3, r2
 8003f36:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f3a:	623b      	str	r3, [r7, #32]
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	4619      	mov	r1, r3
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f007 f9de 	bl	800b30a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f4e:	88fb      	ldrh	r3, [r7, #6]
 8003f50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 82fa 	beq.w	800454e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	4413      	add	r3, r2
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f74:	82fb      	strh	r3, [r7, #22]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	781b      	ldrb	r3, [r3, #0]
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	441a      	add	r2, r3
 8003f84:	8afb      	ldrh	r3, [r7, #22]
 8003f86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	8013      	strh	r3, [r2, #0]
 8003f9a:	e2d8      	b.n	800454e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003f9c:	88fb      	ldrh	r3, [r7, #6]
 8003f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d021      	beq.n	8003fea <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	461a      	mov	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	009b      	lsls	r3, r3, #2
 8003fb2:	4413      	add	r3, r2
 8003fb4:	881b      	ldrh	r3, [r3, #0]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	461a      	mov	r2, r3
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	781b      	ldrb	r3, [r3, #0]
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	441a      	add	r2, r3
 8003fd2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003fd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fde:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	f040 82ac 	bne.w	800454e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	695a      	ldr	r2, [r3, #20]
 8003ffa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8003ffe:	441a      	add	r2, r3
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	69da      	ldr	r2, [r3, #28]
 8004008:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800400c:	441a      	add	r2, r3
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	6a1a      	ldr	r2, [r3, #32]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	429a      	cmp	r2, r3
 800401c:	d30b      	bcc.n	8004036 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	691b      	ldr	r3, [r3, #16]
 8004022:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	6a1a      	ldr	r2, [r3, #32]
 800402a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800402e:	1ad2      	subs	r2, r2, r3
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	621a      	str	r2, [r3, #32]
 8004034:	e017      	b.n	8004066 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d108      	bne.n	8004050 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 800403e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004042:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800404e:	e00a      	b.n	8004066 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2200      	movs	r2, #0
 8004064:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	785b      	ldrb	r3, [r3, #1]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d165      	bne.n	800413a <HAL_PCD_EP_DB_Transmit+0x37e>
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800407c:	b29b      	uxth	r3, r3
 800407e:	461a      	mov	r2, r3
 8004080:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004082:	4413      	add	r3, r2
 8004084:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	00da      	lsls	r2, r3, #3
 800408c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800408e:	4413      	add	r3, r2
 8004090:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004094:	63bb      	str	r3, [r7, #56]	; 0x38
 8004096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004098:	881b      	ldrh	r3, [r3, #0]
 800409a:	b29b      	uxth	r3, r3
 800409c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040a0:	b29a      	uxth	r2, r3
 80040a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040a4:	801a      	strh	r2, [r3, #0]
 80040a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040aa:	2b3e      	cmp	r3, #62	; 0x3e
 80040ac:	d91d      	bls.n	80040ea <HAL_PCD_EP_DB_Transmit+0x32e>
 80040ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80040b6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040ba:	f003 031f 	and.w	r3, r3, #31
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d102      	bne.n	80040c8 <HAL_PCD_EP_DB_Transmit+0x30c>
 80040c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040c4:	3b01      	subs	r3, #1
 80040c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80040c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	029b      	lsls	r3, r3, #10
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	4313      	orrs	r3, r2
 80040d8:	b29b      	uxth	r3, r3
 80040da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e6:	801a      	strh	r2, [r3, #0]
 80040e8:	e044      	b.n	8004174 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80040ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10a      	bne.n	8004108 <HAL_PCD_EP_DB_Transmit+0x34c>
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80040fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004100:	b29a      	uxth	r2, r3
 8004102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004104:	801a      	strh	r2, [r3, #0]
 8004106:	e035      	b.n	8004174 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004108:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800410c:	085b      	lsrs	r3, r3, #1
 800410e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004110:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d002      	beq.n	8004122 <HAL_PCD_EP_DB_Transmit+0x366>
 800411c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800411e:	3301      	adds	r3, #1
 8004120:	64bb      	str	r3, [r7, #72]	; 0x48
 8004122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004124:	881b      	ldrh	r3, [r3, #0]
 8004126:	b29a      	uxth	r2, r3
 8004128:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800412a:	b29b      	uxth	r3, r3
 800412c:	029b      	lsls	r3, r3, #10
 800412e:	b29b      	uxth	r3, r3
 8004130:	4313      	orrs	r3, r2
 8004132:	b29a      	uxth	r2, r3
 8004134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004136:	801a      	strh	r2, [r3, #0]
 8004138:	e01c      	b.n	8004174 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	785b      	ldrb	r3, [r3, #1]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d118      	bne.n	8004174 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	647b      	str	r3, [r7, #68]	; 0x44
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004150:	b29b      	uxth	r3, r3
 8004152:	461a      	mov	r2, r3
 8004154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004156:	4413      	add	r3, r2
 8004158:	647b      	str	r3, [r7, #68]	; 0x44
 800415a:	68bb      	ldr	r3, [r7, #8]
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	00da      	lsls	r2, r3, #3
 8004160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004162:	4413      	add	r3, r2
 8004164:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004168:	643b      	str	r3, [r7, #64]	; 0x40
 800416a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800416e:	b29a      	uxth	r2, r3
 8004170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004172:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6818      	ldr	r0, [r3, #0]
 8004178:	68bb      	ldr	r3, [r7, #8]
 800417a:	6959      	ldr	r1, [r3, #20]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	891a      	ldrh	r2, [r3, #8]
 8004180:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004184:	b29b      	uxth	r3, r3
 8004186:	f005 fa69 	bl	800965c <USB_WritePMA>
 800418a:	e1e0      	b.n	800454e <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004194:	b29b      	uxth	r3, r3
 8004196:	461a      	mov	r2, r3
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	00db      	lsls	r3, r3, #3
 800419e:	4413      	add	r3, r2
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	6812      	ldr	r2, [r2, #0]
 80041a4:	4413      	add	r3, r2
 80041a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041b0:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	699a      	ldr	r2, [r3, #24]
 80041b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041bc:	429a      	cmp	r2, r3
 80041be:	d307      	bcc.n	80041d0 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	699a      	ldr	r2, [r3, #24]
 80041c4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80041c8:	1ad2      	subs	r2, r2, r3
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	619a      	str	r2, [r3, #24]
 80041ce:	e002      	b.n	80041d6 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	2200      	movs	r2, #0
 80041d4:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	f040 80c0 	bne.w	8004360 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	785b      	ldrb	r3, [r3, #1]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d126      	bne.n	8004236 <HAL_PCD_EP_DB_Transmit+0x47a>
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	67fb      	str	r3, [r7, #124]	; 0x7c
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	461a      	mov	r2, r3
 80041fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80041fc:	4413      	add	r3, r2
 80041fe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	00da      	lsls	r2, r3, #3
 8004206:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004208:	4413      	add	r3, r2
 800420a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800420e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004210:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004212:	881b      	ldrh	r3, [r3, #0]
 8004214:	b29b      	uxth	r3, r3
 8004216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800421a:	b29a      	uxth	r2, r3
 800421c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800421e:	801a      	strh	r2, [r3, #0]
 8004220:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	b29b      	uxth	r3, r3
 8004226:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800422a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800422e:	b29a      	uxth	r2, r3
 8004230:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004232:	801a      	strh	r2, [r3, #0]
 8004234:	e01a      	b.n	800426c <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	785b      	ldrb	r3, [r3, #1]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d116      	bne.n	800426c <HAL_PCD_EP_DB_Transmit+0x4b0>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	667b      	str	r3, [r7, #100]	; 0x64
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800424c:	b29b      	uxth	r3, r3
 800424e:	461a      	mov	r2, r3
 8004250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004252:	4413      	add	r3, r2
 8004254:	667b      	str	r3, [r7, #100]	; 0x64
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	00da      	lsls	r2, r3, #3
 800425c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800425e:	4413      	add	r3, r2
 8004260:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004264:	663b      	str	r3, [r7, #96]	; 0x60
 8004266:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004268:	2200      	movs	r2, #0
 800426a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	677b      	str	r3, [r7, #116]	; 0x74
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	785b      	ldrb	r3, [r3, #1]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d12b      	bne.n	80042d2 <HAL_PCD_EP_DB_Transmit+0x516>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004288:	b29b      	uxth	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800428e:	4413      	add	r3, r2
 8004290:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	00da      	lsls	r2, r3, #3
 8004298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800429a:	4413      	add	r3, r2
 800429c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80042a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042a4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042a8:	881b      	ldrh	r3, [r3, #0]
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042b0:	b29a      	uxth	r2, r3
 80042b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042b6:	801a      	strh	r2, [r3, #0]
 80042b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042bc:	881b      	ldrh	r3, [r3, #0]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042c8:	b29a      	uxth	r2, r3
 80042ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80042ce:	801a      	strh	r2, [r3, #0]
 80042d0:	e017      	b.n	8004302 <HAL_PCD_EP_DB_Transmit+0x546>
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	785b      	ldrb	r3, [r3, #1]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d113      	bne.n	8004302 <HAL_PCD_EP_DB_Transmit+0x546>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	461a      	mov	r2, r3
 80042e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042e8:	4413      	add	r3, r2
 80042ea:	677b      	str	r3, [r7, #116]	; 0x74
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	00da      	lsls	r2, r3, #3
 80042f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042f4:	4413      	add	r3, r2
 80042f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80042fa:	673b      	str	r3, [r7, #112]	; 0x70
 80042fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042fe:	2200      	movs	r2, #0
 8004300:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	4619      	mov	r1, r3
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f006 fffe 	bl	800b30a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800430e:	88fb      	ldrh	r3, [r7, #6]
 8004310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004314:	2b00      	cmp	r3, #0
 8004316:	f040 811a 	bne.w	800454e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4413      	add	r3, r2
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	b29b      	uxth	r3, r3
 800432c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004334:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	461a      	mov	r2, r3
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	441a      	add	r2, r3
 8004346:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 800434a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800434e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004352:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004356:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800435a:	b29b      	uxth	r3, r3
 800435c:	8013      	strh	r3, [r2, #0]
 800435e:	e0f6      	b.n	800454e <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004360:	88fb      	ldrh	r3, [r7, #6]
 8004362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d121      	bne.n	80043ae <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	781b      	ldrb	r3, [r3, #0]
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4413      	add	r3, r2
 8004378:	881b      	ldrh	r3, [r3, #0]
 800437a:	b29b      	uxth	r3, r3
 800437c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004384:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	461a      	mov	r2, r3
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	441a      	add	r2, r3
 8004396:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800439a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800439e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	f040 80ca 	bne.w	800454e <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	695a      	ldr	r2, [r3, #20]
 80043be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80043c2:	441a      	add	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	69da      	ldr	r2, [r3, #28]
 80043cc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80043d0:	441a      	add	r2, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	6a1a      	ldr	r2, [r3, #32]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	691b      	ldr	r3, [r3, #16]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d30b      	bcc.n	80043fa <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	6a1a      	ldr	r2, [r3, #32]
 80043ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043f2:	1ad2      	subs	r2, r2, r3
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	621a      	str	r2, [r3, #32]
 80043f8:	e017      	b.n	800442a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	6a1b      	ldr	r3, [r3, #32]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d108      	bne.n	8004414 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004402:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004406:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004412:	e00a      	b.n	800442a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2200      	movs	r2, #0
 8004420:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	657b      	str	r3, [r7, #84]	; 0x54
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	785b      	ldrb	r3, [r3, #1]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d165      	bne.n	8004504 <HAL_PCD_EP_DB_Transmit+0x748>
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004446:	b29b      	uxth	r3, r3
 8004448:	461a      	mov	r2, r3
 800444a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800444c:	4413      	add	r3, r2
 800444e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	00da      	lsls	r2, r3, #3
 8004456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004458:	4413      	add	r3, r2
 800445a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800445e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004460:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004462:	881b      	ldrh	r3, [r3, #0]
 8004464:	b29b      	uxth	r3, r3
 8004466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800446a:	b29a      	uxth	r2, r3
 800446c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800446e:	801a      	strh	r2, [r3, #0]
 8004470:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004474:	2b3e      	cmp	r3, #62	; 0x3e
 8004476:	d91d      	bls.n	80044b4 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004478:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800447c:	095b      	lsrs	r3, r3, #5
 800447e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004480:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004484:	f003 031f 	and.w	r3, r3, #31
 8004488:	2b00      	cmp	r3, #0
 800448a:	d102      	bne.n	8004492 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800448c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800448e:	3b01      	subs	r3, #1
 8004490:	66bb      	str	r3, [r7, #104]	; 0x68
 8004492:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004494:	881b      	ldrh	r3, [r3, #0]
 8004496:	b29a      	uxth	r2, r3
 8004498:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800449a:	b29b      	uxth	r3, r3
 800449c:	029b      	lsls	r3, r3, #10
 800449e:	b29b      	uxth	r3, r3
 80044a0:	4313      	orrs	r3, r2
 80044a2:	b29b      	uxth	r3, r3
 80044a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044b0:	801a      	strh	r2, [r3, #0]
 80044b2:	e041      	b.n	8004538 <HAL_PCD_EP_DB_Transmit+0x77c>
 80044b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10a      	bne.n	80044d2 <HAL_PCD_EP_DB_Transmit+0x716>
 80044bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044ca:	b29a      	uxth	r2, r3
 80044cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044ce:	801a      	strh	r2, [r3, #0]
 80044d0:	e032      	b.n	8004538 <HAL_PCD_EP_DB_Transmit+0x77c>
 80044d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044d6:	085b      	lsrs	r3, r3, #1
 80044d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80044da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80044de:	f003 0301 	and.w	r3, r3, #1
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d002      	beq.n	80044ec <HAL_PCD_EP_DB_Transmit+0x730>
 80044e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044e8:	3301      	adds	r3, #1
 80044ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80044ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80044ee:	881b      	ldrh	r3, [r3, #0]
 80044f0:	b29a      	uxth	r2, r3
 80044f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80044f4:	b29b      	uxth	r3, r3
 80044f6:	029b      	lsls	r3, r3, #10
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	4313      	orrs	r3, r2
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004500:	801a      	strh	r2, [r3, #0]
 8004502:	e019      	b.n	8004538 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	785b      	ldrb	r3, [r3, #1]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d115      	bne.n	8004538 <HAL_PCD_EP_DB_Transmit+0x77c>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004514:	b29b      	uxth	r3, r3
 8004516:	461a      	mov	r2, r3
 8004518:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800451a:	4413      	add	r3, r2
 800451c:	657b      	str	r3, [r7, #84]	; 0x54
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	00da      	lsls	r2, r3, #3
 8004524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004526:	4413      	add	r3, r2
 8004528:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800452c:	653b      	str	r3, [r7, #80]	; 0x50
 800452e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004532:	b29a      	uxth	r2, r3
 8004534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004536:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6818      	ldr	r0, [r3, #0]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	6959      	ldr	r1, [r3, #20]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	895a      	ldrh	r2, [r3, #10]
 8004544:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004548:	b29b      	uxth	r3, r3
 800454a:	f005 f887 	bl	800965c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	461a      	mov	r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	4413      	add	r3, r2
 800455c:	881b      	ldrh	r3, [r3, #0]
 800455e:	b29b      	uxth	r3, r3
 8004560:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004564:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004568:	82bb      	strh	r3, [r7, #20]
 800456a:	8abb      	ldrh	r3, [r7, #20]
 800456c:	f083 0310 	eor.w	r3, r3, #16
 8004570:	82bb      	strh	r3, [r7, #20]
 8004572:	8abb      	ldrh	r3, [r7, #20]
 8004574:	f083 0320 	eor.w	r3, r3, #32
 8004578:	82bb      	strh	r3, [r7, #20]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	461a      	mov	r2, r3
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	009b      	lsls	r3, r3, #2
 8004586:	441a      	add	r2, r3
 8004588:	8abb      	ldrh	r3, [r7, #20]
 800458a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800458e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800459a:	b29b      	uxth	r3, r3
 800459c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3790      	adds	r7, #144	; 0x90
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	607b      	str	r3, [r7, #4]
 80045b2:	460b      	mov	r3, r1
 80045b4:	817b      	strh	r3, [r7, #10]
 80045b6:	4613      	mov	r3, r2
 80045b8:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80045ba:	897b      	ldrh	r3, [r7, #10]
 80045bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00b      	beq.n	80045de <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045c6:	897b      	ldrh	r3, [r7, #10]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	4613      	mov	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	00db      	lsls	r3, r3, #3
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4413      	add	r3, r2
 80045da:	617b      	str	r3, [r7, #20]
 80045dc:	e009      	b.n	80045f2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80045de:	897a      	ldrh	r2, [r7, #10]
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	00db      	lsls	r3, r3, #3
 80045e8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	4413      	add	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80045f2:	893b      	ldrh	r3, [r7, #8]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d107      	bne.n	8004608 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2200      	movs	r2, #0
 80045fc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	b29a      	uxth	r2, r3
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	80da      	strh	r2, [r3, #6]
 8004606:	e00b      	b.n	8004620 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	2201      	movs	r2, #1
 800460c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	b29a      	uxth	r2, r3
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	0c1b      	lsrs	r3, r3, #16
 800461a:	b29a      	uxth	r2, r3
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004620:	2300      	movs	r3, #0
}
 8004622:	4618      	mov	r0, r3
 8004624:	371c      	adds	r7, #28
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
	...

08004630 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004636:	af00      	add	r7, sp, #0
 8004638:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800463c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004640:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004646:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d102      	bne.n	8004656 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	f001 b83a 	b.w	80056ca <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004656:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800465a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0301 	and.w	r3, r3, #1
 8004666:	2b00      	cmp	r3, #0
 8004668:	f000 816f 	beq.w	800494a <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800466c:	4bb5      	ldr	r3, [pc, #724]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f003 030c 	and.w	r3, r3, #12
 8004674:	2b04      	cmp	r3, #4
 8004676:	d00c      	beq.n	8004692 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004678:	4bb2      	ldr	r3, [pc, #712]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	f003 030c 	and.w	r3, r3, #12
 8004680:	2b08      	cmp	r3, #8
 8004682:	d15c      	bne.n	800473e <HAL_RCC_OscConfig+0x10e>
 8004684:	4baf      	ldr	r3, [pc, #700]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 8004686:	685b      	ldr	r3, [r3, #4]
 8004688:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800468c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004690:	d155      	bne.n	800473e <HAL_RCC_OscConfig+0x10e>
 8004692:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004696:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800469a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800469e:	fa93 f3a3 	rbit	r3, r3
 80046a2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046a6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046aa:	fab3 f383 	clz	r3, r3
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	095b      	lsrs	r3, r3, #5
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	f043 0301 	orr.w	r3, r3, #1
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d102      	bne.n	80046c4 <HAL_RCC_OscConfig+0x94>
 80046be:	4ba1      	ldr	r3, [pc, #644]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	e015      	b.n	80046f0 <HAL_RCC_OscConfig+0xc0>
 80046c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046c8:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046cc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80046d0:	fa93 f3a3 	rbit	r3, r3
 80046d4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80046d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80046dc:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80046e0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80046e4:	fa93 f3a3 	rbit	r3, r3
 80046e8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80046ec:	4b95      	ldr	r3, [pc, #596]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 80046ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80046f4:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80046f8:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80046fc:	fa92 f2a2 	rbit	r2, r2
 8004700:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8004704:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8004708:	fab2 f282 	clz	r2, r2
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	f042 0220 	orr.w	r2, r2, #32
 8004712:	b2d2      	uxtb	r2, r2
 8004714:	f002 021f 	and.w	r2, r2, #31
 8004718:	2101      	movs	r1, #1
 800471a:	fa01 f202 	lsl.w	r2, r1, r2
 800471e:	4013      	ands	r3, r2
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 8111 	beq.w	8004948 <HAL_RCC_OscConfig+0x318>
 8004726:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800472a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f040 8108 	bne.w	8004948 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	f000 bfc6 	b.w	80056ca <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800473e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004742:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800474e:	d106      	bne.n	800475e <HAL_RCC_OscConfig+0x12e>
 8004750:	4b7c      	ldr	r3, [pc, #496]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a7b      	ldr	r2, [pc, #492]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 8004756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800475a:	6013      	str	r3, [r2, #0]
 800475c:	e036      	b.n	80047cc <HAL_RCC_OscConfig+0x19c>
 800475e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004762:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10c      	bne.n	8004788 <HAL_RCC_OscConfig+0x158>
 800476e:	4b75      	ldr	r3, [pc, #468]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a74      	ldr	r2, [pc, #464]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 8004774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	4b72      	ldr	r3, [pc, #456]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a71      	ldr	r2, [pc, #452]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 8004780:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	e021      	b.n	80047cc <HAL_RCC_OscConfig+0x19c>
 8004788:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800478c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004798:	d10c      	bne.n	80047b4 <HAL_RCC_OscConfig+0x184>
 800479a:	4b6a      	ldr	r3, [pc, #424]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a69      	ldr	r2, [pc, #420]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 80047a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	4b67      	ldr	r3, [pc, #412]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a66      	ldr	r2, [pc, #408]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 80047ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	e00b      	b.n	80047cc <HAL_RCC_OscConfig+0x19c>
 80047b4:	4b63      	ldr	r3, [pc, #396]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a62      	ldr	r2, [pc, #392]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 80047ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	4b60      	ldr	r3, [pc, #384]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a5f      	ldr	r2, [pc, #380]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 80047c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047ca:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80047d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d059      	beq.n	8004890 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047dc:	f7fd f81e 	bl	800181c <HAL_GetTick>
 80047e0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e4:	e00a      	b.n	80047fc <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047e6:	f7fd f819 	bl	800181c <HAL_GetTick>
 80047ea:	4602      	mov	r2, r0
 80047ec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b64      	cmp	r3, #100	; 0x64
 80047f4:	d902      	bls.n	80047fc <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	f000 bf67 	b.w	80056ca <HAL_RCC_OscConfig+0x109a>
 80047fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004800:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004804:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8004808:	fa93 f3a3 	rbit	r3, r3
 800480c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8004810:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004814:	fab3 f383 	clz	r3, r3
 8004818:	b2db      	uxtb	r3, r3
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	b2db      	uxtb	r3, r3
 800481e:	f043 0301 	orr.w	r3, r3, #1
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b01      	cmp	r3, #1
 8004826:	d102      	bne.n	800482e <HAL_RCC_OscConfig+0x1fe>
 8004828:	4b46      	ldr	r3, [pc, #280]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	e015      	b.n	800485a <HAL_RCC_OscConfig+0x22a>
 800482e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004832:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004836:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 800483a:	fa93 f3a3 	rbit	r3, r3
 800483e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8004842:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004846:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800484a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800484e:	fa93 f3a3 	rbit	r3, r3
 8004852:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004856:	4b3b      	ldr	r3, [pc, #236]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800485e:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8004862:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8004866:	fa92 f2a2 	rbit	r2, r2
 800486a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800486e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8004872:	fab2 f282 	clz	r2, r2
 8004876:	b2d2      	uxtb	r2, r2
 8004878:	f042 0220 	orr.w	r2, r2, #32
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	f002 021f 	and.w	r2, r2, #31
 8004882:	2101      	movs	r1, #1
 8004884:	fa01 f202 	lsl.w	r2, r1, r2
 8004888:	4013      	ands	r3, r2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d0ab      	beq.n	80047e6 <HAL_RCC_OscConfig+0x1b6>
 800488e:	e05c      	b.n	800494a <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004890:	f7fc ffc4 	bl	800181c <HAL_GetTick>
 8004894:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004898:	e00a      	b.n	80048b0 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800489a:	f7fc ffbf 	bl	800181c <HAL_GetTick>
 800489e:	4602      	mov	r2, r0
 80048a0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b64      	cmp	r3, #100	; 0x64
 80048a8:	d902      	bls.n	80048b0 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	f000 bf0d 	b.w	80056ca <HAL_RCC_OscConfig+0x109a>
 80048b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048b4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80048bc:	fa93 f3a3 	rbit	r3, r3
 80048c0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 80048c4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048c8:	fab3 f383 	clz	r3, r3
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	095b      	lsrs	r3, r3, #5
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	f043 0301 	orr.w	r3, r3, #1
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d102      	bne.n	80048e2 <HAL_RCC_OscConfig+0x2b2>
 80048dc:	4b19      	ldr	r3, [pc, #100]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	e015      	b.n	800490e <HAL_RCC_OscConfig+0x2de>
 80048e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048e6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ea:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80048ee:	fa93 f3a3 	rbit	r3, r3
 80048f2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80048f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80048fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80048fe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8004902:	fa93 f3a3 	rbit	r3, r3
 8004906:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800490a:	4b0e      	ldr	r3, [pc, #56]	; (8004944 <HAL_RCC_OscConfig+0x314>)
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004912:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004916:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800491a:	fa92 f2a2 	rbit	r2, r2
 800491e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8004922:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8004926:	fab2 f282 	clz	r2, r2
 800492a:	b2d2      	uxtb	r2, r2
 800492c:	f042 0220 	orr.w	r2, r2, #32
 8004930:	b2d2      	uxtb	r2, r2
 8004932:	f002 021f 	and.w	r2, r2, #31
 8004936:	2101      	movs	r1, #1
 8004938:	fa01 f202 	lsl.w	r2, r1, r2
 800493c:	4013      	ands	r3, r2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d1ab      	bne.n	800489a <HAL_RCC_OscConfig+0x26a>
 8004942:	e002      	b.n	800494a <HAL_RCC_OscConfig+0x31a>
 8004944:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800494a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800494e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0302 	and.w	r3, r3, #2
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 817f 	beq.w	8004c5e <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004960:	4ba7      	ldr	r3, [pc, #668]	; (8004c00 <HAL_RCC_OscConfig+0x5d0>)
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	f003 030c 	and.w	r3, r3, #12
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00c      	beq.n	8004986 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800496c:	4ba4      	ldr	r3, [pc, #656]	; (8004c00 <HAL_RCC_OscConfig+0x5d0>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f003 030c 	and.w	r3, r3, #12
 8004974:	2b08      	cmp	r3, #8
 8004976:	d173      	bne.n	8004a60 <HAL_RCC_OscConfig+0x430>
 8004978:	4ba1      	ldr	r3, [pc, #644]	; (8004c00 <HAL_RCC_OscConfig+0x5d0>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8004980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004984:	d16c      	bne.n	8004a60 <HAL_RCC_OscConfig+0x430>
 8004986:	2302      	movs	r3, #2
 8004988:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800498c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8004990:	fa93 f3a3 	rbit	r3, r3
 8004994:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8004998:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800499c:	fab3 f383 	clz	r3, r3
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	095b      	lsrs	r3, r3, #5
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	f043 0301 	orr.w	r3, r3, #1
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d102      	bne.n	80049b6 <HAL_RCC_OscConfig+0x386>
 80049b0:	4b93      	ldr	r3, [pc, #588]	; (8004c00 <HAL_RCC_OscConfig+0x5d0>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	e013      	b.n	80049de <HAL_RCC_OscConfig+0x3ae>
 80049b6:	2302      	movs	r3, #2
 80049b8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049bc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80049c0:	fa93 f3a3 	rbit	r3, r3
 80049c4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80049c8:	2302      	movs	r3, #2
 80049ca:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80049ce:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80049d2:	fa93 f3a3 	rbit	r3, r3
 80049d6:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80049da:	4b89      	ldr	r3, [pc, #548]	; (8004c00 <HAL_RCC_OscConfig+0x5d0>)
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	2202      	movs	r2, #2
 80049e0:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80049e4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80049e8:	fa92 f2a2 	rbit	r2, r2
 80049ec:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80049f0:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80049f4:	fab2 f282 	clz	r2, r2
 80049f8:	b2d2      	uxtb	r2, r2
 80049fa:	f042 0220 	orr.w	r2, r2, #32
 80049fe:	b2d2      	uxtb	r2, r2
 8004a00:	f002 021f 	and.w	r2, r2, #31
 8004a04:	2101      	movs	r1, #1
 8004a06:	fa01 f202 	lsl.w	r2, r1, r2
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <HAL_RCC_OscConfig+0x3f6>
 8004a10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d002      	beq.n	8004a26 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	f000 be52 	b.w	80056ca <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a26:	4b76      	ldr	r3, [pc, #472]	; (8004c00 <HAL_RCC_OscConfig+0x5d0>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a32:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	691b      	ldr	r3, [r3, #16]
 8004a3a:	21f8      	movs	r1, #248	; 0xf8
 8004a3c:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a40:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004a44:	fa91 f1a1 	rbit	r1, r1
 8004a48:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8004a4c:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8004a50:	fab1 f181 	clz	r1, r1
 8004a54:	b2c9      	uxtb	r1, r1
 8004a56:	408b      	lsls	r3, r1
 8004a58:	4969      	ldr	r1, [pc, #420]	; (8004c00 <HAL_RCC_OscConfig+0x5d0>)
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a5e:	e0fe      	b.n	8004c5e <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a60:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004a64:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 8088 	beq.w	8004b82 <HAL_RCC_OscConfig+0x552>
 8004a72:	2301      	movs	r3, #1
 8004a74:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a78:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004a7c:	fa93 f3a3 	rbit	r3, r3
 8004a80:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8004a84:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a88:	fab3 f383 	clz	r3, r3
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004a92:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	461a      	mov	r2, r3
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a9e:	f7fc febd 	bl	800181c <HAL_GetTick>
 8004aa2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa6:	e00a      	b.n	8004abe <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aa8:	f7fc feb8 	bl	800181c <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d902      	bls.n	8004abe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	f000 be06 	b.w	80056ca <HAL_RCC_OscConfig+0x109a>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8004ac8:	fa93 f3a3 	rbit	r3, r3
 8004acc:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8004ad0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ad4:	fab3 f383 	clz	r3, r3
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	095b      	lsrs	r3, r3, #5
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	f043 0301 	orr.w	r3, r3, #1
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d102      	bne.n	8004aee <HAL_RCC_OscConfig+0x4be>
 8004ae8:	4b45      	ldr	r3, [pc, #276]	; (8004c00 <HAL_RCC_OscConfig+0x5d0>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	e013      	b.n	8004b16 <HAL_RCC_OscConfig+0x4e6>
 8004aee:	2302      	movs	r3, #2
 8004af0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004af4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8004af8:	fa93 f3a3 	rbit	r3, r3
 8004afc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8004b00:	2302      	movs	r3, #2
 8004b02:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8004b06:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8004b0a:	fa93 f3a3 	rbit	r3, r3
 8004b0e:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8004b12:	4b3b      	ldr	r3, [pc, #236]	; (8004c00 <HAL_RCC_OscConfig+0x5d0>)
 8004b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b16:	2202      	movs	r2, #2
 8004b18:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004b1c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8004b20:	fa92 f2a2 	rbit	r2, r2
 8004b24:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8004b28:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8004b2c:	fab2 f282 	clz	r2, r2
 8004b30:	b2d2      	uxtb	r2, r2
 8004b32:	f042 0220 	orr.w	r2, r2, #32
 8004b36:	b2d2      	uxtb	r2, r2
 8004b38:	f002 021f 	and.w	r2, r2, #31
 8004b3c:	2101      	movs	r1, #1
 8004b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0af      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b48:	4b2d      	ldr	r3, [pc, #180]	; (8004c00 <HAL_RCC_OscConfig+0x5d0>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004b54:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	21f8      	movs	r1, #248	; 0xf8
 8004b5e:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b62:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8004b66:	fa91 f1a1 	rbit	r1, r1
 8004b6a:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8004b6e:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8004b72:	fab1 f181 	clz	r1, r1
 8004b76:	b2c9      	uxtb	r1, r1
 8004b78:	408b      	lsls	r3, r1
 8004b7a:	4921      	ldr	r1, [pc, #132]	; (8004c00 <HAL_RCC_OscConfig+0x5d0>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	600b      	str	r3, [r1, #0]
 8004b80:	e06d      	b.n	8004c5e <HAL_RCC_OscConfig+0x62e>
 8004b82:	2301      	movs	r3, #1
 8004b84:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b88:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8004b8c:	fa93 f3a3 	rbit	r3, r3
 8004b90:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8004b94:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b98:	fab3 f383 	clz	r3, r3
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004ba2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	461a      	mov	r2, r3
 8004baa:	2300      	movs	r3, #0
 8004bac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bae:	f7fc fe35 	bl	800181c <HAL_GetTick>
 8004bb2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bb6:	e00a      	b.n	8004bce <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bb8:	f7fc fe30 	bl	800181c <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d902      	bls.n	8004bce <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	f000 bd7e 	b.w	80056ca <HAL_RCC_OscConfig+0x109a>
 8004bce:	2302      	movs	r3, #2
 8004bd0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8004bd8:	fa93 f3a3 	rbit	r3, r3
 8004bdc:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8004be0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be4:	fab3 f383 	clz	r3, r3
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	095b      	lsrs	r3, r3, #5
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	f043 0301 	orr.w	r3, r3, #1
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d105      	bne.n	8004c04 <HAL_RCC_OscConfig+0x5d4>
 8004bf8:	4b01      	ldr	r3, [pc, #4]	; (8004c00 <HAL_RCC_OscConfig+0x5d0>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	e016      	b.n	8004c2c <HAL_RCC_OscConfig+0x5fc>
 8004bfe:	bf00      	nop
 8004c00:	40021000 	.word	0x40021000
 8004c04:	2302      	movs	r3, #2
 8004c06:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c0e:	fa93 f3a3 	rbit	r3, r3
 8004c12:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004c16:	2302      	movs	r3, #2
 8004c18:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004c1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004c20:	fa93 f3a3 	rbit	r3, r3
 8004c24:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004c28:	4bbf      	ldr	r3, [pc, #764]	; (8004f28 <HAL_RCC_OscConfig+0x8f8>)
 8004c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2c:	2202      	movs	r2, #2
 8004c2e:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004c32:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8004c36:	fa92 f2a2 	rbit	r2, r2
 8004c3a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8004c3e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004c42:	fab2 f282 	clz	r2, r2
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	f042 0220 	orr.w	r2, r2, #32
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	f002 021f 	and.w	r2, r2, #31
 8004c52:	2101      	movs	r1, #1
 8004c54:	fa01 f202 	lsl.w	r2, r1, r2
 8004c58:	4013      	ands	r3, r2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1ac      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c62:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 8113 	beq.w	8004e9a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004c78:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	695b      	ldr	r3, [r3, #20]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d07c      	beq.n	8004d7e <HAL_RCC_OscConfig+0x74e>
 8004c84:	2301      	movs	r3, #1
 8004c86:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c8e:	fa93 f3a3 	rbit	r3, r3
 8004c92:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8004c96:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c9a:	fab3 f383 	clz	r3, r3
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	4ba2      	ldr	r3, [pc, #648]	; (8004f2c <HAL_RCC_OscConfig+0x8fc>)
 8004ca4:	4413      	add	r3, r2
 8004ca6:	009b      	lsls	r3, r3, #2
 8004ca8:	461a      	mov	r2, r3
 8004caa:	2301      	movs	r3, #1
 8004cac:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004cae:	f7fc fdb5 	bl	800181c <HAL_GetTick>
 8004cb2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cb6:	e00a      	b.n	8004cce <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cb8:	f7fc fdb0 	bl	800181c <HAL_GetTick>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d902      	bls.n	8004cce <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	f000 bcfe 	b.w	80056ca <HAL_RCC_OscConfig+0x109a>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004cd8:	fa93 f2a3 	rbit	r2, r3
 8004cdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ce0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004ce4:	601a      	str	r2, [r3, #0]
 8004ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cee:	2202      	movs	r2, #2
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004cf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	fa93 f2a3 	rbit	r2, r3
 8004d00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004d08:	601a      	str	r2, [r3, #0]
 8004d0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d0e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d12:	2202      	movs	r2, #2
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d1a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	fa93 f2a3 	rbit	r2, r3
 8004d24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d28:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004d2c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d2e:	4b7e      	ldr	r3, [pc, #504]	; (8004f28 <HAL_RCC_OscConfig+0x8f8>)
 8004d30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d36:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004d3a:	2102      	movs	r1, #2
 8004d3c:	6019      	str	r1, [r3, #0]
 8004d3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d42:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	fa93 f1a3 	rbit	r1, r3
 8004d4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d50:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d54:	6019      	str	r1, [r3, #0]
  return result;
 8004d56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d5a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	fab3 f383 	clz	r3, r3
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	f003 031f 	and.w	r3, r3, #31
 8004d70:	2101      	movs	r1, #1
 8004d72:	fa01 f303 	lsl.w	r3, r1, r3
 8004d76:	4013      	ands	r3, r2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d09d      	beq.n	8004cb8 <HAL_RCC_OscConfig+0x688>
 8004d7c:	e08d      	b.n	8004e9a <HAL_RCC_OscConfig+0x86a>
 8004d7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d82:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d86:	2201      	movs	r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d8e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	fa93 f2a3 	rbit	r2, r3
 8004d98:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004d9c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004da0:	601a      	str	r2, [r3, #0]
  return result;
 8004da2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004da6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004daa:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dac:	fab3 f383 	clz	r3, r3
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	461a      	mov	r2, r3
 8004db4:	4b5d      	ldr	r3, [pc, #372]	; (8004f2c <HAL_RCC_OscConfig+0x8fc>)
 8004db6:	4413      	add	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	461a      	mov	r2, r3
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc0:	f7fc fd2c 	bl	800181c <HAL_GetTick>
 8004dc4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc8:	e00a      	b.n	8004de0 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dca:	f7fc fd27 	bl	800181c <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d902      	bls.n	8004de0 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	f000 bc75 	b.w	80056ca <HAL_RCC_OscConfig+0x109a>
 8004de0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004de4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004de8:	2202      	movs	r2, #2
 8004dea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004df0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	fa93 f2a3 	rbit	r2, r3
 8004dfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004dfe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004e02:	601a      	str	r2, [r3, #0]
 8004e04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	fa93 f2a3 	rbit	r2, r3
 8004e1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e2c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004e30:	2202      	movs	r2, #2
 8004e32:	601a      	str	r2, [r3, #0]
 8004e34:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e38:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	fa93 f2a3 	rbit	r2, r3
 8004e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e46:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8004e4a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e4c:	4b36      	ldr	r3, [pc, #216]	; (8004f28 <HAL_RCC_OscConfig+0x8f8>)
 8004e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e50:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e54:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004e58:	2102      	movs	r1, #2
 8004e5a:	6019      	str	r1, [r3, #0]
 8004e5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e60:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	fa93 f1a3 	rbit	r1, r3
 8004e6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e6e:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004e72:	6019      	str	r1, [r3, #0]
  return result;
 8004e74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e78:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	fab3 f383 	clz	r3, r3
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	f003 031f 	and.w	r3, r3, #31
 8004e8e:	2101      	movs	r1, #1
 8004e90:	fa01 f303 	lsl.w	r3, r1, r3
 8004e94:	4013      	ands	r3, r2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d197      	bne.n	8004dca <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004e9e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	f000 81a5 	beq.w	80051fa <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eb6:	4b1c      	ldr	r3, [pc, #112]	; (8004f28 <HAL_RCC_OscConfig+0x8f8>)
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d116      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ec2:	4b19      	ldr	r3, [pc, #100]	; (8004f28 <HAL_RCC_OscConfig+0x8f8>)
 8004ec4:	69db      	ldr	r3, [r3, #28]
 8004ec6:	4a18      	ldr	r2, [pc, #96]	; (8004f28 <HAL_RCC_OscConfig+0x8f8>)
 8004ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ecc:	61d3      	str	r3, [r2, #28]
 8004ece:	4b16      	ldr	r3, [pc, #88]	; (8004f28 <HAL_RCC_OscConfig+0x8f8>)
 8004ed0:	69db      	ldr	r3, [r3, #28]
 8004ed2:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8004ed6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004eda:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004ee4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004ee8:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8004eea:	2301      	movs	r3, #1
 8004eec:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef0:	4b0f      	ldr	r3, [pc, #60]	; (8004f30 <HAL_RCC_OscConfig+0x900>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d121      	bne.n	8004f40 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004efc:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <HAL_RCC_OscConfig+0x900>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a0b      	ldr	r2, [pc, #44]	; (8004f30 <HAL_RCC_OscConfig+0x900>)
 8004f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f06:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f08:	f7fc fc88 	bl	800181c <HAL_GetTick>
 8004f0c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f10:	e010      	b.n	8004f34 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f12:	f7fc fc83 	bl	800181c <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f1c:	1ad3      	subs	r3, r2, r3
 8004f1e:	2b64      	cmp	r3, #100	; 0x64
 8004f20:	d908      	bls.n	8004f34 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8004f22:	2303      	movs	r3, #3
 8004f24:	e3d1      	b.n	80056ca <HAL_RCC_OscConfig+0x109a>
 8004f26:	bf00      	nop
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	10908120 	.word	0x10908120
 8004f30:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f34:	4b8d      	ldr	r3, [pc, #564]	; (800516c <HAL_RCC_OscConfig+0xb3c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0e8      	beq.n	8004f12 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d106      	bne.n	8004f5e <HAL_RCC_OscConfig+0x92e>
 8004f50:	4b87      	ldr	r3, [pc, #540]	; (8005170 <HAL_RCC_OscConfig+0xb40>)
 8004f52:	6a1b      	ldr	r3, [r3, #32]
 8004f54:	4a86      	ldr	r2, [pc, #536]	; (8005170 <HAL_RCC_OscConfig+0xb40>)
 8004f56:	f043 0301 	orr.w	r3, r3, #1
 8004f5a:	6213      	str	r3, [r2, #32]
 8004f5c:	e035      	b.n	8004fca <HAL_RCC_OscConfig+0x99a>
 8004f5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f62:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10c      	bne.n	8004f88 <HAL_RCC_OscConfig+0x958>
 8004f6e:	4b80      	ldr	r3, [pc, #512]	; (8005170 <HAL_RCC_OscConfig+0xb40>)
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	4a7f      	ldr	r2, [pc, #508]	; (8005170 <HAL_RCC_OscConfig+0xb40>)
 8004f74:	f023 0301 	bic.w	r3, r3, #1
 8004f78:	6213      	str	r3, [r2, #32]
 8004f7a:	4b7d      	ldr	r3, [pc, #500]	; (8005170 <HAL_RCC_OscConfig+0xb40>)
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	4a7c      	ldr	r2, [pc, #496]	; (8005170 <HAL_RCC_OscConfig+0xb40>)
 8004f80:	f023 0304 	bic.w	r3, r3, #4
 8004f84:	6213      	str	r3, [r2, #32]
 8004f86:	e020      	b.n	8004fca <HAL_RCC_OscConfig+0x99a>
 8004f88:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004f8c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	2b05      	cmp	r3, #5
 8004f96:	d10c      	bne.n	8004fb2 <HAL_RCC_OscConfig+0x982>
 8004f98:	4b75      	ldr	r3, [pc, #468]	; (8005170 <HAL_RCC_OscConfig+0xb40>)
 8004f9a:	6a1b      	ldr	r3, [r3, #32]
 8004f9c:	4a74      	ldr	r2, [pc, #464]	; (8005170 <HAL_RCC_OscConfig+0xb40>)
 8004f9e:	f043 0304 	orr.w	r3, r3, #4
 8004fa2:	6213      	str	r3, [r2, #32]
 8004fa4:	4b72      	ldr	r3, [pc, #456]	; (8005170 <HAL_RCC_OscConfig+0xb40>)
 8004fa6:	6a1b      	ldr	r3, [r3, #32]
 8004fa8:	4a71      	ldr	r2, [pc, #452]	; (8005170 <HAL_RCC_OscConfig+0xb40>)
 8004faa:	f043 0301 	orr.w	r3, r3, #1
 8004fae:	6213      	str	r3, [r2, #32]
 8004fb0:	e00b      	b.n	8004fca <HAL_RCC_OscConfig+0x99a>
 8004fb2:	4b6f      	ldr	r3, [pc, #444]	; (8005170 <HAL_RCC_OscConfig+0xb40>)
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	4a6e      	ldr	r2, [pc, #440]	; (8005170 <HAL_RCC_OscConfig+0xb40>)
 8004fb8:	f023 0301 	bic.w	r3, r3, #1
 8004fbc:	6213      	str	r3, [r2, #32]
 8004fbe:	4b6c      	ldr	r3, [pc, #432]	; (8005170 <HAL_RCC_OscConfig+0xb40>)
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	4a6b      	ldr	r2, [pc, #428]	; (8005170 <HAL_RCC_OscConfig+0xb40>)
 8004fc4:	f023 0304 	bic.w	r3, r3, #4
 8004fc8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8004fce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 8081 	beq.w	80050de <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fdc:	f7fc fc1e 	bl	800181c <HAL_GetTick>
 8004fe0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fe4:	e00b      	b.n	8004ffe <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004fe6:	f7fc fc19 	bl	800181c <HAL_GetTick>
 8004fea:	4602      	mov	r2, r0
 8004fec:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e365      	b.n	80056ca <HAL_RCC_OscConfig+0x109a>
 8004ffe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005002:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005006:	2202      	movs	r2, #2
 8005008:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800500a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800500e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	fa93 f2a3 	rbit	r2, r3
 8005018:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800501c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8005020:	601a      	str	r2, [r3, #0]
 8005022:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005026:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800502a:	2202      	movs	r2, #2
 800502c:	601a      	str	r2, [r3, #0]
 800502e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005032:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	fa93 f2a3 	rbit	r2, r3
 800503c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005040:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8005044:	601a      	str	r2, [r3, #0]
  return result;
 8005046:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800504a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800504e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005050:	fab3 f383 	clz	r3, r3
 8005054:	b2db      	uxtb	r3, r3
 8005056:	095b      	lsrs	r3, r3, #5
 8005058:	b2db      	uxtb	r3, r3
 800505a:	f043 0302 	orr.w	r3, r3, #2
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d102      	bne.n	800506a <HAL_RCC_OscConfig+0xa3a>
 8005064:	4b42      	ldr	r3, [pc, #264]	; (8005170 <HAL_RCC_OscConfig+0xb40>)
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	e013      	b.n	8005092 <HAL_RCC_OscConfig+0xa62>
 800506a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800506e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8005072:	2202      	movs	r2, #2
 8005074:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005076:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800507a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	fa93 f2a3 	rbit	r2, r3
 8005084:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005088:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	4b38      	ldr	r3, [pc, #224]	; (8005170 <HAL_RCC_OscConfig+0xb40>)
 8005090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005092:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005096:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800509a:	2102      	movs	r1, #2
 800509c:	6011      	str	r1, [r2, #0]
 800509e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80050a2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80050a6:	6812      	ldr	r2, [r2, #0]
 80050a8:	fa92 f1a2 	rbit	r1, r2
 80050ac:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80050b0:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80050b4:	6011      	str	r1, [r2, #0]
  return result;
 80050b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80050ba:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 80050be:	6812      	ldr	r2, [r2, #0]
 80050c0:	fab2 f282 	clz	r2, r2
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	f002 021f 	and.w	r2, r2, #31
 80050d0:	2101      	movs	r1, #1
 80050d2:	fa01 f202 	lsl.w	r2, r1, r2
 80050d6:	4013      	ands	r3, r2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d084      	beq.n	8004fe6 <HAL_RCC_OscConfig+0x9b6>
 80050dc:	e083      	b.n	80051e6 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050de:	f7fc fb9d 	bl	800181c <HAL_GetTick>
 80050e2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050e6:	e00b      	b.n	8005100 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050e8:	f7fc fb98 	bl	800181c <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d901      	bls.n	8005100 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e2e4      	b.n	80056ca <HAL_RCC_OscConfig+0x109a>
 8005100:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005104:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005108:	2202      	movs	r2, #2
 800510a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800510c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005110:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	fa93 f2a3 	rbit	r2, r3
 800511a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800511e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005128:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800512c:	2202      	movs	r2, #2
 800512e:	601a      	str	r2, [r3, #0]
 8005130:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005134:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	fa93 f2a3 	rbit	r2, r3
 800513e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005142:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005146:	601a      	str	r2, [r3, #0]
  return result;
 8005148:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800514c:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005150:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005152:	fab3 f383 	clz	r3, r3
 8005156:	b2db      	uxtb	r3, r3
 8005158:	095b      	lsrs	r3, r3, #5
 800515a:	b2db      	uxtb	r3, r3
 800515c:	f043 0302 	orr.w	r3, r3, #2
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d106      	bne.n	8005174 <HAL_RCC_OscConfig+0xb44>
 8005166:	4b02      	ldr	r3, [pc, #8]	; (8005170 <HAL_RCC_OscConfig+0xb40>)
 8005168:	6a1b      	ldr	r3, [r3, #32]
 800516a:	e017      	b.n	800519c <HAL_RCC_OscConfig+0xb6c>
 800516c:	40007000 	.word	0x40007000
 8005170:	40021000 	.word	0x40021000
 8005174:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005178:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800517c:	2202      	movs	r2, #2
 800517e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005180:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005184:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	fa93 f2a3 	rbit	r2, r3
 800518e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005192:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	4bb3      	ldr	r3, [pc, #716]	; (8005468 <HAL_RCC_OscConfig+0xe38>)
 800519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800519c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80051a0:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80051a4:	2102      	movs	r1, #2
 80051a6:	6011      	str	r1, [r2, #0]
 80051a8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80051ac:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80051b0:	6812      	ldr	r2, [r2, #0]
 80051b2:	fa92 f1a2 	rbit	r1, r2
 80051b6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80051ba:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80051be:	6011      	str	r1, [r2, #0]
  return result;
 80051c0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80051c4:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 80051c8:	6812      	ldr	r2, [r2, #0]
 80051ca:	fab2 f282 	clz	r2, r2
 80051ce:	b2d2      	uxtb	r2, r2
 80051d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80051d4:	b2d2      	uxtb	r2, r2
 80051d6:	f002 021f 	and.w	r2, r2, #31
 80051da:	2101      	movs	r1, #1
 80051dc:	fa01 f202 	lsl.w	r2, r1, r2
 80051e0:	4013      	ands	r3, r2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d180      	bne.n	80050e8 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80051e6:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d105      	bne.n	80051fa <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051ee:	4b9e      	ldr	r3, [pc, #632]	; (8005468 <HAL_RCC_OscConfig+0xe38>)
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	4a9d      	ldr	r2, [pc, #628]	; (8005468 <HAL_RCC_OscConfig+0xe38>)
 80051f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051f8:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80051fe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	2b00      	cmp	r3, #0
 8005208:	f000 825e 	beq.w	80056c8 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800520c:	4b96      	ldr	r3, [pc, #600]	; (8005468 <HAL_RCC_OscConfig+0xe38>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f003 030c 	and.w	r3, r3, #12
 8005214:	2b08      	cmp	r3, #8
 8005216:	f000 821f 	beq.w	8005658 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800521a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800521e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	699b      	ldr	r3, [r3, #24]
 8005226:	2b02      	cmp	r3, #2
 8005228:	f040 8170 	bne.w	800550c <HAL_RCC_OscConfig+0xedc>
 800522c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005230:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005234:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005238:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800523a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800523e:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	fa93 f2a3 	rbit	r2, r3
 8005248:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800524c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8005250:	601a      	str	r2, [r3, #0]
  return result;
 8005252:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005256:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800525a:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800525c:	fab3 f383 	clz	r3, r3
 8005260:	b2db      	uxtb	r3, r3
 8005262:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005266:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	461a      	mov	r2, r3
 800526e:	2300      	movs	r3, #0
 8005270:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005272:	f7fc fad3 	bl	800181c <HAL_GetTick>
 8005276:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800527a:	e009      	b.n	8005290 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800527c:	f7fc face 	bl	800181c <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d901      	bls.n	8005290 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e21c      	b.n	80056ca <HAL_RCC_OscConfig+0x109a>
 8005290:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005294:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8005298:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800529c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052a2:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	fa93 f2a3 	rbit	r2, r3
 80052ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052b0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80052b4:	601a      	str	r2, [r3, #0]
  return result;
 80052b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052ba:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80052be:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80052c0:	fab3 f383 	clz	r3, r3
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	095b      	lsrs	r3, r3, #5
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	f043 0301 	orr.w	r3, r3, #1
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d102      	bne.n	80052da <HAL_RCC_OscConfig+0xcaa>
 80052d4:	4b64      	ldr	r3, [pc, #400]	; (8005468 <HAL_RCC_OscConfig+0xe38>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	e027      	b.n	800532a <HAL_RCC_OscConfig+0xcfa>
 80052da:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052de:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80052e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052ec:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	fa93 f2a3 	rbit	r2, r3
 80052f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80052fa:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80052fe:	601a      	str	r2, [r3, #0]
 8005300:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005304:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005308:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005312:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	fa93 f2a3 	rbit	r2, r3
 800531c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005320:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8005324:	601a      	str	r2, [r3, #0]
 8005326:	4b50      	ldr	r3, [pc, #320]	; (8005468 <HAL_RCC_OscConfig+0xe38>)
 8005328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800532a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800532e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005332:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005336:	6011      	str	r1, [r2, #0]
 8005338:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800533c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8005340:	6812      	ldr	r2, [r2, #0]
 8005342:	fa92 f1a2 	rbit	r1, r2
 8005346:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800534a:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 800534e:	6011      	str	r1, [r2, #0]
  return result;
 8005350:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005354:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8005358:	6812      	ldr	r2, [r2, #0]
 800535a:	fab2 f282 	clz	r2, r2
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	f042 0220 	orr.w	r2, r2, #32
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	f002 021f 	and.w	r2, r2, #31
 800536a:	2101      	movs	r1, #1
 800536c:	fa01 f202 	lsl.w	r2, r1, r2
 8005370:	4013      	ands	r3, r2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d182      	bne.n	800527c <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005376:	4b3c      	ldr	r3, [pc, #240]	; (8005468 <HAL_RCC_OscConfig+0xe38>)
 8005378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537a:	f023 020f 	bic.w	r2, r3, #15
 800537e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005382:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538a:	4937      	ldr	r1, [pc, #220]	; (8005468 <HAL_RCC_OscConfig+0xe38>)
 800538c:	4313      	orrs	r3, r2
 800538e:	62cb      	str	r3, [r1, #44]	; 0x2c
 8005390:	4b35      	ldr	r3, [pc, #212]	; (8005468 <HAL_RCC_OscConfig+0xe38>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8005398:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800539c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6a19      	ldr	r1, [r3, #32]
 80053a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053a8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	69db      	ldr	r3, [r3, #28]
 80053b0:	430b      	orrs	r3, r1
 80053b2:	492d      	ldr	r1, [pc, #180]	; (8005468 <HAL_RCC_OscConfig+0xe38>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	604b      	str	r3, [r1, #4]
 80053b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053bc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80053c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80053c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053ca:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	fa93 f2a3 	rbit	r2, r3
 80053d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053d8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80053dc:	601a      	str	r2, [r3, #0]
  return result;
 80053de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80053e2:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80053e6:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053e8:	fab3 f383 	clz	r3, r3
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80053f2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	461a      	mov	r2, r3
 80053fa:	2301      	movs	r3, #1
 80053fc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053fe:	f7fc fa0d 	bl	800181c <HAL_GetTick>
 8005402:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005406:	e009      	b.n	800541c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005408:	f7fc fa08 	bl	800181c <HAL_GetTick>
 800540c:	4602      	mov	r2, r0
 800540e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e156      	b.n	80056ca <HAL_RCC_OscConfig+0x109a>
 800541c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005420:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005424:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005428:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800542a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800542e:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	fa93 f2a3 	rbit	r2, r3
 8005438:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800543c:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8005440:	601a      	str	r2, [r3, #0]
  return result;
 8005442:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005446:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 800544a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800544c:	fab3 f383 	clz	r3, r3
 8005450:	b2db      	uxtb	r3, r3
 8005452:	095b      	lsrs	r3, r3, #5
 8005454:	b2db      	uxtb	r3, r3
 8005456:	f043 0301 	orr.w	r3, r3, #1
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b01      	cmp	r3, #1
 800545e:	d105      	bne.n	800546c <HAL_RCC_OscConfig+0xe3c>
 8005460:	4b01      	ldr	r3, [pc, #4]	; (8005468 <HAL_RCC_OscConfig+0xe38>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	e02a      	b.n	80054bc <HAL_RCC_OscConfig+0xe8c>
 8005466:	bf00      	nop
 8005468:	40021000 	.word	0x40021000
 800546c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005470:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005474:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005478:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800547a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800547e:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	fa93 f2a3 	rbit	r2, r3
 8005488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800548c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005496:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800549a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054a4:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	fa93 f2a3 	rbit	r2, r3
 80054ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80054b2:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	4b86      	ldr	r3, [pc, #536]	; (80056d4 <HAL_RCC_OscConfig+0x10a4>)
 80054ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054bc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80054c0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80054c4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80054c8:	6011      	str	r1, [r2, #0]
 80054ca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80054ce:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80054d2:	6812      	ldr	r2, [r2, #0]
 80054d4:	fa92 f1a2 	rbit	r1, r2
 80054d8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80054dc:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80054e0:	6011      	str	r1, [r2, #0]
  return result;
 80054e2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80054e6:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 80054ea:	6812      	ldr	r2, [r2, #0]
 80054ec:	fab2 f282 	clz	r2, r2
 80054f0:	b2d2      	uxtb	r2, r2
 80054f2:	f042 0220 	orr.w	r2, r2, #32
 80054f6:	b2d2      	uxtb	r2, r2
 80054f8:	f002 021f 	and.w	r2, r2, #31
 80054fc:	2101      	movs	r1, #1
 80054fe:	fa01 f202 	lsl.w	r2, r1, r2
 8005502:	4013      	ands	r3, r2
 8005504:	2b00      	cmp	r3, #0
 8005506:	f43f af7f 	beq.w	8005408 <HAL_RCC_OscConfig+0xdd8>
 800550a:	e0dd      	b.n	80056c8 <HAL_RCC_OscConfig+0x1098>
 800550c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005510:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005514:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005518:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800551a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800551e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	fa93 f2a3 	rbit	r2, r3
 8005528:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800552c:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8005530:	601a      	str	r2, [r3, #0]
  return result;
 8005532:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005536:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800553a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800553c:	fab3 f383 	clz	r3, r3
 8005540:	b2db      	uxtb	r3, r3
 8005542:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005546:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	461a      	mov	r2, r3
 800554e:	2300      	movs	r3, #0
 8005550:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005552:	f7fc f963 	bl	800181c <HAL_GetTick>
 8005556:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800555a:	e009      	b.n	8005570 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800555c:	f7fc f95e 	bl	800181c <HAL_GetTick>
 8005560:	4602      	mov	r2, r0
 8005562:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e0ac      	b.n	80056ca <HAL_RCC_OscConfig+0x109a>
 8005570:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005574:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005578:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800557c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800557e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005582:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	fa93 f2a3 	rbit	r2, r3
 800558c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005590:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8005594:	601a      	str	r2, [r3, #0]
  return result;
 8005596:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800559a:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 800559e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80055a0:	fab3 f383 	clz	r3, r3
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	095b      	lsrs	r3, r3, #5
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	f043 0301 	orr.w	r3, r3, #1
 80055ae:	b2db      	uxtb	r3, r3
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d102      	bne.n	80055ba <HAL_RCC_OscConfig+0xf8a>
 80055b4:	4b47      	ldr	r3, [pc, #284]	; (80056d4 <HAL_RCC_OscConfig+0x10a4>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	e027      	b.n	800560a <HAL_RCC_OscConfig+0xfda>
 80055ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055be:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80055c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055cc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	fa93 f2a3 	rbit	r2, r3
 80055d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055da:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80055de:	601a      	str	r2, [r3, #0]
 80055e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055e4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80055e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80055ec:	601a      	str	r2, [r3, #0]
 80055ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80055f2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	fa93 f2a3 	rbit	r2, r3
 80055fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005600:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	4b33      	ldr	r3, [pc, #204]	; (80056d4 <HAL_RCC_OscConfig+0x10a4>)
 8005608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800560e:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005612:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005616:	6011      	str	r1, [r2, #0]
 8005618:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800561c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8005620:	6812      	ldr	r2, [r2, #0]
 8005622:	fa92 f1a2 	rbit	r1, r2
 8005626:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800562a:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 800562e:	6011      	str	r1, [r2, #0]
  return result;
 8005630:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8005634:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8005638:	6812      	ldr	r2, [r2, #0]
 800563a:	fab2 f282 	clz	r2, r2
 800563e:	b2d2      	uxtb	r2, r2
 8005640:	f042 0220 	orr.w	r2, r2, #32
 8005644:	b2d2      	uxtb	r2, r2
 8005646:	f002 021f 	and.w	r2, r2, #31
 800564a:	2101      	movs	r1, #1
 800564c:	fa01 f202 	lsl.w	r2, r1, r2
 8005650:	4013      	ands	r3, r2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d182      	bne.n	800555c <HAL_RCC_OscConfig+0xf2c>
 8005656:	e037      	b.n	80056c8 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005658:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800565c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8005668:	2301      	movs	r3, #1
 800566a:	e02e      	b.n	80056ca <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800566c:	4b19      	ldr	r3, [pc, #100]	; (80056d4 <HAL_RCC_OscConfig+0x10a4>)
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8005674:	4b17      	ldr	r3, [pc, #92]	; (80056d4 <HAL_RCC_OscConfig+0x10a4>)
 8005676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005678:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800567c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005680:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8005684:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8005688:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	69db      	ldr	r3, [r3, #28]
 8005690:	429a      	cmp	r2, r3
 8005692:	d117      	bne.n	80056c4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8005694:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005698:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800569c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056a0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d10b      	bne.n	80056c4 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80056ac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80056b0:	f003 020f 	and.w	r2, r3, #15
 80056b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80056b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d001      	beq.n	80056c8 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e000      	b.n	80056ca <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	f507 7702 	add.w	r7, r7, #520	; 0x208
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	40021000 	.word	0x40021000

080056d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b09e      	sub	sp, #120	; 0x78
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
 80056e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d101      	bne.n	80056f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e162      	b.n	80059b6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80056f0:	4b90      	ldr	r3, [pc, #576]	; (8005934 <HAL_RCC_ClockConfig+0x25c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f003 0307 	and.w	r3, r3, #7
 80056f8:	683a      	ldr	r2, [r7, #0]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d910      	bls.n	8005720 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056fe:	4b8d      	ldr	r3, [pc, #564]	; (8005934 <HAL_RCC_ClockConfig+0x25c>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f023 0207 	bic.w	r2, r3, #7
 8005706:	498b      	ldr	r1, [pc, #556]	; (8005934 <HAL_RCC_ClockConfig+0x25c>)
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	4313      	orrs	r3, r2
 800570c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800570e:	4b89      	ldr	r3, [pc, #548]	; (8005934 <HAL_RCC_ClockConfig+0x25c>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f003 0307 	and.w	r3, r3, #7
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d001      	beq.n	8005720 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e14a      	b.n	80059b6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0302 	and.w	r3, r3, #2
 8005728:	2b00      	cmp	r3, #0
 800572a:	d008      	beq.n	800573e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800572c:	4b82      	ldr	r3, [pc, #520]	; (8005938 <HAL_RCC_ClockConfig+0x260>)
 800572e:	685b      	ldr	r3, [r3, #4]
 8005730:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	497f      	ldr	r1, [pc, #508]	; (8005938 <HAL_RCC_ClockConfig+0x260>)
 800573a:	4313      	orrs	r3, r2
 800573c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	f000 80dc 	beq.w	8005904 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d13c      	bne.n	80057ce <HAL_RCC_ClockConfig+0xf6>
 8005754:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005758:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800575a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800575c:	fa93 f3a3 	rbit	r3, r3
 8005760:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8005762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005764:	fab3 f383 	clz	r3, r3
 8005768:	b2db      	uxtb	r3, r3
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	b2db      	uxtb	r3, r3
 800576e:	f043 0301 	orr.w	r3, r3, #1
 8005772:	b2db      	uxtb	r3, r3
 8005774:	2b01      	cmp	r3, #1
 8005776:	d102      	bne.n	800577e <HAL_RCC_ClockConfig+0xa6>
 8005778:	4b6f      	ldr	r3, [pc, #444]	; (8005938 <HAL_RCC_ClockConfig+0x260>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	e00f      	b.n	800579e <HAL_RCC_ClockConfig+0xc6>
 800577e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005782:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005784:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005786:	fa93 f3a3 	rbit	r3, r3
 800578a:	667b      	str	r3, [r7, #100]	; 0x64
 800578c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005790:	663b      	str	r3, [r7, #96]	; 0x60
 8005792:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005794:	fa93 f3a3 	rbit	r3, r3
 8005798:	65fb      	str	r3, [r7, #92]	; 0x5c
 800579a:	4b67      	ldr	r3, [pc, #412]	; (8005938 <HAL_RCC_ClockConfig+0x260>)
 800579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057a2:	65ba      	str	r2, [r7, #88]	; 0x58
 80057a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057a6:	fa92 f2a2 	rbit	r2, r2
 80057aa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80057ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80057ae:	fab2 f282 	clz	r2, r2
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	f042 0220 	orr.w	r2, r2, #32
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	f002 021f 	and.w	r2, r2, #31
 80057be:	2101      	movs	r1, #1
 80057c0:	fa01 f202 	lsl.w	r2, r1, r2
 80057c4:	4013      	ands	r3, r2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d17b      	bne.n	80058c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e0f3      	b.n	80059b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2b02      	cmp	r3, #2
 80057d4:	d13c      	bne.n	8005850 <HAL_RCC_ClockConfig+0x178>
 80057d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80057da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057de:	fa93 f3a3 	rbit	r3, r3
 80057e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80057e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057e6:	fab3 f383 	clz	r3, r3
 80057ea:	b2db      	uxtb	r3, r3
 80057ec:	095b      	lsrs	r3, r3, #5
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	f043 0301 	orr.w	r3, r3, #1
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d102      	bne.n	8005800 <HAL_RCC_ClockConfig+0x128>
 80057fa:	4b4f      	ldr	r3, [pc, #316]	; (8005938 <HAL_RCC_ClockConfig+0x260>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	e00f      	b.n	8005820 <HAL_RCC_ClockConfig+0x148>
 8005800:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005804:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005808:	fa93 f3a3 	rbit	r3, r3
 800580c:	647b      	str	r3, [r7, #68]	; 0x44
 800580e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005812:	643b      	str	r3, [r7, #64]	; 0x40
 8005814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005816:	fa93 f3a3 	rbit	r3, r3
 800581a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800581c:	4b46      	ldr	r3, [pc, #280]	; (8005938 <HAL_RCC_ClockConfig+0x260>)
 800581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005820:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005824:	63ba      	str	r2, [r7, #56]	; 0x38
 8005826:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005828:	fa92 f2a2 	rbit	r2, r2
 800582c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800582e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005830:	fab2 f282 	clz	r2, r2
 8005834:	b2d2      	uxtb	r2, r2
 8005836:	f042 0220 	orr.w	r2, r2, #32
 800583a:	b2d2      	uxtb	r2, r2
 800583c:	f002 021f 	and.w	r2, r2, #31
 8005840:	2101      	movs	r1, #1
 8005842:	fa01 f202 	lsl.w	r2, r1, r2
 8005846:	4013      	ands	r3, r2
 8005848:	2b00      	cmp	r3, #0
 800584a:	d13a      	bne.n	80058c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e0b2      	b.n	80059b6 <HAL_RCC_ClockConfig+0x2de>
 8005850:	2302      	movs	r3, #2
 8005852:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005856:	fa93 f3a3 	rbit	r3, r3
 800585a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800585c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800585e:	fab3 f383 	clz	r3, r3
 8005862:	b2db      	uxtb	r3, r3
 8005864:	095b      	lsrs	r3, r3, #5
 8005866:	b2db      	uxtb	r3, r3
 8005868:	f043 0301 	orr.w	r3, r3, #1
 800586c:	b2db      	uxtb	r3, r3
 800586e:	2b01      	cmp	r3, #1
 8005870:	d102      	bne.n	8005878 <HAL_RCC_ClockConfig+0x1a0>
 8005872:	4b31      	ldr	r3, [pc, #196]	; (8005938 <HAL_RCC_ClockConfig+0x260>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	e00d      	b.n	8005894 <HAL_RCC_ClockConfig+0x1bc>
 8005878:	2302      	movs	r3, #2
 800587a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587e:	fa93 f3a3 	rbit	r3, r3
 8005882:	627b      	str	r3, [r7, #36]	; 0x24
 8005884:	2302      	movs	r3, #2
 8005886:	623b      	str	r3, [r7, #32]
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	fa93 f3a3 	rbit	r3, r3
 800588e:	61fb      	str	r3, [r7, #28]
 8005890:	4b29      	ldr	r3, [pc, #164]	; (8005938 <HAL_RCC_ClockConfig+0x260>)
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	2202      	movs	r2, #2
 8005896:	61ba      	str	r2, [r7, #24]
 8005898:	69ba      	ldr	r2, [r7, #24]
 800589a:	fa92 f2a2 	rbit	r2, r2
 800589e:	617a      	str	r2, [r7, #20]
  return result;
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	fab2 f282 	clz	r2, r2
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	f042 0220 	orr.w	r2, r2, #32
 80058ac:	b2d2      	uxtb	r2, r2
 80058ae:	f002 021f 	and.w	r2, r2, #31
 80058b2:	2101      	movs	r1, #1
 80058b4:	fa01 f202 	lsl.w	r2, r1, r2
 80058b8:	4013      	ands	r3, r2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e079      	b.n	80059b6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80058c2:	4b1d      	ldr	r3, [pc, #116]	; (8005938 <HAL_RCC_ClockConfig+0x260>)
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	f023 0203 	bic.w	r2, r3, #3
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	491a      	ldr	r1, [pc, #104]	; (8005938 <HAL_RCC_ClockConfig+0x260>)
 80058d0:	4313      	orrs	r3, r2
 80058d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80058d4:	f7fb ffa2 	bl	800181c <HAL_GetTick>
 80058d8:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058da:	e00a      	b.n	80058f2 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058dc:	f7fb ff9e 	bl	800181c <HAL_GetTick>
 80058e0:	4602      	mov	r2, r0
 80058e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d901      	bls.n	80058f2 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80058ee:	2303      	movs	r3, #3
 80058f0:	e061      	b.n	80059b6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058f2:	4b11      	ldr	r3, [pc, #68]	; (8005938 <HAL_RCC_ClockConfig+0x260>)
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f003 020c 	and.w	r2, r3, #12
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	429a      	cmp	r2, r3
 8005902:	d1eb      	bne.n	80058dc <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005904:	4b0b      	ldr	r3, [pc, #44]	; (8005934 <HAL_RCC_ClockConfig+0x25c>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	683a      	ldr	r2, [r7, #0]
 800590e:	429a      	cmp	r2, r3
 8005910:	d214      	bcs.n	800593c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005912:	4b08      	ldr	r3, [pc, #32]	; (8005934 <HAL_RCC_ClockConfig+0x25c>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f023 0207 	bic.w	r2, r3, #7
 800591a:	4906      	ldr	r1, [pc, #24]	; (8005934 <HAL_RCC_ClockConfig+0x25c>)
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	4313      	orrs	r3, r2
 8005920:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005922:	4b04      	ldr	r3, [pc, #16]	; (8005934 <HAL_RCC_ClockConfig+0x25c>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	683a      	ldr	r2, [r7, #0]
 800592c:	429a      	cmp	r2, r3
 800592e:	d005      	beq.n	800593c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e040      	b.n	80059b6 <HAL_RCC_ClockConfig+0x2de>
 8005934:	40022000 	.word	0x40022000
 8005938:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b00      	cmp	r3, #0
 8005946:	d008      	beq.n	800595a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005948:	4b1d      	ldr	r3, [pc, #116]	; (80059c0 <HAL_RCC_ClockConfig+0x2e8>)
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	491a      	ldr	r1, [pc, #104]	; (80059c0 <HAL_RCC_ClockConfig+0x2e8>)
 8005956:	4313      	orrs	r3, r2
 8005958:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 0308 	and.w	r3, r3, #8
 8005962:	2b00      	cmp	r3, #0
 8005964:	d009      	beq.n	800597a <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005966:	4b16      	ldr	r3, [pc, #88]	; (80059c0 <HAL_RCC_ClockConfig+0x2e8>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	691b      	ldr	r3, [r3, #16]
 8005972:	00db      	lsls	r3, r3, #3
 8005974:	4912      	ldr	r1, [pc, #72]	; (80059c0 <HAL_RCC_ClockConfig+0x2e8>)
 8005976:	4313      	orrs	r3, r2
 8005978:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800597a:	f000 f829 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 800597e:	4601      	mov	r1, r0
 8005980:	4b0f      	ldr	r3, [pc, #60]	; (80059c0 <HAL_RCC_ClockConfig+0x2e8>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005988:	22f0      	movs	r2, #240	; 0xf0
 800598a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	fa92 f2a2 	rbit	r2, r2
 8005992:	60fa      	str	r2, [r7, #12]
  return result;
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	fab2 f282 	clz	r2, r2
 800599a:	b2d2      	uxtb	r2, r2
 800599c:	40d3      	lsrs	r3, r2
 800599e:	4a09      	ldr	r2, [pc, #36]	; (80059c4 <HAL_RCC_ClockConfig+0x2ec>)
 80059a0:	5cd3      	ldrb	r3, [r2, r3]
 80059a2:	fa21 f303 	lsr.w	r3, r1, r3
 80059a6:	4a08      	ldr	r2, [pc, #32]	; (80059c8 <HAL_RCC_ClockConfig+0x2f0>)
 80059a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80059aa:	4b08      	ldr	r3, [pc, #32]	; (80059cc <HAL_RCC_ClockConfig+0x2f4>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f7fb fef0 	bl	8001794 <HAL_InitTick>
  
  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3778      	adds	r7, #120	; 0x78
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	40021000 	.word	0x40021000
 80059c4:	0800b880 	.word	0x0800b880
 80059c8:	20000000 	.word	0x20000000
 80059cc:	20000004 	.word	0x20000004

080059d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b08b      	sub	sp, #44	; 0x2c
 80059d4:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	61fb      	str	r3, [r7, #28]
 80059da:	2300      	movs	r3, #0
 80059dc:	61bb      	str	r3, [r7, #24]
 80059de:	2300      	movs	r3, #0
 80059e0:	627b      	str	r3, [r7, #36]	; 0x24
 80059e2:	2300      	movs	r3, #0
 80059e4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80059e6:	2300      	movs	r3, #0
 80059e8:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80059ea:	4b2a      	ldr	r3, [pc, #168]	; (8005a94 <HAL_RCC_GetSysClockFreq+0xc4>)
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	f003 030c 	and.w	r3, r3, #12
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d002      	beq.n	8005a00 <HAL_RCC_GetSysClockFreq+0x30>
 80059fa:	2b08      	cmp	r3, #8
 80059fc:	d003      	beq.n	8005a06 <HAL_RCC_GetSysClockFreq+0x36>
 80059fe:	e03f      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005a00:	4b25      	ldr	r3, [pc, #148]	; (8005a98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005a02:	623b      	str	r3, [r7, #32]
      break;
 8005a04:	e03f      	b.n	8005a86 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005a0c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8005a10:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	fa92 f2a2 	rbit	r2, r2
 8005a18:	607a      	str	r2, [r7, #4]
  return result;
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	fab2 f282 	clz	r2, r2
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	40d3      	lsrs	r3, r2
 8005a24:	4a1d      	ldr	r2, [pc, #116]	; (8005a9c <HAL_RCC_GetSysClockFreq+0xcc>)
 8005a26:	5cd3      	ldrb	r3, [r2, r3]
 8005a28:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8005a2a:	4b1a      	ldr	r3, [pc, #104]	; (8005a94 <HAL_RCC_GetSysClockFreq+0xc4>)
 8005a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2e:	f003 030f 	and.w	r3, r3, #15
 8005a32:	220f      	movs	r2, #15
 8005a34:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	fa92 f2a2 	rbit	r2, r2
 8005a3c:	60fa      	str	r2, [r7, #12]
  return result;
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	fab2 f282 	clz	r2, r2
 8005a44:	b2d2      	uxtb	r2, r2
 8005a46:	40d3      	lsrs	r3, r2
 8005a48:	4a15      	ldr	r2, [pc, #84]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0xd0>)
 8005a4a:	5cd3      	ldrb	r3, [r2, r3]
 8005a4c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d008      	beq.n	8005a6a <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005a58:	4a0f      	ldr	r2, [pc, #60]	; (8005a98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	fb02 f303 	mul.w	r3, r2, r3
 8005a66:	627b      	str	r3, [r7, #36]	; 0x24
 8005a68:	e007      	b.n	8005a7a <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8005a6a:	4a0b      	ldr	r2, [pc, #44]	; (8005a98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	fb02 f303 	mul.w	r3, r2, r3
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7c:	623b      	str	r3, [r7, #32]
      break;
 8005a7e:	e002      	b.n	8005a86 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005a80:	4b05      	ldr	r3, [pc, #20]	; (8005a98 <HAL_RCC_GetSysClockFreq+0xc8>)
 8005a82:	623b      	str	r3, [r7, #32]
      break;
 8005a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a86:	6a3b      	ldr	r3, [r7, #32]
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	372c      	adds	r7, #44	; 0x2c
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a92:	4770      	bx	lr
 8005a94:	40021000 	.word	0x40021000
 8005a98:	007a1200 	.word	0x007a1200
 8005a9c:	0800b898 	.word	0x0800b898
 8005aa0:	0800b8a8 	.word	0x0800b8a8

08005aa4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005aa8:	4b03      	ldr	r3, [pc, #12]	; (8005ab8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	20000000 	.word	0x20000000

08005abc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b082      	sub	sp, #8
 8005ac0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8005ac2:	f7ff ffef 	bl	8005aa4 <HAL_RCC_GetHCLKFreq>
 8005ac6:	4601      	mov	r1, r0
 8005ac8:	4b0b      	ldr	r3, [pc, #44]	; (8005af8 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ad0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005ad4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	fa92 f2a2 	rbit	r2, r2
 8005adc:	603a      	str	r2, [r7, #0]
  return result;
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	fab2 f282 	clz	r2, r2
 8005ae4:	b2d2      	uxtb	r2, r2
 8005ae6:	40d3      	lsrs	r3, r2
 8005ae8:	4a04      	ldr	r2, [pc, #16]	; (8005afc <HAL_RCC_GetPCLK1Freq+0x40>)
 8005aea:	5cd3      	ldrb	r3, [r2, r3]
 8005aec:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8005af0:	4618      	mov	r0, r3
 8005af2:	3708      	adds	r7, #8
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40021000 	.word	0x40021000
 8005afc:	0800b890 	.word	0x0800b890

08005b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8005b06:	f7ff ffcd 	bl	8005aa4 <HAL_RCC_GetHCLKFreq>
 8005b0a:	4601      	mov	r1, r0
 8005b0c:	4b0b      	ldr	r3, [pc, #44]	; (8005b3c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8005b14:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005b18:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b1a:	687a      	ldr	r2, [r7, #4]
 8005b1c:	fa92 f2a2 	rbit	r2, r2
 8005b20:	603a      	str	r2, [r7, #0]
  return result;
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	fab2 f282 	clz	r2, r2
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	40d3      	lsrs	r3, r2
 8005b2c:	4a04      	ldr	r2, [pc, #16]	; (8005b40 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005b2e:	5cd3      	ldrb	r3, [r2, r3]
 8005b30:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8005b34:	4618      	mov	r0, r3
 8005b36:	3708      	adds	r7, #8
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}
 8005b3c:	40021000 	.word	0x40021000
 8005b40:	0800b890 	.word	0x0800b890

08005b44 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b092      	sub	sp, #72	; 0x48
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8005b50:	2300      	movs	r3, #0
 8005b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8005b54:	2300      	movs	r3, #0
 8005b56:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f000 80d4 	beq.w	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b68:	4b4e      	ldr	r3, [pc, #312]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b6a:	69db      	ldr	r3, [r3, #28]
 8005b6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10e      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b74:	4b4b      	ldr	r3, [pc, #300]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	4a4a      	ldr	r2, [pc, #296]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b7e:	61d3      	str	r3, [r2, #28]
 8005b80:	4b48      	ldr	r3, [pc, #288]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b88:	60bb      	str	r3, [r7, #8]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005b92:	4b45      	ldr	r3, [pc, #276]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d118      	bne.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005b9e:	4b42      	ldr	r3, [pc, #264]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a41      	ldr	r2, [pc, #260]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ba8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005baa:	f7fb fe37 	bl	800181c <HAL_GetTick>
 8005bae:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bb0:	e008      	b.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005bb2:	f7fb fe33 	bl	800181c <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	2b64      	cmp	r3, #100	; 0x64
 8005bbe:	d901      	bls.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e1d6      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc4:	4b38      	ldr	r3, [pc, #224]	; (8005ca8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d0f0      	beq.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005bd0:	4b34      	ldr	r3, [pc, #208]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bd2:	6a1b      	ldr	r3, [r3, #32]
 8005bd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005bda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	f000 8084 	beq.w	8005cea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d07c      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005bf0:	4b2c      	ldr	r3, [pc, #176]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
 8005bf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005bfe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c02:	fa93 f3a3 	rbit	r3, r3
 8005c06:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8005c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005c0a:	fab3 f383 	clz	r3, r3
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	461a      	mov	r2, r3
 8005c12:	4b26      	ldr	r3, [pc, #152]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c14:	4413      	add	r3, r2
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	461a      	mov	r2, r3
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	6013      	str	r3, [r2, #0]
 8005c1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005c22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c26:	fa93 f3a3 	rbit	r3, r3
 8005c2a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8005c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005c2e:	fab3 f383 	clz	r3, r3
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	461a      	mov	r2, r3
 8005c36:	4b1d      	ldr	r3, [pc, #116]	; (8005cac <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005c38:	4413      	add	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	2300      	movs	r3, #0
 8005c40:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005c42:	4a18      	ldr	r2, [pc, #96]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005c44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c46:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d04b      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c52:	f7fb fde3 	bl	800181c <HAL_GetTick>
 8005c56:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c58:	e00a      	b.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c5a:	f7fb fddf 	bl	800181c <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e180      	b.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8005c70:	2302      	movs	r3, #2
 8005c72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c76:	fa93 f3a3 	rbit	r3, r3
 8005c7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	623b      	str	r3, [r7, #32]
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	fa93 f3a3 	rbit	r3, r3
 8005c86:	61fb      	str	r3, [r7, #28]
  return result;
 8005c88:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c8a:	fab3 f383 	clz	r3, r3
 8005c8e:	b2db      	uxtb	r3, r3
 8005c90:	095b      	lsrs	r3, r3, #5
 8005c92:	b2db      	uxtb	r3, r3
 8005c94:	f043 0302 	orr.w	r3, r3, #2
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d108      	bne.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005c9e:	4b01      	ldr	r3, [pc, #4]	; (8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ca0:	6a1b      	ldr	r3, [r3, #32]
 8005ca2:	e00d      	b.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8005ca4:	40021000 	.word	0x40021000
 8005ca8:	40007000 	.word	0x40007000
 8005cac:	10908100 	.word	0x10908100
 8005cb0:	2302      	movs	r3, #2
 8005cb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cb4:	69bb      	ldr	r3, [r7, #24]
 8005cb6:	fa93 f3a3 	rbit	r3, r3
 8005cba:	617b      	str	r3, [r7, #20]
 8005cbc:	4b9a      	ldr	r3, [pc, #616]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	613a      	str	r2, [r7, #16]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	fa92 f2a2 	rbit	r2, r2
 8005cca:	60fa      	str	r2, [r7, #12]
  return result;
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	fab2 f282 	clz	r2, r2
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cd8:	b2d2      	uxtb	r2, r2
 8005cda:	f002 021f 	and.w	r2, r2, #31
 8005cde:	2101      	movs	r1, #1
 8005ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0b7      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8005cea:	4b8f      	ldr	r3, [pc, #572]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	498c      	ldr	r1, [pc, #560]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005cfc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d105      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005d04:	4b88      	ldr	r3, [pc, #544]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	4a87      	ldr	r2, [pc, #540]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d0e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d008      	beq.n	8005d2e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005d1c:	4b82      	ldr	r3, [pc, #520]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d20:	f023 0203 	bic.w	r2, r3, #3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	497f      	ldr	r1, [pc, #508]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d008      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005d3a:	4b7b      	ldr	r3, [pc, #492]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	4978      	ldr	r1, [pc, #480]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0304 	and.w	r3, r3, #4
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d008      	beq.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005d58:	4b73      	ldr	r3, [pc, #460]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	4970      	ldr	r1, [pc, #448]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0320 	and.w	r3, r3, #32
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d008      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d76:	4b6c      	ldr	r3, [pc, #432]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7a:	f023 0210 	bic.w	r2, r3, #16
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	4969      	ldr	r1, [pc, #420]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d008      	beq.n	8005da6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005d94:	4b64      	ldr	r3, [pc, #400]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005da0:	4961      	ldr	r1, [pc, #388]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d008      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005db2:	4b5d      	ldr	r3, [pc, #372]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db6:	f023 0220 	bic.w	r2, r3, #32
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	495a      	ldr	r1, [pc, #360]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d008      	beq.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005dd0:	4b55      	ldr	r3, [pc, #340]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ddc:	4952      	ldr	r1, [pc, #328]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f003 0308 	and.w	r3, r3, #8
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d008      	beq.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005dee:	4b4e      	ldr	r3, [pc, #312]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	494b      	ldr	r1, [pc, #300]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 0310 	and.w	r3, r3, #16
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d008      	beq.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e0c:	4b46      	ldr	r3, [pc, #280]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	4943      	ldr	r1, [pc, #268]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d008      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005e2a:	4b3f      	ldr	r3, [pc, #252]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e36:	493c      	ldr	r1, [pc, #240]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d008      	beq.n	8005e5a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005e48:	4b37      	ldr	r3, [pc, #220]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e54:	4934      	ldr	r1, [pc, #208]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d008      	beq.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005e66:	4b30      	ldr	r3, [pc, #192]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e6a:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e72:	492d      	ldr	r1, [pc, #180]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e74:	4313      	orrs	r3, r2
 8005e76:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d008      	beq.n	8005e96 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8005e84:	4b28      	ldr	r3, [pc, #160]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e88:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e90:	4925      	ldr	r1, [pc, #148]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005e92:	4313      	orrs	r3, r2
 8005e94:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d008      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8005ea2:	4b21      	ldr	r3, [pc, #132]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	491e      	ldr	r1, [pc, #120]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d008      	beq.n	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8005ec0:	4b19      	ldr	r3, [pc, #100]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ecc:	4916      	ldr	r1, [pc, #88]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d008      	beq.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8005ede:	4b12      	ldr	r3, [pc, #72]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ee2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eea:	490f      	ldr	r1, [pc, #60]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005eec:	4313      	orrs	r3, r2
 8005eee:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d008      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005efc:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f00:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f08:	4907      	ldr	r1, [pc, #28]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00c      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005f1a:	4b03      	ldr	r3, [pc, #12]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	e002      	b.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005f26:	bf00      	nop
 8005f28:	40021000 	.word	0x40021000
 8005f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f2e:	4913      	ldr	r1, [pc, #76]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005f30:	4313      	orrs	r3, r2
 8005f32:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d008      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005f40:	4b0e      	ldr	r3, [pc, #56]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f44:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f4c:	490b      	ldr	r1, [pc, #44]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d008      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8005f5e:	4b07      	ldr	r3, [pc, #28]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f6a:	4904      	ldr	r1, [pc, #16]	; (8005f7c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3748      	adds	r7, #72	; 0x48
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	40021000 	.word	0x40021000

08005f80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e049      	b.n	8006026 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d106      	bne.n	8005fac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7fb fa7e 	bl	80014a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2202      	movs	r2, #2
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	3304      	adds	r3, #4
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	f000 fa50 	bl	8006464 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3708      	adds	r7, #8
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b082      	sub	sp, #8
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	2b02      	cmp	r3, #2
 8006042:	d122      	bne.n	800608a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68db      	ldr	r3, [r3, #12]
 800604a:	f003 0302 	and.w	r3, r3, #2
 800604e:	2b02      	cmp	r3, #2
 8006050:	d11b      	bne.n	800608a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f06f 0202 	mvn.w	r2, #2
 800605a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	f003 0303 	and.w	r3, r3, #3
 800606c:	2b00      	cmp	r3, #0
 800606e:	d003      	beq.n	8006078 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 f9d8 	bl	8006426 <HAL_TIM_IC_CaptureCallback>
 8006076:	e005      	b.n	8006084 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f9ca 	bl	8006412 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f9db 	bl	800643a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b04      	cmp	r3, #4
 8006096:	d122      	bne.n	80060de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68db      	ldr	r3, [r3, #12]
 800609e:	f003 0304 	and.w	r3, r3, #4
 80060a2:	2b04      	cmp	r3, #4
 80060a4:	d11b      	bne.n	80060de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f06f 0204 	mvn.w	r2, #4
 80060ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2202      	movs	r2, #2
 80060b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d003      	beq.n	80060cc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f9ae 	bl	8006426 <HAL_TIM_IC_CaptureCallback>
 80060ca:	e005      	b.n	80060d8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f000 f9a0 	bl	8006412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f9b1 	bl	800643a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	f003 0308 	and.w	r3, r3, #8
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d122      	bne.n	8006132 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	f003 0308 	and.w	r3, r3, #8
 80060f6:	2b08      	cmp	r3, #8
 80060f8:	d11b      	bne.n	8006132 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f06f 0208 	mvn.w	r2, #8
 8006102:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2204      	movs	r2, #4
 8006108:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	69db      	ldr	r3, [r3, #28]
 8006110:	f003 0303 	and.w	r3, r3, #3
 8006114:	2b00      	cmp	r3, #0
 8006116:	d003      	beq.n	8006120 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f984 	bl	8006426 <HAL_TIM_IC_CaptureCallback>
 800611e:	e005      	b.n	800612c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f976 	bl	8006412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 f987 	bl	800643a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	f003 0310 	and.w	r3, r3, #16
 800613c:	2b10      	cmp	r3, #16
 800613e:	d122      	bne.n	8006186 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68db      	ldr	r3, [r3, #12]
 8006146:	f003 0310 	and.w	r3, r3, #16
 800614a:	2b10      	cmp	r3, #16
 800614c:	d11b      	bne.n	8006186 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f06f 0210 	mvn.w	r2, #16
 8006156:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2208      	movs	r2, #8
 800615c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	69db      	ldr	r3, [r3, #28]
 8006164:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006168:	2b00      	cmp	r3, #0
 800616a:	d003      	beq.n	8006174 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f95a 	bl	8006426 <HAL_TIM_IC_CaptureCallback>
 8006172:	e005      	b.n	8006180 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f94c 	bl	8006412 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f000 f95d 	bl	800643a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2200      	movs	r2, #0
 8006184:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b01      	cmp	r3, #1
 8006192:	d10e      	bne.n	80061b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d107      	bne.n	80061b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f06f 0201 	mvn.w	r2, #1
 80061aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f926 	bl	80063fe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	691b      	ldr	r3, [r3, #16]
 80061b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061bc:	2b80      	cmp	r3, #128	; 0x80
 80061be:	d10e      	bne.n	80061de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061ca:	2b80      	cmp	r3, #128	; 0x80
 80061cc:	d107      	bne.n	80061de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80061d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 fb11 	bl	8006800 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	691b      	ldr	r3, [r3, #16]
 80061e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ec:	d10e      	bne.n	800620c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061f8:	2b80      	cmp	r3, #128	; 0x80
 80061fa:	d107      	bne.n	800620c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006206:	6878      	ldr	r0, [r7, #4]
 8006208:	f000 fb04 	bl	8006814 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006216:	2b40      	cmp	r3, #64	; 0x40
 8006218:	d10e      	bne.n	8006238 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006224:	2b40      	cmp	r3, #64	; 0x40
 8006226:	d107      	bne.n	8006238 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f90b 	bl	800644e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691b      	ldr	r3, [r3, #16]
 800623e:	f003 0320 	and.w	r3, r3, #32
 8006242:	2b20      	cmp	r3, #32
 8006244:	d10e      	bne.n	8006264 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
 800624c:	f003 0320 	and.w	r3, r3, #32
 8006250:	2b20      	cmp	r3, #32
 8006252:	d107      	bne.n	8006264 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f06f 0220 	mvn.w	r2, #32
 800625c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fac4 	bl	80067ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006264:	bf00      	nop
 8006266:	3708      	adds	r7, #8
 8006268:	46bd      	mov	sp, r7
 800626a:	bd80      	pop	{r7, pc}

0800626c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006276:	2300      	movs	r3, #0
 8006278:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006280:	2b01      	cmp	r3, #1
 8006282:	d101      	bne.n	8006288 <HAL_TIM_ConfigClockSource+0x1c>
 8006284:	2302      	movs	r3, #2
 8006286:	e0b6      	b.n	80063f6 <HAL_TIM_ConfigClockSource+0x18a>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80062a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80062aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	68ba      	ldr	r2, [r7, #8]
 80062ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c4:	d03e      	beq.n	8006344 <HAL_TIM_ConfigClockSource+0xd8>
 80062c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ca:	f200 8087 	bhi.w	80063dc <HAL_TIM_ConfigClockSource+0x170>
 80062ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d2:	f000 8086 	beq.w	80063e2 <HAL_TIM_ConfigClockSource+0x176>
 80062d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062da:	d87f      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x170>
 80062dc:	2b70      	cmp	r3, #112	; 0x70
 80062de:	d01a      	beq.n	8006316 <HAL_TIM_ConfigClockSource+0xaa>
 80062e0:	2b70      	cmp	r3, #112	; 0x70
 80062e2:	d87b      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x170>
 80062e4:	2b60      	cmp	r3, #96	; 0x60
 80062e6:	d050      	beq.n	800638a <HAL_TIM_ConfigClockSource+0x11e>
 80062e8:	2b60      	cmp	r3, #96	; 0x60
 80062ea:	d877      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x170>
 80062ec:	2b50      	cmp	r3, #80	; 0x50
 80062ee:	d03c      	beq.n	800636a <HAL_TIM_ConfigClockSource+0xfe>
 80062f0:	2b50      	cmp	r3, #80	; 0x50
 80062f2:	d873      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x170>
 80062f4:	2b40      	cmp	r3, #64	; 0x40
 80062f6:	d058      	beq.n	80063aa <HAL_TIM_ConfigClockSource+0x13e>
 80062f8:	2b40      	cmp	r3, #64	; 0x40
 80062fa:	d86f      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x170>
 80062fc:	2b30      	cmp	r3, #48	; 0x30
 80062fe:	d064      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x15e>
 8006300:	2b30      	cmp	r3, #48	; 0x30
 8006302:	d86b      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x170>
 8006304:	2b20      	cmp	r3, #32
 8006306:	d060      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x15e>
 8006308:	2b20      	cmp	r3, #32
 800630a:	d867      	bhi.n	80063dc <HAL_TIM_ConfigClockSource+0x170>
 800630c:	2b00      	cmp	r3, #0
 800630e:	d05c      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x15e>
 8006310:	2b10      	cmp	r3, #16
 8006312:	d05a      	beq.n	80063ca <HAL_TIM_ConfigClockSource+0x15e>
 8006314:	e062      	b.n	80063dc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006326:	f000 f9b5 	bl	8006694 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006338:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	68ba      	ldr	r2, [r7, #8]
 8006340:	609a      	str	r2, [r3, #8]
      break;
 8006342:	e04f      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006354:	f000 f99e 	bl	8006694 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689a      	ldr	r2, [r3, #8]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006366:	609a      	str	r2, [r3, #8]
      break;
 8006368:	e03c      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006376:	461a      	mov	r2, r3
 8006378:	f000 f912 	bl	80065a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2150      	movs	r1, #80	; 0x50
 8006382:	4618      	mov	r0, r3
 8006384:	f000 f96b 	bl	800665e <TIM_ITRx_SetConfig>
      break;
 8006388:	e02c      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006396:	461a      	mov	r2, r3
 8006398:	f000 f931 	bl	80065fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2160      	movs	r1, #96	; 0x60
 80063a2:	4618      	mov	r0, r3
 80063a4:	f000 f95b 	bl	800665e <TIM_ITRx_SetConfig>
      break;
 80063a8:	e01c      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063b6:	461a      	mov	r2, r3
 80063b8:	f000 f8f2 	bl	80065a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2140      	movs	r1, #64	; 0x40
 80063c2:	4618      	mov	r0, r3
 80063c4:	f000 f94b 	bl	800665e <TIM_ITRx_SetConfig>
      break;
 80063c8:	e00c      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4619      	mov	r1, r3
 80063d4:	4610      	mov	r0, r2
 80063d6:	f000 f942 	bl	800665e <TIM_ITRx_SetConfig>
      break;
 80063da:	e003      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	73fb      	strb	r3, [r7, #15]
      break;
 80063e0:	e000      	b.n	80063e4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80063e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063fe:	b480      	push	{r7}
 8006400:	b083      	sub	sp, #12
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800641a:	bf00      	nop
 800641c:	370c      	adds	r7, #12
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr

08006426 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006426:	b480      	push	{r7}
 8006428:	b083      	sub	sp, #12
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800642e:	bf00      	nop
 8006430:	370c      	adds	r7, #12
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr

0800643a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800643a:	b480      	push	{r7}
 800643c:	b083      	sub	sp, #12
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006442:	bf00      	nop
 8006444:	370c      	adds	r7, #12
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800644e:	b480      	push	{r7}
 8006450:	b083      	sub	sp, #12
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
	...

08006464 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006464:	b480      	push	{r7}
 8006466:	b085      	sub	sp, #20
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a42      	ldr	r2, [pc, #264]	; (8006580 <TIM_Base_SetConfig+0x11c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d013      	beq.n	80064a4 <TIM_Base_SetConfig+0x40>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006482:	d00f      	beq.n	80064a4 <TIM_Base_SetConfig+0x40>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a3f      	ldr	r2, [pc, #252]	; (8006584 <TIM_Base_SetConfig+0x120>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d00b      	beq.n	80064a4 <TIM_Base_SetConfig+0x40>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	4a3e      	ldr	r2, [pc, #248]	; (8006588 <TIM_Base_SetConfig+0x124>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d007      	beq.n	80064a4 <TIM_Base_SetConfig+0x40>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a3d      	ldr	r2, [pc, #244]	; (800658c <TIM_Base_SetConfig+0x128>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d003      	beq.n	80064a4 <TIM_Base_SetConfig+0x40>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a3c      	ldr	r2, [pc, #240]	; (8006590 <TIM_Base_SetConfig+0x12c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d108      	bne.n	80064b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a31      	ldr	r2, [pc, #196]	; (8006580 <TIM_Base_SetConfig+0x11c>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d01f      	beq.n	80064fe <TIM_Base_SetConfig+0x9a>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064c4:	d01b      	beq.n	80064fe <TIM_Base_SetConfig+0x9a>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a2e      	ldr	r2, [pc, #184]	; (8006584 <TIM_Base_SetConfig+0x120>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d017      	beq.n	80064fe <TIM_Base_SetConfig+0x9a>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a2d      	ldr	r2, [pc, #180]	; (8006588 <TIM_Base_SetConfig+0x124>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d013      	beq.n	80064fe <TIM_Base_SetConfig+0x9a>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a2c      	ldr	r2, [pc, #176]	; (800658c <TIM_Base_SetConfig+0x128>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d00f      	beq.n	80064fe <TIM_Base_SetConfig+0x9a>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a2c      	ldr	r2, [pc, #176]	; (8006594 <TIM_Base_SetConfig+0x130>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00b      	beq.n	80064fe <TIM_Base_SetConfig+0x9a>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a2b      	ldr	r2, [pc, #172]	; (8006598 <TIM_Base_SetConfig+0x134>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d007      	beq.n	80064fe <TIM_Base_SetConfig+0x9a>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a2a      	ldr	r2, [pc, #168]	; (800659c <TIM_Base_SetConfig+0x138>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d003      	beq.n	80064fe <TIM_Base_SetConfig+0x9a>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a25      	ldr	r2, [pc, #148]	; (8006590 <TIM_Base_SetConfig+0x12c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d108      	bne.n	8006510 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4313      	orrs	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a12      	ldr	r2, [pc, #72]	; (8006580 <TIM_Base_SetConfig+0x11c>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d013      	beq.n	8006564 <TIM_Base_SetConfig+0x100>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a13      	ldr	r2, [pc, #76]	; (800658c <TIM_Base_SetConfig+0x128>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00f      	beq.n	8006564 <TIM_Base_SetConfig+0x100>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a13      	ldr	r2, [pc, #76]	; (8006594 <TIM_Base_SetConfig+0x130>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d00b      	beq.n	8006564 <TIM_Base_SetConfig+0x100>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a12      	ldr	r2, [pc, #72]	; (8006598 <TIM_Base_SetConfig+0x134>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d007      	beq.n	8006564 <TIM_Base_SetConfig+0x100>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4a11      	ldr	r2, [pc, #68]	; (800659c <TIM_Base_SetConfig+0x138>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d003      	beq.n	8006564 <TIM_Base_SetConfig+0x100>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	4a0c      	ldr	r2, [pc, #48]	; (8006590 <TIM_Base_SetConfig+0x12c>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d103      	bne.n	800656c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	691a      	ldr	r2, [r3, #16]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	615a      	str	r2, [r3, #20]
}
 8006572:	bf00      	nop
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr
 800657e:	bf00      	nop
 8006580:	40012c00 	.word	0x40012c00
 8006584:	40000400 	.word	0x40000400
 8006588:	40000800 	.word	0x40000800
 800658c:	40013400 	.word	0x40013400
 8006590:	40015000 	.word	0x40015000
 8006594:	40014000 	.word	0x40014000
 8006598:	40014400 	.word	0x40014400
 800659c:	40014800 	.word	0x40014800

080065a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b087      	sub	sp, #28
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	f023 0201 	bic.w	r2, r3, #1
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	011b      	lsls	r3, r3, #4
 80065d0:	693a      	ldr	r2, [r7, #16]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f023 030a 	bic.w	r3, r3, #10
 80065dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065de:	697a      	ldr	r2, [r7, #20]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	4313      	orrs	r3, r2
 80065e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	693a      	ldr	r2, [r7, #16]
 80065ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	621a      	str	r2, [r3, #32]
}
 80065f2:	bf00      	nop
 80065f4:	371c      	adds	r7, #28
 80065f6:	46bd      	mov	sp, r7
 80065f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fc:	4770      	bx	lr

080065fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065fe:	b480      	push	{r7}
 8006600:	b087      	sub	sp, #28
 8006602:	af00      	add	r7, sp, #0
 8006604:	60f8      	str	r0, [r7, #12]
 8006606:	60b9      	str	r1, [r7, #8]
 8006608:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	f023 0210 	bic.w	r2, r3, #16
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	699b      	ldr	r3, [r3, #24]
 800661a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006628:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	031b      	lsls	r3, r3, #12
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	4313      	orrs	r3, r2
 8006632:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800663a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	011b      	lsls	r3, r3, #4
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	4313      	orrs	r3, r2
 8006644:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	621a      	str	r2, [r3, #32]
}
 8006652:	bf00      	nop
 8006654:	371c      	adds	r7, #28
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800665e:	b480      	push	{r7}
 8006660:	b085      	sub	sp, #20
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]
 8006666:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	689b      	ldr	r3, [r3, #8]
 800666c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006674:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006676:	683a      	ldr	r2, [r7, #0]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	4313      	orrs	r3, r2
 800667c:	f043 0307 	orr.w	r3, r3, #7
 8006680:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	609a      	str	r2, [r3, #8]
}
 8006688:	bf00      	nop
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006694:	b480      	push	{r7}
 8006696:	b087      	sub	sp, #28
 8006698:	af00      	add	r7, sp, #0
 800669a:	60f8      	str	r0, [r7, #12]
 800669c:	60b9      	str	r1, [r7, #8]
 800669e:	607a      	str	r2, [r7, #4]
 80066a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	689b      	ldr	r3, [r3, #8]
 80066a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	021a      	lsls	r2, r3, #8
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	431a      	orrs	r2, r3
 80066b8:	68bb      	ldr	r3, [r7, #8]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	4313      	orrs	r3, r2
 80066c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	609a      	str	r2, [r3, #8]
}
 80066c8:	bf00      	nop
 80066ca:	371c      	adds	r7, #28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr

080066d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b085      	sub	sp, #20
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	d101      	bne.n	80066ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066e8:	2302      	movs	r3, #2
 80066ea:	e06d      	b.n	80067c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2202      	movs	r2, #2
 80066f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a30      	ldr	r2, [pc, #192]	; (80067d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d009      	beq.n	800672a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a2f      	ldr	r2, [pc, #188]	; (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d004      	beq.n	800672a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a2d      	ldr	r2, [pc, #180]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d108      	bne.n	800673c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006730:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	4313      	orrs	r3, r2
 800673a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006742:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68fa      	ldr	r2, [r7, #12]
 800674a:	4313      	orrs	r3, r2
 800674c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a1e      	ldr	r2, [pc, #120]	; (80067d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d01d      	beq.n	800679c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006768:	d018      	beq.n	800679c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	4a1c      	ldr	r2, [pc, #112]	; (80067e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d013      	beq.n	800679c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a1a      	ldr	r2, [pc, #104]	; (80067e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d00e      	beq.n	800679c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a15      	ldr	r2, [pc, #84]	; (80067d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d009      	beq.n	800679c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a16      	ldr	r2, [pc, #88]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d004      	beq.n	800679c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a11      	ldr	r2, [pc, #68]	; (80067dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d10c      	bne.n	80067b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	68ba      	ldr	r2, [r7, #8]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2201      	movs	r2, #1
 80067ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3714      	adds	r7, #20
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr
 80067d4:	40012c00 	.word	0x40012c00
 80067d8:	40013400 	.word	0x40013400
 80067dc:	40015000 	.word	0x40015000
 80067e0:	40000400 	.word	0x40000400
 80067e4:	40000800 	.word	0x40000800
 80067e8:	40014000 	.word	0x40014000

080067ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b082      	sub	sp, #8
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d101      	bne.n	800683a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006836:	2301      	movs	r3, #1
 8006838:	e040      	b.n	80068bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800683e:	2b00      	cmp	r3, #0
 8006840:	d106      	bne.n	8006850 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7fa fe50 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2224      	movs	r2, #36	; 0x24
 8006854:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0201 	bic.w	r2, r2, #1
 8006864:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f82c 	bl	80068c4 <UART_SetConfig>
 800686c:	4603      	mov	r3, r0
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e022      	b.n	80068bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687a:	2b00      	cmp	r3, #0
 800687c:	d002      	beq.n	8006884 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f9f4 	bl	8006c6c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	685a      	ldr	r2, [r3, #4]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006892:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	689a      	ldr	r2, [r3, #8]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0201 	orr.w	r2, r2, #1
 80068b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068b4:	6878      	ldr	r0, [r7, #4]
 80068b6:	f000 fa7b 	bl	8006db0 <UART_CheckIdleState>
 80068ba:	4603      	mov	r3, r0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3708      	adds	r7, #8
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b088      	sub	sp, #32
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80068cc:	2300      	movs	r3, #0
 80068ce:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	689a      	ldr	r2, [r3, #8]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	431a      	orrs	r2, r3
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	695b      	ldr	r3, [r3, #20]
 80068de:	431a      	orrs	r2, r3
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	69db      	ldr	r3, [r3, #28]
 80068e4:	4313      	orrs	r3, r2
 80068e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	4b92      	ldr	r3, [pc, #584]	; (8006b38 <UART_SetConfig+0x274>)
 80068f0:	4013      	ands	r3, r2
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	6812      	ldr	r2, [r2, #0]
 80068f6:	6979      	ldr	r1, [r7, #20]
 80068f8:	430b      	orrs	r3, r1
 80068fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68da      	ldr	r2, [r3, #12]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6a1b      	ldr	r3, [r3, #32]
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	4313      	orrs	r3, r2
 8006920:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	430a      	orrs	r2, r1
 8006934:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a80      	ldr	r2, [pc, #512]	; (8006b3c <UART_SetConfig+0x278>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d120      	bne.n	8006982 <UART_SetConfig+0xbe>
 8006940:	4b7f      	ldr	r3, [pc, #508]	; (8006b40 <UART_SetConfig+0x27c>)
 8006942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006944:	f003 0303 	and.w	r3, r3, #3
 8006948:	2b03      	cmp	r3, #3
 800694a:	d817      	bhi.n	800697c <UART_SetConfig+0xb8>
 800694c:	a201      	add	r2, pc, #4	; (adr r2, 8006954 <UART_SetConfig+0x90>)
 800694e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006952:	bf00      	nop
 8006954:	08006965 	.word	0x08006965
 8006958:	08006971 	.word	0x08006971
 800695c:	08006977 	.word	0x08006977
 8006960:	0800696b 	.word	0x0800696b
 8006964:	2301      	movs	r3, #1
 8006966:	77fb      	strb	r3, [r7, #31]
 8006968:	e0b5      	b.n	8006ad6 <UART_SetConfig+0x212>
 800696a:	2302      	movs	r3, #2
 800696c:	77fb      	strb	r3, [r7, #31]
 800696e:	e0b2      	b.n	8006ad6 <UART_SetConfig+0x212>
 8006970:	2304      	movs	r3, #4
 8006972:	77fb      	strb	r3, [r7, #31]
 8006974:	e0af      	b.n	8006ad6 <UART_SetConfig+0x212>
 8006976:	2308      	movs	r3, #8
 8006978:	77fb      	strb	r3, [r7, #31]
 800697a:	e0ac      	b.n	8006ad6 <UART_SetConfig+0x212>
 800697c:	2310      	movs	r3, #16
 800697e:	77fb      	strb	r3, [r7, #31]
 8006980:	e0a9      	b.n	8006ad6 <UART_SetConfig+0x212>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a6f      	ldr	r2, [pc, #444]	; (8006b44 <UART_SetConfig+0x280>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d124      	bne.n	80069d6 <UART_SetConfig+0x112>
 800698c:	4b6c      	ldr	r3, [pc, #432]	; (8006b40 <UART_SetConfig+0x27c>)
 800698e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006990:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006994:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006998:	d011      	beq.n	80069be <UART_SetConfig+0xfa>
 800699a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800699e:	d817      	bhi.n	80069d0 <UART_SetConfig+0x10c>
 80069a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069a4:	d011      	beq.n	80069ca <UART_SetConfig+0x106>
 80069a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80069aa:	d811      	bhi.n	80069d0 <UART_SetConfig+0x10c>
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d003      	beq.n	80069b8 <UART_SetConfig+0xf4>
 80069b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b4:	d006      	beq.n	80069c4 <UART_SetConfig+0x100>
 80069b6:	e00b      	b.n	80069d0 <UART_SetConfig+0x10c>
 80069b8:	2300      	movs	r3, #0
 80069ba:	77fb      	strb	r3, [r7, #31]
 80069bc:	e08b      	b.n	8006ad6 <UART_SetConfig+0x212>
 80069be:	2302      	movs	r3, #2
 80069c0:	77fb      	strb	r3, [r7, #31]
 80069c2:	e088      	b.n	8006ad6 <UART_SetConfig+0x212>
 80069c4:	2304      	movs	r3, #4
 80069c6:	77fb      	strb	r3, [r7, #31]
 80069c8:	e085      	b.n	8006ad6 <UART_SetConfig+0x212>
 80069ca:	2308      	movs	r3, #8
 80069cc:	77fb      	strb	r3, [r7, #31]
 80069ce:	e082      	b.n	8006ad6 <UART_SetConfig+0x212>
 80069d0:	2310      	movs	r3, #16
 80069d2:	77fb      	strb	r3, [r7, #31]
 80069d4:	e07f      	b.n	8006ad6 <UART_SetConfig+0x212>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	4a5b      	ldr	r2, [pc, #364]	; (8006b48 <UART_SetConfig+0x284>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d124      	bne.n	8006a2a <UART_SetConfig+0x166>
 80069e0:	4b57      	ldr	r3, [pc, #348]	; (8006b40 <UART_SetConfig+0x27c>)
 80069e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069e4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80069e8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80069ec:	d011      	beq.n	8006a12 <UART_SetConfig+0x14e>
 80069ee:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80069f2:	d817      	bhi.n	8006a24 <UART_SetConfig+0x160>
 80069f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80069f8:	d011      	beq.n	8006a1e <UART_SetConfig+0x15a>
 80069fa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80069fe:	d811      	bhi.n	8006a24 <UART_SetConfig+0x160>
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d003      	beq.n	8006a0c <UART_SetConfig+0x148>
 8006a04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006a08:	d006      	beq.n	8006a18 <UART_SetConfig+0x154>
 8006a0a:	e00b      	b.n	8006a24 <UART_SetConfig+0x160>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	77fb      	strb	r3, [r7, #31]
 8006a10:	e061      	b.n	8006ad6 <UART_SetConfig+0x212>
 8006a12:	2302      	movs	r3, #2
 8006a14:	77fb      	strb	r3, [r7, #31]
 8006a16:	e05e      	b.n	8006ad6 <UART_SetConfig+0x212>
 8006a18:	2304      	movs	r3, #4
 8006a1a:	77fb      	strb	r3, [r7, #31]
 8006a1c:	e05b      	b.n	8006ad6 <UART_SetConfig+0x212>
 8006a1e:	2308      	movs	r3, #8
 8006a20:	77fb      	strb	r3, [r7, #31]
 8006a22:	e058      	b.n	8006ad6 <UART_SetConfig+0x212>
 8006a24:	2310      	movs	r3, #16
 8006a26:	77fb      	strb	r3, [r7, #31]
 8006a28:	e055      	b.n	8006ad6 <UART_SetConfig+0x212>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a47      	ldr	r2, [pc, #284]	; (8006b4c <UART_SetConfig+0x288>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d124      	bne.n	8006a7e <UART_SetConfig+0x1ba>
 8006a34:	4b42      	ldr	r3, [pc, #264]	; (8006b40 <UART_SetConfig+0x27c>)
 8006a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a38:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006a3c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a40:	d011      	beq.n	8006a66 <UART_SetConfig+0x1a2>
 8006a42:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006a46:	d817      	bhi.n	8006a78 <UART_SetConfig+0x1b4>
 8006a48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a4c:	d011      	beq.n	8006a72 <UART_SetConfig+0x1ae>
 8006a4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a52:	d811      	bhi.n	8006a78 <UART_SetConfig+0x1b4>
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <UART_SetConfig+0x19c>
 8006a58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a5c:	d006      	beq.n	8006a6c <UART_SetConfig+0x1a8>
 8006a5e:	e00b      	b.n	8006a78 <UART_SetConfig+0x1b4>
 8006a60:	2300      	movs	r3, #0
 8006a62:	77fb      	strb	r3, [r7, #31]
 8006a64:	e037      	b.n	8006ad6 <UART_SetConfig+0x212>
 8006a66:	2302      	movs	r3, #2
 8006a68:	77fb      	strb	r3, [r7, #31]
 8006a6a:	e034      	b.n	8006ad6 <UART_SetConfig+0x212>
 8006a6c:	2304      	movs	r3, #4
 8006a6e:	77fb      	strb	r3, [r7, #31]
 8006a70:	e031      	b.n	8006ad6 <UART_SetConfig+0x212>
 8006a72:	2308      	movs	r3, #8
 8006a74:	77fb      	strb	r3, [r7, #31]
 8006a76:	e02e      	b.n	8006ad6 <UART_SetConfig+0x212>
 8006a78:	2310      	movs	r3, #16
 8006a7a:	77fb      	strb	r3, [r7, #31]
 8006a7c:	e02b      	b.n	8006ad6 <UART_SetConfig+0x212>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a33      	ldr	r2, [pc, #204]	; (8006b50 <UART_SetConfig+0x28c>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d124      	bne.n	8006ad2 <UART_SetConfig+0x20e>
 8006a88:	4b2d      	ldr	r3, [pc, #180]	; (8006b40 <UART_SetConfig+0x27c>)
 8006a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006a90:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006a94:	d011      	beq.n	8006aba <UART_SetConfig+0x1f6>
 8006a96:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006a9a:	d817      	bhi.n	8006acc <UART_SetConfig+0x208>
 8006a9c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006aa0:	d011      	beq.n	8006ac6 <UART_SetConfig+0x202>
 8006aa2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006aa6:	d811      	bhi.n	8006acc <UART_SetConfig+0x208>
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <UART_SetConfig+0x1f0>
 8006aac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ab0:	d006      	beq.n	8006ac0 <UART_SetConfig+0x1fc>
 8006ab2:	e00b      	b.n	8006acc <UART_SetConfig+0x208>
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	77fb      	strb	r3, [r7, #31]
 8006ab8:	e00d      	b.n	8006ad6 <UART_SetConfig+0x212>
 8006aba:	2302      	movs	r3, #2
 8006abc:	77fb      	strb	r3, [r7, #31]
 8006abe:	e00a      	b.n	8006ad6 <UART_SetConfig+0x212>
 8006ac0:	2304      	movs	r3, #4
 8006ac2:	77fb      	strb	r3, [r7, #31]
 8006ac4:	e007      	b.n	8006ad6 <UART_SetConfig+0x212>
 8006ac6:	2308      	movs	r3, #8
 8006ac8:	77fb      	strb	r3, [r7, #31]
 8006aca:	e004      	b.n	8006ad6 <UART_SetConfig+0x212>
 8006acc:	2310      	movs	r3, #16
 8006ace:	77fb      	strb	r3, [r7, #31]
 8006ad0:	e001      	b.n	8006ad6 <UART_SetConfig+0x212>
 8006ad2:	2310      	movs	r3, #16
 8006ad4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	69db      	ldr	r3, [r3, #28]
 8006ada:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ade:	d16b      	bne.n	8006bb8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8006ae0:	7ffb      	ldrb	r3, [r7, #31]
 8006ae2:	2b08      	cmp	r3, #8
 8006ae4:	d838      	bhi.n	8006b58 <UART_SetConfig+0x294>
 8006ae6:	a201      	add	r2, pc, #4	; (adr r2, 8006aec <UART_SetConfig+0x228>)
 8006ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aec:	08006b11 	.word	0x08006b11
 8006af0:	08006b19 	.word	0x08006b19
 8006af4:	08006b21 	.word	0x08006b21
 8006af8:	08006b59 	.word	0x08006b59
 8006afc:	08006b27 	.word	0x08006b27
 8006b00:	08006b59 	.word	0x08006b59
 8006b04:	08006b59 	.word	0x08006b59
 8006b08:	08006b59 	.word	0x08006b59
 8006b0c:	08006b2f 	.word	0x08006b2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b10:	f7fe ffd4 	bl	8005abc <HAL_RCC_GetPCLK1Freq>
 8006b14:	61b8      	str	r0, [r7, #24]
        break;
 8006b16:	e024      	b.n	8006b62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b18:	f7fe fff2 	bl	8005b00 <HAL_RCC_GetPCLK2Freq>
 8006b1c:	61b8      	str	r0, [r7, #24]
        break;
 8006b1e:	e020      	b.n	8006b62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b20:	4b0c      	ldr	r3, [pc, #48]	; (8006b54 <UART_SetConfig+0x290>)
 8006b22:	61bb      	str	r3, [r7, #24]
        break;
 8006b24:	e01d      	b.n	8006b62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b26:	f7fe ff53 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 8006b2a:	61b8      	str	r0, [r7, #24]
        break;
 8006b2c:	e019      	b.n	8006b62 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b32:	61bb      	str	r3, [r7, #24]
        break;
 8006b34:	e015      	b.n	8006b62 <UART_SetConfig+0x29e>
 8006b36:	bf00      	nop
 8006b38:	efff69f3 	.word	0xefff69f3
 8006b3c:	40013800 	.word	0x40013800
 8006b40:	40021000 	.word	0x40021000
 8006b44:	40004400 	.word	0x40004400
 8006b48:	40004800 	.word	0x40004800
 8006b4c:	40004c00 	.word	0x40004c00
 8006b50:	40005000 	.word	0x40005000
 8006b54:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006b58:	2300      	movs	r3, #0
 8006b5a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	77bb      	strb	r3, [r7, #30]
        break;
 8006b60:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b62:	69bb      	ldr	r3, [r7, #24]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d073      	beq.n	8006c50 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b68:	69bb      	ldr	r3, [r7, #24]
 8006b6a:	005a      	lsls	r2, r3, #1
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	085b      	lsrs	r3, r3, #1
 8006b72:	441a      	add	r2, r3
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	685b      	ldr	r3, [r3, #4]
 8006b78:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b7c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	2b0f      	cmp	r3, #15
 8006b82:	d916      	bls.n	8006bb2 <UART_SetConfig+0x2ee>
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b8a:	d212      	bcs.n	8006bb2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	f023 030f 	bic.w	r3, r3, #15
 8006b94:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	085b      	lsrs	r3, r3, #1
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	f003 0307 	and.w	r3, r3, #7
 8006ba0:	b29a      	uxth	r2, r3
 8006ba2:	89fb      	ldrh	r3, [r7, #14]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	89fa      	ldrh	r2, [r7, #14]
 8006bae:	60da      	str	r2, [r3, #12]
 8006bb0:	e04e      	b.n	8006c50 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	77bb      	strb	r3, [r7, #30]
 8006bb6:	e04b      	b.n	8006c50 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006bb8:	7ffb      	ldrb	r3, [r7, #31]
 8006bba:	2b08      	cmp	r3, #8
 8006bbc:	d827      	bhi.n	8006c0e <UART_SetConfig+0x34a>
 8006bbe:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <UART_SetConfig+0x300>)
 8006bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc4:	08006be9 	.word	0x08006be9
 8006bc8:	08006bf1 	.word	0x08006bf1
 8006bcc:	08006bf9 	.word	0x08006bf9
 8006bd0:	08006c0f 	.word	0x08006c0f
 8006bd4:	08006bff 	.word	0x08006bff
 8006bd8:	08006c0f 	.word	0x08006c0f
 8006bdc:	08006c0f 	.word	0x08006c0f
 8006be0:	08006c0f 	.word	0x08006c0f
 8006be4:	08006c07 	.word	0x08006c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006be8:	f7fe ff68 	bl	8005abc <HAL_RCC_GetPCLK1Freq>
 8006bec:	61b8      	str	r0, [r7, #24]
        break;
 8006bee:	e013      	b.n	8006c18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bf0:	f7fe ff86 	bl	8005b00 <HAL_RCC_GetPCLK2Freq>
 8006bf4:	61b8      	str	r0, [r7, #24]
        break;
 8006bf6:	e00f      	b.n	8006c18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bf8:	4b1b      	ldr	r3, [pc, #108]	; (8006c68 <UART_SetConfig+0x3a4>)
 8006bfa:	61bb      	str	r3, [r7, #24]
        break;
 8006bfc:	e00c      	b.n	8006c18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bfe:	f7fe fee7 	bl	80059d0 <HAL_RCC_GetSysClockFreq>
 8006c02:	61b8      	str	r0, [r7, #24]
        break;
 8006c04:	e008      	b.n	8006c18 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c0a:	61bb      	str	r3, [r7, #24]
        break;
 8006c0c:	e004      	b.n	8006c18 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c12:	2301      	movs	r3, #1
 8006c14:	77bb      	strb	r3, [r7, #30]
        break;
 8006c16:	bf00      	nop
    }

    if (pclk != 0U)
 8006c18:	69bb      	ldr	r3, [r7, #24]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d018      	beq.n	8006c50 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	085a      	lsrs	r2, r3, #1
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	441a      	add	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c30:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	2b0f      	cmp	r3, #15
 8006c36:	d909      	bls.n	8006c4c <UART_SetConfig+0x388>
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c3e:	d205      	bcs.n	8006c4c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	60da      	str	r2, [r3, #12]
 8006c4a:	e001      	b.n	8006c50 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2200      	movs	r2, #0
 8006c54:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006c5c:	7fbb      	ldrb	r3, [r7, #30]
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3720      	adds	r7, #32
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	007a1200 	.word	0x007a1200

08006c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00a      	beq.n	8006c96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00a      	beq.n	8006cb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbc:	f003 0304 	and.w	r3, r3, #4
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00a      	beq.n	8006cda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	f003 0308 	and.w	r3, r3, #8
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d00a      	beq.n	8006cfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	430a      	orrs	r2, r1
 8006cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d00:	f003 0310 	and.w	r3, r3, #16
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00a      	beq.n	8006d1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d22:	f003 0320 	and.w	r3, r3, #32
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00a      	beq.n	8006d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d01a      	beq.n	8006d82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d6a:	d10a      	bne.n	8006d82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	685b      	ldr	r3, [r3, #4]
 8006d72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00a      	beq.n	8006da4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	430a      	orrs	r2, r1
 8006da2:	605a      	str	r2, [r3, #4]
  }
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b098      	sub	sp, #96	; 0x60
 8006db4:	af02      	add	r7, sp, #8
 8006db6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006dc0:	f7fa fd2c 	bl	800181c <HAL_GetTick>
 8006dc4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0308 	and.w	r3, r3, #8
 8006dd0:	2b08      	cmp	r3, #8
 8006dd2:	d12e      	bne.n	8006e32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dd8:	9300      	str	r3, [sp, #0]
 8006dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ddc:	2200      	movs	r2, #0
 8006dde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f000 f88c 	bl	8006f00 <UART_WaitOnFlagUntilTimeout>
 8006de8:	4603      	mov	r3, r0
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d021      	beq.n	8006e32 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df6:	e853 3f00 	ldrex	r3, [r3]
 8006dfa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e02:	653b      	str	r3, [r7, #80]	; 0x50
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	461a      	mov	r2, r3
 8006e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e0c:	647b      	str	r3, [r7, #68]	; 0x44
 8006e0e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e14:	e841 2300 	strex	r3, r2, [r1]
 8006e18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e6      	bne.n	8006dee <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2220      	movs	r2, #32
 8006e24:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e062      	b.n	8006ef8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0304 	and.w	r3, r3, #4
 8006e3c:	2b04      	cmp	r3, #4
 8006e3e:	d149      	bne.n	8006ed4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006e44:	9300      	str	r3, [sp, #0]
 8006e46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e48:	2200      	movs	r2, #0
 8006e4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f856 	bl	8006f00 <UART_WaitOnFlagUntilTimeout>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d03c      	beq.n	8006ed4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e62:	e853 3f00 	ldrex	r3, [r3]
 8006e66:	623b      	str	r3, [r7, #32]
   return(result);
 8006e68:	6a3b      	ldr	r3, [r7, #32]
 8006e6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	461a      	mov	r2, r3
 8006e76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e78:	633b      	str	r3, [r7, #48]	; 0x30
 8006e7a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e80:	e841 2300 	strex	r3, r2, [r1]
 8006e84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d1e6      	bne.n	8006e5a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	3308      	adds	r3, #8
 8006e92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	e853 3f00 	ldrex	r3, [r3]
 8006e9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f023 0301 	bic.w	r3, r3, #1
 8006ea2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	3308      	adds	r3, #8
 8006eaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006eac:	61fa      	str	r2, [r7, #28]
 8006eae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb0:	69b9      	ldr	r1, [r7, #24]
 8006eb2:	69fa      	ldr	r2, [r7, #28]
 8006eb4:	e841 2300 	strex	r3, r2, [r1]
 8006eb8:	617b      	str	r3, [r7, #20]
   return(result);
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1e5      	bne.n	8006e8c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2220      	movs	r2, #32
 8006ec4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e011      	b.n	8006ef8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2220      	movs	r2, #32
 8006ed8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2220      	movs	r2, #32
 8006ede:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3758      	adds	r7, #88	; 0x58
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	60f8      	str	r0, [r7, #12]
 8006f08:	60b9      	str	r1, [r7, #8]
 8006f0a:	603b      	str	r3, [r7, #0]
 8006f0c:	4613      	mov	r3, r2
 8006f0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f10:	e049      	b.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f18:	d045      	beq.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f1a:	f7fa fc7f 	bl	800181c <HAL_GetTick>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	1ad3      	subs	r3, r2, r3
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d302      	bcc.n	8006f30 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d101      	bne.n	8006f34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f30:	2303      	movs	r3, #3
 8006f32:	e048      	b.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	f003 0304 	and.w	r3, r3, #4
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d031      	beq.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	f003 0308 	and.w	r3, r3, #8
 8006f4c:	2b08      	cmp	r3, #8
 8006f4e:	d110      	bne.n	8006f72 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	2208      	movs	r2, #8
 8006f56:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 f838 	bl	8006fce <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2208      	movs	r2, #8
 8006f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e029      	b.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	69db      	ldr	r3, [r3, #28]
 8006f78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f80:	d111      	bne.n	8006fa6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 f81e 	bl	8006fce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006fa2:	2303      	movs	r3, #3
 8006fa4:	e00f      	b.n	8006fc6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	69da      	ldr	r2, [r3, #28]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	4013      	ands	r3, r2
 8006fb0:	68ba      	ldr	r2, [r7, #8]
 8006fb2:	429a      	cmp	r2, r3
 8006fb4:	bf0c      	ite	eq
 8006fb6:	2301      	moveq	r3, #1
 8006fb8:	2300      	movne	r3, #0
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	461a      	mov	r2, r3
 8006fbe:	79fb      	ldrb	r3, [r7, #7]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d0a6      	beq.n	8006f12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b095      	sub	sp, #84	; 0x54
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fde:	e853 3f00 	ldrex	r3, [r3]
 8006fe2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006fea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ff4:	643b      	str	r3, [r7, #64]	; 0x40
 8006ff6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ffa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ffc:	e841 2300 	strex	r3, r2, [r1]
 8007000:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1e6      	bne.n	8006fd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	3308      	adds	r3, #8
 800700e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007010:	6a3b      	ldr	r3, [r7, #32]
 8007012:	e853 3f00 	ldrex	r3, [r3]
 8007016:	61fb      	str	r3, [r7, #28]
   return(result);
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	f023 0301 	bic.w	r3, r3, #1
 800701e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	3308      	adds	r3, #8
 8007026:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007028:	62fa      	str	r2, [r7, #44]	; 0x2c
 800702a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800702e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007030:	e841 2300 	strex	r3, r2, [r1]
 8007034:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1e5      	bne.n	8007008 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007040:	2b01      	cmp	r3, #1
 8007042:	d118      	bne.n	8007076 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	e853 3f00 	ldrex	r3, [r3]
 8007050:	60bb      	str	r3, [r7, #8]
   return(result);
 8007052:	68bb      	ldr	r3, [r7, #8]
 8007054:	f023 0310 	bic.w	r3, r3, #16
 8007058:	647b      	str	r3, [r7, #68]	; 0x44
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	461a      	mov	r2, r3
 8007060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007062:	61bb      	str	r3, [r7, #24]
 8007064:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007066:	6979      	ldr	r1, [r7, #20]
 8007068:	69ba      	ldr	r2, [r7, #24]
 800706a:	e841 2300 	strex	r3, r2, [r1]
 800706e:	613b      	str	r3, [r7, #16]
   return(result);
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1e6      	bne.n	8007044 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2220      	movs	r2, #32
 800707a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2200      	movs	r2, #0
 8007088:	669a      	str	r2, [r3, #104]	; 0x68
}
 800708a:	bf00      	nop
 800708c:	3754      	adds	r7, #84	; 0x54
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007096:	b480      	push	{r7}
 8007098:	b085      	sub	sp, #20
 800709a:	af00      	add	r7, sp, #0
 800709c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80070a6:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80070aa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80070b6:	2300      	movs	r3, #0
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c2:	4770      	bx	lr

080070c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b085      	sub	sp, #20
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80070cc:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80070d0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80070d8:	b29a      	uxth	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	b29b      	uxth	r3, r3
 80070de:	43db      	mvns	r3, r3
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	4013      	ands	r3, r2
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80070fa:	b084      	sub	sp, #16
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	f107 0014 	add.w	r0, r7, #20
 8007108:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2200      	movs	r2, #0
 8007118:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	370c      	adds	r7, #12
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	b004      	add	sp, #16
 800713a:	4770      	bx	lr

0800713c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800713c:	b480      	push	{r7}
 800713e:	b09d      	sub	sp, #116	; 0x74
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007146:	2300      	movs	r3, #0
 8007148:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	4413      	add	r3, r2
 8007156:	881b      	ldrh	r3, [r3, #0]
 8007158:	b29b      	uxth	r3, r3
 800715a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800715e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007162:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	78db      	ldrb	r3, [r3, #3]
 800716a:	2b03      	cmp	r3, #3
 800716c:	d81f      	bhi.n	80071ae <USB_ActivateEndpoint+0x72>
 800716e:	a201      	add	r2, pc, #4	; (adr r2, 8007174 <USB_ActivateEndpoint+0x38>)
 8007170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007174:	08007185 	.word	0x08007185
 8007178:	080071a1 	.word	0x080071a1
 800717c:	080071b7 	.word	0x080071b7
 8007180:	08007193 	.word	0x08007193
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007184:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007188:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800718c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007190:	e012      	b.n	80071b8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007192:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007196:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800719a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800719e:	e00b      	b.n	80071b8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80071a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80071a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80071a8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80071ac:	e004      	b.n	80071b8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80071b4:	e000      	b.n	80071b8 <USB_ActivateEndpoint+0x7c>
      break;
 80071b6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	441a      	add	r2, r3
 80071c2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80071c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d6:	b29b      	uxth	r3, r3
 80071d8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	4413      	add	r3, r2
 80071e4:	881b      	ldrh	r3, [r3, #0]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	b21b      	sxth	r3, r3
 80071ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f2:	b21a      	sxth	r2, r3
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	781b      	ldrb	r3, [r3, #0]
 80071f8:	b21b      	sxth	r3, r3
 80071fa:	4313      	orrs	r3, r2
 80071fc:	b21b      	sxth	r3, r3
 80071fe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007202:	687a      	ldr	r2, [r7, #4]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	441a      	add	r2, r3
 800720c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007210:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007214:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007218:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800721c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007220:	b29b      	uxth	r3, r3
 8007222:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	7b1b      	ldrb	r3, [r3, #12]
 8007228:	2b00      	cmp	r3, #0
 800722a:	f040 8178 	bne.w	800751e <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	785b      	ldrb	r3, [r3, #1]
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 8084 	beq.w	8007340 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	61bb      	str	r3, [r7, #24]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007242:	b29b      	uxth	r3, r3
 8007244:	461a      	mov	r2, r3
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	4413      	add	r3, r2
 800724a:	61bb      	str	r3, [r7, #24]
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	00da      	lsls	r2, r3, #3
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	4413      	add	r3, r2
 8007256:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800725a:	617b      	str	r3, [r7, #20]
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	88db      	ldrh	r3, [r3, #6]
 8007260:	085b      	lsrs	r3, r3, #1
 8007262:	b29b      	uxth	r3, r3
 8007264:	005b      	lsls	r3, r3, #1
 8007266:	b29a      	uxth	r2, r3
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	781b      	ldrb	r3, [r3, #0]
 8007272:	009b      	lsls	r3, r3, #2
 8007274:	4413      	add	r3, r2
 8007276:	881b      	ldrh	r3, [r3, #0]
 8007278:	827b      	strh	r3, [r7, #18]
 800727a:	8a7b      	ldrh	r3, [r7, #18]
 800727c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007280:	2b00      	cmp	r3, #0
 8007282:	d01b      	beq.n	80072bc <USB_ActivateEndpoint+0x180>
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	4413      	add	r3, r2
 800728e:	881b      	ldrh	r3, [r3, #0]
 8007290:	b29b      	uxth	r3, r3
 8007292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800729a:	823b      	strh	r3, [r7, #16]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	441a      	add	r2, r3
 80072a6:	8a3b      	ldrh	r3, [r7, #16]
 80072a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	78db      	ldrb	r3, [r3, #3]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d020      	beq.n	8007306 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80072c4:	687a      	ldr	r2, [r7, #4]
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	009b      	lsls	r3, r3, #2
 80072cc:	4413      	add	r3, r2
 80072ce:	881b      	ldrh	r3, [r3, #0]
 80072d0:	b29b      	uxth	r3, r3
 80072d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072da:	81bb      	strh	r3, [r7, #12]
 80072dc:	89bb      	ldrh	r3, [r7, #12]
 80072de:	f083 0320 	eor.w	r3, r3, #32
 80072e2:	81bb      	strh	r3, [r7, #12]
 80072e4:	687a      	ldr	r2, [r7, #4]
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	441a      	add	r2, r3
 80072ee:	89bb      	ldrh	r3, [r7, #12]
 80072f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007300:	b29b      	uxth	r3, r3
 8007302:	8013      	strh	r3, [r2, #0]
 8007304:	e2d5      	b.n	80078b2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	4413      	add	r3, r2
 8007310:	881b      	ldrh	r3, [r3, #0]
 8007312:	b29b      	uxth	r3, r3
 8007314:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007318:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800731c:	81fb      	strh	r3, [r7, #14]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	781b      	ldrb	r3, [r3, #0]
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	441a      	add	r2, r3
 8007328:	89fb      	ldrh	r3, [r7, #14]
 800732a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800732e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800733a:	b29b      	uxth	r3, r3
 800733c:	8013      	strh	r3, [r2, #0]
 800733e:	e2b8      	b.n	80078b2 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	633b      	str	r3, [r7, #48]	; 0x30
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800734a:	b29b      	uxth	r3, r3
 800734c:	461a      	mov	r2, r3
 800734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007350:	4413      	add	r3, r2
 8007352:	633b      	str	r3, [r7, #48]	; 0x30
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	00da      	lsls	r2, r3, #3
 800735a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735c:	4413      	add	r3, r2
 800735e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007362:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	88db      	ldrh	r3, [r3, #6]
 8007368:	085b      	lsrs	r3, r3, #1
 800736a:	b29b      	uxth	r3, r3
 800736c:	005b      	lsls	r3, r3, #1
 800736e:	b29a      	uxth	r2, r3
 8007370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007372:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	62bb      	str	r3, [r7, #40]	; 0x28
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800737e:	b29b      	uxth	r3, r3
 8007380:	461a      	mov	r2, r3
 8007382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007384:	4413      	add	r3, r2
 8007386:	62bb      	str	r3, [r7, #40]	; 0x28
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	781b      	ldrb	r3, [r3, #0]
 800738c:	00da      	lsls	r2, r3, #3
 800738e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007390:	4413      	add	r3, r2
 8007392:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007396:	627b      	str	r3, [r7, #36]	; 0x24
 8007398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739a:	881b      	ldrh	r3, [r3, #0]
 800739c:	b29b      	uxth	r3, r3
 800739e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80073a2:	b29a      	uxth	r2, r3
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	801a      	strh	r2, [r3, #0]
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	2b3e      	cmp	r3, #62	; 0x3e
 80073ae:	d91d      	bls.n	80073ec <USB_ActivateEndpoint+0x2b0>
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	095b      	lsrs	r3, r3, #5
 80073b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	f003 031f 	and.w	r3, r3, #31
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d102      	bne.n	80073ca <USB_ActivateEndpoint+0x28e>
 80073c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073c6:	3b01      	subs	r3, #1
 80073c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	881b      	ldrh	r3, [r3, #0]
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80073d2:	b29b      	uxth	r3, r3
 80073d4:	029b      	lsls	r3, r3, #10
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	4313      	orrs	r3, r2
 80073da:	b29b      	uxth	r3, r3
 80073dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073e4:	b29a      	uxth	r2, r3
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	801a      	strh	r2, [r3, #0]
 80073ea:	e026      	b.n	800743a <USB_ActivateEndpoint+0x2fe>
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	691b      	ldr	r3, [r3, #16]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10a      	bne.n	800740a <USB_ActivateEndpoint+0x2ce>
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	881b      	ldrh	r3, [r3, #0]
 80073f8:	b29b      	uxth	r3, r3
 80073fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007402:	b29a      	uxth	r2, r3
 8007404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007406:	801a      	strh	r2, [r3, #0]
 8007408:	e017      	b.n	800743a <USB_ActivateEndpoint+0x2fe>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	691b      	ldr	r3, [r3, #16]
 800740e:	085b      	lsrs	r3, r3, #1
 8007410:	66bb      	str	r3, [r7, #104]	; 0x68
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	f003 0301 	and.w	r3, r3, #1
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <USB_ActivateEndpoint+0x2e8>
 800741e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007420:	3301      	adds	r3, #1
 8007422:	66bb      	str	r3, [r7, #104]	; 0x68
 8007424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	b29a      	uxth	r2, r3
 800742a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800742c:	b29b      	uxth	r3, r3
 800742e:	029b      	lsls	r3, r3, #10
 8007430:	b29b      	uxth	r3, r3
 8007432:	4313      	orrs	r3, r2
 8007434:	b29a      	uxth	r2, r3
 8007436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007438:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	847b      	strh	r3, [r7, #34]	; 0x22
 8007448:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800744a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d01b      	beq.n	800748a <USB_ActivateEndpoint+0x34e>
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	4413      	add	r3, r2
 800745c:	881b      	ldrh	r3, [r3, #0]
 800745e:	b29b      	uxth	r3, r3
 8007460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007468:	843b      	strh	r3, [r7, #32]
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	441a      	add	r2, r3
 8007474:	8c3b      	ldrh	r3, [r7, #32]
 8007476:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800747a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800747e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007482:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007486:	b29b      	uxth	r3, r3
 8007488:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d124      	bne.n	80074dc <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007492:	687a      	ldr	r2, [r7, #4]
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	781b      	ldrb	r3, [r3, #0]
 8007498:	009b      	lsls	r3, r3, #2
 800749a:	4413      	add	r3, r2
 800749c:	881b      	ldrh	r3, [r3, #0]
 800749e:	b29b      	uxth	r3, r3
 80074a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074a8:	83bb      	strh	r3, [r7, #28]
 80074aa:	8bbb      	ldrh	r3, [r7, #28]
 80074ac:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80074b0:	83bb      	strh	r3, [r7, #28]
 80074b2:	8bbb      	ldrh	r3, [r7, #28]
 80074b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80074b8:	83bb      	strh	r3, [r7, #28]
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	441a      	add	r2, r3
 80074c4:	8bbb      	ldrh	r3, [r7, #28]
 80074c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80074ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80074ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80074d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074d6:	b29b      	uxth	r3, r3
 80074d8:	8013      	strh	r3, [r2, #0]
 80074da:	e1ea      	b.n	80078b2 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	4413      	add	r3, r2
 80074e6:	881b      	ldrh	r3, [r3, #0]
 80074e8:	b29b      	uxth	r3, r3
 80074ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074f2:	83fb      	strh	r3, [r7, #30]
 80074f4:	8bfb      	ldrh	r3, [r7, #30]
 80074f6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80074fa:	83fb      	strh	r3, [r7, #30]
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	441a      	add	r2, r3
 8007506:	8bfb      	ldrh	r3, [r7, #30]
 8007508:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800750c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007514:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007518:	b29b      	uxth	r3, r3
 800751a:	8013      	strh	r3, [r2, #0]
 800751c:	e1c9      	b.n	80078b2 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	78db      	ldrb	r3, [r3, #3]
 8007522:	2b02      	cmp	r3, #2
 8007524:	d11e      	bne.n	8007564 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	009b      	lsls	r3, r3, #2
 800752e:	4413      	add	r3, r2
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	b29b      	uxth	r3, r3
 8007534:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800753c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	009b      	lsls	r3, r3, #2
 8007548:	441a      	add	r2, r3
 800754a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800754e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007552:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007556:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800755a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800755e:	b29b      	uxth	r3, r3
 8007560:	8013      	strh	r3, [r2, #0]
 8007562:	e01d      	b.n	80075a0 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	4413      	add	r3, r2
 800756e:	881b      	ldrh	r3, [r3, #0]
 8007570:	b29b      	uxth	r3, r3
 8007572:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007576:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800757a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	441a      	add	r2, r3
 8007588:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800758c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007590:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007594:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800759c:	b29b      	uxth	r3, r3
 800759e:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	461a      	mov	r2, r3
 80075ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075b0:	4413      	add	r3, r2
 80075b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	00da      	lsls	r2, r3, #3
 80075ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075bc:	4413      	add	r3, r2
 80075be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80075c2:	65bb      	str	r3, [r7, #88]	; 0x58
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	891b      	ldrh	r3, [r3, #8]
 80075c8:	085b      	lsrs	r3, r3, #1
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	005b      	lsls	r3, r3, #1
 80075ce:	b29a      	uxth	r2, r3
 80075d0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075d2:	801a      	strh	r2, [r3, #0]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	657b      	str	r3, [r7, #84]	; 0x54
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075de:	b29b      	uxth	r3, r3
 80075e0:	461a      	mov	r2, r3
 80075e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075e4:	4413      	add	r3, r2
 80075e6:	657b      	str	r3, [r7, #84]	; 0x54
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	00da      	lsls	r2, r3, #3
 80075ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075f0:	4413      	add	r3, r2
 80075f2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80075f6:	653b      	str	r3, [r7, #80]	; 0x50
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	895b      	ldrh	r3, [r3, #10]
 80075fc:	085b      	lsrs	r3, r3, #1
 80075fe:	b29b      	uxth	r3, r3
 8007600:	005b      	lsls	r3, r3, #1
 8007602:	b29a      	uxth	r2, r3
 8007604:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007606:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	785b      	ldrb	r3, [r3, #1]
 800760c:	2b00      	cmp	r3, #0
 800760e:	f040 8093 	bne.w	8007738 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	881b      	ldrh	r3, [r3, #0]
 800761e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007622:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d01b      	beq.n	8007666 <USB_ActivateEndpoint+0x52a>
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	009b      	lsls	r3, r3, #2
 8007636:	4413      	add	r3, r2
 8007638:	881b      	ldrh	r3, [r3, #0]
 800763a:	b29b      	uxth	r3, r3
 800763c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007644:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007646:	687a      	ldr	r2, [r7, #4]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	009b      	lsls	r3, r3, #2
 800764e:	441a      	add	r2, r3
 8007650:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007652:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007656:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800765a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800765e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007662:	b29b      	uxth	r3, r3
 8007664:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	009b      	lsls	r3, r3, #2
 800766e:	4413      	add	r3, r2
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007674:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800767a:	2b00      	cmp	r3, #0
 800767c:	d01b      	beq.n	80076b6 <USB_ActivateEndpoint+0x57a>
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	009b      	lsls	r3, r3, #2
 8007686:	4413      	add	r3, r2
 8007688:	881b      	ldrh	r3, [r3, #0]
 800768a:	b29b      	uxth	r3, r3
 800768c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007694:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007696:	687a      	ldr	r2, [r7, #4]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	441a      	add	r2, r3
 80076a0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80076a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	881b      	ldrh	r3, [r3, #0]
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80076c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076cc:	873b      	strh	r3, [r7, #56]	; 0x38
 80076ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80076d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80076d4:	873b      	strh	r3, [r7, #56]	; 0x38
 80076d6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80076d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80076dc:	873b      	strh	r3, [r7, #56]	; 0x38
 80076de:	687a      	ldr	r2, [r7, #4]
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	009b      	lsls	r3, r3, #2
 80076e6:	441a      	add	r2, r3
 80076e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80076ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80076fe:	687a      	ldr	r2, [r7, #4]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	009b      	lsls	r3, r3, #2
 8007706:	4413      	add	r3, r2
 8007708:	881b      	ldrh	r3, [r3, #0]
 800770a:	b29b      	uxth	r3, r3
 800770c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007714:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007716:	687a      	ldr	r2, [r7, #4]
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	009b      	lsls	r3, r3, #2
 800771e:	441a      	add	r2, r3
 8007720:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007722:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007726:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800772a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800772e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007732:	b29b      	uxth	r3, r3
 8007734:	8013      	strh	r3, [r2, #0]
 8007736:	e0bc      	b.n	80078b2 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007748:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800774c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d01d      	beq.n	8007790 <USB_ActivateEndpoint+0x654>
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	881b      	ldrh	r3, [r3, #0]
 8007760:	b29b      	uxth	r3, r3
 8007762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007766:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800776a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	441a      	add	r2, r3
 8007778:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800777c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007780:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007784:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007788:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800778c:	b29b      	uxth	r3, r3
 800778e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007790:	687a      	ldr	r2, [r7, #4]
 8007792:	683b      	ldr	r3, [r7, #0]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	881b      	ldrh	r3, [r3, #0]
 800779c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80077a0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80077a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d01d      	beq.n	80077e8 <USB_ActivateEndpoint+0x6ac>
 80077ac:	687a      	ldr	r2, [r7, #4]
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	009b      	lsls	r3, r3, #2
 80077b4:	4413      	add	r3, r2
 80077b6:	881b      	ldrh	r3, [r3, #0]
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	441a      	add	r2, r3
 80077d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80077d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	78db      	ldrb	r3, [r3, #3]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d024      	beq.n	800783a <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007802:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007806:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800780a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800780e:	f083 0320 	eor.w	r3, r3, #32
 8007812:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007816:	687a      	ldr	r2, [r7, #4]
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	009b      	lsls	r3, r3, #2
 800781e:	441a      	add	r2, r3
 8007820:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800782c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007834:	b29b      	uxth	r3, r3
 8007836:	8013      	strh	r3, [r2, #0]
 8007838:	e01d      	b.n	8007876 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	b29b      	uxth	r3, r3
 8007848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800784c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007850:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007854:	687a      	ldr	r2, [r7, #4]
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	441a      	add	r2, r3
 800785e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800786a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800786e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007872:	b29b      	uxth	r3, r3
 8007874:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	881b      	ldrh	r3, [r3, #0]
 8007882:	b29b      	uxth	r3, r3
 8007884:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007888:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800788c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	441a      	add	r2, r3
 800789a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800789e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 80078b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3774      	adds	r7, #116	; 0x74
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
 80078c2:	bf00      	nop

080078c4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b08d      	sub	sp, #52	; 0x34
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	7b1b      	ldrb	r3, [r3, #12]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f040 808e 	bne.w	80079f4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	785b      	ldrb	r3, [r3, #1]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d044      	beq.n	800796a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	4413      	add	r3, r2
 80078ea:	881b      	ldrh	r3, [r3, #0]
 80078ec:	81bb      	strh	r3, [r7, #12]
 80078ee:	89bb      	ldrh	r3, [r7, #12]
 80078f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d01b      	beq.n	8007930 <USB_DeactivateEndpoint+0x6c>
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	683b      	ldr	r3, [r7, #0]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	009b      	lsls	r3, r3, #2
 8007900:	4413      	add	r3, r2
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	b29b      	uxth	r3, r3
 8007906:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800790a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800790e:	817b      	strh	r3, [r7, #10]
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	009b      	lsls	r3, r3, #2
 8007918:	441a      	add	r2, r3
 800791a:	897b      	ldrh	r3, [r7, #10]
 800791c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007920:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007924:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007928:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800792c:	b29b      	uxth	r3, r3
 800792e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007930:	687a      	ldr	r2, [r7, #4]
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4413      	add	r3, r2
 800793a:	881b      	ldrh	r3, [r3, #0]
 800793c:	b29b      	uxth	r3, r3
 800793e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007942:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007946:	813b      	strh	r3, [r7, #8]
 8007948:	687a      	ldr	r2, [r7, #4]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	009b      	lsls	r3, r3, #2
 8007950:	441a      	add	r2, r3
 8007952:	893b      	ldrh	r3, [r7, #8]
 8007954:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007958:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800795c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007964:	b29b      	uxth	r3, r3
 8007966:	8013      	strh	r3, [r2, #0]
 8007968:	e192      	b.n	8007c90 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4413      	add	r3, r2
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	827b      	strh	r3, [r7, #18]
 8007978:	8a7b      	ldrh	r3, [r7, #18]
 800797a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800797e:	2b00      	cmp	r3, #0
 8007980:	d01b      	beq.n	80079ba <USB_DeactivateEndpoint+0xf6>
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	881b      	ldrh	r3, [r3, #0]
 800798e:	b29b      	uxth	r3, r3
 8007990:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007994:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007998:	823b      	strh	r3, [r7, #16]
 800799a:	687a      	ldr	r2, [r7, #4]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	009b      	lsls	r3, r3, #2
 80079a2:	441a      	add	r2, r3
 80079a4:	8a3b      	ldrh	r3, [r7, #16]
 80079a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d0:	81fb      	strh	r3, [r7, #14]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	441a      	add	r2, r3
 80079dc:	89fb      	ldrh	r3, [r7, #14]
 80079de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	8013      	strh	r3, [r2, #0]
 80079f2:	e14d      	b.n	8007c90 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	785b      	ldrb	r3, [r3, #1]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f040 80a5 	bne.w	8007b48 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	881b      	ldrh	r3, [r3, #0]
 8007a0a:	843b      	strh	r3, [r7, #32]
 8007a0c:	8c3b      	ldrh	r3, [r7, #32]
 8007a0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d01b      	beq.n	8007a4e <USB_DeactivateEndpoint+0x18a>
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	009b      	lsls	r3, r3, #2
 8007a1e:	4413      	add	r3, r2
 8007a20:	881b      	ldrh	r3, [r3, #0]
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a2c:	83fb      	strh	r3, [r7, #30]
 8007a2e:	687a      	ldr	r2, [r7, #4]
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	441a      	add	r2, r3
 8007a38:	8bfb      	ldrh	r3, [r7, #30]
 8007a3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a42:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007a4e:	687a      	ldr	r2, [r7, #4]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	009b      	lsls	r3, r3, #2
 8007a56:	4413      	add	r3, r2
 8007a58:	881b      	ldrh	r3, [r3, #0]
 8007a5a:	83bb      	strh	r3, [r7, #28]
 8007a5c:	8bbb      	ldrh	r3, [r7, #28]
 8007a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d01b      	beq.n	8007a9e <USB_DeactivateEndpoint+0x1da>
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	009b      	lsls	r3, r3, #2
 8007a6e:	4413      	add	r3, r2
 8007a70:	881b      	ldrh	r3, [r3, #0]
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a7c:	837b      	strh	r3, [r7, #26]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	781b      	ldrb	r3, [r3, #0]
 8007a84:	009b      	lsls	r3, r3, #2
 8007a86:	441a      	add	r2, r3
 8007a88:	8b7b      	ldrh	r3, [r7, #26]
 8007a8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007a9e:	687a      	ldr	r2, [r7, #4]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	4413      	add	r3, r2
 8007aa8:	881b      	ldrh	r3, [r3, #0]
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ab0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ab4:	833b      	strh	r3, [r7, #24]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	441a      	add	r2, r3
 8007ac0:	8b3b      	ldrh	r3, [r7, #24]
 8007ac2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ac6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ace:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	009b      	lsls	r3, r3, #2
 8007ade:	4413      	add	r3, r2
 8007ae0:	881b      	ldrh	r3, [r3, #0]
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ae8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aec:	82fb      	strh	r3, [r7, #22]
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	441a      	add	r2, r3
 8007af8:	8afb      	ldrh	r3, [r7, #22]
 8007afa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007afe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b0a:	b29b      	uxth	r3, r3
 8007b0c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	4413      	add	r3, r2
 8007b18:	881b      	ldrh	r3, [r3, #0]
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b24:	82bb      	strh	r3, [r7, #20]
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	009b      	lsls	r3, r3, #2
 8007b2e:	441a      	add	r2, r3
 8007b30:	8abb      	ldrh	r3, [r7, #20]
 8007b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b42:	b29b      	uxth	r3, r3
 8007b44:	8013      	strh	r3, [r2, #0]
 8007b46:	e0a3      	b.n	8007c90 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b48:	687a      	ldr	r2, [r7, #4]
 8007b4a:	683b      	ldr	r3, [r7, #0]
 8007b4c:	781b      	ldrb	r3, [r3, #0]
 8007b4e:	009b      	lsls	r3, r3, #2
 8007b50:	4413      	add	r3, r2
 8007b52:	881b      	ldrh	r3, [r3, #0]
 8007b54:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007b56:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007b58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d01b      	beq.n	8007b98 <USB_DeactivateEndpoint+0x2d4>
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	881b      	ldrh	r3, [r3, #0]
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b76:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	441a      	add	r2, r3
 8007b82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b94:	b29b      	uxth	r3, r3
 8007b96:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	009b      	lsls	r3, r3, #2
 8007ba0:	4413      	add	r3, r2
 8007ba2:	881b      	ldrh	r3, [r3, #0]
 8007ba4:	857b      	strh	r3, [r7, #42]	; 0x2a
 8007ba6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d01b      	beq.n	8007be8 <USB_DeactivateEndpoint+0x324>
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	4413      	add	r3, r2
 8007bba:	881b      	ldrh	r3, [r3, #0]
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bc6:	853b      	strh	r3, [r7, #40]	; 0x28
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	009b      	lsls	r3, r3, #2
 8007bd0:	441a      	add	r2, r3
 8007bd2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007bd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007be0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007be8:	687a      	ldr	r2, [r7, #4]
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	781b      	ldrb	r3, [r3, #0]
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	4413      	add	r3, r2
 8007bf2:	881b      	ldrh	r3, [r3, #0]
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bfe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007c00:	687a      	ldr	r2, [r7, #4]
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	441a      	add	r2, r3
 8007c0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c20:	687a      	ldr	r2, [r7, #4]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	009b      	lsls	r3, r3, #2
 8007c28:	4413      	add	r3, r2
 8007c2a:	881b      	ldrh	r3, [r3, #0]
 8007c2c:	b29b      	uxth	r3, r3
 8007c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c36:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007c38:	687a      	ldr	r2, [r7, #4]
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	781b      	ldrb	r3, [r3, #0]
 8007c3e:	009b      	lsls	r3, r3, #2
 8007c40:	441a      	add	r2, r3
 8007c42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007c44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c54:	b29b      	uxth	r3, r3
 8007c56:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	781b      	ldrb	r3, [r3, #0]
 8007c5e:	009b      	lsls	r3, r3, #2
 8007c60:	4413      	add	r3, r2
 8007c62:	881b      	ldrh	r3, [r3, #0]
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c6e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	441a      	add	r2, r3
 8007c7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007c7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3734      	adds	r7, #52	; 0x34
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b0c2      	sub	sp, #264	; 0x108
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ca8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007cac:	6018      	str	r0, [r3, #0]
 8007cae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cb6:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007cb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	785b      	ldrb	r3, [r3, #1]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	f040 86b7 	bne.w	8008a38 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007cca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	699a      	ldr	r2, [r3, #24]
 8007cd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d908      	bls.n	8007cf8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8007ce6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007cf6:	e007      	b.n	8007d08 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8007cf8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007cfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	699b      	ldr	r3, [r3, #24]
 8007d04:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8007d08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	7b1b      	ldrb	r3, [r3, #12]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d13a      	bne.n	8007d8e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8007d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	6959      	ldr	r1, [r3, #20]
 8007d24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	88da      	ldrh	r2, [r3, #6]
 8007d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d34:	b29b      	uxth	r3, r3
 8007d36:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007d3a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007d3e:	6800      	ldr	r0, [r0, #0]
 8007d40:	f001 fc8c 	bl	800965c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8007d44:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d48:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	613b      	str	r3, [r7, #16]
 8007d50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	461a      	mov	r2, r3
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	4413      	add	r3, r2
 8007d66:	613b      	str	r3, [r7, #16]
 8007d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	00da      	lsls	r2, r3, #3
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	4413      	add	r3, r2
 8007d7a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	801a      	strh	r2, [r3, #0]
 8007d8a:	f000 be1f 	b.w	80089cc <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007d8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007d92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	78db      	ldrb	r3, [r3, #3]
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	f040 8462 	bne.w	8008664 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007da0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007da4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6a1a      	ldr	r2, [r3, #32]
 8007dac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007db0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	691b      	ldr	r3, [r3, #16]
 8007db8:	429a      	cmp	r2, r3
 8007dba:	f240 83df 	bls.w	800857c <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dcc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4413      	add	r3, r2
 8007dd8:	881b      	ldrh	r3, [r3, #0]
 8007dda:	b29b      	uxth	r3, r3
 8007ddc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007de4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8007de8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007dec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007df6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	441a      	add	r2, r3
 8007e02:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007e06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e0e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007e12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007e1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	6a1a      	ldr	r2, [r3, #32]
 8007e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007e2a:	1ad2      	subs	r2, r2, r3
 8007e2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007e38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	881b      	ldrh	r3, [r3, #0]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f000 81c7 	beq.w	80081ee <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007e60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e64:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	633b      	str	r3, [r7, #48]	; 0x30
 8007e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	785b      	ldrb	r3, [r3, #1]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d177      	bne.n	8007f6c <USB_EPStartXfer+0x2ce>
 8007e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	62bb      	str	r3, [r7, #40]	; 0x28
 8007e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007e8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	461a      	mov	r2, r3
 8007e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e9c:	4413      	add	r3, r2
 8007e9e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ea0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ea4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	781b      	ldrb	r3, [r3, #0]
 8007eac:	00da      	lsls	r2, r3, #3
 8007eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	881b      	ldrh	r3, [r3, #0]
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec6:	801a      	strh	r2, [r3, #0]
 8007ec8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ecc:	2b3e      	cmp	r3, #62	; 0x3e
 8007ece:	d921      	bls.n	8007f14 <USB_EPStartXfer+0x276>
 8007ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ed4:	095b      	lsrs	r3, r3, #5
 8007ed6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007eda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ede:	f003 031f 	and.w	r3, r3, #31
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d104      	bne.n	8007ef0 <USB_EPStartXfer+0x252>
 8007ee6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007eea:	3b01      	subs	r3, #1
 8007eec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	881b      	ldrh	r3, [r3, #0]
 8007ef4:	b29a      	uxth	r2, r3
 8007ef6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	029b      	lsls	r3, r3, #10
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	4313      	orrs	r3, r2
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f0c:	b29a      	uxth	r2, r3
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	801a      	strh	r2, [r3, #0]
 8007f12:	e050      	b.n	8007fb6 <USB_EPStartXfer+0x318>
 8007f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10a      	bne.n	8007f32 <USB_EPStartXfer+0x294>
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	b29b      	uxth	r3, r3
 8007f22:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f26:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f2a:	b29a      	uxth	r2, r3
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	801a      	strh	r2, [r3, #0]
 8007f30:	e041      	b.n	8007fb6 <USB_EPStartXfer+0x318>
 8007f32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f36:	085b      	lsrs	r3, r3, #1
 8007f38:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d004      	beq.n	8007f52 <USB_EPStartXfer+0x2b4>
 8007f48:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f54:	881b      	ldrh	r3, [r3, #0]
 8007f56:	b29a      	uxth	r2, r3
 8007f58:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8007f5c:	b29b      	uxth	r3, r3
 8007f5e:	029b      	lsls	r3, r3, #10
 8007f60:	b29b      	uxth	r3, r3
 8007f62:	4313      	orrs	r3, r2
 8007f64:	b29a      	uxth	r2, r3
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	801a      	strh	r2, [r3, #0]
 8007f6a:	e024      	b.n	8007fb6 <USB_EPStartXfer+0x318>
 8007f6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	785b      	ldrb	r3, [r3, #1]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d11c      	bne.n	8007fb6 <USB_EPStartXfer+0x318>
 8007f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	4413      	add	r3, r2
 8007f92:	633b      	str	r3, [r7, #48]	; 0x30
 8007f94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007f98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	00da      	lsls	r2, r3, #3
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007fb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	895b      	ldrh	r3, [r3, #10]
 8007fc2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007fc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	6959      	ldr	r1, [r3, #20]
 8007fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007fdc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007fe0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8007fe4:	6800      	ldr	r0, [r0, #0]
 8007fe6:	f001 fb39 	bl	800965c <USB_WritePMA>
            ep->xfer_buff += len;
 8007fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007fee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	695a      	ldr	r2, [r3, #20]
 8007ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ffa:	441a      	add	r2, r3
 8007ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800800c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	6a1a      	ldr	r2, [r3, #32]
 8008014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	691b      	ldr	r3, [r3, #16]
 8008020:	429a      	cmp	r2, r3
 8008022:	d90f      	bls.n	8008044 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	6a1a      	ldr	r2, [r3, #32]
 8008030:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008034:	1ad2      	subs	r2, r2, r3
 8008036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800803a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	621a      	str	r2, [r3, #32]
 8008042:	e00e      	b.n	8008062 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008044:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008048:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	6a1b      	ldr	r3, [r3, #32]
 8008050:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008054:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008058:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	2200      	movs	r2, #0
 8008060:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008062:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008066:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	785b      	ldrb	r3, [r3, #1]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d177      	bne.n	8008162 <USB_EPStartXfer+0x4c4>
 8008072:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008076:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	61bb      	str	r3, [r7, #24]
 800807e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008082:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800808c:	b29b      	uxth	r3, r3
 800808e:	461a      	mov	r2, r3
 8008090:	69bb      	ldr	r3, [r7, #24]
 8008092:	4413      	add	r3, r2
 8008094:	61bb      	str	r3, [r7, #24]
 8008096:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800809a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	00da      	lsls	r2, r3, #3
 80080a4:	69bb      	ldr	r3, [r7, #24]
 80080a6:	4413      	add	r3, r2
 80080a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80080ac:	617b      	str	r3, [r7, #20]
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	881b      	ldrh	r3, [r3, #0]
 80080b2:	b29b      	uxth	r3, r3
 80080b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	801a      	strh	r2, [r3, #0]
 80080be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080c2:	2b3e      	cmp	r3, #62	; 0x3e
 80080c4:	d921      	bls.n	800810a <USB_EPStartXfer+0x46c>
 80080c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080ca:	095b      	lsrs	r3, r3, #5
 80080cc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80080d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80080d4:	f003 031f 	and.w	r3, r3, #31
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d104      	bne.n	80080e6 <USB_EPStartXfer+0x448>
 80080dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080e0:	3b01      	subs	r3, #1
 80080e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	881b      	ldrh	r3, [r3, #0]
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	029b      	lsls	r3, r3, #10
 80080f4:	b29b      	uxth	r3, r3
 80080f6:	4313      	orrs	r3, r2
 80080f8:	b29b      	uxth	r3, r3
 80080fa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80080fe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008102:	b29a      	uxth	r2, r3
 8008104:	697b      	ldr	r3, [r7, #20]
 8008106:	801a      	strh	r2, [r3, #0]
 8008108:	e056      	b.n	80081b8 <USB_EPStartXfer+0x51a>
 800810a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800810e:	2b00      	cmp	r3, #0
 8008110:	d10a      	bne.n	8008128 <USB_EPStartXfer+0x48a>
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	881b      	ldrh	r3, [r3, #0]
 8008116:	b29b      	uxth	r3, r3
 8008118:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800811c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008120:	b29a      	uxth	r2, r3
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	801a      	strh	r2, [r3, #0]
 8008126:	e047      	b.n	80081b8 <USB_EPStartXfer+0x51a>
 8008128:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800812c:	085b      	lsrs	r3, r3, #1
 800812e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b00      	cmp	r3, #0
 800813c:	d004      	beq.n	8008148 <USB_EPStartXfer+0x4aa>
 800813e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008142:	3301      	adds	r3, #1
 8008144:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	881b      	ldrh	r3, [r3, #0]
 800814c:	b29a      	uxth	r2, r3
 800814e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008152:	b29b      	uxth	r3, r3
 8008154:	029b      	lsls	r3, r3, #10
 8008156:	b29b      	uxth	r3, r3
 8008158:	4313      	orrs	r3, r2
 800815a:	b29a      	uxth	r2, r3
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	801a      	strh	r2, [r3, #0]
 8008160:	e02a      	b.n	80081b8 <USB_EPStartXfer+0x51a>
 8008162:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008166:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	785b      	ldrb	r3, [r3, #1]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d122      	bne.n	80081b8 <USB_EPStartXfer+0x51a>
 8008172:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008176:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	623b      	str	r3, [r7, #32]
 800817e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800818c:	b29b      	uxth	r3, r3
 800818e:	461a      	mov	r2, r3
 8008190:	6a3b      	ldr	r3, [r7, #32]
 8008192:	4413      	add	r3, r2
 8008194:	623b      	str	r3, [r7, #32]
 8008196:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800819a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	00da      	lsls	r2, r3, #3
 80081a4:	6a3b      	ldr	r3, [r7, #32]
 80081a6:	4413      	add	r3, r2
 80081a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80081ac:	61fb      	str	r3, [r7, #28]
 80081ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	69fb      	ldr	r3, [r7, #28]
 80081b6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80081b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	891b      	ldrh	r3, [r3, #8]
 80081c4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	6959      	ldr	r1, [r3, #20]
 80081d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80081d8:	b29b      	uxth	r3, r3
 80081da:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80081de:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80081e2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80081e6:	6800      	ldr	r0, [r0, #0]
 80081e8:	f001 fa38 	bl	800965c <USB_WritePMA>
 80081ec:	e3ee      	b.n	80089cc <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80081ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	785b      	ldrb	r3, [r3, #1]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d177      	bne.n	80082ee <USB_EPStartXfer+0x650>
 80081fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008202:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	64bb      	str	r3, [r7, #72]	; 0x48
 800820a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800820e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008218:	b29b      	uxth	r3, r3
 800821a:	461a      	mov	r2, r3
 800821c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800821e:	4413      	add	r3, r2
 8008220:	64bb      	str	r3, [r7, #72]	; 0x48
 8008222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	00da      	lsls	r2, r3, #3
 8008230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008232:	4413      	add	r3, r2
 8008234:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008238:	647b      	str	r3, [r7, #68]	; 0x44
 800823a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800823c:	881b      	ldrh	r3, [r3, #0]
 800823e:	b29b      	uxth	r3, r3
 8008240:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008244:	b29a      	uxth	r2, r3
 8008246:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008248:	801a      	strh	r2, [r3, #0]
 800824a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800824e:	2b3e      	cmp	r3, #62	; 0x3e
 8008250:	d921      	bls.n	8008296 <USB_EPStartXfer+0x5f8>
 8008252:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008256:	095b      	lsrs	r3, r3, #5
 8008258:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800825c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008260:	f003 031f 	and.w	r3, r3, #31
 8008264:	2b00      	cmp	r3, #0
 8008266:	d104      	bne.n	8008272 <USB_EPStartXfer+0x5d4>
 8008268:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800826c:	3b01      	subs	r3, #1
 800826e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008272:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008274:	881b      	ldrh	r3, [r3, #0]
 8008276:	b29a      	uxth	r2, r3
 8008278:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800827c:	b29b      	uxth	r3, r3
 800827e:	029b      	lsls	r3, r3, #10
 8008280:	b29b      	uxth	r3, r3
 8008282:	4313      	orrs	r3, r2
 8008284:	b29b      	uxth	r3, r3
 8008286:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800828a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800828e:	b29a      	uxth	r2, r3
 8008290:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008292:	801a      	strh	r2, [r3, #0]
 8008294:	e056      	b.n	8008344 <USB_EPStartXfer+0x6a6>
 8008296:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800829a:	2b00      	cmp	r3, #0
 800829c:	d10a      	bne.n	80082b4 <USB_EPStartXfer+0x616>
 800829e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082a0:	881b      	ldrh	r3, [r3, #0]
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80082a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80082ac:	b29a      	uxth	r2, r3
 80082ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082b0:	801a      	strh	r2, [r3, #0]
 80082b2:	e047      	b.n	8008344 <USB_EPStartXfer+0x6a6>
 80082b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082b8:	085b      	lsrs	r3, r3, #1
 80082ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80082be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80082c2:	f003 0301 	and.w	r3, r3, #1
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d004      	beq.n	80082d4 <USB_EPStartXfer+0x636>
 80082ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80082ce:	3301      	adds	r3, #1
 80082d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80082d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	b29a      	uxth	r2, r3
 80082da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80082de:	b29b      	uxth	r3, r3
 80082e0:	029b      	lsls	r3, r3, #10
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	4313      	orrs	r3, r2
 80082e6:	b29a      	uxth	r2, r3
 80082e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082ea:	801a      	strh	r2, [r3, #0]
 80082ec:	e02a      	b.n	8008344 <USB_EPStartXfer+0x6a6>
 80082ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	785b      	ldrb	r3, [r3, #1]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d122      	bne.n	8008344 <USB_EPStartXfer+0x6a6>
 80082fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008302:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	653b      	str	r3, [r7, #80]	; 0x50
 800830a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800830e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008318:	b29b      	uxth	r3, r3
 800831a:	461a      	mov	r2, r3
 800831c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800831e:	4413      	add	r3, r2
 8008320:	653b      	str	r3, [r7, #80]	; 0x50
 8008322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	00da      	lsls	r2, r3, #3
 8008330:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008332:	4413      	add	r3, r2
 8008334:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008338:	64fb      	str	r3, [r7, #76]	; 0x4c
 800833a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800833e:	b29a      	uxth	r2, r3
 8008340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008342:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	891b      	ldrh	r3, [r3, #8]
 8008350:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	6959      	ldr	r1, [r3, #20]
 8008360:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008364:	b29b      	uxth	r3, r3
 8008366:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800836a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800836e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008372:	6800      	ldr	r0, [r0, #0]
 8008374:	f001 f972 	bl	800965c <USB_WritePMA>
            ep->xfer_buff += len;
 8008378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800837c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	695a      	ldr	r2, [r3, #20]
 8008384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008388:	441a      	add	r2, r3
 800838a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800838e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800839a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	6a1a      	ldr	r2, [r3, #32]
 80083a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	691b      	ldr	r3, [r3, #16]
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d90f      	bls.n	80083d2 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80083b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	6a1a      	ldr	r2, [r3, #32]
 80083be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083c2:	1ad2      	subs	r2, r2, r3
 80083c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	621a      	str	r2, [r3, #32]
 80083d0:	e00e      	b.n	80083f0 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80083d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	6a1b      	ldr	r3, [r3, #32]
 80083de:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80083e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	2200      	movs	r2, #0
 80083ee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80083f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	643b      	str	r3, [r7, #64]	; 0x40
 80083fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008400:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	785b      	ldrb	r3, [r3, #1]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d177      	bne.n	80084fc <USB_EPStartXfer+0x85e>
 800840c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008410:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	63bb      	str	r3, [r7, #56]	; 0x38
 8008418:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800841c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008426:	b29b      	uxth	r3, r3
 8008428:	461a      	mov	r2, r3
 800842a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842c:	4413      	add	r3, r2
 800842e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008430:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008434:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	00da      	lsls	r2, r3, #3
 800843e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008440:	4413      	add	r3, r2
 8008442:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008446:	637b      	str	r3, [r7, #52]	; 0x34
 8008448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800844a:	881b      	ldrh	r3, [r3, #0]
 800844c:	b29b      	uxth	r3, r3
 800844e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008452:	b29a      	uxth	r2, r3
 8008454:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008456:	801a      	strh	r2, [r3, #0]
 8008458:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800845c:	2b3e      	cmp	r3, #62	; 0x3e
 800845e:	d921      	bls.n	80084a4 <USB_EPStartXfer+0x806>
 8008460:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008464:	095b      	lsrs	r3, r3, #5
 8008466:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800846a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800846e:	f003 031f 	and.w	r3, r3, #31
 8008472:	2b00      	cmp	r3, #0
 8008474:	d104      	bne.n	8008480 <USB_EPStartXfer+0x7e2>
 8008476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800847a:	3b01      	subs	r3, #1
 800847c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008482:	881b      	ldrh	r3, [r3, #0]
 8008484:	b29a      	uxth	r2, r3
 8008486:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800848a:	b29b      	uxth	r3, r3
 800848c:	029b      	lsls	r3, r3, #10
 800848e:	b29b      	uxth	r3, r3
 8008490:	4313      	orrs	r3, r2
 8008492:	b29b      	uxth	r3, r3
 8008494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800849c:	b29a      	uxth	r2, r3
 800849e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084a0:	801a      	strh	r2, [r3, #0]
 80084a2:	e050      	b.n	8008546 <USB_EPStartXfer+0x8a8>
 80084a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10a      	bne.n	80084c2 <USB_EPStartXfer+0x824>
 80084ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ae:	881b      	ldrh	r3, [r3, #0]
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80084b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80084ba:	b29a      	uxth	r2, r3
 80084bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084be:	801a      	strh	r2, [r3, #0]
 80084c0:	e041      	b.n	8008546 <USB_EPStartXfer+0x8a8>
 80084c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084c6:	085b      	lsrs	r3, r3, #1
 80084c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80084cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084d0:	f003 0301 	and.w	r3, r3, #1
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d004      	beq.n	80084e2 <USB_EPStartXfer+0x844>
 80084d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084dc:	3301      	adds	r3, #1
 80084de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80084e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e4:	881b      	ldrh	r3, [r3, #0]
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ec:	b29b      	uxth	r3, r3
 80084ee:	029b      	lsls	r3, r3, #10
 80084f0:	b29b      	uxth	r3, r3
 80084f2:	4313      	orrs	r3, r2
 80084f4:	b29a      	uxth	r2, r3
 80084f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084f8:	801a      	strh	r2, [r3, #0]
 80084fa:	e024      	b.n	8008546 <USB_EPStartXfer+0x8a8>
 80084fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008500:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	785b      	ldrb	r3, [r3, #1]
 8008508:	2b01      	cmp	r3, #1
 800850a:	d11c      	bne.n	8008546 <USB_EPStartXfer+0x8a8>
 800850c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008510:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800851a:	b29b      	uxth	r3, r3
 800851c:	461a      	mov	r2, r3
 800851e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008520:	4413      	add	r3, r2
 8008522:	643b      	str	r3, [r7, #64]	; 0x40
 8008524:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008528:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	00da      	lsls	r2, r3, #3
 8008532:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008534:	4413      	add	r3, r2
 8008536:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800853a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800853c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008540:	b29a      	uxth	r2, r3
 8008542:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008544:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008546:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800854a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	895b      	ldrh	r3, [r3, #10]
 8008552:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008556:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800855a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6959      	ldr	r1, [r3, #20]
 8008562:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008566:	b29b      	uxth	r3, r3
 8008568:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800856c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008570:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008574:	6800      	ldr	r0, [r0, #0]
 8008576:	f001 f871 	bl	800965c <USB_WritePMA>
 800857a:	e227      	b.n	80089cc <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800857c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	6a1b      	ldr	r3, [r3, #32]
 8008588:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800858c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008590:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008594:	681a      	ldr	r2, [r3, #0]
 8008596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800859a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 80085ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085b2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80085b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085be:	681a      	ldr	r2, [r3, #0]
 80085c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	009b      	lsls	r3, r3, #2
 80085ce:	441a      	add	r2, r3
 80085d0:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80085d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80085e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085e4:	b29b      	uxth	r3, r3
 80085e6:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80085e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008602:	b29b      	uxth	r3, r3
 8008604:	461a      	mov	r2, r3
 8008606:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008608:	4413      	add	r3, r2
 800860a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800860c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008610:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	00da      	lsls	r2, r3, #3
 800861a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800861c:	4413      	add	r3, r2
 800861e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008622:	65bb      	str	r3, [r7, #88]	; 0x58
 8008624:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008628:	b29a      	uxth	r2, r3
 800862a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800862c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800862e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008632:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	891b      	ldrh	r3, [r3, #8]
 800863a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800863e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	6959      	ldr	r1, [r3, #20]
 800864a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800864e:	b29b      	uxth	r3, r3
 8008650:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008654:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008658:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800865c:	6800      	ldr	r0, [r0, #0]
 800865e:	f000 fffd 	bl	800965c <USB_WritePMA>
 8008662:	e1b3      	b.n	80089cc <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008668:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	6a1a      	ldr	r2, [r3, #32]
 8008670:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008674:	1ad2      	subs	r2, r2, r3
 8008676:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800867a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008686:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	781b      	ldrb	r3, [r3, #0]
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	881b      	ldrh	r3, [r3, #0]
 800869e:	b29b      	uxth	r3, r3
 80086a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 80c6 	beq.w	8008836 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80086aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	673b      	str	r3, [r7, #112]	; 0x70
 80086b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	785b      	ldrb	r3, [r3, #1]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d177      	bne.n	80087b6 <USB_EPStartXfer+0xb18>
 80086c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80086d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086e0:	b29b      	uxth	r3, r3
 80086e2:	461a      	mov	r2, r3
 80086e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086e6:	4413      	add	r3, r2
 80086e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80086ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	781b      	ldrb	r3, [r3, #0]
 80086f6:	00da      	lsls	r2, r3, #3
 80086f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086fa:	4413      	add	r3, r2
 80086fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008700:	667b      	str	r3, [r7, #100]	; 0x64
 8008702:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008704:	881b      	ldrh	r3, [r3, #0]
 8008706:	b29b      	uxth	r3, r3
 8008708:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800870c:	b29a      	uxth	r2, r3
 800870e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008710:	801a      	strh	r2, [r3, #0]
 8008712:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008716:	2b3e      	cmp	r3, #62	; 0x3e
 8008718:	d921      	bls.n	800875e <USB_EPStartXfer+0xac0>
 800871a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800871e:	095b      	lsrs	r3, r3, #5
 8008720:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008724:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008728:	f003 031f 	and.w	r3, r3, #31
 800872c:	2b00      	cmp	r3, #0
 800872e:	d104      	bne.n	800873a <USB_EPStartXfer+0xa9c>
 8008730:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008734:	3b01      	subs	r3, #1
 8008736:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800873a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800873c:	881b      	ldrh	r3, [r3, #0]
 800873e:	b29a      	uxth	r2, r3
 8008740:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008744:	b29b      	uxth	r3, r3
 8008746:	029b      	lsls	r3, r3, #10
 8008748:	b29b      	uxth	r3, r3
 800874a:	4313      	orrs	r3, r2
 800874c:	b29b      	uxth	r3, r3
 800874e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008756:	b29a      	uxth	r2, r3
 8008758:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800875a:	801a      	strh	r2, [r3, #0]
 800875c:	e050      	b.n	8008800 <USB_EPStartXfer+0xb62>
 800875e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008762:	2b00      	cmp	r3, #0
 8008764:	d10a      	bne.n	800877c <USB_EPStartXfer+0xade>
 8008766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008768:	881b      	ldrh	r3, [r3, #0]
 800876a:	b29b      	uxth	r3, r3
 800876c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008770:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008774:	b29a      	uxth	r2, r3
 8008776:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008778:	801a      	strh	r2, [r3, #0]
 800877a:	e041      	b.n	8008800 <USB_EPStartXfer+0xb62>
 800877c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008780:	085b      	lsrs	r3, r3, #1
 8008782:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008786:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	2b00      	cmp	r3, #0
 8008790:	d004      	beq.n	800879c <USB_EPStartXfer+0xafe>
 8008792:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008796:	3301      	adds	r3, #1
 8008798:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800879c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	b29a      	uxth	r2, r3
 80087a2:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	029b      	lsls	r3, r3, #10
 80087aa:	b29b      	uxth	r3, r3
 80087ac:	4313      	orrs	r3, r2
 80087ae:	b29a      	uxth	r2, r3
 80087b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087b2:	801a      	strh	r2, [r3, #0]
 80087b4:	e024      	b.n	8008800 <USB_EPStartXfer+0xb62>
 80087b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	785b      	ldrb	r3, [r3, #1]
 80087c2:	2b01      	cmp	r3, #1
 80087c4:	d11c      	bne.n	8008800 <USB_EPStartXfer+0xb62>
 80087c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087ca:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087d4:	b29b      	uxth	r3, r3
 80087d6:	461a      	mov	r2, r3
 80087d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087da:	4413      	add	r3, r2
 80087dc:	673b      	str	r3, [r7, #112]	; 0x70
 80087de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80087e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	781b      	ldrb	r3, [r3, #0]
 80087ea:	00da      	lsls	r2, r3, #3
 80087ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087ee:	4413      	add	r3, r2
 80087f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80087f4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087fe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	895b      	ldrh	r3, [r3, #10]
 800880c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008810:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008814:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6959      	ldr	r1, [r3, #20]
 800881c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008820:	b29b      	uxth	r3, r3
 8008822:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008826:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800882a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800882e:	6800      	ldr	r0, [r0, #0]
 8008830:	f000 ff14 	bl	800965c <USB_WritePMA>
 8008834:	e0ca      	b.n	80089cc <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008836:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800883a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	785b      	ldrb	r3, [r3, #1]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d177      	bne.n	8008936 <USB_EPStartXfer+0xc98>
 8008846:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800884a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008852:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008856:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008860:	b29b      	uxth	r3, r3
 8008862:	461a      	mov	r2, r3
 8008864:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008866:	4413      	add	r3, r2
 8008868:	67fb      	str	r3, [r7, #124]	; 0x7c
 800886a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800886e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	00da      	lsls	r2, r3, #3
 8008878:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800887a:	4413      	add	r3, r2
 800887c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008880:	67bb      	str	r3, [r7, #120]	; 0x78
 8008882:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008884:	881b      	ldrh	r3, [r3, #0]
 8008886:	b29b      	uxth	r3, r3
 8008888:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800888c:	b29a      	uxth	r2, r3
 800888e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008890:	801a      	strh	r2, [r3, #0]
 8008892:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008896:	2b3e      	cmp	r3, #62	; 0x3e
 8008898:	d921      	bls.n	80088de <USB_EPStartXfer+0xc40>
 800889a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800889e:	095b      	lsrs	r3, r3, #5
 80088a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80088a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088a8:	f003 031f 	and.w	r3, r3, #31
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d104      	bne.n	80088ba <USB_EPStartXfer+0xc1c>
 80088b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088b4:	3b01      	subs	r3, #1
 80088b6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80088ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088bc:	881b      	ldrh	r3, [r3, #0]
 80088be:	b29a      	uxth	r2, r3
 80088c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	029b      	lsls	r3, r3, #10
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	4313      	orrs	r3, r2
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088d6:	b29a      	uxth	r2, r3
 80088d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088da:	801a      	strh	r2, [r3, #0]
 80088dc:	e05c      	b.n	8008998 <USB_EPStartXfer+0xcfa>
 80088de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d10a      	bne.n	80088fc <USB_EPStartXfer+0xc5e>
 80088e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088e8:	881b      	ldrh	r3, [r3, #0]
 80088ea:	b29b      	uxth	r3, r3
 80088ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80088f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80088f4:	b29a      	uxth	r2, r3
 80088f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088f8:	801a      	strh	r2, [r3, #0]
 80088fa:	e04d      	b.n	8008998 <USB_EPStartXfer+0xcfa>
 80088fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008900:	085b      	lsrs	r3, r3, #1
 8008902:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800890a:	f003 0301 	and.w	r3, r3, #1
 800890e:	2b00      	cmp	r3, #0
 8008910:	d004      	beq.n	800891c <USB_EPStartXfer+0xc7e>
 8008912:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008916:	3301      	adds	r3, #1
 8008918:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800891c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800891e:	881b      	ldrh	r3, [r3, #0]
 8008920:	b29a      	uxth	r2, r3
 8008922:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008926:	b29b      	uxth	r3, r3
 8008928:	029b      	lsls	r3, r3, #10
 800892a:	b29b      	uxth	r3, r3
 800892c:	4313      	orrs	r3, r2
 800892e:	b29a      	uxth	r2, r3
 8008930:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008932:	801a      	strh	r2, [r3, #0]
 8008934:	e030      	b.n	8008998 <USB_EPStartXfer+0xcfa>
 8008936:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800893a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	785b      	ldrb	r3, [r3, #1]
 8008942:	2b01      	cmp	r3, #1
 8008944:	d128      	bne.n	8008998 <USB_EPStartXfer+0xcfa>
 8008946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800894a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008954:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008958:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008962:	b29b      	uxth	r3, r3
 8008964:	461a      	mov	r2, r3
 8008966:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800896a:	4413      	add	r3, r2
 800896c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008970:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008974:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	781b      	ldrb	r3, [r3, #0]
 800897c:	00da      	lsls	r2, r3, #3
 800897e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008982:	4413      	add	r3, r2
 8008984:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008988:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800898c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008990:	b29a      	uxth	r2, r3
 8008992:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008996:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800899c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	891b      	ldrh	r3, [r3, #8]
 80089a4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80089a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	6959      	ldr	r1, [r3, #20]
 80089b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80089be:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80089c2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80089c6:	6800      	ldr	r0, [r0, #0]
 80089c8:	f000 fe48 	bl	800965c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80089cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	881b      	ldrh	r3, [r3, #0]
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089f2:	817b      	strh	r3, [r7, #10]
 80089f4:	897b      	ldrh	r3, [r7, #10]
 80089f6:	f083 0310 	eor.w	r3, r3, #16
 80089fa:	817b      	strh	r3, [r7, #10]
 80089fc:	897b      	ldrh	r3, [r7, #10]
 80089fe:	f083 0320 	eor.w	r3, r3, #32
 8008a02:	817b      	strh	r3, [r7, #10]
 8008a04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a08:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	441a      	add	r2, r3
 8008a1e:	897b      	ldrh	r3, [r7, #10]
 8008a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	8013      	strh	r3, [r2, #0]
 8008a34:	f000 bcde 	b.w	80093f4 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008a38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	7b1b      	ldrb	r3, [r3, #12]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	f040 80bb 	bne.w	8008bc0 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	699a      	ldr	r2, [r3, #24]
 8008a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d917      	bls.n	8008a96 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	691b      	ldr	r3, [r3, #16]
 8008a72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	699a      	ldr	r2, [r3, #24]
 8008a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a86:	1ad2      	subs	r2, r2, r3
 8008a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	619a      	str	r2, [r3, #24]
 8008a94:	e00e      	b.n	8008ab4 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008aa6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008ab4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ab8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ac2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ac6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ad8:	4413      	add	r3, r2
 8008ada:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ade:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ae2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	00da      	lsls	r2, r3, #3
 8008aec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008af0:	4413      	add	r3, r2
 8008af2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008af6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008afe:	881b      	ldrh	r3, [r3, #0]
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b0c:	801a      	strh	r2, [r3, #0]
 8008b0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b12:	2b3e      	cmp	r3, #62	; 0x3e
 8008b14:	d924      	bls.n	8008b60 <USB_EPStartXfer+0xec2>
 8008b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b1a:	095b      	lsrs	r3, r3, #5
 8008b1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b24:	f003 031f 	and.w	r3, r3, #31
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d104      	bne.n	8008b36 <USB_EPStartXfer+0xe98>
 8008b2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008b30:	3b01      	subs	r3, #1
 8008b32:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b36:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b3a:	881b      	ldrh	r3, [r3, #0]
 8008b3c:	b29a      	uxth	r2, r3
 8008b3e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	029b      	lsls	r3, r3, #10
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b50:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b54:	b29a      	uxth	r2, r3
 8008b56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b5a:	801a      	strh	r2, [r3, #0]
 8008b5c:	f000 bc10 	b.w	8009380 <USB_EPStartXfer+0x16e2>
 8008b60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d10c      	bne.n	8008b82 <USB_EPStartXfer+0xee4>
 8008b68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b6c:	881b      	ldrh	r3, [r3, #0]
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b78:	b29a      	uxth	r2, r3
 8008b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b7e:	801a      	strh	r2, [r3, #0]
 8008b80:	e3fe      	b.n	8009380 <USB_EPStartXfer+0x16e2>
 8008b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b86:	085b      	lsrs	r3, r3, #1
 8008b88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b90:	f003 0301 	and.w	r3, r3, #1
 8008b94:	2b00      	cmp	r3, #0
 8008b96:	d004      	beq.n	8008ba2 <USB_EPStartXfer+0xf04>
 8008b98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008b9c:	3301      	adds	r3, #1
 8008b9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ba2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008ba6:	881b      	ldrh	r3, [r3, #0]
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008bae:	b29b      	uxth	r3, r3
 8008bb0:	029b      	lsls	r3, r3, #10
 8008bb2:	b29b      	uxth	r3, r3
 8008bb4:	4313      	orrs	r3, r2
 8008bb6:	b29a      	uxth	r2, r3
 8008bb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008bbc:	801a      	strh	r2, [r3, #0]
 8008bbe:	e3df      	b.n	8009380 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	78db      	ldrb	r3, [r3, #3]
 8008bcc:	2b02      	cmp	r3, #2
 8008bce:	f040 8218 	bne.w	8009002 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008bd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	785b      	ldrb	r3, [r3, #1]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	f040 809d 	bne.w	8008d1e <USB_EPStartXfer+0x1080>
 8008be4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008be8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008bf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bf6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	461a      	mov	r2, r3
 8008c04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c08:	4413      	add	r3, r2
 8008c0a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	781b      	ldrb	r3, [r3, #0]
 8008c1a:	00da      	lsls	r2, r3, #3
 8008c1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008c20:	4413      	add	r3, r2
 8008c22:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008c26:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008c2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c2e:	881b      	ldrh	r3, [r3, #0]
 8008c30:	b29b      	uxth	r3, r3
 8008c32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c36:	b29a      	uxth	r2, r3
 8008c38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c3c:	801a      	strh	r2, [r3, #0]
 8008c3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	2b3e      	cmp	r3, #62	; 0x3e
 8008c4c:	d92b      	bls.n	8008ca6 <USB_EPStartXfer+0x1008>
 8008c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	691b      	ldr	r3, [r3, #16]
 8008c5a:	095b      	lsrs	r3, r3, #5
 8008c5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	f003 031f 	and.w	r3, r3, #31
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d104      	bne.n	8008c7e <USB_EPStartXfer+0xfe0>
 8008c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c78:	3b01      	subs	r3, #1
 8008c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008c7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008c82:	881b      	ldrh	r3, [r3, #0]
 8008c84:	b29a      	uxth	r2, r3
 8008c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	029b      	lsls	r3, r3, #10
 8008c8e:	b29b      	uxth	r3, r3
 8008c90:	4313      	orrs	r3, r2
 8008c92:	b29b      	uxth	r3, r3
 8008c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c9c:	b29a      	uxth	r2, r3
 8008c9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ca2:	801a      	strh	r2, [r3, #0]
 8008ca4:	e070      	b.n	8008d88 <USB_EPStartXfer+0x10ea>
 8008ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	691b      	ldr	r3, [r3, #16]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d10c      	bne.n	8008cd0 <USB_EPStartXfer+0x1032>
 8008cb6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008cba:	881b      	ldrh	r3, [r3, #0]
 8008cbc:	b29b      	uxth	r3, r3
 8008cbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008ccc:	801a      	strh	r2, [r3, #0]
 8008cce:	e05b      	b.n	8008d88 <USB_EPStartXfer+0x10ea>
 8008cd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	691b      	ldr	r3, [r3, #16]
 8008cdc:	085b      	lsrs	r3, r3, #1
 8008cde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	691b      	ldr	r3, [r3, #16]
 8008cee:	f003 0301 	and.w	r3, r3, #1
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d004      	beq.n	8008d00 <USB_EPStartXfer+0x1062>
 8008cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cfa:	3301      	adds	r3, #1
 8008cfc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008d00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d04:	881b      	ldrh	r3, [r3, #0]
 8008d06:	b29a      	uxth	r2, r3
 8008d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	029b      	lsls	r3, r3, #10
 8008d10:	b29b      	uxth	r3, r3
 8008d12:	4313      	orrs	r3, r2
 8008d14:	b29a      	uxth	r2, r3
 8008d16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008d1a:	801a      	strh	r2, [r3, #0]
 8008d1c:	e034      	b.n	8008d88 <USB_EPStartXfer+0x10ea>
 8008d1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	785b      	ldrb	r3, [r3, #1]
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d12c      	bne.n	8008d88 <USB_EPStartXfer+0x10ea>
 8008d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d52:	4413      	add	r3, r2
 8008d54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	781b      	ldrb	r3, [r3, #0]
 8008d64:	00da      	lsls	r2, r3, #3
 8008d66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d6a:	4413      	add	r3, r2
 8008d6c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	b29a      	uxth	r2, r3
 8008d82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008d86:	801a      	strh	r2, [r3, #0]
 8008d88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d8c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008d96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	785b      	ldrb	r3, [r3, #1]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	f040 809d 	bne.w	8008ee2 <USB_EPStartXfer+0x1244>
 8008da8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008dcc:	4413      	add	r3, r2
 8008dce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dd6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	781b      	ldrb	r3, [r3, #0]
 8008dde:	00da      	lsls	r2, r3, #3
 8008de0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008de4:	4413      	add	r3, r2
 8008de6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008dea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008dee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008df2:	881b      	ldrh	r3, [r3, #0]
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e00:	801a      	strh	r2, [r3, #0]
 8008e02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	2b3e      	cmp	r3, #62	; 0x3e
 8008e10:	d92b      	bls.n	8008e6a <USB_EPStartXfer+0x11cc>
 8008e12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	095b      	lsrs	r3, r3, #5
 8008e20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	f003 031f 	and.w	r3, r3, #31
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d104      	bne.n	8008e42 <USB_EPStartXfer+0x11a4>
 8008e38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e3c:	3b01      	subs	r3, #1
 8008e3e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008e42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e46:	881b      	ldrh	r3, [r3, #0]
 8008e48:	b29a      	uxth	r2, r3
 8008e4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	029b      	lsls	r3, r3, #10
 8008e52:	b29b      	uxth	r3, r3
 8008e54:	4313      	orrs	r3, r2
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e66:	801a      	strh	r2, [r3, #0]
 8008e68:	e069      	b.n	8008f3e <USB_EPStartXfer+0x12a0>
 8008e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	691b      	ldr	r3, [r3, #16]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d10c      	bne.n	8008e94 <USB_EPStartXfer+0x11f6>
 8008e7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e7e:	881b      	ldrh	r3, [r3, #0]
 8008e80:	b29b      	uxth	r3, r3
 8008e82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e8a:	b29a      	uxth	r2, r3
 8008e8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008e90:	801a      	strh	r2, [r3, #0]
 8008e92:	e054      	b.n	8008f3e <USB_EPStartXfer+0x12a0>
 8008e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	691b      	ldr	r3, [r3, #16]
 8008ea0:	085b      	lsrs	r3, r3, #1
 8008ea2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eaa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	f003 0301 	and.w	r3, r3, #1
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d004      	beq.n	8008ec4 <USB_EPStartXfer+0x1226>
 8008eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ebe:	3301      	adds	r3, #1
 8008ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008ec4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ec8:	881b      	ldrh	r3, [r3, #0]
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	029b      	lsls	r3, r3, #10
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	b29a      	uxth	r2, r3
 8008eda:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ede:	801a      	strh	r2, [r3, #0]
 8008ee0:	e02d      	b.n	8008f3e <USB_EPStartXfer+0x12a0>
 8008ee2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ee6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	785b      	ldrb	r3, [r3, #1]
 8008eee:	2b01      	cmp	r3, #1
 8008ef0:	d125      	bne.n	8008f3e <USB_EPStartXfer+0x12a0>
 8008ef2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ef6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	461a      	mov	r2, r3
 8008f04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008f08:	4413      	add	r3, r2
 8008f0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8008f0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	781b      	ldrb	r3, [r3, #0]
 8008f1a:	00da      	lsls	r2, r3, #3
 8008f1c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008f20:	4413      	add	r3, r2
 8008f22:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	691b      	ldr	r3, [r3, #16]
 8008f36:	b29a      	uxth	r2, r3
 8008f38:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008f3c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008f3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	69db      	ldr	r3, [r3, #28]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	f000 8218 	beq.w	8009380 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f54:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f58:	681a      	ldr	r2, [r3, #0]
 8008f5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	009b      	lsls	r3, r3, #2
 8008f68:	4413      	add	r3, r2
 8008f6a:	881b      	ldrh	r3, [r3, #0]
 8008f6c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008f70:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008f74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d005      	beq.n	8008f88 <USB_EPStartXfer+0x12ea>
 8008f7c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10d      	bne.n	8008fa4 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008f88:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008f8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	f040 81f5 	bne.w	8009380 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008f96:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8008f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f040 81ee 	bne.w	8009380 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008fa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	781b      	ldrb	r3, [r3, #0]
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	4413      	add	r3, r2
 8008fbe:	881b      	ldrh	r3, [r3, #0]
 8008fc0:	b29b      	uxth	r3, r3
 8008fc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fca:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8008fce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fd2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	781b      	ldrb	r3, [r3, #0]
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	441a      	add	r2, r3
 8008fe8:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8008fec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ff0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ff4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008ff8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008ffc:	b29b      	uxth	r3, r3
 8008ffe:	8013      	strh	r3, [r2, #0]
 8009000:	e1be      	b.n	8009380 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	78db      	ldrb	r3, [r3, #3]
 800900e:	2b01      	cmp	r3, #1
 8009010:	f040 81b4 	bne.w	800937c <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	699a      	ldr	r2, [r3, #24]
 8009020:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009024:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	429a      	cmp	r2, r3
 800902e:	d917      	bls.n	8009060 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009030:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009034:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009044:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	699a      	ldr	r2, [r3, #24]
 800904c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009050:	1ad2      	subs	r2, r2, r3
 8009052:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009056:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	619a      	str	r2, [r3, #24]
 800905e:	e00e      	b.n	800907e <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009060:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009064:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	699b      	ldr	r3, [r3, #24]
 800906c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009070:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009074:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2200      	movs	r2, #0
 800907c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800907e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009082:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	785b      	ldrb	r3, [r3, #1]
 800908a:	2b00      	cmp	r3, #0
 800908c:	f040 8085 	bne.w	800919a <USB_EPStartXfer+0x14fc>
 8009090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009094:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800909e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	461a      	mov	r2, r3
 80090b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80090b4:	4413      	add	r3, r2
 80090b6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80090ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	00da      	lsls	r2, r3, #3
 80090c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80090cc:	4413      	add	r3, r2
 80090ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80090d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80090d6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80090da:	881b      	ldrh	r3, [r3, #0]
 80090dc:	b29b      	uxth	r3, r3
 80090de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80090e2:	b29a      	uxth	r2, r3
 80090e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80090e8:	801a      	strh	r2, [r3, #0]
 80090ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090ee:	2b3e      	cmp	r3, #62	; 0x3e
 80090f0:	d923      	bls.n	800913a <USB_EPStartXfer+0x149c>
 80090f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090f6:	095b      	lsrs	r3, r3, #5
 80090f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80090fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009100:	f003 031f 	and.w	r3, r3, #31
 8009104:	2b00      	cmp	r3, #0
 8009106:	d104      	bne.n	8009112 <USB_EPStartXfer+0x1474>
 8009108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800910c:	3b01      	subs	r3, #1
 800910e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009112:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009116:	881b      	ldrh	r3, [r3, #0]
 8009118:	b29a      	uxth	r2, r3
 800911a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800911e:	b29b      	uxth	r3, r3
 8009120:	029b      	lsls	r3, r3, #10
 8009122:	b29b      	uxth	r3, r3
 8009124:	4313      	orrs	r3, r2
 8009126:	b29b      	uxth	r3, r3
 8009128:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800912c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009130:	b29a      	uxth	r2, r3
 8009132:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009136:	801a      	strh	r2, [r3, #0]
 8009138:	e060      	b.n	80091fc <USB_EPStartXfer+0x155e>
 800913a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800913e:	2b00      	cmp	r3, #0
 8009140:	d10c      	bne.n	800915c <USB_EPStartXfer+0x14be>
 8009142:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	b29b      	uxth	r3, r3
 800914a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800914e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009152:	b29a      	uxth	r2, r3
 8009154:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009158:	801a      	strh	r2, [r3, #0]
 800915a:	e04f      	b.n	80091fc <USB_EPStartXfer+0x155e>
 800915c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009160:	085b      	lsrs	r3, r3, #1
 8009162:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009166:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800916a:	f003 0301 	and.w	r3, r3, #1
 800916e:	2b00      	cmp	r3, #0
 8009170:	d004      	beq.n	800917c <USB_EPStartXfer+0x14de>
 8009172:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009176:	3301      	adds	r3, #1
 8009178:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800917c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009180:	881b      	ldrh	r3, [r3, #0]
 8009182:	b29a      	uxth	r2, r3
 8009184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009188:	b29b      	uxth	r3, r3
 800918a:	029b      	lsls	r3, r3, #10
 800918c:	b29b      	uxth	r3, r3
 800918e:	4313      	orrs	r3, r2
 8009190:	b29a      	uxth	r2, r3
 8009192:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009196:	801a      	strh	r2, [r3, #0]
 8009198:	e030      	b.n	80091fc <USB_EPStartXfer+0x155e>
 800919a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800919e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	785b      	ldrb	r3, [r3, #1]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d128      	bne.n	80091fc <USB_EPStartXfer+0x155e>
 80091aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80091b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	461a      	mov	r2, r3
 80091ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80091ce:	4413      	add	r3, r2
 80091d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80091d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	00da      	lsls	r2, r3, #3
 80091e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80091e6:	4413      	add	r3, r2
 80091e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80091ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80091f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091f4:	b29a      	uxth	r2, r3
 80091f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80091fa:	801a      	strh	r2, [r3, #0]
 80091fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009200:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800920a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800920e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	785b      	ldrb	r3, [r3, #1]
 8009216:	2b00      	cmp	r3, #0
 8009218:	f040 8085 	bne.w	8009326 <USB_EPStartXfer+0x1688>
 800921c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009220:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800922a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800922e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009238:	b29b      	uxth	r3, r3
 800923a:	461a      	mov	r2, r3
 800923c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009240:	4413      	add	r3, r2
 8009242:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800924a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	00da      	lsls	r2, r3, #3
 8009254:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009258:	4413      	add	r3, r2
 800925a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800925e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009262:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009266:	881b      	ldrh	r3, [r3, #0]
 8009268:	b29b      	uxth	r3, r3
 800926a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800926e:	b29a      	uxth	r2, r3
 8009270:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009274:	801a      	strh	r2, [r3, #0]
 8009276:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800927a:	2b3e      	cmp	r3, #62	; 0x3e
 800927c:	d923      	bls.n	80092c6 <USB_EPStartXfer+0x1628>
 800927e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009282:	095b      	lsrs	r3, r3, #5
 8009284:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009288:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800928c:	f003 031f 	and.w	r3, r3, #31
 8009290:	2b00      	cmp	r3, #0
 8009292:	d104      	bne.n	800929e <USB_EPStartXfer+0x1600>
 8009294:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009298:	3b01      	subs	r3, #1
 800929a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800929e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092a2:	881b      	ldrh	r3, [r3, #0]
 80092a4:	b29a      	uxth	r2, r3
 80092a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	029b      	lsls	r3, r3, #10
 80092ae:	b29b      	uxth	r3, r3
 80092b0:	4313      	orrs	r3, r2
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092bc:	b29a      	uxth	r2, r3
 80092be:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092c2:	801a      	strh	r2, [r3, #0]
 80092c4:	e05c      	b.n	8009380 <USB_EPStartXfer+0x16e2>
 80092c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d10c      	bne.n	80092e8 <USB_EPStartXfer+0x164a>
 80092ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092d2:	881b      	ldrh	r3, [r3, #0]
 80092d4:	b29b      	uxth	r3, r3
 80092d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092de:	b29a      	uxth	r2, r3
 80092e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80092e4:	801a      	strh	r2, [r3, #0]
 80092e6:	e04b      	b.n	8009380 <USB_EPStartXfer+0x16e2>
 80092e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092ec:	085b      	lsrs	r3, r3, #1
 80092ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80092f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d004      	beq.n	8009308 <USB_EPStartXfer+0x166a>
 80092fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009302:	3301      	adds	r3, #1
 8009304:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009308:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800930c:	881b      	ldrh	r3, [r3, #0]
 800930e:	b29a      	uxth	r2, r3
 8009310:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009314:	b29b      	uxth	r3, r3
 8009316:	029b      	lsls	r3, r3, #10
 8009318:	b29b      	uxth	r3, r3
 800931a:	4313      	orrs	r3, r2
 800931c:	b29a      	uxth	r2, r3
 800931e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009322:	801a      	strh	r2, [r3, #0]
 8009324:	e02c      	b.n	8009380 <USB_EPStartXfer+0x16e2>
 8009326:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800932a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	785b      	ldrb	r3, [r3, #1]
 8009332:	2b01      	cmp	r3, #1
 8009334:	d124      	bne.n	8009380 <USB_EPStartXfer+0x16e2>
 8009336:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800933a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009344:	b29b      	uxth	r3, r3
 8009346:	461a      	mov	r2, r3
 8009348:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800934c:	4413      	add	r3, r2
 800934e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009352:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009356:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	781b      	ldrb	r3, [r3, #0]
 800935e:	00da      	lsls	r2, r3, #3
 8009360:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009364:	4413      	add	r3, r2
 8009366:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800936a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800936e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009372:	b29a      	uxth	r2, r3
 8009374:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009378:	801a      	strh	r2, [r3, #0]
 800937a:	e001      	b.n	8009380 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	e03a      	b.n	80093f6 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009384:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800938e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	781b      	ldrb	r3, [r3, #0]
 8009396:	009b      	lsls	r3, r3, #2
 8009398:	4413      	add	r3, r2
 800939a:	881b      	ldrh	r3, [r3, #0]
 800939c:	b29b      	uxth	r3, r3
 800939e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80093a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093a6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80093aa:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80093ae:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80093b2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80093b6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80093ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80093be:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80093c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093ca:	681a      	ldr	r2, [r3, #0]
 80093cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	781b      	ldrb	r3, [r3, #0]
 80093d8:	009b      	lsls	r3, r3, #2
 80093da:	441a      	add	r2, r3
 80093dc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80093e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80093e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80093e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80093ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093f0:	b29b      	uxth	r3, r3
 80093f2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009400:	b480      	push	{r7}
 8009402:	b085      	sub	sp, #20
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800940a:	683b      	ldr	r3, [r7, #0]
 800940c:	785b      	ldrb	r3, [r3, #1]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d020      	beq.n	8009454 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009412:	687a      	ldr	r2, [r7, #4]
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	009b      	lsls	r3, r3, #2
 800941a:	4413      	add	r3, r2
 800941c:	881b      	ldrh	r3, [r3, #0]
 800941e:	b29b      	uxth	r3, r3
 8009420:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009424:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009428:	81bb      	strh	r3, [r7, #12]
 800942a:	89bb      	ldrh	r3, [r7, #12]
 800942c:	f083 0310 	eor.w	r3, r3, #16
 8009430:	81bb      	strh	r3, [r7, #12]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	441a      	add	r2, r3
 800943c:	89bb      	ldrh	r3, [r7, #12]
 800943e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800944a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800944e:	b29b      	uxth	r3, r3
 8009450:	8013      	strh	r3, [r2, #0]
 8009452:	e01f      	b.n	8009494 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	4413      	add	r3, r2
 800945e:	881b      	ldrh	r3, [r3, #0]
 8009460:	b29b      	uxth	r3, r3
 8009462:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800946a:	81fb      	strh	r3, [r7, #14]
 800946c:	89fb      	ldrh	r3, [r7, #14]
 800946e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009472:	81fb      	strh	r3, [r7, #14]
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	441a      	add	r2, r3
 800947e:	89fb      	ldrh	r3, [r7, #14]
 8009480:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009484:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800948c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009490:	b29b      	uxth	r3, r3
 8009492:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009494:	2300      	movs	r3, #0
}
 8009496:	4618      	mov	r0, r3
 8009498:	3714      	adds	r7, #20
 800949a:	46bd      	mov	sp, r7
 800949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a0:	4770      	bx	lr

080094a2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80094a2:	b480      	push	{r7}
 80094a4:	b087      	sub	sp, #28
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
 80094aa:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	7b1b      	ldrb	r3, [r3, #12]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	f040 809d 	bne.w	80095f0 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	785b      	ldrb	r3, [r3, #1]
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d04c      	beq.n	8009558 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	781b      	ldrb	r3, [r3, #0]
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	4413      	add	r3, r2
 80094c8:	881b      	ldrh	r3, [r3, #0]
 80094ca:	823b      	strh	r3, [r7, #16]
 80094cc:	8a3b      	ldrh	r3, [r7, #16]
 80094ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d01b      	beq.n	800950e <USB_EPClearStall+0x6c>
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	4413      	add	r3, r2
 80094e0:	881b      	ldrh	r3, [r3, #0]
 80094e2:	b29b      	uxth	r3, r3
 80094e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094ec:	81fb      	strh	r3, [r7, #14]
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	781b      	ldrb	r3, [r3, #0]
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	441a      	add	r2, r3
 80094f8:	89fb      	ldrh	r3, [r7, #14]
 80094fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009502:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009506:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800950a:	b29b      	uxth	r3, r3
 800950c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800950e:	683b      	ldr	r3, [r7, #0]
 8009510:	78db      	ldrb	r3, [r3, #3]
 8009512:	2b01      	cmp	r3, #1
 8009514:	d06c      	beq.n	80095f0 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009516:	687a      	ldr	r2, [r7, #4]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	781b      	ldrb	r3, [r3, #0]
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4413      	add	r3, r2
 8009520:	881b      	ldrh	r3, [r3, #0]
 8009522:	b29b      	uxth	r3, r3
 8009524:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800952c:	81bb      	strh	r3, [r7, #12]
 800952e:	89bb      	ldrh	r3, [r7, #12]
 8009530:	f083 0320 	eor.w	r3, r3, #32
 8009534:	81bb      	strh	r3, [r7, #12]
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	781b      	ldrb	r3, [r3, #0]
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	441a      	add	r2, r3
 8009540:	89bb      	ldrh	r3, [r7, #12]
 8009542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800954a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800954e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009552:	b29b      	uxth	r3, r3
 8009554:	8013      	strh	r3, [r2, #0]
 8009556:	e04b      	b.n	80095f0 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	881b      	ldrh	r3, [r3, #0]
 8009564:	82fb      	strh	r3, [r7, #22]
 8009566:	8afb      	ldrh	r3, [r7, #22]
 8009568:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800956c:	2b00      	cmp	r3, #0
 800956e:	d01b      	beq.n	80095a8 <USB_EPClearStall+0x106>
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	881b      	ldrh	r3, [r3, #0]
 800957c:	b29b      	uxth	r3, r3
 800957e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009586:	82bb      	strh	r3, [r7, #20]
 8009588:	687a      	ldr	r2, [r7, #4]
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	441a      	add	r2, r3
 8009592:	8abb      	ldrh	r3, [r7, #20]
 8009594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800959c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80095a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80095a8:	687a      	ldr	r2, [r7, #4]
 80095aa:	683b      	ldr	r3, [r7, #0]
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	4413      	add	r3, r2
 80095b2:	881b      	ldrh	r3, [r3, #0]
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80095ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095be:	827b      	strh	r3, [r7, #18]
 80095c0:	8a7b      	ldrh	r3, [r7, #18]
 80095c2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80095c6:	827b      	strh	r3, [r7, #18]
 80095c8:	8a7b      	ldrh	r3, [r7, #18]
 80095ca:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80095ce:	827b      	strh	r3, [r7, #18]
 80095d0:	687a      	ldr	r2, [r7, #4]
 80095d2:	683b      	ldr	r3, [r7, #0]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	441a      	add	r2, r3
 80095da:	8a7b      	ldrh	r3, [r7, #18]
 80095dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095ec:	b29b      	uxth	r3, r3
 80095ee:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	371c      	adds	r7, #28
 80095f6:	46bd      	mov	sp, r7
 80095f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fc:	4770      	bx	lr

080095fe <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80095fe:	b480      	push	{r7}
 8009600:	b083      	sub	sp, #12
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
 8009606:	460b      	mov	r3, r1
 8009608:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800960a:	78fb      	ldrb	r3, [r7, #3]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d103      	bne.n	8009618 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2280      	movs	r2, #128	; 0x80
 8009614:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	370c      	adds	r7, #12
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr

08009626 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009626:	b480      	push	{r7}
 8009628:	b083      	sub	sp, #12
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800962e:	2300      	movs	r3, #0
}
 8009630:	4618      	mov	r0, r3
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800964a:	b29b      	uxth	r3, r3
 800964c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800964e:	68fb      	ldr	r3, [r7, #12]
}
 8009650:	4618      	mov	r0, r3
 8009652:	3714      	adds	r7, #20
 8009654:	46bd      	mov	sp, r7
 8009656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965a:	4770      	bx	lr

0800965c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800965c:	b480      	push	{r7}
 800965e:	b08b      	sub	sp, #44	; 0x2c
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	4611      	mov	r1, r2
 8009668:	461a      	mov	r2, r3
 800966a:	460b      	mov	r3, r1
 800966c:	80fb      	strh	r3, [r7, #6]
 800966e:	4613      	mov	r3, r2
 8009670:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009672:	88bb      	ldrh	r3, [r7, #4]
 8009674:	3301      	adds	r3, #1
 8009676:	085b      	lsrs	r3, r3, #1
 8009678:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009682:	88fa      	ldrh	r2, [r7, #6]
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	4413      	add	r3, r2
 8009688:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800968c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800968e:	69bb      	ldr	r3, [r7, #24]
 8009690:	627b      	str	r3, [r7, #36]	; 0x24
 8009692:	e01b      	b.n	80096cc <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800969a:	69fb      	ldr	r3, [r7, #28]
 800969c:	3301      	adds	r3, #1
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	021b      	lsls	r3, r3, #8
 80096a2:	b21a      	sxth	r2, r3
 80096a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	b21b      	sxth	r3, r3
 80096ac:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 80096ae:	6a3b      	ldr	r3, [r7, #32]
 80096b0:	8a7a      	ldrh	r2, [r7, #18]
 80096b2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80096b4:	6a3b      	ldr	r3, [r7, #32]
 80096b6:	3302      	adds	r3, #2
 80096b8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 80096ba:	69fb      	ldr	r3, [r7, #28]
 80096bc:	3301      	adds	r3, #1
 80096be:	61fb      	str	r3, [r7, #28]
    pBuf++;
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	3301      	adds	r3, #1
 80096c4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 80096c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c8:	3b01      	subs	r3, #1
 80096ca:	627b      	str	r3, [r7, #36]	; 0x24
 80096cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1e0      	bne.n	8009694 <USB_WritePMA+0x38>
  }
}
 80096d2:	bf00      	nop
 80096d4:	bf00      	nop
 80096d6:	372c      	adds	r7, #44	; 0x2c
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b08b      	sub	sp, #44	; 0x2c
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	4611      	mov	r1, r2
 80096ec:	461a      	mov	r2, r3
 80096ee:	460b      	mov	r3, r1
 80096f0:	80fb      	strh	r3, [r7, #6]
 80096f2:	4613      	mov	r3, r2
 80096f4:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80096f6:	88bb      	ldrh	r3, [r7, #4]
 80096f8:	085b      	lsrs	r3, r3, #1
 80096fa:	b29b      	uxth	r3, r3
 80096fc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009706:	88fa      	ldrh	r2, [r7, #6]
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	4413      	add	r3, r2
 800970c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009710:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	627b      	str	r3, [r7, #36]	; 0x24
 8009716:	e018      	b.n	800974a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009718:	6a3b      	ldr	r3, [r7, #32]
 800971a:	881b      	ldrh	r3, [r3, #0]
 800971c:	b29b      	uxth	r3, r3
 800971e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009720:	6a3b      	ldr	r3, [r7, #32]
 8009722:	3302      	adds	r3, #2
 8009724:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	b2da      	uxtb	r2, r3
 800972a:	69fb      	ldr	r3, [r7, #28]
 800972c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	3301      	adds	r3, #1
 8009732:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	0a1b      	lsrs	r3, r3, #8
 8009738:	b2da      	uxtb	r2, r3
 800973a:	69fb      	ldr	r3, [r7, #28]
 800973c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	3301      	adds	r3, #1
 8009742:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009746:	3b01      	subs	r3, #1
 8009748:	627b      	str	r3, [r7, #36]	; 0x24
 800974a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974c:	2b00      	cmp	r3, #0
 800974e:	d1e3      	bne.n	8009718 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009750:	88bb      	ldrh	r3, [r7, #4]
 8009752:	f003 0301 	and.w	r3, r3, #1
 8009756:	b29b      	uxth	r3, r3
 8009758:	2b00      	cmp	r3, #0
 800975a:	d007      	beq.n	800976c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800975c:	6a3b      	ldr	r3, [r7, #32]
 800975e:	881b      	ldrh	r3, [r3, #0]
 8009760:	b29b      	uxth	r3, r3
 8009762:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	b2da      	uxtb	r2, r3
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	701a      	strb	r2, [r3, #0]
  }
}
 800976c:	bf00      	nop
 800976e:	372c      	adds	r7, #44	; 0x2c
 8009770:	46bd      	mov	sp, r7
 8009772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009776:	4770      	bx	lr

08009778 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	460b      	mov	r3, r1
 8009782:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009784:	2300      	movs	r3, #0
 8009786:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	7c1b      	ldrb	r3, [r3, #16]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d115      	bne.n	80097bc <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009794:	2202      	movs	r2, #2
 8009796:	2181      	movs	r1, #129	; 0x81
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f001 fe9c 	bl	800b4d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2201      	movs	r2, #1
 80097a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80097a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097a8:	2202      	movs	r2, #2
 80097aa:	2101      	movs	r1, #1
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f001 fe92 	bl	800b4d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 80097ba:	e012      	b.n	80097e2 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80097bc:	2340      	movs	r3, #64	; 0x40
 80097be:	2202      	movs	r2, #2
 80097c0:	2181      	movs	r1, #129	; 0x81
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f001 fe87 	bl	800b4d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80097ce:	2340      	movs	r3, #64	; 0x40
 80097d0:	2202      	movs	r2, #2
 80097d2:	2101      	movs	r1, #1
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f001 fe7e 	bl	800b4d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80097e2:	2308      	movs	r3, #8
 80097e4:	2203      	movs	r2, #3
 80097e6:	2182      	movs	r1, #130	; 0x82
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f001 fe74 	bl	800b4d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2201      	movs	r2, #1
 80097f2:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80097f4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80097f8:	f001 ff96 	bl	800b728 <USBD_static_malloc>
 80097fc:	4602      	mov	r2, r0
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800980a:	2b00      	cmp	r3, #0
 800980c:	d102      	bne.n	8009814 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800980e:	2301      	movs	r3, #1
 8009810:	73fb      	strb	r3, [r7, #15]
 8009812:	e026      	b.n	8009862 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800981a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	2200      	movs	r2, #0
 800982a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	2200      	movs	r2, #0
 8009832:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	7c1b      	ldrb	r3, [r3, #16]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d109      	bne.n	8009852 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009844:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009848:	2101      	movs	r1, #1
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f001 ff35 	bl	800b6ba <USBD_LL_PrepareReceive>
 8009850:	e007      	b.n	8009862 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009858:	2340      	movs	r3, #64	; 0x40
 800985a:	2101      	movs	r1, #1
 800985c:	6878      	ldr	r0, [r7, #4]
 800985e:	f001 ff2c 	bl	800b6ba <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009862:	7bfb      	ldrb	r3, [r7, #15]
}
 8009864:	4618      	mov	r0, r3
 8009866:	3710      	adds	r7, #16
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800986c:	b580      	push	{r7, lr}
 800986e:	b084      	sub	sp, #16
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	460b      	mov	r3, r1
 8009876:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009878:	2300      	movs	r3, #0
 800987a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800987c:	2181      	movs	r1, #129	; 0x81
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f001 fe4f 	bl	800b522 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800988a:	2101      	movs	r1, #1
 800988c:	6878      	ldr	r0, [r7, #4]
 800988e:	f001 fe48 	bl	800b522 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2200      	movs	r2, #0
 8009896:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800989a:	2182      	movs	r1, #130	; 0x82
 800989c:	6878      	ldr	r0, [r7, #4]
 800989e:	f001 fe40 	bl	800b522 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d00e      	beq.n	80098d0 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098c2:	4618      	mov	r0, r3
 80098c4:	f001 ff3e 	bl	800b744 <USBD_static_free>
    pdev->pClassData = NULL;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80098d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80098da:	b580      	push	{r7, lr}
 80098dc:	b086      	sub	sp, #24
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
 80098e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80098ea:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80098ec:	2300      	movs	r3, #0
 80098ee:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80098f0:	2300      	movs	r3, #0
 80098f2:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009900:	2b00      	cmp	r3, #0
 8009902:	d039      	beq.n	8009978 <USBD_CDC_Setup+0x9e>
 8009904:	2b20      	cmp	r3, #32
 8009906:	d17f      	bne.n	8009a08 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	88db      	ldrh	r3, [r3, #6]
 800990c:	2b00      	cmp	r3, #0
 800990e:	d029      	beq.n	8009964 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	781b      	ldrb	r3, [r3, #0]
 8009914:	b25b      	sxtb	r3, r3
 8009916:	2b00      	cmp	r3, #0
 8009918:	da11      	bge.n	800993e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009920:	689b      	ldr	r3, [r3, #8]
 8009922:	683a      	ldr	r2, [r7, #0]
 8009924:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8009926:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009928:	683a      	ldr	r2, [r7, #0]
 800992a:	88d2      	ldrh	r2, [r2, #6]
 800992c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800992e:	6939      	ldr	r1, [r7, #16]
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	88db      	ldrh	r3, [r3, #6]
 8009934:	461a      	mov	r2, r3
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f001 fa13 	bl	800ad62 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800993c:	e06b      	b.n	8009a16 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	785a      	ldrb	r2, [r3, #1]
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	88db      	ldrh	r3, [r3, #6]
 800994c:	b2da      	uxtb	r2, r3
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009954:	6939      	ldr	r1, [r7, #16]
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	88db      	ldrh	r3, [r3, #6]
 800995a:	461a      	mov	r2, r3
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f001 fa2e 	bl	800adbe <USBD_CtlPrepareRx>
      break;
 8009962:	e058      	b.n	8009a16 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	683a      	ldr	r2, [r7, #0]
 800996e:	7850      	ldrb	r0, [r2, #1]
 8009970:	2200      	movs	r2, #0
 8009972:	6839      	ldr	r1, [r7, #0]
 8009974:	4798      	blx	r3
      break;
 8009976:	e04e      	b.n	8009a16 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	785b      	ldrb	r3, [r3, #1]
 800997c:	2b0b      	cmp	r3, #11
 800997e:	d02e      	beq.n	80099de <USBD_CDC_Setup+0x104>
 8009980:	2b0b      	cmp	r3, #11
 8009982:	dc38      	bgt.n	80099f6 <USBD_CDC_Setup+0x11c>
 8009984:	2b00      	cmp	r3, #0
 8009986:	d002      	beq.n	800998e <USBD_CDC_Setup+0xb4>
 8009988:	2b0a      	cmp	r3, #10
 800998a:	d014      	beq.n	80099b6 <USBD_CDC_Setup+0xdc>
 800998c:	e033      	b.n	80099f6 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009994:	2b03      	cmp	r3, #3
 8009996:	d107      	bne.n	80099a8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8009998:	f107 030c 	add.w	r3, r7, #12
 800999c:	2202      	movs	r2, #2
 800999e:	4619      	mov	r1, r3
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f001 f9de 	bl	800ad62 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099a6:	e02e      	b.n	8009a06 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80099a8:	6839      	ldr	r1, [r7, #0]
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f001 f96e 	bl	800ac8c <USBD_CtlError>
            ret = USBD_FAIL;
 80099b0:	2302      	movs	r3, #2
 80099b2:	75fb      	strb	r3, [r7, #23]
          break;
 80099b4:	e027      	b.n	8009a06 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099bc:	2b03      	cmp	r3, #3
 80099be:	d107      	bne.n	80099d0 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80099c0:	f107 030f 	add.w	r3, r7, #15
 80099c4:	2201      	movs	r2, #1
 80099c6:	4619      	mov	r1, r3
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f001 f9ca 	bl	800ad62 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80099ce:	e01a      	b.n	8009a06 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80099d0:	6839      	ldr	r1, [r7, #0]
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f001 f95a 	bl	800ac8c <USBD_CtlError>
            ret = USBD_FAIL;
 80099d8:	2302      	movs	r3, #2
 80099da:	75fb      	strb	r3, [r7, #23]
          break;
 80099dc:	e013      	b.n	8009a06 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80099e4:	2b03      	cmp	r3, #3
 80099e6:	d00d      	beq.n	8009a04 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80099e8:	6839      	ldr	r1, [r7, #0]
 80099ea:	6878      	ldr	r0, [r7, #4]
 80099ec:	f001 f94e 	bl	800ac8c <USBD_CtlError>
            ret = USBD_FAIL;
 80099f0:	2302      	movs	r3, #2
 80099f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80099f4:	e006      	b.n	8009a04 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80099f6:	6839      	ldr	r1, [r7, #0]
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f001 f947 	bl	800ac8c <USBD_CtlError>
          ret = USBD_FAIL;
 80099fe:	2302      	movs	r3, #2
 8009a00:	75fb      	strb	r3, [r7, #23]
          break;
 8009a02:	e000      	b.n	8009a06 <USBD_CDC_Setup+0x12c>
          break;
 8009a04:	bf00      	nop
      }
      break;
 8009a06:	e006      	b.n	8009a16 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009a08:	6839      	ldr	r1, [r7, #0]
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f001 f93e 	bl	800ac8c <USBD_CtlError>
      ret = USBD_FAIL;
 8009a10:	2302      	movs	r3, #2
 8009a12:	75fb      	strb	r3, [r7, #23]
      break;
 8009a14:	bf00      	nop
  }

  return ret;
 8009a16:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3718      	adds	r7, #24
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	460b      	mov	r3, r1
 8009a2a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a32:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a3a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d03a      	beq.n	8009abc <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009a46:	78fa      	ldrb	r2, [r7, #3]
 8009a48:	6879      	ldr	r1, [r7, #4]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4413      	add	r3, r2
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	440b      	add	r3, r1
 8009a54:	331c      	adds	r3, #28
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d029      	beq.n	8009ab0 <USBD_CDC_DataIn+0x90>
 8009a5c:	78fa      	ldrb	r2, [r7, #3]
 8009a5e:	6879      	ldr	r1, [r7, #4]
 8009a60:	4613      	mov	r3, r2
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	4413      	add	r3, r2
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	440b      	add	r3, r1
 8009a6a:	331c      	adds	r3, #28
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	78f9      	ldrb	r1, [r7, #3]
 8009a70:	68b8      	ldr	r0, [r7, #8]
 8009a72:	460b      	mov	r3, r1
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	440b      	add	r3, r1
 8009a78:	00db      	lsls	r3, r3, #3
 8009a7a:	4403      	add	r3, r0
 8009a7c:	3338      	adds	r3, #56	; 0x38
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	fbb2 f1f3 	udiv	r1, r2, r3
 8009a84:	fb01 f303 	mul.w	r3, r1, r3
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d110      	bne.n	8009ab0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009a8e:	78fa      	ldrb	r2, [r7, #3]
 8009a90:	6879      	ldr	r1, [r7, #4]
 8009a92:	4613      	mov	r3, r2
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4413      	add	r3, r2
 8009a98:	009b      	lsls	r3, r3, #2
 8009a9a:	440b      	add	r3, r1
 8009a9c:	331c      	adds	r3, #28
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009aa2:	78f9      	ldrb	r1, [r7, #3]
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f001 fde3 	bl	800b674 <USBD_LL_Transmit>
 8009aae:	e003      	b.n	8009ab8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	e000      	b.n	8009abe <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8009abc:	2302      	movs	r3, #2
  }
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3710      	adds	r7, #16
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ac6:	b580      	push	{r7, lr}
 8009ac8:	b084      	sub	sp, #16
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
 8009ace:	460b      	mov	r3, r1
 8009ad0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ad8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009ada:	78fb      	ldrb	r3, [r7, #3]
 8009adc:	4619      	mov	r1, r3
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f001 fe0e 	bl	800b700 <USBD_LL_GetRxDataSize>
 8009ae4:	4602      	mov	r2, r0
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00d      	beq.n	8009b12 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	68fa      	ldr	r2, [r7, #12]
 8009b00:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009b04:	68fa      	ldr	r2, [r7, #12]
 8009b06:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009b0a:	4611      	mov	r1, r2
 8009b0c:	4798      	blx	r3

    return USBD_OK;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	e000      	b.n	8009b14 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8009b12:	2302      	movs	r3, #2
  }
}
 8009b14:	4618      	mov	r0, r3
 8009b16:	3710      	adds	r7, #16
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	bd80      	pop	{r7, pc}

08009b1c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009b2a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d015      	beq.n	8009b62 <USBD_CDC_EP0_RxReady+0x46>
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009b3c:	2bff      	cmp	r3, #255	; 0xff
 8009b3e:	d010      	beq.n	8009b62 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	68fa      	ldr	r2, [r7, #12]
 8009b4a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009b4e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009b50:	68fa      	ldr	r2, [r7, #12]
 8009b52:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009b56:	b292      	uxth	r2, r2
 8009b58:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	22ff      	movs	r2, #255	; 0xff
 8009b5e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8009b62:	2300      	movs	r3, #0
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3710      	adds	r7, #16
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bd80      	pop	{r7, pc}

08009b6c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2243      	movs	r2, #67	; 0x43
 8009b78:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8009b7a:	4b03      	ldr	r3, [pc, #12]	; (8009b88 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr
 8009b88:	20000094 	.word	0x20000094

08009b8c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b083      	sub	sp, #12
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2243      	movs	r2, #67	; 0x43
 8009b98:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8009b9a:	4b03      	ldr	r3, [pc, #12]	; (8009ba8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	370c      	adds	r7, #12
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba6:	4770      	bx	lr
 8009ba8:	20000050 	.word	0x20000050

08009bac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2243      	movs	r2, #67	; 0x43
 8009bb8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8009bba:	4b03      	ldr	r3, [pc, #12]	; (8009bc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr
 8009bc8:	200000d8 	.word	0x200000d8

08009bcc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	220a      	movs	r2, #10
 8009bd8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8009bda:	4b03      	ldr	r3, [pc, #12]	; (8009be8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr
 8009be8:	2000000c 	.word	0x2000000c

08009bec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
 8009bf4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8009bf6:	2302      	movs	r3, #2
 8009bf8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d005      	beq.n	8009c0c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8009c08:	2300      	movs	r3, #0
 8009c0a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3714      	adds	r7, #20
 8009c12:	46bd      	mov	sp, r7
 8009c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c18:	4770      	bx	lr

08009c1a <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8009c1a:	b480      	push	{r7}
 8009c1c:	b087      	sub	sp, #28
 8009c1e:	af00      	add	r7, sp, #0
 8009c20:	60f8      	str	r0, [r7, #12]
 8009c22:	60b9      	str	r1, [r7, #8]
 8009c24:	4613      	mov	r3, r2
 8009c26:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c2e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8009c30:	697b      	ldr	r3, [r7, #20]
 8009c32:	68ba      	ldr	r2, [r7, #8]
 8009c34:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009c38:	88fa      	ldrh	r2, [r7, #6]
 8009c3a:	697b      	ldr	r3, [r7, #20]
 8009c3c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8009c40:	2300      	movs	r3, #0
}
 8009c42:	4618      	mov	r0, r3
 8009c44:	371c      	adds	r7, #28
 8009c46:	46bd      	mov	sp, r7
 8009c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4c:	4770      	bx	lr

08009c4e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8009c4e:	b480      	push	{r7}
 8009c50:	b085      	sub	sp, #20
 8009c52:	af00      	add	r7, sp, #0
 8009c54:	6078      	str	r0, [r7, #4]
 8009c56:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c5e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8009c68:	2300      	movs	r3, #0
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3714      	adds	r7, #20
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr

08009c76 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b084      	sub	sp, #16
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d01c      	beq.n	8009cca <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d115      	bne.n	8009cc6 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	2181      	movs	r1, #129	; 0x81
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f001 fcd9 	bl	800b674 <USBD_LL_Transmit>

      return USBD_OK;
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	e002      	b.n	8009ccc <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	e000      	b.n	8009ccc <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009cca:	2302      	movs	r3, #2
  }
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	3710      	adds	r7, #16
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ce2:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d017      	beq.n	8009d1e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	7c1b      	ldrb	r3, [r3, #16]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d109      	bne.n	8009d0a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d00:	2101      	movs	r1, #1
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f001 fcd9 	bl	800b6ba <USBD_LL_PrepareReceive>
 8009d08:	e007      	b.n	8009d1a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d10:	2340      	movs	r3, #64	; 0x40
 8009d12:	2101      	movs	r1, #1
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f001 fcd0 	bl	800b6ba <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	e000      	b.n	8009d20 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8009d1e:	2302      	movs	r3, #2
  }
}
 8009d20:	4618      	mov	r0, r3
 8009d22:	3710      	adds	r7, #16
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b084      	sub	sp, #16
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	4613      	mov	r3, r2
 8009d34:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d101      	bne.n	8009d40 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009d3c:	2302      	movs	r3, #2
 8009d3e:	e01a      	b.n	8009d76 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d003      	beq.n	8009d52 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d003      	beq.n	8009d60 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2201      	movs	r2, #1
 8009d64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	79fa      	ldrb	r2, [r7, #7]
 8009d6c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009d6e:	68f8      	ldr	r0, [r7, #12]
 8009d70:	f001 fb3a 	bl	800b3e8 <USBD_LL_Init>

  return USBD_OK;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009d7e:	b480      	push	{r7}
 8009d80:	b085      	sub	sp, #20
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
 8009d86:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d006      	beq.n	8009da0 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	683a      	ldr	r2, [r7, #0]
 8009d96:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	73fb      	strb	r3, [r7, #15]
 8009d9e:	e001      	b.n	8009da4 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009da0:	2302      	movs	r3, #2
 8009da2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3714      	adds	r7, #20
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr

08009db2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b082      	sub	sp, #8
 8009db6:	af00      	add	r7, sp, #0
 8009db8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f001 fb70 	bl	800b4a0 <USBD_LL_Start>

  return USBD_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009dca:	b480      	push	{r7}
 8009dcc:	b083      	sub	sp, #12
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009dd2:	2300      	movs	r3, #0
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	370c      	adds	r7, #12
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dde:	4770      	bx	lr

08009de0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
 8009de8:	460b      	mov	r3, r1
 8009dea:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009dec:	2302      	movs	r3, #2
 8009dee:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d00c      	beq.n	8009e14 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	78fa      	ldrb	r2, [r7, #3]
 8009e04:	4611      	mov	r1, r2
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	4798      	blx	r3
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009e10:	2300      	movs	r3, #0
 8009e12:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b082      	sub	sp, #8
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
 8009e26:	460b      	mov	r3, r1
 8009e28:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	78fa      	ldrb	r2, [r7, #3]
 8009e34:	4611      	mov	r1, r2
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	4798      	blx	r3

  return USBD_OK;
 8009e3a:	2300      	movs	r3, #0
}
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	3708      	adds	r7, #8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b082      	sub	sp, #8
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009e54:	6839      	ldr	r1, [r7, #0]
 8009e56:	4618      	mov	r0, r3
 8009e58:	f000 fedb 	bl	800ac12 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009e78:	f003 031f 	and.w	r3, r3, #31
 8009e7c:	2b02      	cmp	r3, #2
 8009e7e:	d016      	beq.n	8009eae <USBD_LL_SetupStage+0x6a>
 8009e80:	2b02      	cmp	r3, #2
 8009e82:	d81c      	bhi.n	8009ebe <USBD_LL_SetupStage+0x7a>
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d002      	beq.n	8009e8e <USBD_LL_SetupStage+0x4a>
 8009e88:	2b01      	cmp	r3, #1
 8009e8a:	d008      	beq.n	8009e9e <USBD_LL_SetupStage+0x5a>
 8009e8c:	e017      	b.n	8009ebe <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009e94:	4619      	mov	r1, r3
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f000 f9ce 	bl	800a238 <USBD_StdDevReq>
      break;
 8009e9c:	e01a      	b.n	8009ed4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fa30 	bl	800a30c <USBD_StdItfReq>
      break;
 8009eac:	e012      	b.n	8009ed4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f000 fa70 	bl	800a39c <USBD_StdEPReq>
      break;
 8009ebc:	e00a      	b.n	8009ed4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8009ec4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ec8:	b2db      	uxtb	r3, r3
 8009eca:	4619      	mov	r1, r3
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f001 fb47 	bl	800b560 <USBD_LL_StallEP>
      break;
 8009ed2:	bf00      	nop
  }

  return USBD_OK;
 8009ed4:	2300      	movs	r3, #0
}
 8009ed6:	4618      	mov	r0, r3
 8009ed8:	3708      	adds	r7, #8
 8009eda:	46bd      	mov	sp, r7
 8009edc:	bd80      	pop	{r7, pc}

08009ede <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009ede:	b580      	push	{r7, lr}
 8009ee0:	b086      	sub	sp, #24
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	60f8      	str	r0, [r7, #12]
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	607a      	str	r2, [r7, #4]
 8009eea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009eec:	7afb      	ldrb	r3, [r7, #11]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d14b      	bne.n	8009f8a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009ef8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f00:	2b03      	cmp	r3, #3
 8009f02:	d134      	bne.n	8009f6e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	68da      	ldr	r2, [r3, #12]
 8009f08:	697b      	ldr	r3, [r7, #20]
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d919      	bls.n	8009f44 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	68da      	ldr	r2, [r3, #12]
 8009f14:	697b      	ldr	r3, [r7, #20]
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	1ad2      	subs	r2, r2, r3
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	68da      	ldr	r2, [r3, #12]
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d203      	bcs.n	8009f32 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	e002      	b.n	8009f38 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009f36:	b29b      	uxth	r3, r3
 8009f38:	461a      	mov	r2, r3
 8009f3a:	6879      	ldr	r1, [r7, #4]
 8009f3c:	68f8      	ldr	r0, [r7, #12]
 8009f3e:	f000 ff5c 	bl	800adfa <USBD_CtlContinueRx>
 8009f42:	e038      	b.n	8009fb6 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f4a:	691b      	ldr	r3, [r3, #16]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d00a      	beq.n	8009f66 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009f56:	2b03      	cmp	r3, #3
 8009f58:	d105      	bne.n	8009f66 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009f66:	68f8      	ldr	r0, [r7, #12]
 8009f68:	f000 ff59 	bl	800ae1e <USBD_CtlSendStatus>
 8009f6c:	e023      	b.n	8009fb6 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009f74:	2b05      	cmp	r3, #5
 8009f76:	d11e      	bne.n	8009fb6 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009f80:	2100      	movs	r1, #0
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f001 faec 	bl	800b560 <USBD_LL_StallEP>
 8009f88:	e015      	b.n	8009fb6 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009f90:	699b      	ldr	r3, [r3, #24]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d00d      	beq.n	8009fb2 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009f9c:	2b03      	cmp	r3, #3
 8009f9e:	d108      	bne.n	8009fb2 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009fa6:	699b      	ldr	r3, [r3, #24]
 8009fa8:	7afa      	ldrb	r2, [r7, #11]
 8009faa:	4611      	mov	r1, r2
 8009fac:	68f8      	ldr	r0, [r7, #12]
 8009fae:	4798      	blx	r3
 8009fb0:	e001      	b.n	8009fb6 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009fb2:	2302      	movs	r3, #2
 8009fb4:	e000      	b.n	8009fb8 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009fb6:	2300      	movs	r3, #0
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3718      	adds	r7, #24
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b086      	sub	sp, #24
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	460b      	mov	r3, r1
 8009fca:	607a      	str	r2, [r7, #4]
 8009fcc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009fce:	7afb      	ldrb	r3, [r7, #11]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d17f      	bne.n	800a0d4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	3314      	adds	r3, #20
 8009fd8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d15c      	bne.n	800a09e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	68da      	ldr	r2, [r3, #12]
 8009fe8:	697b      	ldr	r3, [r7, #20]
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d915      	bls.n	800a01c <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009ff0:	697b      	ldr	r3, [r7, #20]
 8009ff2:	68da      	ldr	r2, [r3, #12]
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	691b      	ldr	r3, [r3, #16]
 8009ff8:	1ad2      	subs	r2, r2, r3
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	68db      	ldr	r3, [r3, #12]
 800a002:	b29b      	uxth	r3, r3
 800a004:	461a      	mov	r2, r3
 800a006:	6879      	ldr	r1, [r7, #4]
 800a008:	68f8      	ldr	r0, [r7, #12]
 800a00a:	f000 fec6 	bl	800ad9a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a00e:	2300      	movs	r3, #0
 800a010:	2200      	movs	r2, #0
 800a012:	2100      	movs	r1, #0
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	f001 fb50 	bl	800b6ba <USBD_LL_PrepareReceive>
 800a01a:	e04e      	b.n	800a0ba <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a01c:	697b      	ldr	r3, [r7, #20]
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	697a      	ldr	r2, [r7, #20]
 800a022:	6912      	ldr	r2, [r2, #16]
 800a024:	fbb3 f1f2 	udiv	r1, r3, r2
 800a028:	fb01 f202 	mul.w	r2, r1, r2
 800a02c:	1a9b      	subs	r3, r3, r2
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d11c      	bne.n	800a06c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	689a      	ldr	r2, [r3, #8]
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800a03a:	429a      	cmp	r2, r3
 800a03c:	d316      	bcc.n	800a06c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 800a03e:	697b      	ldr	r3, [r7, #20]
 800a040:	689a      	ldr	r2, [r3, #8]
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a048:	429a      	cmp	r2, r3
 800a04a:	d20f      	bcs.n	800a06c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a04c:	2200      	movs	r2, #0
 800a04e:	2100      	movs	r1, #0
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f000 fea2 	bl	800ad9a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2200      	movs	r2, #0
 800a05a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a05e:	2300      	movs	r3, #0
 800a060:	2200      	movs	r2, #0
 800a062:	2100      	movs	r1, #0
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	f001 fb28 	bl	800b6ba <USBD_LL_PrepareReceive>
 800a06a:	e026      	b.n	800a0ba <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d00a      	beq.n	800a08e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a07e:	2b03      	cmp	r3, #3
 800a080:	d105      	bne.n	800a08e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a08e:	2180      	movs	r1, #128	; 0x80
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f001 fa65 	bl	800b560 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f000 fed4 	bl	800ae44 <USBD_CtlReceiveStatus>
 800a09c:	e00d      	b.n	800a0ba <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a0a4:	2b04      	cmp	r3, #4
 800a0a6:	d004      	beq.n	800a0b2 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d103      	bne.n	800a0ba <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a0b2:	2180      	movs	r1, #128	; 0x80
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	f001 fa53 	bl	800b560 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d11d      	bne.n	800a100 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f7ff fe80 	bl	8009dca <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a0d2:	e015      	b.n	800a100 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0da:	695b      	ldr	r3, [r3, #20]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00d      	beq.n	800a0fc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a0e6:	2b03      	cmp	r3, #3
 800a0e8:	d108      	bne.n	800a0fc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a0f0:	695b      	ldr	r3, [r3, #20]
 800a0f2:	7afa      	ldrb	r2, [r7, #11]
 800a0f4:	4611      	mov	r1, r2
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	4798      	blx	r3
 800a0fa:	e001      	b.n	800a100 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a0fc:	2302      	movs	r3, #2
 800a0fe:	e000      	b.n	800a102 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a100:	2300      	movs	r3, #0
}
 800a102:	4618      	mov	r0, r3
 800a104:	3718      	adds	r7, #24
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}

0800a10a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a10a:	b580      	push	{r7, lr}
 800a10c:	b082      	sub	sp, #8
 800a10e:	af00      	add	r7, sp, #0
 800a110:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a112:	2340      	movs	r3, #64	; 0x40
 800a114:	2200      	movs	r2, #0
 800a116:	2100      	movs	r1, #0
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f001 f9dc 	bl	800b4d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2240      	movs	r2, #64	; 0x40
 800a12a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a12e:	2340      	movs	r3, #64	; 0x40
 800a130:	2200      	movs	r2, #0
 800a132:	2180      	movs	r1, #128	; 0x80
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f001 f9ce 	bl	800b4d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2201      	movs	r2, #1
 800a13e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2240      	movs	r2, #64	; 0x40
 800a144:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2201      	movs	r2, #1
 800a14a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2200      	movs	r2, #0
 800a152:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2200      	movs	r2, #0
 800a160:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d009      	beq.n	800a182 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a174:	685b      	ldr	r3, [r3, #4]
 800a176:	687a      	ldr	r2, [r7, #4]
 800a178:	6852      	ldr	r2, [r2, #4]
 800a17a:	b2d2      	uxtb	r2, r2
 800a17c:	4611      	mov	r1, r2
 800a17e:	6878      	ldr	r0, [r7, #4]
 800a180:	4798      	blx	r3
  }

  return USBD_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3708      	adds	r7, #8
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b083      	sub	sp, #12
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	460b      	mov	r3, r1
 800a196:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	78fa      	ldrb	r2, [r7, #3]
 800a19c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	370c      	adds	r7, #12
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1aa:	4770      	bx	lr

0800a1ac <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	2204      	movs	r2, #4
 800a1c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a1c8:	2300      	movs	r3, #0
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	370c      	adds	r7, #12
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d4:	4770      	bx	lr

0800a1d6 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a1d6:	b480      	push	{r7}
 800a1d8:	b083      	sub	sp, #12
 800a1da:	af00      	add	r7, sp, #0
 800a1dc:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1e4:	2b04      	cmp	r3, #4
 800a1e6:	d105      	bne.n	800a1f4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	370c      	adds	r7, #12
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a200:	4770      	bx	lr

0800a202 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b082      	sub	sp, #8
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a210:	2b03      	cmp	r3, #3
 800a212:	d10b      	bne.n	800a22c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a21a:	69db      	ldr	r3, [r3, #28]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d005      	beq.n	800a22c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a226:	69db      	ldr	r3, [r3, #28]
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a22c:	2300      	movs	r3, #0
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3708      	adds	r7, #8
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}
	...

0800a238 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a242:	2300      	movs	r3, #0
 800a244:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a24e:	2b40      	cmp	r3, #64	; 0x40
 800a250:	d005      	beq.n	800a25e <USBD_StdDevReq+0x26>
 800a252:	2b40      	cmp	r3, #64	; 0x40
 800a254:	d84f      	bhi.n	800a2f6 <USBD_StdDevReq+0xbe>
 800a256:	2b00      	cmp	r3, #0
 800a258:	d009      	beq.n	800a26e <USBD_StdDevReq+0x36>
 800a25a:	2b20      	cmp	r3, #32
 800a25c:	d14b      	bne.n	800a2f6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a264:	689b      	ldr	r3, [r3, #8]
 800a266:	6839      	ldr	r1, [r7, #0]
 800a268:	6878      	ldr	r0, [r7, #4]
 800a26a:	4798      	blx	r3
      break;
 800a26c:	e048      	b.n	800a300 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	785b      	ldrb	r3, [r3, #1]
 800a272:	2b09      	cmp	r3, #9
 800a274:	d839      	bhi.n	800a2ea <USBD_StdDevReq+0xb2>
 800a276:	a201      	add	r2, pc, #4	; (adr r2, 800a27c <USBD_StdDevReq+0x44>)
 800a278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a27c:	0800a2cd 	.word	0x0800a2cd
 800a280:	0800a2e1 	.word	0x0800a2e1
 800a284:	0800a2eb 	.word	0x0800a2eb
 800a288:	0800a2d7 	.word	0x0800a2d7
 800a28c:	0800a2eb 	.word	0x0800a2eb
 800a290:	0800a2af 	.word	0x0800a2af
 800a294:	0800a2a5 	.word	0x0800a2a5
 800a298:	0800a2eb 	.word	0x0800a2eb
 800a29c:	0800a2c3 	.word	0x0800a2c3
 800a2a0:	0800a2b9 	.word	0x0800a2b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a2a4:	6839      	ldr	r1, [r7, #0]
 800a2a6:	6878      	ldr	r0, [r7, #4]
 800a2a8:	f000 f9dc 	bl	800a664 <USBD_GetDescriptor>
          break;
 800a2ac:	e022      	b.n	800a2f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a2ae:	6839      	ldr	r1, [r7, #0]
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 fb3f 	bl	800a934 <USBD_SetAddress>
          break;
 800a2b6:	e01d      	b.n	800a2f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800a2b8:	6839      	ldr	r1, [r7, #0]
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 fb7e 	bl	800a9bc <USBD_SetConfig>
          break;
 800a2c0:	e018      	b.n	800a2f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a2c2:	6839      	ldr	r1, [r7, #0]
 800a2c4:	6878      	ldr	r0, [r7, #4]
 800a2c6:	f000 fc07 	bl	800aad8 <USBD_GetConfig>
          break;
 800a2ca:	e013      	b.n	800a2f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a2cc:	6839      	ldr	r1, [r7, #0]
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 fc37 	bl	800ab42 <USBD_GetStatus>
          break;
 800a2d4:	e00e      	b.n	800a2f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a2d6:	6839      	ldr	r1, [r7, #0]
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	f000 fc65 	bl	800aba8 <USBD_SetFeature>
          break;
 800a2de:	e009      	b.n	800a2f4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a2e0:	6839      	ldr	r1, [r7, #0]
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f000 fc74 	bl	800abd0 <USBD_ClrFeature>
          break;
 800a2e8:	e004      	b.n	800a2f4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800a2ea:	6839      	ldr	r1, [r7, #0]
 800a2ec:	6878      	ldr	r0, [r7, #4]
 800a2ee:	f000 fccd 	bl	800ac8c <USBD_CtlError>
          break;
 800a2f2:	bf00      	nop
      }
      break;
 800a2f4:	e004      	b.n	800a300 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800a2f6:	6839      	ldr	r1, [r7, #0]
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 fcc7 	bl	800ac8c <USBD_CtlError>
      break;
 800a2fe:	bf00      	nop
  }

  return ret;
 800a300:	7bfb      	ldrb	r3, [r7, #15]
}
 800a302:	4618      	mov	r0, r3
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop

0800a30c <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a316:	2300      	movs	r3, #0
 800a318:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a31a:	683b      	ldr	r3, [r7, #0]
 800a31c:	781b      	ldrb	r3, [r3, #0]
 800a31e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a322:	2b40      	cmp	r3, #64	; 0x40
 800a324:	d005      	beq.n	800a332 <USBD_StdItfReq+0x26>
 800a326:	2b40      	cmp	r3, #64	; 0x40
 800a328:	d82e      	bhi.n	800a388 <USBD_StdItfReq+0x7c>
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d001      	beq.n	800a332 <USBD_StdItfReq+0x26>
 800a32e:	2b20      	cmp	r3, #32
 800a330:	d12a      	bne.n	800a388 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a338:	3b01      	subs	r3, #1
 800a33a:	2b02      	cmp	r3, #2
 800a33c:	d81d      	bhi.n	800a37a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a33e:	683b      	ldr	r3, [r7, #0]
 800a340:	889b      	ldrh	r3, [r3, #4]
 800a342:	b2db      	uxtb	r3, r3
 800a344:	2b01      	cmp	r3, #1
 800a346:	d813      	bhi.n	800a370 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	6839      	ldr	r1, [r7, #0]
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	4798      	blx	r3
 800a356:	4603      	mov	r3, r0
 800a358:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a35a:	683b      	ldr	r3, [r7, #0]
 800a35c:	88db      	ldrh	r3, [r3, #6]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d110      	bne.n	800a384 <USBD_StdItfReq+0x78>
 800a362:	7bfb      	ldrb	r3, [r7, #15]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d10d      	bne.n	800a384 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f000 fd58 	bl	800ae1e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a36e:	e009      	b.n	800a384 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a370:	6839      	ldr	r1, [r7, #0]
 800a372:	6878      	ldr	r0, [r7, #4]
 800a374:	f000 fc8a 	bl	800ac8c <USBD_CtlError>
          break;
 800a378:	e004      	b.n	800a384 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a37a:	6839      	ldr	r1, [r7, #0]
 800a37c:	6878      	ldr	r0, [r7, #4]
 800a37e:	f000 fc85 	bl	800ac8c <USBD_CtlError>
          break;
 800a382:	e000      	b.n	800a386 <USBD_StdItfReq+0x7a>
          break;
 800a384:	bf00      	nop
      }
      break;
 800a386:	e004      	b.n	800a392 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a388:	6839      	ldr	r1, [r7, #0]
 800a38a:	6878      	ldr	r0, [r7, #4]
 800a38c:	f000 fc7e 	bl	800ac8c <USBD_CtlError>
      break;
 800a390:	bf00      	nop
  }

  return USBD_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}

0800a39c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a3aa:	683b      	ldr	r3, [r7, #0]
 800a3ac:	889b      	ldrh	r3, [r3, #4]
 800a3ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3b8:	2b40      	cmp	r3, #64	; 0x40
 800a3ba:	d007      	beq.n	800a3cc <USBD_StdEPReq+0x30>
 800a3bc:	2b40      	cmp	r3, #64	; 0x40
 800a3be:	f200 8146 	bhi.w	800a64e <USBD_StdEPReq+0x2b2>
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d00a      	beq.n	800a3dc <USBD_StdEPReq+0x40>
 800a3c6:	2b20      	cmp	r3, #32
 800a3c8:	f040 8141 	bne.w	800a64e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3d2:	689b      	ldr	r3, [r3, #8]
 800a3d4:	6839      	ldr	r1, [r7, #0]
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	4798      	blx	r3
      break;
 800a3da:	e13d      	b.n	800a658 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a3e4:	2b20      	cmp	r3, #32
 800a3e6:	d10a      	bne.n	800a3fe <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	6839      	ldr	r1, [r7, #0]
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	4798      	blx	r3
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a3fa:	7bfb      	ldrb	r3, [r7, #15]
 800a3fc:	e12d      	b.n	800a65a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	785b      	ldrb	r3, [r3, #1]
 800a402:	2b03      	cmp	r3, #3
 800a404:	d007      	beq.n	800a416 <USBD_StdEPReq+0x7a>
 800a406:	2b03      	cmp	r3, #3
 800a408:	f300 811b 	bgt.w	800a642 <USBD_StdEPReq+0x2a6>
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d072      	beq.n	800a4f6 <USBD_StdEPReq+0x15a>
 800a410:	2b01      	cmp	r3, #1
 800a412:	d03a      	beq.n	800a48a <USBD_StdEPReq+0xee>
 800a414:	e115      	b.n	800a642 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a41c:	2b02      	cmp	r3, #2
 800a41e:	d002      	beq.n	800a426 <USBD_StdEPReq+0x8a>
 800a420:	2b03      	cmp	r3, #3
 800a422:	d015      	beq.n	800a450 <USBD_StdEPReq+0xb4>
 800a424:	e02b      	b.n	800a47e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a426:	7bbb      	ldrb	r3, [r7, #14]
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d00c      	beq.n	800a446 <USBD_StdEPReq+0xaa>
 800a42c:	7bbb      	ldrb	r3, [r7, #14]
 800a42e:	2b80      	cmp	r3, #128	; 0x80
 800a430:	d009      	beq.n	800a446 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a432:	7bbb      	ldrb	r3, [r7, #14]
 800a434:	4619      	mov	r1, r3
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f001 f892 	bl	800b560 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a43c:	2180      	movs	r1, #128	; 0x80
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f001 f88e 	bl	800b560 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a444:	e020      	b.n	800a488 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a446:	6839      	ldr	r1, [r7, #0]
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f000 fc1f 	bl	800ac8c <USBD_CtlError>
              break;
 800a44e:	e01b      	b.n	800a488 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	885b      	ldrh	r3, [r3, #2]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d10e      	bne.n	800a476 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a458:	7bbb      	ldrb	r3, [r7, #14]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00b      	beq.n	800a476 <USBD_StdEPReq+0xda>
 800a45e:	7bbb      	ldrb	r3, [r7, #14]
 800a460:	2b80      	cmp	r3, #128	; 0x80
 800a462:	d008      	beq.n	800a476 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	88db      	ldrh	r3, [r3, #6]
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d104      	bne.n	800a476 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a46c:	7bbb      	ldrb	r3, [r7, #14]
 800a46e:	4619      	mov	r1, r3
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f001 f875 	bl	800b560 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a476:	6878      	ldr	r0, [r7, #4]
 800a478:	f000 fcd1 	bl	800ae1e <USBD_CtlSendStatus>

              break;
 800a47c:	e004      	b.n	800a488 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a47e:	6839      	ldr	r1, [r7, #0]
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 fc03 	bl	800ac8c <USBD_CtlError>
              break;
 800a486:	bf00      	nop
          }
          break;
 800a488:	e0e0      	b.n	800a64c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a490:	2b02      	cmp	r3, #2
 800a492:	d002      	beq.n	800a49a <USBD_StdEPReq+0xfe>
 800a494:	2b03      	cmp	r3, #3
 800a496:	d015      	beq.n	800a4c4 <USBD_StdEPReq+0x128>
 800a498:	e026      	b.n	800a4e8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a49a:	7bbb      	ldrb	r3, [r7, #14]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00c      	beq.n	800a4ba <USBD_StdEPReq+0x11e>
 800a4a0:	7bbb      	ldrb	r3, [r7, #14]
 800a4a2:	2b80      	cmp	r3, #128	; 0x80
 800a4a4:	d009      	beq.n	800a4ba <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a4a6:	7bbb      	ldrb	r3, [r7, #14]
 800a4a8:	4619      	mov	r1, r3
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f001 f858 	bl	800b560 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a4b0:	2180      	movs	r1, #128	; 0x80
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f001 f854 	bl	800b560 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a4b8:	e01c      	b.n	800a4f4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a4ba:	6839      	ldr	r1, [r7, #0]
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	f000 fbe5 	bl	800ac8c <USBD_CtlError>
              break;
 800a4c2:	e017      	b.n	800a4f4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	885b      	ldrh	r3, [r3, #2]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d112      	bne.n	800a4f2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a4cc:	7bbb      	ldrb	r3, [r7, #14]
 800a4ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d004      	beq.n	800a4e0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a4d6:	7bbb      	ldrb	r3, [r7, #14]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f001 f85f 	bl	800b59e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a4e0:	6878      	ldr	r0, [r7, #4]
 800a4e2:	f000 fc9c 	bl	800ae1e <USBD_CtlSendStatus>
              }
              break;
 800a4e6:	e004      	b.n	800a4f2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a4e8:	6839      	ldr	r1, [r7, #0]
 800a4ea:	6878      	ldr	r0, [r7, #4]
 800a4ec:	f000 fbce 	bl	800ac8c <USBD_CtlError>
              break;
 800a4f0:	e000      	b.n	800a4f4 <USBD_StdEPReq+0x158>
              break;
 800a4f2:	bf00      	nop
          }
          break;
 800a4f4:	e0aa      	b.n	800a64c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4fc:	2b02      	cmp	r3, #2
 800a4fe:	d002      	beq.n	800a506 <USBD_StdEPReq+0x16a>
 800a500:	2b03      	cmp	r3, #3
 800a502:	d032      	beq.n	800a56a <USBD_StdEPReq+0x1ce>
 800a504:	e097      	b.n	800a636 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a506:	7bbb      	ldrb	r3, [r7, #14]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d007      	beq.n	800a51c <USBD_StdEPReq+0x180>
 800a50c:	7bbb      	ldrb	r3, [r7, #14]
 800a50e:	2b80      	cmp	r3, #128	; 0x80
 800a510:	d004      	beq.n	800a51c <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a512:	6839      	ldr	r1, [r7, #0]
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 fbb9 	bl	800ac8c <USBD_CtlError>
                break;
 800a51a:	e091      	b.n	800a640 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a51c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a520:	2b00      	cmp	r3, #0
 800a522:	da0b      	bge.n	800a53c <USBD_StdEPReq+0x1a0>
 800a524:	7bbb      	ldrb	r3, [r7, #14]
 800a526:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a52a:	4613      	mov	r3, r2
 800a52c:	009b      	lsls	r3, r3, #2
 800a52e:	4413      	add	r3, r2
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	3310      	adds	r3, #16
 800a534:	687a      	ldr	r2, [r7, #4]
 800a536:	4413      	add	r3, r2
 800a538:	3304      	adds	r3, #4
 800a53a:	e00b      	b.n	800a554 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a53c:	7bbb      	ldrb	r3, [r7, #14]
 800a53e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a542:	4613      	mov	r3, r2
 800a544:	009b      	lsls	r3, r3, #2
 800a546:	4413      	add	r3, r2
 800a548:	009b      	lsls	r3, r3, #2
 800a54a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	4413      	add	r3, r2
 800a552:	3304      	adds	r3, #4
 800a554:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	2200      	movs	r2, #0
 800a55a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	2202      	movs	r2, #2
 800a560:	4619      	mov	r1, r3
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 fbfd 	bl	800ad62 <USBD_CtlSendData>
              break;
 800a568:	e06a      	b.n	800a640 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a56a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	da11      	bge.n	800a596 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a572:	7bbb      	ldrb	r3, [r7, #14]
 800a574:	f003 020f 	and.w	r2, r3, #15
 800a578:	6879      	ldr	r1, [r7, #4]
 800a57a:	4613      	mov	r3, r2
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	4413      	add	r3, r2
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	440b      	add	r3, r1
 800a584:	3318      	adds	r3, #24
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d117      	bne.n	800a5bc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a58c:	6839      	ldr	r1, [r7, #0]
 800a58e:	6878      	ldr	r0, [r7, #4]
 800a590:	f000 fb7c 	bl	800ac8c <USBD_CtlError>
                  break;
 800a594:	e054      	b.n	800a640 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a596:	7bbb      	ldrb	r3, [r7, #14]
 800a598:	f003 020f 	and.w	r2, r3, #15
 800a59c:	6879      	ldr	r1, [r7, #4]
 800a59e:	4613      	mov	r3, r2
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	4413      	add	r3, r2
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	440b      	add	r3, r1
 800a5a8:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d104      	bne.n	800a5bc <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a5b2:	6839      	ldr	r1, [r7, #0]
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 fb69 	bl	800ac8c <USBD_CtlError>
                  break;
 800a5ba:	e041      	b.n	800a640 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	da0b      	bge.n	800a5dc <USBD_StdEPReq+0x240>
 800a5c4:	7bbb      	ldrb	r3, [r7, #14]
 800a5c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a5ca:	4613      	mov	r3, r2
 800a5cc:	009b      	lsls	r3, r3, #2
 800a5ce:	4413      	add	r3, r2
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	3310      	adds	r3, #16
 800a5d4:	687a      	ldr	r2, [r7, #4]
 800a5d6:	4413      	add	r3, r2
 800a5d8:	3304      	adds	r3, #4
 800a5da:	e00b      	b.n	800a5f4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a5dc:	7bbb      	ldrb	r3, [r7, #14]
 800a5de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a5e2:	4613      	mov	r3, r2
 800a5e4:	009b      	lsls	r3, r3, #2
 800a5e6:	4413      	add	r3, r2
 800a5e8:	009b      	lsls	r3, r3, #2
 800a5ea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a5ee:	687a      	ldr	r2, [r7, #4]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	3304      	adds	r3, #4
 800a5f4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a5f6:	7bbb      	ldrb	r3, [r7, #14]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d002      	beq.n	800a602 <USBD_StdEPReq+0x266>
 800a5fc:	7bbb      	ldrb	r3, [r7, #14]
 800a5fe:	2b80      	cmp	r3, #128	; 0x80
 800a600:	d103      	bne.n	800a60a <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a602:	68bb      	ldr	r3, [r7, #8]
 800a604:	2200      	movs	r2, #0
 800a606:	601a      	str	r2, [r3, #0]
 800a608:	e00e      	b.n	800a628 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a60a:	7bbb      	ldrb	r3, [r7, #14]
 800a60c:	4619      	mov	r1, r3
 800a60e:	6878      	ldr	r0, [r7, #4]
 800a610:	f000 ffe4 	bl	800b5dc <USBD_LL_IsStallEP>
 800a614:	4603      	mov	r3, r0
 800a616:	2b00      	cmp	r3, #0
 800a618:	d003      	beq.n	800a622 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	2201      	movs	r2, #1
 800a61e:	601a      	str	r2, [r3, #0]
 800a620:	e002      	b.n	800a628 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	2200      	movs	r2, #0
 800a626:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	2202      	movs	r2, #2
 800a62c:	4619      	mov	r1, r3
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 fb97 	bl	800ad62 <USBD_CtlSendData>
              break;
 800a634:	e004      	b.n	800a640 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a636:	6839      	ldr	r1, [r7, #0]
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 fb27 	bl	800ac8c <USBD_CtlError>
              break;
 800a63e:	bf00      	nop
          }
          break;
 800a640:	e004      	b.n	800a64c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a642:	6839      	ldr	r1, [r7, #0]
 800a644:	6878      	ldr	r0, [r7, #4]
 800a646:	f000 fb21 	bl	800ac8c <USBD_CtlError>
          break;
 800a64a:	bf00      	nop
      }
      break;
 800a64c:	e004      	b.n	800a658 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a64e:	6839      	ldr	r1, [r7, #0]
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 fb1b 	bl	800ac8c <USBD_CtlError>
      break;
 800a656:	bf00      	nop
  }

  return ret;
 800a658:	7bfb      	ldrb	r3, [r7, #15]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}
	...

0800a664 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b084      	sub	sp, #16
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
 800a66c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a66e:	2300      	movs	r3, #0
 800a670:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a672:	2300      	movs	r3, #0
 800a674:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a676:	2300      	movs	r3, #0
 800a678:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	885b      	ldrh	r3, [r3, #2]
 800a67e:	0a1b      	lsrs	r3, r3, #8
 800a680:	b29b      	uxth	r3, r3
 800a682:	3b01      	subs	r3, #1
 800a684:	2b06      	cmp	r3, #6
 800a686:	f200 8128 	bhi.w	800a8da <USBD_GetDescriptor+0x276>
 800a68a:	a201      	add	r2, pc, #4	; (adr r2, 800a690 <USBD_GetDescriptor+0x2c>)
 800a68c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a690:	0800a6ad 	.word	0x0800a6ad
 800a694:	0800a6c5 	.word	0x0800a6c5
 800a698:	0800a705 	.word	0x0800a705
 800a69c:	0800a8db 	.word	0x0800a8db
 800a6a0:	0800a8db 	.word	0x0800a8db
 800a6a4:	0800a87b 	.word	0x0800a87b
 800a6a8:	0800a8a7 	.word	0x0800a8a7
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	7c12      	ldrb	r2, [r2, #16]
 800a6b8:	f107 0108 	add.w	r1, r7, #8
 800a6bc:	4610      	mov	r0, r2
 800a6be:	4798      	blx	r3
 800a6c0:	60f8      	str	r0, [r7, #12]
      break;
 800a6c2:	e112      	b.n	800a8ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	7c1b      	ldrb	r3, [r3, #16]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d10d      	bne.n	800a6e8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6d4:	f107 0208 	add.w	r2, r7, #8
 800a6d8:	4610      	mov	r0, r2
 800a6da:	4798      	blx	r3
 800a6dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	3301      	adds	r3, #1
 800a6e2:	2202      	movs	r2, #2
 800a6e4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a6e6:	e100      	b.n	800a8ea <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a6ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6f0:	f107 0208 	add.w	r2, r7, #8
 800a6f4:	4610      	mov	r0, r2
 800a6f6:	4798      	blx	r3
 800a6f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	2202      	movs	r2, #2
 800a700:	701a      	strb	r2, [r3, #0]
      break;
 800a702:	e0f2      	b.n	800a8ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	885b      	ldrh	r3, [r3, #2]
 800a708:	b2db      	uxtb	r3, r3
 800a70a:	2b05      	cmp	r3, #5
 800a70c:	f200 80ac 	bhi.w	800a868 <USBD_GetDescriptor+0x204>
 800a710:	a201      	add	r2, pc, #4	; (adr r2, 800a718 <USBD_GetDescriptor+0xb4>)
 800a712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a716:	bf00      	nop
 800a718:	0800a731 	.word	0x0800a731
 800a71c:	0800a765 	.word	0x0800a765
 800a720:	0800a799 	.word	0x0800a799
 800a724:	0800a7cd 	.word	0x0800a7cd
 800a728:	0800a801 	.word	0x0800a801
 800a72c:	0800a835 	.word	0x0800a835
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d00b      	beq.n	800a754 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	687a      	ldr	r2, [r7, #4]
 800a746:	7c12      	ldrb	r2, [r2, #16]
 800a748:	f107 0108 	add.w	r1, r7, #8
 800a74c:	4610      	mov	r0, r2
 800a74e:	4798      	blx	r3
 800a750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a752:	e091      	b.n	800a878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a754:	6839      	ldr	r1, [r7, #0]
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 fa98 	bl	800ac8c <USBD_CtlError>
            err++;
 800a75c:	7afb      	ldrb	r3, [r7, #11]
 800a75e:	3301      	adds	r3, #1
 800a760:	72fb      	strb	r3, [r7, #11]
          break;
 800a762:	e089      	b.n	800a878 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00b      	beq.n	800a788 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	687a      	ldr	r2, [r7, #4]
 800a77a:	7c12      	ldrb	r2, [r2, #16]
 800a77c:	f107 0108 	add.w	r1, r7, #8
 800a780:	4610      	mov	r0, r2
 800a782:	4798      	blx	r3
 800a784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a786:	e077      	b.n	800a878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a788:	6839      	ldr	r1, [r7, #0]
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 fa7e 	bl	800ac8c <USBD_CtlError>
            err++;
 800a790:	7afb      	ldrb	r3, [r7, #11]
 800a792:	3301      	adds	r3, #1
 800a794:	72fb      	strb	r3, [r7, #11]
          break;
 800a796:	e06f      	b.n	800a878 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d00b      	beq.n	800a7bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7aa:	68db      	ldr	r3, [r3, #12]
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	7c12      	ldrb	r2, [r2, #16]
 800a7b0:	f107 0108 	add.w	r1, r7, #8
 800a7b4:	4610      	mov	r0, r2
 800a7b6:	4798      	blx	r3
 800a7b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7ba:	e05d      	b.n	800a878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7bc:	6839      	ldr	r1, [r7, #0]
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 fa64 	bl	800ac8c <USBD_CtlError>
            err++;
 800a7c4:	7afb      	ldrb	r3, [r7, #11]
 800a7c6:	3301      	adds	r3, #1
 800a7c8:	72fb      	strb	r3, [r7, #11]
          break;
 800a7ca:	e055      	b.n	800a878 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7d2:	691b      	ldr	r3, [r3, #16]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d00b      	beq.n	800a7f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	7c12      	ldrb	r2, [r2, #16]
 800a7e4:	f107 0108 	add.w	r1, r7, #8
 800a7e8:	4610      	mov	r0, r2
 800a7ea:	4798      	blx	r3
 800a7ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a7ee:	e043      	b.n	800a878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a7f0:	6839      	ldr	r1, [r7, #0]
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 fa4a 	bl	800ac8c <USBD_CtlError>
            err++;
 800a7f8:	7afb      	ldrb	r3, [r7, #11]
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	72fb      	strb	r3, [r7, #11]
          break;
 800a7fe:	e03b      	b.n	800a878 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a806:	695b      	ldr	r3, [r3, #20]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d00b      	beq.n	800a824 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a812:	695b      	ldr	r3, [r3, #20]
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	7c12      	ldrb	r2, [r2, #16]
 800a818:	f107 0108 	add.w	r1, r7, #8
 800a81c:	4610      	mov	r0, r2
 800a81e:	4798      	blx	r3
 800a820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a822:	e029      	b.n	800a878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a824:	6839      	ldr	r1, [r7, #0]
 800a826:	6878      	ldr	r0, [r7, #4]
 800a828:	f000 fa30 	bl	800ac8c <USBD_CtlError>
            err++;
 800a82c:	7afb      	ldrb	r3, [r7, #11]
 800a82e:	3301      	adds	r3, #1
 800a830:	72fb      	strb	r3, [r7, #11]
          break;
 800a832:	e021      	b.n	800a878 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a83a:	699b      	ldr	r3, [r3, #24]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d00b      	beq.n	800a858 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800a846:	699b      	ldr	r3, [r3, #24]
 800a848:	687a      	ldr	r2, [r7, #4]
 800a84a:	7c12      	ldrb	r2, [r2, #16]
 800a84c:	f107 0108 	add.w	r1, r7, #8
 800a850:	4610      	mov	r0, r2
 800a852:	4798      	blx	r3
 800a854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a856:	e00f      	b.n	800a878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a858:	6839      	ldr	r1, [r7, #0]
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 fa16 	bl	800ac8c <USBD_CtlError>
            err++;
 800a860:	7afb      	ldrb	r3, [r7, #11]
 800a862:	3301      	adds	r3, #1
 800a864:	72fb      	strb	r3, [r7, #11]
          break;
 800a866:	e007      	b.n	800a878 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a868:	6839      	ldr	r1, [r7, #0]
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 fa0e 	bl	800ac8c <USBD_CtlError>
          err++;
 800a870:	7afb      	ldrb	r3, [r7, #11]
 800a872:	3301      	adds	r3, #1
 800a874:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a876:	e038      	b.n	800a8ea <USBD_GetDescriptor+0x286>
 800a878:	e037      	b.n	800a8ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	7c1b      	ldrb	r3, [r3, #16]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d109      	bne.n	800a896 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a88a:	f107 0208 	add.w	r2, r7, #8
 800a88e:	4610      	mov	r0, r2
 800a890:	4798      	blx	r3
 800a892:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a894:	e029      	b.n	800a8ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a896:	6839      	ldr	r1, [r7, #0]
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 f9f7 	bl	800ac8c <USBD_CtlError>
        err++;
 800a89e:	7afb      	ldrb	r3, [r7, #11]
 800a8a0:	3301      	adds	r3, #1
 800a8a2:	72fb      	strb	r3, [r7, #11]
      break;
 800a8a4:	e021      	b.n	800a8ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	7c1b      	ldrb	r3, [r3, #16]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d10d      	bne.n	800a8ca <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8b6:	f107 0208 	add.w	r2, r7, #8
 800a8ba:	4610      	mov	r0, r2
 800a8bc:	4798      	blx	r3
 800a8be:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	2207      	movs	r2, #7
 800a8c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a8c8:	e00f      	b.n	800a8ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a8ca:	6839      	ldr	r1, [r7, #0]
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f000 f9dd 	bl	800ac8c <USBD_CtlError>
        err++;
 800a8d2:	7afb      	ldrb	r3, [r7, #11]
 800a8d4:	3301      	adds	r3, #1
 800a8d6:	72fb      	strb	r3, [r7, #11]
      break;
 800a8d8:	e007      	b.n	800a8ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a8da:	6839      	ldr	r1, [r7, #0]
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 f9d5 	bl	800ac8c <USBD_CtlError>
      err++;
 800a8e2:	7afb      	ldrb	r3, [r7, #11]
 800a8e4:	3301      	adds	r3, #1
 800a8e6:	72fb      	strb	r3, [r7, #11]
      break;
 800a8e8:	bf00      	nop
  }

  if (err != 0U)
 800a8ea:	7afb      	ldrb	r3, [r7, #11]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d11c      	bne.n	800a92a <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a8f0:	893b      	ldrh	r3, [r7, #8]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d011      	beq.n	800a91a <USBD_GetDescriptor+0x2b6>
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	88db      	ldrh	r3, [r3, #6]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00d      	beq.n	800a91a <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	88da      	ldrh	r2, [r3, #6]
 800a902:	893b      	ldrh	r3, [r7, #8]
 800a904:	4293      	cmp	r3, r2
 800a906:	bf28      	it	cs
 800a908:	4613      	movcs	r3, r2
 800a90a:	b29b      	uxth	r3, r3
 800a90c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a90e:	893b      	ldrh	r3, [r7, #8]
 800a910:	461a      	mov	r2, r3
 800a912:	68f9      	ldr	r1, [r7, #12]
 800a914:	6878      	ldr	r0, [r7, #4]
 800a916:	f000 fa24 	bl	800ad62 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	88db      	ldrh	r3, [r3, #6]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d104      	bne.n	800a92c <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	f000 fa7b 	bl	800ae1e <USBD_CtlSendStatus>
 800a928:	e000      	b.n	800a92c <USBD_GetDescriptor+0x2c8>
    return;
 800a92a:	bf00      	nop
    }
  }
}
 800a92c:	3710      	adds	r7, #16
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop

0800a934 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
 800a93c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	889b      	ldrh	r3, [r3, #4]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d130      	bne.n	800a9a8 <USBD_SetAddress+0x74>
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	88db      	ldrh	r3, [r3, #6]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d12c      	bne.n	800a9a8 <USBD_SetAddress+0x74>
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	885b      	ldrh	r3, [r3, #2]
 800a952:	2b7f      	cmp	r3, #127	; 0x7f
 800a954:	d828      	bhi.n	800a9a8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	885b      	ldrh	r3, [r3, #2]
 800a95a:	b2db      	uxtb	r3, r3
 800a95c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a960:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a968:	2b03      	cmp	r3, #3
 800a96a:	d104      	bne.n	800a976 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a96c:	6839      	ldr	r1, [r7, #0]
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 f98c 	bl	800ac8c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a974:	e01d      	b.n	800a9b2 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	7bfa      	ldrb	r2, [r7, #15]
 800a97a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a97e:	7bfb      	ldrb	r3, [r7, #15]
 800a980:	4619      	mov	r1, r3
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 fe57 	bl	800b636 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 fa48 	bl	800ae1e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a98e:	7bfb      	ldrb	r3, [r7, #15]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d004      	beq.n	800a99e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2202      	movs	r2, #2
 800a998:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a99c:	e009      	b.n	800a9b2 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2201      	movs	r2, #1
 800a9a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9a6:	e004      	b.n	800a9b2 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a9a8:	6839      	ldr	r1, [r7, #0]
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 f96e 	bl	800ac8c <USBD_CtlError>
  }
}
 800a9b0:	bf00      	nop
 800a9b2:	bf00      	nop
 800a9b4:	3710      	adds	r7, #16
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	bd80      	pop	{r7, pc}
	...

0800a9bc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9bc:	b580      	push	{r7, lr}
 800a9be:	b082      	sub	sp, #8
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	885b      	ldrh	r3, [r3, #2]
 800a9ca:	b2da      	uxtb	r2, r3
 800a9cc:	4b41      	ldr	r3, [pc, #260]	; (800aad4 <USBD_SetConfig+0x118>)
 800a9ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a9d0:	4b40      	ldr	r3, [pc, #256]	; (800aad4 <USBD_SetConfig+0x118>)
 800a9d2:	781b      	ldrb	r3, [r3, #0]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d904      	bls.n	800a9e2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a9d8:	6839      	ldr	r1, [r7, #0]
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f956 	bl	800ac8c <USBD_CtlError>
 800a9e0:	e075      	b.n	800aace <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9e8:	2b02      	cmp	r3, #2
 800a9ea:	d002      	beq.n	800a9f2 <USBD_SetConfig+0x36>
 800a9ec:	2b03      	cmp	r3, #3
 800a9ee:	d023      	beq.n	800aa38 <USBD_SetConfig+0x7c>
 800a9f0:	e062      	b.n	800aab8 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a9f2:	4b38      	ldr	r3, [pc, #224]	; (800aad4 <USBD_SetConfig+0x118>)
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d01a      	beq.n	800aa30 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a9fa:	4b36      	ldr	r3, [pc, #216]	; (800aad4 <USBD_SetConfig+0x118>)
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	461a      	mov	r2, r3
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2203      	movs	r2, #3
 800aa08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aa0c:	4b31      	ldr	r3, [pc, #196]	; (800aad4 <USBD_SetConfig+0x118>)
 800aa0e:	781b      	ldrb	r3, [r3, #0]
 800aa10:	4619      	mov	r1, r3
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f7ff f9e4 	bl	8009de0 <USBD_SetClassConfig>
 800aa18:	4603      	mov	r3, r0
 800aa1a:	2b02      	cmp	r3, #2
 800aa1c:	d104      	bne.n	800aa28 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800aa1e:	6839      	ldr	r1, [r7, #0]
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	f000 f933 	bl	800ac8c <USBD_CtlError>
            return;
 800aa26:	e052      	b.n	800aace <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f000 f9f8 	bl	800ae1e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aa2e:	e04e      	b.n	800aace <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 f9f4 	bl	800ae1e <USBD_CtlSendStatus>
        break;
 800aa36:	e04a      	b.n	800aace <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800aa38:	4b26      	ldr	r3, [pc, #152]	; (800aad4 <USBD_SetConfig+0x118>)
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d112      	bne.n	800aa66 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2202      	movs	r2, #2
 800aa44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 800aa48:	4b22      	ldr	r3, [pc, #136]	; (800aad4 <USBD_SetConfig+0x118>)
 800aa4a:	781b      	ldrb	r3, [r3, #0]
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800aa52:	4b20      	ldr	r3, [pc, #128]	; (800aad4 <USBD_SetConfig+0x118>)
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	4619      	mov	r1, r3
 800aa58:	6878      	ldr	r0, [r7, #4]
 800aa5a:	f7ff f9e0 	bl	8009e1e <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f000 f9dd 	bl	800ae1e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800aa64:	e033      	b.n	800aace <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800aa66:	4b1b      	ldr	r3, [pc, #108]	; (800aad4 <USBD_SetConfig+0x118>)
 800aa68:	781b      	ldrb	r3, [r3, #0]
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	685b      	ldr	r3, [r3, #4]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d01d      	beq.n	800aab0 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	4619      	mov	r1, r3
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f7ff f9ce 	bl	8009e1e <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800aa82:	4b14      	ldr	r3, [pc, #80]	; (800aad4 <USBD_SetConfig+0x118>)
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	461a      	mov	r2, r3
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800aa8c:	4b11      	ldr	r3, [pc, #68]	; (800aad4 <USBD_SetConfig+0x118>)
 800aa8e:	781b      	ldrb	r3, [r3, #0]
 800aa90:	4619      	mov	r1, r3
 800aa92:	6878      	ldr	r0, [r7, #4]
 800aa94:	f7ff f9a4 	bl	8009de0 <USBD_SetClassConfig>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b02      	cmp	r3, #2
 800aa9c:	d104      	bne.n	800aaa8 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800aa9e:	6839      	ldr	r1, [r7, #0]
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f000 f8f3 	bl	800ac8c <USBD_CtlError>
            return;
 800aaa6:	e012      	b.n	800aace <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 f9b8 	bl	800ae1e <USBD_CtlSendStatus>
        break;
 800aaae:	e00e      	b.n	800aace <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f000 f9b4 	bl	800ae1e <USBD_CtlSendStatus>
        break;
 800aab6:	e00a      	b.n	800aace <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800aab8:	6839      	ldr	r1, [r7, #0]
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 f8e6 	bl	800ac8c <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800aac0:	4b04      	ldr	r3, [pc, #16]	; (800aad4 <USBD_SetConfig+0x118>)
 800aac2:	781b      	ldrb	r3, [r3, #0]
 800aac4:	4619      	mov	r1, r3
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f7ff f9a9 	bl	8009e1e <USBD_ClrClassConfig>
        break;
 800aacc:	bf00      	nop
    }
  }
}
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}
 800aad4:	20000548 	.word	0x20000548

0800aad8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b082      	sub	sp, #8
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
 800aae0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	88db      	ldrh	r3, [r3, #6]
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d004      	beq.n	800aaf4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aaea:	6839      	ldr	r1, [r7, #0]
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 f8cd 	bl	800ac8c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aaf2:	e022      	b.n	800ab3a <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aafa:	2b02      	cmp	r3, #2
 800aafc:	dc02      	bgt.n	800ab04 <USBD_GetConfig+0x2c>
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	dc03      	bgt.n	800ab0a <USBD_GetConfig+0x32>
 800ab02:	e015      	b.n	800ab30 <USBD_GetConfig+0x58>
 800ab04:	2b03      	cmp	r3, #3
 800ab06:	d00b      	beq.n	800ab20 <USBD_GetConfig+0x48>
 800ab08:	e012      	b.n	800ab30 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	3308      	adds	r3, #8
 800ab14:	2201      	movs	r2, #1
 800ab16:	4619      	mov	r1, r3
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 f922 	bl	800ad62 <USBD_CtlSendData>
        break;
 800ab1e:	e00c      	b.n	800ab3a <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	3304      	adds	r3, #4
 800ab24:	2201      	movs	r2, #1
 800ab26:	4619      	mov	r1, r3
 800ab28:	6878      	ldr	r0, [r7, #4]
 800ab2a:	f000 f91a 	bl	800ad62 <USBD_CtlSendData>
        break;
 800ab2e:	e004      	b.n	800ab3a <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800ab30:	6839      	ldr	r1, [r7, #0]
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f000 f8aa 	bl	800ac8c <USBD_CtlError>
        break;
 800ab38:	bf00      	nop
}
 800ab3a:	bf00      	nop
 800ab3c:	3708      	adds	r7, #8
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	bd80      	pop	{r7, pc}

0800ab42 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab42:	b580      	push	{r7, lr}
 800ab44:	b082      	sub	sp, #8
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
 800ab4a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab52:	3b01      	subs	r3, #1
 800ab54:	2b02      	cmp	r3, #2
 800ab56:	d81e      	bhi.n	800ab96 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ab58:	683b      	ldr	r3, [r7, #0]
 800ab5a:	88db      	ldrh	r3, [r3, #6]
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	d004      	beq.n	800ab6a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800ab60:	6839      	ldr	r1, [r7, #0]
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 f892 	bl	800ac8c <USBD_CtlError>
        break;
 800ab68:	e01a      	b.n	800aba0 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2201      	movs	r2, #1
 800ab6e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d005      	beq.n	800ab86 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	68db      	ldr	r3, [r3, #12]
 800ab7e:	f043 0202 	orr.w	r2, r3, #2
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	330c      	adds	r3, #12
 800ab8a:	2202      	movs	r2, #2
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 f8e7 	bl	800ad62 <USBD_CtlSendData>
      break;
 800ab94:	e004      	b.n	800aba0 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800ab96:	6839      	ldr	r1, [r7, #0]
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f000 f877 	bl	800ac8c <USBD_CtlError>
      break;
 800ab9e:	bf00      	nop
  }
}
 800aba0:	bf00      	nop
 800aba2:	3708      	adds	r7, #8
 800aba4:	46bd      	mov	sp, r7
 800aba6:	bd80      	pop	{r7, pc}

0800aba8 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b082      	sub	sp, #8
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
 800abb0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	885b      	ldrh	r3, [r3, #2]
 800abb6:	2b01      	cmp	r3, #1
 800abb8:	d106      	bne.n	800abc8 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2201      	movs	r2, #1
 800abbe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 f92b 	bl	800ae1e <USBD_CtlSendStatus>
  }
}
 800abc8:	bf00      	nop
 800abca:	3708      	adds	r7, #8
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abe0:	3b01      	subs	r3, #1
 800abe2:	2b02      	cmp	r3, #2
 800abe4:	d80b      	bhi.n	800abfe <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	885b      	ldrh	r3, [r3, #2]
 800abea:	2b01      	cmp	r3, #1
 800abec:	d10c      	bne.n	800ac08 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 f911 	bl	800ae1e <USBD_CtlSendStatus>
      }
      break;
 800abfc:	e004      	b.n	800ac08 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800abfe:	6839      	ldr	r1, [r7, #0]
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 f843 	bl	800ac8c <USBD_CtlError>
      break;
 800ac06:	e000      	b.n	800ac0a <USBD_ClrFeature+0x3a>
      break;
 800ac08:	bf00      	nop
  }
}
 800ac0a:	bf00      	nop
 800ac0c:	3708      	adds	r7, #8
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	bd80      	pop	{r7, pc}

0800ac12 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ac12:	b480      	push	{r7}
 800ac14:	b083      	sub	sp, #12
 800ac16:	af00      	add	r7, sp, #0
 800ac18:	6078      	str	r0, [r7, #4]
 800ac1a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	781a      	ldrb	r2, [r3, #0]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	785a      	ldrb	r2, [r3, #1]
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	3302      	adds	r3, #2
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	b29a      	uxth	r2, r3
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	3303      	adds	r3, #3
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	021b      	lsls	r3, r3, #8
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	4413      	add	r3, r2
 800ac42:	b29a      	uxth	r2, r3
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	3304      	adds	r3, #4
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	b29a      	uxth	r2, r3
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	3305      	adds	r3, #5
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	b29b      	uxth	r3, r3
 800ac58:	021b      	lsls	r3, r3, #8
 800ac5a:	b29b      	uxth	r3, r3
 800ac5c:	4413      	add	r3, r2
 800ac5e:	b29a      	uxth	r2, r3
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800ac64:	683b      	ldr	r3, [r7, #0]
 800ac66:	3306      	adds	r3, #6
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	b29a      	uxth	r2, r3
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	3307      	adds	r3, #7
 800ac70:	781b      	ldrb	r3, [r3, #0]
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	021b      	lsls	r3, r3, #8
 800ac76:	b29b      	uxth	r3, r3
 800ac78:	4413      	add	r3, r2
 800ac7a:	b29a      	uxth	r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	80da      	strh	r2, [r3, #6]

}
 800ac80:	bf00      	nop
 800ac82:	370c      	adds	r7, #12
 800ac84:	46bd      	mov	sp, r7
 800ac86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8a:	4770      	bx	lr

0800ac8c <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800ac8c:	b580      	push	{r7, lr}
 800ac8e:	b082      	sub	sp, #8
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
 800ac94:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800ac96:	2180      	movs	r1, #128	; 0x80
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 fc61 	bl	800b560 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800ac9e:	2100      	movs	r1, #0
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 fc5d 	bl	800b560 <USBD_LL_StallEP>
}
 800aca6:	bf00      	nop
 800aca8:	3708      	adds	r7, #8
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b086      	sub	sp, #24
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	60f8      	str	r0, [r7, #12]
 800acb6:	60b9      	str	r1, [r7, #8]
 800acb8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800acba:	2300      	movs	r3, #0
 800acbc:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d032      	beq.n	800ad2a <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800acc4:	68f8      	ldr	r0, [r7, #12]
 800acc6:	f000 f834 	bl	800ad32 <USBD_GetLen>
 800acca:	4603      	mov	r3, r0
 800accc:	3301      	adds	r3, #1
 800acce:	b29b      	uxth	r3, r3
 800acd0:	005b      	lsls	r3, r3, #1
 800acd2:	b29a      	uxth	r2, r3
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800acd8:	7dfb      	ldrb	r3, [r7, #23]
 800acda:	1c5a      	adds	r2, r3, #1
 800acdc:	75fa      	strb	r2, [r7, #23]
 800acde:	461a      	mov	r2, r3
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	4413      	add	r3, r2
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	7812      	ldrb	r2, [r2, #0]
 800ace8:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800acea:	7dfb      	ldrb	r3, [r7, #23]
 800acec:	1c5a      	adds	r2, r3, #1
 800acee:	75fa      	strb	r2, [r7, #23]
 800acf0:	461a      	mov	r2, r3
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	4413      	add	r3, r2
 800acf6:	2203      	movs	r2, #3
 800acf8:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800acfa:	e012      	b.n	800ad22 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	1c5a      	adds	r2, r3, #1
 800ad00:	60fa      	str	r2, [r7, #12]
 800ad02:	7dfa      	ldrb	r2, [r7, #23]
 800ad04:	1c51      	adds	r1, r2, #1
 800ad06:	75f9      	strb	r1, [r7, #23]
 800ad08:	4611      	mov	r1, r2
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	440a      	add	r2, r1
 800ad0e:	781b      	ldrb	r3, [r3, #0]
 800ad10:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800ad12:	7dfb      	ldrb	r3, [r7, #23]
 800ad14:	1c5a      	adds	r2, r3, #1
 800ad16:	75fa      	strb	r2, [r7, #23]
 800ad18:	461a      	mov	r2, r3
 800ad1a:	68bb      	ldr	r3, [r7, #8]
 800ad1c:	4413      	add	r3, r2
 800ad1e:	2200      	movs	r2, #0
 800ad20:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	781b      	ldrb	r3, [r3, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d1e8      	bne.n	800acfc <USBD_GetString+0x4e>
    }
  }
}
 800ad2a:	bf00      	nop
 800ad2c:	3718      	adds	r7, #24
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}

0800ad32 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ad32:	b480      	push	{r7}
 800ad34:	b085      	sub	sp, #20
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800ad3e:	e005      	b.n	800ad4c <USBD_GetLen+0x1a>
  {
    len++;
 800ad40:	7bfb      	ldrb	r3, [r7, #15]
 800ad42:	3301      	adds	r3, #1
 800ad44:	73fb      	strb	r3, [r7, #15]
    buf++;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d1f5      	bne.n	800ad40 <USBD_GetLen+0xe>
  }

  return len;
 800ad54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3714      	adds	r7, #20
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr

0800ad62 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800ad62:	b580      	push	{r7, lr}
 800ad64:	b084      	sub	sp, #16
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	60f8      	str	r0, [r7, #12]
 800ad6a:	60b9      	str	r1, [r7, #8]
 800ad6c:	4613      	mov	r3, r2
 800ad6e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2202      	movs	r2, #2
 800ad74:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ad78:	88fa      	ldrh	r2, [r7, #6]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800ad7e:	88fa      	ldrh	r2, [r7, #6]
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ad84:	88fb      	ldrh	r3, [r7, #6]
 800ad86:	68ba      	ldr	r2, [r7, #8]
 800ad88:	2100      	movs	r1, #0
 800ad8a:	68f8      	ldr	r0, [r7, #12]
 800ad8c:	f000 fc72 	bl	800b674 <USBD_LL_Transmit>

  return USBD_OK;
 800ad90:	2300      	movs	r3, #0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3710      	adds	r7, #16
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}

0800ad9a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b084      	sub	sp, #16
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	60f8      	str	r0, [r7, #12]
 800ada2:	60b9      	str	r1, [r7, #8]
 800ada4:	4613      	mov	r3, r2
 800ada6:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ada8:	88fb      	ldrh	r3, [r7, #6]
 800adaa:	68ba      	ldr	r2, [r7, #8]
 800adac:	2100      	movs	r1, #0
 800adae:	68f8      	ldr	r0, [r7, #12]
 800adb0:	f000 fc60 	bl	800b674 <USBD_LL_Transmit>

  return USBD_OK;
 800adb4:	2300      	movs	r3, #0
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800adbe:	b580      	push	{r7, lr}
 800adc0:	b084      	sub	sp, #16
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	60f8      	str	r0, [r7, #12]
 800adc6:	60b9      	str	r1, [r7, #8]
 800adc8:	4613      	mov	r3, r2
 800adca:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	2203      	movs	r2, #3
 800add0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800add4:	88fa      	ldrh	r2, [r7, #6]
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800addc:	88fa      	ldrh	r2, [r7, #6]
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ade4:	88fb      	ldrh	r3, [r7, #6]
 800ade6:	68ba      	ldr	r2, [r7, #8]
 800ade8:	2100      	movs	r1, #0
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f000 fc65 	bl	800b6ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800adf0:	2300      	movs	r3, #0
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3710      	adds	r7, #16
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b084      	sub	sp, #16
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	60f8      	str	r0, [r7, #12]
 800ae02:	60b9      	str	r1, [r7, #8]
 800ae04:	4613      	mov	r3, r2
 800ae06:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ae08:	88fb      	ldrh	r3, [r7, #6]
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	2100      	movs	r1, #0
 800ae0e:	68f8      	ldr	r0, [r7, #12]
 800ae10:	f000 fc53 	bl	800b6ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae14:	2300      	movs	r3, #0
}
 800ae16:	4618      	mov	r0, r3
 800ae18:	3710      	adds	r7, #16
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b082      	sub	sp, #8
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2204      	movs	r2, #4
 800ae2a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ae2e:	2300      	movs	r3, #0
 800ae30:	2200      	movs	r2, #0
 800ae32:	2100      	movs	r1, #0
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f000 fc1d 	bl	800b674 <USBD_LL_Transmit>

  return USBD_OK;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b082      	sub	sp, #8
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2205      	movs	r2, #5
 800ae50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae54:	2300      	movs	r3, #0
 800ae56:	2200      	movs	r2, #0
 800ae58:	2100      	movs	r1, #0
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 fc2d 	bl	800b6ba <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ae60:	2300      	movs	r3, #0
}
 800ae62:	4618      	mov	r0, r3
 800ae64:	3708      	adds	r7, #8
 800ae66:	46bd      	mov	sp, r7
 800ae68:	bd80      	pop	{r7, pc}
	...

0800ae6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ae70:	2200      	movs	r2, #0
 800ae72:	4912      	ldr	r1, [pc, #72]	; (800aebc <MX_USB_DEVICE_Init+0x50>)
 800ae74:	4812      	ldr	r0, [pc, #72]	; (800aec0 <MX_USB_DEVICE_Init+0x54>)
 800ae76:	f7fe ff57 	bl	8009d28 <USBD_Init>
 800ae7a:	4603      	mov	r3, r0
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d001      	beq.n	800ae84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ae80:	f7f6 f944 	bl	800110c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ae84:	490f      	ldr	r1, [pc, #60]	; (800aec4 <MX_USB_DEVICE_Init+0x58>)
 800ae86:	480e      	ldr	r0, [pc, #56]	; (800aec0 <MX_USB_DEVICE_Init+0x54>)
 800ae88:	f7fe ff79 	bl	8009d7e <USBD_RegisterClass>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d001      	beq.n	800ae96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ae92:	f7f6 f93b 	bl	800110c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ae96:	490c      	ldr	r1, [pc, #48]	; (800aec8 <MX_USB_DEVICE_Init+0x5c>)
 800ae98:	4809      	ldr	r0, [pc, #36]	; (800aec0 <MX_USB_DEVICE_Init+0x54>)
 800ae9a:	f7fe fea7 	bl	8009bec <USBD_CDC_RegisterInterface>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d001      	beq.n	800aea8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800aea4:	f7f6 f932 	bl	800110c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800aea8:	4805      	ldr	r0, [pc, #20]	; (800aec0 <MX_USB_DEVICE_Init+0x54>)
 800aeaa:	f7fe ff82 	bl	8009db2 <USBD_Start>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d001      	beq.n	800aeb8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800aeb4:	f7f6 f92a 	bl	800110c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800aeb8:	bf00      	nop
 800aeba:	bd80      	pop	{r7, pc}
 800aebc:	2000012c 	.word	0x2000012c
 800aec0:	2000054c 	.word	0x2000054c
 800aec4:	20000018 	.word	0x20000018
 800aec8:	2000011c 	.word	0x2000011c

0800aecc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800aed0:	2200      	movs	r2, #0
 800aed2:	4905      	ldr	r1, [pc, #20]	; (800aee8 <CDC_Init_FS+0x1c>)
 800aed4:	4805      	ldr	r0, [pc, #20]	; (800aeec <CDC_Init_FS+0x20>)
 800aed6:	f7fe fea0 	bl	8009c1a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800aeda:	4905      	ldr	r1, [pc, #20]	; (800aef0 <CDC_Init_FS+0x24>)
 800aedc:	4803      	ldr	r0, [pc, #12]	; (800aeec <CDC_Init_FS+0x20>)
 800aede:	f7fe feb6 	bl	8009c4e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800aee2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800aee4:	4618      	mov	r0, r3
 800aee6:	bd80      	pop	{r7, pc}
 800aee8:	20000c10 	.word	0x20000c10
 800aeec:	2000054c 	.word	0x2000054c
 800aef0:	20000810 	.word	0x20000810

0800aef4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aef4:	b480      	push	{r7}
 800aef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800aef8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	46bd      	mov	sp, r7
 800aefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af02:	4770      	bx	lr

0800af04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	4603      	mov	r3, r0
 800af0c:	6039      	str	r1, [r7, #0]
 800af0e:	71fb      	strb	r3, [r7, #7]
 800af10:	4613      	mov	r3, r2
 800af12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800af14:	79fb      	ldrb	r3, [r7, #7]
 800af16:	2b23      	cmp	r3, #35	; 0x23
 800af18:	d84a      	bhi.n	800afb0 <CDC_Control_FS+0xac>
 800af1a:	a201      	add	r2, pc, #4	; (adr r2, 800af20 <CDC_Control_FS+0x1c>)
 800af1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af20:	0800afb1 	.word	0x0800afb1
 800af24:	0800afb1 	.word	0x0800afb1
 800af28:	0800afb1 	.word	0x0800afb1
 800af2c:	0800afb1 	.word	0x0800afb1
 800af30:	0800afb1 	.word	0x0800afb1
 800af34:	0800afb1 	.word	0x0800afb1
 800af38:	0800afb1 	.word	0x0800afb1
 800af3c:	0800afb1 	.word	0x0800afb1
 800af40:	0800afb1 	.word	0x0800afb1
 800af44:	0800afb1 	.word	0x0800afb1
 800af48:	0800afb1 	.word	0x0800afb1
 800af4c:	0800afb1 	.word	0x0800afb1
 800af50:	0800afb1 	.word	0x0800afb1
 800af54:	0800afb1 	.word	0x0800afb1
 800af58:	0800afb1 	.word	0x0800afb1
 800af5c:	0800afb1 	.word	0x0800afb1
 800af60:	0800afb1 	.word	0x0800afb1
 800af64:	0800afb1 	.word	0x0800afb1
 800af68:	0800afb1 	.word	0x0800afb1
 800af6c:	0800afb1 	.word	0x0800afb1
 800af70:	0800afb1 	.word	0x0800afb1
 800af74:	0800afb1 	.word	0x0800afb1
 800af78:	0800afb1 	.word	0x0800afb1
 800af7c:	0800afb1 	.word	0x0800afb1
 800af80:	0800afb1 	.word	0x0800afb1
 800af84:	0800afb1 	.word	0x0800afb1
 800af88:	0800afb1 	.word	0x0800afb1
 800af8c:	0800afb1 	.word	0x0800afb1
 800af90:	0800afb1 	.word	0x0800afb1
 800af94:	0800afb1 	.word	0x0800afb1
 800af98:	0800afb1 	.word	0x0800afb1
 800af9c:	0800afb1 	.word	0x0800afb1
 800afa0:	0800afb1 	.word	0x0800afb1
 800afa4:	0800afb1 	.word	0x0800afb1
 800afa8:	0800afb1 	.word	0x0800afb1
 800afac:	0800afb1 	.word	0x0800afb1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800afb0:	bf00      	nop
  }

  return (USBD_OK);
 800afb2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b082      	sub	sp, #8
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800afca:	6879      	ldr	r1, [r7, #4]
 800afcc:	4805      	ldr	r0, [pc, #20]	; (800afe4 <CDC_Receive_FS+0x24>)
 800afce:	f7fe fe3e 	bl	8009c4e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800afd2:	4804      	ldr	r0, [pc, #16]	; (800afe4 <CDC_Receive_FS+0x24>)
 800afd4:	f7fe fe7e 	bl	8009cd4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800afd8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800afda:	4618      	mov	r0, r3
 800afdc:	3708      	adds	r7, #8
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	2000054c 	.word	0x2000054c

0800afe8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800afe8:	b580      	push	{r7, lr}
 800afea:	b084      	sub	sp, #16
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	460b      	mov	r3, r1
 800aff2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800aff4:	2300      	movs	r3, #0
 800aff6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800aff8:	4b0d      	ldr	r3, [pc, #52]	; (800b030 <CDC_Transmit_FS+0x48>)
 800affa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800affe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800b006:	2b00      	cmp	r3, #0
 800b008:	d001      	beq.n	800b00e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800b00a:	2301      	movs	r3, #1
 800b00c:	e00b      	b.n	800b026 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800b00e:	887b      	ldrh	r3, [r7, #2]
 800b010:	461a      	mov	r2, r3
 800b012:	6879      	ldr	r1, [r7, #4]
 800b014:	4806      	ldr	r0, [pc, #24]	; (800b030 <CDC_Transmit_FS+0x48>)
 800b016:	f7fe fe00 	bl	8009c1a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800b01a:	4805      	ldr	r0, [pc, #20]	; (800b030 <CDC_Transmit_FS+0x48>)
 800b01c:	f7fe fe2b 	bl	8009c76 <USBD_CDC_TransmitPacket>
 800b020:	4603      	mov	r3, r0
 800b022:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800b024:	7bfb      	ldrb	r3, [r7, #15]
}
 800b026:	4618      	mov	r0, r3
 800b028:	3710      	adds	r7, #16
 800b02a:	46bd      	mov	sp, r7
 800b02c:	bd80      	pop	{r7, pc}
 800b02e:	bf00      	nop
 800b030:	2000054c 	.word	0x2000054c

0800b034 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	4603      	mov	r3, r0
 800b03c:	6039      	str	r1, [r7, #0]
 800b03e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b040:	683b      	ldr	r3, [r7, #0]
 800b042:	2212      	movs	r2, #18
 800b044:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b046:	4b03      	ldr	r3, [pc, #12]	; (800b054 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b048:	4618      	mov	r0, r3
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr
 800b054:	20000148 	.word	0x20000148

0800b058 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	4603      	mov	r3, r0
 800b060:	6039      	str	r1, [r7, #0]
 800b062:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	2204      	movs	r2, #4
 800b068:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b06a:	4b03      	ldr	r3, [pc, #12]	; (800b078 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr
 800b078:	2000015c 	.word	0x2000015c

0800b07c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b07c:	b580      	push	{r7, lr}
 800b07e:	b082      	sub	sp, #8
 800b080:	af00      	add	r7, sp, #0
 800b082:	4603      	mov	r3, r0
 800b084:	6039      	str	r1, [r7, #0]
 800b086:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b088:	79fb      	ldrb	r3, [r7, #7]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d105      	bne.n	800b09a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b08e:	683a      	ldr	r2, [r7, #0]
 800b090:	4907      	ldr	r1, [pc, #28]	; (800b0b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b092:	4808      	ldr	r0, [pc, #32]	; (800b0b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b094:	f7ff fe0b 	bl	800acae <USBD_GetString>
 800b098:	e004      	b.n	800b0a4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b09a:	683a      	ldr	r2, [r7, #0]
 800b09c:	4904      	ldr	r1, [pc, #16]	; (800b0b0 <USBD_FS_ProductStrDescriptor+0x34>)
 800b09e:	4805      	ldr	r0, [pc, #20]	; (800b0b4 <USBD_FS_ProductStrDescriptor+0x38>)
 800b0a0:	f7ff fe05 	bl	800acae <USBD_GetString>
  }
  return USBD_StrDesc;
 800b0a4:	4b02      	ldr	r3, [pc, #8]	; (800b0b0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	20000c50 	.word	0x20000c50
 800b0b4:	0800b838 	.word	0x0800b838

0800b0b8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	4603      	mov	r3, r0
 800b0c0:	6039      	str	r1, [r7, #0]
 800b0c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b0c4:	683a      	ldr	r2, [r7, #0]
 800b0c6:	4904      	ldr	r1, [pc, #16]	; (800b0d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b0c8:	4804      	ldr	r0, [pc, #16]	; (800b0dc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b0ca:	f7ff fdf0 	bl	800acae <USBD_GetString>
  return USBD_StrDesc;
 800b0ce:	4b02      	ldr	r3, [pc, #8]	; (800b0d8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	3708      	adds	r7, #8
 800b0d4:	46bd      	mov	sp, r7
 800b0d6:	bd80      	pop	{r7, pc}
 800b0d8:	20000c50 	.word	0x20000c50
 800b0dc:	0800b850 	.word	0x0800b850

0800b0e0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	6039      	str	r1, [r7, #0]
 800b0ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	221a      	movs	r2, #26
 800b0f0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b0f2:	f000 f843 	bl	800b17c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b0f6:	4b02      	ldr	r3, [pc, #8]	; (800b100 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	3708      	adds	r7, #8
 800b0fc:	46bd      	mov	sp, r7
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	20000160 	.word	0x20000160

0800b104 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b082      	sub	sp, #8
 800b108:	af00      	add	r7, sp, #0
 800b10a:	4603      	mov	r3, r0
 800b10c:	6039      	str	r1, [r7, #0]
 800b10e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b110:	79fb      	ldrb	r3, [r7, #7]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d105      	bne.n	800b122 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b116:	683a      	ldr	r2, [r7, #0]
 800b118:	4907      	ldr	r1, [pc, #28]	; (800b138 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b11a:	4808      	ldr	r0, [pc, #32]	; (800b13c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b11c:	f7ff fdc7 	bl	800acae <USBD_GetString>
 800b120:	e004      	b.n	800b12c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b122:	683a      	ldr	r2, [r7, #0]
 800b124:	4904      	ldr	r1, [pc, #16]	; (800b138 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b126:	4805      	ldr	r0, [pc, #20]	; (800b13c <USBD_FS_ConfigStrDescriptor+0x38>)
 800b128:	f7ff fdc1 	bl	800acae <USBD_GetString>
  }
  return USBD_StrDesc;
 800b12c:	4b02      	ldr	r3, [pc, #8]	; (800b138 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3708      	adds	r7, #8
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	20000c50 	.word	0x20000c50
 800b13c:	0800b864 	.word	0x0800b864

0800b140 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b082      	sub	sp, #8
 800b144:	af00      	add	r7, sp, #0
 800b146:	4603      	mov	r3, r0
 800b148:	6039      	str	r1, [r7, #0]
 800b14a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b14c:	79fb      	ldrb	r3, [r7, #7]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d105      	bne.n	800b15e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b152:	683a      	ldr	r2, [r7, #0]
 800b154:	4907      	ldr	r1, [pc, #28]	; (800b174 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b156:	4808      	ldr	r0, [pc, #32]	; (800b178 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b158:	f7ff fda9 	bl	800acae <USBD_GetString>
 800b15c:	e004      	b.n	800b168 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b15e:	683a      	ldr	r2, [r7, #0]
 800b160:	4904      	ldr	r1, [pc, #16]	; (800b174 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b162:	4805      	ldr	r0, [pc, #20]	; (800b178 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b164:	f7ff fda3 	bl	800acae <USBD_GetString>
  }
  return USBD_StrDesc;
 800b168:	4b02      	ldr	r3, [pc, #8]	; (800b174 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3708      	adds	r7, #8
 800b16e:	46bd      	mov	sp, r7
 800b170:	bd80      	pop	{r7, pc}
 800b172:	bf00      	nop
 800b174:	20000c50 	.word	0x20000c50
 800b178:	0800b870 	.word	0x0800b870

0800b17c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b182:	4b0f      	ldr	r3, [pc, #60]	; (800b1c0 <Get_SerialNum+0x44>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b188:	4b0e      	ldr	r3, [pc, #56]	; (800b1c4 <Get_SerialNum+0x48>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b18e:	4b0e      	ldr	r3, [pc, #56]	; (800b1c8 <Get_SerialNum+0x4c>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b194:	68fa      	ldr	r2, [r7, #12]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	4413      	add	r3, r2
 800b19a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d009      	beq.n	800b1b6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b1a2:	2208      	movs	r2, #8
 800b1a4:	4909      	ldr	r1, [pc, #36]	; (800b1cc <Get_SerialNum+0x50>)
 800b1a6:	68f8      	ldr	r0, [r7, #12]
 800b1a8:	f000 f814 	bl	800b1d4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b1ac:	2204      	movs	r2, #4
 800b1ae:	4908      	ldr	r1, [pc, #32]	; (800b1d0 <Get_SerialNum+0x54>)
 800b1b0:	68b8      	ldr	r0, [r7, #8]
 800b1b2:	f000 f80f 	bl	800b1d4 <IntToUnicode>
  }
}
 800b1b6:	bf00      	nop
 800b1b8:	3710      	adds	r7, #16
 800b1ba:	46bd      	mov	sp, r7
 800b1bc:	bd80      	pop	{r7, pc}
 800b1be:	bf00      	nop
 800b1c0:	1ffff7ac 	.word	0x1ffff7ac
 800b1c4:	1ffff7b0 	.word	0x1ffff7b0
 800b1c8:	1ffff7b4 	.word	0x1ffff7b4
 800b1cc:	20000162 	.word	0x20000162
 800b1d0:	20000172 	.word	0x20000172

0800b1d4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b1d4:	b480      	push	{r7}
 800b1d6:	b087      	sub	sp, #28
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	60f8      	str	r0, [r7, #12]
 800b1dc:	60b9      	str	r1, [r7, #8]
 800b1de:	4613      	mov	r3, r2
 800b1e0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	75fb      	strb	r3, [r7, #23]
 800b1ea:	e027      	b.n	800b23c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	0f1b      	lsrs	r3, r3, #28
 800b1f0:	2b09      	cmp	r3, #9
 800b1f2:	d80b      	bhi.n	800b20c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	0f1b      	lsrs	r3, r3, #28
 800b1f8:	b2da      	uxtb	r2, r3
 800b1fa:	7dfb      	ldrb	r3, [r7, #23]
 800b1fc:	005b      	lsls	r3, r3, #1
 800b1fe:	4619      	mov	r1, r3
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	440b      	add	r3, r1
 800b204:	3230      	adds	r2, #48	; 0x30
 800b206:	b2d2      	uxtb	r2, r2
 800b208:	701a      	strb	r2, [r3, #0]
 800b20a:	e00a      	b.n	800b222 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	0f1b      	lsrs	r3, r3, #28
 800b210:	b2da      	uxtb	r2, r3
 800b212:	7dfb      	ldrb	r3, [r7, #23]
 800b214:	005b      	lsls	r3, r3, #1
 800b216:	4619      	mov	r1, r3
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	440b      	add	r3, r1
 800b21c:	3237      	adds	r2, #55	; 0x37
 800b21e:	b2d2      	uxtb	r2, r2
 800b220:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	011b      	lsls	r3, r3, #4
 800b226:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b228:	7dfb      	ldrb	r3, [r7, #23]
 800b22a:	005b      	lsls	r3, r3, #1
 800b22c:	3301      	adds	r3, #1
 800b22e:	68ba      	ldr	r2, [r7, #8]
 800b230:	4413      	add	r3, r2
 800b232:	2200      	movs	r2, #0
 800b234:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b236:	7dfb      	ldrb	r3, [r7, #23]
 800b238:	3301      	adds	r3, #1
 800b23a:	75fb      	strb	r3, [r7, #23]
 800b23c:	7dfa      	ldrb	r2, [r7, #23]
 800b23e:	79fb      	ldrb	r3, [r7, #7]
 800b240:	429a      	cmp	r2, r3
 800b242:	d3d3      	bcc.n	800b1ec <IntToUnicode+0x18>
  }
}
 800b244:	bf00      	nop
 800b246:	bf00      	nop
 800b248:	371c      	adds	r7, #28
 800b24a:	46bd      	mov	sp, r7
 800b24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b250:	4770      	bx	lr
	...

0800b254 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b254:	b580      	push	{r7, lr}
 800b256:	b084      	sub	sp, #16
 800b258:	af00      	add	r7, sp, #0
 800b25a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	4a11      	ldr	r2, [pc, #68]	; (800b2a8 <HAL_PCD_MspInit+0x54>)
 800b262:	4293      	cmp	r3, r2
 800b264:	d11b      	bne.n	800b29e <HAL_PCD_MspInit+0x4a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b266:	4b11      	ldr	r3, [pc, #68]	; (800b2ac <HAL_PCD_MspInit+0x58>)
 800b268:	69db      	ldr	r3, [r3, #28]
 800b26a:	4a10      	ldr	r2, [pc, #64]	; (800b2ac <HAL_PCD_MspInit+0x58>)
 800b26c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b270:	61d3      	str	r3, [r2, #28]
 800b272:	4b0e      	ldr	r3, [pc, #56]	; (800b2ac <HAL_PCD_MspInit+0x58>)
 800b274:	69db      	ldr	r3, [r3, #28]
 800b276:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b27a:	60fb      	str	r3, [r7, #12]
 800b27c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_CAN_TX_IRQn, 0, 0);
 800b27e:	2200      	movs	r2, #0
 800b280:	2100      	movs	r1, #0
 800b282:	2013      	movs	r0, #19
 800b284:	f7f7 fa11 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_CAN_TX_IRQn);
 800b288:	2013      	movs	r0, #19
 800b28a:	f7f7 fa2a 	bl	80026e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_CAN_RX0_IRQn, 0, 0);
 800b28e:	2200      	movs	r2, #0
 800b290:	2100      	movs	r1, #0
 800b292:	2014      	movs	r0, #20
 800b294:	f7f7 fa09 	bl	80026aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN_RX0_IRQn);
 800b298:	2014      	movs	r0, #20
 800b29a:	f7f7 fa22 	bl	80026e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b29e:	bf00      	nop
 800b2a0:	3710      	adds	r7, #16
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	40005c00 	.word	0x40005c00
 800b2ac:	40021000 	.word	0x40021000

0800b2b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	4610      	mov	r0, r2
 800b2c8:	f7fe fdbc 	bl	8009e44 <USBD_LL_SetupStage>
}
 800b2cc:	bf00      	nop
 800b2ce:	3708      	adds	r7, #8
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}

0800b2d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b2d4:	b580      	push	{r7, lr}
 800b2d6:	b082      	sub	sp, #8
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
 800b2dc:	460b      	mov	r3, r1
 800b2de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b2e6:	78fa      	ldrb	r2, [r7, #3]
 800b2e8:	6879      	ldr	r1, [r7, #4]
 800b2ea:	4613      	mov	r3, r2
 800b2ec:	009b      	lsls	r3, r3, #2
 800b2ee:	4413      	add	r3, r2
 800b2f0:	00db      	lsls	r3, r3, #3
 800b2f2:	440b      	add	r3, r1
 800b2f4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800b2f8:	681a      	ldr	r2, [r3, #0]
 800b2fa:	78fb      	ldrb	r3, [r7, #3]
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	f7fe fdee 	bl	8009ede <USBD_LL_DataOutStage>
}
 800b302:	bf00      	nop
 800b304:	3708      	adds	r7, #8
 800b306:	46bd      	mov	sp, r7
 800b308:	bd80      	pop	{r7, pc}

0800b30a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b30a:	b580      	push	{r7, lr}
 800b30c:	b082      	sub	sp, #8
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
 800b312:	460b      	mov	r3, r1
 800b314:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800b31c:	78fa      	ldrb	r2, [r7, #3]
 800b31e:	6879      	ldr	r1, [r7, #4]
 800b320:	4613      	mov	r3, r2
 800b322:	009b      	lsls	r3, r3, #2
 800b324:	4413      	add	r3, r2
 800b326:	00db      	lsls	r3, r3, #3
 800b328:	440b      	add	r3, r1
 800b32a:	333c      	adds	r3, #60	; 0x3c
 800b32c:	681a      	ldr	r2, [r3, #0]
 800b32e:	78fb      	ldrb	r3, [r7, #3]
 800b330:	4619      	mov	r1, r3
 800b332:	f7fe fe45 	bl	8009fc0 <USBD_LL_DataInStage>
}
 800b336:	bf00      	nop
 800b338:	3708      	adds	r7, #8
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}

0800b33e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b33e:	b580      	push	{r7, lr}
 800b340:	b082      	sub	sp, #8
 800b342:	af00      	add	r7, sp, #0
 800b344:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7fe ff58 	bl	800a202 <USBD_LL_SOF>
}
 800b352:	bf00      	nop
 800b354:	3708      	adds	r7, #8
 800b356:	46bd      	mov	sp, r7
 800b358:	bd80      	pop	{r7, pc}

0800b35a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b35a:	b580      	push	{r7, lr}
 800b35c:	b084      	sub	sp, #16
 800b35e:	af00      	add	r7, sp, #0
 800b360:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b362:	2301      	movs	r3, #1
 800b364:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	689b      	ldr	r3, [r3, #8]
 800b36a:	2b02      	cmp	r3, #2
 800b36c:	d001      	beq.n	800b372 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b36e:	f7f5 fecd 	bl	800110c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b378:	7bfa      	ldrb	r2, [r7, #15]
 800b37a:	4611      	mov	r1, r2
 800b37c:	4618      	mov	r0, r3
 800b37e:	f7fe ff05 	bl	800a18c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b388:	4618      	mov	r0, r3
 800b38a:	f7fe febe 	bl	800a10a <USBD_LL_Reset>
}
 800b38e:	bf00      	nop
 800b390:	3710      	adds	r7, #16
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
	...

0800b398 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b082      	sub	sp, #8
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b3a6:	4618      	mov	r0, r3
 800b3a8:	f7fe ff00 	bl	800a1ac <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	699b      	ldr	r3, [r3, #24]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d005      	beq.n	800b3c0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b3b4:	4b04      	ldr	r3, [pc, #16]	; (800b3c8 <HAL_PCD_SuspendCallback+0x30>)
 800b3b6:	691b      	ldr	r3, [r3, #16]
 800b3b8:	4a03      	ldr	r2, [pc, #12]	; (800b3c8 <HAL_PCD_SuspendCallback+0x30>)
 800b3ba:	f043 0306 	orr.w	r3, r3, #6
 800b3be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b3c0:	bf00      	nop
 800b3c2:	3708      	adds	r7, #8
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	bd80      	pop	{r7, pc}
 800b3c8:	e000ed00 	.word	0xe000ed00

0800b3cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7fe fefb 	bl	800a1d6 <USBD_LL_Resume>
}
 800b3e0:	bf00      	nop
 800b3e2:	3708      	adds	r7, #8
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b082      	sub	sp, #8
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b3f0:	4a29      	ldr	r2, [pc, #164]	; (800b498 <USBD_LL_Init+0xb0>)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	4a27      	ldr	r2, [pc, #156]	; (800b498 <USBD_LL_Init+0xb0>)
 800b3fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b400:	4b25      	ldr	r3, [pc, #148]	; (800b498 <USBD_LL_Init+0xb0>)
 800b402:	4a26      	ldr	r2, [pc, #152]	; (800b49c <USBD_LL_Init+0xb4>)
 800b404:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b406:	4b24      	ldr	r3, [pc, #144]	; (800b498 <USBD_LL_Init+0xb0>)
 800b408:	2208      	movs	r2, #8
 800b40a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b40c:	4b22      	ldr	r3, [pc, #136]	; (800b498 <USBD_LL_Init+0xb0>)
 800b40e:	2202      	movs	r2, #2
 800b410:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b412:	4b21      	ldr	r3, [pc, #132]	; (800b498 <USBD_LL_Init+0xb0>)
 800b414:	2202      	movs	r2, #2
 800b416:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b418:	4b1f      	ldr	r3, [pc, #124]	; (800b498 <USBD_LL_Init+0xb0>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b41e:	4b1e      	ldr	r3, [pc, #120]	; (800b498 <USBD_LL_Init+0xb0>)
 800b420:	2200      	movs	r2, #0
 800b422:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b424:	4b1c      	ldr	r3, [pc, #112]	; (800b498 <USBD_LL_Init+0xb0>)
 800b426:	2200      	movs	r2, #0
 800b428:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b42a:	481b      	ldr	r0, [pc, #108]	; (800b498 <USBD_LL_Init+0xb0>)
 800b42c:	f7f7 fc3c 	bl	8002ca8 <HAL_PCD_Init>
 800b430:	4603      	mov	r3, r0
 800b432:	2b00      	cmp	r3, #0
 800b434:	d001      	beq.n	800b43a <USBD_LL_Init+0x52>
  {
    Error_Handler( );
 800b436:	f7f5 fe69 	bl	800110c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b440:	2318      	movs	r3, #24
 800b442:	2200      	movs	r2, #0
 800b444:	2100      	movs	r1, #0
 800b446:	f7f9 f8af 	bl	80045a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b450:	2358      	movs	r3, #88	; 0x58
 800b452:	2200      	movs	r2, #0
 800b454:	2180      	movs	r1, #128	; 0x80
 800b456:	f7f9 f8a7 	bl	80045a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b460:	23c0      	movs	r3, #192	; 0xc0
 800b462:	2200      	movs	r2, #0
 800b464:	2181      	movs	r1, #129	; 0x81
 800b466:	f7f9 f89f 	bl	80045a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b470:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b474:	2200      	movs	r2, #0
 800b476:	2101      	movs	r1, #1
 800b478:	f7f9 f896 	bl	80045a8 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b482:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b486:	2200      	movs	r2, #0
 800b488:	2182      	movs	r1, #130	; 0x82
 800b48a:	f7f9 f88d 	bl	80045a8 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b48e:	2300      	movs	r3, #0
}
 800b490:	4618      	mov	r0, r3
 800b492:	3708      	adds	r7, #8
 800b494:	46bd      	mov	sp, r7
 800b496:	bd80      	pop	{r7, pc}
 800b498:	20000e50 	.word	0x20000e50
 800b49c:	40005c00 	.word	0x40005c00

0800b4a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b084      	sub	sp, #16
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	f7f7 fcc8 	bl	8002e4c <HAL_PCD_Start>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b4c0:	7bfb      	ldrb	r3, [r7, #15]
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f000 f954 	bl	800b770 <USBD_Get_USB_Status>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}

0800b4d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b4d6:	b580      	push	{r7, lr}
 800b4d8:	b084      	sub	sp, #16
 800b4da:	af00      	add	r7, sp, #0
 800b4dc:	6078      	str	r0, [r7, #4]
 800b4de:	4608      	mov	r0, r1
 800b4e0:	4611      	mov	r1, r2
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	70fb      	strb	r3, [r7, #3]
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	70bb      	strb	r3, [r7, #2]
 800b4ec:	4613      	mov	r3, r2
 800b4ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b4fe:	78bb      	ldrb	r3, [r7, #2]
 800b500:	883a      	ldrh	r2, [r7, #0]
 800b502:	78f9      	ldrb	r1, [r7, #3]
 800b504:	f7f7 fdc1 	bl	800308a <HAL_PCD_EP_Open>
 800b508:	4603      	mov	r3, r0
 800b50a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b50c:	7bfb      	ldrb	r3, [r7, #15]
 800b50e:	4618      	mov	r0, r3
 800b510:	f000 f92e 	bl	800b770 <USBD_Get_USB_Status>
 800b514:	4603      	mov	r3, r0
 800b516:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b518:	7bbb      	ldrb	r3, [r7, #14]
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}

0800b522 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b522:	b580      	push	{r7, lr}
 800b524:	b084      	sub	sp, #16
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
 800b52a:	460b      	mov	r3, r1
 800b52c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b52e:	2300      	movs	r3, #0
 800b530:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b532:	2300      	movs	r3, #0
 800b534:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b53c:	78fa      	ldrb	r2, [r7, #3]
 800b53e:	4611      	mov	r1, r2
 800b540:	4618      	mov	r0, r3
 800b542:	f7f7 fdff 	bl	8003144 <HAL_PCD_EP_Close>
 800b546:	4603      	mov	r3, r0
 800b548:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b54a:	7bfb      	ldrb	r3, [r7, #15]
 800b54c:	4618      	mov	r0, r3
 800b54e:	f000 f90f 	bl	800b770 <USBD_Get_USB_Status>
 800b552:	4603      	mov	r3, r0
 800b554:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b556:	7bbb      	ldrb	r3, [r7, #14]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3710      	adds	r7, #16
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b084      	sub	sp, #16
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	460b      	mov	r3, r1
 800b56a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b56c:	2300      	movs	r3, #0
 800b56e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b570:	2300      	movs	r3, #0
 800b572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b57a:	78fa      	ldrb	r2, [r7, #3]
 800b57c:	4611      	mov	r1, r2
 800b57e:	4618      	mov	r0, r3
 800b580:	f7f7 fea8 	bl	80032d4 <HAL_PCD_EP_SetStall>
 800b584:	4603      	mov	r3, r0
 800b586:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b588:	7bfb      	ldrb	r3, [r7, #15]
 800b58a:	4618      	mov	r0, r3
 800b58c:	f000 f8f0 	bl	800b770 <USBD_Get_USB_Status>
 800b590:	4603      	mov	r3, r0
 800b592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b594:	7bbb      	ldrb	r3, [r7, #14]
}
 800b596:	4618      	mov	r0, r3
 800b598:	3710      	adds	r7, #16
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}

0800b59e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b59e:	b580      	push	{r7, lr}
 800b5a0:	b084      	sub	sp, #16
 800b5a2:	af00      	add	r7, sp, #0
 800b5a4:	6078      	str	r0, [r7, #4]
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5b8:	78fa      	ldrb	r2, [r7, #3]
 800b5ba:	4611      	mov	r1, r2
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7f7 fedb 	bl	8003378 <HAL_PCD_EP_ClrStall>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b5c6:	7bfb      	ldrb	r3, [r7, #15]
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f000 f8d1 	bl	800b770 <USBD_Get_USB_Status>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	3710      	adds	r7, #16
 800b5d8:	46bd      	mov	sp, r7
 800b5da:	bd80      	pop	{r7, pc}

0800b5dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
 800b5e4:	460b      	mov	r3, r1
 800b5e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b5ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b5f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	da0c      	bge.n	800b612 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b5f8:	78fb      	ldrb	r3, [r7, #3]
 800b5fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b5fe:	68f9      	ldr	r1, [r7, #12]
 800b600:	1c5a      	adds	r2, r3, #1
 800b602:	4613      	mov	r3, r2
 800b604:	009b      	lsls	r3, r3, #2
 800b606:	4413      	add	r3, r2
 800b608:	00db      	lsls	r3, r3, #3
 800b60a:	440b      	add	r3, r1
 800b60c:	3302      	adds	r3, #2
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	e00b      	b.n	800b62a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b612:	78fb      	ldrb	r3, [r7, #3]
 800b614:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b618:	68f9      	ldr	r1, [r7, #12]
 800b61a:	4613      	mov	r3, r2
 800b61c:	009b      	lsls	r3, r3, #2
 800b61e:	4413      	add	r3, r2
 800b620:	00db      	lsls	r3, r3, #3
 800b622:	440b      	add	r3, r1
 800b624:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800b628:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3714      	adds	r7, #20
 800b62e:	46bd      	mov	sp, r7
 800b630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b634:	4770      	bx	lr

0800b636 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b636:	b580      	push	{r7, lr}
 800b638:	b084      	sub	sp, #16
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
 800b63e:	460b      	mov	r3, r1
 800b640:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b642:	2300      	movs	r3, #0
 800b644:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b646:	2300      	movs	r3, #0
 800b648:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b650:	78fa      	ldrb	r2, [r7, #3]
 800b652:	4611      	mov	r1, r2
 800b654:	4618      	mov	r0, r3
 800b656:	f7f7 fcf3 	bl	8003040 <HAL_PCD_SetAddress>
 800b65a:	4603      	mov	r3, r0
 800b65c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b65e:	7bfb      	ldrb	r3, [r7, #15]
 800b660:	4618      	mov	r0, r3
 800b662:	f000 f885 	bl	800b770 <USBD_Get_USB_Status>
 800b666:	4603      	mov	r3, r0
 800b668:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b66a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3710      	adds	r7, #16
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b086      	sub	sp, #24
 800b678:	af00      	add	r7, sp, #0
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	607a      	str	r2, [r7, #4]
 800b67e:	461a      	mov	r2, r3
 800b680:	460b      	mov	r3, r1
 800b682:	72fb      	strb	r3, [r7, #11]
 800b684:	4613      	mov	r3, r2
 800b686:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b688:	2300      	movs	r3, #0
 800b68a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b68c:	2300      	movs	r3, #0
 800b68e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b696:	893b      	ldrh	r3, [r7, #8]
 800b698:	7af9      	ldrb	r1, [r7, #11]
 800b69a:	687a      	ldr	r2, [r7, #4]
 800b69c:	f7f7 fde3 	bl	8003266 <HAL_PCD_EP_Transmit>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6a4:	7dfb      	ldrb	r3, [r7, #23]
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	f000 f862 	bl	800b770 <USBD_Get_USB_Status>
 800b6ac:	4603      	mov	r3, r0
 800b6ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b6b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800b6b2:	4618      	mov	r0, r3
 800b6b4:	3718      	adds	r7, #24
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}

0800b6ba <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b6ba:	b580      	push	{r7, lr}
 800b6bc:	b086      	sub	sp, #24
 800b6be:	af00      	add	r7, sp, #0
 800b6c0:	60f8      	str	r0, [r7, #12]
 800b6c2:	607a      	str	r2, [r7, #4]
 800b6c4:	461a      	mov	r2, r3
 800b6c6:	460b      	mov	r3, r1
 800b6c8:	72fb      	strb	r3, [r7, #11]
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800b6dc:	893b      	ldrh	r3, [r7, #8]
 800b6de:	7af9      	ldrb	r1, [r7, #11]
 800b6e0:	687a      	ldr	r2, [r7, #4]
 800b6e2:	f7f7 fd77 	bl	80031d4 <HAL_PCD_EP_Receive>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b6ea:	7dfb      	ldrb	r3, [r7, #23]
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f000 f83f 	bl	800b770 <USBD_Get_USB_Status>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b6f6:	7dbb      	ldrb	r3, [r7, #22]
}
 800b6f8:	4618      	mov	r0, r3
 800b6fa:	3718      	adds	r7, #24
 800b6fc:	46bd      	mov	sp, r7
 800b6fe:	bd80      	pop	{r7, pc}

0800b700 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b700:	b580      	push	{r7, lr}
 800b702:	b082      	sub	sp, #8
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	460b      	mov	r3, r1
 800b70a:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b712:	78fa      	ldrb	r2, [r7, #3]
 800b714:	4611      	mov	r1, r2
 800b716:	4618      	mov	r0, r3
 800b718:	f7f7 fd8d 	bl	8003236 <HAL_PCD_EP_GetRxCount>
 800b71c:	4603      	mov	r3, r0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
	...

0800b728 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b728:	b480      	push	{r7}
 800b72a:	b083      	sub	sp, #12
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b730:	4b03      	ldr	r3, [pc, #12]	; (800b740 <USBD_static_malloc+0x18>)
}
 800b732:	4618      	mov	r0, r3
 800b734:	370c      	adds	r7, #12
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr
 800b73e:	bf00      	nop
 800b740:	2000113c 	.word	0x2000113c

0800b744 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]

}
 800b74c:	bf00      	nop
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b758:	b480      	push	{r7}
 800b75a:	b083      	sub	sp, #12
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
 800b760:	460b      	mov	r3, r1
 800b762:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b764:	bf00      	nop
 800b766:	370c      	adds	r7, #12
 800b768:	46bd      	mov	sp, r7
 800b76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76e:	4770      	bx	lr

0800b770 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b770:	b480      	push	{r7}
 800b772:	b085      	sub	sp, #20
 800b774:	af00      	add	r7, sp, #0
 800b776:	4603      	mov	r3, r0
 800b778:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b77a:	2300      	movs	r3, #0
 800b77c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b77e:	79fb      	ldrb	r3, [r7, #7]
 800b780:	2b03      	cmp	r3, #3
 800b782:	d817      	bhi.n	800b7b4 <USBD_Get_USB_Status+0x44>
 800b784:	a201      	add	r2, pc, #4	; (adr r2, 800b78c <USBD_Get_USB_Status+0x1c>)
 800b786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78a:	bf00      	nop
 800b78c:	0800b79d 	.word	0x0800b79d
 800b790:	0800b7a3 	.word	0x0800b7a3
 800b794:	0800b7a9 	.word	0x0800b7a9
 800b798:	0800b7af 	.word	0x0800b7af
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b79c:	2300      	movs	r3, #0
 800b79e:	73fb      	strb	r3, [r7, #15]
    break;
 800b7a0:	e00b      	b.n	800b7ba <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b7a2:	2302      	movs	r3, #2
 800b7a4:	73fb      	strb	r3, [r7, #15]
    break;
 800b7a6:	e008      	b.n	800b7ba <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	73fb      	strb	r3, [r7, #15]
    break;
 800b7ac:	e005      	b.n	800b7ba <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b7ae:	2302      	movs	r3, #2
 800b7b0:	73fb      	strb	r3, [r7, #15]
    break;
 800b7b2:	e002      	b.n	800b7ba <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b7b4:	2302      	movs	r3, #2
 800b7b6:	73fb      	strb	r3, [r7, #15]
    break;
 800b7b8:	bf00      	nop
  }
  return usb_status;
 800b7ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3714      	adds	r7, #20
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c6:	4770      	bx	lr

0800b7c8 <memset>:
 800b7c8:	4402      	add	r2, r0
 800b7ca:	4603      	mov	r3, r0
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	d100      	bne.n	800b7d2 <memset+0xa>
 800b7d0:	4770      	bx	lr
 800b7d2:	f803 1b01 	strb.w	r1, [r3], #1
 800b7d6:	e7f9      	b.n	800b7cc <memset+0x4>

0800b7d8 <__libc_init_array>:
 800b7d8:	b570      	push	{r4, r5, r6, lr}
 800b7da:	4d0d      	ldr	r5, [pc, #52]	; (800b810 <__libc_init_array+0x38>)
 800b7dc:	4c0d      	ldr	r4, [pc, #52]	; (800b814 <__libc_init_array+0x3c>)
 800b7de:	1b64      	subs	r4, r4, r5
 800b7e0:	10a4      	asrs	r4, r4, #2
 800b7e2:	2600      	movs	r6, #0
 800b7e4:	42a6      	cmp	r6, r4
 800b7e6:	d109      	bne.n	800b7fc <__libc_init_array+0x24>
 800b7e8:	4d0b      	ldr	r5, [pc, #44]	; (800b818 <__libc_init_array+0x40>)
 800b7ea:	4c0c      	ldr	r4, [pc, #48]	; (800b81c <__libc_init_array+0x44>)
 800b7ec:	f000 f818 	bl	800b820 <_init>
 800b7f0:	1b64      	subs	r4, r4, r5
 800b7f2:	10a4      	asrs	r4, r4, #2
 800b7f4:	2600      	movs	r6, #0
 800b7f6:	42a6      	cmp	r6, r4
 800b7f8:	d105      	bne.n	800b806 <__libc_init_array+0x2e>
 800b7fa:	bd70      	pop	{r4, r5, r6, pc}
 800b7fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b800:	4798      	blx	r3
 800b802:	3601      	adds	r6, #1
 800b804:	e7ee      	b.n	800b7e4 <__libc_init_array+0xc>
 800b806:	f855 3b04 	ldr.w	r3, [r5], #4
 800b80a:	4798      	blx	r3
 800b80c:	3601      	adds	r6, #1
 800b80e:	e7f2      	b.n	800b7f6 <__libc_init_array+0x1e>
 800b810:	0800b8b8 	.word	0x0800b8b8
 800b814:	0800b8b8 	.word	0x0800b8b8
 800b818:	0800b8b8 	.word	0x0800b8b8
 800b81c:	0800b8bc 	.word	0x0800b8bc

0800b820 <_init>:
 800b820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b822:	bf00      	nop
 800b824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b826:	bc08      	pop	{r3}
 800b828:	469e      	mov	lr, r3
 800b82a:	4770      	bx	lr

0800b82c <_fini>:
 800b82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b82e:	bf00      	nop
 800b830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b832:	bc08      	pop	{r3}
 800b834:	469e      	mov	lr, r3
 800b836:	4770      	bx	lr
