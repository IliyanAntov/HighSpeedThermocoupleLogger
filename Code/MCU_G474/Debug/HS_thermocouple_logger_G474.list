
HS_thermocouple_logger_G474.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bee8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a0  0800c0c0  0800c0c0  0001c0c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c260  0800c260  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800c260  0800c260  0001c260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c268  0800c268  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c268  0800c268  0001c268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c26c  0800c26c  0001c26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800c270  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f94  200001dc  0800c44c  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  20002170  0800c44c  00022170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000210fc  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044e1  00000000  00000000  0004134b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b30  00000000  00000000  00045830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014fd  00000000  00000000  00047360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b66a  00000000  00000000  0004885d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021936  00000000  00000000  00073ec7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00117473  00000000  00000000  000957fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007688  00000000  00000000  001acc70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001b42f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001dc 	.word	0x200001dc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c0a8 	.word	0x0800c0a8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001e0 	.word	0x200001e0
 8000214:	0800c0a8 	.word	0x0800c0a8

08000218 <strcmp>:
 8000218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000220:	2a01      	cmp	r2, #1
 8000222:	bf28      	it	cs
 8000224:	429a      	cmpcs	r2, r3
 8000226:	d0f7      	beq.n	8000218 <strcmp>
 8000228:	1ad0      	subs	r0, r2, r3
 800022a:	4770      	bx	lr

0800022c <strlen>:
 800022c:	4603      	mov	r3, r0
 800022e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000232:	2a00      	cmp	r2, #0
 8000234:	d1fb      	bne.n	800022e <strlen+0x2>
 8000236:	1a18      	subs	r0, r3, r0
 8000238:	3801      	subs	r0, #1
 800023a:	4770      	bx	lr

0800023c <__aeabi_uldivmod>:
 800023c:	b953      	cbnz	r3, 8000254 <__aeabi_uldivmod+0x18>
 800023e:	b94a      	cbnz	r2, 8000254 <__aeabi_uldivmod+0x18>
 8000240:	2900      	cmp	r1, #0
 8000242:	bf08      	it	eq
 8000244:	2800      	cmpeq	r0, #0
 8000246:	bf1c      	itt	ne
 8000248:	f04f 31ff 	movne.w	r1, #4294967295
 800024c:	f04f 30ff 	movne.w	r0, #4294967295
 8000250:	f000 b970 	b.w	8000534 <__aeabi_idiv0>
 8000254:	f1ad 0c08 	sub.w	ip, sp, #8
 8000258:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800025c:	f000 f806 	bl	800026c <__udivmoddi4>
 8000260:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000268:	b004      	add	sp, #16
 800026a:	4770      	bx	lr

0800026c <__udivmoddi4>:
 800026c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000270:	9e08      	ldr	r6, [sp, #32]
 8000272:	460d      	mov	r5, r1
 8000274:	4604      	mov	r4, r0
 8000276:	460f      	mov	r7, r1
 8000278:	2b00      	cmp	r3, #0
 800027a:	d14a      	bne.n	8000312 <__udivmoddi4+0xa6>
 800027c:	428a      	cmp	r2, r1
 800027e:	4694      	mov	ip, r2
 8000280:	d965      	bls.n	800034e <__udivmoddi4+0xe2>
 8000282:	fab2 f382 	clz	r3, r2
 8000286:	b143      	cbz	r3, 800029a <__udivmoddi4+0x2e>
 8000288:	fa02 fc03 	lsl.w	ip, r2, r3
 800028c:	f1c3 0220 	rsb	r2, r3, #32
 8000290:	409f      	lsls	r7, r3
 8000292:	fa20 f202 	lsr.w	r2, r0, r2
 8000296:	4317      	orrs	r7, r2
 8000298:	409c      	lsls	r4, r3
 800029a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029e:	fa1f f58c 	uxth.w	r5, ip
 80002a2:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a6:	0c22      	lsrs	r2, r4, #16
 80002a8:	fb0e 7711 	mls	r7, lr, r1, r7
 80002ac:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b0:	fb01 f005 	mul.w	r0, r1, r5
 80002b4:	4290      	cmp	r0, r2
 80002b6:	d90a      	bls.n	80002ce <__udivmoddi4+0x62>
 80002b8:	eb1c 0202 	adds.w	r2, ip, r2
 80002bc:	f101 37ff 	add.w	r7, r1, #4294967295
 80002c0:	f080 811c 	bcs.w	80004fc <__udivmoddi4+0x290>
 80002c4:	4290      	cmp	r0, r2
 80002c6:	f240 8119 	bls.w	80004fc <__udivmoddi4+0x290>
 80002ca:	3902      	subs	r1, #2
 80002cc:	4462      	add	r2, ip
 80002ce:	1a12      	subs	r2, r2, r0
 80002d0:	b2a4      	uxth	r4, r4
 80002d2:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d6:	fb0e 2210 	mls	r2, lr, r0, r2
 80002da:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002de:	fb00 f505 	mul.w	r5, r0, r5
 80002e2:	42a5      	cmp	r5, r4
 80002e4:	d90a      	bls.n	80002fc <__udivmoddi4+0x90>
 80002e6:	eb1c 0404 	adds.w	r4, ip, r4
 80002ea:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ee:	f080 8107 	bcs.w	8000500 <__udivmoddi4+0x294>
 80002f2:	42a5      	cmp	r5, r4
 80002f4:	f240 8104 	bls.w	8000500 <__udivmoddi4+0x294>
 80002f8:	4464      	add	r4, ip
 80002fa:	3802      	subs	r0, #2
 80002fc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000300:	1b64      	subs	r4, r4, r5
 8000302:	2100      	movs	r1, #0
 8000304:	b11e      	cbz	r6, 800030e <__udivmoddi4+0xa2>
 8000306:	40dc      	lsrs	r4, r3
 8000308:	2300      	movs	r3, #0
 800030a:	e9c6 4300 	strd	r4, r3, [r6]
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	428b      	cmp	r3, r1
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0xbc>
 8000316:	2e00      	cmp	r6, #0
 8000318:	f000 80ed 	beq.w	80004f6 <__udivmoddi4+0x28a>
 800031c:	2100      	movs	r1, #0
 800031e:	e9c6 0500 	strd	r0, r5, [r6]
 8000322:	4608      	mov	r0, r1
 8000324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000328:	fab3 f183 	clz	r1, r3
 800032c:	2900      	cmp	r1, #0
 800032e:	d149      	bne.n	80003c4 <__udivmoddi4+0x158>
 8000330:	42ab      	cmp	r3, r5
 8000332:	d302      	bcc.n	800033a <__udivmoddi4+0xce>
 8000334:	4282      	cmp	r2, r0
 8000336:	f200 80f8 	bhi.w	800052a <__udivmoddi4+0x2be>
 800033a:	1a84      	subs	r4, r0, r2
 800033c:	eb65 0203 	sbc.w	r2, r5, r3
 8000340:	2001      	movs	r0, #1
 8000342:	4617      	mov	r7, r2
 8000344:	2e00      	cmp	r6, #0
 8000346:	d0e2      	beq.n	800030e <__udivmoddi4+0xa2>
 8000348:	e9c6 4700 	strd	r4, r7, [r6]
 800034c:	e7df      	b.n	800030e <__udivmoddi4+0xa2>
 800034e:	b902      	cbnz	r2, 8000352 <__udivmoddi4+0xe6>
 8000350:	deff      	udf	#255	; 0xff
 8000352:	fab2 f382 	clz	r3, r2
 8000356:	2b00      	cmp	r3, #0
 8000358:	f040 8090 	bne.w	800047c <__udivmoddi4+0x210>
 800035c:	1a8a      	subs	r2, r1, r2
 800035e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000362:	fa1f fe8c 	uxth.w	lr, ip
 8000366:	2101      	movs	r1, #1
 8000368:	fbb2 f5f7 	udiv	r5, r2, r7
 800036c:	fb07 2015 	mls	r0, r7, r5, r2
 8000370:	0c22      	lsrs	r2, r4, #16
 8000372:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000376:	fb0e f005 	mul.w	r0, lr, r5
 800037a:	4290      	cmp	r0, r2
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x124>
 800037e:	eb1c 0202 	adds.w	r2, ip, r2
 8000382:	f105 38ff 	add.w	r8, r5, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x122>
 8000388:	4290      	cmp	r0, r2
 800038a:	f200 80cb 	bhi.w	8000524 <__udivmoddi4+0x2b8>
 800038e:	4645      	mov	r5, r8
 8000390:	1a12      	subs	r2, r2, r0
 8000392:	b2a4      	uxth	r4, r4
 8000394:	fbb2 f0f7 	udiv	r0, r2, r7
 8000398:	fb07 2210 	mls	r2, r7, r0, r2
 800039c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003a0:	fb0e fe00 	mul.w	lr, lr, r0
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	d908      	bls.n	80003ba <__udivmoddi4+0x14e>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80003b0:	d202      	bcs.n	80003b8 <__udivmoddi4+0x14c>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f200 80bb 	bhi.w	800052e <__udivmoddi4+0x2c2>
 80003b8:	4610      	mov	r0, r2
 80003ba:	eba4 040e 	sub.w	r4, r4, lr
 80003be:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003c2:	e79f      	b.n	8000304 <__udivmoddi4+0x98>
 80003c4:	f1c1 0720 	rsb	r7, r1, #32
 80003c8:	408b      	lsls	r3, r1
 80003ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d2:	fa05 f401 	lsl.w	r4, r5, r1
 80003d6:	fa20 f307 	lsr.w	r3, r0, r7
 80003da:	40fd      	lsrs	r5, r7
 80003dc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e0:	4323      	orrs	r3, r4
 80003e2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	fb09 5518 	mls	r5, r9, r8, r5
 80003ee:	0c1c      	lsrs	r4, r3, #16
 80003f0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f4:	fb08 f50e 	mul.w	r5, r8, lr
 80003f8:	42a5      	cmp	r5, r4
 80003fa:	fa02 f201 	lsl.w	r2, r2, r1
 80003fe:	fa00 f001 	lsl.w	r0, r0, r1
 8000402:	d90b      	bls.n	800041c <__udivmoddi4+0x1b0>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f108 3aff 	add.w	sl, r8, #4294967295
 800040c:	f080 8088 	bcs.w	8000520 <__udivmoddi4+0x2b4>
 8000410:	42a5      	cmp	r5, r4
 8000412:	f240 8085 	bls.w	8000520 <__udivmoddi4+0x2b4>
 8000416:	f1a8 0802 	sub.w	r8, r8, #2
 800041a:	4464      	add	r4, ip
 800041c:	1b64      	subs	r4, r4, r5
 800041e:	b29d      	uxth	r5, r3
 8000420:	fbb4 f3f9 	udiv	r3, r4, r9
 8000424:	fb09 4413 	mls	r4, r9, r3, r4
 8000428:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800042c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x1da>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f103 35ff 	add.w	r5, r3, #4294967295
 800043c:	d26c      	bcs.n	8000518 <__udivmoddi4+0x2ac>
 800043e:	45a6      	cmp	lr, r4
 8000440:	d96a      	bls.n	8000518 <__udivmoddi4+0x2ac>
 8000442:	3b02      	subs	r3, #2
 8000444:	4464      	add	r4, ip
 8000446:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800044a:	fba3 9502 	umull	r9, r5, r3, r2
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	42ac      	cmp	r4, r5
 8000454:	46c8      	mov	r8, r9
 8000456:	46ae      	mov	lr, r5
 8000458:	d356      	bcc.n	8000508 <__udivmoddi4+0x29c>
 800045a:	d053      	beq.n	8000504 <__udivmoddi4+0x298>
 800045c:	b156      	cbz	r6, 8000474 <__udivmoddi4+0x208>
 800045e:	ebb0 0208 	subs.w	r2, r0, r8
 8000462:	eb64 040e 	sbc.w	r4, r4, lr
 8000466:	fa04 f707 	lsl.w	r7, r4, r7
 800046a:	40ca      	lsrs	r2, r1
 800046c:	40cc      	lsrs	r4, r1
 800046e:	4317      	orrs	r7, r2
 8000470:	e9c6 7400 	strd	r7, r4, [r6]
 8000474:	4618      	mov	r0, r3
 8000476:	2100      	movs	r1, #0
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	f1c3 0120 	rsb	r1, r3, #32
 8000480:	fa02 fc03 	lsl.w	ip, r2, r3
 8000484:	fa20 f201 	lsr.w	r2, r0, r1
 8000488:	fa25 f101 	lsr.w	r1, r5, r1
 800048c:	409d      	lsls	r5, r3
 800048e:	432a      	orrs	r2, r5
 8000490:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000494:	fa1f fe8c 	uxth.w	lr, ip
 8000498:	fbb1 f0f7 	udiv	r0, r1, r7
 800049c:	fb07 1510 	mls	r5, r7, r0, r1
 80004a0:	0c11      	lsrs	r1, r2, #16
 80004a2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a6:	fb00 f50e 	mul.w	r5, r0, lr
 80004aa:	428d      	cmp	r5, r1
 80004ac:	fa04 f403 	lsl.w	r4, r4, r3
 80004b0:	d908      	bls.n	80004c4 <__udivmoddi4+0x258>
 80004b2:	eb1c 0101 	adds.w	r1, ip, r1
 80004b6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ba:	d22f      	bcs.n	800051c <__udivmoddi4+0x2b0>
 80004bc:	428d      	cmp	r5, r1
 80004be:	d92d      	bls.n	800051c <__udivmoddi4+0x2b0>
 80004c0:	3802      	subs	r0, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	1b49      	subs	r1, r1, r5
 80004c6:	b292      	uxth	r2, r2
 80004c8:	fbb1 f5f7 	udiv	r5, r1, r7
 80004cc:	fb07 1115 	mls	r1, r7, r5, r1
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	fb05 f10e 	mul.w	r1, r5, lr
 80004d8:	4291      	cmp	r1, r2
 80004da:	d908      	bls.n	80004ee <__udivmoddi4+0x282>
 80004dc:	eb1c 0202 	adds.w	r2, ip, r2
 80004e0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e4:	d216      	bcs.n	8000514 <__udivmoddi4+0x2a8>
 80004e6:	4291      	cmp	r1, r2
 80004e8:	d914      	bls.n	8000514 <__udivmoddi4+0x2a8>
 80004ea:	3d02      	subs	r5, #2
 80004ec:	4462      	add	r2, ip
 80004ee:	1a52      	subs	r2, r2, r1
 80004f0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f4:	e738      	b.n	8000368 <__udivmoddi4+0xfc>
 80004f6:	4631      	mov	r1, r6
 80004f8:	4630      	mov	r0, r6
 80004fa:	e708      	b.n	800030e <__udivmoddi4+0xa2>
 80004fc:	4639      	mov	r1, r7
 80004fe:	e6e6      	b.n	80002ce <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e6fb      	b.n	80002fc <__udivmoddi4+0x90>
 8000504:	4548      	cmp	r0, r9
 8000506:	d2a9      	bcs.n	800045c <__udivmoddi4+0x1f0>
 8000508:	ebb9 0802 	subs.w	r8, r9, r2
 800050c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000510:	3b01      	subs	r3, #1
 8000512:	e7a3      	b.n	800045c <__udivmoddi4+0x1f0>
 8000514:	4645      	mov	r5, r8
 8000516:	e7ea      	b.n	80004ee <__udivmoddi4+0x282>
 8000518:	462b      	mov	r3, r5
 800051a:	e794      	b.n	8000446 <__udivmoddi4+0x1da>
 800051c:	4640      	mov	r0, r8
 800051e:	e7d1      	b.n	80004c4 <__udivmoddi4+0x258>
 8000520:	46d0      	mov	r8, sl
 8000522:	e77b      	b.n	800041c <__udivmoddi4+0x1b0>
 8000524:	3d02      	subs	r5, #2
 8000526:	4462      	add	r2, ip
 8000528:	e732      	b.n	8000390 <__udivmoddi4+0x124>
 800052a:	4608      	mov	r0, r1
 800052c:	e70a      	b.n	8000344 <__udivmoddi4+0xd8>
 800052e:	4464      	add	r4, ip
 8000530:	3802      	subs	r0, #2
 8000532:	e742      	b.n	80003ba <__udivmoddi4+0x14e>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800053c:	f001 f893 	bl	8001666 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000540:	f000 f83a 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000544:	f000 fb4a 	bl	8000bdc <MX_GPIO_Init>
  MX_DMA_Init();
 8000548:	f000 fb06 	bl	8000b58 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800054c:	f000 fa6e 	bl	8000a2c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000550:	f000 f87e 	bl	8000650 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000554:	f000 f900 	bl	8000758 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000558:	f000 f970 	bl	800083c <MX_ADC3_Init>
  MX_ADC4_Init();
 800055c:	f000 f9f4 	bl	8000948 <MX_ADC4_Init>
  MX_TIM2_Init();
 8000560:	f000 faae 	bl	8000ac0 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8000564:	f00a ffb6 	bl	800b4d4 <MX_USB_Device_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Wait for instructions
	  if(conv_state == CFG_RECEIVED){
 8000568:	4b0f      	ldr	r3, [pc, #60]	; (80005a8 <main+0x70>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	b2db      	uxtb	r3, r3
 800056e:	2b01      	cmp	r3, #1
 8000570:	d101      	bne.n	8000576 <main+0x3e>
		  InterpretConfig();
 8000572:	f000 fbc3 	bl	8000cfc <InterpretConfig>
	  }
	  if(conv_state == CFG_INTERPRETED){
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <main+0x70>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	b2db      	uxtb	r3, r3
 800057c:	2b02      	cmp	r3, #2
 800057e:	d101      	bne.n	8000584 <main+0x4c>
		  SetupMeasurement();
 8000580:	f000 fcce 	bl	8000f20 <SetupMeasurement>
	  }
	  if(conv_done){
 8000584:	4b09      	ldr	r3, [pc, #36]	; (80005ac <main+0x74>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d0ed      	beq.n	8000568 <main+0x30>
		  HAL_TIM_Base_Stop_IT(&htim2);
 800058c:	4808      	ldr	r0, [pc, #32]	; (80005b0 <main+0x78>)
 800058e:	f005 fcb1 	bl	8005ef4 <HAL_TIM_Base_Stop_IT>
		  conv_state = IDLE;
 8000592:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <main+0x70>)
 8000594:	2200      	movs	r2, #0
 8000596:	701a      	strb	r2, [r3, #0]
		  conv_done = 0;
 8000598:	4b04      	ldr	r3, [pc, #16]	; (80005ac <main+0x74>)
 800059a:	2200      	movs	r2, #0
 800059c:	601a      	str	r2, [r3, #0]
		  conv_count = 0;
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <main+0x7c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
	  if(conv_state == CFG_RECEIVED){
 80005a4:	e7e0      	b.n	8000568 <main+0x30>
 80005a6:	bf00      	nop
 80005a8:	20000648 	.word	0x20000648
 80005ac:	2000064c 	.word	0x2000064c
 80005b0:	200005bc 	.word	0x200005bc
 80005b4:	20000654 	.word	0x20000654

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	; 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0318 	add.w	r3, r7, #24
 80005c2:	2238      	movs	r2, #56	; 0x38
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f00b fd1a 	bl	800c000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005da:	2000      	movs	r0, #0
 80005dc:	f004 fb8a 	bl	8004cf4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80005e0:	2321      	movs	r3, #33	; 0x21
 80005e2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005e8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80005ea:	2301      	movs	r3, #1
 80005ec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ee:	2302      	movs	r3, #2
 80005f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005f2:	2303      	movs	r3, #3
 80005f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80005f6:	2306      	movs	r3, #6
 80005f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 78;
 80005fa:	234e      	movs	r3, #78	; 0x4e
 80005fc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80005fe:	2306      	movs	r3, #6
 8000600:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000602:	2302      	movs	r3, #2
 8000604:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000606:	2302      	movs	r3, #2
 8000608:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	f107 0318 	add.w	r3, r7, #24
 800060e:	4618      	mov	r0, r3
 8000610:	f004 fc24 	bl	8004e5c <HAL_RCC_OscConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800061a:	f000 fcb5 	bl	8000f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	230f      	movs	r3, #15
 8000620:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000622:	2303      	movs	r3, #3
 8000624:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2104      	movs	r1, #4
 8000636:	4618      	mov	r0, r3
 8000638:	f004 ff22 	bl	8005480 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000642:	f000 fca1 	bl	8000f88 <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	; 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
	...

08000650 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b08c      	sub	sp, #48	; 0x30
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000662:	1d3b      	adds	r3, r7, #4
 8000664:	2220      	movs	r2, #32
 8000666:	2100      	movs	r1, #0
 8000668:	4618      	mov	r0, r3
 800066a:	f00b fcc9 	bl	800c000 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800066e:	4b38      	ldr	r3, [pc, #224]	; (8000750 <MX_ADC1_Init+0x100>)
 8000670:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000674:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000676:	4b36      	ldr	r3, [pc, #216]	; (8000750 <MX_ADC1_Init+0x100>)
 8000678:	2200      	movs	r2, #0
 800067a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800067c:	4b34      	ldr	r3, [pc, #208]	; (8000750 <MX_ADC1_Init+0x100>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000682:	4b33      	ldr	r3, [pc, #204]	; (8000750 <MX_ADC1_Init+0x100>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000688:	4b31      	ldr	r3, [pc, #196]	; (8000750 <MX_ADC1_Init+0x100>)
 800068a:	2200      	movs	r2, #0
 800068c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800068e:	4b30      	ldr	r3, [pc, #192]	; (8000750 <MX_ADC1_Init+0x100>)
 8000690:	2200      	movs	r2, #0
 8000692:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000694:	4b2e      	ldr	r3, [pc, #184]	; (8000750 <MX_ADC1_Init+0x100>)
 8000696:	2204      	movs	r2, #4
 8000698:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800069a:	4b2d      	ldr	r3, [pc, #180]	; (8000750 <MX_ADC1_Init+0x100>)
 800069c:	2200      	movs	r2, #0
 800069e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006a0:	4b2b      	ldr	r3, [pc, #172]	; (8000750 <MX_ADC1_Init+0x100>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 80006a6:	4b2a      	ldr	r3, [pc, #168]	; (8000750 <MX_ADC1_Init+0x100>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006ac:	4b28      	ldr	r3, [pc, #160]	; (8000750 <MX_ADC1_Init+0x100>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80006b4:	4b26      	ldr	r3, [pc, #152]	; (8000750 <MX_ADC1_Init+0x100>)
 80006b6:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 80006ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80006bc:	4b24      	ldr	r3, [pc, #144]	; (8000750 <MX_ADC1_Init+0x100>)
 80006be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006c2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80006c4:	4b22      	ldr	r3, [pc, #136]	; (8000750 <MX_ADC1_Init+0x100>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80006cc:	4b20      	ldr	r3, [pc, #128]	; (8000750 <MX_ADC1_Init+0x100>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 80006d2:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <MX_ADC1_Init+0x100>)
 80006d4:	2201      	movs	r2, #1
 80006d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 80006da:	4b1d      	ldr	r3, [pc, #116]	; (8000750 <MX_ADC1_Init+0x100>)
 80006dc:	2210      	movs	r2, #16
 80006de:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <MX_ADC1_Init+0x100>)
 80006e2:	2220      	movs	r2, #32
 80006e4:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80006e6:	4b1a      	ldr	r3, [pc, #104]	; (8000750 <MX_ADC1_Init+0x100>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80006ec:	4b18      	ldr	r3, [pc, #96]	; (8000750 <MX_ADC1_Init+0x100>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006f2:	4817      	ldr	r0, [pc, #92]	; (8000750 <MX_ADC1_Init+0x100>)
 80006f4:	f001 f9fe 	bl	8001af4 <HAL_ADC_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80006fe:	f000 fc43 	bl	8000f88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000702:	2300      	movs	r3, #0
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800070a:	4619      	mov	r1, r3
 800070c:	4810      	ldr	r0, [pc, #64]	; (8000750 <MX_ADC1_Init+0x100>)
 800070e:	f002 f813 	bl	8002738 <HAL_ADCEx_MultiModeConfigChannel>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000718:	f000 fc36 	bl	8000f88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800071c:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <MX_ADC1_Init+0x104>)
 800071e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000720:	2306      	movs	r3, #6
 8000722:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000728:	237f      	movs	r3, #127	; 0x7f
 800072a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800072c:	2304      	movs	r3, #4
 800072e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	4619      	mov	r1, r3
 8000738:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_ADC1_Init+0x100>)
 800073a:	f001 fb97 	bl	8001e6c <HAL_ADC_ConfigChannel>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000744:	f000 fc20 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	3730      	adds	r7, #48	; 0x30
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	200001f8 	.word	0x200001f8
 8000754:	04300002 	.word	0x04300002

08000758 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	2220      	movs	r2, #32
 8000762:	2100      	movs	r1, #0
 8000764:	4618      	mov	r0, r3
 8000766:	f00b fc4b 	bl	800c000 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800076a:	4b31      	ldr	r3, [pc, #196]	; (8000830 <MX_ADC2_Init+0xd8>)
 800076c:	4a31      	ldr	r2, [pc, #196]	; (8000834 <MX_ADC2_Init+0xdc>)
 800076e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000770:	4b2f      	ldr	r3, [pc, #188]	; (8000830 <MX_ADC2_Init+0xd8>)
 8000772:	2200      	movs	r2, #0
 8000774:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000776:	4b2e      	ldr	r3, [pc, #184]	; (8000830 <MX_ADC2_Init+0xd8>)
 8000778:	2200      	movs	r2, #0
 800077a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077c:	4b2c      	ldr	r3, [pc, #176]	; (8000830 <MX_ADC2_Init+0xd8>)
 800077e:	2200      	movs	r2, #0
 8000780:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000782:	4b2b      	ldr	r3, [pc, #172]	; (8000830 <MX_ADC2_Init+0xd8>)
 8000784:	2200      	movs	r2, #0
 8000786:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000788:	4b29      	ldr	r3, [pc, #164]	; (8000830 <MX_ADC2_Init+0xd8>)
 800078a:	2200      	movs	r2, #0
 800078c:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078e:	4b28      	ldr	r3, [pc, #160]	; (8000830 <MX_ADC2_Init+0xd8>)
 8000790:	2204      	movs	r2, #4
 8000792:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000794:	4b26      	ldr	r3, [pc, #152]	; (8000830 <MX_ADC2_Init+0xd8>)
 8000796:	2200      	movs	r2, #0
 8000798:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800079a:	4b25      	ldr	r3, [pc, #148]	; (8000830 <MX_ADC2_Init+0xd8>)
 800079c:	2200      	movs	r2, #0
 800079e:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80007a0:	4b23      	ldr	r3, [pc, #140]	; (8000830 <MX_ADC2_Init+0xd8>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80007a6:	4b22      	ldr	r3, [pc, #136]	; (8000830 <MX_ADC2_Init+0xd8>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 80007ae:	4b20      	ldr	r3, [pc, #128]	; (8000830 <MX_ADC2_Init+0xd8>)
 80007b0:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 80007b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80007b6:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <MX_ADC2_Init+0xd8>)
 80007b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007bc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80007be:	4b1c      	ldr	r3, [pc, #112]	; (8000830 <MX_ADC2_Init+0xd8>)
 80007c0:	2201      	movs	r2, #1
 80007c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007c6:	4b1a      	ldr	r3, [pc, #104]	; (8000830 <MX_ADC2_Init+0xd8>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 80007cc:	4b18      	ldr	r3, [pc, #96]	; (8000830 <MX_ADC2_Init+0xd8>)
 80007ce:	2201      	movs	r2, #1
 80007d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 80007d4:	4b16      	ldr	r3, [pc, #88]	; (8000830 <MX_ADC2_Init+0xd8>)
 80007d6:	2210      	movs	r2, #16
 80007d8:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 80007da:	4b15      	ldr	r3, [pc, #84]	; (8000830 <MX_ADC2_Init+0xd8>)
 80007dc:	2220      	movs	r2, #32
 80007de:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80007e0:	4b13      	ldr	r3, [pc, #76]	; (8000830 <MX_ADC2_Init+0xd8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80007e6:	4b12      	ldr	r3, [pc, #72]	; (8000830 <MX_ADC2_Init+0xd8>)
 80007e8:	2201      	movs	r2, #1
 80007ea:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007ec:	4810      	ldr	r0, [pc, #64]	; (8000830 <MX_ADC2_Init+0xd8>)
 80007ee:	f001 f981 	bl	8001af4 <HAL_ADC_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 80007f8:	f000 fbc6 	bl	8000f88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80007fc:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_ADC2_Init+0xe0>)
 80007fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000800:	2306      	movs	r3, #6
 8000802:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000804:	2300      	movs	r3, #0
 8000806:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000808:	237f      	movs	r3, #127	; 0x7f
 800080a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800080c:	2304      	movs	r3, #4
 800080e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	4619      	mov	r1, r3
 8000818:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_ADC2_Init+0xd8>)
 800081a:	f001 fb27 	bl	8001e6c <HAL_ADC_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 8000824:	f000 fbb0 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000828:	bf00      	nop
 800082a:	3720      	adds	r7, #32
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}
 8000830:	20000264 	.word	0x20000264
 8000834:	50000100 	.word	0x50000100
 8000838:	0c900008 	.word	0x0c900008

0800083c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08c      	sub	sp, #48	; 0x30
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2220      	movs	r2, #32
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f00b fbd3 	bl	800c000 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800085a:	4b38      	ldr	r3, [pc, #224]	; (800093c <MX_ADC3_Init+0x100>)
 800085c:	4a38      	ldr	r2, [pc, #224]	; (8000940 <MX_ADC3_Init+0x104>)
 800085e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000860:	4b36      	ldr	r3, [pc, #216]	; (800093c <MX_ADC3_Init+0x100>)
 8000862:	2200      	movs	r2, #0
 8000864:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000866:	4b35      	ldr	r3, [pc, #212]	; (800093c <MX_ADC3_Init+0x100>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800086c:	4b33      	ldr	r3, [pc, #204]	; (800093c <MX_ADC3_Init+0x100>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000872:	4b32      	ldr	r3, [pc, #200]	; (800093c <MX_ADC3_Init+0x100>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000878:	4b30      	ldr	r3, [pc, #192]	; (800093c <MX_ADC3_Init+0x100>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800087e:	4b2f      	ldr	r3, [pc, #188]	; (800093c <MX_ADC3_Init+0x100>)
 8000880:	2204      	movs	r2, #4
 8000882:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000884:	4b2d      	ldr	r3, [pc, #180]	; (800093c <MX_ADC3_Init+0x100>)
 8000886:	2200      	movs	r2, #0
 8000888:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800088a:	4b2c      	ldr	r3, [pc, #176]	; (800093c <MX_ADC3_Init+0x100>)
 800088c:	2200      	movs	r2, #0
 800088e:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000890:	4b2a      	ldr	r3, [pc, #168]	; (800093c <MX_ADC3_Init+0x100>)
 8000892:	2201      	movs	r2, #1
 8000894:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000896:	4b29      	ldr	r3, [pc, #164]	; (800093c <MX_ADC3_Init+0x100>)
 8000898:	2200      	movs	r2, #0
 800089a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800089e:	4b27      	ldr	r3, [pc, #156]	; (800093c <MX_ADC3_Init+0x100>)
 80008a0:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 80008a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80008a6:	4b25      	ldr	r3, [pc, #148]	; (800093c <MX_ADC3_Init+0x100>)
 80008a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008ac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80008ae:	4b23      	ldr	r3, [pc, #140]	; (800093c <MX_ADC3_Init+0x100>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <MX_ADC3_Init+0x100>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 80008bc:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_ADC3_Init+0x100>)
 80008be:	2201      	movs	r2, #1
 80008c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_ADC3_Init+0x100>)
 80008c6:	2210      	movs	r2, #16
 80008c8:	645a      	str	r2, [r3, #68]	; 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_ADC3_Init+0x100>)
 80008cc:	2220      	movs	r2, #32
 80008ce:	649a      	str	r2, [r3, #72]	; 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_ADC3_Init+0x100>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_ADC3_Init+0x100>)
 80008d8:	2201      	movs	r2, #1
 80008da:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80008dc:	4817      	ldr	r0, [pc, #92]	; (800093c <MX_ADC3_Init+0x100>)
 80008de:	f001 f909 	bl	8001af4 <HAL_ADC_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80008e8:	f000 fb4e 	bl	8000f88 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80008ec:	2300      	movs	r3, #0
 80008ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80008f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f4:	4619      	mov	r1, r3
 80008f6:	4811      	ldr	r0, [pc, #68]	; (800093c <MX_ADC3_Init+0x100>)
 80008f8:	f001 ff1e 	bl	8002738 <HAL_ADCEx_MultiModeConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ADC3_Init+0xca>
  {
    Error_Handler();
 8000902:	f000 fb41 	bl	8000f88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_ADC3_Init+0x108>)
 8000908:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800090a:	2306      	movs	r3, #6
 800090c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000912:	237f      	movs	r3, #127	; 0x7f
 8000914:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000916:	2304      	movs	r3, #4
 8000918:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	4619      	mov	r1, r3
 8000922:	4806      	ldr	r0, [pc, #24]	; (800093c <MX_ADC3_Init+0x100>)
 8000924:	f001 faa2 	bl	8001e6c <HAL_ADC_ConfigChannel>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_ADC3_Init+0xf6>
  {
    Error_Handler();
 800092e:	f000 fb2b 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	3730      	adds	r7, #48	; 0x30
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	200002d0 	.word	0x200002d0
 8000940:	50000400 	.word	0x50000400
 8000944:	32601000 	.word	0x32601000

08000948 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b088      	sub	sp, #32
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800094e:	463b      	mov	r3, r7
 8000950:	2220      	movs	r2, #32
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f00b fb53 	bl	800c000 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800095a:	4b31      	ldr	r3, [pc, #196]	; (8000a20 <MX_ADC4_Init+0xd8>)
 800095c:	4a31      	ldr	r2, [pc, #196]	; (8000a24 <MX_ADC4_Init+0xdc>)
 800095e:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000960:	4b2f      	ldr	r3, [pc, #188]	; (8000a20 <MX_ADC4_Init+0xd8>)
 8000962:	2200      	movs	r2, #0
 8000964:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000966:	4b2e      	ldr	r3, [pc, #184]	; (8000a20 <MX_ADC4_Init+0xd8>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800096c:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <MX_ADC4_Init+0xd8>)
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000972:	4b2b      	ldr	r3, [pc, #172]	; (8000a20 <MX_ADC4_Init+0xd8>)
 8000974:	2200      	movs	r2, #0
 8000976:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000978:	4b29      	ldr	r3, [pc, #164]	; (8000a20 <MX_ADC4_Init+0xd8>)
 800097a:	2200      	movs	r2, #0
 800097c:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800097e:	4b28      	ldr	r3, [pc, #160]	; (8000a20 <MX_ADC4_Init+0xd8>)
 8000980:	2204      	movs	r2, #4
 8000982:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000984:	4b26      	ldr	r3, [pc, #152]	; (8000a20 <MX_ADC4_Init+0xd8>)
 8000986:	2200      	movs	r2, #0
 8000988:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800098a:	4b25      	ldr	r3, [pc, #148]	; (8000a20 <MX_ADC4_Init+0xd8>)
 800098c:	2200      	movs	r2, #0
 800098e:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000990:	4b23      	ldr	r3, [pc, #140]	; (8000a20 <MX_ADC4_Init+0xd8>)
 8000992:	2201      	movs	r2, #1
 8000994:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000996:	4b22      	ldr	r3, [pc, #136]	; (8000a20 <MX_ADC4_Init+0xd8>)
 8000998:	2200      	movs	r2, #0
 800099a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800099e:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <MX_ADC4_Init+0xd8>)
 80009a0:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 80009a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80009a6:	4b1e      	ldr	r3, [pc, #120]	; (8000a20 <MX_ADC4_Init+0xd8>)
 80009a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ac:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 80009ae:	4b1c      	ldr	r3, [pc, #112]	; (8000a20 <MX_ADC4_Init+0xd8>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009b6:	4b1a      	ldr	r3, [pc, #104]	; (8000a20 <MX_ADC4_Init+0xd8>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 80009bc:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_ADC4_Init+0xd8>)
 80009be:	2201      	movs	r2, #1
 80009c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MX_ADC4_Init+0xd8>)
 80009c6:	2210      	movs	r2, #16
 80009c8:	645a      	str	r2, [r3, #68]	; 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <MX_ADC4_Init+0xd8>)
 80009cc:	2220      	movs	r2, #32
 80009ce:	649a      	str	r2, [r3, #72]	; 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_ADC4_Init+0xd8>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_ADC4_Init+0xd8>)
 80009d8:	2201      	movs	r2, #1
 80009da:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80009dc:	4810      	ldr	r0, [pc, #64]	; (8000a20 <MX_ADC4_Init+0xd8>)
 80009de:	f001 f889 	bl	8001af4 <HAL_ADC_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_ADC4_Init+0xa4>
  {
    Error_Handler();
 80009e8:	f000 face 	bl	8000f88 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <MX_ADC4_Init+0xe0>)
 80009ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f0:	2306      	movs	r3, #6
 80009f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80009f4:	2300      	movs	r3, #0
 80009f6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009f8:	237f      	movs	r3, #127	; 0x7f
 80009fa:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80009fc:	2304      	movs	r3, #4
 80009fe:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000a04:	463b      	mov	r3, r7
 8000a06:	4619      	mov	r1, r3
 8000a08:	4805      	ldr	r0, [pc, #20]	; (8000a20 <MX_ADC4_Init+0xd8>)
 8000a0a:	f001 fa2f 	bl	8001e6c <HAL_ADC_ConfigChannel>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_ADC4_Init+0xd0>
  {
    Error_Handler();
 8000a14:	f000 fab8 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000a18:	bf00      	nop
 8000a1a:	3720      	adds	r7, #32
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	2000033c 	.word	0x2000033c
 8000a24:	50000500 	.word	0x50000500
 8000a28:	14f00020 	.word	0x14f00020

08000a2c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a30:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <MX_LPUART1_UART_Init+0x8c>)
 8000a32:	4a22      	ldr	r2, [pc, #136]	; (8000abc <MX_LPUART1_UART_Init+0x90>)
 8000a34:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000a36:	4b20      	ldr	r3, [pc, #128]	; (8000ab8 <MX_LPUART1_UART_Init+0x8c>)
 8000a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a3c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a3e:	4b1e      	ldr	r3, [pc, #120]	; (8000ab8 <MX_LPUART1_UART_Init+0x8c>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <MX_LPUART1_UART_Init+0x8c>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a4a:	4b1b      	ldr	r3, [pc, #108]	; (8000ab8 <MX_LPUART1_UART_Init+0x8c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a50:	4b19      	ldr	r3, [pc, #100]	; (8000ab8 <MX_LPUART1_UART_Init+0x8c>)
 8000a52:	220c      	movs	r2, #12
 8000a54:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a56:	4b18      	ldr	r3, [pc, #96]	; (8000ab8 <MX_LPUART1_UART_Init+0x8c>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5c:	4b16      	ldr	r3, [pc, #88]	; (8000ab8 <MX_LPUART1_UART_Init+0x8c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a62:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <MX_LPUART1_UART_Init+0x8c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a68:	4b13      	ldr	r3, [pc, #76]	; (8000ab8 <MX_LPUART1_UART_Init+0x8c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a6e:	4812      	ldr	r0, [pc, #72]	; (8000ab8 <MX_LPUART1_UART_Init+0x8c>)
 8000a70:	f005 ff32 	bl	80068d8 <HAL_UART_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a7a:	f000 fa85 	bl	8000f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	480d      	ldr	r0, [pc, #52]	; (8000ab8 <MX_LPUART1_UART_Init+0x8c>)
 8000a82:	f006 fccd 	bl	8007420 <HAL_UARTEx_SetTxFifoThreshold>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000a8c:	f000 fa7c 	bl	8000f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a90:	2100      	movs	r1, #0
 8000a92:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <MX_LPUART1_UART_Init+0x8c>)
 8000a94:	f006 fd02 	bl	800749c <HAL_UARTEx_SetRxFifoThreshold>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000a9e:	f000 fa73 	bl	8000f88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <MX_LPUART1_UART_Init+0x8c>)
 8000aa4:	f006 fc83 	bl	80073ae <HAL_UARTEx_DisableFifoMode>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000aae:	f000 fa6b 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	20000528 	.word	0x20000528
 8000abc:	40008000 	.word	0x40008000

08000ac0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b088      	sub	sp, #32
 8000ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ade:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <MX_TIM2_Init+0x94>)
 8000ae0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ae4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 156 - 1;
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <MX_TIM2_Init+0x94>)
 8000ae8:	229b      	movs	r2, #155	; 0x9b
 8000aea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aec:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <MX_TIM2_Init+0x94>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <MX_TIM2_Init+0x94>)
 8000af4:	2209      	movs	r2, #9
 8000af6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af8:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_TIM2_Init+0x94>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <MX_TIM2_Init+0x94>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b04:	4813      	ldr	r0, [pc, #76]	; (8000b54 <MX_TIM2_Init+0x94>)
 8000b06:	f005 f925 	bl	8005d54 <HAL_TIM_Base_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b10:	f000 fa3a 	bl	8000f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	4619      	mov	r1, r3
 8000b20:	480c      	ldr	r0, [pc, #48]	; (8000b54 <MX_TIM2_Init+0x94>)
 8000b22:	f005 fb65 	bl	80061f0 <HAL_TIM_ConfigClockSource>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b2c:	f000 fa2c 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b30:	2320      	movs	r3, #32
 8000b32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <MX_TIM2_Init+0x94>)
 8000b3e:	f005 fdef 	bl	8006720 <HAL_TIMEx_MasterConfigSynchronization>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000b48:	f000 fa1e 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b4c:	bf00      	nop
 8000b4e:	3720      	adds	r7, #32
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200005bc 	.word	0x200005bc

08000b58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b5e:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <MX_DMA_Init+0x80>)
 8000b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b62:	4a1d      	ldr	r2, [pc, #116]	; (8000bd8 <MX_DMA_Init+0x80>)
 8000b64:	f043 0304 	orr.w	r3, r3, #4
 8000b68:	6493      	str	r3, [r2, #72]	; 0x48
 8000b6a:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <MX_DMA_Init+0x80>)
 8000b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b6e:	f003 0304 	and.w	r3, r3, #4
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b76:	4b18      	ldr	r3, [pc, #96]	; (8000bd8 <MX_DMA_Init+0x80>)
 8000b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b7a:	4a17      	ldr	r2, [pc, #92]	; (8000bd8 <MX_DMA_Init+0x80>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6493      	str	r3, [r2, #72]	; 0x48
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <MX_DMA_Init+0x80>)
 8000b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b86:	f003 0301 	and.w	r3, r3, #1
 8000b8a:	603b      	str	r3, [r7, #0]
 8000b8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b8e:	2200      	movs	r2, #0
 8000b90:	2100      	movs	r1, #0
 8000b92:	200b      	movs	r0, #11
 8000b94:	f001 ffb3 	bl	8002afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b98:	200b      	movs	r0, #11
 8000b9a:	f001 ffca 	bl	8002b32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	200c      	movs	r0, #12
 8000ba4:	f001 ffab 	bl	8002afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ba8:	200c      	movs	r0, #12
 8000baa:	f001 ffc2 	bl	8002b32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	200d      	movs	r0, #13
 8000bb4:	f001 ffa3 	bl	8002afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000bb8:	200d      	movs	r0, #13
 8000bba:	f001 ffba 	bl	8002b32 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	200e      	movs	r0, #14
 8000bc4:	f001 ff9b 	bl	8002afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000bc8:	200e      	movs	r0, #14
 8000bca:	f001 ffb2 	bl	8002b32 <HAL_NVIC_EnableIRQ>

}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000

08000bdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be2:	f107 0314 	add.w	r3, r7, #20
 8000be6:	2200      	movs	r2, #0
 8000be8:	601a      	str	r2, [r3, #0]
 8000bea:	605a      	str	r2, [r3, #4]
 8000bec:	609a      	str	r2, [r3, #8]
 8000bee:	60da      	str	r2, [r3, #12]
 8000bf0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf2:	4b40      	ldr	r3, [pc, #256]	; (8000cf4 <MX_GPIO_Init+0x118>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	4a3f      	ldr	r2, [pc, #252]	; (8000cf4 <MX_GPIO_Init+0x118>)
 8000bf8:	f043 0304 	orr.w	r3, r3, #4
 8000bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfe:	4b3d      	ldr	r3, [pc, #244]	; (8000cf4 <MX_GPIO_Init+0x118>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	f003 0304 	and.w	r3, r3, #4
 8000c06:	613b      	str	r3, [r7, #16]
 8000c08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c0a:	4b3a      	ldr	r3, [pc, #232]	; (8000cf4 <MX_GPIO_Init+0x118>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	4a39      	ldr	r2, [pc, #228]	; (8000cf4 <MX_GPIO_Init+0x118>)
 8000c10:	f043 0320 	orr.w	r3, r3, #32
 8000c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c16:	4b37      	ldr	r3, [pc, #220]	; (8000cf4 <MX_GPIO_Init+0x118>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	f003 0320 	and.w	r3, r3, #32
 8000c1e:	60fb      	str	r3, [r7, #12]
 8000c20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b34      	ldr	r3, [pc, #208]	; (8000cf4 <MX_GPIO_Init+0x118>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	4a33      	ldr	r2, [pc, #204]	; (8000cf4 <MX_GPIO_Init+0x118>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2e:	4b31      	ldr	r3, [pc, #196]	; (8000cf4 <MX_GPIO_Init+0x118>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	4b2e      	ldr	r3, [pc, #184]	; (8000cf4 <MX_GPIO_Init+0x118>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	4a2d      	ldr	r2, [pc, #180]	; (8000cf4 <MX_GPIO_Init+0x118>)
 8000c40:	f043 0302 	orr.w	r3, r3, #2
 8000c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c46:	4b2b      	ldr	r3, [pc, #172]	; (8000cf4 <MX_GPIO_Init+0x118>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	f003 0302 	and.w	r3, r3, #2
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	2101      	movs	r1, #1
 8000c56:	4828      	ldr	r0, [pc, #160]	; (8000cf8 <MX_GPIO_Init+0x11c>)
 8000c58:	f002 fac2 	bl	80031e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEST_OUT_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	2122      	movs	r1, #34	; 0x22
 8000c60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c64:	f002 fabc 	bl	80031e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	481e      	ldr	r0, [pc, #120]	; (8000cf8 <MX_GPIO_Init+0x11c>)
 8000c80:	f002 f92c 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_EN_Pin */
  GPIO_InitStruct.Pin = USB_EN_Pin;
 8000c84:	2301      	movs	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c90:	2300      	movs	r3, #0
 8000c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_EN_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4817      	ldr	r0, [pc, #92]	; (8000cf8 <MX_GPIO_Init+0x11c>)
 8000c9c:	f002 f91e 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cba:	f002 f90f 	bl	8002edc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cbe:	2320      	movs	r3, #32
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd8:	f002 f900 	bl	8002edc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	2100      	movs	r1, #0
 8000ce0:	2028      	movs	r0, #40	; 0x28
 8000ce2:	f001 ff0c 	bl	8002afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ce6:	2028      	movs	r0, #40	; 0x28
 8000ce8:	f001 ff23 	bl	8002b32 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cec:	bf00      	nop
 8000cee:	3728      	adds	r7, #40	; 0x28
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	48000800 	.word	0x48000800

08000cfc <InterpretConfig>:
		HAL_GPIO_TogglePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin);
	}
	conv_state = WAITING_END;
}

int InterpretConfig(void) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b0a6      	sub	sp, #152	; 0x98
 8000d00:	af00      	add	r7, sp, #0
	char variable_name[CFG_VAR_SIZE];
	char variable_value[CFG_VAR_SIZE];
	memset(variable_name, 0, sizeof(variable_name));
 8000d02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d06:	2240      	movs	r2, #64	; 0x40
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f00b f978 	bl	800c000 <memset>
	memset(variable_value, 0, sizeof(variable_value));
 8000d10:	f107 0310 	add.w	r3, r7, #16
 8000d14:	2240      	movs	r2, #64	; 0x40
 8000d16:	2100      	movs	r1, #0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f00b f971 	bl	800c000 <memset>
	int variable_name_indexes[2] = {0, 0};
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
	int variable_value_indexes[2] = {0, 0};
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	607b      	str	r3, [r7, #4]
	char reading_status = 'n';
 8000d2e:	236e      	movs	r3, #110	; 0x6e
 8000d30:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	for(int i = 0; i < USB_RX_BUFFER_SIZE; i++){
 8000d34:	2300      	movs	r3, #0
 8000d36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000d3a:	e077      	b.n	8000e2c <InterpretConfig+0x130>
		if(rx_buffer[i] == '\0'){
 8000d3c:	4a42      	ldr	r2, [pc, #264]	; (8000e48 <InterpretConfig+0x14c>)
 8000d3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d42:	4413      	add	r3, r2
 8000d44:	f993 3000 	ldrsb.w	r3, [r3]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d074      	beq.n	8000e36 <InterpretConfig+0x13a>
			break;
		}
		// Reading the variable name
		if(reading_status == 'n'){
 8000d4c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000d50:	2b6e      	cmp	r3, #110	; 0x6e
 8000d52:	d112      	bne.n	8000d7a <InterpretConfig+0x7e>
			if(rx_buffer[i] == ':') {
 8000d54:	4a3c      	ldr	r2, [pc, #240]	; (8000e48 <InterpretConfig+0x14c>)
 8000d56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d5a:	4413      	add	r3, r2
 8000d5c:	f993 3000 	ldrsb.w	r3, [r3]
 8000d60:	2b3a      	cmp	r3, #58	; 0x3a
 8000d62:	d15e      	bne.n	8000e22 <InterpretConfig+0x126>
				variable_name_indexes[1] = i;
 8000d64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d68:	60fb      	str	r3, [r7, #12]
				variable_value_indexes[0] = i+1;
 8000d6a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d6e:	3301      	adds	r3, #1
 8000d70:	603b      	str	r3, [r7, #0]
				reading_status = 'v';
 8000d72:	2376      	movs	r3, #118	; 0x76
 8000d74:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000d78:	e053      	b.n	8000e22 <InterpretConfig+0x126>
			}
		}
		// Reading the variable value
		else if(reading_status == 'v'){
 8000d7a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000d7e:	2b76      	cmp	r3, #118	; 0x76
 8000d80:	d14f      	bne.n	8000e22 <InterpretConfig+0x126>
			if(rx_buffer[i] == ';') {
 8000d82:	4a31      	ldr	r2, [pc, #196]	; (8000e48 <InterpretConfig+0x14c>)
 8000d84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d88:	4413      	add	r3, r2
 8000d8a:	f993 3000 	ldrsb.w	r3, [r3]
 8000d8e:	2b3b      	cmp	r3, #59	; 0x3b
 8000d90:	d147      	bne.n	8000e22 <InterpretConfig+0x126>
				variable_value_indexes[1] = i;
 8000d92:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000d96:	607b      	str	r3, [r7, #4]

				strncpy(variable_name, ((char*)rx_buffer + variable_name_indexes[0]), (variable_name_indexes[1] - variable_name_indexes[0]));
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b2a      	ldr	r3, [pc, #168]	; (8000e48 <InterpretConfig+0x14c>)
 8000d9e:	18d1      	adds	r1, r2, r3
 8000da0:	68fa      	ldr	r2, [r7, #12]
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	461a      	mov	r2, r3
 8000da8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dac:	4618      	mov	r0, r3
 8000dae:	f00b f92f 	bl	800c010 <strncpy>
				variable_name[variable_name_indexes[1] + 1] = '\0';
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3301      	adds	r3, #1
 8000db6:	3398      	adds	r3, #152	; 0x98
 8000db8:	443b      	add	r3, r7
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f803 2c48 	strb.w	r2, [r3, #-72]
				strncpy(variable_value, ((char*)rx_buffer + variable_value_indexes[0]), (variable_value_indexes[1] - variable_value_indexes[0]));
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <InterpretConfig+0x14c>)
 8000dc6:	18d1      	adds	r1, r2, r3
 8000dc8:	687a      	ldr	r2, [r7, #4]
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	461a      	mov	r2, r3
 8000dd0:	f107 0310 	add.w	r3, r7, #16
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f00b f91b 	bl	800c010 <strncpy>
				variable_value[variable_value_indexes[1] + 1] = '\0';
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	3398      	adds	r3, #152	; 0x98
 8000de0:	443b      	add	r3, r7
 8000de2:	2200      	movs	r2, #0
 8000de4:	f803 2c88 	strb.w	r2, [r3, #-136]

				InterpretVariable(variable_name, variable_value);
 8000de8:	f107 0210 	add.w	r2, r7, #16
 8000dec:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000df0:	4611      	mov	r1, r2
 8000df2:	4618      	mov	r0, r3
 8000df4:	f000 f82c 	bl	8000e50 <InterpretVariable>
				memset(variable_name, 0, sizeof(variable_name));
 8000df8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000dfc:	2240      	movs	r2, #64	; 0x40
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4618      	mov	r0, r3
 8000e02:	f00b f8fd 	bl	800c000 <memset>
				memset(variable_value, 0, sizeof(variable_value));
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	2240      	movs	r2, #64	; 0x40
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f00b f8f6 	bl	800c000 <memset>
				variable_name_indexes[0] = i + 1;
 8000e14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000e18:	3301      	adds	r3, #1
 8000e1a:	60bb      	str	r3, [r7, #8]
				reading_status = 'n';
 8000e1c:	236e      	movs	r3, #110	; 0x6e
 8000e1e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	for(int i = 0; i < USB_RX_BUFFER_SIZE; i++){
 8000e22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000e26:	3301      	adds	r3, #1
 8000e28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000e2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000e30:	2b3f      	cmp	r3, #63	; 0x3f
 8000e32:	dd83      	ble.n	8000d3c <InterpretConfig+0x40>
 8000e34:	e000      	b.n	8000e38 <InterpretConfig+0x13c>
			break;
 8000e36:	bf00      	nop
			}
		}
	}

	conv_state = CFG_INTERPRETED;
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <InterpretConfig+0x150>)
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	701a      	strb	r2, [r3, #0]
	return 1;
 8000e3e:	2301      	movs	r3, #1
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3798      	adds	r7, #152	; 0x98
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	20000608 	.word	0x20000608
 8000e4c:	20000648 	.word	0x20000648

08000e50 <InterpretVariable>:

int InterpretVariable(char name[CFG_VAR_SIZE], char value[CFG_VAR_SIZE]) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
 8000e58:	6039      	str	r1, [r7, #0]
	if(strcmp(name, "RecLen") == 0) {
 8000e5a:	4929      	ldr	r1, [pc, #164]	; (8000f00 <InterpretVariable+0xb0>)
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff f9db 	bl	8000218 <strcmp>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d107      	bne.n	8000e78 <InterpretVariable+0x28>
		record_length_ms = (uint16_t)atoi(value);
 8000e68:	6838      	ldr	r0, [r7, #0]
 8000e6a:	f00b f839 	bl	800bee0 <atoi>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <InterpretVariable+0xb4>)
 8000e74:	801a      	strh	r2, [r3, #0]
 8000e76:	e03e      	b.n	8000ef6 <InterpretVariable+0xa6>
	}
	else if(strcmp(name, "RecInt") == 0) {
 8000e78:	4923      	ldr	r1, [pc, #140]	; (8000f08 <InterpretVariable+0xb8>)
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff f9cc 	bl	8000218 <strcmp>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d107      	bne.n	8000e96 <InterpretVariable+0x46>
		record_interval_us = (uint16_t)atoi(value);
 8000e86:	6838      	ldr	r0, [r7, #0]
 8000e88:	f00b f82a 	bl	800bee0 <atoi>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	4b1e      	ldr	r3, [pc, #120]	; (8000f0c <InterpretVariable+0xbc>)
 8000e92:	801a      	strh	r2, [r3, #0]
 8000e94:	e02f      	b.n	8000ef6 <InterpretVariable+0xa6>
	}
	else if(strcmp(name, "TcType") == 0) {
 8000e96:	491e      	ldr	r1, [pc, #120]	; (8000f10 <InterpretVariable+0xc0>)
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f7ff f9bd 	bl	8000218 <strcmp>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d104      	bne.n	8000eae <InterpretVariable+0x5e>
		tc_type = value[0];
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	781a      	ldrb	r2, [r3, #0]
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <InterpretVariable+0xc4>)
 8000eaa:	701a      	strb	r2, [r3, #0]
 8000eac:	e023      	b.n	8000ef6 <InterpretVariable+0xa6>
	}
	else if(strcmp(name, "EnChan") == 0) {
 8000eae:	491a      	ldr	r1, [pc, #104]	; (8000f18 <InterpretVariable+0xc8>)
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff f9b1 	bl	8000218 <strcmp>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d11c      	bne.n	8000ef6 <InterpretVariable+0xa6>
		int channel_index = 0;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	60fb      	str	r3, [r7, #12]
		for(int i = 1; i < strlen(value); i += 2){
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	e010      	b.n	8000ee8 <InterpretVariable+0x98>
			channel_enabled[channel_index] = value[i] - '0';
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	683a      	ldr	r2, [r7, #0]
 8000eca:	4413      	add	r3, r2
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	3b30      	subs	r3, #48	; 0x30
 8000ed0:	b2d9      	uxtb	r1, r3
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <InterpretVariable+0xcc>)
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	460a      	mov	r2, r1
 8000eda:	701a      	strb	r2, [r3, #0]
			channel_index++;
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	3301      	adds	r3, #1
 8000ee0:	60fb      	str	r3, [r7, #12]
		for(int i = 1; i < strlen(value); i += 2){
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	3302      	adds	r3, #2
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	6838      	ldr	r0, [r7, #0]
 8000eea:	f7ff f99f 	bl	800022c <strlen>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	d8e7      	bhi.n	8000ec6 <InterpretVariable+0x76>
		}
	}
	return 1;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3710      	adds	r7, #16
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	0800c0c0 	.word	0x0800c0c0
 8000f04:	20000000 	.word	0x20000000
 8000f08:	0800c0c8 	.word	0x0800c0c8
 8000f0c:	20000002 	.word	0x20000002
 8000f10:	0800c0d0 	.word	0x0800c0d0
 8000f14:	20000004 	.word	0x20000004
 8000f18:	0800c0d8 	.word	0x0800c0d8
 8000f1c:	20000658 	.word	0x20000658

08000f20 <SetupMeasurement>:

int SetupMeasurement(void){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
	// ADC sync timer
	target_conv_count = (record_length_ms * 1000) / record_interval_us;
 8000f24:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <SetupMeasurement+0x54>)
 8000f26:	881b      	ldrh	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2e:	fb02 f303 	mul.w	r3, r2, r3
 8000f32:	4a11      	ldr	r2, [pc, #68]	; (8000f78 <SetupMeasurement+0x58>)
 8000f34:	8812      	ldrh	r2, [r2, #0]
 8000f36:	fb93 f3f2 	sdiv	r3, r3, r2
 8000f3a:	4a10      	ldr	r2, [pc, #64]	; (8000f7c <SetupMeasurement+0x5c>)
 8000f3c:	6013      	str	r3, [r2, #0]

	__HAL_TIM_SET_AUTORELOAD(&htim2, record_interval_us - 1);
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <SetupMeasurement+0x58>)
 8000f40:	881b      	ldrh	r3, [r3, #0]
 8000f42:	1e5a      	subs	r2, r3, #1
 8000f44:	4b0e      	ldr	r3, [pc, #56]	; (8000f80 <SetupMeasurement+0x60>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <SetupMeasurement+0x58>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	3b01      	subs	r3, #1
 8000f50:	461a      	mov	r2, r3
 8000f52:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <SetupMeasurement+0x60>)
 8000f54:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(&htim2, record_interval_us - 1);
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <SetupMeasurement+0x58>)
 8000f58:	881b      	ldrh	r3, [r3, #0]
 8000f5a:	1e5a      	subs	r2, r3, #1
 8000f5c:	4b08      	ldr	r3, [pc, #32]	; (8000f80 <SetupMeasurement+0x60>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Base_Start_IT(&htim2);
 8000f62:	4807      	ldr	r0, [pc, #28]	; (8000f80 <SetupMeasurement+0x60>)
 8000f64:	f004 ff4e 	bl	8005e04 <HAL_TIM_Base_Start_IT>

	conv_state = ARMED;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <SetupMeasurement+0x64>)
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	701a      	strb	r2, [r3, #0]
	return 1;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	20000000 	.word	0x20000000
 8000f78:	20000002 	.word	0x20000002
 8000f7c:	20000650 	.word	0x20000650
 8000f80:	200005bc 	.word	0x200005bc
 8000f84:	20000648 	.word	0x20000648

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <Error_Handler+0x8>
	...

08000f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <HAL_MspInit+0x44>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fca:	f003 ff37 	bl	8004e3c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000

08000fdc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b0a4      	sub	sp, #144	; 0x90
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff8:	2254      	movs	r2, #84	; 0x54
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f00a ffff 	bl	800c000 <memset>
  if(hadc->Instance==ADC1)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800100a:	d16b      	bne.n	80010e4 <HAL_ADC_MspInit+0x108>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800100c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8001012:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001016:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001018:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800101c:	4618      	mov	r0, r3
 800101e:	f004 fc4b 	bl	80058b8 <HAL_RCCEx_PeriphCLKConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8001028:	f7ff ffae 	bl	8000f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800102c:	4b9e      	ldr	r3, [pc, #632]	; (80012a8 <HAL_ADC_MspInit+0x2cc>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	3301      	adds	r3, #1
 8001032:	4a9d      	ldr	r2, [pc, #628]	; (80012a8 <HAL_ADC_MspInit+0x2cc>)
 8001034:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001036:	4b9c      	ldr	r3, [pc, #624]	; (80012a8 <HAL_ADC_MspInit+0x2cc>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2b01      	cmp	r3, #1
 800103c:	d10b      	bne.n	8001056 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800103e:	4b9b      	ldr	r3, [pc, #620]	; (80012ac <HAL_ADC_MspInit+0x2d0>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	4a9a      	ldr	r2, [pc, #616]	; (80012ac <HAL_ADC_MspInit+0x2d0>)
 8001044:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104a:	4b98      	ldr	r3, [pc, #608]	; (80012ac <HAL_ADC_MspInit+0x2d0>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b95      	ldr	r3, [pc, #596]	; (80012ac <HAL_ADC_MspInit+0x2d0>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a94      	ldr	r2, [pc, #592]	; (80012ac <HAL_ADC_MspInit+0x2d0>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b92      	ldr	r3, [pc, #584]	; (80012ac <HAL_ADC_MspInit+0x2d0>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	623b      	str	r3, [r7, #32]
 800106c:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800106e:	2301      	movs	r3, #1
 8001070:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001072:	2303      	movs	r3, #3
 8001074:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001082:	4619      	mov	r1, r3
 8001084:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001088:	f001 ff28 	bl	8002edc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800108c:	4b88      	ldr	r3, [pc, #544]	; (80012b0 <HAL_ADC_MspInit+0x2d4>)
 800108e:	4a89      	ldr	r2, [pc, #548]	; (80012b4 <HAL_ADC_MspInit+0x2d8>)
 8001090:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001092:	4b87      	ldr	r3, [pc, #540]	; (80012b0 <HAL_ADC_MspInit+0x2d4>)
 8001094:	2205      	movs	r2, #5
 8001096:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001098:	4b85      	ldr	r3, [pc, #532]	; (80012b0 <HAL_ADC_MspInit+0x2d4>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800109e:	4b84      	ldr	r3, [pc, #528]	; (80012b0 <HAL_ADC_MspInit+0x2d4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010a4:	4b82      	ldr	r3, [pc, #520]	; (80012b0 <HAL_ADC_MspInit+0x2d4>)
 80010a6:	2280      	movs	r2, #128	; 0x80
 80010a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010aa:	4b81      	ldr	r3, [pc, #516]	; (80012b0 <HAL_ADC_MspInit+0x2d4>)
 80010ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010b2:	4b7f      	ldr	r3, [pc, #508]	; (80012b0 <HAL_ADC_MspInit+0x2d4>)
 80010b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010ba:	4b7d      	ldr	r3, [pc, #500]	; (80012b0 <HAL_ADC_MspInit+0x2d4>)
 80010bc:	2220      	movs	r2, #32
 80010be:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010c0:	4b7b      	ldr	r3, [pc, #492]	; (80012b0 <HAL_ADC_MspInit+0x2d4>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010c6:	487a      	ldr	r0, [pc, #488]	; (80012b0 <HAL_ADC_MspInit+0x2d4>)
 80010c8:	f001 fd4e 	bl	8002b68 <HAL_DMA_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80010d2:	f7ff ff59 	bl	8000f88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a75      	ldr	r2, [pc, #468]	; (80012b0 <HAL_ADC_MspInit+0x2d4>)
 80010da:	655a      	str	r2, [r3, #84]	; 0x54
 80010dc:	4a74      	ldr	r2, [pc, #464]	; (80012b0 <HAL_ADC_MspInit+0x2d4>)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80010e2:	e169      	b.n	80013b8 <HAL_ADC_MspInit+0x3dc>
  else if(hadc->Instance==ADC2)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a73      	ldr	r2, [pc, #460]	; (80012b8 <HAL_ADC_MspInit+0x2dc>)
 80010ea:	4293      	cmp	r3, r2
 80010ec:	d16b      	bne.n	80011c6 <HAL_ADC_MspInit+0x1ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80010ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010f2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80010f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80010f8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010fe:	4618      	mov	r0, r3
 8001100:	f004 fbda 	bl	80058b8 <HAL_RCCEx_PeriphCLKConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_ADC_MspInit+0x132>
      Error_Handler();
 800110a:	f7ff ff3d 	bl	8000f88 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800110e:	4b66      	ldr	r3, [pc, #408]	; (80012a8 <HAL_ADC_MspInit+0x2cc>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	3301      	adds	r3, #1
 8001114:	4a64      	ldr	r2, [pc, #400]	; (80012a8 <HAL_ADC_MspInit+0x2cc>)
 8001116:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001118:	4b63      	ldr	r3, [pc, #396]	; (80012a8 <HAL_ADC_MspInit+0x2cc>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d10b      	bne.n	8001138 <HAL_ADC_MspInit+0x15c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001120:	4b62      	ldr	r3, [pc, #392]	; (80012ac <HAL_ADC_MspInit+0x2d0>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	4a61      	ldr	r2, [pc, #388]	; (80012ac <HAL_ADC_MspInit+0x2d0>)
 8001126:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800112a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800112c:	4b5f      	ldr	r3, [pc, #380]	; (80012ac <HAL_ADC_MspInit+0x2d0>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001138:	4b5c      	ldr	r3, [pc, #368]	; (80012ac <HAL_ADC_MspInit+0x2d0>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113c:	4a5b      	ldr	r2, [pc, #364]	; (80012ac <HAL_ADC_MspInit+0x2d0>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001144:	4b59      	ldr	r3, [pc, #356]	; (80012ac <HAL_ADC_MspInit+0x2d0>)
 8001146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	61bb      	str	r3, [r7, #24]
 800114e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001150:	2340      	movs	r3, #64	; 0x40
 8001152:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001154:	2303      	movs	r3, #3
 8001156:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115a:	2300      	movs	r3, #0
 800115c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001160:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001164:	4619      	mov	r1, r3
 8001166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116a:	f001 feb7 	bl	8002edc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800116e:	4b53      	ldr	r3, [pc, #332]	; (80012bc <HAL_ADC_MspInit+0x2e0>)
 8001170:	4a53      	ldr	r2, [pc, #332]	; (80012c0 <HAL_ADC_MspInit+0x2e4>)
 8001172:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001174:	4b51      	ldr	r3, [pc, #324]	; (80012bc <HAL_ADC_MspInit+0x2e0>)
 8001176:	2224      	movs	r2, #36	; 0x24
 8001178:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800117a:	4b50      	ldr	r3, [pc, #320]	; (80012bc <HAL_ADC_MspInit+0x2e0>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001180:	4b4e      	ldr	r3, [pc, #312]	; (80012bc <HAL_ADC_MspInit+0x2e0>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001186:	4b4d      	ldr	r3, [pc, #308]	; (80012bc <HAL_ADC_MspInit+0x2e0>)
 8001188:	2280      	movs	r2, #128	; 0x80
 800118a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800118c:	4b4b      	ldr	r3, [pc, #300]	; (80012bc <HAL_ADC_MspInit+0x2e0>)
 800118e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001192:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001194:	4b49      	ldr	r3, [pc, #292]	; (80012bc <HAL_ADC_MspInit+0x2e0>)
 8001196:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800119a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800119c:	4b47      	ldr	r3, [pc, #284]	; (80012bc <HAL_ADC_MspInit+0x2e0>)
 800119e:	2220      	movs	r2, #32
 80011a0:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80011a2:	4b46      	ldr	r3, [pc, #280]	; (80012bc <HAL_ADC_MspInit+0x2e0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80011a8:	4844      	ldr	r0, [pc, #272]	; (80012bc <HAL_ADC_MspInit+0x2e0>)
 80011aa:	f001 fcdd 	bl	8002b68 <HAL_DMA_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <HAL_ADC_MspInit+0x1dc>
      Error_Handler();
 80011b4:	f7ff fee8 	bl	8000f88 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a40      	ldr	r2, [pc, #256]	; (80012bc <HAL_ADC_MspInit+0x2e0>)
 80011bc:	655a      	str	r2, [r3, #84]	; 0x54
 80011be:	4a3f      	ldr	r2, [pc, #252]	; (80012bc <HAL_ADC_MspInit+0x2e0>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6293      	str	r3, [r2, #40]	; 0x28
}
 80011c4:	e0f8      	b.n	80013b8 <HAL_ADC_MspInit+0x3dc>
  else if(hadc->Instance==ADC3)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a3e      	ldr	r2, [pc, #248]	; (80012c4 <HAL_ADC_MspInit+0x2e8>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	f040 8083 	bne.w	80012d8 <HAL_ADC_MspInit+0x2fc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80011d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011d6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80011d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011dc:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e2:	4618      	mov	r0, r3
 80011e4:	f004 fb68 	bl	80058b8 <HAL_RCCEx_PeriphCLKConfig>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_ADC_MspInit+0x216>
      Error_Handler();
 80011ee:	f7ff fecb 	bl	8000f88 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80011f2:	4b35      	ldr	r3, [pc, #212]	; (80012c8 <HAL_ADC_MspInit+0x2ec>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	3301      	adds	r3, #1
 80011f8:	4a33      	ldr	r2, [pc, #204]	; (80012c8 <HAL_ADC_MspInit+0x2ec>)
 80011fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80011fc:	4b32      	ldr	r3, [pc, #200]	; (80012c8 <HAL_ADC_MspInit+0x2ec>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d10b      	bne.n	800121c <HAL_ADC_MspInit+0x240>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001204:	4b29      	ldr	r3, [pc, #164]	; (80012ac <HAL_ADC_MspInit+0x2d0>)
 8001206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001208:	4a28      	ldr	r2, [pc, #160]	; (80012ac <HAL_ADC_MspInit+0x2d0>)
 800120a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001210:	4b26      	ldr	r3, [pc, #152]	; (80012ac <HAL_ADC_MspInit+0x2d0>)
 8001212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001214:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121c:	4b23      	ldr	r3, [pc, #140]	; (80012ac <HAL_ADC_MspInit+0x2d0>)
 800121e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001220:	4a22      	ldr	r2, [pc, #136]	; (80012ac <HAL_ADC_MspInit+0x2d0>)
 8001222:	f043 0302 	orr.w	r3, r3, #2
 8001226:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001228:	4b20      	ldr	r3, [pc, #128]	; (80012ac <HAL_ADC_MspInit+0x2d0>)
 800122a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122c:	f003 0302 	and.w	r3, r3, #2
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001234:	2301      	movs	r3, #1
 8001236:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001238:	2303      	movs	r3, #3
 800123a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001244:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001248:	4619      	mov	r1, r3
 800124a:	4820      	ldr	r0, [pc, #128]	; (80012cc <HAL_ADC_MspInit+0x2f0>)
 800124c:	f001 fe46 	bl	8002edc <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <HAL_ADC_MspInit+0x2f4>)
 8001252:	4a20      	ldr	r2, [pc, #128]	; (80012d4 <HAL_ADC_MspInit+0x2f8>)
 8001254:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8001256:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <HAL_ADC_MspInit+0x2f4>)
 8001258:	2225      	movs	r2, #37	; 0x25
 800125a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_ADC_MspInit+0x2f4>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001262:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HAL_ADC_MspInit+0x2f4>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_ADC_MspInit+0x2f4>)
 800126a:	2280      	movs	r2, #128	; 0x80
 800126c:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <HAL_ADC_MspInit+0x2f4>)
 8001270:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001274:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001276:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_ADC_MspInit+0x2f4>)
 8001278:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800127c:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800127e:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <HAL_ADC_MspInit+0x2f4>)
 8001280:	2220      	movs	r2, #32
 8001282:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8001284:	4b12      	ldr	r3, [pc, #72]	; (80012d0 <HAL_ADC_MspInit+0x2f4>)
 8001286:	2200      	movs	r2, #0
 8001288:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800128a:	4811      	ldr	r0, [pc, #68]	; (80012d0 <HAL_ADC_MspInit+0x2f4>)
 800128c:	f001 fc6c 	bl	8002b68 <HAL_DMA_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <HAL_ADC_MspInit+0x2be>
      Error_Handler();
 8001296:	f7ff fe77 	bl	8000f88 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a0c      	ldr	r2, [pc, #48]	; (80012d0 <HAL_ADC_MspInit+0x2f4>)
 800129e:	655a      	str	r2, [r3, #84]	; 0x54
 80012a0:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <HAL_ADC_MspInit+0x2f4>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80012a6:	e087      	b.n	80013b8 <HAL_ADC_MspInit+0x3dc>
 80012a8:	2000065c 	.word	0x2000065c
 80012ac:	40021000 	.word	0x40021000
 80012b0:	200003a8 	.word	0x200003a8
 80012b4:	40020008 	.word	0x40020008
 80012b8:	50000100 	.word	0x50000100
 80012bc:	20000408 	.word	0x20000408
 80012c0:	4002001c 	.word	0x4002001c
 80012c4:	50000400 	.word	0x50000400
 80012c8:	20000660 	.word	0x20000660
 80012cc:	48000400 	.word	0x48000400
 80012d0:	20000468 	.word	0x20000468
 80012d4:	40020030 	.word	0x40020030
  else if(hadc->Instance==ADC4)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a38      	ldr	r2, [pc, #224]	; (80013c0 <HAL_ADC_MspInit+0x3e4>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d16a      	bne.n	80013b8 <HAL_ADC_MspInit+0x3dc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80012e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80012e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012ec:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f2:	4618      	mov	r0, r3
 80012f4:	f004 fae0 	bl	80058b8 <HAL_RCCEx_PeriphCLKConfig>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_ADC_MspInit+0x326>
      Error_Handler();
 80012fe:	f7ff fe43 	bl	8000f88 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001302:	4b30      	ldr	r3, [pc, #192]	; (80013c4 <HAL_ADC_MspInit+0x3e8>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	3301      	adds	r3, #1
 8001308:	4a2e      	ldr	r2, [pc, #184]	; (80013c4 <HAL_ADC_MspInit+0x3e8>)
 800130a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 800130c:	4b2d      	ldr	r3, [pc, #180]	; (80013c4 <HAL_ADC_MspInit+0x3e8>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d10b      	bne.n	800132c <HAL_ADC_MspInit+0x350>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001314:	4b2c      	ldr	r3, [pc, #176]	; (80013c8 <HAL_ADC_MspInit+0x3ec>)
 8001316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001318:	4a2b      	ldr	r2, [pc, #172]	; (80013c8 <HAL_ADC_MspInit+0x3ec>)
 800131a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800131e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001320:	4b29      	ldr	r3, [pc, #164]	; (80013c8 <HAL_ADC_MspInit+0x3ec>)
 8001322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132c:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <HAL_ADC_MspInit+0x3ec>)
 800132e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001330:	4a25      	ldr	r2, [pc, #148]	; (80013c8 <HAL_ADC_MspInit+0x3ec>)
 8001332:	f043 0302 	orr.w	r3, r3, #2
 8001336:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001338:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <HAL_ADC_MspInit+0x3ec>)
 800133a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133c:	f003 0302 	and.w	r3, r3, #2
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001348:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800134a:	2303      	movs	r3, #3
 800134c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001350:	2300      	movs	r3, #0
 8001352:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001356:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800135a:	4619      	mov	r1, r3
 800135c:	481b      	ldr	r0, [pc, #108]	; (80013cc <HAL_ADC_MspInit+0x3f0>)
 800135e:	f001 fdbd 	bl	8002edc <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8001362:	4b1b      	ldr	r3, [pc, #108]	; (80013d0 <HAL_ADC_MspInit+0x3f4>)
 8001364:	4a1b      	ldr	r2, [pc, #108]	; (80013d4 <HAL_ADC_MspInit+0x3f8>)
 8001366:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <HAL_ADC_MspInit+0x3f4>)
 800136a:	2226      	movs	r2, #38	; 0x26
 800136c:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800136e:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <HAL_ADC_MspInit+0x3f4>)
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001374:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <HAL_ADC_MspInit+0x3f4>)
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800137a:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <HAL_ADC_MspInit+0x3f4>)
 800137c:	2280      	movs	r2, #128	; 0x80
 800137e:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_ADC_MspInit+0x3f4>)
 8001382:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001386:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_ADC_MspInit+0x3f4>)
 800138a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800138e:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <HAL_ADC_MspInit+0x3f4>)
 8001392:	2220      	movs	r2, #32
 8001394:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <HAL_ADC_MspInit+0x3f4>)
 8001398:	2200      	movs	r2, #0
 800139a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 800139c:	480c      	ldr	r0, [pc, #48]	; (80013d0 <HAL_ADC_MspInit+0x3f4>)
 800139e:	f001 fbe3 	bl	8002b68 <HAL_DMA_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <HAL_ADC_MspInit+0x3d0>
      Error_Handler();
 80013a8:	f7ff fdee 	bl	8000f88 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a08      	ldr	r2, [pc, #32]	; (80013d0 <HAL_ADC_MspInit+0x3f4>)
 80013b0:	655a      	str	r2, [r3, #84]	; 0x54
 80013b2:	4a07      	ldr	r2, [pc, #28]	; (80013d0 <HAL_ADC_MspInit+0x3f4>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6293      	str	r3, [r2, #40]	; 0x28
}
 80013b8:	bf00      	nop
 80013ba:	3790      	adds	r7, #144	; 0x90
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	50000500 	.word	0x50000500
 80013c4:	20000660 	.word	0x20000660
 80013c8:	40021000 	.word	0x40021000
 80013cc:	48000400 	.word	0x48000400
 80013d0:	200004c8 	.word	0x200004c8
 80013d4:	40020044 	.word	0x40020044

080013d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b09e      	sub	sp, #120	; 0x78
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80013e4:	2200      	movs	r2, #0
 80013e6:	601a      	str	r2, [r3, #0]
 80013e8:	605a      	str	r2, [r3, #4]
 80013ea:	609a      	str	r2, [r3, #8]
 80013ec:	60da      	str	r2, [r3, #12]
 80013ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	2254      	movs	r2, #84	; 0x54
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f00a fe01 	bl	800c000 <memset>
  if(huart->Instance==LPUART1)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a1f      	ldr	r2, [pc, #124]	; (8001480 <HAL_UART_MspInit+0xa8>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d136      	bne.n	8001476 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001408:	2320      	movs	r3, #32
 800140a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800140c:	2300      	movs	r3, #0
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001410:	f107 0310 	add.w	r3, r7, #16
 8001414:	4618      	mov	r0, r3
 8001416:	f004 fa4f 	bl	80058b8 <HAL_RCCEx_PeriphCLKConfig>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001420:	f7ff fdb2 	bl	8000f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001424:	4b17      	ldr	r3, [pc, #92]	; (8001484 <HAL_UART_MspInit+0xac>)
 8001426:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001428:	4a16      	ldr	r2, [pc, #88]	; (8001484 <HAL_UART_MspInit+0xac>)
 800142a:	f043 0301 	orr.w	r3, r3, #1
 800142e:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <HAL_UART_MspInit+0xac>)
 8001432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001434:	f003 0301 	and.w	r3, r3, #1
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <HAL_UART_MspInit+0xac>)
 800143e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001440:	4a10      	ldr	r2, [pc, #64]	; (8001484 <HAL_UART_MspInit+0xac>)
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001448:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <HAL_UART_MspInit+0xac>)
 800144a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001454:	230c      	movs	r3, #12
 8001456:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001458:	2302      	movs	r3, #2
 800145a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001464:	230c      	movs	r3, #12
 8001466:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001468:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800146c:	4619      	mov	r1, r3
 800146e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001472:	f001 fd33 	bl	8002edc <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8001476:	bf00      	nop
 8001478:	3778      	adds	r7, #120	; 0x78
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	40008000 	.word	0x40008000
 8001484:	40021000 	.word	0x40021000

08001488 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001498:	d113      	bne.n	80014c2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800149a:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <HAL_TIM_Base_MspInit+0x44>)
 800149c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149e:	4a0b      	ldr	r2, [pc, #44]	; (80014cc <HAL_TIM_Base_MspInit+0x44>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6593      	str	r3, [r2, #88]	; 0x58
 80014a6:	4b09      	ldr	r3, [pc, #36]	; (80014cc <HAL_TIM_Base_MspInit+0x44>)
 80014a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	201c      	movs	r0, #28
 80014b8:	f001 fb21 	bl	8002afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014bc:	201c      	movs	r0, #28
 80014be:	f001 fb38 	bl	8002b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014c2:	bf00      	nop
 80014c4:	3710      	adds	r7, #16
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40021000 	.word	0x40021000

080014d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014d4:	e7fe      	b.n	80014d4 <NMI_Handler+0x4>

080014d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014da:	e7fe      	b.n	80014da <HardFault_Handler+0x4>

080014dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <MemManage_Handler+0x4>

080014e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <BusFault_Handler+0x4>

080014e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <UsageFault_Handler+0x4>

080014ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001500:	bf00      	nop
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800151c:	f000 f8f6 	bl	800170c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	bd80      	pop	{r7, pc}

08001524 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001528:	4802      	ldr	r0, [pc, #8]	; (8001534 <DMA1_Channel1_IRQHandler+0x10>)
 800152a:	f001 fbc5 	bl	8002cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	200003a8 	.word	0x200003a8

08001538 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800153c:	4802      	ldr	r0, [pc, #8]	; (8001548 <DMA1_Channel2_IRQHandler+0x10>)
 800153e:	f001 fbbb 	bl	8002cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000408 	.word	0x20000408

0800154c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001550:	4802      	ldr	r0, [pc, #8]	; (800155c <DMA1_Channel3_IRQHandler+0x10>)
 8001552:	f001 fbb1 	bl	8002cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000468 	.word	0x20000468

08001560 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001564:	4802      	ldr	r0, [pc, #8]	; (8001570 <DMA1_Channel4_IRQHandler+0x10>)
 8001566:	f001 fba7 	bl	8002cb8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	200004c8 	.word	0x200004c8

08001574 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <USB_HP_IRQHandler+0x10>)
 800157a:	f001 ff76 	bl	800346a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20001b3c 	.word	0x20001b3c

08001588 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800158c:	4802      	ldr	r0, [pc, #8]	; (8001598 <USB_LP_IRQHandler+0x10>)
 800158e:	f001 ff6c 	bl	800346a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20001b3c 	.word	0x20001b3c

0800159c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015a0:	480b      	ldr	r0, [pc, #44]	; (80015d0 <TIM2_IRQHandler+0x34>)
 80015a2:	f004 fcd6 	bl	8005f52 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  conv_count++;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <TIM2_IRQHandler+0x38>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	3301      	adds	r3, #1
 80015ac:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <TIM2_IRQHandler+0x38>)
 80015ae:	6013      	str	r3, [r2, #0]
  HAL_GPIO_TogglePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin);
 80015b0:	2102      	movs	r1, #2
 80015b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b6:	f001 fe2b 	bl	8003210 <HAL_GPIO_TogglePin>
  if(conv_count > target_conv_count){
 80015ba:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <TIM2_IRQHandler+0x38>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <TIM2_IRQHandler+0x3c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	dd02      	ble.n	80015cc <TIM2_IRQHandler+0x30>
	  conv_done = 1;
 80015c6:	4b05      	ldr	r3, [pc, #20]	; (80015dc <TIM2_IRQHandler+0x40>)
 80015c8:	2201      	movs	r2, #1
 80015ca:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 80015cc:	bf00      	nop
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	200005bc 	.word	0x200005bc
 80015d4:	20000654 	.word	0x20000654
 80015d8:	20000650 	.word	0x20000650
 80015dc:	2000064c 	.word	0x2000064c

080015e0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80015e4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015e8:	f001 fe2c 	bl	8003244 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015ec:	bf00      	nop
 80015ee:	bd80      	pop	{r7, pc}

080015f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <SystemInit+0x20>)
 80015f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015fa:	4a05      	ldr	r2, [pc, #20]	; (8001610 <SystemInit+0x20>)
 80015fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	e000ed00 	.word	0xe000ed00

08001614 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001614:	480d      	ldr	r0, [pc, #52]	; (800164c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001616:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001618:	f7ff ffea 	bl	80015f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800161c:	480c      	ldr	r0, [pc, #48]	; (8001650 <LoopForever+0x6>)
  ldr r1, =_edata
 800161e:	490d      	ldr	r1, [pc, #52]	; (8001654 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001620:	4a0d      	ldr	r2, [pc, #52]	; (8001658 <LoopForever+0xe>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001624:	e002      	b.n	800162c <LoopCopyDataInit>

08001626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162a:	3304      	adds	r3, #4

0800162c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800162c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001630:	d3f9      	bcc.n	8001626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001632:	4a0a      	ldr	r2, [pc, #40]	; (800165c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001634:	4c0a      	ldr	r4, [pc, #40]	; (8001660 <LoopForever+0x16>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001638:	e001      	b.n	800163e <LoopFillZerobss>

0800163a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800163c:	3204      	adds	r2, #4

0800163e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001640:	d3fb      	bcc.n	800163a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001642:	f00a fcff 	bl	800c044 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001646:	f7fe ff77 	bl	8000538 <main>

0800164a <LoopForever>:

LoopForever:
    b LoopForever
 800164a:	e7fe      	b.n	800164a <LoopForever>
  ldr   r0, =_estack
 800164c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001654:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001658:	0800c270 	.word	0x0800c270
  ldr r2, =_sbss
 800165c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001660:	20002170 	.word	0x20002170

08001664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001664:	e7fe      	b.n	8001664 <ADC1_2_IRQHandler>

08001666 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001670:	2003      	movs	r0, #3
 8001672:	f001 fa39 	bl	8002ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001676:	2000      	movs	r0, #0
 8001678:	f000 f80e 	bl	8001698 <HAL_InitTick>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d002      	beq.n	8001688 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	71fb      	strb	r3, [r7, #7]
 8001686:	e001      	b.n	800168c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001688:	f7ff fc84 	bl	8000f94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800168c:	79fb      	ldrb	r3, [r7, #7]

}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
	...

08001698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016a0:	2300      	movs	r3, #0
 80016a2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016a4:	4b16      	ldr	r3, [pc, #88]	; (8001700 <HAL_InitTick+0x68>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d022      	beq.n	80016f2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016ac:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_InitTick+0x6c>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b13      	ldr	r3, [pc, #76]	; (8001700 <HAL_InitTick+0x68>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80016b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80016bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 fa44 	bl	8002b4e <HAL_SYSTICK_Config>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d10f      	bne.n	80016ec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b0f      	cmp	r3, #15
 80016d0:	d809      	bhi.n	80016e6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016d2:	2200      	movs	r2, #0
 80016d4:	6879      	ldr	r1, [r7, #4]
 80016d6:	f04f 30ff 	mov.w	r0, #4294967295
 80016da:	f001 fa10 	bl	8002afe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <HAL_InitTick+0x70>)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	e007      	b.n	80016f6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	73fb      	strb	r3, [r7, #15]
 80016ea:	e004      	b.n	80016f6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	73fb      	strb	r3, [r7, #15]
 80016f0:	e001      	b.n	80016f6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000010 	.word	0x20000010
 8001704:	20000008 	.word	0x20000008
 8001708:	2000000c 	.word	0x2000000c

0800170c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <HAL_IncTick+0x1c>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b05      	ldr	r3, [pc, #20]	; (800172c <HAL_IncTick+0x20>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4413      	add	r3, r2
 800171a:	4a03      	ldr	r2, [pc, #12]	; (8001728 <HAL_IncTick+0x1c>)
 800171c:	6013      	str	r3, [r2, #0]
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	20000664 	.word	0x20000664
 800172c:	20000010 	.word	0x20000010

08001730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  return uwTick;
 8001734:	4b03      	ldr	r3, [pc, #12]	; (8001744 <HAL_GetTick+0x14>)
 8001736:	681b      	ldr	r3, [r3, #0]
}
 8001738:	4618      	mov	r0, r3
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000664 	.word	0x20000664

08001748 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
 8001750:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	431a      	orrs	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	609a      	str	r2, [r3, #8]
}
 8001762:	bf00      	nop
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
 8001776:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	431a      	orrs	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	609a      	str	r2, [r3, #8]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3360      	adds	r3, #96	; 0x60
 80017c2:	461a      	mov	r2, r3
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	009b      	lsls	r3, r3, #2
 80017c8:	4413      	add	r3, r2
 80017ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <LL_ADC_SetOffset+0x44>)
 80017d2:	4013      	ands	r3, r2
 80017d4:	687a      	ldr	r2, [r7, #4]
 80017d6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	4313      	orrs	r3, r2
 80017e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80017e8:	bf00      	nop
 80017ea:	371c      	adds	r7, #28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	03fff000 	.word	0x03fff000

080017f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	3360      	adds	r3, #96	; 0x60
 8001806:	461a      	mov	r2, r3
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4413      	add	r3, r2
 800180e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001818:	4618      	mov	r0, r3
 800181a:	3714      	adds	r7, #20
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr

08001824 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001824:	b480      	push	{r7}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3360      	adds	r3, #96	; 0x60
 8001834:	461a      	mov	r2, r3
 8001836:	68bb      	ldr	r3, [r7, #8]
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	431a      	orrs	r2, r3
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800184e:	bf00      	nop
 8001850:	371c      	adds	r7, #28
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800185a:	b480      	push	{r7}
 800185c:	b087      	sub	sp, #28
 800185e:	af00      	add	r7, sp, #0
 8001860:	60f8      	str	r0, [r7, #12]
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	3360      	adds	r3, #96	; 0x60
 800186a:	461a      	mov	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	4413      	add	r3, r2
 8001872:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	431a      	orrs	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001884:	bf00      	nop
 8001886:	371c      	adds	r7, #28
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	3360      	adds	r3, #96	; 0x60
 80018a0:	461a      	mov	r2, r3
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	431a      	orrs	r2, r3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80018ba:	bf00      	nop
 80018bc:	371c      	adds	r7, #28
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	695b      	ldr	r3, [r3, #20]
 80018d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	431a      	orrs	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	615a      	str	r2, [r3, #20]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b087      	sub	sp, #28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	60f8      	str	r0, [r7, #12]
 80018f4:	60b9      	str	r1, [r7, #8]
 80018f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	3330      	adds	r3, #48	; 0x30
 80018fc:	461a      	mov	r2, r3
 80018fe:	68bb      	ldr	r3, [r7, #8]
 8001900:	0a1b      	lsrs	r3, r3, #8
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	f003 030c 	and.w	r3, r3, #12
 8001908:	4413      	add	r3, r2
 800190a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	f003 031f 	and.w	r3, r3, #31
 8001916:	211f      	movs	r1, #31
 8001918:	fa01 f303 	lsl.w	r3, r1, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	401a      	ands	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	0e9b      	lsrs	r3, r3, #26
 8001924:	f003 011f 	and.w	r1, r3, #31
 8001928:	68bb      	ldr	r3, [r7, #8]
 800192a:	f003 031f 	and.w	r3, r3, #31
 800192e:	fa01 f303 	lsl.w	r3, r1, r3
 8001932:	431a      	orrs	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001938:	bf00      	nop
 800193a:	371c      	adds	r7, #28
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001944:	b480      	push	{r7}
 8001946:	b087      	sub	sp, #28
 8001948:	af00      	add	r7, sp, #0
 800194a:	60f8      	str	r0, [r7, #12]
 800194c:	60b9      	str	r1, [r7, #8]
 800194e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	3314      	adds	r3, #20
 8001954:	461a      	mov	r2, r3
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	0e5b      	lsrs	r3, r3, #25
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	f003 0304 	and.w	r3, r3, #4
 8001960:	4413      	add	r3, r2
 8001962:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	0d1b      	lsrs	r3, r3, #20
 800196c:	f003 031f 	and.w	r3, r3, #31
 8001970:	2107      	movs	r1, #7
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	43db      	mvns	r3, r3
 8001978:	401a      	ands	r2, r3
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	0d1b      	lsrs	r3, r3, #20
 800197e:	f003 031f 	and.w	r3, r3, #31
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	fa01 f303 	lsl.w	r3, r1, r3
 8001988:	431a      	orrs	r2, r3
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800198e:	bf00      	nop
 8001990:	371c      	adds	r7, #28
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019b4:	43db      	mvns	r3, r3
 80019b6:	401a      	ands	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f003 0318 	and.w	r3, r3, #24
 80019be:	4908      	ldr	r1, [pc, #32]	; (80019e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80019c0:	40d9      	lsrs	r1, r3
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	400b      	ands	r3, r1
 80019c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80019ca:	431a      	orrs	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80019d2:	bf00      	nop
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	0007ffff 	.word	0x0007ffff

080019e4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80019f4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019f8:	687a      	ldr	r2, [r7, #4]
 80019fa:	6093      	str	r3, [r2, #8]
}
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001a18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a1c:	d101      	bne.n	8001a22 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e000      	b.n	8001a24 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001a22:	2300      	movs	r3, #0
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001a40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a44:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001a6c:	d101      	bne.n	8001a72 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e000      	b.n	8001a74 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001a72:	2300      	movs	r3, #0
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <LL_ADC_IsEnabled+0x18>
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <LL_ADC_IsEnabled+0x1a>
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	b083      	sub	sp, #12
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	689b      	ldr	r3, [r3, #8]
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	d101      	bne.n	8001abe <LL_ADC_REG_IsConversionOngoing+0x18>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e000      	b.n	8001ac0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001abe:	2300      	movs	r3, #0
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b08      	cmp	r3, #8
 8001ade:	d101      	bne.n	8001ae4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e000      	b.n	8001ae6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
	...

08001af4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001afc:	2300      	movs	r3, #0
 8001afe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e1a9      	b.n	8001e62 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d109      	bne.n	8001b30 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	f7ff fa5d 	bl	8000fdc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff67 	bl	8001a08 <LL_ADC_IsDeepPowerDownEnabled>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d004      	beq.n	8001b4a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff4d 	bl	80019e4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7ff ff82 	bl	8001a58 <LL_ADC_IsInternalRegulatorEnabled>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d115      	bne.n	8001b86 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff ff66 	bl	8001a30 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b64:	4b9c      	ldr	r3, [pc, #624]	; (8001dd8 <HAL_ADC_Init+0x2e4>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	099b      	lsrs	r3, r3, #6
 8001b6a:	4a9c      	ldr	r2, [pc, #624]	; (8001ddc <HAL_ADC_Init+0x2e8>)
 8001b6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b70:	099b      	lsrs	r3, r3, #6
 8001b72:	3301      	adds	r3, #1
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b78:	e002      	b.n	8001b80 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f9      	bne.n	8001b7a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff ff64 	bl	8001a58 <LL_ADC_IsInternalRegulatorEnabled>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10d      	bne.n	8001bb2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9a:	f043 0210 	orr.w	r2, r3, #16
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ba6:	f043 0201 	orr.w	r2, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ff75 	bl	8001aa6 <LL_ADC_REG_IsConversionOngoing>
 8001bbc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc2:	f003 0310 	and.w	r3, r3, #16
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	f040 8142 	bne.w	8001e50 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f040 813e 	bne.w	8001e50 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001bdc:	f043 0202 	orr.w	r2, r3, #2
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff ff49 	bl	8001a80 <LL_ADC_IsEnabled>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d141      	bne.n	8001c78 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bfc:	d004      	beq.n	8001c08 <HAL_ADC_Init+0x114>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a77      	ldr	r2, [pc, #476]	; (8001de0 <HAL_ADC_Init+0x2ec>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d10f      	bne.n	8001c28 <HAL_ADC_Init+0x134>
 8001c08:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001c0c:	f7ff ff38 	bl	8001a80 <LL_ADC_IsEnabled>
 8001c10:	4604      	mov	r4, r0
 8001c12:	4873      	ldr	r0, [pc, #460]	; (8001de0 <HAL_ADC_Init+0x2ec>)
 8001c14:	f7ff ff34 	bl	8001a80 <LL_ADC_IsEnabled>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	4323      	orrs	r3, r4
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bf0c      	ite	eq
 8001c20:	2301      	moveq	r3, #1
 8001c22:	2300      	movne	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	e012      	b.n	8001c4e <HAL_ADC_Init+0x15a>
 8001c28:	486e      	ldr	r0, [pc, #440]	; (8001de4 <HAL_ADC_Init+0x2f0>)
 8001c2a:	f7ff ff29 	bl	8001a80 <LL_ADC_IsEnabled>
 8001c2e:	4604      	mov	r4, r0
 8001c30:	486d      	ldr	r0, [pc, #436]	; (8001de8 <HAL_ADC_Init+0x2f4>)
 8001c32:	f7ff ff25 	bl	8001a80 <LL_ADC_IsEnabled>
 8001c36:	4603      	mov	r3, r0
 8001c38:	431c      	orrs	r4, r3
 8001c3a:	486c      	ldr	r0, [pc, #432]	; (8001dec <HAL_ADC_Init+0x2f8>)
 8001c3c:	f7ff ff20 	bl	8001a80 <LL_ADC_IsEnabled>
 8001c40:	4603      	mov	r3, r0
 8001c42:	4323      	orrs	r3, r4
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	bf0c      	ite	eq
 8001c48:	2301      	moveq	r3, #1
 8001c4a:	2300      	movne	r3, #0
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d012      	beq.n	8001c78 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c5a:	d004      	beq.n	8001c66 <HAL_ADC_Init+0x172>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a5f      	ldr	r2, [pc, #380]	; (8001de0 <HAL_ADC_Init+0x2ec>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d101      	bne.n	8001c6a <HAL_ADC_Init+0x176>
 8001c66:	4a62      	ldr	r2, [pc, #392]	; (8001df0 <HAL_ADC_Init+0x2fc>)
 8001c68:	e000      	b.n	8001c6c <HAL_ADC_Init+0x178>
 8001c6a:	4a62      	ldr	r2, [pc, #392]	; (8001df4 <HAL_ADC_Init+0x300>)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	4619      	mov	r1, r3
 8001c72:	4610      	mov	r0, r2
 8001c74:	f7ff fd68 	bl	8001748 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	7f5b      	ldrb	r3, [r3, #29]
 8001c7c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c82:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001c88:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c8e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c96:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d106      	bne.n	8001cb4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001caa:	3b01      	subs	r3, #1
 8001cac:	045b      	lsls	r3, r3, #17
 8001cae:	69ba      	ldr	r2, [r7, #24]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d009      	beq.n	8001cd0 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001cca:	69ba      	ldr	r2, [r7, #24]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	4b48      	ldr	r3, [pc, #288]	; (8001df8 <HAL_ADC_Init+0x304>)
 8001cd8:	4013      	ands	r3, r2
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	69b9      	ldr	r1, [r7, #24]
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	691b      	ldr	r3, [r3, #16]
 8001cea:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f7ff fee4 	bl	8001acc <LL_ADC_INJ_IsConversionOngoing>
 8001d04:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d17f      	bne.n	8001e0c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d17c      	bne.n	8001e0c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d16:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d1e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001d20:	4313      	orrs	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d2e:	f023 0302 	bic.w	r3, r3, #2
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	69b9      	ldr	r1, [r7, #24]
 8001d38:	430b      	orrs	r3, r1
 8001d3a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d017      	beq.n	8001d74 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	691a      	ldr	r2, [r3, #16]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d52:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d5c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	6911      	ldr	r1, [r2, #16]
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6812      	ldr	r2, [r2, #0]
 8001d6c:	430b      	orrs	r3, r1
 8001d6e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001d72:	e013      	b.n	8001d9c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	691a      	ldr	r2, [r3, #16]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d82:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6812      	ldr	r2, [r2, #0]
 8001d90:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d98:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d12a      	bne.n	8001dfc <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001db0:	f023 0304 	bic.w	r3, r3, #4
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001db8:	687a      	ldr	r2, [r7, #4]
 8001dba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001dbc:	4311      	orrs	r1, r2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001dc2:	4311      	orrs	r1, r2
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f042 0201 	orr.w	r2, r2, #1
 8001dd4:	611a      	str	r2, [r3, #16]
 8001dd6:	e019      	b.n	8001e0c <HAL_ADC_Init+0x318>
 8001dd8:	20000008 	.word	0x20000008
 8001ddc:	053e2d63 	.word	0x053e2d63
 8001de0:	50000100 	.word	0x50000100
 8001de4:	50000400 	.word	0x50000400
 8001de8:	50000500 	.word	0x50000500
 8001dec:	50000600 	.word	0x50000600
 8001df0:	50000300 	.word	0x50000300
 8001df4:	50000700 	.word	0x50000700
 8001df8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f022 0201 	bic.w	r2, r2, #1
 8001e0a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	695b      	ldr	r3, [r3, #20]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d10c      	bne.n	8001e2e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f023 010f 	bic.w	r1, r3, #15
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6a1b      	ldr	r3, [r3, #32]
 8001e22:	1e5a      	subs	r2, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e2c:	e007      	b.n	8001e3e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 020f 	bic.w	r2, r2, #15
 8001e3c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e42:	f023 0303 	bic.w	r3, r3, #3
 8001e46:	f043 0201 	orr.w	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e4e:	e007      	b.n	8001e60 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e54:	f043 0210 	orr.w	r2, r3, #16
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e60:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3724      	adds	r7, #36	; 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd90      	pop	{r4, r7, pc}
 8001e6a:	bf00      	nop

08001e6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b0b6      	sub	sp, #216	; 0xd8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e76:	2300      	movs	r3, #0
 8001e78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d102      	bne.n	8001e90 <HAL_ADC_ConfigChannel+0x24>
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	f000 bc13 	b.w	80026b6 <HAL_ADC_ConfigChannel+0x84a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2201      	movs	r2, #1
 8001e94:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7ff fe02 	bl	8001aa6 <LL_ADC_REG_IsConversionOngoing>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f040 83f3 	bne.w	8002690 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6818      	ldr	r0, [r3, #0]
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	6859      	ldr	r1, [r3, #4]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	f7ff fd18 	bl	80018ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fdf0 	bl	8001aa6 <LL_ADC_REG_IsConversionOngoing>
 8001ec6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fdfc 	bl	8001acc <LL_ADC_INJ_IsConversionOngoing>
 8001ed4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001ed8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f040 81d9 	bne.w	8002294 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001ee2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f040 81d4 	bne.w	8002294 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001ef4:	d10f      	bne.n	8001f16 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6818      	ldr	r0, [r3, #0]
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2200      	movs	r2, #0
 8001f00:	4619      	mov	r1, r3
 8001f02:	f7ff fd1f 	bl	8001944 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f7ff fcd9 	bl	80018c6 <LL_ADC_SetSamplingTimeCommonConfig>
 8001f14:	e00e      	b.n	8001f34 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	6819      	ldr	r1, [r3, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	461a      	mov	r2, r3
 8001f24:	f7ff fd0e 	bl	8001944 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff fcc9 	bl	80018c6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	08db      	lsrs	r3, r3, #3
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	691b      	ldr	r3, [r3, #16]
 8001f52:	2b04      	cmp	r3, #4
 8001f54:	d022      	beq.n	8001f9c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	6919      	ldr	r1, [r3, #16]
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001f66:	f7ff fc23 	bl	80017b0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6919      	ldr	r1, [r3, #16]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	461a      	mov	r2, r3
 8001f78:	f7ff fc6f 	bl	800185a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d102      	bne.n	8001f92 <HAL_ADC_ConfigChannel+0x126>
 8001f8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f90:	e000      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x128>
 8001f92:	2300      	movs	r3, #0
 8001f94:	461a      	mov	r2, r3
 8001f96:	f7ff fc7b 	bl	8001890 <LL_ADC_SetOffsetSaturation>
 8001f9a:	e17b      	b.n	8002294 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2100      	movs	r1, #0
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fc28 	bl	80017f8 <LL_ADC_GetOffsetChannel>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10a      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x15c>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2100      	movs	r1, #0
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff fc1d 	bl	80017f8 <LL_ADC_GetOffsetChannel>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	0e9b      	lsrs	r3, r3, #26
 8001fc2:	f003 021f 	and.w	r2, r3, #31
 8001fc6:	e01e      	b.n	8002006 <HAL_ADC_ConfigChannel+0x19a>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2100      	movs	r1, #0
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fc12 	bl	80017f8 <LL_ADC_GetOffsetChannel>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fe6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001fea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001ff6:	2320      	movs	r3, #32
 8001ff8:	e004      	b.n	8002004 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001ffa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ffe:	fab3 f383 	clz	r3, r3
 8002002:	b2db      	uxtb	r3, r3
 8002004:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200e:	2b00      	cmp	r3, #0
 8002010:	d105      	bne.n	800201e <HAL_ADC_ConfigChannel+0x1b2>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	0e9b      	lsrs	r3, r3, #26
 8002018:	f003 031f 	and.w	r3, r3, #31
 800201c:	e018      	b.n	8002050 <HAL_ADC_ConfigChannel+0x1e4>
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002026:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002036:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800203a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002042:	2320      	movs	r3, #32
 8002044:	e004      	b.n	8002050 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002046:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800204a:	fab3 f383 	clz	r3, r3
 800204e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002050:	429a      	cmp	r2, r3
 8002052:	d106      	bne.n	8002062 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2200      	movs	r2, #0
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fbe1 	bl	8001824 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	2101      	movs	r1, #1
 8002068:	4618      	mov	r0, r3
 800206a:	f7ff fbc5 	bl	80017f8 <LL_ADC_GetOffsetChannel>
 800206e:	4603      	mov	r3, r0
 8002070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002074:	2b00      	cmp	r3, #0
 8002076:	d10a      	bne.n	800208e <HAL_ADC_ConfigChannel+0x222>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2101      	movs	r1, #1
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fbba 	bl	80017f8 <LL_ADC_GetOffsetChannel>
 8002084:	4603      	mov	r3, r0
 8002086:	0e9b      	lsrs	r3, r3, #26
 8002088:	f003 021f 	and.w	r2, r3, #31
 800208c:	e01e      	b.n	80020cc <HAL_ADC_ConfigChannel+0x260>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	2101      	movs	r1, #1
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff fbaf 	bl	80017f8 <LL_ADC_GetOffsetChannel>
 800209a:	4603      	mov	r3, r0
 800209c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80020a4:	fa93 f3a3 	rbit	r3, r3
 80020a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80020ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80020b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80020b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d101      	bne.n	80020c0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80020bc:	2320      	movs	r3, #32
 80020be:	e004      	b.n	80020ca <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80020c0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80020c4:	fab3 f383 	clz	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d105      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x278>
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	0e9b      	lsrs	r3, r3, #26
 80020de:	f003 031f 	and.w	r3, r3, #31
 80020e2:	e018      	b.n	8002116 <HAL_ADC_ConfigChannel+0x2aa>
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80020f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80020fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002100:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002104:	2b00      	cmp	r3, #0
 8002106:	d101      	bne.n	800210c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002108:	2320      	movs	r3, #32
 800210a:	e004      	b.n	8002116 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 800210c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002110:	fab3 f383 	clz	r3, r3
 8002114:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002116:	429a      	cmp	r2, r3
 8002118:	d106      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2200      	movs	r2, #0
 8002120:	2101      	movs	r1, #1
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fb7e 	bl	8001824 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2102      	movs	r1, #2
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fb62 	bl	80017f8 <LL_ADC_GetOffsetChannel>
 8002134:	4603      	mov	r3, r0
 8002136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10a      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x2e8>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2102      	movs	r1, #2
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff fb57 	bl	80017f8 <LL_ADC_GetOffsetChannel>
 800214a:	4603      	mov	r3, r0
 800214c:	0e9b      	lsrs	r3, r3, #26
 800214e:	f003 021f 	and.w	r2, r3, #31
 8002152:	e01e      	b.n	8002192 <HAL_ADC_ConfigChannel+0x326>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2102      	movs	r1, #2
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff fb4c 	bl	80017f8 <LL_ADC_GetOffsetChannel>
 8002160:	4603      	mov	r3, r0
 8002162:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002172:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002176:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800217a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002182:	2320      	movs	r3, #32
 8002184:	e004      	b.n	8002190 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002186:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800218a:	fab3 f383 	clz	r3, r3
 800218e:	b2db      	uxtb	r3, r3
 8002190:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800219a:	2b00      	cmp	r3, #0
 800219c:	d105      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x33e>
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	0e9b      	lsrs	r3, r3, #26
 80021a4:	f003 031f 	and.w	r3, r3, #31
 80021a8:	e016      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x36c>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80021b6:	fa93 f3a3 	rbit	r3, r3
 80021ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80021bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80021be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80021c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80021ca:	2320      	movs	r3, #32
 80021cc:	e004      	b.n	80021d8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80021ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80021d2:	fab3 f383 	clz	r3, r3
 80021d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80021d8:	429a      	cmp	r2, r3
 80021da:	d106      	bne.n	80021ea <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2200      	movs	r2, #0
 80021e2:	2102      	movs	r1, #2
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff fb1d 	bl	8001824 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2103      	movs	r1, #3
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff fb01 	bl	80017f8 <LL_ADC_GetOffsetChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d10a      	bne.n	8002216 <HAL_ADC_ConfigChannel+0x3aa>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2103      	movs	r1, #3
 8002206:	4618      	mov	r0, r3
 8002208:	f7ff faf6 	bl	80017f8 <LL_ADC_GetOffsetChannel>
 800220c:	4603      	mov	r3, r0
 800220e:	0e9b      	lsrs	r3, r3, #26
 8002210:	f003 021f 	and.w	r2, r3, #31
 8002214:	e017      	b.n	8002246 <HAL_ADC_ConfigChannel+0x3da>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2103      	movs	r1, #3
 800221c:	4618      	mov	r0, r3
 800221e:	f7ff faeb 	bl	80017f8 <LL_ADC_GetOffsetChannel>
 8002222:	4603      	mov	r3, r0
 8002224:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002226:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002228:	fa93 f3a3 	rbit	r3, r3
 800222c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800222e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002230:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002238:	2320      	movs	r3, #32
 800223a:	e003      	b.n	8002244 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800223c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800223e:	fab3 f383 	clz	r3, r3
 8002242:	b2db      	uxtb	r3, r3
 8002244:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224e:	2b00      	cmp	r3, #0
 8002250:	d105      	bne.n	800225e <HAL_ADC_ConfigChannel+0x3f2>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	0e9b      	lsrs	r3, r3, #26
 8002258:	f003 031f 	and.w	r3, r3, #31
 800225c:	e011      	b.n	8002282 <HAL_ADC_ConfigChannel+0x416>
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800226c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800226e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002276:	2320      	movs	r3, #32
 8002278:	e003      	b.n	8002282 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800227a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002282:	429a      	cmp	r2, r3
 8002284:	d106      	bne.n	8002294 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2200      	movs	r2, #0
 800228c:	2103      	movs	r1, #3
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fac8 	bl	8001824 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff fbf1 	bl	8001a80 <LL_ADC_IsEnabled>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	f040 813d 	bne.w	8002520 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6818      	ldr	r0, [r3, #0]
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	6819      	ldr	r1, [r3, #0]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	461a      	mov	r2, r3
 80022b4:	f7ff fb72 	bl	800199c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	4aa2      	ldr	r2, [pc, #648]	; (8002548 <HAL_ADC_ConfigChannel+0x6dc>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	f040 812e 	bne.w	8002520 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d10b      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x480>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	0e9b      	lsrs	r3, r3, #26
 80022da:	3301      	adds	r3, #1
 80022dc:	f003 031f 	and.w	r3, r3, #31
 80022e0:	2b09      	cmp	r3, #9
 80022e2:	bf94      	ite	ls
 80022e4:	2301      	movls	r3, #1
 80022e6:	2300      	movhi	r3, #0
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	e019      	b.n	8002320 <HAL_ADC_ConfigChannel+0x4b4>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022f4:	fa93 f3a3 	rbit	r3, r3
 80022f8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80022fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022fc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80022fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002304:	2320      	movs	r3, #32
 8002306:	e003      	b.n	8002310 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002308:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	3301      	adds	r3, #1
 8002312:	f003 031f 	and.w	r3, r3, #31
 8002316:	2b09      	cmp	r3, #9
 8002318:	bf94      	ite	ls
 800231a:	2301      	movls	r3, #1
 800231c:	2300      	movhi	r3, #0
 800231e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002320:	2b00      	cmp	r3, #0
 8002322:	d079      	beq.n	8002418 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232c:	2b00      	cmp	r3, #0
 800232e:	d107      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x4d4>
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	0e9b      	lsrs	r3, r3, #26
 8002336:	3301      	adds	r3, #1
 8002338:	069b      	lsls	r3, r3, #26
 800233a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800233e:	e015      	b.n	800236c <HAL_ADC_ConfigChannel+0x500>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002346:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002348:	fa93 f3a3 	rbit	r3, r3
 800234c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800234e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002350:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002354:	2b00      	cmp	r3, #0
 8002356:	d101      	bne.n	800235c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002358:	2320      	movs	r3, #32
 800235a:	e003      	b.n	8002364 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800235c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	b2db      	uxtb	r3, r3
 8002364:	3301      	adds	r3, #1
 8002366:	069b      	lsls	r3, r3, #26
 8002368:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002374:	2b00      	cmp	r3, #0
 8002376:	d109      	bne.n	800238c <HAL_ADC_ConfigChannel+0x520>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	0e9b      	lsrs	r3, r3, #26
 800237e:	3301      	adds	r3, #1
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	2101      	movs	r1, #1
 8002386:	fa01 f303 	lsl.w	r3, r1, r3
 800238a:	e017      	b.n	80023bc <HAL_ADC_ConfigChannel+0x550>
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002392:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002394:	fa93 f3a3 	rbit	r3, r3
 8002398:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800239a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800239c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800239e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80023a4:	2320      	movs	r3, #32
 80023a6:	e003      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80023a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023aa:	fab3 f383 	clz	r3, r3
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	3301      	adds	r3, #1
 80023b2:	f003 031f 	and.w	r3, r3, #31
 80023b6:	2101      	movs	r1, #1
 80023b8:	fa01 f303 	lsl.w	r3, r1, r3
 80023bc:	ea42 0103 	orr.w	r1, r2, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10a      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x576>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	0e9b      	lsrs	r3, r3, #26
 80023d2:	3301      	adds	r3, #1
 80023d4:	f003 021f 	and.w	r2, r3, #31
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	051b      	lsls	r3, r3, #20
 80023e0:	e018      	b.n	8002414 <HAL_ADC_ConfigChannel+0x5a8>
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ea:	fa93 f3a3 	rbit	r3, r3
 80023ee:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80023f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80023f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80023fa:	2320      	movs	r3, #32
 80023fc:	e003      	b.n	8002406 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80023fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002400:	fab3 f383 	clz	r3, r3
 8002404:	b2db      	uxtb	r3, r3
 8002406:	3301      	adds	r3, #1
 8002408:	f003 021f 	and.w	r2, r3, #31
 800240c:	4613      	mov	r3, r2
 800240e:	005b      	lsls	r3, r3, #1
 8002410:	4413      	add	r3, r2
 8002412:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002414:	430b      	orrs	r3, r1
 8002416:	e07e      	b.n	8002516 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002420:	2b00      	cmp	r3, #0
 8002422:	d107      	bne.n	8002434 <HAL_ADC_ConfigChannel+0x5c8>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0e9b      	lsrs	r3, r3, #26
 800242a:	3301      	adds	r3, #1
 800242c:	069b      	lsls	r3, r3, #26
 800242e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002432:	e015      	b.n	8002460 <HAL_ADC_ConfigChannel+0x5f4>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002444:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800244c:	2320      	movs	r3, #32
 800244e:	e003      	b.n	8002458 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	3301      	adds	r3, #1
 800245a:	069b      	lsls	r3, r3, #26
 800245c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002468:	2b00      	cmp	r3, #0
 800246a:	d109      	bne.n	8002480 <HAL_ADC_ConfigChannel+0x614>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	0e9b      	lsrs	r3, r3, #26
 8002472:	3301      	adds	r3, #1
 8002474:	f003 031f 	and.w	r3, r3, #31
 8002478:	2101      	movs	r1, #1
 800247a:	fa01 f303 	lsl.w	r3, r1, r3
 800247e:	e017      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x644>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002486:	6a3b      	ldr	r3, [r7, #32]
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	61fb      	str	r3, [r7, #28]
  return result;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002498:	2320      	movs	r3, #32
 800249a:	e003      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249e:	fab3 f383 	clz	r3, r3
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	3301      	adds	r3, #1
 80024a6:	f003 031f 	and.w	r3, r3, #31
 80024aa:	2101      	movs	r1, #1
 80024ac:	fa01 f303 	lsl.w	r3, r1, r3
 80024b0:	ea42 0103 	orr.w	r1, r2, r3
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10d      	bne.n	80024dc <HAL_ADC_ConfigChannel+0x670>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	0e9b      	lsrs	r3, r3, #26
 80024c6:	3301      	adds	r3, #1
 80024c8:	f003 021f 	and.w	r2, r3, #31
 80024cc:	4613      	mov	r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	4413      	add	r3, r2
 80024d2:	3b1e      	subs	r3, #30
 80024d4:	051b      	lsls	r3, r3, #20
 80024d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024da:	e01b      	b.n	8002514 <HAL_ADC_ConfigChannel+0x6a8>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	fa93 f3a3 	rbit	r3, r3
 80024e8:	613b      	str	r3, [r7, #16]
  return result;
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d101      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80024f4:	2320      	movs	r3, #32
 80024f6:	e003      	b.n	8002500 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	3301      	adds	r3, #1
 8002502:	f003 021f 	and.w	r2, r3, #31
 8002506:	4613      	mov	r3, r2
 8002508:	005b      	lsls	r3, r3, #1
 800250a:	4413      	add	r3, r2
 800250c:	3b1e      	subs	r3, #30
 800250e:	051b      	lsls	r3, r3, #20
 8002510:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002514:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002516:	683a      	ldr	r2, [r7, #0]
 8002518:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800251a:	4619      	mov	r1, r3
 800251c:	f7ff fa12 	bl	8001944 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4b09      	ldr	r3, [pc, #36]	; (800254c <HAL_ADC_ConfigChannel+0x6e0>)
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 80be 	beq.w	80026aa <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002536:	d004      	beq.n	8002542 <HAL_ADC_ConfigChannel+0x6d6>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a04      	ldr	r2, [pc, #16]	; (8002550 <HAL_ADC_ConfigChannel+0x6e4>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d10a      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x6ec>
 8002542:	4b04      	ldr	r3, [pc, #16]	; (8002554 <HAL_ADC_ConfigChannel+0x6e8>)
 8002544:	e009      	b.n	800255a <HAL_ADC_ConfigChannel+0x6ee>
 8002546:	bf00      	nop
 8002548:	407f0000 	.word	0x407f0000
 800254c:	80080000 	.word	0x80080000
 8002550:	50000100 	.word	0x50000100
 8002554:	50000300 	.word	0x50000300
 8002558:	4b59      	ldr	r3, [pc, #356]	; (80026c0 <HAL_ADC_ConfigChannel+0x854>)
 800255a:	4618      	mov	r0, r3
 800255c:	f7ff f91a 	bl	8001794 <LL_ADC_GetCommonPathInternalCh>
 8002560:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a56      	ldr	r2, [pc, #344]	; (80026c4 <HAL_ADC_ConfigChannel+0x858>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d004      	beq.n	8002578 <HAL_ADC_ConfigChannel+0x70c>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a55      	ldr	r2, [pc, #340]	; (80026c8 <HAL_ADC_ConfigChannel+0x85c>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d13a      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002578:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800257c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d134      	bne.n	80025ee <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800258c:	d005      	beq.n	800259a <HAL_ADC_ConfigChannel+0x72e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a4e      	ldr	r2, [pc, #312]	; (80026cc <HAL_ADC_ConfigChannel+0x860>)
 8002594:	4293      	cmp	r3, r2
 8002596:	f040 8085 	bne.w	80026a4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025a2:	d004      	beq.n	80025ae <HAL_ADC_ConfigChannel+0x742>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a49      	ldr	r2, [pc, #292]	; (80026d0 <HAL_ADC_ConfigChannel+0x864>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d101      	bne.n	80025b2 <HAL_ADC_ConfigChannel+0x746>
 80025ae:	4a49      	ldr	r2, [pc, #292]	; (80026d4 <HAL_ADC_ConfigChannel+0x868>)
 80025b0:	e000      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x748>
 80025b2:	4a43      	ldr	r2, [pc, #268]	; (80026c0 <HAL_ADC_ConfigChannel+0x854>)
 80025b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025bc:	4619      	mov	r1, r3
 80025be:	4610      	mov	r0, r2
 80025c0:	f7ff f8d5 	bl	800176e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025c4:	4b44      	ldr	r3, [pc, #272]	; (80026d8 <HAL_ADC_ConfigChannel+0x86c>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	099b      	lsrs	r3, r3, #6
 80025ca:	4a44      	ldr	r2, [pc, #272]	; (80026dc <HAL_ADC_ConfigChannel+0x870>)
 80025cc:	fba2 2303 	umull	r2, r3, r2, r3
 80025d0:	099b      	lsrs	r3, r3, #6
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	4613      	mov	r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025de:	e002      	b.n	80025e6 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1f9      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80025ec:	e05a      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a3b      	ldr	r2, [pc, #236]	; (80026e0 <HAL_ADC_ConfigChannel+0x874>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d125      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80025f8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80025fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d11f      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a31      	ldr	r2, [pc, #196]	; (80026d0 <HAL_ADC_ConfigChannel+0x864>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d104      	bne.n	8002618 <HAL_ADC_ConfigChannel+0x7ac>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a34      	ldr	r2, [pc, #208]	; (80026e4 <HAL_ADC_ConfigChannel+0x878>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d047      	beq.n	80026a8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002620:	d004      	beq.n	800262c <HAL_ADC_ConfigChannel+0x7c0>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a2a      	ldr	r2, [pc, #168]	; (80026d0 <HAL_ADC_ConfigChannel+0x864>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d101      	bne.n	8002630 <HAL_ADC_ConfigChannel+0x7c4>
 800262c:	4a29      	ldr	r2, [pc, #164]	; (80026d4 <HAL_ADC_ConfigChannel+0x868>)
 800262e:	e000      	b.n	8002632 <HAL_ADC_ConfigChannel+0x7c6>
 8002630:	4a23      	ldr	r2, [pc, #140]	; (80026c0 <HAL_ADC_ConfigChannel+0x854>)
 8002632:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002636:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800263a:	4619      	mov	r1, r3
 800263c:	4610      	mov	r0, r2
 800263e:	f7ff f896 	bl	800176e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002642:	e031      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a27      	ldr	r2, [pc, #156]	; (80026e8 <HAL_ADC_ConfigChannel+0x87c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d12d      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800264e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d127      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a1c      	ldr	r2, [pc, #112]	; (80026d0 <HAL_ADC_ConfigChannel+0x864>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d022      	beq.n	80026aa <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800266c:	d004      	beq.n	8002678 <HAL_ADC_ConfigChannel+0x80c>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a17      	ldr	r2, [pc, #92]	; (80026d0 <HAL_ADC_ConfigChannel+0x864>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d101      	bne.n	800267c <HAL_ADC_ConfigChannel+0x810>
 8002678:	4a16      	ldr	r2, [pc, #88]	; (80026d4 <HAL_ADC_ConfigChannel+0x868>)
 800267a:	e000      	b.n	800267e <HAL_ADC_ConfigChannel+0x812>
 800267c:	4a10      	ldr	r2, [pc, #64]	; (80026c0 <HAL_ADC_ConfigChannel+0x854>)
 800267e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002682:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002686:	4619      	mov	r1, r3
 8002688:	4610      	mov	r0, r2
 800268a:	f7ff f870 	bl	800176e <LL_ADC_SetCommonPathInternalCh>
 800268e:	e00c      	b.n	80026aa <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002694:	f043 0220 	orr.w	r2, r3, #32
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80026a2:	e002      	b.n	80026aa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026a4:	bf00      	nop
 80026a6:	e000      	b.n	80026aa <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80026a8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80026b2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	37d8      	adds	r7, #216	; 0xd8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	50000700 	.word	0x50000700
 80026c4:	c3210000 	.word	0xc3210000
 80026c8:	90c00010 	.word	0x90c00010
 80026cc:	50000600 	.word	0x50000600
 80026d0:	50000100 	.word	0x50000100
 80026d4:	50000300 	.word	0x50000300
 80026d8:	20000008 	.word	0x20000008
 80026dc:	053e2d63 	.word	0x053e2d63
 80026e0:	c7520000 	.word	0xc7520000
 80026e4:	50000500 	.word	0x50000500
 80026e8:	cb840000 	.word	0xcb840000

080026ec <LL_ADC_IsEnabled>:
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d101      	bne.n	8002704 <LL_ADC_IsEnabled+0x18>
 8002700:	2301      	movs	r3, #1
 8002702:	e000      	b.n	8002706 <LL_ADC_IsEnabled+0x1a>
 8002704:	2300      	movs	r3, #0
}
 8002706:	4618      	mov	r0, r3
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <LL_ADC_REG_IsConversionOngoing>:
{
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 0304 	and.w	r3, r3, #4
 8002722:	2b04      	cmp	r3, #4
 8002724:	d101      	bne.n	800272a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800272a:	2300      	movs	r3, #0
}
 800272c:	4618      	mov	r0, r3
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002738:	b590      	push	{r4, r7, lr}
 800273a:	b0a1      	sub	sp, #132	; 0x84
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002742:	2300      	movs	r3, #0
 8002744:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800274e:	2b01      	cmp	r3, #1
 8002750:	d101      	bne.n	8002756 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002752:	2302      	movs	r3, #2
 8002754:	e0e7      	b.n	8002926 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800275e:	2300      	movs	r3, #0
 8002760:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002762:	2300      	movs	r3, #0
 8002764:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800276e:	d102      	bne.n	8002776 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002770:	4b6f      	ldr	r3, [pc, #444]	; (8002930 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	e009      	b.n	800278a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a6e      	ldr	r2, [pc, #440]	; (8002934 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d102      	bne.n	8002786 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002780:	4b6d      	ldr	r3, [pc, #436]	; (8002938 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002782:	60bb      	str	r3, [r7, #8]
 8002784:	e001      	b.n	800278a <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002786:	2300      	movs	r3, #0
 8002788:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 800278a:	68bb      	ldr	r3, [r7, #8]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d10b      	bne.n	80027a8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002794:	f043 0220 	orr.w	r2, r3, #32
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0be      	b.n	8002926 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff ffb1 	bl	8002712 <LL_ADC_REG_IsConversionOngoing>
 80027b0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff ffab 	bl	8002712 <LL_ADC_REG_IsConversionOngoing>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f040 80a0 	bne.w	8002904 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80027c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f040 809c 	bne.w	8002904 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027d4:	d004      	beq.n	80027e0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a55      	ldr	r2, [pc, #340]	; (8002930 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d101      	bne.n	80027e4 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80027e0:	4b56      	ldr	r3, [pc, #344]	; (800293c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80027e2:	e000      	b.n	80027e6 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80027e4:	4b56      	ldr	r3, [pc, #344]	; (8002940 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80027e6:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d04b      	beq.n	8002888 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80027f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	6859      	ldr	r1, [r3, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002802:	035b      	lsls	r3, r3, #13
 8002804:	430b      	orrs	r3, r1
 8002806:	431a      	orrs	r2, r3
 8002808:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800280a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002814:	d004      	beq.n	8002820 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a45      	ldr	r2, [pc, #276]	; (8002930 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d10f      	bne.n	8002840 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002820:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002824:	f7ff ff62 	bl	80026ec <LL_ADC_IsEnabled>
 8002828:	4604      	mov	r4, r0
 800282a:	4841      	ldr	r0, [pc, #260]	; (8002930 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800282c:	f7ff ff5e 	bl	80026ec <LL_ADC_IsEnabled>
 8002830:	4603      	mov	r3, r0
 8002832:	4323      	orrs	r3, r4
 8002834:	2b00      	cmp	r3, #0
 8002836:	bf0c      	ite	eq
 8002838:	2301      	moveq	r3, #1
 800283a:	2300      	movne	r3, #0
 800283c:	b2db      	uxtb	r3, r3
 800283e:	e012      	b.n	8002866 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002840:	483c      	ldr	r0, [pc, #240]	; (8002934 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002842:	f7ff ff53 	bl	80026ec <LL_ADC_IsEnabled>
 8002846:	4604      	mov	r4, r0
 8002848:	483b      	ldr	r0, [pc, #236]	; (8002938 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800284a:	f7ff ff4f 	bl	80026ec <LL_ADC_IsEnabled>
 800284e:	4603      	mov	r3, r0
 8002850:	431c      	orrs	r4, r3
 8002852:	483c      	ldr	r0, [pc, #240]	; (8002944 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002854:	f7ff ff4a 	bl	80026ec <LL_ADC_IsEnabled>
 8002858:	4603      	mov	r3, r0
 800285a:	4323      	orrs	r3, r4
 800285c:	2b00      	cmp	r3, #0
 800285e:	bf0c      	ite	eq
 8002860:	2301      	moveq	r3, #1
 8002862:	2300      	movne	r3, #0
 8002864:	b2db      	uxtb	r3, r3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d056      	beq.n	8002918 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800286a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002872:	f023 030f 	bic.w	r3, r3, #15
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	6811      	ldr	r1, [r2, #0]
 800287a:	683a      	ldr	r2, [r7, #0]
 800287c:	6892      	ldr	r2, [r2, #8]
 800287e:	430a      	orrs	r2, r1
 8002880:	431a      	orrs	r2, r3
 8002882:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002884:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002886:	e047      	b.n	8002918 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002888:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002890:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002892:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800289c:	d004      	beq.n	80028a8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a23      	ldr	r2, [pc, #140]	; (8002930 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d10f      	bne.n	80028c8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80028a8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80028ac:	f7ff ff1e 	bl	80026ec <LL_ADC_IsEnabled>
 80028b0:	4604      	mov	r4, r0
 80028b2:	481f      	ldr	r0, [pc, #124]	; (8002930 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80028b4:	f7ff ff1a 	bl	80026ec <LL_ADC_IsEnabled>
 80028b8:	4603      	mov	r3, r0
 80028ba:	4323      	orrs	r3, r4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	bf0c      	ite	eq
 80028c0:	2301      	moveq	r3, #1
 80028c2:	2300      	movne	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	e012      	b.n	80028ee <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80028c8:	481a      	ldr	r0, [pc, #104]	; (8002934 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80028ca:	f7ff ff0f 	bl	80026ec <LL_ADC_IsEnabled>
 80028ce:	4604      	mov	r4, r0
 80028d0:	4819      	ldr	r0, [pc, #100]	; (8002938 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80028d2:	f7ff ff0b 	bl	80026ec <LL_ADC_IsEnabled>
 80028d6:	4603      	mov	r3, r0
 80028d8:	431c      	orrs	r4, r3
 80028da:	481a      	ldr	r0, [pc, #104]	; (8002944 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80028dc:	f7ff ff06 	bl	80026ec <LL_ADC_IsEnabled>
 80028e0:	4603      	mov	r3, r0
 80028e2:	4323      	orrs	r3, r4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	bf0c      	ite	eq
 80028e8:	2301      	moveq	r3, #1
 80028ea:	2300      	movne	r3, #0
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d012      	beq.n	8002918 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80028f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80028fa:	f023 030f 	bic.w	r3, r3, #15
 80028fe:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002900:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002902:	e009      	b.n	8002918 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002908:	f043 0220 	orr.w	r2, r3, #32
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002916:	e000      	b.n	800291a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002918:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002922:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002926:	4618      	mov	r0, r3
 8002928:	3784      	adds	r7, #132	; 0x84
 800292a:	46bd      	mov	sp, r7
 800292c:	bd90      	pop	{r4, r7, pc}
 800292e:	bf00      	nop
 8002930:	50000100 	.word	0x50000100
 8002934:	50000400 	.word	0x50000400
 8002938:	50000500 	.word	0x50000500
 800293c:	50000300 	.word	0x50000300
 8002940:	50000700 	.word	0x50000700
 8002944:	50000600 	.word	0x50000600

08002948 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002958:	4b0c      	ldr	r3, [pc, #48]	; (800298c <__NVIC_SetPriorityGrouping+0x44>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002964:	4013      	ands	r3, r2
 8002966:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800297a:	4a04      	ldr	r2, [pc, #16]	; (800298c <__NVIC_SetPriorityGrouping+0x44>)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	60d3      	str	r3, [r2, #12]
}
 8002980:	bf00      	nop
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002994:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	0a1b      	lsrs	r3, r3, #8
 800299a:	f003 0307 	and.w	r3, r3, #7
}
 800299e:	4618      	mov	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	db0b      	blt.n	80029d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	f003 021f 	and.w	r2, r3, #31
 80029c4:	4907      	ldr	r1, [pc, #28]	; (80029e4 <__NVIC_EnableIRQ+0x38>)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	2001      	movs	r0, #1
 80029ce:	fa00 f202 	lsl.w	r2, r0, r2
 80029d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	e000e100 	.word	0xe000e100

080029e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	6039      	str	r1, [r7, #0]
 80029f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	db0a      	blt.n	8002a12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	490c      	ldr	r1, [pc, #48]	; (8002a34 <__NVIC_SetPriority+0x4c>)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	0112      	lsls	r2, r2, #4
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a10:	e00a      	b.n	8002a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	4908      	ldr	r1, [pc, #32]	; (8002a38 <__NVIC_SetPriority+0x50>)
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	3b04      	subs	r3, #4
 8002a20:	0112      	lsls	r2, r2, #4
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	440b      	add	r3, r1
 8002a26:	761a      	strb	r2, [r3, #24]
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000e100 	.word	0xe000e100
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b089      	sub	sp, #36	; 0x24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f1c3 0307 	rsb	r3, r3, #7
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	bf28      	it	cs
 8002a5a:	2304      	movcs	r3, #4
 8002a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3304      	adds	r3, #4
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d902      	bls.n	8002a6c <NVIC_EncodePriority+0x30>
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3b03      	subs	r3, #3
 8002a6a:	e000      	b.n	8002a6e <NVIC_EncodePriority+0x32>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a70:	f04f 32ff 	mov.w	r2, #4294967295
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	401a      	ands	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a84:	f04f 31ff 	mov.w	r1, #4294967295
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	43d9      	mvns	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a94:	4313      	orrs	r3, r2
         );
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3724      	adds	r7, #36	; 0x24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ab4:	d301      	bcc.n	8002aba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e00f      	b.n	8002ada <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aba:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <SysTick_Config+0x40>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ac2:	210f      	movs	r1, #15
 8002ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac8:	f7ff ff8e 	bl	80029e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <SysTick_Config+0x40>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ad2:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <SysTick_Config+0x40>)
 8002ad4:	2207      	movs	r2, #7
 8002ad6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	e000e010 	.word	0xe000e010

08002ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff ff29 	bl	8002948 <__NVIC_SetPriorityGrouping>
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b086      	sub	sp, #24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	4603      	mov	r3, r0
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b0c:	f7ff ff40 	bl	8002990 <__NVIC_GetPriorityGrouping>
 8002b10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	6978      	ldr	r0, [r7, #20]
 8002b18:	f7ff ff90 	bl	8002a3c <NVIC_EncodePriority>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff5f 	bl	80029e8 <__NVIC_SetPriority>
}
 8002b2a:	bf00      	nop
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	4603      	mov	r3, r0
 8002b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ff33 	bl	80029ac <__NVIC_EnableIRQ>
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff ffa4 	bl	8002aa4 <SysTick_Config>
 8002b5c:	4603      	mov	r3, r0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d101      	bne.n	8002b7a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e08d      	b.n	8002c96 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	4b47      	ldr	r3, [pc, #284]	; (8002ca0 <HAL_DMA_Init+0x138>)
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d80f      	bhi.n	8002ba6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4b45      	ldr	r3, [pc, #276]	; (8002ca4 <HAL_DMA_Init+0x13c>)
 8002b8e:	4413      	add	r3, r2
 8002b90:	4a45      	ldr	r2, [pc, #276]	; (8002ca8 <HAL_DMA_Init+0x140>)
 8002b92:	fba2 2303 	umull	r2, r3, r2, r3
 8002b96:	091b      	lsrs	r3, r3, #4
 8002b98:	009a      	lsls	r2, r3, #2
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a42      	ldr	r2, [pc, #264]	; (8002cac <HAL_DMA_Init+0x144>)
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40
 8002ba4:	e00e      	b.n	8002bc4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	461a      	mov	r2, r3
 8002bac:	4b40      	ldr	r3, [pc, #256]	; (8002cb0 <HAL_DMA_Init+0x148>)
 8002bae:	4413      	add	r3, r2
 8002bb0:	4a3d      	ldr	r2, [pc, #244]	; (8002ca8 <HAL_DMA_Init+0x140>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	091b      	lsrs	r3, r3, #4
 8002bb8:	009a      	lsls	r2, r3, #2
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a3c      	ldr	r2, [pc, #240]	; (8002cb4 <HAL_DMA_Init+0x14c>)
 8002bc2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bde:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002be8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	699b      	ldr	r3, [r3, #24]
 8002bfa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f8fe 	bl	8002e18 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c24:	d102      	bne.n	8002c2c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685a      	ldr	r2, [r3, #4]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c34:	b2d2      	uxtb	r2, r2
 8002c36:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c40:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d010      	beq.n	8002c6c <HAL_DMA_Init+0x104>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b04      	cmp	r3, #4
 8002c50:	d80c      	bhi.n	8002c6c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f91e 	bl	8002e94 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c64:	687a      	ldr	r2, [r7, #4]
 8002c66:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	e008      	b.n	8002c7e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3710      	adds	r7, #16
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40020407 	.word	0x40020407
 8002ca4:	bffdfff8 	.word	0xbffdfff8
 8002ca8:	cccccccd 	.word	0xcccccccd
 8002cac:	40020000 	.word	0x40020000
 8002cb0:	bffdfbf8 	.word	0xbffdfbf8
 8002cb4:	40020400 	.word	0x40020400

08002cb8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd4:	f003 031f 	and.w	r3, r3, #31
 8002cd8:	2204      	movs	r2, #4
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d026      	beq.n	8002d32 <HAL_DMA_IRQHandler+0x7a>
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d021      	beq.n	8002d32 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d107      	bne.n	8002d0c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f022 0204 	bic.w	r2, r2, #4
 8002d0a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d10:	f003 021f 	and.w	r2, r3, #31
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	2104      	movs	r1, #4
 8002d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d1e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d071      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002d30:	e06c      	b.n	8002e0c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	f003 031f 	and.w	r3, r3, #31
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	409a      	lsls	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d02e      	beq.n	8002da4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d029      	beq.n	8002da4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0320 	and.w	r3, r3, #32
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10b      	bne.n	8002d76 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 020a 	bic.w	r2, r2, #10
 8002d6c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2201      	movs	r2, #1
 8002d72:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	f003 021f 	and.w	r2, r3, #31
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	2102      	movs	r1, #2
 8002d84:	fa01 f202 	lsl.w	r2, r1, r2
 8002d88:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d038      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002da2:	e033      	b.n	8002e0c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da8:	f003 031f 	and.w	r3, r3, #31
 8002dac:	2208      	movs	r2, #8
 8002dae:	409a      	lsls	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	4013      	ands	r3, r2
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d02a      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d025      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 020e 	bic.w	r2, r2, #14
 8002dd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd6:	f003 021f 	and.w	r2, r3, #31
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	2101      	movs	r1, #1
 8002de0:	fa01 f202 	lsl.w	r2, r1, r2
 8002de4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d004      	beq.n	8002e0e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002e0c:	bf00      	nop
 8002e0e:	bf00      	nop
}
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d802      	bhi.n	8002e32 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002e2c:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	e001      	b.n	8002e36 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8002e32:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002e34:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	3b08      	subs	r3, #8
 8002e42:	4a12      	ldr	r2, [pc, #72]	; (8002e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	091b      	lsrs	r3, r3, #4
 8002e4a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e50:	089b      	lsrs	r3, r3, #2
 8002e52:	009a      	lsls	r2, r3, #2
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	4413      	add	r3, r2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	4a0b      	ldr	r2, [pc, #44]	; (8002e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002e62:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	f003 031f 	and.w	r3, r3, #31
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002e72:	bf00      	nop
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40020407 	.word	0x40020407
 8002e84:	40020800 	.word	0x40020800
 8002e88:	40020820 	.word	0x40020820
 8002e8c:	cccccccd 	.word	0xcccccccd
 8002e90:	40020880 	.word	0x40020880

08002e94 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002ea4:	68fa      	ldr	r2, [r7, #12]
 8002ea6:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	461a      	mov	r2, r3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a08      	ldr	r2, [pc, #32]	; (8002ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002eb6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	1000823f 	.word	0x1000823f
 8002ed8:	40020940 	.word	0x40020940

08002edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b087      	sub	sp, #28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002eea:	e15a      	b.n	80031a2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	2101      	movs	r1, #1
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ef8:	4013      	ands	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 814c 	beq.w	800319c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0303 	and.w	r3, r3, #3
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d005      	beq.n	8002f1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d130      	bne.n	8002f7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	2203      	movs	r2, #3
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43db      	mvns	r3, r3
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4013      	ands	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	68da      	ldr	r2, [r3, #12]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f52:	2201      	movs	r2, #1
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	f003 0201 	and.w	r2, r3, #1
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	693a      	ldr	r2, [r7, #16]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	693a      	ldr	r2, [r7, #16]
 8002f7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 0303 	and.w	r3, r3, #3
 8002f86:	2b03      	cmp	r3, #3
 8002f88:	d017      	beq.n	8002fba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	2203      	movs	r2, #3
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d123      	bne.n	800300e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	08da      	lsrs	r2, r3, #3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	3208      	adds	r2, #8
 8002fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	220f      	movs	r2, #15
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	693a      	ldr	r2, [r7, #16]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	691a      	ldr	r2, [r3, #16]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	08da      	lsrs	r2, r3, #3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	3208      	adds	r2, #8
 8003008:	6939      	ldr	r1, [r7, #16]
 800300a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	2203      	movs	r2, #3
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43db      	mvns	r3, r3
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	4013      	ands	r3, r2
 8003024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 0203 	and.w	r2, r3, #3
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 80a6 	beq.w	800319c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003050:	4b5b      	ldr	r3, [pc, #364]	; (80031c0 <HAL_GPIO_Init+0x2e4>)
 8003052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003054:	4a5a      	ldr	r2, [pc, #360]	; (80031c0 <HAL_GPIO_Init+0x2e4>)
 8003056:	f043 0301 	orr.w	r3, r3, #1
 800305a:	6613      	str	r3, [r2, #96]	; 0x60
 800305c:	4b58      	ldr	r3, [pc, #352]	; (80031c0 <HAL_GPIO_Init+0x2e4>)
 800305e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003068:	4a56      	ldr	r2, [pc, #344]	; (80031c4 <HAL_GPIO_Init+0x2e8>)
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	089b      	lsrs	r3, r3, #2
 800306e:	3302      	adds	r3, #2
 8003070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003074:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	220f      	movs	r2, #15
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003092:	d01f      	beq.n	80030d4 <HAL_GPIO_Init+0x1f8>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	4a4c      	ldr	r2, [pc, #304]	; (80031c8 <HAL_GPIO_Init+0x2ec>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d019      	beq.n	80030d0 <HAL_GPIO_Init+0x1f4>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4a4b      	ldr	r2, [pc, #300]	; (80031cc <HAL_GPIO_Init+0x2f0>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d013      	beq.n	80030cc <HAL_GPIO_Init+0x1f0>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a4a      	ldr	r2, [pc, #296]	; (80031d0 <HAL_GPIO_Init+0x2f4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d00d      	beq.n	80030c8 <HAL_GPIO_Init+0x1ec>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a49      	ldr	r2, [pc, #292]	; (80031d4 <HAL_GPIO_Init+0x2f8>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d007      	beq.n	80030c4 <HAL_GPIO_Init+0x1e8>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a48      	ldr	r2, [pc, #288]	; (80031d8 <HAL_GPIO_Init+0x2fc>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d101      	bne.n	80030c0 <HAL_GPIO_Init+0x1e4>
 80030bc:	2305      	movs	r3, #5
 80030be:	e00a      	b.n	80030d6 <HAL_GPIO_Init+0x1fa>
 80030c0:	2306      	movs	r3, #6
 80030c2:	e008      	b.n	80030d6 <HAL_GPIO_Init+0x1fa>
 80030c4:	2304      	movs	r3, #4
 80030c6:	e006      	b.n	80030d6 <HAL_GPIO_Init+0x1fa>
 80030c8:	2303      	movs	r3, #3
 80030ca:	e004      	b.n	80030d6 <HAL_GPIO_Init+0x1fa>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e002      	b.n	80030d6 <HAL_GPIO_Init+0x1fa>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e000      	b.n	80030d6 <HAL_GPIO_Init+0x1fa>
 80030d4:	2300      	movs	r3, #0
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	f002 0203 	and.w	r2, r2, #3
 80030dc:	0092      	lsls	r2, r2, #2
 80030de:	4093      	lsls	r3, r2
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030e6:	4937      	ldr	r1, [pc, #220]	; (80031c4 <HAL_GPIO_Init+0x2e8>)
 80030e8:	697b      	ldr	r3, [r7, #20]
 80030ea:	089b      	lsrs	r3, r3, #2
 80030ec:	3302      	adds	r3, #2
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030f4:	4b39      	ldr	r3, [pc, #228]	; (80031dc <HAL_GPIO_Init+0x300>)
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	43db      	mvns	r3, r3
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	4013      	ands	r3, r2
 8003102:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	4313      	orrs	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003118:	4a30      	ldr	r2, [pc, #192]	; (80031dc <HAL_GPIO_Init+0x300>)
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800311e:	4b2f      	ldr	r3, [pc, #188]	; (80031dc <HAL_GPIO_Init+0x300>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	43db      	mvns	r3, r3
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4013      	ands	r3, r2
 800312c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003142:	4a26      	ldr	r2, [pc, #152]	; (80031dc <HAL_GPIO_Init+0x300>)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003148:	4b24      	ldr	r3, [pc, #144]	; (80031dc <HAL_GPIO_Init+0x300>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	43db      	mvns	r3, r3
 8003152:	693a      	ldr	r2, [r7, #16]
 8003154:	4013      	ands	r3, r2
 8003156:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d003      	beq.n	800316c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003164:	693a      	ldr	r2, [r7, #16]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4313      	orrs	r3, r2
 800316a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800316c:	4a1b      	ldr	r2, [pc, #108]	; (80031dc <HAL_GPIO_Init+0x300>)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <HAL_GPIO_Init+0x300>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	43db      	mvns	r3, r3
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	4013      	ands	r3, r2
 8003180:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800318e:	693a      	ldr	r2, [r7, #16]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003196:	4a11      	ldr	r2, [pc, #68]	; (80031dc <HAL_GPIO_Init+0x300>)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	3301      	adds	r3, #1
 80031a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f47f ae9d 	bne.w	8002eec <HAL_GPIO_Init+0x10>
  }
}
 80031b2:	bf00      	nop
 80031b4:	bf00      	nop
 80031b6:	371c      	adds	r7, #28
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40010000 	.word	0x40010000
 80031c8:	48000400 	.word	0x48000400
 80031cc:	48000800 	.word	0x48000800
 80031d0:	48000c00 	.word	0x48000c00
 80031d4:	48001000 	.word	0x48001000
 80031d8:	48001400 	.word	0x48001400
 80031dc:	40010400 	.word	0x40010400

080031e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	460b      	mov	r3, r1
 80031ea:	807b      	strh	r3, [r7, #2]
 80031ec:	4613      	mov	r3, r2
 80031ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031f0:	787b      	ldrb	r3, [r7, #1]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031f6:	887a      	ldrh	r2, [r7, #2]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031fc:	e002      	b.n	8003204 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031fe:	887a      	ldrh	r2, [r7, #2]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003204:	bf00      	nop
 8003206:	370c      	adds	r7, #12
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003210:	b480      	push	{r7}
 8003212:	b085      	sub	sp, #20
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	460b      	mov	r3, r1
 800321a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	695b      	ldr	r3, [r3, #20]
 8003220:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003222:	887a      	ldrh	r2, [r7, #2]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	4013      	ands	r3, r2
 8003228:	041a      	lsls	r2, r3, #16
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	43d9      	mvns	r1, r3
 800322e:	887b      	ldrh	r3, [r7, #2]
 8003230:	400b      	ands	r3, r1
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	619a      	str	r2, [r3, #24]
}
 8003238:	bf00      	nop
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800324e:	4b08      	ldr	r3, [pc, #32]	; (8003270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003250:	695a      	ldr	r2, [r3, #20]
 8003252:	88fb      	ldrh	r3, [r7, #6]
 8003254:	4013      	ands	r3, r2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d006      	beq.n	8003268 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800325a:	4a05      	ldr	r2, [pc, #20]	; (8003270 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800325c:	88fb      	ldrh	r3, [r7, #6]
 800325e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003260:	88fb      	ldrh	r3, [r7, #6]
 8003262:	4618      	mov	r0, r3
 8003264:	f000 f806 	bl	8003274 <HAL_GPIO_EXTI_Callback>
  }
}
 8003268:	bf00      	nop
 800326a:	3708      	adds	r7, #8
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40010400 	.word	0x40010400

08003274 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b084      	sub	sp, #16
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d101      	bne.n	800329c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0c0      	b.n	800341e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d106      	bne.n	80032b6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f008 fb09 	bl	800b8c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2203      	movs	r2, #3
 80032ba:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f004 f98d 	bl	80075e2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032c8:	2300      	movs	r3, #0
 80032ca:	73fb      	strb	r3, [r7, #15]
 80032cc:	e03e      	b.n	800334c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032ce:	7bfa      	ldrb	r2, [r7, #15]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	440b      	add	r3, r1
 80032dc:	3311      	adds	r3, #17
 80032de:	2201      	movs	r2, #1
 80032e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032e2:	7bfa      	ldrb	r2, [r7, #15]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	440b      	add	r3, r1
 80032f0:	3310      	adds	r3, #16
 80032f2:	7bfa      	ldrb	r2, [r7, #15]
 80032f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032f6:	7bfa      	ldrb	r2, [r7, #15]
 80032f8:	6879      	ldr	r1, [r7, #4]
 80032fa:	4613      	mov	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	440b      	add	r3, r1
 8003304:	3313      	adds	r3, #19
 8003306:	2200      	movs	r2, #0
 8003308:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800330a:	7bfa      	ldrb	r2, [r7, #15]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	00db      	lsls	r3, r3, #3
 8003316:	440b      	add	r3, r1
 8003318:	3320      	adds	r3, #32
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800331e:	7bfa      	ldrb	r2, [r7, #15]
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	440b      	add	r3, r1
 800332c:	3324      	adds	r3, #36	; 0x24
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003332:	7bfb      	ldrb	r3, [r7, #15]
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	440b      	add	r3, r1
 8003342:	2200      	movs	r2, #0
 8003344:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003346:	7bfb      	ldrb	r3, [r7, #15]
 8003348:	3301      	adds	r3, #1
 800334a:	73fb      	strb	r3, [r7, #15]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	791b      	ldrb	r3, [r3, #4]
 8003350:	7bfa      	ldrb	r2, [r7, #15]
 8003352:	429a      	cmp	r2, r3
 8003354:	d3bb      	bcc.n	80032ce <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003356:	2300      	movs	r3, #0
 8003358:	73fb      	strb	r3, [r7, #15]
 800335a:	e044      	b.n	80033e6 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800335c:	7bfa      	ldrb	r2, [r7, #15]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	4413      	add	r3, r2
 8003366:	00db      	lsls	r3, r3, #3
 8003368:	440b      	add	r3, r1
 800336a:	f203 1351 	addw	r3, r3, #337	; 0x151
 800336e:	2200      	movs	r2, #0
 8003370:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003372:	7bfa      	ldrb	r2, [r7, #15]
 8003374:	6879      	ldr	r1, [r7, #4]
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	440b      	add	r3, r1
 8003380:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003384:	7bfa      	ldrb	r2, [r7, #15]
 8003386:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003388:	7bfa      	ldrb	r2, [r7, #15]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	440b      	add	r3, r1
 8003396:	f203 1353 	addw	r3, r3, #339	; 0x153
 800339a:	2200      	movs	r2, #0
 800339c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800339e:	7bfa      	ldrb	r2, [r7, #15]
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	440b      	add	r3, r1
 80033ac:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033b4:	7bfa      	ldrb	r2, [r7, #15]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	009b      	lsls	r3, r3, #2
 80033bc:	4413      	add	r3, r2
 80033be:	00db      	lsls	r3, r3, #3
 80033c0:	440b      	add	r3, r1
 80033c2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80033c6:	2200      	movs	r2, #0
 80033c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033ca:	7bfa      	ldrb	r2, [r7, #15]
 80033cc:	6879      	ldr	r1, [r7, #4]
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	00db      	lsls	r3, r3, #3
 80033d6:	440b      	add	r3, r1
 80033d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80033dc:	2200      	movs	r2, #0
 80033de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
 80033e2:	3301      	adds	r3, #1
 80033e4:	73fb      	strb	r3, [r7, #15]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	791b      	ldrb	r3, [r3, #4]
 80033ea:	7bfa      	ldrb	r2, [r7, #15]
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d3b5      	bcc.n	800335c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6818      	ldr	r0, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3304      	adds	r3, #4
 80033f8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80033fc:	f004 f90c 	bl	8007618 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	7a9b      	ldrb	r3, [r3, #10]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d102      	bne.n	800341c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f001 fc41 	bl	8004c9e <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}

08003426 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003426:	b580      	push	{r7, lr}
 8003428:	b082      	sub	sp, #8
 800342a:	af00      	add	r7, sp, #0
 800342c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003434:	2b01      	cmp	r3, #1
 8003436:	d101      	bne.n	800343c <HAL_PCD_Start+0x16>
 8003438:	2302      	movs	r3, #2
 800343a:	e012      	b.n	8003462 <HAL_PCD_Start+0x3c>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f004 f8b3 	bl	80075b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4618      	mov	r0, r3
 8003454:	f006 fb73 	bl	8009b3e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}

0800346a <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800346a:	b580      	push	{r7, lr}
 800346c:	b084      	sub	sp, #16
 800346e:	af00      	add	r7, sp, #0
 8003470:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f006 fb78 	bl	8009b6c <USB_ReadInterrupts>
 800347c:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d003      	beq.n	8003490 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	f000 fb04 	bl	8003a96 <PCD_EP_ISR_Handler>

    return;
 800348e:	e110      	b.n	80036b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003496:	2b00      	cmp	r3, #0
 8003498:	d013      	beq.n	80034c2 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034a2:	b29a      	uxth	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034ac:	b292      	uxth	r2, r2
 80034ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f008 faa1 	bl	800b9fa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80034b8:	2100      	movs	r1, #0
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f8fc 	bl	80036b8 <HAL_PCD_SetAddress>

    return;
 80034c0:	e0f7      	b.n	80036b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00c      	beq.n	80034e6 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034de:	b292      	uxth	r2, r2
 80034e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80034e4:	e0e5      	b.n	80036b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00c      	beq.n	800350a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003502:	b292      	uxth	r2, r2
 8003504:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003508:	e0d3      	b.n	80036b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d034      	beq.n	800357e <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800351c:	b29a      	uxth	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0204 	bic.w	r2, r2, #4
 8003526:	b292      	uxth	r2, r2
 8003528:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003534:	b29a      	uxth	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0208 	bic.w	r2, r2, #8
 800353e:	b292      	uxth	r2, r2
 8003540:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800354a:	2b01      	cmp	r3, #1
 800354c:	d107      	bne.n	800355e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003556:	2100      	movs	r1, #0
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f008 fc41 	bl	800bde0 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f008 fa84 	bl	800ba6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800356c:	b29a      	uxth	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003576:	b292      	uxth	r2, r2
 8003578:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800357c:	e099      	b.n	80036b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003584:	2b00      	cmp	r3, #0
 8003586:	d027      	beq.n	80035d8 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003590:	b29a      	uxth	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0208 	orr.w	r2, r2, #8
 800359a:	b292      	uxth	r2, r2
 800359c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035b2:	b292      	uxth	r2, r2
 80035b4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0204 	orr.w	r2, r2, #4
 80035ca:	b292      	uxth	r2, r2
 80035cc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80035d0:	6878      	ldr	r0, [r7, #4]
 80035d2:	f008 fa31 	bl	800ba38 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80035d6:	e06c      	b.n	80036b2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d040      	beq.n	8003664 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035f4:	b292      	uxth	r2, r2
 80035f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8003600:	2b00      	cmp	r3, #0
 8003602:	d12b      	bne.n	800365c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800360c:	b29a      	uxth	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f042 0204 	orr.w	r2, r2, #4
 8003616:	b292      	uxth	r2, r2
 8003618:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003624:	b29a      	uxth	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f042 0208 	orr.w	r2, r2, #8
 800362e:	b292      	uxth	r2, r2
 8003630:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003644:	b29b      	uxth	r3, r3
 8003646:	089b      	lsrs	r3, r3, #2
 8003648:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003652:	2101      	movs	r1, #1
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f008 fbc3 	bl	800bde0 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800365a:	e02a      	b.n	80036b2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f008 f9eb 	bl	800ba38 <HAL_PCD_SuspendCallback>
    return;
 8003662:	e026      	b.n	80036b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800366a:	2b00      	cmp	r3, #0
 800366c:	d00f      	beq.n	800368e <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003676:	b29a      	uxth	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003680:	b292      	uxth	r2, r2
 8003682:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f008 f9a9 	bl	800b9de <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800368c:	e011      	b.n	80036b2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00c      	beq.n	80036b2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036aa:	b292      	uxth	r2, r2
 80036ac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80036b0:	bf00      	nop
  }
}
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}

080036b8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	460b      	mov	r3, r1
 80036c2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_PCD_SetAddress+0x1a>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e012      	b.n	80036f8 <HAL_PCD_SetAddress+0x40>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	78fa      	ldrb	r2, [r7, #3]
 80036de:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f006 fa14 	bl	8009b16 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	4608      	mov	r0, r1
 800370a:	4611      	mov	r1, r2
 800370c:	461a      	mov	r2, r3
 800370e:	4603      	mov	r3, r0
 8003710:	70fb      	strb	r3, [r7, #3]
 8003712:	460b      	mov	r3, r1
 8003714:	803b      	strh	r3, [r7, #0]
 8003716:	4613      	mov	r3, r2
 8003718:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800371e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003722:	2b00      	cmp	r3, #0
 8003724:	da0e      	bge.n	8003744 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	f003 0207 	and.w	r2, r3, #7
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	3310      	adds	r3, #16
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	4413      	add	r3, r2
 800373a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2201      	movs	r2, #1
 8003740:	705a      	strb	r2, [r3, #1]
 8003742:	e00e      	b.n	8003762 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	f003 0207 	and.w	r2, r3, #7
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	4413      	add	r3, r2
 800375a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003762:	78fb      	ldrb	r3, [r7, #3]
 8003764:	f003 0307 	and.w	r3, r3, #7
 8003768:	b2da      	uxtb	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800376e:	883a      	ldrh	r2, [r7, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	78ba      	ldrb	r2, [r7, #2]
 8003778:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800377a:	78bb      	ldrb	r3, [r7, #2]
 800377c:	2b02      	cmp	r3, #2
 800377e:	d102      	bne.n	8003786 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800378c:	2b01      	cmp	r3, #1
 800378e:	d101      	bne.n	8003794 <HAL_PCD_EP_Open+0x94>
 8003790:	2302      	movs	r3, #2
 8003792:	e00e      	b.n	80037b2 <HAL_PCD_EP_Open+0xb2>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68f9      	ldr	r1, [r7, #12]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f003 ff56 	bl	8007654 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 80037b0:	7afb      	ldrb	r3, [r7, #11]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b084      	sub	sp, #16
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
 80037c2:	460b      	mov	r3, r1
 80037c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80037c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	da0e      	bge.n	80037ec <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037ce:	78fb      	ldrb	r3, [r7, #3]
 80037d0:	f003 0207 	and.w	r2, r3, #7
 80037d4:	4613      	mov	r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	4413      	add	r3, r2
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	3310      	adds	r3, #16
 80037de:	687a      	ldr	r2, [r7, #4]
 80037e0:	4413      	add	r3, r2
 80037e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2201      	movs	r2, #1
 80037e8:	705a      	strb	r2, [r3, #1]
 80037ea:	e00e      	b.n	800380a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037ec:	78fb      	ldrb	r3, [r7, #3]
 80037ee:	f003 0207 	and.w	r2, r3, #7
 80037f2:	4613      	mov	r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	4413      	add	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2200      	movs	r2, #0
 8003808:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	b2da      	uxtb	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_PCD_EP_Close+0x6a>
 8003820:	2302      	movs	r3, #2
 8003822:	e00e      	b.n	8003842 <HAL_PCD_EP_Close+0x88>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68f9      	ldr	r1, [r7, #12]
 8003832:	4618      	mov	r0, r3
 8003834:	f004 fad2 	bl	8007ddc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b086      	sub	sp, #24
 800384e:	af00      	add	r7, sp, #0
 8003850:	60f8      	str	r0, [r7, #12]
 8003852:	607a      	str	r2, [r7, #4]
 8003854:	603b      	str	r3, [r7, #0]
 8003856:	460b      	mov	r3, r1
 8003858:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800385a:	7afb      	ldrb	r3, [r7, #11]
 800385c:	f003 0207 	and.w	r2, r3, #7
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	00db      	lsls	r3, r3, #3
 8003868:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	4413      	add	r3, r2
 8003870:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	683a      	ldr	r2, [r7, #0]
 800387c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2200      	movs	r2, #0
 8003882:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	2200      	movs	r2, #0
 8003888:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800388a:	7afb      	ldrb	r3, [r7, #11]
 800388c:	f003 0307 	and.w	r3, r3, #7
 8003890:	b2da      	uxtb	r2, r3
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6979      	ldr	r1, [r7, #20]
 800389c:	4618      	mov	r0, r3
 800389e:	f004 fc8a 	bl	80081b6 <USB_EPStartXfer>

  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3718      	adds	r7, #24
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80038b8:	78fb      	ldrb	r3, [r7, #3]
 80038ba:	f003 0207 	and.w	r2, r3, #7
 80038be:	6879      	ldr	r1, [r7, #4]
 80038c0:	4613      	mov	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	440b      	add	r3, r1
 80038ca:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80038ce:	681b      	ldr	r3, [r3, #0]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	607a      	str	r2, [r7, #4]
 80038e6:	603b      	str	r3, [r7, #0]
 80038e8:	460b      	mov	r3, r1
 80038ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038ec:	7afb      	ldrb	r3, [r7, #11]
 80038ee:	f003 0207 	and.w	r2, r3, #7
 80038f2:	4613      	mov	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	00db      	lsls	r3, r3, #3
 80038fa:	3310      	adds	r3, #16
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4413      	add	r3, r2
 8003900:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	2200      	movs	r2, #0
 8003920:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	2201      	movs	r2, #1
 8003926:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003928:	7afb      	ldrb	r3, [r7, #11]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	b2da      	uxtb	r2, r3
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	6979      	ldr	r1, [r7, #20]
 800393a:	4618      	mov	r0, r3
 800393c:	f004 fc3b 	bl	80081b6 <USB_EPStartXfer>

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	460b      	mov	r3, r1
 8003954:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003956:	78fb      	ldrb	r3, [r7, #3]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	7912      	ldrb	r2, [r2, #4]
 8003960:	4293      	cmp	r3, r2
 8003962:	d901      	bls.n	8003968 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	e03e      	b.n	80039e6 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003968:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800396c:	2b00      	cmp	r3, #0
 800396e:	da0e      	bge.n	800398e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	f003 0207 	and.w	r2, r3, #7
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	3310      	adds	r3, #16
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	4413      	add	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	705a      	strb	r2, [r3, #1]
 800398c:	e00c      	b.n	80039a8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800398e:	78fa      	ldrb	r2, [r7, #3]
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800399c:	687a      	ldr	r2, [r7, #4]
 800399e:	4413      	add	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2200      	movs	r2, #0
 80039a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2201      	movs	r2, #1
 80039ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039ae:	78fb      	ldrb	r3, [r7, #3]
 80039b0:	f003 0307 	and.w	r3, r3, #7
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_PCD_EP_SetStall+0x7e>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e00e      	b.n	80039e6 <HAL_PCD_EP_SetStall+0x9c>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68f9      	ldr	r1, [r7, #12]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f005 ff9e 	bl	8009918 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b084      	sub	sp, #16
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
 80039f6:	460b      	mov	r3, r1
 80039f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80039fa:	78fb      	ldrb	r3, [r7, #3]
 80039fc:	f003 030f 	and.w	r3, r3, #15
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	7912      	ldrb	r2, [r2, #4]
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d901      	bls.n	8003a0c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e040      	b.n	8003a8e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a0c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	da0e      	bge.n	8003a32 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	f003 0207 	and.w	r2, r3, #7
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	00db      	lsls	r3, r3, #3
 8003a22:	3310      	adds	r3, #16
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	4413      	add	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	705a      	strb	r2, [r3, #1]
 8003a30:	e00e      	b.n	8003a50 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a32:	78fb      	ldrb	r3, [r7, #3]
 8003a34:	f003 0207 	and.w	r2, r3, #7
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	4413      	add	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a56:	78fb      	ldrb	r3, [r7, #3]
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	b2da      	uxtb	r2, r3
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_PCD_EP_ClrStall+0x82>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e00e      	b.n	8003a8e <HAL_PCD_EP_ClrStall+0xa0>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68f9      	ldr	r1, [r7, #12]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f005 ff9b 	bl	80099ba <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}

08003a96 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b096      	sub	sp, #88	; 0x58
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003a9e:	e3ae      	b.n	80041fe <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003aa8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003aac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003aba:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	f040 8170 	bne.w	8003da4 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003ac4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003ac8:	f003 0310 	and.w	r3, r3, #16
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d14d      	bne.n	8003b6c <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	881b      	ldrh	r3, [r3, #0]
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ae0:	81fb      	strh	r3, [r7, #14]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	89fb      	ldrh	r3, [r7, #14]
 8003ae8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003aec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	3310      	adds	r3, #16
 8003af8:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b02:	b29b      	uxth	r3, r3
 8003b04:	461a      	mov	r2, r3
 8003b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	00db      	lsls	r3, r3, #3
 8003b0c:	4413      	add	r3, r2
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	4413      	add	r3, r2
 8003b14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003b18:	881b      	ldrh	r3, [r3, #0]
 8003b1a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b20:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003b22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b24:	695a      	ldr	r2, [r3, #20]
 8003b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	441a      	add	r2, r3
 8003b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b2e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003b30:	2100      	movs	r1, #0
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f007 ff39 	bl	800b9aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	7b1b      	ldrb	r3, [r3, #12]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f000 835d 	beq.w	80041fe <PCD_EP_ISR_Handler+0x768>
 8003b44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f040 8358 	bne.w	80041fe <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	7b1b      	ldrb	r3, [r3, #12]
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b58:	b2da      	uxtb	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	b292      	uxth	r2, r2
 8003b60:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	731a      	strb	r2, [r3, #12]
 8003b6a:	e348      	b.n	80041fe <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003b72:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	881b      	ldrh	r3, [r3, #0]
 8003b7a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8003b7e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003b82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d032      	beq.n	8003bf0 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	461a      	mov	r2, r3
 8003b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	4413      	add	r3, r2
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6812      	ldr	r2, [r2, #0]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003ba8:	881b      	ldrh	r3, [r3, #0]
 8003baa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bb0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6818      	ldr	r0, [r3, #0]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8003bbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bbe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8003bc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bc2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	f006 f823 	bl	8009c10 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	881b      	ldrh	r3, [r3, #0]
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	823b      	strh	r3, [r7, #16]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	8a3a      	ldrh	r2, [r7, #16]
 8003be0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003be4:	b292      	uxth	r2, r2
 8003be6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	f007 feb1 	bl	800b950 <HAL_PCD_SetupStageCallback>
 8003bee:	e306      	b.n	80041fe <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003bf0:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f280 8302 	bge.w	80041fe <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003c06:	4013      	ands	r3, r2
 8003c08:	83fb      	strh	r3, [r7, #30]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	8bfa      	ldrh	r2, [r7, #30]
 8003c10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003c14:	b292      	uxth	r2, r2
 8003c16:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	461a      	mov	r2, r3
 8003c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6812      	ldr	r2, [r2, #0]
 8003c30:	4413      	add	r3, r2
 8003c32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c3e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8003c40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d019      	beq.n	8003c7c <PCD_EP_ISR_Handler+0x1e6>
 8003c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c4a:	695b      	ldr	r3, [r3, #20]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d015      	beq.n	8003c7c <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6818      	ldr	r0, [r3, #0]
 8003c54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c56:	6959      	ldr	r1, [r3, #20]
 8003c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c5a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8003c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c5e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	f005 ffd5 	bl	8009c10 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8003c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c68:	695a      	ldr	r2, [r3, #20]
 8003c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	441a      	add	r2, r3
 8003c70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c72:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8003c74:	2100      	movs	r1, #0
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f007 fe7c 	bl	800b974 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	881b      	ldrh	r3, [r3, #0]
 8003c82:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8003c86:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f040 82b5 	bne.w	80041fe <PCD_EP_ISR_Handler+0x768>
 8003c94:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003c98:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003c9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003ca0:	f000 82ad 	beq.w	80041fe <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	4413      	add	r3, r2
 8003cba:	61bb      	str	r3, [r7, #24]
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	881b      	ldrh	r3, [r3, #0]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cce:	b29a      	uxth	r2, r3
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	801a      	strh	r2, [r3, #0]
 8003cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	2b3e      	cmp	r3, #62	; 0x3e
 8003cda:	d91d      	bls.n	8003d18 <PCD_EP_ISR_Handler+0x282>
 8003cdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	095b      	lsrs	r3, r3, #5
 8003ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d102      	bne.n	8003cf6 <PCD_EP_ISR_Handler+0x260>
 8003cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	647b      	str	r3, [r7, #68]	; 0x44
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	881b      	ldrh	r3, [r3, #0]
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cfe:	b29b      	uxth	r3, r3
 8003d00:	029b      	lsls	r3, r3, #10
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	4313      	orrs	r3, r2
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d0c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d10:	b29a      	uxth	r2, r3
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	801a      	strh	r2, [r3, #0]
 8003d16:	e026      	b.n	8003d66 <PCD_EP_ISR_Handler+0x2d0>
 8003d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10a      	bne.n	8003d36 <PCD_EP_ISR_Handler+0x2a0>
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	881b      	ldrh	r3, [r3, #0]
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003d2a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003d2e:	b29a      	uxth	r2, r3
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	801a      	strh	r2, [r3, #0]
 8003d34:	e017      	b.n	8003d66 <PCD_EP_ISR_Handler+0x2d0>
 8003d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	085b      	lsrs	r3, r3, #1
 8003d3c:	647b      	str	r3, [r7, #68]	; 0x44
 8003d3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <PCD_EP_ISR_Handler+0x2ba>
 8003d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	647b      	str	r3, [r7, #68]	; 0x44
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	881b      	ldrh	r3, [r3, #0]
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	029b      	lsls	r3, r3, #10
 8003d5c:	b29b      	uxth	r3, r3
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	b29a      	uxth	r2, r3
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	881b      	ldrh	r3, [r3, #0]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d76:	827b      	strh	r3, [r7, #18]
 8003d78:	8a7b      	ldrh	r3, [r7, #18]
 8003d7a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003d7e:	827b      	strh	r3, [r7, #18]
 8003d80:	8a7b      	ldrh	r3, [r7, #18]
 8003d82:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d86:	827b      	strh	r3, [r7, #18]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	8a7b      	ldrh	r3, [r7, #18]
 8003d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	8013      	strh	r3, [r2, #0]
 8003da2:	e22c      	b.n	80041fe <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	4413      	add	r3, r2
 8003db2:	881b      	ldrh	r3, [r3, #0]
 8003db4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8003db8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	f280 80f6 	bge.w	8003fae <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4413      	add	r3, r2
 8003dd0:	881b      	ldrh	r3, [r3, #0]
 8003dd2:	b29a      	uxth	r2, r3
 8003dd4:	f640 738f 	movw	r3, #3983	; 0xf8f
 8003dd8:	4013      	ands	r3, r2
 8003dda:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	4413      	add	r3, r2
 8003dec:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003df0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003df4:	b292      	uxth	r2, r2
 8003df6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8003df8:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8003e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e10:	7b1b      	ldrb	r3, [r3, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d123      	bne.n	8003e5e <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e24:	781b      	ldrb	r3, [r3, #0]
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4413      	add	r3, r2
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6812      	ldr	r2, [r2, #0]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e3a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8003e3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f000 808e 	beq.w	8003f64 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e4e:	6959      	ldr	r1, [r3, #20]
 8003e50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e52:	88da      	ldrh	r2, [r3, #6]
 8003e54:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003e58:	f005 feda 	bl	8009c10 <USB_ReadPMA>
 8003e5c:	e082      	b.n	8003f64 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8003e5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e60:	78db      	ldrb	r3, [r3, #3]
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d10a      	bne.n	8003e7c <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8003e66:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f9d3 	bl	800421a <HAL_PCD_EP_DB_Receive>
 8003e74:	4603      	mov	r3, r0
 8003e76:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8003e7a:	e073      	b.n	8003f64 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	461a      	mov	r2, r3
 8003e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e96:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	441a      	add	r2, r3
 8003ea8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003eac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003eb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003eb8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d022      	beq.n	8003f20 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ee8:	781b      	ldrb	r3, [r3, #0]
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4413      	add	r3, r2
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6812      	ldr	r2, [r2, #0]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003ef8:	881b      	ldrh	r3, [r3, #0]
 8003efa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003efe:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003f02:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d02c      	beq.n	8003f64 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6818      	ldr	r0, [r3, #0]
 8003f0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f10:	6959      	ldr	r1, [r3, #20]
 8003f12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f14:	891a      	ldrh	r2, [r3, #8]
 8003f16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003f1a:	f005 fe79 	bl	8009c10 <USB_ReadPMA>
 8003f1e:	e021      	b.n	8003f64 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f28:	b29b      	uxth	r3, r3
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	4413      	add	r3, r2
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003f3e:	881b      	ldrh	r3, [r3, #0]
 8003f40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003f44:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8003f48:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d009      	beq.n	8003f64 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f56:	6959      	ldr	r1, [r3, #20]
 8003f58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f5a:	895a      	ldrh	r2, [r3, #10]
 8003f5c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003f60:	f005 fe56 	bl	8009c10 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8003f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f66:	69da      	ldr	r2, [r3, #28]
 8003f68:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003f6c:	441a      	add	r2, r3
 8003f6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f70:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8003f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003f7a:	441a      	add	r2, r3
 8003f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f7e:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8003f80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <PCD_EP_ISR_Handler+0x4fe>
 8003f88:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8003f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d206      	bcs.n	8003fa2 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8003f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	4619      	mov	r1, r3
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f007 fcea 	bl	800b974 <HAL_PCD_DataOutStageCallback>
 8003fa0:	e005      	b.n	8003fae <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f004 f904 	bl	80081b6 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8003fae:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003fb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 8121 	beq.w	80041fe <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8003fbc:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	3310      	adds	r3, #16
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	4413      	add	r3, r2
 8003fce:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	4413      	add	r3, r2
 8003fde:	881b      	ldrh	r3, [r3, #0]
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	441a      	add	r2, r3
 8003ffc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004008:	b29b      	uxth	r3, r3
 800400a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800400c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800400e:	78db      	ldrb	r3, [r3, #3]
 8004010:	2b01      	cmp	r3, #1
 8004012:	f040 80a2 	bne.w	800415a <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8004016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004018:	2200      	movs	r2, #0
 800401a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800401c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800401e:	7b1b      	ldrb	r3, [r3, #12]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8093 	beq.w	800414c <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004026:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800402a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800402e:	2b00      	cmp	r3, #0
 8004030:	d046      	beq.n	80040c0 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004034:	785b      	ldrb	r3, [r3, #1]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d126      	bne.n	8004088 <PCD_EP_ISR_Handler+0x5f2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004048:	b29b      	uxth	r3, r3
 800404a:	461a      	mov	r2, r3
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	4413      	add	r3, r2
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
 8004052:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	00da      	lsls	r2, r3, #3
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	4413      	add	r3, r2
 800405c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004060:	623b      	str	r3, [r7, #32]
 8004062:	6a3b      	ldr	r3, [r7, #32]
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	b29b      	uxth	r3, r3
 8004068:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800406c:	b29a      	uxth	r2, r3
 800406e:	6a3b      	ldr	r3, [r7, #32]
 8004070:	801a      	strh	r2, [r3, #0]
 8004072:	6a3b      	ldr	r3, [r7, #32]
 8004074:	881b      	ldrh	r3, [r3, #0]
 8004076:	b29b      	uxth	r3, r3
 8004078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800407c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004080:	b29a      	uxth	r2, r3
 8004082:	6a3b      	ldr	r3, [r7, #32]
 8004084:	801a      	strh	r2, [r3, #0]
 8004086:	e061      	b.n	800414c <PCD_EP_ISR_Handler+0x6b6>
 8004088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800408a:	785b      	ldrb	r3, [r3, #1]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d15d      	bne.n	800414c <PCD_EP_ISR_Handler+0x6b6>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800409e:	b29b      	uxth	r3, r3
 80040a0:	461a      	mov	r2, r3
 80040a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a4:	4413      	add	r3, r2
 80040a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	00da      	lsls	r2, r3, #3
 80040ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040b0:	4413      	add	r3, r2
 80040b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80040b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80040b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ba:	2200      	movs	r2, #0
 80040bc:	801a      	strh	r2, [r3, #0]
 80040be:	e045      	b.n	800414c <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040c8:	785b      	ldrb	r3, [r3, #1]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d126      	bne.n	800411c <PCD_EP_ISR_Handler+0x686>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	637b      	str	r3, [r7, #52]	; 0x34
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040dc:	b29b      	uxth	r3, r3
 80040de:	461a      	mov	r2, r3
 80040e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e2:	4413      	add	r3, r2
 80040e4:	637b      	str	r3, [r7, #52]	; 0x34
 80040e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	00da      	lsls	r2, r3, #3
 80040ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ee:	4413      	add	r3, r2
 80040f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80040f4:	633b      	str	r3, [r7, #48]	; 0x30
 80040f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f8:	881b      	ldrh	r3, [r3, #0]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004100:	b29a      	uxth	r2, r3
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	801a      	strh	r2, [r3, #0]
 8004106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	b29b      	uxth	r3, r3
 800410c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004110:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004114:	b29a      	uxth	r2, r3
 8004116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004118:	801a      	strh	r2, [r3, #0]
 800411a:	e017      	b.n	800414c <PCD_EP_ISR_Handler+0x6b6>
 800411c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800411e:	785b      	ldrb	r3, [r3, #1]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d113      	bne.n	800414c <PCD_EP_ISR_Handler+0x6b6>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800412c:	b29b      	uxth	r3, r3
 800412e:	461a      	mov	r2, r3
 8004130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004132:	4413      	add	r3, r2
 8004134:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004136:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004138:	781b      	ldrb	r3, [r3, #0]
 800413a:	00da      	lsls	r2, r3, #3
 800413c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800413e:	4413      	add	r3, r2
 8004140:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004144:	63bb      	str	r3, [r7, #56]	; 0x38
 8004146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004148:	2200      	movs	r2, #0
 800414a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800414c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	4619      	mov	r1, r3
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f007 fc29 	bl	800b9aa <HAL_PCD_DataInStageCallback>
 8004158:	e051      	b.n	80041fe <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800415a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800415e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004162:	2b00      	cmp	r3, #0
 8004164:	d144      	bne.n	80041f0 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800416e:	b29b      	uxth	r3, r3
 8004170:	461a      	mov	r2, r3
 8004172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	00db      	lsls	r3, r3, #3
 8004178:	4413      	add	r3, r2
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	4413      	add	r3, r2
 8004180:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800418a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 800418e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004196:	429a      	cmp	r2, r3
 8004198:	d907      	bls.n	80041aa <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800419a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80041a2:	1ad2      	subs	r2, r2, r3
 80041a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041a6:	619a      	str	r2, [r3, #24]
 80041a8:	e002      	b.n	80041b0 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 80041aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ac:	2200      	movs	r2, #0
 80041ae:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80041b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b2:	699b      	ldr	r3, [r3, #24]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d106      	bne.n	80041c6 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80041b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	4619      	mov	r1, r3
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f007 fbf3 	bl	800b9aa <HAL_PCD_DataInStageCallback>
 80041c4:	e01b      	b.n	80041fe <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80041c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041c8:	695a      	ldr	r2, [r3, #20]
 80041ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80041ce:	441a      	add	r2, r3
 80041d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80041d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d6:	69da      	ldr	r2, [r3, #28]
 80041d8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80041dc:	441a      	add	r2, r3
 80041de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041e0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041e8:	4618      	mov	r0, r3
 80041ea:	f003 ffe4 	bl	80081b6 <USB_EPStartXfer>
 80041ee:	e006      	b.n	80041fe <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80041f0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80041f4:	461a      	mov	r2, r3
 80041f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f917 	bl	800442c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004206:	b29b      	uxth	r3, r3
 8004208:	b21b      	sxth	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	f6ff ac48 	blt.w	8003aa0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3758      	adds	r7, #88	; 0x58
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800421a:	b580      	push	{r7, lr}
 800421c:	b088      	sub	sp, #32
 800421e:	af00      	add	r7, sp, #0
 8004220:	60f8      	str	r0, [r7, #12]
 8004222:	60b9      	str	r1, [r7, #8]
 8004224:	4613      	mov	r3, r2
 8004226:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004228:	88fb      	ldrh	r3, [r7, #6]
 800422a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d07c      	beq.n	800432c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800423a:	b29b      	uxth	r3, r3
 800423c:	461a      	mov	r2, r3
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	00db      	lsls	r3, r3, #3
 8004244:	4413      	add	r3, r2
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	6812      	ldr	r2, [r2, #0]
 800424a:	4413      	add	r3, r2
 800424c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004250:	881b      	ldrh	r3, [r3, #0]
 8004252:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004256:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	699a      	ldr	r2, [r3, #24]
 800425c:	8b7b      	ldrh	r3, [r7, #26]
 800425e:	429a      	cmp	r2, r3
 8004260:	d306      	bcc.n	8004270 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	699a      	ldr	r2, [r3, #24]
 8004266:	8b7b      	ldrh	r3, [r7, #26]
 8004268:	1ad2      	subs	r2, r2, r3
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	619a      	str	r2, [r3, #24]
 800426e:	e002      	b.n	8004276 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	2200      	movs	r2, #0
 8004274:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d123      	bne.n	80042c6 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	461a      	mov	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	881b      	ldrh	r3, [r3, #0]
 800428e:	b29b      	uxth	r3, r3
 8004290:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004298:	833b      	strh	r3, [r7, #24]
 800429a:	8b3b      	ldrh	r3, [r7, #24]
 800429c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80042a0:	833b      	strh	r3, [r7, #24]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	441a      	add	r2, r3
 80042b0:	8b3b      	ldrh	r3, [r7, #24]
 80042b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80042c6:	88fb      	ldrh	r3, [r7, #6]
 80042c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d01f      	beq.n	8004310 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	461a      	mov	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042ea:	82fb      	strh	r3, [r7, #22]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	461a      	mov	r2, r3
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	441a      	add	r2, r3
 80042fa:	8afb      	ldrh	r3, [r7, #22]
 80042fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004300:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004304:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004308:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800430c:	b29b      	uxth	r3, r3
 800430e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004310:	8b7b      	ldrh	r3, [r7, #26]
 8004312:	2b00      	cmp	r3, #0
 8004314:	f000 8085 	beq.w	8004422 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6818      	ldr	r0, [r3, #0]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	6959      	ldr	r1, [r3, #20]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	891a      	ldrh	r2, [r3, #8]
 8004324:	8b7b      	ldrh	r3, [r7, #26]
 8004326:	f005 fc73 	bl	8009c10 <USB_ReadPMA>
 800432a:	e07a      	b.n	8004422 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004334:	b29b      	uxth	r3, r3
 8004336:	461a      	mov	r2, r3
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	4413      	add	r3, r2
 8004340:	68fa      	ldr	r2, [r7, #12]
 8004342:	6812      	ldr	r2, [r2, #0]
 8004344:	4413      	add	r3, r2
 8004346:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004350:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	699a      	ldr	r2, [r3, #24]
 8004356:	8b7b      	ldrh	r3, [r7, #26]
 8004358:	429a      	cmp	r2, r3
 800435a:	d306      	bcc.n	800436a <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	699a      	ldr	r2, [r3, #24]
 8004360:	8b7b      	ldrh	r3, [r7, #26]
 8004362:	1ad2      	subs	r2, r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	619a      	str	r2, [r3, #24]
 8004368:	e002      	b.n	8004370 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2200      	movs	r2, #0
 800436e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	699b      	ldr	r3, [r3, #24]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d123      	bne.n	80043c0 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	461a      	mov	r2, r3
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	881b      	ldrh	r3, [r3, #0]
 8004388:	b29b      	uxth	r3, r3
 800438a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800438e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004392:	83fb      	strh	r3, [r7, #30]
 8004394:	8bfb      	ldrh	r3, [r7, #30]
 8004396:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800439a:	83fb      	strh	r3, [r7, #30]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	461a      	mov	r2, r3
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	441a      	add	r2, r3
 80043aa:	8bfb      	ldrh	r3, [r7, #30]
 80043ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043bc:	b29b      	uxth	r3, r3
 80043be:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80043c0:	88fb      	ldrh	r3, [r7, #6]
 80043c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d11f      	bne.n	800440a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4413      	add	r3, r2
 80043d8:	881b      	ldrh	r3, [r3, #0]
 80043da:	b29b      	uxth	r3, r3
 80043dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043e4:	83bb      	strh	r3, [r7, #28]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	461a      	mov	r2, r3
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	441a      	add	r2, r3
 80043f4:	8bbb      	ldrh	r3, [r7, #28]
 80043f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004402:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004406:	b29b      	uxth	r3, r3
 8004408:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800440a:	8b7b      	ldrh	r3, [r7, #26]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d008      	beq.n	8004422 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6818      	ldr	r0, [r3, #0]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	6959      	ldr	r1, [r3, #20]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	895a      	ldrh	r2, [r3, #10]
 800441c:	8b7b      	ldrh	r3, [r7, #26]
 800441e:	f005 fbf7 	bl	8009c10 <USB_ReadPMA>
    }
  }

  return count;
 8004422:	8b7b      	ldrh	r3, [r7, #26]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3720      	adds	r7, #32
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b0a4      	sub	sp, #144	; 0x90
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	4613      	mov	r3, r2
 8004438:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800443a:	88fb      	ldrh	r3, [r7, #6]
 800443c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004440:	2b00      	cmp	r3, #0
 8004442:	f000 81db 	beq.w	80047fc <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800444e:	b29b      	uxth	r3, r3
 8004450:	461a      	mov	r2, r3
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	00db      	lsls	r3, r3, #3
 8004458:	4413      	add	r3, r2
 800445a:	68fa      	ldr	r2, [r7, #12]
 800445c:	6812      	ldr	r2, [r2, #0]
 800445e:	4413      	add	r3, r2
 8004460:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800446a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	699a      	ldr	r2, [r3, #24]
 8004472:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004476:	429a      	cmp	r2, r3
 8004478:	d907      	bls.n	800448a <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	699a      	ldr	r2, [r3, #24]
 800447e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004482:	1ad2      	subs	r2, r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	619a      	str	r2, [r3, #24]
 8004488:	e002      	b.n	8004490 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2200      	movs	r2, #0
 800448e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	2b00      	cmp	r3, #0
 8004496:	f040 80b9 	bne.w	800460c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	785b      	ldrb	r3, [r3, #1]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d126      	bne.n	80044f0 <HAL_PCD_EP_DB_Transmit+0xc4>
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b6:	4413      	add	r3, r2
 80044b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	00da      	lsls	r2, r3, #3
 80044c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044c2:	4413      	add	r3, r2
 80044c4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80044c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	881b      	ldrh	r3, [r3, #0]
 80044ce:	b29b      	uxth	r3, r3
 80044d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d8:	801a      	strh	r2, [r3, #0]
 80044da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044dc:	881b      	ldrh	r3, [r3, #0]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044e8:	b29a      	uxth	r2, r3
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	801a      	strh	r2, [r3, #0]
 80044ee:	e01a      	b.n	8004526 <HAL_PCD_EP_DB_Transmit+0xfa>
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	785b      	ldrb	r3, [r3, #1]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d116      	bne.n	8004526 <HAL_PCD_EP_DB_Transmit+0xfa>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	637b      	str	r3, [r7, #52]	; 0x34
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004506:	b29b      	uxth	r3, r3
 8004508:	461a      	mov	r2, r3
 800450a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800450c:	4413      	add	r3, r2
 800450e:	637b      	str	r3, [r7, #52]	; 0x34
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	00da      	lsls	r2, r3, #3
 8004516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004518:	4413      	add	r3, r2
 800451a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800451e:	633b      	str	r3, [r7, #48]	; 0x30
 8004520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004522:	2200      	movs	r2, #0
 8004524:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	627b      	str	r3, [r7, #36]	; 0x24
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	785b      	ldrb	r3, [r3, #1]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d126      	bne.n	8004582 <HAL_PCD_EP_DB_Transmit+0x156>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	61fb      	str	r3, [r7, #28]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004542:	b29b      	uxth	r3, r3
 8004544:	461a      	mov	r2, r3
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	4413      	add	r3, r2
 800454a:	61fb      	str	r3, [r7, #28]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	00da      	lsls	r2, r3, #3
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	4413      	add	r3, r2
 8004556:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800455a:	61bb      	str	r3, [r7, #24]
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	881b      	ldrh	r3, [r3, #0]
 8004560:	b29b      	uxth	r3, r3
 8004562:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004566:	b29a      	uxth	r2, r3
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	801a      	strh	r2, [r3, #0]
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	881b      	ldrh	r3, [r3, #0]
 8004570:	b29b      	uxth	r3, r3
 8004572:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004576:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800457a:	b29a      	uxth	r2, r3
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	801a      	strh	r2, [r3, #0]
 8004580:	e017      	b.n	80045b2 <HAL_PCD_EP_DB_Transmit+0x186>
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	785b      	ldrb	r3, [r3, #1]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d113      	bne.n	80045b2 <HAL_PCD_EP_DB_Transmit+0x186>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004592:	b29b      	uxth	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004598:	4413      	add	r3, r2
 800459a:	627b      	str	r3, [r7, #36]	; 0x24
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	00da      	lsls	r2, r3, #3
 80045a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a4:	4413      	add	r3, r2
 80045a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045aa:	623b      	str	r3, [r7, #32]
 80045ac:	6a3b      	ldr	r3, [r7, #32]
 80045ae:	2200      	movs	r2, #0
 80045b0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	781b      	ldrb	r3, [r3, #0]
 80045b6:	4619      	mov	r1, r3
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f007 f9f6 	bl	800b9aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80045be:	88fb      	ldrh	r3, [r7, #6]
 80045c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 82fa 	beq.w	8004bbe <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	461a      	mov	r2, r3
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	781b      	ldrb	r3, [r3, #0]
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	881b      	ldrh	r3, [r3, #0]
 80045da:	b29b      	uxth	r3, r3
 80045dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e4:	82fb      	strh	r3, [r7, #22]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	461a      	mov	r2, r3
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	781b      	ldrb	r3, [r3, #0]
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	441a      	add	r2, r3
 80045f4:	8afb      	ldrh	r3, [r7, #22]
 80045f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004606:	b29b      	uxth	r3, r3
 8004608:	8013      	strh	r3, [r2, #0]
 800460a:	e2d8      	b.n	8004bbe <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800460c:	88fb      	ldrh	r3, [r7, #6]
 800460e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004612:	2b00      	cmp	r3, #0
 8004614:	d021      	beq.n	800465a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	b29b      	uxth	r3, r3
 8004628:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800462c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004630:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	461a      	mov	r2, r3
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	441a      	add	r2, r3
 8004642:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800464a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800464e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004656:	b29b      	uxth	r3, r3
 8004658:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004660:	2b01      	cmp	r3, #1
 8004662:	f040 82ac 	bne.w	8004bbe <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004666:	68bb      	ldr	r3, [r7, #8]
 8004668:	695a      	ldr	r2, [r3, #20]
 800466a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800466e:	441a      	add	r2, r3
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800467c:	441a      	add	r2, r3
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	6a1a      	ldr	r2, [r3, #32]
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	429a      	cmp	r2, r3
 800468c:	d30b      	bcc.n	80046a6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	6a1a      	ldr	r2, [r3, #32]
 800469a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800469e:	1ad2      	subs	r2, r2, r3
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	621a      	str	r2, [r3, #32]
 80046a4:	e017      	b.n	80046d6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d108      	bne.n	80046c0 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80046ae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80046b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80046be:	e00a      	b.n	80046d6 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2200      	movs	r2, #0
 80046c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	2200      	movs	r2, #0
 80046d4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	785b      	ldrb	r3, [r3, #1]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d165      	bne.n	80047aa <HAL_PCD_EP_DB_Transmit+0x37e>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ec:	b29b      	uxth	r3, r3
 80046ee:	461a      	mov	r2, r3
 80046f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f2:	4413      	add	r3, r2
 80046f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	00da      	lsls	r2, r3, #3
 80046fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fe:	4413      	add	r3, r2
 8004700:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004704:	63bb      	str	r3, [r7, #56]	; 0x38
 8004706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	b29b      	uxth	r3, r3
 800470c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004710:	b29a      	uxth	r2, r3
 8004712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004714:	801a      	strh	r2, [r3, #0]
 8004716:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800471a:	2b3e      	cmp	r3, #62	; 0x3e
 800471c:	d91d      	bls.n	800475a <HAL_PCD_EP_DB_Transmit+0x32e>
 800471e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	64bb      	str	r3, [r7, #72]	; 0x48
 8004726:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800472a:	f003 031f 	and.w	r3, r3, #31
 800472e:	2b00      	cmp	r3, #0
 8004730:	d102      	bne.n	8004738 <HAL_PCD_EP_DB_Transmit+0x30c>
 8004732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004734:	3b01      	subs	r3, #1
 8004736:	64bb      	str	r3, [r7, #72]	; 0x48
 8004738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	b29a      	uxth	r2, r3
 800473e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004740:	b29b      	uxth	r3, r3
 8004742:	029b      	lsls	r3, r3, #10
 8004744:	b29b      	uxth	r3, r3
 8004746:	4313      	orrs	r3, r2
 8004748:	b29b      	uxth	r3, r3
 800474a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800474e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004752:	b29a      	uxth	r2, r3
 8004754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004756:	801a      	strh	r2, [r3, #0]
 8004758:	e044      	b.n	80047e4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800475a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10a      	bne.n	8004778 <HAL_PCD_EP_DB_Transmit+0x34c>
 8004762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	b29b      	uxth	r3, r3
 8004768:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800476c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004770:	b29a      	uxth	r2, r3
 8004772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004774:	801a      	strh	r2, [r3, #0]
 8004776:	e035      	b.n	80047e4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004778:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800477c:	085b      	lsrs	r3, r3, #1
 800477e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004780:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004784:	f003 0301 	and.w	r3, r3, #1
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <HAL_PCD_EP_DB_Transmit+0x366>
 800478c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800478e:	3301      	adds	r3, #1
 8004790:	64bb      	str	r3, [r7, #72]	; 0x48
 8004792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004794:	881b      	ldrh	r3, [r3, #0]
 8004796:	b29a      	uxth	r2, r3
 8004798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800479a:	b29b      	uxth	r3, r3
 800479c:	029b      	lsls	r3, r3, #10
 800479e:	b29b      	uxth	r3, r3
 80047a0:	4313      	orrs	r3, r2
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a6:	801a      	strh	r2, [r3, #0]
 80047a8:	e01c      	b.n	80047e4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	785b      	ldrb	r3, [r3, #1]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d118      	bne.n	80047e4 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	647b      	str	r3, [r7, #68]	; 0x44
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c6:	4413      	add	r3, r2
 80047c8:	647b      	str	r3, [r7, #68]	; 0x44
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	00da      	lsls	r2, r3, #3
 80047d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d2:	4413      	add	r3, r2
 80047d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80047d8:	643b      	str	r3, [r7, #64]	; 0x40
 80047da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047de:	b29a      	uxth	r2, r3
 80047e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e2:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6818      	ldr	r0, [r3, #0]
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	6959      	ldr	r1, [r3, #20]
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	891a      	ldrh	r2, [r3, #8]
 80047f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	f005 f9c9 	bl	8009b8c <USB_WritePMA>
 80047fa:	e1e0      	b.n	8004bbe <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004804:	b29b      	uxth	r3, r3
 8004806:	461a      	mov	r2, r3
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	00db      	lsls	r3, r3, #3
 800480e:	4413      	add	r3, r2
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	4413      	add	r3, r2
 8004816:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004820:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	699a      	ldr	r2, [r3, #24]
 8004828:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800482c:	429a      	cmp	r2, r3
 800482e:	d307      	bcc.n	8004840 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	699a      	ldr	r2, [r3, #24]
 8004834:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004838:	1ad2      	subs	r2, r2, r3
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	619a      	str	r2, [r3, #24]
 800483e:	e002      	b.n	8004846 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2200      	movs	r2, #0
 8004844:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f040 80c0 	bne.w	80049d0 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	785b      	ldrb	r3, [r3, #1]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d126      	bne.n	80048a6 <HAL_PCD_EP_DB_Transmit+0x47a>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004866:	b29b      	uxth	r3, r3
 8004868:	461a      	mov	r2, r3
 800486a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800486c:	4413      	add	r3, r2
 800486e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	00da      	lsls	r2, r3, #3
 8004876:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004878:	4413      	add	r3, r2
 800487a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800487e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004880:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004882:	881b      	ldrh	r3, [r3, #0]
 8004884:	b29b      	uxth	r3, r3
 8004886:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800488a:	b29a      	uxth	r2, r3
 800488c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800488e:	801a      	strh	r2, [r3, #0]
 8004890:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	b29b      	uxth	r3, r3
 8004896:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800489a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800489e:	b29a      	uxth	r2, r3
 80048a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048a2:	801a      	strh	r2, [r3, #0]
 80048a4:	e01a      	b.n	80048dc <HAL_PCD_EP_DB_Transmit+0x4b0>
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	785b      	ldrb	r3, [r3, #1]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d116      	bne.n	80048dc <HAL_PCD_EP_DB_Transmit+0x4b0>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	667b      	str	r3, [r7, #100]	; 0x64
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048bc:	b29b      	uxth	r3, r3
 80048be:	461a      	mov	r2, r3
 80048c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048c2:	4413      	add	r3, r2
 80048c4:	667b      	str	r3, [r7, #100]	; 0x64
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	00da      	lsls	r2, r3, #3
 80048cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048ce:	4413      	add	r3, r2
 80048d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80048d4:	663b      	str	r3, [r7, #96]	; 0x60
 80048d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048d8:	2200      	movs	r2, #0
 80048da:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	677b      	str	r3, [r7, #116]	; 0x74
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	785b      	ldrb	r3, [r3, #1]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d12b      	bne.n	8004942 <HAL_PCD_EP_DB_Transmit+0x516>
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048f8:	b29b      	uxth	r3, r3
 80048fa:	461a      	mov	r2, r3
 80048fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048fe:	4413      	add	r3, r2
 8004900:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	00da      	lsls	r2, r3, #3
 8004908:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800490a:	4413      	add	r3, r2
 800490c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004910:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004914:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004918:	881b      	ldrh	r3, [r3, #0]
 800491a:	b29b      	uxth	r3, r3
 800491c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004920:	b29a      	uxth	r2, r3
 8004922:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004926:	801a      	strh	r2, [r3, #0]
 8004928:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800492c:	881b      	ldrh	r3, [r3, #0]
 800492e:	b29b      	uxth	r3, r3
 8004930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004938:	b29a      	uxth	r2, r3
 800493a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800493e:	801a      	strh	r2, [r3, #0]
 8004940:	e017      	b.n	8004972 <HAL_PCD_EP_DB_Transmit+0x546>
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	785b      	ldrb	r3, [r3, #1]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d113      	bne.n	8004972 <HAL_PCD_EP_DB_Transmit+0x546>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004952:	b29b      	uxth	r3, r3
 8004954:	461a      	mov	r2, r3
 8004956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004958:	4413      	add	r3, r2
 800495a:	677b      	str	r3, [r7, #116]	; 0x74
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	781b      	ldrb	r3, [r3, #0]
 8004960:	00da      	lsls	r2, r3, #3
 8004962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004964:	4413      	add	r3, r2
 8004966:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800496a:	673b      	str	r3, [r7, #112]	; 0x70
 800496c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800496e:	2200      	movs	r2, #0
 8004970:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	4619      	mov	r1, r3
 8004978:	68f8      	ldr	r0, [r7, #12]
 800497a:	f007 f816 	bl	800b9aa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800497e:	88fb      	ldrh	r3, [r7, #6]
 8004980:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004984:	2b00      	cmp	r3, #0
 8004986:	f040 811a 	bne.w	8004bbe <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	4413      	add	r3, r2
 8004998:	881b      	ldrh	r3, [r3, #0]
 800499a:	b29b      	uxth	r3, r3
 800499c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	461a      	mov	r2, r3
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	781b      	ldrb	r3, [r3, #0]
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	441a      	add	r2, r3
 80049b6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80049ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ca:	b29b      	uxth	r3, r3
 80049cc:	8013      	strh	r3, [r2, #0]
 80049ce:	e0f6      	b.n	8004bbe <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80049d0:	88fb      	ldrh	r3, [r7, #6]
 80049d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d121      	bne.n	8004a1e <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	461a      	mov	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	4413      	add	r3, r2
 80049e8:	881b      	ldrh	r3, [r3, #0]
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049f4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	461a      	mov	r2, r3
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	781b      	ldrb	r3, [r3, #0]
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	441a      	add	r2, r3
 8004a06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	f040 80ca 	bne.w	8004bbe <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	695a      	ldr	r2, [r3, #20]
 8004a2e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004a32:	441a      	add	r2, r3
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	69da      	ldr	r2, [r3, #28]
 8004a3c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004a40:	441a      	add	r2, r3
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	6a1a      	ldr	r2, [r3, #32]
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	691b      	ldr	r3, [r3, #16]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d30b      	bcc.n	8004a6a <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	6a1a      	ldr	r2, [r3, #32]
 8004a5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a62:	1ad2      	subs	r2, r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	621a      	str	r2, [r3, #32]
 8004a68:	e017      	b.n	8004a9a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d108      	bne.n	8004a84 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004a72:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004a76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004a82:	e00a      	b.n	8004a9a <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2200      	movs	r2, #0
 8004a96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	657b      	str	r3, [r7, #84]	; 0x54
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	785b      	ldrb	r3, [r3, #1]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d165      	bne.n	8004b74 <HAL_PCD_EP_DB_Transmit+0x748>
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	461a      	mov	r2, r3
 8004aba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004abc:	4413      	add	r3, r2
 8004abe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	00da      	lsls	r2, r3, #3
 8004ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac8:	4413      	add	r3, r2
 8004aca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ace:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ad0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ad2:	881b      	ldrh	r3, [r3, #0]
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ade:	801a      	strh	r2, [r3, #0]
 8004ae0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ae4:	2b3e      	cmp	r3, #62	; 0x3e
 8004ae6:	d91d      	bls.n	8004b24 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004ae8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004aec:	095b      	lsrs	r3, r3, #5
 8004aee:	66bb      	str	r3, [r7, #104]	; 0x68
 8004af0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004af4:	f003 031f 	and.w	r3, r3, #31
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d102      	bne.n	8004b02 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004afc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004afe:	3b01      	subs	r3, #1
 8004b00:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	029b      	lsls	r3, r3, #10
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	4313      	orrs	r3, r2
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b18:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b1c:	b29a      	uxth	r2, r3
 8004b1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b20:	801a      	strh	r2, [r3, #0]
 8004b22:	e041      	b.n	8004ba8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004b24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d10a      	bne.n	8004b42 <HAL_PCD_EP_DB_Transmit+0x716>
 8004b2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b3e:	801a      	strh	r2, [r3, #0]
 8004b40:	e032      	b.n	8004ba8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b46:	085b      	lsrs	r3, r3, #1
 8004b48:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d002      	beq.n	8004b5c <HAL_PCD_EP_DB_Transmit+0x730>
 8004b56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b58:	3301      	adds	r3, #1
 8004b5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b5e:	881b      	ldrh	r3, [r3, #0]
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	029b      	lsls	r3, r3, #10
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b70:	801a      	strh	r2, [r3, #0]
 8004b72:	e019      	b.n	8004ba8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	785b      	ldrb	r3, [r3, #1]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d115      	bne.n	8004ba8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	461a      	mov	r2, r3
 8004b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b8a:	4413      	add	r3, r2
 8004b8c:	657b      	str	r3, [r7, #84]	; 0x54
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	00da      	lsls	r2, r3, #3
 8004b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b96:	4413      	add	r3, r2
 8004b98:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b9c:	653b      	str	r3, [r7, #80]	; 0x50
 8004b9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ba2:	b29a      	uxth	r2, r3
 8004ba4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ba6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6818      	ldr	r0, [r3, #0]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	6959      	ldr	r1, [r3, #20]
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	895a      	ldrh	r2, [r3, #10]
 8004bb4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	f004 ffe7 	bl	8009b8c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd8:	82bb      	strh	r3, [r7, #20]
 8004bda:	8abb      	ldrh	r3, [r7, #20]
 8004bdc:	f083 0310 	eor.w	r3, r3, #16
 8004be0:	82bb      	strh	r3, [r7, #20]
 8004be2:	8abb      	ldrh	r3, [r7, #20]
 8004be4:	f083 0320 	eor.w	r3, r3, #32
 8004be8:	82bb      	strh	r3, [r7, #20]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	009b      	lsls	r3, r3, #2
 8004bf6:	441a      	add	r2, r3
 8004bf8:	8abb      	ldrh	r3, [r7, #20]
 8004bfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3790      	adds	r7, #144	; 0x90
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b087      	sub	sp, #28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	607b      	str	r3, [r7, #4]
 8004c22:	460b      	mov	r3, r1
 8004c24:	817b      	strh	r3, [r7, #10]
 8004c26:	4613      	mov	r3, r2
 8004c28:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8004c2a:	897b      	ldrh	r3, [r7, #10]
 8004c2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d00b      	beq.n	8004c4e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c36:	897b      	ldrh	r3, [r7, #10]
 8004c38:	f003 0207 	and.w	r2, r3, #7
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4413      	add	r3, r2
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	3310      	adds	r3, #16
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	4413      	add	r3, r2
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	e009      	b.n	8004c62 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c4e:	897a      	ldrh	r2, [r7, #10]
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	00db      	lsls	r3, r3, #3
 8004c58:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	4413      	add	r3, r2
 8004c60:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8004c62:	893b      	ldrh	r3, [r7, #8]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d107      	bne.n	8004c78 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	80da      	strh	r2, [r3, #6]
 8004c76:	e00b      	b.n	8004c90 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2201      	movs	r2, #1
 8004c7c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	b29a      	uxth	r2, r3
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	0c1b      	lsrs	r3, r3, #16
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8004c90:	2300      	movs	r3, #0
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	371c      	adds	r7, #28
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr

08004c9e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b085      	sub	sp, #20
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004cc2:	b29b      	uxth	r3, r3
 8004cc4:	f043 0301 	orr.w	r3, r3, #1
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	f043 0302 	orr.w	r3, r3, #2
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004ce4:	2300      	movs	r3, #0
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
	...

08004cf4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d141      	bne.n	8004d86 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d02:	4b4b      	ldr	r3, [pc, #300]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d0e:	d131      	bne.n	8004d74 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d10:	4b47      	ldr	r3, [pc, #284]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d16:	4a46      	ldr	r2, [pc, #280]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d20:	4b43      	ldr	r3, [pc, #268]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d28:	4a41      	ldr	r2, [pc, #260]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d30:	4b40      	ldr	r3, [pc, #256]	; (8004e34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2232      	movs	r2, #50	; 0x32
 8004d36:	fb02 f303 	mul.w	r3, r2, r3
 8004d3a:	4a3f      	ldr	r2, [pc, #252]	; (8004e38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d40:	0c9b      	lsrs	r3, r3, #18
 8004d42:	3301      	adds	r3, #1
 8004d44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d46:	e002      	b.n	8004d4e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	3b01      	subs	r3, #1
 8004d4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d4e:	4b38      	ldr	r3, [pc, #224]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d5a:	d102      	bne.n	8004d62 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1f2      	bne.n	8004d48 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004d62:	4b33      	ldr	r3, [pc, #204]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d64:	695b      	ldr	r3, [r3, #20]
 8004d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d6e:	d158      	bne.n	8004e22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e057      	b.n	8004e24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d74:	4b2e      	ldr	r3, [pc, #184]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d7a:	4a2d      	ldr	r2, [pc, #180]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004d84:	e04d      	b.n	8004e22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d8c:	d141      	bne.n	8004e12 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d8e:	4b28      	ldr	r3, [pc, #160]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d9a:	d131      	bne.n	8004e00 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d9c:	4b24      	ldr	r3, [pc, #144]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004da2:	4a23      	ldr	r2, [pc, #140]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004dac:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004db4:	4a1e      	ldr	r2, [pc, #120]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004dba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004dbc:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2232      	movs	r2, #50	; 0x32
 8004dc2:	fb02 f303 	mul.w	r3, r2, r3
 8004dc6:	4a1c      	ldr	r2, [pc, #112]	; (8004e38 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dcc:	0c9b      	lsrs	r3, r3, #18
 8004dce:	3301      	adds	r3, #1
 8004dd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dd2:	e002      	b.n	8004dda <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dda:	4b15      	ldr	r3, [pc, #84]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004de2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de6:	d102      	bne.n	8004dee <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1f2      	bne.n	8004dd4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004dee:	4b10      	ldr	r3, [pc, #64]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dfa:	d112      	bne.n	8004e22 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e011      	b.n	8004e24 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e00:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e06:	4a0a      	ldr	r2, [pc, #40]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004e10:	e007      	b.n	8004e22 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e12:	4b07      	ldr	r3, [pc, #28]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e1a:	4a05      	ldr	r2, [pc, #20]	; (8004e30 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e1c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e20:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004e22:	2300      	movs	r3, #0
}
 8004e24:	4618      	mov	r0, r3
 8004e26:	3714      	adds	r7, #20
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	40007000 	.word	0x40007000
 8004e34:	20000008 	.word	0x20000008
 8004e38:	431bde83 	.word	0x431bde83

08004e3c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004e40:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	4a04      	ldr	r2, [pc, #16]	; (8004e58 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e4a:	6093      	str	r3, [r2, #8]
}
 8004e4c:	bf00      	nop
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40007000 	.word	0x40007000

08004e5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b088      	sub	sp, #32
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d101      	bne.n	8004e6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e2fe      	b.n	800546c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d075      	beq.n	8004f66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e7a:	4b97      	ldr	r3, [pc, #604]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f003 030c 	and.w	r3, r3, #12
 8004e82:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004e84:	4b94      	ldr	r3, [pc, #592]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	f003 0303 	and.w	r3, r3, #3
 8004e8c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	2b0c      	cmp	r3, #12
 8004e92:	d102      	bne.n	8004e9a <HAL_RCC_OscConfig+0x3e>
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	2b03      	cmp	r3, #3
 8004e98:	d002      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x44>
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d10b      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea0:	4b8d      	ldr	r3, [pc, #564]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d05b      	beq.n	8004f64 <HAL_RCC_OscConfig+0x108>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d157      	bne.n	8004f64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e2d9      	b.n	800546c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec0:	d106      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x74>
 8004ec2:	4b85      	ldr	r3, [pc, #532]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a84      	ldr	r2, [pc, #528]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004ec8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ecc:	6013      	str	r3, [r2, #0]
 8004ece:	e01d      	b.n	8004f0c <HAL_RCC_OscConfig+0xb0>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ed8:	d10c      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x98>
 8004eda:	4b7f      	ldr	r3, [pc, #508]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a7e      	ldr	r2, [pc, #504]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004ee0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ee4:	6013      	str	r3, [r2, #0]
 8004ee6:	4b7c      	ldr	r3, [pc, #496]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a7b      	ldr	r2, [pc, #492]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	e00b      	b.n	8004f0c <HAL_RCC_OscConfig+0xb0>
 8004ef4:	4b78      	ldr	r3, [pc, #480]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a77      	ldr	r2, [pc, #476]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004efa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	4b75      	ldr	r3, [pc, #468]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a74      	ldr	r2, [pc, #464]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004f06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d013      	beq.n	8004f3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f14:	f7fc fc0c 	bl	8001730 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f1a:	e008      	b.n	8004f2e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f1c:	f7fc fc08 	bl	8001730 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b64      	cmp	r3, #100	; 0x64
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e29e      	b.n	800546c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f2e:	4b6a      	ldr	r3, [pc, #424]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d0f0      	beq.n	8004f1c <HAL_RCC_OscConfig+0xc0>
 8004f3a:	e014      	b.n	8004f66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3c:	f7fc fbf8 	bl	8001730 <HAL_GetTick>
 8004f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f42:	e008      	b.n	8004f56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f44:	f7fc fbf4 	bl	8001730 <HAL_GetTick>
 8004f48:	4602      	mov	r2, r0
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	1ad3      	subs	r3, r2, r3
 8004f4e:	2b64      	cmp	r3, #100	; 0x64
 8004f50:	d901      	bls.n	8004f56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f52:	2303      	movs	r3, #3
 8004f54:	e28a      	b.n	800546c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f56:	4b60      	ldr	r3, [pc, #384]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d1f0      	bne.n	8004f44 <HAL_RCC_OscConfig+0xe8>
 8004f62:	e000      	b.n	8004f66 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f003 0302 	and.w	r3, r3, #2
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d075      	beq.n	800505e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f72:	4b59      	ldr	r3, [pc, #356]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 030c 	and.w	r3, r3, #12
 8004f7a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f7c:	4b56      	ldr	r3, [pc, #344]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f003 0303 	and.w	r3, r3, #3
 8004f84:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	2b0c      	cmp	r3, #12
 8004f8a:	d102      	bne.n	8004f92 <HAL_RCC_OscConfig+0x136>
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d002      	beq.n	8004f98 <HAL_RCC_OscConfig+0x13c>
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d11f      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f98:	4b4f      	ldr	r3, [pc, #316]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x154>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e25d      	b.n	800546c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb0:	4b49      	ldr	r3, [pc, #292]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	061b      	lsls	r3, r3, #24
 8004fbe:	4946      	ldr	r1, [pc, #280]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004fc4:	4b45      	ldr	r3, [pc, #276]	; (80050dc <HAL_RCC_OscConfig+0x280>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f7fc fb65 	bl	8001698 <HAL_InitTick>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d043      	beq.n	800505c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e249      	b.n	800546c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d023      	beq.n	8005028 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fe0:	4b3d      	ldr	r3, [pc, #244]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a3c      	ldr	r2, [pc, #240]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8004fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fec:	f7fc fba0 	bl	8001730 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ff4:	f7fc fb9c 	bl	8001730 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e232      	b.n	800546c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005006:	4b34      	ldr	r3, [pc, #208]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005012:	4b31      	ldr	r3, [pc, #196]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	061b      	lsls	r3, r3, #24
 8005020:	492d      	ldr	r1, [pc, #180]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8005022:	4313      	orrs	r3, r2
 8005024:	604b      	str	r3, [r1, #4]
 8005026:	e01a      	b.n	800505e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005028:	4b2b      	ldr	r3, [pc, #172]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a2a      	ldr	r2, [pc, #168]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 800502e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fc fb7c 	bl	8001730 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800503c:	f7fc fb78 	bl	8001730 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e20e      	b.n	800546c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800504e:	4b22      	ldr	r3, [pc, #136]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1f0      	bne.n	800503c <HAL_RCC_OscConfig+0x1e0>
 800505a:	e000      	b.n	800505e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800505c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b00      	cmp	r3, #0
 8005068:	d041      	beq.n	80050ee <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d01c      	beq.n	80050ac <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005072:	4b19      	ldr	r3, [pc, #100]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 8005074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005078:	4a17      	ldr	r2, [pc, #92]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 800507a:	f043 0301 	orr.w	r3, r3, #1
 800507e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005082:	f7fc fb55 	bl	8001730 <HAL_GetTick>
 8005086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005088:	e008      	b.n	800509c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800508a:	f7fc fb51 	bl	8001730 <HAL_GetTick>
 800508e:	4602      	mov	r2, r0
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	1ad3      	subs	r3, r2, r3
 8005094:	2b02      	cmp	r3, #2
 8005096:	d901      	bls.n	800509c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005098:	2303      	movs	r3, #3
 800509a:	e1e7      	b.n	800546c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800509c:	4b0e      	ldr	r3, [pc, #56]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 800509e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d0ef      	beq.n	800508a <HAL_RCC_OscConfig+0x22e>
 80050aa:	e020      	b.n	80050ee <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050ac:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 80050ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050b2:	4a09      	ldr	r2, [pc, #36]	; (80050d8 <HAL_RCC_OscConfig+0x27c>)
 80050b4:	f023 0301 	bic.w	r3, r3, #1
 80050b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050bc:	f7fc fb38 	bl	8001730 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050c2:	e00d      	b.n	80050e0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050c4:	f7fc fb34 	bl	8001730 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d906      	bls.n	80050e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e1ca      	b.n	800546c <HAL_RCC_OscConfig+0x610>
 80050d6:	bf00      	nop
 80050d8:	40021000 	.word	0x40021000
 80050dc:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050e0:	4b8c      	ldr	r3, [pc, #560]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 80050e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1ea      	bne.n	80050c4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0304 	and.w	r3, r3, #4
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 80a6 	beq.w	8005248 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050fc:	2300      	movs	r3, #0
 80050fe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005100:	4b84      	ldr	r3, [pc, #528]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 8005102:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_RCC_OscConfig+0x2b4>
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <HAL_RCC_OscConfig+0x2b6>
 8005110:	2300      	movs	r3, #0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00d      	beq.n	8005132 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005116:	4b7f      	ldr	r3, [pc, #508]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 8005118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511a:	4a7e      	ldr	r2, [pc, #504]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 800511c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005120:	6593      	str	r3, [r2, #88]	; 0x58
 8005122:	4b7c      	ldr	r3, [pc, #496]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 8005124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800512a:	60fb      	str	r3, [r7, #12]
 800512c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800512e:	2301      	movs	r3, #1
 8005130:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005132:	4b79      	ldr	r3, [pc, #484]	; (8005318 <HAL_RCC_OscConfig+0x4bc>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513a:	2b00      	cmp	r3, #0
 800513c:	d118      	bne.n	8005170 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800513e:	4b76      	ldr	r3, [pc, #472]	; (8005318 <HAL_RCC_OscConfig+0x4bc>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a75      	ldr	r2, [pc, #468]	; (8005318 <HAL_RCC_OscConfig+0x4bc>)
 8005144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800514a:	f7fc faf1 	bl	8001730 <HAL_GetTick>
 800514e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005150:	e008      	b.n	8005164 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005152:	f7fc faed 	bl	8001730 <HAL_GetTick>
 8005156:	4602      	mov	r2, r0
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	1ad3      	subs	r3, r2, r3
 800515c:	2b02      	cmp	r3, #2
 800515e:	d901      	bls.n	8005164 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005160:	2303      	movs	r3, #3
 8005162:	e183      	b.n	800546c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005164:	4b6c      	ldr	r3, [pc, #432]	; (8005318 <HAL_RCC_OscConfig+0x4bc>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0f0      	beq.n	8005152 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d108      	bne.n	800518a <HAL_RCC_OscConfig+0x32e>
 8005178:	4b66      	ldr	r3, [pc, #408]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 800517a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517e:	4a65      	ldr	r2, [pc, #404]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005188:	e024      	b.n	80051d4 <HAL_RCC_OscConfig+0x378>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	2b05      	cmp	r3, #5
 8005190:	d110      	bne.n	80051b4 <HAL_RCC_OscConfig+0x358>
 8005192:	4b60      	ldr	r3, [pc, #384]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 8005194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005198:	4a5e      	ldr	r2, [pc, #376]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 800519a:	f043 0304 	orr.w	r3, r3, #4
 800519e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051a2:	4b5c      	ldr	r3, [pc, #368]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 80051a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a8:	4a5a      	ldr	r2, [pc, #360]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 80051aa:	f043 0301 	orr.w	r3, r3, #1
 80051ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051b2:	e00f      	b.n	80051d4 <HAL_RCC_OscConfig+0x378>
 80051b4:	4b57      	ldr	r3, [pc, #348]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 80051b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ba:	4a56      	ldr	r2, [pc, #344]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 80051bc:	f023 0301 	bic.w	r3, r3, #1
 80051c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051c4:	4b53      	ldr	r3, [pc, #332]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 80051c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ca:	4a52      	ldr	r2, [pc, #328]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 80051cc:	f023 0304 	bic.w	r3, r3, #4
 80051d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d016      	beq.n	800520a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051dc:	f7fc faa8 	bl	8001730 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051e2:	e00a      	b.n	80051fa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051e4:	f7fc faa4 	bl	8001730 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e138      	b.n	800546c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051fa:	4b46      	ldr	r3, [pc, #280]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 80051fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005200:	f003 0302 	and.w	r3, r3, #2
 8005204:	2b00      	cmp	r3, #0
 8005206:	d0ed      	beq.n	80051e4 <HAL_RCC_OscConfig+0x388>
 8005208:	e015      	b.n	8005236 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520a:	f7fc fa91 	bl	8001730 <HAL_GetTick>
 800520e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005210:	e00a      	b.n	8005228 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005212:	f7fc fa8d 	bl	8001730 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005220:	4293      	cmp	r3, r2
 8005222:	d901      	bls.n	8005228 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005224:	2303      	movs	r3, #3
 8005226:	e121      	b.n	800546c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005228:	4b3a      	ldr	r3, [pc, #232]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 800522a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522e:	f003 0302 	and.w	r3, r3, #2
 8005232:	2b00      	cmp	r3, #0
 8005234:	d1ed      	bne.n	8005212 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005236:	7ffb      	ldrb	r3, [r7, #31]
 8005238:	2b01      	cmp	r3, #1
 800523a:	d105      	bne.n	8005248 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800523c:	4b35      	ldr	r3, [pc, #212]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 800523e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005240:	4a34      	ldr	r2, [pc, #208]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 8005242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005246:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0320 	and.w	r3, r3, #32
 8005250:	2b00      	cmp	r3, #0
 8005252:	d03c      	beq.n	80052ce <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01c      	beq.n	8005296 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800525c:	4b2d      	ldr	r3, [pc, #180]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 800525e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005262:	4a2c      	ldr	r2, [pc, #176]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 8005264:	f043 0301 	orr.w	r3, r3, #1
 8005268:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800526c:	f7fc fa60 	bl	8001730 <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005274:	f7fc fa5c 	bl	8001730 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e0f2      	b.n	800546c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005286:	4b23      	ldr	r3, [pc, #140]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 8005288:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800528c:	f003 0302 	and.w	r3, r3, #2
 8005290:	2b00      	cmp	r3, #0
 8005292:	d0ef      	beq.n	8005274 <HAL_RCC_OscConfig+0x418>
 8005294:	e01b      	b.n	80052ce <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005296:	4b1f      	ldr	r3, [pc, #124]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 8005298:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800529c:	4a1d      	ldr	r2, [pc, #116]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 800529e:	f023 0301 	bic.w	r3, r3, #1
 80052a2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a6:	f7fc fa43 	bl	8001730 <HAL_GetTick>
 80052aa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052ac:	e008      	b.n	80052c0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052ae:	f7fc fa3f 	bl	8001730 <HAL_GetTick>
 80052b2:	4602      	mov	r2, r0
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	1ad3      	subs	r3, r2, r3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d901      	bls.n	80052c0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80052bc:	2303      	movs	r3, #3
 80052be:	e0d5      	b.n	800546c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052c0:	4b14      	ldr	r3, [pc, #80]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 80052c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d1ef      	bne.n	80052ae <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	f000 80c9 	beq.w	800546a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052d8:	4b0e      	ldr	r3, [pc, #56]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	f003 030c 	and.w	r3, r3, #12
 80052e0:	2b0c      	cmp	r3, #12
 80052e2:	f000 8083 	beq.w	80053ec <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	2b02      	cmp	r3, #2
 80052ec:	d15e      	bne.n	80053ac <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052ee:	4b09      	ldr	r3, [pc, #36]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a08      	ldr	r2, [pc, #32]	; (8005314 <HAL_RCC_OscConfig+0x4b8>)
 80052f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fa:	f7fc fa19 	bl	8001730 <HAL_GetTick>
 80052fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005300:	e00c      	b.n	800531c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005302:	f7fc fa15 	bl	8001730 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	2b02      	cmp	r3, #2
 800530e:	d905      	bls.n	800531c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005310:	2303      	movs	r3, #3
 8005312:	e0ab      	b.n	800546c <HAL_RCC_OscConfig+0x610>
 8005314:	40021000 	.word	0x40021000
 8005318:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800531c:	4b55      	ldr	r3, [pc, #340]	; (8005474 <HAL_RCC_OscConfig+0x618>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d1ec      	bne.n	8005302 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005328:	4b52      	ldr	r3, [pc, #328]	; (8005474 <HAL_RCC_OscConfig+0x618>)
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	4b52      	ldr	r3, [pc, #328]	; (8005478 <HAL_RCC_OscConfig+0x61c>)
 800532e:	4013      	ands	r3, r2
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6a11      	ldr	r1, [r2, #32]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005338:	3a01      	subs	r2, #1
 800533a:	0112      	lsls	r2, r2, #4
 800533c:	4311      	orrs	r1, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005342:	0212      	lsls	r2, r2, #8
 8005344:	4311      	orrs	r1, r2
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800534a:	0852      	lsrs	r2, r2, #1
 800534c:	3a01      	subs	r2, #1
 800534e:	0552      	lsls	r2, r2, #21
 8005350:	4311      	orrs	r1, r2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005356:	0852      	lsrs	r2, r2, #1
 8005358:	3a01      	subs	r2, #1
 800535a:	0652      	lsls	r2, r2, #25
 800535c:	4311      	orrs	r1, r2
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005362:	06d2      	lsls	r2, r2, #27
 8005364:	430a      	orrs	r2, r1
 8005366:	4943      	ldr	r1, [pc, #268]	; (8005474 <HAL_RCC_OscConfig+0x618>)
 8005368:	4313      	orrs	r3, r2
 800536a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800536c:	4b41      	ldr	r3, [pc, #260]	; (8005474 <HAL_RCC_OscConfig+0x618>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a40      	ldr	r2, [pc, #256]	; (8005474 <HAL_RCC_OscConfig+0x618>)
 8005372:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005376:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005378:	4b3e      	ldr	r3, [pc, #248]	; (8005474 <HAL_RCC_OscConfig+0x618>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	4a3d      	ldr	r2, [pc, #244]	; (8005474 <HAL_RCC_OscConfig+0x618>)
 800537e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005382:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005384:	f7fc f9d4 	bl	8001730 <HAL_GetTick>
 8005388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800538a:	e008      	b.n	800539e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800538c:	f7fc f9d0 	bl	8001730 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	2b02      	cmp	r3, #2
 8005398:	d901      	bls.n	800539e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800539a:	2303      	movs	r3, #3
 800539c:	e066      	b.n	800546c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800539e:	4b35      	ldr	r3, [pc, #212]	; (8005474 <HAL_RCC_OscConfig+0x618>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d0f0      	beq.n	800538c <HAL_RCC_OscConfig+0x530>
 80053aa:	e05e      	b.n	800546a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053ac:	4b31      	ldr	r3, [pc, #196]	; (8005474 <HAL_RCC_OscConfig+0x618>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a30      	ldr	r2, [pc, #192]	; (8005474 <HAL_RCC_OscConfig+0x618>)
 80053b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b8:	f7fc f9ba 	bl	8001730 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053c0:	f7fc f9b6 	bl	8001730 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e04c      	b.n	800546c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053d2:	4b28      	ldr	r3, [pc, #160]	; (8005474 <HAL_RCC_OscConfig+0x618>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1f0      	bne.n	80053c0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80053de:	4b25      	ldr	r3, [pc, #148]	; (8005474 <HAL_RCC_OscConfig+0x618>)
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	4924      	ldr	r1, [pc, #144]	; (8005474 <HAL_RCC_OscConfig+0x618>)
 80053e4:	4b25      	ldr	r3, [pc, #148]	; (800547c <HAL_RCC_OscConfig+0x620>)
 80053e6:	4013      	ands	r3, r2
 80053e8:	60cb      	str	r3, [r1, #12]
 80053ea:	e03e      	b.n	800546a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e039      	b.n	800546c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80053f8:	4b1e      	ldr	r3, [pc, #120]	; (8005474 <HAL_RCC_OscConfig+0x618>)
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80053fe:	697b      	ldr	r3, [r7, #20]
 8005400:	f003 0203 	and.w	r2, r3, #3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	429a      	cmp	r2, r3
 800540a:	d12c      	bne.n	8005466 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005416:	3b01      	subs	r3, #1
 8005418:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800541a:	429a      	cmp	r2, r3
 800541c:	d123      	bne.n	8005466 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005428:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800542a:	429a      	cmp	r2, r3
 800542c:	d11b      	bne.n	8005466 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800543a:	429a      	cmp	r2, r3
 800543c:	d113      	bne.n	8005466 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005448:	085b      	lsrs	r3, r3, #1
 800544a:	3b01      	subs	r3, #1
 800544c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800544e:	429a      	cmp	r2, r3
 8005450:	d109      	bne.n	8005466 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545c:	085b      	lsrs	r3, r3, #1
 800545e:	3b01      	subs	r3, #1
 8005460:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005462:	429a      	cmp	r2, r3
 8005464:	d001      	beq.n	800546a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e000      	b.n	800546c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3720      	adds	r7, #32
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	40021000 	.word	0x40021000
 8005478:	019f800c 	.word	0x019f800c
 800547c:	feeefffc 	.word	0xfeeefffc

08005480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800548a:	2300      	movs	r3, #0
 800548c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d101      	bne.n	8005498 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e11e      	b.n	80056d6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005498:	4b91      	ldr	r3, [pc, #580]	; (80056e0 <HAL_RCC_ClockConfig+0x260>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 030f 	and.w	r3, r3, #15
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d910      	bls.n	80054c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a6:	4b8e      	ldr	r3, [pc, #568]	; (80056e0 <HAL_RCC_ClockConfig+0x260>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f023 020f 	bic.w	r2, r3, #15
 80054ae:	498c      	ldr	r1, [pc, #560]	; (80056e0 <HAL_RCC_ClockConfig+0x260>)
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b6:	4b8a      	ldr	r3, [pc, #552]	; (80056e0 <HAL_RCC_ClockConfig+0x260>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	683a      	ldr	r2, [r7, #0]
 80054c0:	429a      	cmp	r2, r3
 80054c2:	d001      	beq.n	80054c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e106      	b.n	80056d6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d073      	beq.n	80055bc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	2b03      	cmp	r3, #3
 80054da:	d129      	bne.n	8005530 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80054dc:	4b81      	ldr	r3, [pc, #516]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e0f4      	b.n	80056d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80054ec:	f000 f99e 	bl	800582c <RCC_GetSysClockFreqFromPLLSource>
 80054f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80054f2:	693b      	ldr	r3, [r7, #16]
 80054f4:	4a7c      	ldr	r2, [pc, #496]	; (80056e8 <HAL_RCC_ClockConfig+0x268>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d93f      	bls.n	800557a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80054fa:	4b7a      	ldr	r3, [pc, #488]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d009      	beq.n	800551a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800550e:	2b00      	cmp	r3, #0
 8005510:	d033      	beq.n	800557a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005516:	2b00      	cmp	r3, #0
 8005518:	d12f      	bne.n	800557a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800551a:	4b72      	ldr	r3, [pc, #456]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005522:	4a70      	ldr	r2, [pc, #448]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 8005524:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005528:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800552a:	2380      	movs	r3, #128	; 0x80
 800552c:	617b      	str	r3, [r7, #20]
 800552e:	e024      	b.n	800557a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	2b02      	cmp	r3, #2
 8005536:	d107      	bne.n	8005548 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005538:	4b6a      	ldr	r3, [pc, #424]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d109      	bne.n	8005558 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e0c6      	b.n	80056d6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005548:	4b66      	ldr	r3, [pc, #408]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005550:	2b00      	cmp	r3, #0
 8005552:	d101      	bne.n	8005558 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005554:	2301      	movs	r3, #1
 8005556:	e0be      	b.n	80056d6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005558:	f000 f8ce 	bl	80056f8 <HAL_RCC_GetSysClockFreq>
 800555c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	4a61      	ldr	r2, [pc, #388]	; (80056e8 <HAL_RCC_ClockConfig+0x268>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d909      	bls.n	800557a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005566:	4b5f      	ldr	r3, [pc, #380]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800556e:	4a5d      	ldr	r2, [pc, #372]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 8005570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005574:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005576:	2380      	movs	r3, #128	; 0x80
 8005578:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800557a:	4b5a      	ldr	r3, [pc, #360]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	f023 0203 	bic.w	r2, r3, #3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	4957      	ldr	r1, [pc, #348]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 8005588:	4313      	orrs	r3, r2
 800558a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800558c:	f7fc f8d0 	bl	8001730 <HAL_GetTick>
 8005590:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005592:	e00a      	b.n	80055aa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005594:	f7fc f8cc 	bl	8001730 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	f241 3288 	movw	r2, #5000	; 0x1388
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e095      	b.n	80056d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055aa:	4b4e      	ldr	r3, [pc, #312]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	f003 020c 	and.w	r2, r3, #12
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d1eb      	bne.n	8005594 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0302 	and.w	r3, r3, #2
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d023      	beq.n	8005610 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0304 	and.w	r3, r3, #4
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055d4:	4b43      	ldr	r3, [pc, #268]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	4a42      	ldr	r2, [pc, #264]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 80055da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80055de:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0308 	and.w	r3, r3, #8
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d007      	beq.n	80055fc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80055ec:	4b3d      	ldr	r3, [pc, #244]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80055f4:	4a3b      	ldr	r2, [pc, #236]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 80055f6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80055fa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055fc:	4b39      	ldr	r3, [pc, #228]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 80055fe:	689b      	ldr	r3, [r3, #8]
 8005600:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	4936      	ldr	r1, [pc, #216]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 800560a:	4313      	orrs	r3, r2
 800560c:	608b      	str	r3, [r1, #8]
 800560e:	e008      	b.n	8005622 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	2b80      	cmp	r3, #128	; 0x80
 8005614:	d105      	bne.n	8005622 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005616:	4b33      	ldr	r3, [pc, #204]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 8005618:	689b      	ldr	r3, [r3, #8]
 800561a:	4a32      	ldr	r2, [pc, #200]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 800561c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005620:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005622:	4b2f      	ldr	r3, [pc, #188]	; (80056e0 <HAL_RCC_ClockConfig+0x260>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 030f 	and.w	r3, r3, #15
 800562a:	683a      	ldr	r2, [r7, #0]
 800562c:	429a      	cmp	r2, r3
 800562e:	d21d      	bcs.n	800566c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005630:	4b2b      	ldr	r3, [pc, #172]	; (80056e0 <HAL_RCC_ClockConfig+0x260>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f023 020f 	bic.w	r2, r3, #15
 8005638:	4929      	ldr	r1, [pc, #164]	; (80056e0 <HAL_RCC_ClockConfig+0x260>)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	4313      	orrs	r3, r2
 800563e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005640:	f7fc f876 	bl	8001730 <HAL_GetTick>
 8005644:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005646:	e00a      	b.n	800565e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005648:	f7fc f872 	bl	8001730 <HAL_GetTick>
 800564c:	4602      	mov	r2, r0
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	f241 3288 	movw	r2, #5000	; 0x1388
 8005656:	4293      	cmp	r3, r2
 8005658:	d901      	bls.n	800565e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800565a:	2303      	movs	r3, #3
 800565c:	e03b      	b.n	80056d6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800565e:	4b20      	ldr	r3, [pc, #128]	; (80056e0 <HAL_RCC_ClockConfig+0x260>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	429a      	cmp	r2, r3
 800566a:	d1ed      	bne.n	8005648 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0304 	and.w	r3, r3, #4
 8005674:	2b00      	cmp	r3, #0
 8005676:	d008      	beq.n	800568a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005678:	4b1a      	ldr	r3, [pc, #104]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	4917      	ldr	r1, [pc, #92]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 8005686:	4313      	orrs	r3, r2
 8005688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0308 	and.w	r3, r3, #8
 8005692:	2b00      	cmp	r3, #0
 8005694:	d009      	beq.n	80056aa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005696:	4b13      	ldr	r3, [pc, #76]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	00db      	lsls	r3, r3, #3
 80056a4:	490f      	ldr	r1, [pc, #60]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 80056a6:	4313      	orrs	r3, r2
 80056a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056aa:	f000 f825 	bl	80056f8 <HAL_RCC_GetSysClockFreq>
 80056ae:	4602      	mov	r2, r0
 80056b0:	4b0c      	ldr	r3, [pc, #48]	; (80056e4 <HAL_RCC_ClockConfig+0x264>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	091b      	lsrs	r3, r3, #4
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	490c      	ldr	r1, [pc, #48]	; (80056ec <HAL_RCC_ClockConfig+0x26c>)
 80056bc:	5ccb      	ldrb	r3, [r1, r3]
 80056be:	f003 031f 	and.w	r3, r3, #31
 80056c2:	fa22 f303 	lsr.w	r3, r2, r3
 80056c6:	4a0a      	ldr	r2, [pc, #40]	; (80056f0 <HAL_RCC_ClockConfig+0x270>)
 80056c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80056ca:	4b0a      	ldr	r3, [pc, #40]	; (80056f4 <HAL_RCC_ClockConfig+0x274>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fb ffe2 	bl	8001698 <HAL_InitTick>
 80056d4:	4603      	mov	r3, r0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3718      	adds	r7, #24
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	40022000 	.word	0x40022000
 80056e4:	40021000 	.word	0x40021000
 80056e8:	04c4b400 	.word	0x04c4b400
 80056ec:	0800c11c 	.word	0x0800c11c
 80056f0:	20000008 	.word	0x20000008
 80056f4:	2000000c 	.word	0x2000000c

080056f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80056fe:	4b2c      	ldr	r3, [pc, #176]	; (80057b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 030c 	and.w	r3, r3, #12
 8005706:	2b04      	cmp	r3, #4
 8005708:	d102      	bne.n	8005710 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800570a:	4b2a      	ldr	r3, [pc, #168]	; (80057b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800570c:	613b      	str	r3, [r7, #16]
 800570e:	e047      	b.n	80057a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005710:	4b27      	ldr	r3, [pc, #156]	; (80057b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	f003 030c 	and.w	r3, r3, #12
 8005718:	2b08      	cmp	r3, #8
 800571a:	d102      	bne.n	8005722 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800571c:	4b26      	ldr	r3, [pc, #152]	; (80057b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800571e:	613b      	str	r3, [r7, #16]
 8005720:	e03e      	b.n	80057a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005722:	4b23      	ldr	r3, [pc, #140]	; (80057b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f003 030c 	and.w	r3, r3, #12
 800572a:	2b0c      	cmp	r3, #12
 800572c:	d136      	bne.n	800579c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800572e:	4b20      	ldr	r3, [pc, #128]	; (80057b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	f003 0303 	and.w	r3, r3, #3
 8005736:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005738:	4b1d      	ldr	r3, [pc, #116]	; (80057b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800573a:	68db      	ldr	r3, [r3, #12]
 800573c:	091b      	lsrs	r3, r3, #4
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	3301      	adds	r3, #1
 8005744:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b03      	cmp	r3, #3
 800574a:	d10c      	bne.n	8005766 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800574c:	4a1a      	ldr	r2, [pc, #104]	; (80057b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	fbb2 f3f3 	udiv	r3, r2, r3
 8005754:	4a16      	ldr	r2, [pc, #88]	; (80057b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005756:	68d2      	ldr	r2, [r2, #12]
 8005758:	0a12      	lsrs	r2, r2, #8
 800575a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800575e:	fb02 f303 	mul.w	r3, r2, r3
 8005762:	617b      	str	r3, [r7, #20]
      break;
 8005764:	e00c      	b.n	8005780 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005766:	4a13      	ldr	r2, [pc, #76]	; (80057b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	fbb2 f3f3 	udiv	r3, r2, r3
 800576e:	4a10      	ldr	r2, [pc, #64]	; (80057b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005770:	68d2      	ldr	r2, [r2, #12]
 8005772:	0a12      	lsrs	r2, r2, #8
 8005774:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005778:	fb02 f303 	mul.w	r3, r2, r3
 800577c:	617b      	str	r3, [r7, #20]
      break;
 800577e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005780:	4b0b      	ldr	r3, [pc, #44]	; (80057b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005782:	68db      	ldr	r3, [r3, #12]
 8005784:	0e5b      	lsrs	r3, r3, #25
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	3301      	adds	r3, #1
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005790:	697a      	ldr	r2, [r7, #20]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	fbb2 f3f3 	udiv	r3, r2, r3
 8005798:	613b      	str	r3, [r7, #16]
 800579a:	e001      	b.n	80057a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800579c:	2300      	movs	r3, #0
 800579e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80057a0:	693b      	ldr	r3, [r7, #16]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	371c      	adds	r7, #28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	40021000 	.word	0x40021000
 80057b4:	00f42400 	.word	0x00f42400
 80057b8:	016e3600 	.word	0x016e3600

080057bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057c0:	4b03      	ldr	r3, [pc, #12]	; (80057d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80057c2:	681b      	ldr	r3, [r3, #0]
}
 80057c4:	4618      	mov	r0, r3
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop
 80057d0:	20000008 	.word	0x20000008

080057d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80057d8:	f7ff fff0 	bl	80057bc <HAL_RCC_GetHCLKFreq>
 80057dc:	4602      	mov	r2, r0
 80057de:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	0a1b      	lsrs	r3, r3, #8
 80057e4:	f003 0307 	and.w	r3, r3, #7
 80057e8:	4904      	ldr	r1, [pc, #16]	; (80057fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80057ea:	5ccb      	ldrb	r3, [r1, r3]
 80057ec:	f003 031f 	and.w	r3, r3, #31
 80057f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80057f4:	4618      	mov	r0, r3
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	40021000 	.word	0x40021000
 80057fc:	0800c12c 	.word	0x0800c12c

08005800 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005804:	f7ff ffda 	bl	80057bc <HAL_RCC_GetHCLKFreq>
 8005808:	4602      	mov	r2, r0
 800580a:	4b06      	ldr	r3, [pc, #24]	; (8005824 <HAL_RCC_GetPCLK2Freq+0x24>)
 800580c:	689b      	ldr	r3, [r3, #8]
 800580e:	0adb      	lsrs	r3, r3, #11
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	4904      	ldr	r1, [pc, #16]	; (8005828 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005816:	5ccb      	ldrb	r3, [r1, r3]
 8005818:	f003 031f 	and.w	r3, r3, #31
 800581c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005820:	4618      	mov	r0, r3
 8005822:	bd80      	pop	{r7, pc}
 8005824:	40021000 	.word	0x40021000
 8005828:	0800c12c 	.word	0x0800c12c

0800582c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005832:	4b1e      	ldr	r3, [pc, #120]	; (80058ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005834:	68db      	ldr	r3, [r3, #12]
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800583c:	4b1b      	ldr	r3, [pc, #108]	; (80058ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	091b      	lsrs	r3, r3, #4
 8005842:	f003 030f 	and.w	r3, r3, #15
 8005846:	3301      	adds	r3, #1
 8005848:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	2b03      	cmp	r3, #3
 800584e:	d10c      	bne.n	800586a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005850:	4a17      	ldr	r2, [pc, #92]	; (80058b0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	fbb2 f3f3 	udiv	r3, r2, r3
 8005858:	4a14      	ldr	r2, [pc, #80]	; (80058ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800585a:	68d2      	ldr	r2, [r2, #12]
 800585c:	0a12      	lsrs	r2, r2, #8
 800585e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005862:	fb02 f303 	mul.w	r3, r2, r3
 8005866:	617b      	str	r3, [r7, #20]
    break;
 8005868:	e00c      	b.n	8005884 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800586a:	4a12      	ldr	r2, [pc, #72]	; (80058b4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005872:	4a0e      	ldr	r2, [pc, #56]	; (80058ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005874:	68d2      	ldr	r2, [r2, #12]
 8005876:	0a12      	lsrs	r2, r2, #8
 8005878:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800587c:	fb02 f303 	mul.w	r3, r2, r3
 8005880:	617b      	str	r3, [r7, #20]
    break;
 8005882:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005884:	4b09      	ldr	r3, [pc, #36]	; (80058ac <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	0e5b      	lsrs	r3, r3, #25
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	3301      	adds	r3, #1
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005894:	697a      	ldr	r2, [r7, #20]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	fbb2 f3f3 	udiv	r3, r2, r3
 800589c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800589e:	687b      	ldr	r3, [r7, #4]
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	371c      	adds	r7, #28
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr
 80058ac:	40021000 	.word	0x40021000
 80058b0:	016e3600 	.word	0x016e3600
 80058b4:	00f42400 	.word	0x00f42400

080058b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b086      	sub	sp, #24
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80058c0:	2300      	movs	r3, #0
 80058c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80058c4:	2300      	movs	r3, #0
 80058c6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	f000 8098 	beq.w	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80058d6:	2300      	movs	r3, #0
 80058d8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058da:	4b43      	ldr	r3, [pc, #268]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d10d      	bne.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058e6:	4b40      	ldr	r3, [pc, #256]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ea:	4a3f      	ldr	r2, [pc, #252]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058f0:	6593      	str	r3, [r2, #88]	; 0x58
 80058f2:	4b3d      	ldr	r3, [pc, #244]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058fa:	60bb      	str	r3, [r7, #8]
 80058fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058fe:	2301      	movs	r3, #1
 8005900:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005902:	4b3a      	ldr	r3, [pc, #232]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a39      	ldr	r2, [pc, #228]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005908:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800590c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800590e:	f7fb ff0f 	bl	8001730 <HAL_GetTick>
 8005912:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005914:	e009      	b.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005916:	f7fb ff0b 	bl	8001730 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	2b02      	cmp	r3, #2
 8005922:	d902      	bls.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	74fb      	strb	r3, [r7, #19]
        break;
 8005928:	e005      	b.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800592a:	4b30      	ldr	r3, [pc, #192]	; (80059ec <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005932:	2b00      	cmp	r3, #0
 8005934:	d0ef      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005936:	7cfb      	ldrb	r3, [r7, #19]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d159      	bne.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800593c:	4b2a      	ldr	r3, [pc, #168]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800593e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005942:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005946:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d01e      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	429a      	cmp	r2, r3
 8005956:	d019      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005958:	4b23      	ldr	r3, [pc, #140]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800595a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800595e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005962:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005964:	4b20      	ldr	r3, [pc, #128]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596a:	4a1f      	ldr	r2, [pc, #124]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800596c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005974:	4b1c      	ldr	r3, [pc, #112]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800597a:	4a1b      	ldr	r2, [pc, #108]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800597c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005980:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005984:	4a18      	ldr	r2, [pc, #96]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	f003 0301 	and.w	r3, r3, #1
 8005992:	2b00      	cmp	r3, #0
 8005994:	d016      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005996:	f7fb fecb 	bl	8001730 <HAL_GetTick>
 800599a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800599c:	e00b      	b.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800599e:	f7fb fec7 	bl	8001730 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d902      	bls.n	80059b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	74fb      	strb	r3, [r7, #19]
            break;
 80059b4:	e006      	b.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059b6:	4b0c      	ldr	r3, [pc, #48]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d0ec      	beq.n	800599e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80059c4:	7cfb      	ldrb	r3, [r7, #19]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10b      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80059ca:	4b07      	ldr	r3, [pc, #28]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059d8:	4903      	ldr	r1, [pc, #12]	; (80059e8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80059e0:	e008      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059e2:	7cfb      	ldrb	r3, [r7, #19]
 80059e4:	74bb      	strb	r3, [r7, #18]
 80059e6:	e005      	b.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80059e8:	40021000 	.word	0x40021000
 80059ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059f0:	7cfb      	ldrb	r3, [r7, #19]
 80059f2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059f4:	7c7b      	ldrb	r3, [r7, #17]
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d105      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059fa:	4ba7      	ldr	r3, [pc, #668]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059fe:	4aa6      	ldr	r2, [pc, #664]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f003 0301 	and.w	r3, r3, #1
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005a12:	4ba1      	ldr	r3, [pc, #644]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a18:	f023 0203 	bic.w	r2, r3, #3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	499d      	ldr	r1, [pc, #628]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0302 	and.w	r3, r3, #2
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00a      	beq.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005a34:	4b98      	ldr	r3, [pc, #608]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3a:	f023 020c 	bic.w	r2, r3, #12
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	4995      	ldr	r1, [pc, #596]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a44:	4313      	orrs	r3, r2
 8005a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0304 	and.w	r3, r3, #4
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00a      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a56:	4b90      	ldr	r3, [pc, #576]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	68db      	ldr	r3, [r3, #12]
 8005a64:	498c      	ldr	r1, [pc, #560]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0308 	and.w	r3, r3, #8
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00a      	beq.n	8005a8e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a78:	4b87      	ldr	r3, [pc, #540]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	4984      	ldr	r1, [pc, #528]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00a      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a9a:	4b7f      	ldr	r3, [pc, #508]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	497b      	ldr	r1, [pc, #492]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f003 0320 	and.w	r3, r3, #32
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00a      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005abc:	4b76      	ldr	r3, [pc, #472]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	4973      	ldr	r1, [pc, #460]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00a      	beq.n	8005af4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ade:	4b6e      	ldr	r3, [pc, #440]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	496a      	ldr	r1, [pc, #424]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00a      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b00:	4b65      	ldr	r3, [pc, #404]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b06:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	4962      	ldr	r1, [pc, #392]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d00a      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b22:	4b5d      	ldr	r3, [pc, #372]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b30:	4959      	ldr	r1, [pc, #356]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00a      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005b44:	4b54      	ldr	r3, [pc, #336]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b4a:	f023 0203 	bic.w	r2, r3, #3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b52:	4951      	ldr	r1, [pc, #324]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00a      	beq.n	8005b7c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b66:	4b4c      	ldr	r3, [pc, #304]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b74:	4948      	ldr	r1, [pc, #288]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d015      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005b88:	4b43      	ldr	r3, [pc, #268]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b96:	4940      	ldr	r1, [pc, #256]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ba6:	d105      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ba8:	4b3b      	ldr	r3, [pc, #236]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	4a3a      	ldr	r2, [pc, #232]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bb2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d015      	beq.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005bc0:	4b35      	ldr	r3, [pc, #212]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bce:	4932      	ldr	r1, [pc, #200]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bde:	d105      	bne.n	8005bec <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005be0:	4b2d      	ldr	r3, [pc, #180]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	4a2c      	ldr	r2, [pc, #176]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bea:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d015      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005bf8:	4b27      	ldr	r3, [pc, #156]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfe:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	4924      	ldr	r1, [pc, #144]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c16:	d105      	bne.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c18:	4b1f      	ldr	r3, [pc, #124]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	4a1e      	ldr	r2, [pc, #120]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c22:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d015      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005c30:	4b19      	ldr	r3, [pc, #100]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c3e:	4916      	ldr	r1, [pc, #88]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c40:	4313      	orrs	r3, r2
 8005c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c4e:	d105      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c50:	4b11      	ldr	r3, [pc, #68]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	4a10      	ldr	r2, [pc, #64]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c5a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d019      	beq.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c68:	4b0b      	ldr	r3, [pc, #44]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c76:	4908      	ldr	r1, [pc, #32]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c86:	d109      	bne.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c88:	4b03      	ldr	r3, [pc, #12]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	4a02      	ldr	r2, [pc, #8]	; (8005c98 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c92:	60d3      	str	r3, [r2, #12]
 8005c94:	e002      	b.n	8005c9c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005c96:	bf00      	nop
 8005c98:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d015      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005ca8:	4b29      	ldr	r3, [pc, #164]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cb6:	4926      	ldr	r1, [pc, #152]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005cc6:	d105      	bne.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005cc8:	4b21      	ldr	r3, [pc, #132]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	4a20      	ldr	r2, [pc, #128]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cd2:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d015      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005ce0:	4b1b      	ldr	r3, [pc, #108]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ce6:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cee:	4918      	ldr	r1, [pc, #96]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfe:	d105      	bne.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d00:	4b13      	ldr	r3, [pc, #76]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d02:	68db      	ldr	r3, [r3, #12]
 8005d04:	4a12      	ldr	r2, [pc, #72]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d0a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d015      	beq.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005d18:	4b0d      	ldr	r3, [pc, #52]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d1e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d26:	490a      	ldr	r1, [pc, #40]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005d36:	d105      	bne.n	8005d44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d38:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	4a04      	ldr	r2, [pc, #16]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d42:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005d44:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3718      	adds	r7, #24
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
 8005d4e:	bf00      	nop
 8005d50:	40021000 	.word	0x40021000

08005d54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d101      	bne.n	8005d66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	e049      	b.n	8005dfa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d106      	bne.n	8005d80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fb fb84 	bl	8001488 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2202      	movs	r2, #2
 8005d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	3304      	adds	r3, #4
 8005d90:	4619      	mov	r1, r3
 8005d92:	4610      	mov	r0, r2
 8005d94:	f000 fb74 	bl	8006480 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3708      	adds	r7, #8
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
	...

08005e04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b085      	sub	sp, #20
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b01      	cmp	r3, #1
 8005e16:	d001      	beq.n	8005e1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e054      	b.n	8005ec6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68da      	ldr	r2, [r3, #12]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f042 0201 	orr.w	r2, r2, #1
 8005e32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a26      	ldr	r2, [pc, #152]	; (8005ed4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d022      	beq.n	8005e84 <HAL_TIM_Base_Start_IT+0x80>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e46:	d01d      	beq.n	8005e84 <HAL_TIM_Base_Start_IT+0x80>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a22      	ldr	r2, [pc, #136]	; (8005ed8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d018      	beq.n	8005e84 <HAL_TIM_Base_Start_IT+0x80>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a21      	ldr	r2, [pc, #132]	; (8005edc <HAL_TIM_Base_Start_IT+0xd8>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d013      	beq.n	8005e84 <HAL_TIM_Base_Start_IT+0x80>
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4a1f      	ldr	r2, [pc, #124]	; (8005ee0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d00e      	beq.n	8005e84 <HAL_TIM_Base_Start_IT+0x80>
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a1e      	ldr	r2, [pc, #120]	; (8005ee4 <HAL_TIM_Base_Start_IT+0xe0>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d009      	beq.n	8005e84 <HAL_TIM_Base_Start_IT+0x80>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1c      	ldr	r2, [pc, #112]	; (8005ee8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d004      	beq.n	8005e84 <HAL_TIM_Base_Start_IT+0x80>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a1b      	ldr	r2, [pc, #108]	; (8005eec <HAL_TIM_Base_Start_IT+0xe8>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d115      	bne.n	8005eb0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689a      	ldr	r2, [r3, #8]
 8005e8a:	4b19      	ldr	r3, [pc, #100]	; (8005ef0 <HAL_TIM_Base_Start_IT+0xec>)
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2b06      	cmp	r3, #6
 8005e94:	d015      	beq.n	8005ec2 <HAL_TIM_Base_Start_IT+0xbe>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e9c:	d011      	beq.n	8005ec2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f042 0201 	orr.w	r2, r2, #1
 8005eac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eae:	e008      	b.n	8005ec2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0201 	orr.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	e000      	b.n	8005ec4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
}
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	3714      	adds	r7, #20
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	40012c00 	.word	0x40012c00
 8005ed8:	40000400 	.word	0x40000400
 8005edc:	40000800 	.word	0x40000800
 8005ee0:	40000c00 	.word	0x40000c00
 8005ee4:	40013400 	.word	0x40013400
 8005ee8:	40014000 	.word	0x40014000
 8005eec:	40015000 	.word	0x40015000
 8005ef0:	00010007 	.word	0x00010007

08005ef4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0201 	bic.w	r2, r2, #1
 8005f0a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6a1a      	ldr	r2, [r3, #32]
 8005f12:	f241 1311 	movw	r3, #4369	; 0x1111
 8005f16:	4013      	ands	r3, r2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d10f      	bne.n	8005f3c <HAL_TIM_Base_Stop_IT+0x48>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6a1a      	ldr	r2, [r3, #32]
 8005f22:	f244 4344 	movw	r3, #17476	; 0x4444
 8005f26:	4013      	ands	r3, r2
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d107      	bne.n	8005f3c <HAL_TIM_Base_Stop_IT+0x48>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f022 0201 	bic.w	r2, r2, #1
 8005f3a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005f44:	2300      	movs	r3, #0
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr

08005f52 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b084      	sub	sp, #16
 8005f56:	af00      	add	r7, sp, #0
 8005f58:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	691b      	ldr	r3, [r3, #16]
 8005f68:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	f003 0302 	and.w	r3, r3, #2
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d020      	beq.n	8005fb6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d01b      	beq.n	8005fb6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f06f 0202 	mvn.w	r2, #2
 8005f86:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	f003 0303 	and.w	r3, r3, #3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d003      	beq.n	8005fa4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 fa51 	bl	8006444 <HAL_TIM_IC_CaptureCallback>
 8005fa2:	e005      	b.n	8005fb0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 fa43 	bl	8006430 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fa54 	bl	8006458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	f003 0304 	and.w	r3, r3, #4
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d020      	beq.n	8006002 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d01b      	beq.n	8006002 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f06f 0204 	mvn.w	r2, #4
 8005fd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	699b      	ldr	r3, [r3, #24]
 8005fe0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d003      	beq.n	8005ff0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 fa2b 	bl	8006444 <HAL_TIM_IC_CaptureCallback>
 8005fee:	e005      	b.n	8005ffc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fa1d 	bl	8006430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fa2e 	bl	8006458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	f003 0308 	and.w	r3, r3, #8
 8006008:	2b00      	cmp	r3, #0
 800600a:	d020      	beq.n	800604e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f003 0308 	and.w	r3, r3, #8
 8006012:	2b00      	cmp	r3, #0
 8006014:	d01b      	beq.n	800604e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f06f 0208 	mvn.w	r2, #8
 800601e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2204      	movs	r2, #4
 8006024:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	69db      	ldr	r3, [r3, #28]
 800602c:	f003 0303 	and.w	r3, r3, #3
 8006030:	2b00      	cmp	r3, #0
 8006032:	d003      	beq.n	800603c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fa05 	bl	8006444 <HAL_TIM_IC_CaptureCallback>
 800603a:	e005      	b.n	8006048 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f9f7 	bl	8006430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fa08 	bl	8006458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	f003 0310 	and.w	r3, r3, #16
 8006054:	2b00      	cmp	r3, #0
 8006056:	d020      	beq.n	800609a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f003 0310 	and.w	r3, r3, #16
 800605e:	2b00      	cmp	r3, #0
 8006060:	d01b      	beq.n	800609a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f06f 0210 	mvn.w	r2, #16
 800606a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2208      	movs	r2, #8
 8006070:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	69db      	ldr	r3, [r3, #28]
 8006078:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 f9df 	bl	8006444 <HAL_TIM_IC_CaptureCallback>
 8006086:	e005      	b.n	8006094 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f000 f9d1 	bl	8006430 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f9e2 	bl	8006458 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	2200      	movs	r2, #0
 8006098:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00c      	beq.n	80060be <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d007      	beq.n	80060be <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f06f 0201 	mvn.w	r2, #1
 80060b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 f9af 	bl	800641c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d104      	bne.n	80060d2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00c      	beq.n	80060ec <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d007      	beq.n	80060ec <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80060e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fbba 	bl	8006860 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00c      	beq.n	8006110 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d007      	beq.n	8006110 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 fbb2 	bl	8006874 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00c      	beq.n	8006134 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006120:	2b00      	cmp	r3, #0
 8006122:	d007      	beq.n	8006134 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800612c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f99c 	bl	800646c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	f003 0320 	and.w	r3, r3, #32
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00c      	beq.n	8006158 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	f003 0320 	and.w	r3, r3, #32
 8006144:	2b00      	cmp	r3, #0
 8006146:	d007      	beq.n	8006158 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f06f 0220 	mvn.w	r2, #32
 8006150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 fb7a 	bl	800684c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d00c      	beq.n	800617c <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d007      	beq.n	800617c <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fb86 	bl	8006888 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00c      	beq.n	80061a0 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800618c:	2b00      	cmp	r3, #0
 800618e:	d007      	beq.n	80061a0 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fb7e 	bl	800689c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00c      	beq.n	80061c4 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d007      	beq.n	80061c4 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80061bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fb76 	bl	80068b0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00c      	beq.n	80061e8 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d007      	beq.n	80061e8 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80061e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 fb6e 	bl	80068c4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061e8:	bf00      	nop
 80061ea:	3710      	adds	r7, #16
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061fa:	2300      	movs	r3, #0
 80061fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_TIM_ConfigClockSource+0x1c>
 8006208:	2302      	movs	r3, #2
 800620a:	e0f6      	b.n	80063fa <HAL_TIM_ConfigClockSource+0x20a>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	689b      	ldr	r3, [r3, #8]
 8006222:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800622a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800622e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006236:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a6f      	ldr	r2, [pc, #444]	; (8006404 <HAL_TIM_ConfigClockSource+0x214>)
 8006246:	4293      	cmp	r3, r2
 8006248:	f000 80c1 	beq.w	80063ce <HAL_TIM_ConfigClockSource+0x1de>
 800624c:	4a6d      	ldr	r2, [pc, #436]	; (8006404 <HAL_TIM_ConfigClockSource+0x214>)
 800624e:	4293      	cmp	r3, r2
 8006250:	f200 80c6 	bhi.w	80063e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006254:	4a6c      	ldr	r2, [pc, #432]	; (8006408 <HAL_TIM_ConfigClockSource+0x218>)
 8006256:	4293      	cmp	r3, r2
 8006258:	f000 80b9 	beq.w	80063ce <HAL_TIM_ConfigClockSource+0x1de>
 800625c:	4a6a      	ldr	r2, [pc, #424]	; (8006408 <HAL_TIM_ConfigClockSource+0x218>)
 800625e:	4293      	cmp	r3, r2
 8006260:	f200 80be 	bhi.w	80063e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006264:	4a69      	ldr	r2, [pc, #420]	; (800640c <HAL_TIM_ConfigClockSource+0x21c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	f000 80b1 	beq.w	80063ce <HAL_TIM_ConfigClockSource+0x1de>
 800626c:	4a67      	ldr	r2, [pc, #412]	; (800640c <HAL_TIM_ConfigClockSource+0x21c>)
 800626e:	4293      	cmp	r3, r2
 8006270:	f200 80b6 	bhi.w	80063e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006274:	4a66      	ldr	r2, [pc, #408]	; (8006410 <HAL_TIM_ConfigClockSource+0x220>)
 8006276:	4293      	cmp	r3, r2
 8006278:	f000 80a9 	beq.w	80063ce <HAL_TIM_ConfigClockSource+0x1de>
 800627c:	4a64      	ldr	r2, [pc, #400]	; (8006410 <HAL_TIM_ConfigClockSource+0x220>)
 800627e:	4293      	cmp	r3, r2
 8006280:	f200 80ae 	bhi.w	80063e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006284:	4a63      	ldr	r2, [pc, #396]	; (8006414 <HAL_TIM_ConfigClockSource+0x224>)
 8006286:	4293      	cmp	r3, r2
 8006288:	f000 80a1 	beq.w	80063ce <HAL_TIM_ConfigClockSource+0x1de>
 800628c:	4a61      	ldr	r2, [pc, #388]	; (8006414 <HAL_TIM_ConfigClockSource+0x224>)
 800628e:	4293      	cmp	r3, r2
 8006290:	f200 80a6 	bhi.w	80063e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006294:	4a60      	ldr	r2, [pc, #384]	; (8006418 <HAL_TIM_ConfigClockSource+0x228>)
 8006296:	4293      	cmp	r3, r2
 8006298:	f000 8099 	beq.w	80063ce <HAL_TIM_ConfigClockSource+0x1de>
 800629c:	4a5e      	ldr	r2, [pc, #376]	; (8006418 <HAL_TIM_ConfigClockSource+0x228>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	f200 809e 	bhi.w	80063e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80062a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80062a8:	f000 8091 	beq.w	80063ce <HAL_TIM_ConfigClockSource+0x1de>
 80062ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80062b0:	f200 8096 	bhi.w	80063e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80062b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062b8:	f000 8089 	beq.w	80063ce <HAL_TIM_ConfigClockSource+0x1de>
 80062bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062c0:	f200 808e 	bhi.w	80063e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80062c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c8:	d03e      	beq.n	8006348 <HAL_TIM_ConfigClockSource+0x158>
 80062ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062ce:	f200 8087 	bhi.w	80063e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80062d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d6:	f000 8086 	beq.w	80063e6 <HAL_TIM_ConfigClockSource+0x1f6>
 80062da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062de:	d87f      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80062e0:	2b70      	cmp	r3, #112	; 0x70
 80062e2:	d01a      	beq.n	800631a <HAL_TIM_ConfigClockSource+0x12a>
 80062e4:	2b70      	cmp	r3, #112	; 0x70
 80062e6:	d87b      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80062e8:	2b60      	cmp	r3, #96	; 0x60
 80062ea:	d050      	beq.n	800638e <HAL_TIM_ConfigClockSource+0x19e>
 80062ec:	2b60      	cmp	r3, #96	; 0x60
 80062ee:	d877      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80062f0:	2b50      	cmp	r3, #80	; 0x50
 80062f2:	d03c      	beq.n	800636e <HAL_TIM_ConfigClockSource+0x17e>
 80062f4:	2b50      	cmp	r3, #80	; 0x50
 80062f6:	d873      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x1f0>
 80062f8:	2b40      	cmp	r3, #64	; 0x40
 80062fa:	d058      	beq.n	80063ae <HAL_TIM_ConfigClockSource+0x1be>
 80062fc:	2b40      	cmp	r3, #64	; 0x40
 80062fe:	d86f      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006300:	2b30      	cmp	r3, #48	; 0x30
 8006302:	d064      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x1de>
 8006304:	2b30      	cmp	r3, #48	; 0x30
 8006306:	d86b      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006308:	2b20      	cmp	r3, #32
 800630a:	d060      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x1de>
 800630c:	2b20      	cmp	r3, #32
 800630e:	d867      	bhi.n	80063e0 <HAL_TIM_ConfigClockSource+0x1f0>
 8006310:	2b00      	cmp	r3, #0
 8006312:	d05c      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x1de>
 8006314:	2b10      	cmp	r3, #16
 8006316:	d05a      	beq.n	80063ce <HAL_TIM_ConfigClockSource+0x1de>
 8006318:	e062      	b.n	80063e0 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800632a:	f000 f9d9 	bl	80066e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800633c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	609a      	str	r2, [r3, #8]
      break;
 8006346:	e04f      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006358:	f000 f9c2 	bl	80066e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800636a:	609a      	str	r2, [r3, #8]
      break;
 800636c:	e03c      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800637a:	461a      	mov	r2, r3
 800637c:	f000 f934 	bl	80065e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2150      	movs	r1, #80	; 0x50
 8006386:	4618      	mov	r0, r3
 8006388:	f000 f98d 	bl	80066a6 <TIM_ITRx_SetConfig>
      break;
 800638c:	e02c      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800639a:	461a      	mov	r2, r3
 800639c:	f000 f953 	bl	8006646 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	2160      	movs	r1, #96	; 0x60
 80063a6:	4618      	mov	r0, r3
 80063a8:	f000 f97d 	bl	80066a6 <TIM_ITRx_SetConfig>
      break;
 80063ac:	e01c      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80063ba:	461a      	mov	r2, r3
 80063bc:	f000 f914 	bl	80065e8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2140      	movs	r1, #64	; 0x40
 80063c6:	4618      	mov	r0, r3
 80063c8:	f000 f96d 	bl	80066a6 <TIM_ITRx_SetConfig>
      break;
 80063cc:	e00c      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4619      	mov	r1, r3
 80063d8:	4610      	mov	r0, r2
 80063da:	f000 f964 	bl	80066a6 <TIM_ITRx_SetConfig>
      break;
 80063de:	e003      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	73fb      	strb	r3, [r7, #15]
      break;
 80063e4:	e000      	b.n	80063e8 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80063e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3710      	adds	r7, #16
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
 8006402:	bf00      	nop
 8006404:	00100070 	.word	0x00100070
 8006408:	00100060 	.word	0x00100060
 800640c:	00100050 	.word	0x00100050
 8006410:	00100040 	.word	0x00100040
 8006414:	00100030 	.word	0x00100030
 8006418:	00100020 	.word	0x00100020

0800641c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006424:	bf00      	nop
 8006426:	370c      	adds	r7, #12
 8006428:	46bd      	mov	sp, r7
 800642a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642e:	4770      	bx	lr

08006430 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006438:	bf00      	nop
 800643a:	370c      	adds	r7, #12
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006480:	b480      	push	{r7}
 8006482:	b085      	sub	sp, #20
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a4c      	ldr	r2, [pc, #304]	; (80065c4 <TIM_Base_SetConfig+0x144>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d017      	beq.n	80064c8 <TIM_Base_SetConfig+0x48>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800649e:	d013      	beq.n	80064c8 <TIM_Base_SetConfig+0x48>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	4a49      	ldr	r2, [pc, #292]	; (80065c8 <TIM_Base_SetConfig+0x148>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00f      	beq.n	80064c8 <TIM_Base_SetConfig+0x48>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	4a48      	ldr	r2, [pc, #288]	; (80065cc <TIM_Base_SetConfig+0x14c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d00b      	beq.n	80064c8 <TIM_Base_SetConfig+0x48>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	4a47      	ldr	r2, [pc, #284]	; (80065d0 <TIM_Base_SetConfig+0x150>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d007      	beq.n	80064c8 <TIM_Base_SetConfig+0x48>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a46      	ldr	r2, [pc, #280]	; (80065d4 <TIM_Base_SetConfig+0x154>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d003      	beq.n	80064c8 <TIM_Base_SetConfig+0x48>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a45      	ldr	r2, [pc, #276]	; (80065d8 <TIM_Base_SetConfig+0x158>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d108      	bne.n	80064da <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a39      	ldr	r2, [pc, #228]	; (80065c4 <TIM_Base_SetConfig+0x144>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d023      	beq.n	800652a <TIM_Base_SetConfig+0xaa>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064e8:	d01f      	beq.n	800652a <TIM_Base_SetConfig+0xaa>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a36      	ldr	r2, [pc, #216]	; (80065c8 <TIM_Base_SetConfig+0x148>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d01b      	beq.n	800652a <TIM_Base_SetConfig+0xaa>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a35      	ldr	r2, [pc, #212]	; (80065cc <TIM_Base_SetConfig+0x14c>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d017      	beq.n	800652a <TIM_Base_SetConfig+0xaa>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a34      	ldr	r2, [pc, #208]	; (80065d0 <TIM_Base_SetConfig+0x150>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d013      	beq.n	800652a <TIM_Base_SetConfig+0xaa>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a33      	ldr	r2, [pc, #204]	; (80065d4 <TIM_Base_SetConfig+0x154>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d00f      	beq.n	800652a <TIM_Base_SetConfig+0xaa>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a33      	ldr	r2, [pc, #204]	; (80065dc <TIM_Base_SetConfig+0x15c>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00b      	beq.n	800652a <TIM_Base_SetConfig+0xaa>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a32      	ldr	r2, [pc, #200]	; (80065e0 <TIM_Base_SetConfig+0x160>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d007      	beq.n	800652a <TIM_Base_SetConfig+0xaa>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a31      	ldr	r2, [pc, #196]	; (80065e4 <TIM_Base_SetConfig+0x164>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d003      	beq.n	800652a <TIM_Base_SetConfig+0xaa>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a2c      	ldr	r2, [pc, #176]	; (80065d8 <TIM_Base_SetConfig+0x158>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d108      	bne.n	800653c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006530:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	68fa      	ldr	r2, [r7, #12]
 8006538:	4313      	orrs	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
 8006546:	4313      	orrs	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	689a      	ldr	r2, [r3, #8]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a18      	ldr	r2, [pc, #96]	; (80065c4 <TIM_Base_SetConfig+0x144>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d013      	beq.n	8006590 <TIM_Base_SetConfig+0x110>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a1a      	ldr	r2, [pc, #104]	; (80065d4 <TIM_Base_SetConfig+0x154>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d00f      	beq.n	8006590 <TIM_Base_SetConfig+0x110>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	4a1a      	ldr	r2, [pc, #104]	; (80065dc <TIM_Base_SetConfig+0x15c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d00b      	beq.n	8006590 <TIM_Base_SetConfig+0x110>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	4a19      	ldr	r2, [pc, #100]	; (80065e0 <TIM_Base_SetConfig+0x160>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d007      	beq.n	8006590 <TIM_Base_SetConfig+0x110>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a18      	ldr	r2, [pc, #96]	; (80065e4 <TIM_Base_SetConfig+0x164>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d003      	beq.n	8006590 <TIM_Base_SetConfig+0x110>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	4a13      	ldr	r2, [pc, #76]	; (80065d8 <TIM_Base_SetConfig+0x158>)
 800658c:	4293      	cmp	r3, r2
 800658e:	d103      	bne.n	8006598 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	691a      	ldr	r2, [r3, #16]
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2201      	movs	r2, #1
 800659c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d105      	bne.n	80065b6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	f023 0201 	bic.w	r2, r3, #1
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	611a      	str	r2, [r3, #16]
  }
}
 80065b6:	bf00      	nop
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	40012c00 	.word	0x40012c00
 80065c8:	40000400 	.word	0x40000400
 80065cc:	40000800 	.word	0x40000800
 80065d0:	40000c00 	.word	0x40000c00
 80065d4:	40013400 	.word	0x40013400
 80065d8:	40015000 	.word	0x40015000
 80065dc:	40014000 	.word	0x40014000
 80065e0:	40014400 	.word	0x40014400
 80065e4:	40014800 	.word	0x40014800

080065e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065e8:	b480      	push	{r7}
 80065ea:	b087      	sub	sp, #28
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	6a1b      	ldr	r3, [r3, #32]
 80065f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6a1b      	ldr	r3, [r3, #32]
 80065fe:	f023 0201 	bic.w	r2, r3, #1
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006612:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	011b      	lsls	r3, r3, #4
 8006618:	693a      	ldr	r2, [r7, #16]
 800661a:	4313      	orrs	r3, r2
 800661c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	f023 030a 	bic.w	r3, r3, #10
 8006624:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	4313      	orrs	r3, r2
 800662c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	697a      	ldr	r2, [r7, #20]
 8006638:	621a      	str	r2, [r3, #32]
}
 800663a:	bf00      	nop
 800663c:	371c      	adds	r7, #28
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006646:	b480      	push	{r7}
 8006648:	b087      	sub	sp, #28
 800664a:	af00      	add	r7, sp, #0
 800664c:	60f8      	str	r0, [r7, #12]
 800664e:	60b9      	str	r1, [r7, #8]
 8006650:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	6a1b      	ldr	r3, [r3, #32]
 8006656:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a1b      	ldr	r3, [r3, #32]
 800665c:	f023 0210 	bic.w	r2, r3, #16
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006670:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	031b      	lsls	r3, r3, #12
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	4313      	orrs	r3, r2
 800667a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006682:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	011b      	lsls	r3, r3, #4
 8006688:	697a      	ldr	r2, [r7, #20]
 800668a:	4313      	orrs	r3, r2
 800668c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	621a      	str	r2, [r3, #32]
}
 800669a:	bf00      	nop
 800669c:	371c      	adds	r7, #28
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr

080066a6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b085      	sub	sp, #20
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
 80066ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80066bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066c2:	683a      	ldr	r2, [r7, #0]
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	f043 0307 	orr.w	r3, r3, #7
 80066cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	609a      	str	r2, [r3, #8]
}
 80066d4:	bf00      	nop
 80066d6:	3714      	adds	r7, #20
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
 80066ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	021a      	lsls	r2, r3, #8
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	431a      	orrs	r2, r3
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	4313      	orrs	r3, r2
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	4313      	orrs	r3, r2
 800670c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	609a      	str	r2, [r3, #8]
}
 8006714:	bf00      	nop
 8006716:	371c      	adds	r7, #28
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006730:	2b01      	cmp	r3, #1
 8006732:	d101      	bne.n	8006738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006734:	2302      	movs	r3, #2
 8006736:	e074      	b.n	8006822 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a34      	ldr	r2, [pc, #208]	; (8006830 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d009      	beq.n	8006776 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a33      	ldr	r2, [pc, #204]	; (8006834 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d004      	beq.n	8006776 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a31      	ldr	r2, [pc, #196]	; (8006838 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d108      	bne.n	8006788 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800677c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	68fa      	ldr	r2, [r7, #12]
 8006784:	4313      	orrs	r3, r2
 8006786:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800678e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006792:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	4313      	orrs	r3, r2
 800679c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a21      	ldr	r2, [pc, #132]	; (8006830 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d022      	beq.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067b8:	d01d      	beq.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a1f      	ldr	r2, [pc, #124]	; (800683c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d018      	beq.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a1d      	ldr	r2, [pc, #116]	; (8006840 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d013      	beq.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a1c      	ldr	r2, [pc, #112]	; (8006844 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d00e      	beq.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a15      	ldr	r2, [pc, #84]	; (8006834 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d009      	beq.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a18      	ldr	r2, [pc, #96]	; (8006848 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d004      	beq.n	80067f6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a11      	ldr	r2, [pc, #68]	; (8006838 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d10c      	bne.n	8006810 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	4313      	orrs	r3, r2
 8006806:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	68ba      	ldr	r2, [r7, #8]
 800680e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	40012c00 	.word	0x40012c00
 8006834:	40013400 	.word	0x40013400
 8006838:	40015000 	.word	0x40015000
 800683c:	40000400 	.word	0x40000400
 8006840:	40000800 	.word	0x40000800
 8006844:	40000c00 	.word	0x40000c00
 8006848:	40014000 	.word	0x40014000

0800684c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80068a4:	bf00      	nop
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80068b8:	bf00      	nop
 80068ba:	370c      	adds	r7, #12
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b083      	sub	sp, #12
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80068cc:	bf00      	nop
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e042      	b.n	8006970 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d106      	bne.n	8006902 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f7fa fd6b 	bl	80013d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2224      	movs	r2, #36	; 0x24
 8006906:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f022 0201 	bic.w	r2, r2, #1
 8006918:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800691e:	2b00      	cmp	r3, #0
 8006920:	d002      	beq.n	8006928 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 fb24 	bl	8006f70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f825 	bl	8006978 <UART_SetConfig>
 800692e:	4603      	mov	r3, r0
 8006930:	2b01      	cmp	r3, #1
 8006932:	d101      	bne.n	8006938 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006934:	2301      	movs	r3, #1
 8006936:	e01b      	b.n	8006970 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	685a      	ldr	r2, [r3, #4]
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006946:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	689a      	ldr	r2, [r3, #8]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006956:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f042 0201 	orr.w	r2, r2, #1
 8006966:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 fba3 	bl	80070b4 <UART_CheckIdleState>
 800696e:	4603      	mov	r3, r0
}
 8006970:	4618      	mov	r0, r3
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}

08006978 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800697c:	b08c      	sub	sp, #48	; 0x30
 800697e:	af00      	add	r7, sp, #0
 8006980:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006982:	2300      	movs	r3, #0
 8006984:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	689a      	ldr	r2, [r3, #8]
 800698c:	697b      	ldr	r3, [r7, #20]
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	431a      	orrs	r2, r3
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	431a      	orrs	r2, r3
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	4313      	orrs	r3, r2
 800699e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681a      	ldr	r2, [r3, #0]
 80069a6:	4baa      	ldr	r3, [pc, #680]	; (8006c50 <UART_SetConfig+0x2d8>)
 80069a8:	4013      	ands	r3, r2
 80069aa:	697a      	ldr	r2, [r7, #20]
 80069ac:	6812      	ldr	r2, [r2, #0]
 80069ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069b0:	430b      	orrs	r3, r1
 80069b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	68da      	ldr	r2, [r3, #12]
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	430a      	orrs	r2, r1
 80069c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a9f      	ldr	r2, [pc, #636]	; (8006c54 <UART_SetConfig+0x2dc>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d004      	beq.n	80069e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80069da:	697b      	ldr	r3, [r7, #20]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069e0:	4313      	orrs	r3, r2
 80069e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80069ee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80069f2:	697a      	ldr	r2, [r7, #20]
 80069f4:	6812      	ldr	r2, [r2, #0]
 80069f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069f8:	430b      	orrs	r3, r1
 80069fa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a02:	f023 010f 	bic.w	r1, r3, #15
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a0a:	697b      	ldr	r3, [r7, #20]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a90      	ldr	r2, [pc, #576]	; (8006c58 <UART_SetConfig+0x2e0>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d125      	bne.n	8006a68 <UART_SetConfig+0xf0>
 8006a1c:	4b8f      	ldr	r3, [pc, #572]	; (8006c5c <UART_SetConfig+0x2e4>)
 8006a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a22:	f003 0303 	and.w	r3, r3, #3
 8006a26:	2b03      	cmp	r3, #3
 8006a28:	d81a      	bhi.n	8006a60 <UART_SetConfig+0xe8>
 8006a2a:	a201      	add	r2, pc, #4	; (adr r2, 8006a30 <UART_SetConfig+0xb8>)
 8006a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a30:	08006a41 	.word	0x08006a41
 8006a34:	08006a51 	.word	0x08006a51
 8006a38:	08006a49 	.word	0x08006a49
 8006a3c:	08006a59 	.word	0x08006a59
 8006a40:	2301      	movs	r3, #1
 8006a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a46:	e116      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a4e:	e112      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006a50:	2304      	movs	r3, #4
 8006a52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a56:	e10e      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006a58:	2308      	movs	r3, #8
 8006a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a5e:	e10a      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006a60:	2310      	movs	r3, #16
 8006a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a66:	e106      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a7c      	ldr	r2, [pc, #496]	; (8006c60 <UART_SetConfig+0x2e8>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d138      	bne.n	8006ae4 <UART_SetConfig+0x16c>
 8006a72:	4b7a      	ldr	r3, [pc, #488]	; (8006c5c <UART_SetConfig+0x2e4>)
 8006a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a78:	f003 030c 	and.w	r3, r3, #12
 8006a7c:	2b0c      	cmp	r3, #12
 8006a7e:	d82d      	bhi.n	8006adc <UART_SetConfig+0x164>
 8006a80:	a201      	add	r2, pc, #4	; (adr r2, 8006a88 <UART_SetConfig+0x110>)
 8006a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a86:	bf00      	nop
 8006a88:	08006abd 	.word	0x08006abd
 8006a8c:	08006add 	.word	0x08006add
 8006a90:	08006add 	.word	0x08006add
 8006a94:	08006add 	.word	0x08006add
 8006a98:	08006acd 	.word	0x08006acd
 8006a9c:	08006add 	.word	0x08006add
 8006aa0:	08006add 	.word	0x08006add
 8006aa4:	08006add 	.word	0x08006add
 8006aa8:	08006ac5 	.word	0x08006ac5
 8006aac:	08006add 	.word	0x08006add
 8006ab0:	08006add 	.word	0x08006add
 8006ab4:	08006add 	.word	0x08006add
 8006ab8:	08006ad5 	.word	0x08006ad5
 8006abc:	2300      	movs	r3, #0
 8006abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ac2:	e0d8      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006ac4:	2302      	movs	r3, #2
 8006ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006aca:	e0d4      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006acc:	2304      	movs	r3, #4
 8006ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ad2:	e0d0      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006ad4:	2308      	movs	r3, #8
 8006ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ada:	e0cc      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006adc:	2310      	movs	r3, #16
 8006ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ae2:	e0c8      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a5e      	ldr	r2, [pc, #376]	; (8006c64 <UART_SetConfig+0x2ec>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d125      	bne.n	8006b3a <UART_SetConfig+0x1c2>
 8006aee:	4b5b      	ldr	r3, [pc, #364]	; (8006c5c <UART_SetConfig+0x2e4>)
 8006af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006af8:	2b30      	cmp	r3, #48	; 0x30
 8006afa:	d016      	beq.n	8006b2a <UART_SetConfig+0x1b2>
 8006afc:	2b30      	cmp	r3, #48	; 0x30
 8006afe:	d818      	bhi.n	8006b32 <UART_SetConfig+0x1ba>
 8006b00:	2b20      	cmp	r3, #32
 8006b02:	d00a      	beq.n	8006b1a <UART_SetConfig+0x1a2>
 8006b04:	2b20      	cmp	r3, #32
 8006b06:	d814      	bhi.n	8006b32 <UART_SetConfig+0x1ba>
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d002      	beq.n	8006b12 <UART_SetConfig+0x19a>
 8006b0c:	2b10      	cmp	r3, #16
 8006b0e:	d008      	beq.n	8006b22 <UART_SetConfig+0x1aa>
 8006b10:	e00f      	b.n	8006b32 <UART_SetConfig+0x1ba>
 8006b12:	2300      	movs	r3, #0
 8006b14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b18:	e0ad      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b20:	e0a9      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b22:	2304      	movs	r3, #4
 8006b24:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b28:	e0a5      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b2a:	2308      	movs	r3, #8
 8006b2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b30:	e0a1      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b32:	2310      	movs	r3, #16
 8006b34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b38:	e09d      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a4a      	ldr	r2, [pc, #296]	; (8006c68 <UART_SetConfig+0x2f0>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d125      	bne.n	8006b90 <UART_SetConfig+0x218>
 8006b44:	4b45      	ldr	r3, [pc, #276]	; (8006c5c <UART_SetConfig+0x2e4>)
 8006b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b4e:	2bc0      	cmp	r3, #192	; 0xc0
 8006b50:	d016      	beq.n	8006b80 <UART_SetConfig+0x208>
 8006b52:	2bc0      	cmp	r3, #192	; 0xc0
 8006b54:	d818      	bhi.n	8006b88 <UART_SetConfig+0x210>
 8006b56:	2b80      	cmp	r3, #128	; 0x80
 8006b58:	d00a      	beq.n	8006b70 <UART_SetConfig+0x1f8>
 8006b5a:	2b80      	cmp	r3, #128	; 0x80
 8006b5c:	d814      	bhi.n	8006b88 <UART_SetConfig+0x210>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d002      	beq.n	8006b68 <UART_SetConfig+0x1f0>
 8006b62:	2b40      	cmp	r3, #64	; 0x40
 8006b64:	d008      	beq.n	8006b78 <UART_SetConfig+0x200>
 8006b66:	e00f      	b.n	8006b88 <UART_SetConfig+0x210>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b6e:	e082      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b70:	2302      	movs	r3, #2
 8006b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b76:	e07e      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b78:	2304      	movs	r3, #4
 8006b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b7e:	e07a      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b80:	2308      	movs	r3, #8
 8006b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b86:	e076      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b88:	2310      	movs	r3, #16
 8006b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b8e:	e072      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a35      	ldr	r2, [pc, #212]	; (8006c6c <UART_SetConfig+0x2f4>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d12a      	bne.n	8006bf0 <UART_SetConfig+0x278>
 8006b9a:	4b30      	ldr	r3, [pc, #192]	; (8006c5c <UART_SetConfig+0x2e4>)
 8006b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ba0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ba4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ba8:	d01a      	beq.n	8006be0 <UART_SetConfig+0x268>
 8006baa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bae:	d81b      	bhi.n	8006be8 <UART_SetConfig+0x270>
 8006bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bb4:	d00c      	beq.n	8006bd0 <UART_SetConfig+0x258>
 8006bb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bba:	d815      	bhi.n	8006be8 <UART_SetConfig+0x270>
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <UART_SetConfig+0x250>
 8006bc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bc4:	d008      	beq.n	8006bd8 <UART_SetConfig+0x260>
 8006bc6:	e00f      	b.n	8006be8 <UART_SetConfig+0x270>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bce:	e052      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bd6:	e04e      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006bd8:	2304      	movs	r3, #4
 8006bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bde:	e04a      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006be0:	2308      	movs	r3, #8
 8006be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006be6:	e046      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006be8:	2310      	movs	r3, #16
 8006bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bee:	e042      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006bf0:	697b      	ldr	r3, [r7, #20]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a17      	ldr	r2, [pc, #92]	; (8006c54 <UART_SetConfig+0x2dc>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d13a      	bne.n	8006c70 <UART_SetConfig+0x2f8>
 8006bfa:	4b18      	ldr	r3, [pc, #96]	; (8006c5c <UART_SetConfig+0x2e4>)
 8006bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c08:	d01a      	beq.n	8006c40 <UART_SetConfig+0x2c8>
 8006c0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c0e:	d81b      	bhi.n	8006c48 <UART_SetConfig+0x2d0>
 8006c10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c14:	d00c      	beq.n	8006c30 <UART_SetConfig+0x2b8>
 8006c16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c1a:	d815      	bhi.n	8006c48 <UART_SetConfig+0x2d0>
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d003      	beq.n	8006c28 <UART_SetConfig+0x2b0>
 8006c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c24:	d008      	beq.n	8006c38 <UART_SetConfig+0x2c0>
 8006c26:	e00f      	b.n	8006c48 <UART_SetConfig+0x2d0>
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c2e:	e022      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006c30:	2302      	movs	r3, #2
 8006c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c36:	e01e      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006c38:	2304      	movs	r3, #4
 8006c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c3e:	e01a      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006c40:	2308      	movs	r3, #8
 8006c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c46:	e016      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006c48:	2310      	movs	r3, #16
 8006c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c4e:	e012      	b.n	8006c76 <UART_SetConfig+0x2fe>
 8006c50:	cfff69f3 	.word	0xcfff69f3
 8006c54:	40008000 	.word	0x40008000
 8006c58:	40013800 	.word	0x40013800
 8006c5c:	40021000 	.word	0x40021000
 8006c60:	40004400 	.word	0x40004400
 8006c64:	40004800 	.word	0x40004800
 8006c68:	40004c00 	.word	0x40004c00
 8006c6c:	40005000 	.word	0x40005000
 8006c70:	2310      	movs	r3, #16
 8006c72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4aae      	ldr	r2, [pc, #696]	; (8006f34 <UART_SetConfig+0x5bc>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	f040 8097 	bne.w	8006db0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c86:	2b08      	cmp	r3, #8
 8006c88:	d823      	bhi.n	8006cd2 <UART_SetConfig+0x35a>
 8006c8a:	a201      	add	r2, pc, #4	; (adr r2, 8006c90 <UART_SetConfig+0x318>)
 8006c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c90:	08006cb5 	.word	0x08006cb5
 8006c94:	08006cd3 	.word	0x08006cd3
 8006c98:	08006cbd 	.word	0x08006cbd
 8006c9c:	08006cd3 	.word	0x08006cd3
 8006ca0:	08006cc3 	.word	0x08006cc3
 8006ca4:	08006cd3 	.word	0x08006cd3
 8006ca8:	08006cd3 	.word	0x08006cd3
 8006cac:	08006cd3 	.word	0x08006cd3
 8006cb0:	08006ccb 	.word	0x08006ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cb4:	f7fe fd8e 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 8006cb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cba:	e010      	b.n	8006cde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cbc:	4b9e      	ldr	r3, [pc, #632]	; (8006f38 <UART_SetConfig+0x5c0>)
 8006cbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006cc0:	e00d      	b.n	8006cde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cc2:	f7fe fd19 	bl	80056f8 <HAL_RCC_GetSysClockFreq>
 8006cc6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006cc8:	e009      	b.n	8006cde <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006cd0:	e005      	b.n	8006cde <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006cdc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 8130 	beq.w	8006f46 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	4a94      	ldr	r2, [pc, #592]	; (8006f3c <UART_SetConfig+0x5c4>)
 8006cec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cf0:	461a      	mov	r2, r3
 8006cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006cf8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	4613      	mov	r3, r2
 8006d00:	005b      	lsls	r3, r3, #1
 8006d02:	4413      	add	r3, r2
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	429a      	cmp	r2, r3
 8006d08:	d305      	bcc.n	8006d16 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006d10:	69ba      	ldr	r2, [r7, #24]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d903      	bls.n	8006d1e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006d1c:	e113      	b.n	8006f46 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	2200      	movs	r2, #0
 8006d22:	60bb      	str	r3, [r7, #8]
 8006d24:	60fa      	str	r2, [r7, #12]
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2a:	4a84      	ldr	r2, [pc, #528]	; (8006f3c <UART_SetConfig+0x5c4>)
 8006d2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	2200      	movs	r2, #0
 8006d34:	603b      	str	r3, [r7, #0]
 8006d36:	607a      	str	r2, [r7, #4]
 8006d38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d3c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006d40:	f7f9 fa7c 	bl	800023c <__aeabi_uldivmod>
 8006d44:	4602      	mov	r2, r0
 8006d46:	460b      	mov	r3, r1
 8006d48:	4610      	mov	r0, r2
 8006d4a:	4619      	mov	r1, r3
 8006d4c:	f04f 0200 	mov.w	r2, #0
 8006d50:	f04f 0300 	mov.w	r3, #0
 8006d54:	020b      	lsls	r3, r1, #8
 8006d56:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006d5a:	0202      	lsls	r2, r0, #8
 8006d5c:	6979      	ldr	r1, [r7, #20]
 8006d5e:	6849      	ldr	r1, [r1, #4]
 8006d60:	0849      	lsrs	r1, r1, #1
 8006d62:	2000      	movs	r0, #0
 8006d64:	460c      	mov	r4, r1
 8006d66:	4605      	mov	r5, r0
 8006d68:	eb12 0804 	adds.w	r8, r2, r4
 8006d6c:	eb43 0905 	adc.w	r9, r3, r5
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	469a      	mov	sl, r3
 8006d78:	4693      	mov	fp, r2
 8006d7a:	4652      	mov	r2, sl
 8006d7c:	465b      	mov	r3, fp
 8006d7e:	4640      	mov	r0, r8
 8006d80:	4649      	mov	r1, r9
 8006d82:	f7f9 fa5b 	bl	800023c <__aeabi_uldivmod>
 8006d86:	4602      	mov	r2, r0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d94:	d308      	bcc.n	8006da8 <UART_SetConfig+0x430>
 8006d96:	6a3b      	ldr	r3, [r7, #32]
 8006d98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d9c:	d204      	bcs.n	8006da8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	6a3a      	ldr	r2, [r7, #32]
 8006da4:	60da      	str	r2, [r3, #12]
 8006da6:	e0ce      	b.n	8006f46 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006dae:	e0ca      	b.n	8006f46 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006db8:	d166      	bne.n	8006e88 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006dba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006dbe:	2b08      	cmp	r3, #8
 8006dc0:	d827      	bhi.n	8006e12 <UART_SetConfig+0x49a>
 8006dc2:	a201      	add	r2, pc, #4	; (adr r2, 8006dc8 <UART_SetConfig+0x450>)
 8006dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc8:	08006ded 	.word	0x08006ded
 8006dcc:	08006df5 	.word	0x08006df5
 8006dd0:	08006dfd 	.word	0x08006dfd
 8006dd4:	08006e13 	.word	0x08006e13
 8006dd8:	08006e03 	.word	0x08006e03
 8006ddc:	08006e13 	.word	0x08006e13
 8006de0:	08006e13 	.word	0x08006e13
 8006de4:	08006e13 	.word	0x08006e13
 8006de8:	08006e0b 	.word	0x08006e0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006dec:	f7fe fcf2 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 8006df0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006df2:	e014      	b.n	8006e1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006df4:	f7fe fd04 	bl	8005800 <HAL_RCC_GetPCLK2Freq>
 8006df8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006dfa:	e010      	b.n	8006e1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dfc:	4b4e      	ldr	r3, [pc, #312]	; (8006f38 <UART_SetConfig+0x5c0>)
 8006dfe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e00:	e00d      	b.n	8006e1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e02:	f7fe fc79 	bl	80056f8 <HAL_RCC_GetSysClockFreq>
 8006e06:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e08:	e009      	b.n	8006e1e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e10:	e005      	b.n	8006e1e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006e12:	2300      	movs	r3, #0
 8006e14:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e1c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	f000 8090 	beq.w	8006f46 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2a:	4a44      	ldr	r2, [pc, #272]	; (8006f3c <UART_SetConfig+0x5c4>)
 8006e2c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e30:	461a      	mov	r2, r3
 8006e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e34:	fbb3 f3f2 	udiv	r3, r3, r2
 8006e38:	005a      	lsls	r2, r3, #1
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	085b      	lsrs	r3, r3, #1
 8006e40:	441a      	add	r2, r3
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e4a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e4c:	6a3b      	ldr	r3, [r7, #32]
 8006e4e:	2b0f      	cmp	r3, #15
 8006e50:	d916      	bls.n	8006e80 <UART_SetConfig+0x508>
 8006e52:	6a3b      	ldr	r3, [r7, #32]
 8006e54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e58:	d212      	bcs.n	8006e80 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	f023 030f 	bic.w	r3, r3, #15
 8006e62:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	085b      	lsrs	r3, r3, #1
 8006e68:	b29b      	uxth	r3, r3
 8006e6a:	f003 0307 	and.w	r3, r3, #7
 8006e6e:	b29a      	uxth	r2, r3
 8006e70:	8bfb      	ldrh	r3, [r7, #30]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	8bfa      	ldrh	r2, [r7, #30]
 8006e7c:	60da      	str	r2, [r3, #12]
 8006e7e:	e062      	b.n	8006f46 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006e80:	2301      	movs	r3, #1
 8006e82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e86:	e05e      	b.n	8006f46 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e88:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e8c:	2b08      	cmp	r3, #8
 8006e8e:	d828      	bhi.n	8006ee2 <UART_SetConfig+0x56a>
 8006e90:	a201      	add	r2, pc, #4	; (adr r2, 8006e98 <UART_SetConfig+0x520>)
 8006e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e96:	bf00      	nop
 8006e98:	08006ebd 	.word	0x08006ebd
 8006e9c:	08006ec5 	.word	0x08006ec5
 8006ea0:	08006ecd 	.word	0x08006ecd
 8006ea4:	08006ee3 	.word	0x08006ee3
 8006ea8:	08006ed3 	.word	0x08006ed3
 8006eac:	08006ee3 	.word	0x08006ee3
 8006eb0:	08006ee3 	.word	0x08006ee3
 8006eb4:	08006ee3 	.word	0x08006ee3
 8006eb8:	08006edb 	.word	0x08006edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ebc:	f7fe fc8a 	bl	80057d4 <HAL_RCC_GetPCLK1Freq>
 8006ec0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ec2:	e014      	b.n	8006eee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ec4:	f7fe fc9c 	bl	8005800 <HAL_RCC_GetPCLK2Freq>
 8006ec8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006eca:	e010      	b.n	8006eee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ecc:	4b1a      	ldr	r3, [pc, #104]	; (8006f38 <UART_SetConfig+0x5c0>)
 8006ece:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ed0:	e00d      	b.n	8006eee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ed2:	f7fe fc11 	bl	80056f8 <HAL_RCC_GetSysClockFreq>
 8006ed6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ed8:	e009      	b.n	8006eee <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ede:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ee0:	e005      	b.n	8006eee <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006eec:	bf00      	nop
    }

    if (pclk != 0U)
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d028      	beq.n	8006f46 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ef8:	4a10      	ldr	r2, [pc, #64]	; (8006f3c <UART_SetConfig+0x5c4>)
 8006efa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006efe:	461a      	mov	r2, r3
 8006f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f02:	fbb3 f2f2 	udiv	r2, r3, r2
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	685b      	ldr	r3, [r3, #4]
 8006f0a:	085b      	lsrs	r3, r3, #1
 8006f0c:	441a      	add	r2, r3
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f18:	6a3b      	ldr	r3, [r7, #32]
 8006f1a:	2b0f      	cmp	r3, #15
 8006f1c:	d910      	bls.n	8006f40 <UART_SetConfig+0x5c8>
 8006f1e:	6a3b      	ldr	r3, [r7, #32]
 8006f20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f24:	d20c      	bcs.n	8006f40 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006f26:	6a3b      	ldr	r3, [r7, #32]
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	60da      	str	r2, [r3, #12]
 8006f30:	e009      	b.n	8006f46 <UART_SetConfig+0x5ce>
 8006f32:	bf00      	nop
 8006f34:	40008000 	.word	0x40008000
 8006f38:	00f42400 	.word	0x00f42400
 8006f3c:	0800c134 	.word	0x0800c134
      }
      else
      {
        ret = HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006f46:	697b      	ldr	r3, [r7, #20]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2200      	movs	r2, #0
 8006f5a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006f62:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006f66:	4618      	mov	r0, r3
 8006f68:	3730      	adds	r7, #48	; 0x30
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006f70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7c:	f003 0308 	and.w	r3, r3, #8
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00a      	beq.n	8006f9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00a      	beq.n	8006fbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc0:	f003 0302 	and.w	r3, r3, #2
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00a      	beq.n	8006fde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	430a      	orrs	r2, r1
 8006fdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe2:	f003 0304 	and.w	r3, r3, #4
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00a      	beq.n	8007000 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	430a      	orrs	r2, r1
 8006ffe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007004:	f003 0310 	and.w	r3, r3, #16
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00a      	beq.n	8007022 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	430a      	orrs	r2, r1
 8007020:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007026:	f003 0320 	and.w	r3, r3, #32
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00a      	beq.n	8007044 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	689b      	ldr	r3, [r3, #8]
 8007034:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	430a      	orrs	r2, r1
 8007042:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800704c:	2b00      	cmp	r3, #0
 800704e:	d01a      	beq.n	8007086 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800706a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800706e:	d10a      	bne.n	8007086 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	430a      	orrs	r2, r1
 8007084:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00a      	beq.n	80070a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	430a      	orrs	r2, r1
 80070a6:	605a      	str	r2, [r3, #4]
  }
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b098      	sub	sp, #96	; 0x60
 80070b8:	af02      	add	r7, sp, #8
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80070c4:	f7fa fb34 	bl	8001730 <HAL_GetTick>
 80070c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0308 	and.w	r3, r3, #8
 80070d4:	2b08      	cmp	r3, #8
 80070d6:	d12f      	bne.n	8007138 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070dc:	9300      	str	r3, [sp, #0]
 80070de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070e0:	2200      	movs	r2, #0
 80070e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f88e 	bl	8007208 <UART_WaitOnFlagUntilTimeout>
 80070ec:	4603      	mov	r3, r0
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d022      	beq.n	8007138 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070fa:	e853 3f00 	ldrex	r3, [r3]
 80070fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007102:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007106:	653b      	str	r3, [r7, #80]	; 0x50
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	461a      	mov	r2, r3
 800710e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007110:	647b      	str	r3, [r7, #68]	; 0x44
 8007112:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007114:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007116:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007118:	e841 2300 	strex	r3, r2, [r1]
 800711c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800711e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1e6      	bne.n	80070f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2220      	movs	r2, #32
 8007128:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e063      	b.n	8007200 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0304 	and.w	r3, r3, #4
 8007142:	2b04      	cmp	r3, #4
 8007144:	d149      	bne.n	80071da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007146:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800714e:	2200      	movs	r2, #0
 8007150:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 f857 	bl	8007208 <UART_WaitOnFlagUntilTimeout>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d03c      	beq.n	80071da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007168:	e853 3f00 	ldrex	r3, [r3]
 800716c:	623b      	str	r3, [r7, #32]
   return(result);
 800716e:	6a3b      	ldr	r3, [r7, #32]
 8007170:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007174:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	461a      	mov	r2, r3
 800717c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800717e:	633b      	str	r3, [r7, #48]	; 0x30
 8007180:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007182:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007184:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007186:	e841 2300 	strex	r3, r2, [r1]
 800718a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800718c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1e6      	bne.n	8007160 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	3308      	adds	r3, #8
 8007198:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	e853 3f00 	ldrex	r3, [r3]
 80071a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f023 0301 	bic.w	r3, r3, #1
 80071a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	3308      	adds	r3, #8
 80071b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80071b2:	61fa      	str	r2, [r7, #28]
 80071b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b6:	69b9      	ldr	r1, [r7, #24]
 80071b8:	69fa      	ldr	r2, [r7, #28]
 80071ba:	e841 2300 	strex	r3, r2, [r1]
 80071be:	617b      	str	r3, [r7, #20]
   return(result);
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1e5      	bne.n	8007192 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2220      	movs	r2, #32
 80071ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e012      	b.n	8007200 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2220      	movs	r2, #32
 80071de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2220      	movs	r2, #32
 80071e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80071fe:	2300      	movs	r3, #0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3758      	adds	r7, #88	; 0x58
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	603b      	str	r3, [r7, #0]
 8007214:	4613      	mov	r3, r2
 8007216:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007218:	e04f      	b.n	80072ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007220:	d04b      	beq.n	80072ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007222:	f7fa fa85 	bl	8001730 <HAL_GetTick>
 8007226:	4602      	mov	r2, r0
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	1ad3      	subs	r3, r2, r3
 800722c:	69ba      	ldr	r2, [r7, #24]
 800722e:	429a      	cmp	r2, r3
 8007230:	d302      	bcc.n	8007238 <UART_WaitOnFlagUntilTimeout+0x30>
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d101      	bne.n	800723c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007238:	2303      	movs	r3, #3
 800723a:	e04e      	b.n	80072da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f003 0304 	and.w	r3, r3, #4
 8007246:	2b00      	cmp	r3, #0
 8007248:	d037      	beq.n	80072ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	2b80      	cmp	r3, #128	; 0x80
 800724e:	d034      	beq.n	80072ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	2b40      	cmp	r3, #64	; 0x40
 8007254:	d031      	beq.n	80072ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	69db      	ldr	r3, [r3, #28]
 800725c:	f003 0308 	and.w	r3, r3, #8
 8007260:	2b08      	cmp	r3, #8
 8007262:	d110      	bne.n	8007286 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2208      	movs	r2, #8
 800726a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800726c:	68f8      	ldr	r0, [r7, #12]
 800726e:	f000 f838 	bl	80072e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2208      	movs	r2, #8
 8007276:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	2200      	movs	r2, #0
 800727e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	e029      	b.n	80072da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	69db      	ldr	r3, [r3, #28]
 800728c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007290:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007294:	d111      	bne.n	80072ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800729e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 f81e 	bl	80072e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2220      	movs	r2, #32
 80072aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e00f      	b.n	80072da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	69da      	ldr	r2, [r3, #28]
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	4013      	ands	r3, r2
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	bf0c      	ite	eq
 80072ca:	2301      	moveq	r3, #1
 80072cc:	2300      	movne	r3, #0
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	461a      	mov	r2, r3
 80072d2:	79fb      	ldrb	r3, [r7, #7]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d0a0      	beq.n	800721a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b095      	sub	sp, #84	; 0x54
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072f2:	e853 3f00 	ldrex	r3, [r3]
 80072f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80072f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80072fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	461a      	mov	r2, r3
 8007306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007308:	643b      	str	r3, [r7, #64]	; 0x40
 800730a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800730c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800730e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007310:	e841 2300 	strex	r3, r2, [r1]
 8007314:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1e6      	bne.n	80072ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3308      	adds	r3, #8
 8007322:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007324:	6a3b      	ldr	r3, [r7, #32]
 8007326:	e853 3f00 	ldrex	r3, [r3]
 800732a:	61fb      	str	r3, [r7, #28]
   return(result);
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007332:	f023 0301 	bic.w	r3, r3, #1
 8007336:	64bb      	str	r3, [r7, #72]	; 0x48
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	3308      	adds	r3, #8
 800733e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007340:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007342:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007346:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007348:	e841 2300 	strex	r3, r2, [r1]
 800734c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1e3      	bne.n	800731c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007358:	2b01      	cmp	r3, #1
 800735a:	d118      	bne.n	800738e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	e853 3f00 	ldrex	r3, [r3]
 8007368:	60bb      	str	r3, [r7, #8]
   return(result);
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	f023 0310 	bic.w	r3, r3, #16
 8007370:	647b      	str	r3, [r7, #68]	; 0x44
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	461a      	mov	r2, r3
 8007378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800737a:	61bb      	str	r3, [r7, #24]
 800737c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800737e:	6979      	ldr	r1, [r7, #20]
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	e841 2300 	strex	r3, r2, [r1]
 8007386:	613b      	str	r3, [r7, #16]
   return(result);
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1e6      	bne.n	800735c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2220      	movs	r2, #32
 8007392:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2200      	movs	r2, #0
 800739a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2200      	movs	r2, #0
 80073a0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80073a2:	bf00      	nop
 80073a4:	3754      	adds	r7, #84	; 0x54
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b085      	sub	sp, #20
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d101      	bne.n	80073c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80073c0:	2302      	movs	r3, #2
 80073c2:	e027      	b.n	8007414 <HAL_UARTEx_DisableFifoMode+0x66>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2201      	movs	r2, #1
 80073c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2224      	movs	r2, #36	; 0x24
 80073d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f022 0201 	bic.w	r2, r2, #1
 80073ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80073f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2220      	movs	r2, #32
 8007406:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007412:	2300      	movs	r3, #0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3714      	adds	r7, #20
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007430:	2b01      	cmp	r3, #1
 8007432:	d101      	bne.n	8007438 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007434:	2302      	movs	r3, #2
 8007436:	e02d      	b.n	8007494 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2201      	movs	r2, #1
 800743c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2224      	movs	r2, #36	; 0x24
 8007444:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681a      	ldr	r2, [r3, #0]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f022 0201 	bic.w	r2, r2, #1
 800745e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	683a      	ldr	r2, [r7, #0]
 8007470:	430a      	orrs	r2, r1
 8007472:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 f84f 	bl	8007518 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	68fa      	ldr	r2, [r7, #12]
 8007480:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2220      	movs	r2, #32
 8007486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d101      	bne.n	80074b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80074b0:	2302      	movs	r3, #2
 80074b2:	e02d      	b.n	8007510 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2224      	movs	r2, #36	; 0x24
 80074c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f022 0201 	bic.w	r2, r2, #1
 80074da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	683a      	ldr	r2, [r7, #0]
 80074ec:	430a      	orrs	r2, r1
 80074ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f811 	bl	8007518 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2220      	movs	r2, #32
 8007502:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800750e:	2300      	movs	r3, #0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3710      	adds	r7, #16
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007524:	2b00      	cmp	r3, #0
 8007526:	d108      	bne.n	800753a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2201      	movs	r2, #1
 800752c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2201      	movs	r2, #1
 8007534:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007538:	e031      	b.n	800759e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800753a:	2308      	movs	r3, #8
 800753c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800753e:	2308      	movs	r3, #8
 8007540:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	0e5b      	lsrs	r3, r3, #25
 800754a:	b2db      	uxtb	r3, r3
 800754c:	f003 0307 	and.w	r3, r3, #7
 8007550:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	0f5b      	lsrs	r3, r3, #29
 800755a:	b2db      	uxtb	r3, r3
 800755c:	f003 0307 	and.w	r3, r3, #7
 8007560:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007562:	7bbb      	ldrb	r3, [r7, #14]
 8007564:	7b3a      	ldrb	r2, [r7, #12]
 8007566:	4911      	ldr	r1, [pc, #68]	; (80075ac <UARTEx_SetNbDataToProcess+0x94>)
 8007568:	5c8a      	ldrb	r2, [r1, r2]
 800756a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800756e:	7b3a      	ldrb	r2, [r7, #12]
 8007570:	490f      	ldr	r1, [pc, #60]	; (80075b0 <UARTEx_SetNbDataToProcess+0x98>)
 8007572:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007574:	fb93 f3f2 	sdiv	r3, r3, r2
 8007578:	b29a      	uxth	r2, r3
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007580:	7bfb      	ldrb	r3, [r7, #15]
 8007582:	7b7a      	ldrb	r2, [r7, #13]
 8007584:	4909      	ldr	r1, [pc, #36]	; (80075ac <UARTEx_SetNbDataToProcess+0x94>)
 8007586:	5c8a      	ldrb	r2, [r1, r2]
 8007588:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800758c:	7b7a      	ldrb	r2, [r7, #13]
 800758e:	4908      	ldr	r1, [pc, #32]	; (80075b0 <UARTEx_SetNbDataToProcess+0x98>)
 8007590:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007592:	fb93 f3f2 	sdiv	r3, r3, r2
 8007596:	b29a      	uxth	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800759e:	bf00      	nop
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr
 80075aa:	bf00      	nop
 80075ac:	0800c14c 	.word	0x0800c14c
 80075b0:	0800c154 	.word	0x0800c154

080075b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80075c4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80075c8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80075d4:	2300      	movs	r3, #0
}
 80075d6:	4618      	mov	r0, r3
 80075d8:	3714      	adds	r7, #20
 80075da:	46bd      	mov	sp, r7
 80075dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e0:	4770      	bx	lr

080075e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80075e2:	b480      	push	{r7}
 80075e4:	b085      	sub	sp, #20
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80075ea:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80075ee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80075f6:	b29a      	uxth	r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	43db      	mvns	r3, r3
 80075fe:	b29b      	uxth	r3, r3
 8007600:	4013      	ands	r3, r2
 8007602:	b29a      	uxth	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800760a:	2300      	movs	r3, #0
}
 800760c:	4618      	mov	r0, r3
 800760e:	3714      	adds	r7, #20
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	1d3b      	adds	r3, r7, #4
 8007622:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2201      	movs	r2, #1
 800762a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	2200      	movs	r2, #0
 8007632:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2200      	movs	r2, #0
 8007642:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007646:	2300      	movs	r3, #0
}
 8007648:	4618      	mov	r0, r3
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007654:	b480      	push	{r7}
 8007656:	b09d      	sub	sp, #116	; 0x74
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007664:	687a      	ldr	r2, [r7, #4]
 8007666:	683b      	ldr	r3, [r7, #0]
 8007668:	781b      	ldrb	r3, [r3, #0]
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	881b      	ldrh	r3, [r3, #0]
 8007670:	b29b      	uxth	r3, r3
 8007672:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800767a:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	78db      	ldrb	r3, [r3, #3]
 8007682:	2b03      	cmp	r3, #3
 8007684:	d81f      	bhi.n	80076c6 <USB_ActivateEndpoint+0x72>
 8007686:	a201      	add	r2, pc, #4	; (adr r2, 800768c <USB_ActivateEndpoint+0x38>)
 8007688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768c:	0800769d 	.word	0x0800769d
 8007690:	080076b9 	.word	0x080076b9
 8007694:	080076cf 	.word	0x080076cf
 8007698:	080076ab 	.word	0x080076ab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800769c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80076a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80076a4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80076a8:	e012      	b.n	80076d0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80076aa:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80076ae:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80076b2:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80076b6:	e00b      	b.n	80076d0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80076b8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80076bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80076c0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80076c4:	e004      	b.n	80076d0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80076c6:	2301      	movs	r3, #1
 80076c8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80076cc:	e000      	b.n	80076d0 <USB_ActivateEndpoint+0x7c>
      break;
 80076ce:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80076d0:	687a      	ldr	r2, [r7, #4]
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	009b      	lsls	r3, r3, #2
 80076d8:	441a      	add	r2, r3
 80076da:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80076de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80076e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80076e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80076ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80076f2:	687a      	ldr	r2, [r7, #4]
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	009b      	lsls	r3, r3, #2
 80076fa:	4413      	add	r3, r2
 80076fc:	881b      	ldrh	r3, [r3, #0]
 80076fe:	b29b      	uxth	r3, r3
 8007700:	b21b      	sxth	r3, r3
 8007702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770a:	b21a      	sxth	r2, r3
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	b21b      	sxth	r3, r3
 8007712:	4313      	orrs	r3, r2
 8007714:	b21b      	sxth	r3, r3
 8007716:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	009b      	lsls	r3, r3, #2
 8007722:	441a      	add	r2, r3
 8007724:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007728:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800772c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007730:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007734:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007738:	b29b      	uxth	r3, r3
 800773a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	7b1b      	ldrb	r3, [r3, #12]
 8007740:	2b00      	cmp	r3, #0
 8007742:	f040 8178 	bne.w	8007a36 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	785b      	ldrb	r3, [r3, #1]
 800774a:	2b00      	cmp	r3, #0
 800774c:	f000 8084 	beq.w	8007858 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	61bb      	str	r3, [r7, #24]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800775a:	b29b      	uxth	r3, r3
 800775c:	461a      	mov	r2, r3
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	4413      	add	r3, r2
 8007762:	61bb      	str	r3, [r7, #24]
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	00da      	lsls	r2, r3, #3
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	4413      	add	r3, r2
 800776e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007772:	617b      	str	r3, [r7, #20]
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	88db      	ldrh	r3, [r3, #6]
 8007778:	085b      	lsrs	r3, r3, #1
 800777a:	b29b      	uxth	r3, r3
 800777c:	005b      	lsls	r3, r3, #1
 800777e:	b29a      	uxth	r2, r3
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	009b      	lsls	r3, r3, #2
 800778c:	4413      	add	r3, r2
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	827b      	strh	r3, [r7, #18]
 8007792:	8a7b      	ldrh	r3, [r7, #18]
 8007794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007798:	2b00      	cmp	r3, #0
 800779a:	d01b      	beq.n	80077d4 <USB_ActivateEndpoint+0x180>
 800779c:	687a      	ldr	r2, [r7, #4]
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	009b      	lsls	r3, r3, #2
 80077a4:	4413      	add	r3, r2
 80077a6:	881b      	ldrh	r3, [r3, #0]
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b2:	823b      	strh	r3, [r7, #16]
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	441a      	add	r2, r3
 80077be:	8a3b      	ldrh	r3, [r7, #16]
 80077c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80077c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80077c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80077cc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	78db      	ldrb	r3, [r3, #3]
 80077d8:	2b01      	cmp	r3, #1
 80077da:	d020      	beq.n	800781e <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	009b      	lsls	r3, r3, #2
 80077e4:	4413      	add	r3, r2
 80077e6:	881b      	ldrh	r3, [r3, #0]
 80077e8:	b29b      	uxth	r3, r3
 80077ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80077ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80077f2:	81bb      	strh	r3, [r7, #12]
 80077f4:	89bb      	ldrh	r3, [r7, #12]
 80077f6:	f083 0320 	eor.w	r3, r3, #32
 80077fa:	81bb      	strh	r3, [r7, #12]
 80077fc:	687a      	ldr	r2, [r7, #4]
 80077fe:	683b      	ldr	r3, [r7, #0]
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	441a      	add	r2, r3
 8007806:	89bb      	ldrh	r3, [r7, #12]
 8007808:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800780c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007810:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007818:	b29b      	uxth	r3, r3
 800781a:	8013      	strh	r3, [r2, #0]
 800781c:	e2d5      	b.n	8007dca <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	4413      	add	r3, r2
 8007828:	881b      	ldrh	r3, [r3, #0]
 800782a:	b29b      	uxth	r3, r3
 800782c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007834:	81fb      	strh	r3, [r7, #14]
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	683b      	ldr	r3, [r7, #0]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	009b      	lsls	r3, r3, #2
 800783e:	441a      	add	r2, r3
 8007840:	89fb      	ldrh	r3, [r7, #14]
 8007842:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007846:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800784a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800784e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007852:	b29b      	uxth	r3, r3
 8007854:	8013      	strh	r3, [r2, #0]
 8007856:	e2b8      	b.n	8007dca <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	633b      	str	r3, [r7, #48]	; 0x30
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007862:	b29b      	uxth	r3, r3
 8007864:	461a      	mov	r2, r3
 8007866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007868:	4413      	add	r3, r2
 800786a:	633b      	str	r3, [r7, #48]	; 0x30
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	00da      	lsls	r2, r3, #3
 8007872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007874:	4413      	add	r3, r2
 8007876:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800787a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	88db      	ldrh	r3, [r3, #6]
 8007880:	085b      	lsrs	r3, r3, #1
 8007882:	b29b      	uxth	r3, r3
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	b29a      	uxth	r2, r3
 8007888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800788a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007896:	b29b      	uxth	r3, r3
 8007898:	461a      	mov	r2, r3
 800789a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789c:	4413      	add	r3, r2
 800789e:	62bb      	str	r3, [r7, #40]	; 0x28
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	781b      	ldrb	r3, [r3, #0]
 80078a4:	00da      	lsls	r2, r3, #3
 80078a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a8:	4413      	add	r3, r2
 80078aa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078ae:	627b      	str	r3, [r7, #36]	; 0x24
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	881b      	ldrh	r3, [r3, #0]
 80078b4:	b29b      	uxth	r3, r3
 80078b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078ba:	b29a      	uxth	r2, r3
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	801a      	strh	r2, [r3, #0]
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	2b3e      	cmp	r3, #62	; 0x3e
 80078c6:	d91d      	bls.n	8007904 <USB_ActivateEndpoint+0x2b0>
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	095b      	lsrs	r3, r3, #5
 80078ce:	66bb      	str	r3, [r7, #104]	; 0x68
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	691b      	ldr	r3, [r3, #16]
 80078d4:	f003 031f 	and.w	r3, r3, #31
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d102      	bne.n	80078e2 <USB_ActivateEndpoint+0x28e>
 80078dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078de:	3b01      	subs	r3, #1
 80078e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80078e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e4:	881b      	ldrh	r3, [r3, #0]
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	029b      	lsls	r3, r3, #10
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	4313      	orrs	r3, r2
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007900:	801a      	strh	r2, [r3, #0]
 8007902:	e026      	b.n	8007952 <USB_ActivateEndpoint+0x2fe>
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10a      	bne.n	8007922 <USB_ActivateEndpoint+0x2ce>
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	b29b      	uxth	r3, r3
 8007912:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007916:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800791a:	b29a      	uxth	r2, r3
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	801a      	strh	r2, [r3, #0]
 8007920:	e017      	b.n	8007952 <USB_ActivateEndpoint+0x2fe>
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	691b      	ldr	r3, [r3, #16]
 8007926:	085b      	lsrs	r3, r3, #1
 8007928:	66bb      	str	r3, [r7, #104]	; 0x68
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	2b00      	cmp	r3, #0
 8007934:	d002      	beq.n	800793c <USB_ActivateEndpoint+0x2e8>
 8007936:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007938:	3301      	adds	r3, #1
 800793a:	66bb      	str	r3, [r7, #104]	; 0x68
 800793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793e:	881b      	ldrh	r3, [r3, #0]
 8007940:	b29a      	uxth	r2, r3
 8007942:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007944:	b29b      	uxth	r3, r3
 8007946:	029b      	lsls	r3, r3, #10
 8007948:	b29b      	uxth	r3, r3
 800794a:	4313      	orrs	r3, r2
 800794c:	b29a      	uxth	r2, r3
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	009b      	lsls	r3, r3, #2
 800795a:	4413      	add	r3, r2
 800795c:	881b      	ldrh	r3, [r3, #0]
 800795e:	847b      	strh	r3, [r7, #34]	; 0x22
 8007960:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d01b      	beq.n	80079a2 <USB_ActivateEndpoint+0x34e>
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	781b      	ldrb	r3, [r3, #0]
 8007970:	009b      	lsls	r3, r3, #2
 8007972:	4413      	add	r3, r2
 8007974:	881b      	ldrh	r3, [r3, #0]
 8007976:	b29b      	uxth	r3, r3
 8007978:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800797c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007980:	843b      	strh	r3, [r7, #32]
 8007982:	687a      	ldr	r2, [r7, #4]
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	441a      	add	r2, r3
 800798c:	8c3b      	ldrh	r3, [r7, #32]
 800798e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007992:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007996:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800799a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800799e:	b29b      	uxth	r3, r3
 80079a0:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	781b      	ldrb	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d124      	bne.n	80079f4 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	781b      	ldrb	r3, [r3, #0]
 80079b0:	009b      	lsls	r3, r3, #2
 80079b2:	4413      	add	r3, r2
 80079b4:	881b      	ldrh	r3, [r3, #0]
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80079bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079c0:	83bb      	strh	r3, [r7, #28]
 80079c2:	8bbb      	ldrh	r3, [r7, #28]
 80079c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80079c8:	83bb      	strh	r3, [r7, #28]
 80079ca:	8bbb      	ldrh	r3, [r7, #28]
 80079cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80079d0:	83bb      	strh	r3, [r7, #28]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	441a      	add	r2, r3
 80079dc:	8bbb      	ldrh	r3, [r7, #28]
 80079de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	8013      	strh	r3, [r2, #0]
 80079f2:	e1ea      	b.n	8007dca <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 80079f4:	687a      	ldr	r2, [r7, #4]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	009b      	lsls	r3, r3, #2
 80079fc:	4413      	add	r3, r2
 80079fe:	881b      	ldrh	r3, [r3, #0]
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0a:	83fb      	strh	r3, [r7, #30]
 8007a0c:	8bfb      	ldrh	r3, [r7, #30]
 8007a0e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007a12:	83fb      	strh	r3, [r7, #30]
 8007a14:	687a      	ldr	r2, [r7, #4]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	441a      	add	r2, r3
 8007a1e:	8bfb      	ldrh	r3, [r7, #30]
 8007a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a30:	b29b      	uxth	r3, r3
 8007a32:	8013      	strh	r3, [r2, #0]
 8007a34:	e1c9      	b.n	8007dca <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	78db      	ldrb	r3, [r3, #3]
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d11e      	bne.n	8007a7c <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007a3e:	687a      	ldr	r2, [r7, #4]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	781b      	ldrb	r3, [r3, #0]
 8007a44:	009b      	lsls	r3, r3, #2
 8007a46:	4413      	add	r3, r2
 8007a48:	881b      	ldrh	r3, [r3, #0]
 8007a4a:	b29b      	uxth	r3, r3
 8007a4c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a54:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007a58:	687a      	ldr	r2, [r7, #4]
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	009b      	lsls	r3, r3, #2
 8007a60:	441a      	add	r2, r3
 8007a62:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007a66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a6e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	8013      	strh	r3, [r2, #0]
 8007a7a:	e01d      	b.n	8007ab8 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007a7c:	687a      	ldr	r2, [r7, #4]
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	4413      	add	r3, r2
 8007a86:	881b      	ldrh	r3, [r3, #0]
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a92:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	009b      	lsls	r3, r3, #2
 8007a9e:	441a      	add	r2, r3
 8007aa0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007aa4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007aa8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007aac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ab0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ac8:	4413      	add	r3, r2
 8007aca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	781b      	ldrb	r3, [r3, #0]
 8007ad0:	00da      	lsls	r2, r3, #3
 8007ad2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ad4:	4413      	add	r3, r2
 8007ad6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ada:	65bb      	str	r3, [r7, #88]	; 0x58
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	891b      	ldrh	r3, [r3, #8]
 8007ae0:	085b      	lsrs	r3, r3, #1
 8007ae2:	b29b      	uxth	r3, r3
 8007ae4:	005b      	lsls	r3, r3, #1
 8007ae6:	b29a      	uxth	r2, r3
 8007ae8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007aea:	801a      	strh	r2, [r3, #0]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	657b      	str	r3, [r7, #84]	; 0x54
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	461a      	mov	r2, r3
 8007afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007afc:	4413      	add	r3, r2
 8007afe:	657b      	str	r3, [r7, #84]	; 0x54
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	00da      	lsls	r2, r3, #3
 8007b06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b08:	4413      	add	r3, r2
 8007b0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007b0e:	653b      	str	r3, [r7, #80]	; 0x50
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	895b      	ldrh	r3, [r3, #10]
 8007b14:	085b      	lsrs	r3, r3, #1
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	005b      	lsls	r3, r3, #1
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b1e:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	785b      	ldrb	r3, [r3, #1]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	f040 8093 	bne.w	8007c50 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	781b      	ldrb	r3, [r3, #0]
 8007b30:	009b      	lsls	r3, r3, #2
 8007b32:	4413      	add	r3, r2
 8007b34:	881b      	ldrh	r3, [r3, #0]
 8007b36:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007b3a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d01b      	beq.n	8007b7e <USB_ActivateEndpoint+0x52a>
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	881b      	ldrh	r3, [r3, #0]
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b5c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	781b      	ldrb	r3, [r3, #0]
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	441a      	add	r2, r3
 8007b68:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007b6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b7a:	b29b      	uxth	r3, r3
 8007b7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007b7e:	687a      	ldr	r2, [r7, #4]
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	881b      	ldrh	r3, [r3, #0]
 8007b8a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007b8c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d01b      	beq.n	8007bce <USB_ActivateEndpoint+0x57a>
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4413      	add	r3, r2
 8007ba0:	881b      	ldrh	r3, [r3, #0]
 8007ba2:	b29b      	uxth	r3, r3
 8007ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bac:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	441a      	add	r2, r3
 8007bb8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007bca:	b29b      	uxth	r3, r3
 8007bcc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	881b      	ldrh	r3, [r3, #0]
 8007bda:	b29b      	uxth	r3, r3
 8007bdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007be4:	873b      	strh	r3, [r7, #56]	; 0x38
 8007be6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007be8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007bec:	873b      	strh	r3, [r7, #56]	; 0x38
 8007bee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007bf0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007bf4:	873b      	strh	r3, [r7, #56]	; 0x38
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	781b      	ldrb	r3, [r3, #0]
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	441a      	add	r2, r3
 8007c00:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007c16:	687a      	ldr	r2, [r7, #4]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	009b      	lsls	r3, r3, #2
 8007c1e:	4413      	add	r3, r2
 8007c20:	881b      	ldrh	r3, [r3, #0]
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c2c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007c2e:	687a      	ldr	r2, [r7, #4]
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	441a      	add	r2, r3
 8007c38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	8013      	strh	r3, [r2, #0]
 8007c4e:	e0bc      	b.n	8007dca <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	4413      	add	r3, r2
 8007c5a:	881b      	ldrh	r3, [r3, #0]
 8007c5c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007c60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007c64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d01d      	beq.n	8007ca8 <USB_ActivateEndpoint+0x654>
 8007c6c:	687a      	ldr	r2, [r7, #4]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4413      	add	r3, r2
 8007c76:	881b      	ldrh	r3, [r3, #0]
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c82:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	009b      	lsls	r3, r3, #2
 8007c8e:	441a      	add	r2, r3
 8007c90:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007c94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007ca8:	687a      	ldr	r2, [r7, #4]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	781b      	ldrb	r3, [r3, #0]
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	4413      	add	r3, r2
 8007cb2:	881b      	ldrh	r3, [r3, #0]
 8007cb4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007cb8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d01d      	beq.n	8007d00 <USB_ActivateEndpoint+0x6ac>
 8007cc4:	687a      	ldr	r2, [r7, #4]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	781b      	ldrb	r3, [r3, #0]
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	4413      	add	r3, r2
 8007cce:	881b      	ldrh	r3, [r3, #0]
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cda:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	009b      	lsls	r3, r3, #2
 8007ce6:	441a      	add	r2, r3
 8007ce8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007cec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cf0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cf4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cf8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007cfc:	b29b      	uxth	r3, r3
 8007cfe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	78db      	ldrb	r3, [r3, #3]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d024      	beq.n	8007d52 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007d08:	687a      	ldr	r2, [r7, #4]
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	781b      	ldrb	r3, [r3, #0]
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	4413      	add	r3, r2
 8007d12:	881b      	ldrh	r3, [r3, #0]
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d1e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007d22:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007d26:	f083 0320 	eor.w	r3, r3, #32
 8007d2a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	009b      	lsls	r3, r3, #2
 8007d36:	441a      	add	r2, r3
 8007d38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007d3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	8013      	strh	r3, [r2, #0]
 8007d50:	e01d      	b.n	8007d8e <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	781b      	ldrb	r3, [r3, #0]
 8007d58:	009b      	lsls	r3, r3, #2
 8007d5a:	4413      	add	r3, r2
 8007d5c:	881b      	ldrh	r3, [r3, #0]
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d68:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	009b      	lsls	r3, r3, #2
 8007d74:	441a      	add	r2, r3
 8007d76:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007d7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	683b      	ldr	r3, [r7, #0]
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	009b      	lsls	r3, r3, #2
 8007d96:	4413      	add	r3, r2
 8007d98:	881b      	ldrh	r3, [r3, #0]
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007da0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007da4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	781b      	ldrb	r3, [r3, #0]
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	441a      	add	r2, r3
 8007db2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007db6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007dca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3774      	adds	r7, #116	; 0x74
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd8:	4770      	bx	lr
 8007dda:	bf00      	nop

08007ddc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b08d      	sub	sp, #52	; 0x34
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	7b1b      	ldrb	r3, [r3, #12]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f040 808e 	bne.w	8007f0c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	785b      	ldrb	r3, [r3, #1]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d044      	beq.n	8007e82 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007df8:	687a      	ldr	r2, [r7, #4]
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	781b      	ldrb	r3, [r3, #0]
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	881b      	ldrh	r3, [r3, #0]
 8007e04:	81bb      	strh	r3, [r7, #12]
 8007e06:	89bb      	ldrh	r3, [r7, #12]
 8007e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d01b      	beq.n	8007e48 <USB_DeactivateEndpoint+0x6c>
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	4413      	add	r3, r2
 8007e1a:	881b      	ldrh	r3, [r3, #0]
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e26:	817b      	strh	r3, [r7, #10]
 8007e28:	687a      	ldr	r2, [r7, #4]
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	441a      	add	r2, r3
 8007e32:	897b      	ldrh	r3, [r7, #10]
 8007e34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e48:	687a      	ldr	r2, [r7, #4]
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	009b      	lsls	r3, r3, #2
 8007e50:	4413      	add	r3, r2
 8007e52:	881b      	ldrh	r3, [r3, #0]
 8007e54:	b29b      	uxth	r3, r3
 8007e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e5e:	813b      	strh	r3, [r7, #8]
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	441a      	add	r2, r3
 8007e6a:	893b      	ldrh	r3, [r7, #8]
 8007e6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	8013      	strh	r3, [r2, #0]
 8007e80:	e192      	b.n	80081a8 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	4413      	add	r3, r2
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	827b      	strh	r3, [r7, #18]
 8007e90:	8a7b      	ldrh	r3, [r7, #18]
 8007e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d01b      	beq.n	8007ed2 <USB_DeactivateEndpoint+0xf6>
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eb0:	823b      	strh	r3, [r7, #16]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	441a      	add	r2, r3
 8007ebc:	8a3b      	ldrh	r3, [r7, #16]
 8007ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ec6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	009b      	lsls	r3, r3, #2
 8007eda:	4413      	add	r3, r2
 8007edc:	881b      	ldrh	r3, [r3, #0]
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ee8:	81fb      	strh	r3, [r7, #14]
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	441a      	add	r2, r3
 8007ef4:	89fb      	ldrh	r3, [r7, #14]
 8007ef6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007efa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	8013      	strh	r3, [r2, #0]
 8007f0a:	e14d      	b.n	80081a8 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	785b      	ldrb	r3, [r3, #1]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f040 80a5 	bne.w	8008060 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	881b      	ldrh	r3, [r3, #0]
 8007f22:	843b      	strh	r3, [r7, #32]
 8007f24:	8c3b      	ldrh	r3, [r7, #32]
 8007f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d01b      	beq.n	8007f66 <USB_DeactivateEndpoint+0x18a>
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	009b      	lsls	r3, r3, #2
 8007f36:	4413      	add	r3, r2
 8007f38:	881b      	ldrh	r3, [r3, #0]
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f44:	83fb      	strh	r3, [r7, #30]
 8007f46:	687a      	ldr	r2, [r7, #4]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	009b      	lsls	r3, r3, #2
 8007f4e:	441a      	add	r2, r3
 8007f50:	8bfb      	ldrh	r3, [r7, #30]
 8007f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f5a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f66:	687a      	ldr	r2, [r7, #4]
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	009b      	lsls	r3, r3, #2
 8007f6e:	4413      	add	r3, r2
 8007f70:	881b      	ldrh	r3, [r3, #0]
 8007f72:	83bb      	strh	r3, [r7, #28]
 8007f74:	8bbb      	ldrh	r3, [r7, #28]
 8007f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d01b      	beq.n	8007fb6 <USB_DeactivateEndpoint+0x1da>
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	4413      	add	r3, r2
 8007f88:	881b      	ldrh	r3, [r3, #0]
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f94:	837b      	strh	r3, [r7, #26]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	781b      	ldrb	r3, [r3, #0]
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	441a      	add	r2, r3
 8007fa0:	8b7b      	ldrh	r3, [r7, #26]
 8007fa2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fa6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007faa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007fb6:	687a      	ldr	r2, [r7, #4]
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	881b      	ldrh	r3, [r3, #0]
 8007fc2:	b29b      	uxth	r3, r3
 8007fc4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fcc:	833b      	strh	r3, [r7, #24]
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	441a      	add	r2, r3
 8007fd8:	8b3b      	ldrh	r3, [r7, #24]
 8007fda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fe2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fe6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fea:	b29b      	uxth	r3, r3
 8007fec:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	009b      	lsls	r3, r3, #2
 8007ff6:	4413      	add	r3, r2
 8007ff8:	881b      	ldrh	r3, [r3, #0]
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008004:	82fb      	strh	r3, [r7, #22]
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	009b      	lsls	r3, r3, #2
 800800e:	441a      	add	r2, r3
 8008010:	8afb      	ldrh	r3, [r7, #22]
 8008012:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008016:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800801a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800801e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008022:	b29b      	uxth	r3, r3
 8008024:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	b29b      	uxth	r3, r3
 8008034:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008038:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800803c:	82bb      	strh	r3, [r7, #20]
 800803e:	687a      	ldr	r2, [r7, #4]
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	009b      	lsls	r3, r3, #2
 8008046:	441a      	add	r2, r3
 8008048:	8abb      	ldrh	r3, [r7, #20]
 800804a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800804e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800805a:	b29b      	uxth	r3, r3
 800805c:	8013      	strh	r3, [r2, #0]
 800805e:	e0a3      	b.n	80081a8 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	009b      	lsls	r3, r3, #2
 8008068:	4413      	add	r3, r2
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800806e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008070:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d01b      	beq.n	80080b0 <USB_DeactivateEndpoint+0x2d4>
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	009b      	lsls	r3, r3, #2
 8008080:	4413      	add	r3, r2
 8008082:	881b      	ldrh	r3, [r3, #0]
 8008084:	b29b      	uxth	r3, r3
 8008086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800808a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	441a      	add	r2, r3
 800809a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800809c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	781b      	ldrb	r3, [r3, #0]
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	4413      	add	r3, r2
 80080ba:	881b      	ldrh	r3, [r3, #0]
 80080bc:	857b      	strh	r3, [r7, #42]	; 0x2a
 80080be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80080c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d01b      	beq.n	8008100 <USB_DeactivateEndpoint+0x324>
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	881b      	ldrh	r3, [r3, #0]
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080de:	853b      	strh	r3, [r7, #40]	; 0x28
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	441a      	add	r2, r3
 80080ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80080ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80080fc:	b29b      	uxth	r3, r3
 80080fe:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	881b      	ldrh	r3, [r3, #0]
 800810c:	b29b      	uxth	r3, r3
 800810e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008112:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008116:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008118:	687a      	ldr	r2, [r7, #4]
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	009b      	lsls	r3, r3, #2
 8008120:	441a      	add	r2, r3
 8008122:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008124:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008128:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800812c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008134:	b29b      	uxth	r3, r3
 8008136:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	781b      	ldrb	r3, [r3, #0]
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	4413      	add	r3, r2
 8008142:	881b      	ldrh	r3, [r3, #0]
 8008144:	b29b      	uxth	r3, r3
 8008146:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800814a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800814e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	781b      	ldrb	r3, [r3, #0]
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	441a      	add	r2, r3
 800815a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800815c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800816c:	b29b      	uxth	r3, r3
 800816e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008170:	687a      	ldr	r2, [r7, #4]
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	781b      	ldrb	r3, [r3, #0]
 8008176:	009b      	lsls	r3, r3, #2
 8008178:	4413      	add	r3, r2
 800817a:	881b      	ldrh	r3, [r3, #0]
 800817c:	b29b      	uxth	r3, r3
 800817e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008186:	847b      	strh	r3, [r7, #34]	; 0x22
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	009b      	lsls	r3, r3, #2
 8008190:	441a      	add	r2, r3
 8008192:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008194:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008198:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800819c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3734      	adds	r7, #52	; 0x34
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b0c2      	sub	sp, #264	; 0x108
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80081c4:	6018      	str	r0, [r3, #0]
 80081c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ce:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80081d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	785b      	ldrb	r3, [r3, #1]
 80081dc:	2b01      	cmp	r3, #1
 80081de:	f040 86b7 	bne.w	8008f50 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80081e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699a      	ldr	r2, [r3, #24]
 80081ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80081f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	429a      	cmp	r2, r3
 80081fc:	d908      	bls.n	8008210 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80081fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008202:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	691b      	ldr	r3, [r3, #16]
 800820a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800820e:	e007      	b.n	8008220 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8008210:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008214:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	699b      	ldr	r3, [r3, #24]
 800821c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8008220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	7b1b      	ldrb	r3, [r3, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d13a      	bne.n	80082a6 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8008230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008234:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6959      	ldr	r1, [r3, #20]
 800823c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008240:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	88da      	ldrh	r2, [r3, #6]
 8008248:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800824c:	b29b      	uxth	r3, r3
 800824e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008252:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008256:	6800      	ldr	r0, [r0, #0]
 8008258:	f001 fc98 	bl	8009b8c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800825c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008260:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	613b      	str	r3, [r7, #16]
 8008268:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800826c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008276:	b29b      	uxth	r3, r3
 8008278:	461a      	mov	r2, r3
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	4413      	add	r3, r2
 800827e:	613b      	str	r3, [r7, #16]
 8008280:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008284:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	781b      	ldrb	r3, [r3, #0]
 800828c:	00da      	lsls	r2, r3, #3
 800828e:	693b      	ldr	r3, [r7, #16]
 8008290:	4413      	add	r3, r2
 8008292:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008296:	60fb      	str	r3, [r7, #12]
 8008298:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800829c:	b29a      	uxth	r2, r3
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	801a      	strh	r2, [r3, #0]
 80082a2:	f000 be1f 	b.w	8008ee4 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80082a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	78db      	ldrb	r3, [r3, #3]
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	f040 8462 	bne.w	8008b7c <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80082b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	6a1a      	ldr	r2, [r3, #32]
 80082c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	691b      	ldr	r3, [r3, #16]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	f240 83df 	bls.w	8008a94 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80082d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80082e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	781b      	ldrb	r3, [r3, #0]
 80082ec:	009b      	lsls	r3, r3, #2
 80082ee:	4413      	add	r3, r2
 80082f0:	881b      	ldrh	r3, [r3, #0]
 80082f2:	b29b      	uxth	r3, r3
 80082f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8008300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008304:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800830e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	441a      	add	r2, r3
 800831a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800831e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008326:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800832a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800832e:	b29b      	uxth	r3, r3
 8008330:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8008332:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008336:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	6a1a      	ldr	r2, [r3, #32]
 800833e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008342:	1ad2      	subs	r2, r2, r3
 8008344:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008348:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008350:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008354:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008358:	681a      	ldr	r2, [r3, #0]
 800835a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800835e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4413      	add	r3, r2
 800836a:	881b      	ldrh	r3, [r3, #0]
 800836c:	b29b      	uxth	r3, r3
 800836e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008372:	2b00      	cmp	r3, #0
 8008374:	f000 81c7 	beq.w	8008706 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008378:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800837c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	633b      	str	r3, [r7, #48]	; 0x30
 8008384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	785b      	ldrb	r3, [r3, #1]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d177      	bne.n	8008484 <USB_EPStartXfer+0x2ce>
 8008394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008398:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	62bb      	str	r3, [r7, #40]	; 0x28
 80083a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	461a      	mov	r2, r3
 80083b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083b4:	4413      	add	r3, r2
 80083b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80083b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	781b      	ldrb	r3, [r3, #0]
 80083c4:	00da      	lsls	r2, r3, #3
 80083c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c8:	4413      	add	r3, r2
 80083ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80083ce:	627b      	str	r3, [r7, #36]	; 0x24
 80083d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d2:	881b      	ldrh	r3, [r3, #0]
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083da:	b29a      	uxth	r2, r3
 80083dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083de:	801a      	strh	r2, [r3, #0]
 80083e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083e4:	2b3e      	cmp	r3, #62	; 0x3e
 80083e6:	d921      	bls.n	800842c <USB_EPStartXfer+0x276>
 80083e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083ec:	095b      	lsrs	r3, r3, #5
 80083ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80083f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083f6:	f003 031f 	and.w	r3, r3, #31
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d104      	bne.n	8008408 <USB_EPStartXfer+0x252>
 80083fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008402:	3b01      	subs	r3, #1
 8008404:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840a:	881b      	ldrh	r3, [r3, #0]
 800840c:	b29a      	uxth	r2, r3
 800840e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008412:	b29b      	uxth	r3, r3
 8008414:	029b      	lsls	r3, r3, #10
 8008416:	b29b      	uxth	r3, r3
 8008418:	4313      	orrs	r3, r2
 800841a:	b29b      	uxth	r3, r3
 800841c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008420:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008424:	b29a      	uxth	r2, r3
 8008426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008428:	801a      	strh	r2, [r3, #0]
 800842a:	e050      	b.n	80084ce <USB_EPStartXfer+0x318>
 800842c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008430:	2b00      	cmp	r3, #0
 8008432:	d10a      	bne.n	800844a <USB_EPStartXfer+0x294>
 8008434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008436:	881b      	ldrh	r3, [r3, #0]
 8008438:	b29b      	uxth	r3, r3
 800843a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800843e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008442:	b29a      	uxth	r2, r3
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008446:	801a      	strh	r2, [r3, #0]
 8008448:	e041      	b.n	80084ce <USB_EPStartXfer+0x318>
 800844a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800844e:	085b      	lsrs	r3, r3, #1
 8008450:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008458:	f003 0301 	and.w	r3, r3, #1
 800845c:	2b00      	cmp	r3, #0
 800845e:	d004      	beq.n	800846a <USB_EPStartXfer+0x2b4>
 8008460:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008464:	3301      	adds	r3, #1
 8008466:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800846a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800846c:	881b      	ldrh	r3, [r3, #0]
 800846e:	b29a      	uxth	r2, r3
 8008470:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008474:	b29b      	uxth	r3, r3
 8008476:	029b      	lsls	r3, r3, #10
 8008478:	b29b      	uxth	r3, r3
 800847a:	4313      	orrs	r3, r2
 800847c:	b29a      	uxth	r2, r3
 800847e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008480:	801a      	strh	r2, [r3, #0]
 8008482:	e024      	b.n	80084ce <USB_EPStartXfer+0x318>
 8008484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	785b      	ldrb	r3, [r3, #1]
 8008490:	2b01      	cmp	r3, #1
 8008492:	d11c      	bne.n	80084ce <USB_EPStartXfer+0x318>
 8008494:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008498:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80084a2:	b29b      	uxth	r3, r3
 80084a4:	461a      	mov	r2, r3
 80084a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a8:	4413      	add	r3, r2
 80084aa:	633b      	str	r3, [r7, #48]	; 0x30
 80084ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	781b      	ldrb	r3, [r3, #0]
 80084b8:	00da      	lsls	r2, r3, #3
 80084ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084bc:	4413      	add	r3, r2
 80084be:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80084c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084cc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80084ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	895b      	ldrh	r3, [r3, #10]
 80084da:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	6959      	ldr	r1, [r3, #20]
 80084ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80084f4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80084f8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80084fc:	6800      	ldr	r0, [r0, #0]
 80084fe:	f001 fb45 	bl	8009b8c <USB_WritePMA>
            ep->xfer_buff += len;
 8008502:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008506:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	695a      	ldr	r2, [r3, #20]
 800850e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008512:	441a      	add	r2, r3
 8008514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	6a1a      	ldr	r2, [r3, #32]
 800852c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008530:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	429a      	cmp	r2, r3
 800853a:	d90f      	bls.n	800855c <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800853c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6a1a      	ldr	r2, [r3, #32]
 8008548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800854c:	1ad2      	subs	r2, r2, r3
 800854e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008552:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	621a      	str	r2, [r3, #32]
 800855a:	e00e      	b.n	800857a <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800855c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008560:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	6a1b      	ldr	r3, [r3, #32]
 8008568:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800856c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008570:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2200      	movs	r2, #0
 8008578:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800857a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800857e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	785b      	ldrb	r3, [r3, #1]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d177      	bne.n	800867a <USB_EPStartXfer+0x4c4>
 800858a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800858e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	61bb      	str	r3, [r7, #24]
 8008596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800859a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80085a4:	b29b      	uxth	r3, r3
 80085a6:	461a      	mov	r2, r3
 80085a8:	69bb      	ldr	r3, [r7, #24]
 80085aa:	4413      	add	r3, r2
 80085ac:	61bb      	str	r3, [r7, #24]
 80085ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80085b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	00da      	lsls	r2, r3, #3
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	4413      	add	r3, r2
 80085c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80085c4:	617b      	str	r3, [r7, #20]
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	881b      	ldrh	r3, [r3, #0]
 80085ca:	b29b      	uxth	r3, r3
 80085cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80085d0:	b29a      	uxth	r2, r3
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	801a      	strh	r2, [r3, #0]
 80085d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085da:	2b3e      	cmp	r3, #62	; 0x3e
 80085dc:	d921      	bls.n	8008622 <USB_EPStartXfer+0x46c>
 80085de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085e2:	095b      	lsrs	r3, r3, #5
 80085e4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80085e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085ec:	f003 031f 	and.w	r3, r3, #31
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d104      	bne.n	80085fe <USB_EPStartXfer+0x448>
 80085f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085f8:	3b01      	subs	r3, #1
 80085fa:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80085fe:	697b      	ldr	r3, [r7, #20]
 8008600:	881b      	ldrh	r3, [r3, #0]
 8008602:	b29a      	uxth	r2, r3
 8008604:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008608:	b29b      	uxth	r3, r3
 800860a:	029b      	lsls	r3, r3, #10
 800860c:	b29b      	uxth	r3, r3
 800860e:	4313      	orrs	r3, r2
 8008610:	b29b      	uxth	r3, r3
 8008612:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008616:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800861a:	b29a      	uxth	r2, r3
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	801a      	strh	r2, [r3, #0]
 8008620:	e056      	b.n	80086d0 <USB_EPStartXfer+0x51a>
 8008622:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10a      	bne.n	8008640 <USB_EPStartXfer+0x48a>
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	881b      	ldrh	r3, [r3, #0]
 800862e:	b29b      	uxth	r3, r3
 8008630:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008634:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008638:	b29a      	uxth	r2, r3
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	801a      	strh	r2, [r3, #0]
 800863e:	e047      	b.n	80086d0 <USB_EPStartXfer+0x51a>
 8008640:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008644:	085b      	lsrs	r3, r3, #1
 8008646:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800864a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800864e:	f003 0301 	and.w	r3, r3, #1
 8008652:	2b00      	cmp	r3, #0
 8008654:	d004      	beq.n	8008660 <USB_EPStartXfer+0x4aa>
 8008656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800865a:	3301      	adds	r3, #1
 800865c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	881b      	ldrh	r3, [r3, #0]
 8008664:	b29a      	uxth	r2, r3
 8008666:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800866a:	b29b      	uxth	r3, r3
 800866c:	029b      	lsls	r3, r3, #10
 800866e:	b29b      	uxth	r3, r3
 8008670:	4313      	orrs	r3, r2
 8008672:	b29a      	uxth	r2, r3
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	801a      	strh	r2, [r3, #0]
 8008678:	e02a      	b.n	80086d0 <USB_EPStartXfer+0x51a>
 800867a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800867e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	785b      	ldrb	r3, [r3, #1]
 8008686:	2b01      	cmp	r3, #1
 8008688:	d122      	bne.n	80086d0 <USB_EPStartXfer+0x51a>
 800868a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800868e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	623b      	str	r3, [r7, #32]
 8008696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800869a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80086a4:	b29b      	uxth	r3, r3
 80086a6:	461a      	mov	r2, r3
 80086a8:	6a3b      	ldr	r3, [r7, #32]
 80086aa:	4413      	add	r3, r2
 80086ac:	623b      	str	r3, [r7, #32]
 80086ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	781b      	ldrb	r3, [r3, #0]
 80086ba:	00da      	lsls	r2, r3, #3
 80086bc:	6a3b      	ldr	r3, [r7, #32]
 80086be:	4413      	add	r3, r2
 80086c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80086c4:	61fb      	str	r3, [r7, #28]
 80086c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ca:	b29a      	uxth	r2, r3
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80086d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	891b      	ldrh	r3, [r3, #8]
 80086dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80086e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	6959      	ldr	r1, [r3, #20]
 80086ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086f0:	b29b      	uxth	r3, r3
 80086f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80086f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80086fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80086fe:	6800      	ldr	r0, [r0, #0]
 8008700:	f001 fa44 	bl	8009b8c <USB_WritePMA>
 8008704:	e3ee      	b.n	8008ee4 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800870a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	785b      	ldrb	r3, [r3, #1]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d177      	bne.n	8008806 <USB_EPStartXfer+0x650>
 8008716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800871a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	64bb      	str	r3, [r7, #72]	; 0x48
 8008722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008726:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008730:	b29b      	uxth	r3, r3
 8008732:	461a      	mov	r2, r3
 8008734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008736:	4413      	add	r3, r2
 8008738:	64bb      	str	r3, [r7, #72]	; 0x48
 800873a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800873e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	00da      	lsls	r2, r3, #3
 8008748:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800874a:	4413      	add	r3, r2
 800874c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008750:	647b      	str	r3, [r7, #68]	; 0x44
 8008752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008754:	881b      	ldrh	r3, [r3, #0]
 8008756:	b29b      	uxth	r3, r3
 8008758:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800875c:	b29a      	uxth	r2, r3
 800875e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008760:	801a      	strh	r2, [r3, #0]
 8008762:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008766:	2b3e      	cmp	r3, #62	; 0x3e
 8008768:	d921      	bls.n	80087ae <USB_EPStartXfer+0x5f8>
 800876a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800876e:	095b      	lsrs	r3, r3, #5
 8008770:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008774:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008778:	f003 031f 	and.w	r3, r3, #31
 800877c:	2b00      	cmp	r3, #0
 800877e:	d104      	bne.n	800878a <USB_EPStartXfer+0x5d4>
 8008780:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008784:	3b01      	subs	r3, #1
 8008786:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800878a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800878c:	881b      	ldrh	r3, [r3, #0]
 800878e:	b29a      	uxth	r2, r3
 8008790:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008794:	b29b      	uxth	r3, r3
 8008796:	029b      	lsls	r3, r3, #10
 8008798:	b29b      	uxth	r3, r3
 800879a:	4313      	orrs	r3, r2
 800879c:	b29b      	uxth	r3, r3
 800879e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087a6:	b29a      	uxth	r2, r3
 80087a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087aa:	801a      	strh	r2, [r3, #0]
 80087ac:	e056      	b.n	800885c <USB_EPStartXfer+0x6a6>
 80087ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10a      	bne.n	80087cc <USB_EPStartXfer+0x616>
 80087b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087b8:	881b      	ldrh	r3, [r3, #0]
 80087ba:	b29b      	uxth	r3, r3
 80087bc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087c0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087c4:	b29a      	uxth	r2, r3
 80087c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087c8:	801a      	strh	r2, [r3, #0]
 80087ca:	e047      	b.n	800885c <USB_EPStartXfer+0x6a6>
 80087cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087d0:	085b      	lsrs	r3, r3, #1
 80087d2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80087d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d004      	beq.n	80087ec <USB_EPStartXfer+0x636>
 80087e2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087e6:	3301      	adds	r3, #1
 80087e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80087ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087ee:	881b      	ldrh	r3, [r3, #0]
 80087f0:	b29a      	uxth	r2, r3
 80087f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80087f6:	b29b      	uxth	r3, r3
 80087f8:	029b      	lsls	r3, r3, #10
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	4313      	orrs	r3, r2
 80087fe:	b29a      	uxth	r2, r3
 8008800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008802:	801a      	strh	r2, [r3, #0]
 8008804:	e02a      	b.n	800885c <USB_EPStartXfer+0x6a6>
 8008806:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800880a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	785b      	ldrb	r3, [r3, #1]
 8008812:	2b01      	cmp	r3, #1
 8008814:	d122      	bne.n	800885c <USB_EPStartXfer+0x6a6>
 8008816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800881a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	653b      	str	r3, [r7, #80]	; 0x50
 8008822:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008826:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008830:	b29b      	uxth	r3, r3
 8008832:	461a      	mov	r2, r3
 8008834:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008836:	4413      	add	r3, r2
 8008838:	653b      	str	r3, [r7, #80]	; 0x50
 800883a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800883e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	781b      	ldrb	r3, [r3, #0]
 8008846:	00da      	lsls	r2, r3, #3
 8008848:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800884a:	4413      	add	r3, r2
 800884c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008850:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008856:	b29a      	uxth	r2, r3
 8008858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800885a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800885c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008860:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	891b      	ldrh	r3, [r3, #8]
 8008868:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800886c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	6959      	ldr	r1, [r3, #20]
 8008878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800887c:	b29b      	uxth	r3, r3
 800887e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008882:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008886:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800888a:	6800      	ldr	r0, [r0, #0]
 800888c:	f001 f97e 	bl	8009b8c <USB_WritePMA>
            ep->xfer_buff += len;
 8008890:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008894:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	695a      	ldr	r2, [r3, #20]
 800889c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088a0:	441a      	add	r2, r3
 80088a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80088ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	6a1a      	ldr	r2, [r3, #32]
 80088ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	691b      	ldr	r3, [r3, #16]
 80088c6:	429a      	cmp	r2, r3
 80088c8:	d90f      	bls.n	80088ea <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 80088ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	6a1a      	ldr	r2, [r3, #32]
 80088d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088da:	1ad2      	subs	r2, r2, r3
 80088dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	621a      	str	r2, [r3, #32]
 80088e8:	e00e      	b.n	8008908 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 80088ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	6a1b      	ldr	r3, [r3, #32]
 80088f6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80088fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2200      	movs	r2, #0
 8008906:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800890c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	643b      	str	r3, [r7, #64]	; 0x40
 8008914:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008918:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	785b      	ldrb	r3, [r3, #1]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d177      	bne.n	8008a14 <USB_EPStartXfer+0x85e>
 8008924:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008928:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008930:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008934:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800893e:	b29b      	uxth	r3, r3
 8008940:	461a      	mov	r2, r3
 8008942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008944:	4413      	add	r3, r2
 8008946:	63bb      	str	r3, [r7, #56]	; 0x38
 8008948:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800894c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	00da      	lsls	r2, r3, #3
 8008956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008958:	4413      	add	r3, r2
 800895a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800895e:	637b      	str	r3, [r7, #52]	; 0x34
 8008960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008962:	881b      	ldrh	r3, [r3, #0]
 8008964:	b29b      	uxth	r3, r3
 8008966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800896a:	b29a      	uxth	r2, r3
 800896c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800896e:	801a      	strh	r2, [r3, #0]
 8008970:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008974:	2b3e      	cmp	r3, #62	; 0x3e
 8008976:	d921      	bls.n	80089bc <USB_EPStartXfer+0x806>
 8008978:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800897c:	095b      	lsrs	r3, r3, #5
 800897e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008982:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008986:	f003 031f 	and.w	r3, r3, #31
 800898a:	2b00      	cmp	r3, #0
 800898c:	d104      	bne.n	8008998 <USB_EPStartXfer+0x7e2>
 800898e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008992:	3b01      	subs	r3, #1
 8008994:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800899a:	881b      	ldrh	r3, [r3, #0]
 800899c:	b29a      	uxth	r2, r3
 800899e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089a2:	b29b      	uxth	r3, r3
 80089a4:	029b      	lsls	r3, r3, #10
 80089a6:	b29b      	uxth	r3, r3
 80089a8:	4313      	orrs	r3, r2
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089b8:	801a      	strh	r2, [r3, #0]
 80089ba:	e050      	b.n	8008a5e <USB_EPStartXfer+0x8a8>
 80089bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d10a      	bne.n	80089da <USB_EPStartXfer+0x824>
 80089c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089c6:	881b      	ldrh	r3, [r3, #0]
 80089c8:	b29b      	uxth	r3, r3
 80089ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80089ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80089d2:	b29a      	uxth	r2, r3
 80089d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089d6:	801a      	strh	r2, [r3, #0]
 80089d8:	e041      	b.n	8008a5e <USB_EPStartXfer+0x8a8>
 80089da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089de:	085b      	lsrs	r3, r3, #1
 80089e0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80089e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089e8:	f003 0301 	and.w	r3, r3, #1
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d004      	beq.n	80089fa <USB_EPStartXfer+0x844>
 80089f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089f4:	3301      	adds	r3, #1
 80089f6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80089fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089fc:	881b      	ldrh	r3, [r3, #0]
 80089fe:	b29a      	uxth	r2, r3
 8008a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a04:	b29b      	uxth	r3, r3
 8008a06:	029b      	lsls	r3, r3, #10
 8008a08:	b29b      	uxth	r3, r3
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	b29a      	uxth	r2, r3
 8008a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a10:	801a      	strh	r2, [r3, #0]
 8008a12:	e024      	b.n	8008a5e <USB_EPStartXfer+0x8a8>
 8008a14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a18:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	785b      	ldrb	r3, [r3, #1]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	d11c      	bne.n	8008a5e <USB_EPStartXfer+0x8a8>
 8008a24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a32:	b29b      	uxth	r3, r3
 8008a34:	461a      	mov	r2, r3
 8008a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a38:	4413      	add	r3, r2
 8008a3a:	643b      	str	r3, [r7, #64]	; 0x40
 8008a3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a40:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	00da      	lsls	r2, r3, #3
 8008a4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a4c:	4413      	add	r3, r2
 8008a4e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a54:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a58:	b29a      	uxth	r2, r3
 8008a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008a5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	895b      	ldrh	r3, [r3, #10]
 8008a6a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	6959      	ldr	r1, [r3, #20]
 8008a7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a7e:	b29b      	uxth	r3, r3
 8008a80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008a84:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008a88:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008a8c:	6800      	ldr	r0, [r0, #0]
 8008a8e:	f001 f87d 	bl	8009b8c <USB_WritePMA>
 8008a92:	e227      	b.n	8008ee4 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008a94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	6a1b      	ldr	r3, [r3, #32]
 8008aa0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aac:	681a      	ldr	r2, [r3, #0]
 8008aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ab2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	4413      	add	r3, r2
 8008abe:	881b      	ldrh	r3, [r3, #0]
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008aca:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008ace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ad6:	681a      	ldr	r2, [r3, #0]
 8008ad8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008adc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	781b      	ldrb	r3, [r3, #0]
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	441a      	add	r2, r3
 8008ae8:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008aec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008af0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008af4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b1a:	b29b      	uxth	r3, r3
 8008b1c:	461a      	mov	r2, r3
 8008b1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b20:	4413      	add	r3, r2
 8008b22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	781b      	ldrb	r3, [r3, #0]
 8008b30:	00da      	lsls	r2, r3, #3
 8008b32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b34:	4413      	add	r3, r2
 8008b36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008b3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b40:	b29a      	uxth	r2, r3
 8008b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b44:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008b46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	891b      	ldrh	r3, [r3, #8]
 8008b52:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	6959      	ldr	r1, [r3, #20]
 8008b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008b6c:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008b70:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008b74:	6800      	ldr	r0, [r0, #0]
 8008b76:	f001 f809 	bl	8009b8c <USB_WritePMA>
 8008b7a:	e1b3      	b.n	8008ee4 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008b7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	6a1a      	ldr	r2, [r3, #32]
 8008b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b8c:	1ad2      	subs	r2, r2, r3
 8008b8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008b9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b9e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ba2:	681a      	ldr	r2, [r3, #0]
 8008ba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ba8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	781b      	ldrb	r3, [r3, #0]
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4413      	add	r3, r2
 8008bb4:	881b      	ldrh	r3, [r3, #0]
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 80c6 	beq.w	8008d4e <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008bc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	673b      	str	r3, [r7, #112]	; 0x70
 8008bce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	785b      	ldrb	r3, [r3, #1]
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d177      	bne.n	8008cce <USB_EPStartXfer+0xb18>
 8008bde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008be2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	66bb      	str	r3, [r7, #104]	; 0x68
 8008bea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bf8:	b29b      	uxth	r3, r3
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008bfe:	4413      	add	r3, r2
 8008c00:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	781b      	ldrb	r3, [r3, #0]
 8008c0e:	00da      	lsls	r2, r3, #3
 8008c10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008c12:	4413      	add	r3, r2
 8008c14:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008c18:	667b      	str	r3, [r7, #100]	; 0x64
 8008c1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c1c:	881b      	ldrh	r3, [r3, #0]
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c24:	b29a      	uxth	r2, r3
 8008c26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c28:	801a      	strh	r2, [r3, #0]
 8008c2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c2e:	2b3e      	cmp	r3, #62	; 0x3e
 8008c30:	d921      	bls.n	8008c76 <USB_EPStartXfer+0xac0>
 8008c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c36:	095b      	lsrs	r3, r3, #5
 8008c38:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c40:	f003 031f 	and.w	r3, r3, #31
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d104      	bne.n	8008c52 <USB_EPStartXfer+0xa9c>
 8008c48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008c4c:	3b01      	subs	r3, #1
 8008c4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c54:	881b      	ldrh	r3, [r3, #0]
 8008c56:	b29a      	uxth	r2, r3
 8008c58:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	029b      	lsls	r3, r3, #10
 8008c60:	b29b      	uxth	r3, r3
 8008c62:	4313      	orrs	r3, r2
 8008c64:	b29b      	uxth	r3, r3
 8008c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c6e:	b29a      	uxth	r2, r3
 8008c70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c72:	801a      	strh	r2, [r3, #0]
 8008c74:	e050      	b.n	8008d18 <USB_EPStartXfer+0xb62>
 8008c76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d10a      	bne.n	8008c94 <USB_EPStartXfer+0xade>
 8008c7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c80:	881b      	ldrh	r3, [r3, #0]
 8008c82:	b29b      	uxth	r3, r3
 8008c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c8c:	b29a      	uxth	r2, r3
 8008c8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c90:	801a      	strh	r2, [r3, #0]
 8008c92:	e041      	b.n	8008d18 <USB_EPStartXfer+0xb62>
 8008c94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c98:	085b      	lsrs	r3, r3, #1
 8008c9a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d004      	beq.n	8008cb4 <USB_EPStartXfer+0xafe>
 8008caa:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008cae:	3301      	adds	r3, #1
 8008cb0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008cb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cb6:	881b      	ldrh	r3, [r3, #0]
 8008cb8:	b29a      	uxth	r2, r3
 8008cba:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	029b      	lsls	r3, r3, #10
 8008cc2:	b29b      	uxth	r3, r3
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	b29a      	uxth	r2, r3
 8008cc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008cca:	801a      	strh	r2, [r3, #0]
 8008ccc:	e024      	b.n	8008d18 <USB_EPStartXfer+0xb62>
 8008cce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cd2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	785b      	ldrb	r3, [r3, #1]
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d11c      	bne.n	8008d18 <USB_EPStartXfer+0xb62>
 8008cde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ce2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	461a      	mov	r2, r3
 8008cf0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008cf2:	4413      	add	r3, r2
 8008cf4:	673b      	str	r3, [r7, #112]	; 0x70
 8008cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	00da      	lsls	r2, r3, #3
 8008d04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d06:	4413      	add	r3, r2
 8008d08:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008d0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d16:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	895b      	ldrh	r3, [r3, #10]
 8008d24:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	6959      	ldr	r1, [r3, #20]
 8008d34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008d3e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008d42:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008d46:	6800      	ldr	r0, [r0, #0]
 8008d48:	f000 ff20 	bl	8009b8c <USB_WritePMA>
 8008d4c:	e0ca      	b.n	8008ee4 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	785b      	ldrb	r3, [r3, #1]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d177      	bne.n	8008e4e <USB_EPStartXfer+0xc98>
 8008d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d7e:	4413      	add	r3, r2
 8008d80:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	781b      	ldrb	r3, [r3, #0]
 8008d8e:	00da      	lsls	r2, r3, #3
 8008d90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d92:	4413      	add	r3, r2
 8008d94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d98:	67bb      	str	r3, [r7, #120]	; 0x78
 8008d9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d9c:	881b      	ldrh	r3, [r3, #0]
 8008d9e:	b29b      	uxth	r3, r3
 8008da0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008da4:	b29a      	uxth	r2, r3
 8008da6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008da8:	801a      	strh	r2, [r3, #0]
 8008daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dae:	2b3e      	cmp	r3, #62	; 0x3e
 8008db0:	d921      	bls.n	8008df6 <USB_EPStartXfer+0xc40>
 8008db2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008db6:	095b      	lsrs	r3, r3, #5
 8008db8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dc0:	f003 031f 	and.w	r3, r3, #31
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d104      	bne.n	8008dd2 <USB_EPStartXfer+0xc1c>
 8008dc8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008dd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dd4:	881b      	ldrh	r3, [r3, #0]
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008ddc:	b29b      	uxth	r3, r3
 8008dde:	029b      	lsls	r3, r3, #10
 8008de0:	b29b      	uxth	r3, r3
 8008de2:	4313      	orrs	r3, r2
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008df2:	801a      	strh	r2, [r3, #0]
 8008df4:	e05c      	b.n	8008eb0 <USB_EPStartXfer+0xcfa>
 8008df6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10a      	bne.n	8008e14 <USB_EPStartXfer+0xc5e>
 8008dfe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e00:	881b      	ldrh	r3, [r3, #0]
 8008e02:	b29b      	uxth	r3, r3
 8008e04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e10:	801a      	strh	r2, [r3, #0]
 8008e12:	e04d      	b.n	8008eb0 <USB_EPStartXfer+0xcfa>
 8008e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e18:	085b      	lsrs	r3, r3, #1
 8008e1a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e22:	f003 0301 	and.w	r3, r3, #1
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d004      	beq.n	8008e34 <USB_EPStartXfer+0xc7e>
 8008e2a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008e2e:	3301      	adds	r3, #1
 8008e30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008e34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e36:	881b      	ldrh	r3, [r3, #0]
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008e3e:	b29b      	uxth	r3, r3
 8008e40:	029b      	lsls	r3, r3, #10
 8008e42:	b29b      	uxth	r3, r3
 8008e44:	4313      	orrs	r3, r2
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e4a:	801a      	strh	r2, [r3, #0]
 8008e4c:	e030      	b.n	8008eb0 <USB_EPStartXfer+0xcfa>
 8008e4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	785b      	ldrb	r3, [r3, #1]
 8008e5a:	2b01      	cmp	r3, #1
 8008e5c:	d128      	bne.n	8008eb0 <USB_EPStartXfer+0xcfa>
 8008e5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e7a:	b29b      	uxth	r3, r3
 8008e7c:	461a      	mov	r2, r3
 8008e7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e82:	4413      	add	r3, r2
 8008e84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	00da      	lsls	r2, r3, #3
 8008e96:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ea0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ea8:	b29a      	uxth	r2, r3
 8008eaa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008eae:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008eb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	891b      	ldrh	r3, [r3, #8]
 8008ebc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ec0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ec4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	6959      	ldr	r1, [r3, #20]
 8008ecc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008ed6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008eda:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008ede:	6800      	ldr	r0, [r0, #0]
 8008ee0:	f000 fe54 	bl	8009b8c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008ee4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ee8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ef2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	781b      	ldrb	r3, [r3, #0]
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	4413      	add	r3, r2
 8008efe:	881b      	ldrh	r3, [r3, #0]
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f06:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f0a:	817b      	strh	r3, [r7, #10]
 8008f0c:	897b      	ldrh	r3, [r7, #10]
 8008f0e:	f083 0310 	eor.w	r3, r3, #16
 8008f12:	817b      	strh	r3, [r7, #10]
 8008f14:	897b      	ldrh	r3, [r7, #10]
 8008f16:	f083 0320 	eor.w	r3, r3, #32
 8008f1a:	817b      	strh	r3, [r7, #10]
 8008f1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	009b      	lsls	r3, r3, #2
 8008f34:	441a      	add	r2, r3
 8008f36:	897b      	ldrh	r3, [r7, #10]
 8008f38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	8013      	strh	r3, [r2, #0]
 8008f4c:	f000 bcde 	b.w	800990c <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8008f50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	7b1b      	ldrb	r3, [r3, #12]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f040 80bb 	bne.w	80090d8 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8008f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	699a      	ldr	r2, [r3, #24]
 8008f6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f72:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d917      	bls.n	8008fae <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8008f7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	691b      	ldr	r3, [r3, #16]
 8008f8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 8008f8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	699a      	ldr	r2, [r3, #24]
 8008f9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f9e:	1ad2      	subs	r2, r2, r3
 8008fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fa4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	619a      	str	r2, [r3, #24]
 8008fac:	e00e      	b.n	8008fcc <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 8008fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	699b      	ldr	r3, [r3, #24]
 8008fba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 8008fbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8008fcc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fd0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008fda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	461a      	mov	r2, r3
 8008fec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ffa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	781b      	ldrb	r3, [r3, #0]
 8009002:	00da      	lsls	r2, r3, #3
 8009004:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009008:	4413      	add	r3, r2
 800900a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800900e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009012:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009016:	881b      	ldrh	r3, [r3, #0]
 8009018:	b29b      	uxth	r3, r3
 800901a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800901e:	b29a      	uxth	r2, r3
 8009020:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009024:	801a      	strh	r2, [r3, #0]
 8009026:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800902a:	2b3e      	cmp	r3, #62	; 0x3e
 800902c:	d924      	bls.n	8009078 <USB_EPStartXfer+0xec2>
 800902e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009032:	095b      	lsrs	r3, r3, #5
 8009034:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800903c:	f003 031f 	and.w	r3, r3, #31
 8009040:	2b00      	cmp	r3, #0
 8009042:	d104      	bne.n	800904e <USB_EPStartXfer+0xe98>
 8009044:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009048:	3b01      	subs	r3, #1
 800904a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800904e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009052:	881b      	ldrh	r3, [r3, #0]
 8009054:	b29a      	uxth	r2, r3
 8009056:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800905a:	b29b      	uxth	r3, r3
 800905c:	029b      	lsls	r3, r3, #10
 800905e:	b29b      	uxth	r3, r3
 8009060:	4313      	orrs	r3, r2
 8009062:	b29b      	uxth	r3, r3
 8009064:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009068:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800906c:	b29a      	uxth	r2, r3
 800906e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009072:	801a      	strh	r2, [r3, #0]
 8009074:	f000 bc10 	b.w	8009898 <USB_EPStartXfer+0x16e2>
 8009078:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800907c:	2b00      	cmp	r3, #0
 800907e:	d10c      	bne.n	800909a <USB_EPStartXfer+0xee4>
 8009080:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009084:	881b      	ldrh	r3, [r3, #0]
 8009086:	b29b      	uxth	r3, r3
 8009088:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800908c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009090:	b29a      	uxth	r2, r3
 8009092:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009096:	801a      	strh	r2, [r3, #0]
 8009098:	e3fe      	b.n	8009898 <USB_EPStartXfer+0x16e2>
 800909a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800909e:	085b      	lsrs	r3, r3, #1
 80090a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80090a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d004      	beq.n	80090ba <USB_EPStartXfer+0xf04>
 80090b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090b4:	3301      	adds	r3, #1
 80090b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80090ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090be:	881b      	ldrh	r3, [r3, #0]
 80090c0:	b29a      	uxth	r2, r3
 80090c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80090c6:	b29b      	uxth	r3, r3
 80090c8:	029b      	lsls	r3, r3, #10
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	4313      	orrs	r3, r2
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80090d4:	801a      	strh	r2, [r3, #0]
 80090d6:	e3df      	b.n	8009898 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80090d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	78db      	ldrb	r3, [r3, #3]
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	f040 8218 	bne.w	800951a <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80090ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	785b      	ldrb	r3, [r3, #1]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	f040 809d 	bne.w	8009236 <USB_EPStartXfer+0x1080>
 80090fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009100:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800910a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800910e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009118:	b29b      	uxth	r3, r3
 800911a:	461a      	mov	r2, r3
 800911c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009120:	4413      	add	r3, r2
 8009122:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009126:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800912a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	781b      	ldrb	r3, [r3, #0]
 8009132:	00da      	lsls	r2, r3, #3
 8009134:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009138:	4413      	add	r3, r2
 800913a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800913e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009142:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	b29b      	uxth	r3, r3
 800914a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800914e:	b29a      	uxth	r2, r3
 8009150:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009154:	801a      	strh	r2, [r3, #0]
 8009156:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800915a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	2b3e      	cmp	r3, #62	; 0x3e
 8009164:	d92b      	bls.n	80091be <USB_EPStartXfer+0x1008>
 8009166:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800916a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	691b      	ldr	r3, [r3, #16]
 8009172:	095b      	lsrs	r3, r3, #5
 8009174:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800917c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	f003 031f 	and.w	r3, r3, #31
 8009188:	2b00      	cmp	r3, #0
 800918a:	d104      	bne.n	8009196 <USB_EPStartXfer+0xfe0>
 800918c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009190:	3b01      	subs	r3, #1
 8009192:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009196:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800919a:	881b      	ldrh	r3, [r3, #0]
 800919c:	b29a      	uxth	r2, r3
 800919e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091a2:	b29b      	uxth	r3, r3
 80091a4:	029b      	lsls	r3, r3, #10
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	4313      	orrs	r3, r2
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091b0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091ba:	801a      	strh	r2, [r3, #0]
 80091bc:	e070      	b.n	80092a0 <USB_EPStartXfer+0x10ea>
 80091be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	691b      	ldr	r3, [r3, #16]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10c      	bne.n	80091e8 <USB_EPStartXfer+0x1032>
 80091ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091d2:	881b      	ldrh	r3, [r3, #0]
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80091da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80091de:	b29a      	uxth	r2, r3
 80091e0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80091e4:	801a      	strh	r2, [r3, #0]
 80091e6:	e05b      	b.n	80092a0 <USB_EPStartXfer+0x10ea>
 80091e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	691b      	ldr	r3, [r3, #16]
 80091f4:	085b      	lsrs	r3, r3, #1
 80091f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80091fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	f003 0301 	and.w	r3, r3, #1
 800920a:	2b00      	cmp	r3, #0
 800920c:	d004      	beq.n	8009218 <USB_EPStartXfer+0x1062>
 800920e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009212:	3301      	adds	r3, #1
 8009214:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009218:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800921c:	881b      	ldrh	r3, [r3, #0]
 800921e:	b29a      	uxth	r2, r3
 8009220:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009224:	b29b      	uxth	r3, r3
 8009226:	029b      	lsls	r3, r3, #10
 8009228:	b29b      	uxth	r3, r3
 800922a:	4313      	orrs	r3, r2
 800922c:	b29a      	uxth	r2, r3
 800922e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009232:	801a      	strh	r2, [r3, #0]
 8009234:	e034      	b.n	80092a0 <USB_EPStartXfer+0x10ea>
 8009236:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800923a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	785b      	ldrb	r3, [r3, #1]
 8009242:	2b01      	cmp	r3, #1
 8009244:	d12c      	bne.n	80092a0 <USB_EPStartXfer+0x10ea>
 8009246:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800924a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009254:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009258:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009262:	b29b      	uxth	r3, r3
 8009264:	461a      	mov	r2, r3
 8009266:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800926a:	4413      	add	r3, r2
 800926c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009270:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009274:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	781b      	ldrb	r3, [r3, #0]
 800927c:	00da      	lsls	r2, r3, #3
 800927e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009282:	4413      	add	r3, r2
 8009284:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009288:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800928c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009290:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	b29a      	uxth	r2, r3
 800929a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800929e:	801a      	strh	r2, [r3, #0]
 80092a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80092ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	785b      	ldrb	r3, [r3, #1]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f040 809d 	bne.w	80093fa <USB_EPStartXfer+0x1244>
 80092c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80092ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092dc:	b29b      	uxth	r3, r3
 80092de:	461a      	mov	r2, r3
 80092e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092e4:	4413      	add	r3, r2
 80092e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80092ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	00da      	lsls	r2, r3, #3
 80092f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80092fc:	4413      	add	r3, r2
 80092fe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009302:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009306:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800930a:	881b      	ldrh	r3, [r3, #0]
 800930c:	b29b      	uxth	r3, r3
 800930e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009312:	b29a      	uxth	r2, r3
 8009314:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009318:	801a      	strh	r2, [r3, #0]
 800931a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800931e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	2b3e      	cmp	r3, #62	; 0x3e
 8009328:	d92b      	bls.n	8009382 <USB_EPStartXfer+0x11cc>
 800932a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800932e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	691b      	ldr	r3, [r3, #16]
 8009336:	095b      	lsrs	r3, r3, #5
 8009338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800933c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009340:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	691b      	ldr	r3, [r3, #16]
 8009348:	f003 031f 	and.w	r3, r3, #31
 800934c:	2b00      	cmp	r3, #0
 800934e:	d104      	bne.n	800935a <USB_EPStartXfer+0x11a4>
 8009350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009354:	3b01      	subs	r3, #1
 8009356:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800935a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800935e:	881b      	ldrh	r3, [r3, #0]
 8009360:	b29a      	uxth	r2, r3
 8009362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009366:	b29b      	uxth	r3, r3
 8009368:	029b      	lsls	r3, r3, #10
 800936a:	b29b      	uxth	r3, r3
 800936c:	4313      	orrs	r3, r2
 800936e:	b29b      	uxth	r3, r3
 8009370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009378:	b29a      	uxth	r2, r3
 800937a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800937e:	801a      	strh	r2, [r3, #0]
 8009380:	e069      	b.n	8009456 <USB_EPStartXfer+0x12a0>
 8009382:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d10c      	bne.n	80093ac <USB_EPStartXfer+0x11f6>
 8009392:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009396:	881b      	ldrh	r3, [r3, #0]
 8009398:	b29b      	uxth	r3, r3
 800939a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800939e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80093a2:	b29a      	uxth	r2, r3
 80093a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093a8:	801a      	strh	r2, [r3, #0]
 80093aa:	e054      	b.n	8009456 <USB_EPStartXfer+0x12a0>
 80093ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	691b      	ldr	r3, [r3, #16]
 80093b8:	085b      	lsrs	r3, r3, #1
 80093ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	691b      	ldr	r3, [r3, #16]
 80093ca:	f003 0301 	and.w	r3, r3, #1
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d004      	beq.n	80093dc <USB_EPStartXfer+0x1226>
 80093d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093d6:	3301      	adds	r3, #1
 80093d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80093dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093e0:	881b      	ldrh	r3, [r3, #0]
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80093e8:	b29b      	uxth	r3, r3
 80093ea:	029b      	lsls	r3, r3, #10
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	4313      	orrs	r3, r2
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80093f6:	801a      	strh	r2, [r3, #0]
 80093f8:	e02d      	b.n	8009456 <USB_EPStartXfer+0x12a0>
 80093fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	785b      	ldrb	r3, [r3, #1]
 8009406:	2b01      	cmp	r3, #1
 8009408:	d125      	bne.n	8009456 <USB_EPStartXfer+0x12a0>
 800940a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800940e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009418:	b29b      	uxth	r3, r3
 800941a:	461a      	mov	r2, r3
 800941c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009420:	4413      	add	r3, r2
 8009422:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800942a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	00da      	lsls	r2, r3, #3
 8009434:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009438:	4413      	add	r3, r2
 800943a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800943e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	b29a      	uxth	r2, r3
 8009450:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009454:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009456:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800945a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	69db      	ldr	r3, [r3, #28]
 8009462:	2b00      	cmp	r3, #0
 8009464:	f000 8218 	beq.w	8009898 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009468:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800946c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	4413      	add	r3, r2
 8009482:	881b      	ldrh	r3, [r3, #0]
 8009484:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009488:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800948c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009490:	2b00      	cmp	r3, #0
 8009492:	d005      	beq.n	80094a0 <USB_EPStartXfer+0x12ea>
 8009494:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10d      	bne.n	80094bc <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80094a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80094a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	f040 81f5 	bne.w	8009898 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80094ae:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 80094b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	f040 81ee 	bne.w	8009898 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80094bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4413      	add	r3, r2
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	b29b      	uxth	r3, r3
 80094da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094e2:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80094e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	441a      	add	r2, r3
 8009500:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009504:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009508:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800950c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009510:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009514:	b29b      	uxth	r3, r3
 8009516:	8013      	strh	r3, [r2, #0]
 8009518:	e1be      	b.n	8009898 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800951a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800951e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	78db      	ldrb	r3, [r3, #3]
 8009526:	2b01      	cmp	r3, #1
 8009528:	f040 81b4 	bne.w	8009894 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800952c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009530:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	699a      	ldr	r2, [r3, #24]
 8009538:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800953c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	691b      	ldr	r3, [r3, #16]
 8009544:	429a      	cmp	r2, r3
 8009546:	d917      	bls.n	8009578 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800954c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	691b      	ldr	r3, [r3, #16]
 8009554:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800955c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	699a      	ldr	r2, [r3, #24]
 8009564:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009568:	1ad2      	subs	r2, r2, r3
 800956a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800956e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	619a      	str	r2, [r3, #24]
 8009576:	e00e      	b.n	8009596 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009578:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800957c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	699b      	ldr	r3, [r3, #24]
 8009584:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800958c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	2200      	movs	r2, #0
 8009594:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800959a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	785b      	ldrb	r3, [r3, #1]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f040 8085 	bne.w	80096b2 <USB_EPStartXfer+0x14fc>
 80095a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80095b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	461a      	mov	r2, r3
 80095c8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80095cc:	4413      	add	r3, r2
 80095ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80095d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	00da      	lsls	r2, r3, #3
 80095e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80095e4:	4413      	add	r3, r2
 80095e6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80095ea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80095ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80095f2:	881b      	ldrh	r3, [r3, #0]
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80095fa:	b29a      	uxth	r2, r3
 80095fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009600:	801a      	strh	r2, [r3, #0]
 8009602:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009606:	2b3e      	cmp	r3, #62	; 0x3e
 8009608:	d923      	bls.n	8009652 <USB_EPStartXfer+0x149c>
 800960a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800960e:	095b      	lsrs	r3, r3, #5
 8009610:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009614:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009618:	f003 031f 	and.w	r3, r3, #31
 800961c:	2b00      	cmp	r3, #0
 800961e:	d104      	bne.n	800962a <USB_EPStartXfer+0x1474>
 8009620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009624:	3b01      	subs	r3, #1
 8009626:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800962a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800962e:	881b      	ldrh	r3, [r3, #0]
 8009630:	b29a      	uxth	r2, r3
 8009632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009636:	b29b      	uxth	r3, r3
 8009638:	029b      	lsls	r3, r3, #10
 800963a:	b29b      	uxth	r3, r3
 800963c:	4313      	orrs	r3, r2
 800963e:	b29b      	uxth	r3, r3
 8009640:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009644:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009648:	b29a      	uxth	r2, r3
 800964a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800964e:	801a      	strh	r2, [r3, #0]
 8009650:	e060      	b.n	8009714 <USB_EPStartXfer+0x155e>
 8009652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009656:	2b00      	cmp	r3, #0
 8009658:	d10c      	bne.n	8009674 <USB_EPStartXfer+0x14be>
 800965a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800965e:	881b      	ldrh	r3, [r3, #0]
 8009660:	b29b      	uxth	r3, r3
 8009662:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009666:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800966a:	b29a      	uxth	r2, r3
 800966c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009670:	801a      	strh	r2, [r3, #0]
 8009672:	e04f      	b.n	8009714 <USB_EPStartXfer+0x155e>
 8009674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009678:	085b      	lsrs	r3, r3, #1
 800967a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800967e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009682:	f003 0301 	and.w	r3, r3, #1
 8009686:	2b00      	cmp	r3, #0
 8009688:	d004      	beq.n	8009694 <USB_EPStartXfer+0x14de>
 800968a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800968e:	3301      	adds	r3, #1
 8009690:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009694:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009698:	881b      	ldrh	r3, [r3, #0]
 800969a:	b29a      	uxth	r2, r3
 800969c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	029b      	lsls	r3, r3, #10
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	4313      	orrs	r3, r2
 80096a8:	b29a      	uxth	r2, r3
 80096aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80096ae:	801a      	strh	r2, [r3, #0]
 80096b0:	e030      	b.n	8009714 <USB_EPStartXfer+0x155e>
 80096b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	785b      	ldrb	r3, [r3, #1]
 80096be:	2b01      	cmp	r3, #1
 80096c0:	d128      	bne.n	8009714 <USB_EPStartXfer+0x155e>
 80096c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80096d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80096de:	b29b      	uxth	r3, r3
 80096e0:	461a      	mov	r2, r3
 80096e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80096e6:	4413      	add	r3, r2
 80096e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80096ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	781b      	ldrb	r3, [r3, #0]
 80096f8:	00da      	lsls	r2, r3, #3
 80096fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80096fe:	4413      	add	r3, r2
 8009700:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009704:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009708:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800970c:	b29a      	uxth	r2, r3
 800970e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009712:	801a      	strh	r2, [r3, #0]
 8009714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009718:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	785b      	ldrb	r3, [r3, #1]
 800972e:	2b00      	cmp	r3, #0
 8009730:	f040 8085 	bne.w	800983e <USB_EPStartXfer+0x1688>
 8009734:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009738:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009742:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009746:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009750:	b29b      	uxth	r3, r3
 8009752:	461a      	mov	r2, r3
 8009754:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009758:	4413      	add	r3, r2
 800975a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800975e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009762:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	00da      	lsls	r2, r3, #3
 800976c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009770:	4413      	add	r3, r2
 8009772:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009776:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800977a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800977e:	881b      	ldrh	r3, [r3, #0]
 8009780:	b29b      	uxth	r3, r3
 8009782:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009786:	b29a      	uxth	r2, r3
 8009788:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800978c:	801a      	strh	r2, [r3, #0]
 800978e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009792:	2b3e      	cmp	r3, #62	; 0x3e
 8009794:	d923      	bls.n	80097de <USB_EPStartXfer+0x1628>
 8009796:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800979a:	095b      	lsrs	r3, r3, #5
 800979c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80097a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097a4:	f003 031f 	and.w	r3, r3, #31
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d104      	bne.n	80097b6 <USB_EPStartXfer+0x1600>
 80097ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097b0:	3b01      	subs	r3, #1
 80097b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80097b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097ba:	881b      	ldrh	r3, [r3, #0]
 80097bc:	b29a      	uxth	r2, r3
 80097be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	029b      	lsls	r3, r3, #10
 80097c6:	b29b      	uxth	r3, r3
 80097c8:	4313      	orrs	r3, r2
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097d4:	b29a      	uxth	r2, r3
 80097d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097da:	801a      	strh	r2, [r3, #0]
 80097dc:	e05c      	b.n	8009898 <USB_EPStartXfer+0x16e2>
 80097de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d10c      	bne.n	8009800 <USB_EPStartXfer+0x164a>
 80097e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097ea:	881b      	ldrh	r3, [r3, #0]
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097f6:	b29a      	uxth	r2, r3
 80097f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80097fc:	801a      	strh	r2, [r3, #0]
 80097fe:	e04b      	b.n	8009898 <USB_EPStartXfer+0x16e2>
 8009800:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009804:	085b      	lsrs	r3, r3, #1
 8009806:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800980a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800980e:	f003 0301 	and.w	r3, r3, #1
 8009812:	2b00      	cmp	r3, #0
 8009814:	d004      	beq.n	8009820 <USB_EPStartXfer+0x166a>
 8009816:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800981a:	3301      	adds	r3, #1
 800981c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009820:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009824:	881b      	ldrh	r3, [r3, #0]
 8009826:	b29a      	uxth	r2, r3
 8009828:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800982c:	b29b      	uxth	r3, r3
 800982e:	029b      	lsls	r3, r3, #10
 8009830:	b29b      	uxth	r3, r3
 8009832:	4313      	orrs	r3, r2
 8009834:	b29a      	uxth	r2, r3
 8009836:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800983a:	801a      	strh	r2, [r3, #0]
 800983c:	e02c      	b.n	8009898 <USB_EPStartXfer+0x16e2>
 800983e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009842:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	785b      	ldrb	r3, [r3, #1]
 800984a:	2b01      	cmp	r3, #1
 800984c:	d124      	bne.n	8009898 <USB_EPStartXfer+0x16e2>
 800984e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800985c:	b29b      	uxth	r3, r3
 800985e:	461a      	mov	r2, r3
 8009860:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009864:	4413      	add	r3, r2
 8009866:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800986a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800986e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	781b      	ldrb	r3, [r3, #0]
 8009876:	00da      	lsls	r2, r3, #3
 8009878:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800987c:	4413      	add	r3, r2
 800987e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009882:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009886:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800988a:	b29a      	uxth	r2, r3
 800988c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009890:	801a      	strh	r2, [r3, #0]
 8009892:	e001      	b.n	8009898 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009894:	2301      	movs	r3, #1
 8009896:	e03a      	b.n	800990e <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009898:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800989c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098a0:	681a      	ldr	r2, [r3, #0]
 80098a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	781b      	ldrb	r3, [r3, #0]
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	4413      	add	r3, r2
 80098b2:	881b      	ldrh	r3, [r3, #0]
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098be:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80098c2:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80098c6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80098ca:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80098ce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80098d2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80098d6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80098da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	441a      	add	r2, r3
 80098f4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80098f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009904:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009908:	b29b      	uxth	r3, r3
 800990a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}

08009918 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009918:	b480      	push	{r7}
 800991a:	b085      	sub	sp, #20
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	785b      	ldrb	r3, [r3, #1]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d020      	beq.n	800996c <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4413      	add	r3, r2
 8009934:	881b      	ldrh	r3, [r3, #0]
 8009936:	b29b      	uxth	r3, r3
 8009938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800993c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009940:	81bb      	strh	r3, [r7, #12]
 8009942:	89bb      	ldrh	r3, [r7, #12]
 8009944:	f083 0310 	eor.w	r3, r3, #16
 8009948:	81bb      	strh	r3, [r7, #12]
 800994a:	687a      	ldr	r2, [r7, #4]
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	441a      	add	r2, r3
 8009954:	89bb      	ldrh	r3, [r7, #12]
 8009956:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800995a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800995e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009962:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009966:	b29b      	uxth	r3, r3
 8009968:	8013      	strh	r3, [r2, #0]
 800996a:	e01f      	b.n	80099ac <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	683b      	ldr	r3, [r7, #0]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4413      	add	r3, r2
 8009976:	881b      	ldrh	r3, [r3, #0]
 8009978:	b29b      	uxth	r3, r3
 800997a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800997e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009982:	81fb      	strh	r3, [r7, #14]
 8009984:	89fb      	ldrh	r3, [r7, #14]
 8009986:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800998a:	81fb      	strh	r3, [r7, #14]
 800998c:	687a      	ldr	r2, [r7, #4]
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	781b      	ldrb	r3, [r3, #0]
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	441a      	add	r2, r3
 8009996:	89fb      	ldrh	r3, [r7, #14]
 8009998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800999c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a8:	b29b      	uxth	r3, r3
 80099aa:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3714      	adds	r7, #20
 80099b2:	46bd      	mov	sp, r7
 80099b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b8:	4770      	bx	lr

080099ba <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80099ba:	b480      	push	{r7}
 80099bc:	b087      	sub	sp, #28
 80099be:	af00      	add	r7, sp, #0
 80099c0:	6078      	str	r0, [r7, #4]
 80099c2:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	7b1b      	ldrb	r3, [r3, #12]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f040 809d 	bne.w	8009b08 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	785b      	ldrb	r3, [r3, #1]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d04c      	beq.n	8009a70 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	781b      	ldrb	r3, [r3, #0]
 80099dc:	009b      	lsls	r3, r3, #2
 80099de:	4413      	add	r3, r2
 80099e0:	881b      	ldrh	r3, [r3, #0]
 80099e2:	823b      	strh	r3, [r7, #16]
 80099e4:	8a3b      	ldrh	r3, [r7, #16]
 80099e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d01b      	beq.n	8009a26 <USB_EPClearStall+0x6c>
 80099ee:	687a      	ldr	r2, [r7, #4]
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	009b      	lsls	r3, r3, #2
 80099f6:	4413      	add	r3, r2
 80099f8:	881b      	ldrh	r3, [r3, #0]
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a04:	81fb      	strh	r3, [r7, #14]
 8009a06:	687a      	ldr	r2, [r7, #4]
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	441a      	add	r2, r3
 8009a10:	89fb      	ldrh	r3, [r7, #14]
 8009a12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a22:	b29b      	uxth	r3, r3
 8009a24:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	78db      	ldrb	r3, [r3, #3]
 8009a2a:	2b01      	cmp	r3, #1
 8009a2c:	d06c      	beq.n	8009b08 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	4413      	add	r3, r2
 8009a38:	881b      	ldrh	r3, [r3, #0]
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a44:	81bb      	strh	r3, [r7, #12]
 8009a46:	89bb      	ldrh	r3, [r7, #12]
 8009a48:	f083 0320 	eor.w	r3, r3, #32
 8009a4c:	81bb      	strh	r3, [r7, #12]
 8009a4e:	687a      	ldr	r2, [r7, #4]
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	781b      	ldrb	r3, [r3, #0]
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	441a      	add	r2, r3
 8009a58:	89bb      	ldrh	r3, [r7, #12]
 8009a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	8013      	strh	r3, [r2, #0]
 8009a6e:	e04b      	b.n	8009b08 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	881b      	ldrh	r3, [r3, #0]
 8009a7c:	82fb      	strh	r3, [r7, #22]
 8009a7e:	8afb      	ldrh	r3, [r7, #22]
 8009a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d01b      	beq.n	8009ac0 <USB_EPClearStall+0x106>
 8009a88:	687a      	ldr	r2, [r7, #4]
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	781b      	ldrb	r3, [r3, #0]
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	4413      	add	r3, r2
 8009a92:	881b      	ldrh	r3, [r3, #0]
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a9e:	82bb      	strh	r3, [r7, #20]
 8009aa0:	687a      	ldr	r2, [r7, #4]
 8009aa2:	683b      	ldr	r3, [r7, #0]
 8009aa4:	781b      	ldrb	r3, [r3, #0]
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	441a      	add	r2, r3
 8009aaa:	8abb      	ldrh	r3, [r7, #20]
 8009aac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ab0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ab4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ab8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	4413      	add	r3, r2
 8009aca:	881b      	ldrh	r3, [r3, #0]
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ad6:	827b      	strh	r3, [r7, #18]
 8009ad8:	8a7b      	ldrh	r3, [r7, #18]
 8009ada:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009ade:	827b      	strh	r3, [r7, #18]
 8009ae0:	8a7b      	ldrh	r3, [r7, #18]
 8009ae2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009ae6:	827b      	strh	r3, [r7, #18]
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	441a      	add	r2, r3
 8009af2:	8a7b      	ldrh	r3, [r7, #18]
 8009af4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009af8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009afc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b04:	b29b      	uxth	r3, r3
 8009b06:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009b08:	2300      	movs	r3, #0
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	371c      	adds	r7, #28
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b14:	4770      	bx	lr

08009b16 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009b16:	b480      	push	{r7}
 8009b18:	b083      	sub	sp, #12
 8009b1a:	af00      	add	r7, sp, #0
 8009b1c:	6078      	str	r0, [r7, #4]
 8009b1e:	460b      	mov	r3, r1
 8009b20:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009b22:	78fb      	ldrb	r3, [r7, #3]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d103      	bne.n	8009b30 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2280      	movs	r2, #128	; 0x80
 8009b2c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009b30:	2300      	movs	r3, #0
}
 8009b32:	4618      	mov	r0, r3
 8009b34:	370c      	adds	r7, #12
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr

08009b3e <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009b3e:	b480      	push	{r7}
 8009b40:	b083      	sub	sp, #12
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009b4c:	b29b      	uxth	r3, r3
 8009b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b56:	b29a      	uxth	r2, r3
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009b5e:	2300      	movs	r3, #0
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009b7a:	b29b      	uxth	r3, r3
 8009b7c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3714      	adds	r7, #20
 8009b84:	46bd      	mov	sp, r7
 8009b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8a:	4770      	bx	lr

08009b8c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009b8c:	b480      	push	{r7}
 8009b8e:	b08b      	sub	sp, #44	; 0x2c
 8009b90:	af00      	add	r7, sp, #0
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	60b9      	str	r1, [r7, #8]
 8009b96:	4611      	mov	r1, r2
 8009b98:	461a      	mov	r2, r3
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	80fb      	strh	r3, [r7, #6]
 8009b9e:	4613      	mov	r3, r2
 8009ba0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009ba2:	88bb      	ldrh	r3, [r7, #4]
 8009ba4:	3301      	adds	r3, #1
 8009ba6:	085b      	lsrs	r3, r3, #1
 8009ba8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009bb2:	88fa      	ldrh	r2, [r7, #6]
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009bbc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009bbe:	69bb      	ldr	r3, [r7, #24]
 8009bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8009bc2:	e01b      	b.n	8009bfc <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009bc4:	69fb      	ldr	r3, [r7, #28]
 8009bc6:	781b      	ldrb	r3, [r3, #0]
 8009bc8:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009bca:	69fb      	ldr	r3, [r7, #28]
 8009bcc:	3301      	adds	r3, #1
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	021b      	lsls	r3, r3, #8
 8009bd2:	b21a      	sxth	r2, r3
 8009bd4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	b21b      	sxth	r3, r3
 8009bdc:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009bde:	6a3b      	ldr	r3, [r7, #32]
 8009be0:	8a7a      	ldrh	r2, [r7, #18]
 8009be2:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009be4:	6a3b      	ldr	r3, [r7, #32]
 8009be6:	3302      	adds	r3, #2
 8009be8:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009bea:	69fb      	ldr	r3, [r7, #28]
 8009bec:	3301      	adds	r3, #1
 8009bee:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	3301      	adds	r3, #1
 8009bf4:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf8:	3b01      	subs	r3, #1
 8009bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8009bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d1e0      	bne.n	8009bc4 <USB_WritePMA+0x38>
  }
}
 8009c02:	bf00      	nop
 8009c04:	bf00      	nop
 8009c06:	372c      	adds	r7, #44	; 0x2c
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr

08009c10 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009c10:	b480      	push	{r7}
 8009c12:	b08b      	sub	sp, #44	; 0x2c
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	4611      	mov	r1, r2
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	460b      	mov	r3, r1
 8009c20:	80fb      	strh	r3, [r7, #6]
 8009c22:	4613      	mov	r3, r2
 8009c24:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009c26:	88bb      	ldrh	r3, [r7, #4]
 8009c28:	085b      	lsrs	r3, r3, #1
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009c36:	88fa      	ldrh	r2, [r7, #6]
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009c40:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009c42:	69bb      	ldr	r3, [r7, #24]
 8009c44:	627b      	str	r3, [r7, #36]	; 0x24
 8009c46:	e018      	b.n	8009c7a <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009c48:	6a3b      	ldr	r3, [r7, #32]
 8009c4a:	881b      	ldrh	r3, [r3, #0]
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009c50:	6a3b      	ldr	r3, [r7, #32]
 8009c52:	3302      	adds	r3, #2
 8009c54:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	b2da      	uxtb	r2, r3
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	3301      	adds	r3, #1
 8009c62:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	0a1b      	lsrs	r3, r3, #8
 8009c68:	b2da      	uxtb	r2, r3
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	3301      	adds	r3, #1
 8009c72:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c76:	3b01      	subs	r3, #1
 8009c78:	627b      	str	r3, [r7, #36]	; 0x24
 8009c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d1e3      	bne.n	8009c48 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009c80:	88bb      	ldrh	r3, [r7, #4]
 8009c82:	f003 0301 	and.w	r3, r3, #1
 8009c86:	b29b      	uxth	r3, r3
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d007      	beq.n	8009c9c <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009c8c:	6a3b      	ldr	r3, [r7, #32]
 8009c8e:	881b      	ldrh	r3, [r3, #0]
 8009c90:	b29b      	uxth	r3, r3
 8009c92:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009c94:	693b      	ldr	r3, [r7, #16]
 8009c96:	b2da      	uxtb	r2, r3
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	701a      	strb	r2, [r3, #0]
  }
}
 8009c9c:	bf00      	nop
 8009c9e:	372c      	adds	r7, #44	; 0x2c
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	6078      	str	r0, [r7, #4]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009cb4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009cb8:	f002 f8c8 	bl	800be4c <USBD_static_malloc>
 8009cbc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d105      	bne.n	8009cd0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009ccc:	2302      	movs	r3, #2
 8009cce:	e066      	b.n	8009d9e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	7c1b      	ldrb	r3, [r3, #16]
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d119      	bne.n	8009d14 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009ce0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ce4:	2202      	movs	r2, #2
 8009ce6:	2181      	movs	r1, #129	; 0x81
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f001 ff56 	bl	800bb9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009cf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009cf8:	2202      	movs	r2, #2
 8009cfa:	2101      	movs	r1, #1
 8009cfc:	6878      	ldr	r0, [r7, #4]
 8009cfe:	f001 ff4c 	bl	800bb9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2201      	movs	r2, #1
 8009d06:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	2210      	movs	r2, #16
 8009d0e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009d12:	e016      	b.n	8009d42 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d14:	2340      	movs	r3, #64	; 0x40
 8009d16:	2202      	movs	r2, #2
 8009d18:	2181      	movs	r1, #129	; 0x81
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f001 ff3d 	bl	800bb9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d26:	2340      	movs	r3, #64	; 0x40
 8009d28:	2202      	movs	r2, #2
 8009d2a:	2101      	movs	r1, #1
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f001 ff34 	bl	800bb9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	2201      	movs	r2, #1
 8009d36:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	2210      	movs	r2, #16
 8009d3e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d42:	2308      	movs	r3, #8
 8009d44:	2203      	movs	r2, #3
 8009d46:	2182      	movs	r1, #130	; 0x82
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f001 ff26 	bl	800bb9a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2201      	movs	r2, #1
 8009d52:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	2200      	movs	r2, #0
 8009d64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	7c1b      	ldrb	r3, [r3, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d109      	bne.n	8009d8c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d82:	2101      	movs	r1, #1
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f001 fff7 	bl	800bd78 <USBD_LL_PrepareReceive>
 8009d8a:	e007      	b.n	8009d9c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d92:	2340      	movs	r3, #64	; 0x40
 8009d94:	2101      	movs	r1, #1
 8009d96:	6878      	ldr	r0, [r7, #4]
 8009d98:	f001 ffee 	bl	800bd78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d9c:	2300      	movs	r3, #0
}
 8009d9e:	4618      	mov	r0, r3
 8009da0:	3710      	adds	r7, #16
 8009da2:	46bd      	mov	sp, r7
 8009da4:	bd80      	pop	{r7, pc}

08009da6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b082      	sub	sp, #8
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
 8009dae:	460b      	mov	r3, r1
 8009db0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009db2:	2181      	movs	r1, #129	; 0x81
 8009db4:	6878      	ldr	r0, [r7, #4]
 8009db6:	f001 ff16 	bl	800bbe6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009dc0:	2101      	movs	r1, #1
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f001 ff0f 	bl	800bbe6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009dd0:	2182      	movs	r1, #130	; 0x82
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	f001 ff07 	bl	800bbe6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d00e      	beq.n	8009e10 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e02:	4618      	mov	r0, r3
 8009e04:	f002 f830 	bl	800be68 <USBD_static_free>
    pdev->pClassData = NULL;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009e10:	2300      	movs	r3, #0
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3708      	adds	r7, #8
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
	...

08009e1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b086      	sub	sp, #24
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
 8009e24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009e2c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009e32:	2300      	movs	r3, #0
 8009e34:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d101      	bne.n	8009e44 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009e40:	2303      	movs	r3, #3
 8009e42:	e0af      	b.n	8009fa4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d03f      	beq.n	8009ed0 <USBD_CDC_Setup+0xb4>
 8009e50:	2b20      	cmp	r3, #32
 8009e52:	f040 809f 	bne.w	8009f94 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009e56:	683b      	ldr	r3, [r7, #0]
 8009e58:	88db      	ldrh	r3, [r3, #6]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d02e      	beq.n	8009ebc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	b25b      	sxtb	r3, r3
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	da16      	bge.n	8009e96 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009e6e:	689b      	ldr	r3, [r3, #8]
 8009e70:	683a      	ldr	r2, [r7, #0]
 8009e72:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8009e74:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	88d2      	ldrh	r2, [r2, #6]
 8009e7a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	88db      	ldrh	r3, [r3, #6]
 8009e80:	2b07      	cmp	r3, #7
 8009e82:	bf28      	it	cs
 8009e84:	2307      	movcs	r3, #7
 8009e86:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	89fa      	ldrh	r2, [r7, #14]
 8009e8c:	4619      	mov	r1, r3
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f001 fa9f 	bl	800b3d2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8009e94:	e085      	b.n	8009fa2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	785a      	ldrb	r2, [r3, #1]
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	88db      	ldrh	r3, [r3, #6]
 8009ea4:	b2da      	uxtb	r2, r3
 8009ea6:	693b      	ldr	r3, [r7, #16]
 8009ea8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009eac:	6939      	ldr	r1, [r7, #16]
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	88db      	ldrh	r3, [r3, #6]
 8009eb2:	461a      	mov	r2, r3
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f001 fab8 	bl	800b42a <USBD_CtlPrepareRx>
      break;
 8009eba:	e072      	b.n	8009fa2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	683a      	ldr	r2, [r7, #0]
 8009ec6:	7850      	ldrb	r0, [r2, #1]
 8009ec8:	2200      	movs	r2, #0
 8009eca:	6839      	ldr	r1, [r7, #0]
 8009ecc:	4798      	blx	r3
      break;
 8009ece:	e068      	b.n	8009fa2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	785b      	ldrb	r3, [r3, #1]
 8009ed4:	2b0b      	cmp	r3, #11
 8009ed6:	d852      	bhi.n	8009f7e <USBD_CDC_Setup+0x162>
 8009ed8:	a201      	add	r2, pc, #4	; (adr r2, 8009ee0 <USBD_CDC_Setup+0xc4>)
 8009eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ede:	bf00      	nop
 8009ee0:	08009f11 	.word	0x08009f11
 8009ee4:	08009f8d 	.word	0x08009f8d
 8009ee8:	08009f7f 	.word	0x08009f7f
 8009eec:	08009f7f 	.word	0x08009f7f
 8009ef0:	08009f7f 	.word	0x08009f7f
 8009ef4:	08009f7f 	.word	0x08009f7f
 8009ef8:	08009f7f 	.word	0x08009f7f
 8009efc:	08009f7f 	.word	0x08009f7f
 8009f00:	08009f7f 	.word	0x08009f7f
 8009f04:	08009f7f 	.word	0x08009f7f
 8009f08:	08009f3b 	.word	0x08009f3b
 8009f0c:	08009f65 	.word	0x08009f65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f16:	b2db      	uxtb	r3, r3
 8009f18:	2b03      	cmp	r3, #3
 8009f1a:	d107      	bne.n	8009f2c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009f1c:	f107 030a 	add.w	r3, r7, #10
 8009f20:	2202      	movs	r2, #2
 8009f22:	4619      	mov	r1, r3
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f001 fa54 	bl	800b3d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f2a:	e032      	b.n	8009f92 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009f2c:	6839      	ldr	r1, [r7, #0]
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f001 f9de 	bl	800b2f0 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f34:	2303      	movs	r3, #3
 8009f36:	75fb      	strb	r3, [r7, #23]
          break;
 8009f38:	e02b      	b.n	8009f92 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f40:	b2db      	uxtb	r3, r3
 8009f42:	2b03      	cmp	r3, #3
 8009f44:	d107      	bne.n	8009f56 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009f46:	f107 030d 	add.w	r3, r7, #13
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f001 fa3f 	bl	800b3d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009f54:	e01d      	b.n	8009f92 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009f56:	6839      	ldr	r1, [r7, #0]
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f001 f9c9 	bl	800b2f0 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	75fb      	strb	r3, [r7, #23]
          break;
 8009f62:	e016      	b.n	8009f92 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	2b03      	cmp	r3, #3
 8009f6e:	d00f      	beq.n	8009f90 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009f70:	6839      	ldr	r1, [r7, #0]
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f001 f9bc 	bl	800b2f0 <USBD_CtlError>
            ret = USBD_FAIL;
 8009f78:	2303      	movs	r3, #3
 8009f7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009f7c:	e008      	b.n	8009f90 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009f7e:	6839      	ldr	r1, [r7, #0]
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f001 f9b5 	bl	800b2f0 <USBD_CtlError>
          ret = USBD_FAIL;
 8009f86:	2303      	movs	r3, #3
 8009f88:	75fb      	strb	r3, [r7, #23]
          break;
 8009f8a:	e002      	b.n	8009f92 <USBD_CDC_Setup+0x176>
          break;
 8009f8c:	bf00      	nop
 8009f8e:	e008      	b.n	8009fa2 <USBD_CDC_Setup+0x186>
          break;
 8009f90:	bf00      	nop
      }
      break;
 8009f92:	e006      	b.n	8009fa2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009f94:	6839      	ldr	r1, [r7, #0]
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f001 f9aa 	bl	800b2f0 <USBD_CtlError>
      ret = USBD_FAIL;
 8009f9c:	2303      	movs	r3, #3
 8009f9e:	75fb      	strb	r3, [r7, #23]
      break;
 8009fa0:	bf00      	nop
  }

  return (uint8_t)ret;
 8009fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3718      	adds	r7, #24
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b084      	sub	sp, #16
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009fbe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d101      	bne.n	8009fce <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009fca:	2303      	movs	r3, #3
 8009fcc:	e04f      	b.n	800a06e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fd4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009fd6:	78fa      	ldrb	r2, [r7, #3]
 8009fd8:	6879      	ldr	r1, [r7, #4]
 8009fda:	4613      	mov	r3, r2
 8009fdc:	009b      	lsls	r3, r3, #2
 8009fde:	4413      	add	r3, r2
 8009fe0:	009b      	lsls	r3, r3, #2
 8009fe2:	440b      	add	r3, r1
 8009fe4:	3318      	adds	r3, #24
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d029      	beq.n	800a040 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009fec:	78fa      	ldrb	r2, [r7, #3]
 8009fee:	6879      	ldr	r1, [r7, #4]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	009b      	lsls	r3, r3, #2
 8009ff4:	4413      	add	r3, r2
 8009ff6:	009b      	lsls	r3, r3, #2
 8009ff8:	440b      	add	r3, r1
 8009ffa:	3318      	adds	r3, #24
 8009ffc:	681a      	ldr	r2, [r3, #0]
 8009ffe:	78f9      	ldrb	r1, [r7, #3]
 800a000:	68f8      	ldr	r0, [r7, #12]
 800a002:	460b      	mov	r3, r1
 800a004:	009b      	lsls	r3, r3, #2
 800a006:	440b      	add	r3, r1
 800a008:	00db      	lsls	r3, r3, #3
 800a00a:	4403      	add	r3, r0
 800a00c:	3320      	adds	r3, #32
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	fbb2 f1f3 	udiv	r1, r2, r3
 800a014:	fb01 f303 	mul.w	r3, r1, r3
 800a018:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d110      	bne.n	800a040 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a01e:	78fa      	ldrb	r2, [r7, #3]
 800a020:	6879      	ldr	r1, [r7, #4]
 800a022:	4613      	mov	r3, r2
 800a024:	009b      	lsls	r3, r3, #2
 800a026:	4413      	add	r3, r2
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	440b      	add	r3, r1
 800a02c:	3318      	adds	r3, #24
 800a02e:	2200      	movs	r2, #0
 800a030:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a032:	78f9      	ldrb	r1, [r7, #3]
 800a034:	2300      	movs	r3, #0
 800a036:	2200      	movs	r2, #0
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f001 fe7c 	bl	800bd36 <USBD_LL_Transmit>
 800a03e:	e015      	b.n	800a06c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	2200      	movs	r2, #0
 800a044:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a04e:	691b      	ldr	r3, [r3, #16]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00b      	beq.n	800a06c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a05a:	691b      	ldr	r3, [r3, #16]
 800a05c:	68ba      	ldr	r2, [r7, #8]
 800a05e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a062:	68ba      	ldr	r2, [r7, #8]
 800a064:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a068:	78fa      	ldrb	r2, [r7, #3]
 800a06a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a06c:	2300      	movs	r3, #0
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a076:	b580      	push	{r7, lr}
 800a078:	b084      	sub	sp, #16
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
 800a07e:	460b      	mov	r3, r1
 800a080:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a088:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a090:	2b00      	cmp	r3, #0
 800a092:	d101      	bne.n	800a098 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a094:	2303      	movs	r3, #3
 800a096:	e015      	b.n	800a0c4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a098:	78fb      	ldrb	r3, [r7, #3]
 800a09a:	4619      	mov	r1, r3
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f001 fe8c 	bl	800bdba <USBD_LL_GetRxDataSize>
 800a0a2:	4602      	mov	r2, r0
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0b0:	68db      	ldr	r3, [r3, #12]
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a0b8:	68fa      	ldr	r2, [r7, #12]
 800a0ba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a0be:	4611      	mov	r1, r2
 800a0c0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a0da:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	e01b      	b.n	800a11e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d015      	beq.n	800a11c <USBD_CDC_EP0_RxReady+0x50>
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a0f6:	2bff      	cmp	r3, #255	; 0xff
 800a0f8:	d010      	beq.n	800a11c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a100:	689b      	ldr	r3, [r3, #8]
 800a102:	68fa      	ldr	r2, [r7, #12]
 800a104:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a108:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a10a:	68fa      	ldr	r2, [r7, #12]
 800a10c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a110:	b292      	uxth	r2, r2
 800a112:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	22ff      	movs	r2, #255	; 0xff
 800a118:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a11c:	2300      	movs	r3, #0
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3710      	adds	r7, #16
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
	...

0800a128 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2243      	movs	r2, #67	; 0x43
 800a134:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a136:	4b03      	ldr	r3, [pc, #12]	; (800a144 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a138:	4618      	mov	r0, r3
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr
 800a144:	2000009c 	.word	0x2000009c

0800a148 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a148:	b480      	push	{r7}
 800a14a:	b083      	sub	sp, #12
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2243      	movs	r2, #67	; 0x43
 800a154:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a156:	4b03      	ldr	r3, [pc, #12]	; (800a164 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a158:	4618      	mov	r0, r3
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr
 800a164:	20000058 	.word	0x20000058

0800a168 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a168:	b480      	push	{r7}
 800a16a:	b083      	sub	sp, #12
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2243      	movs	r2, #67	; 0x43
 800a174:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a176:	4b03      	ldr	r3, [pc, #12]	; (800a184 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a178:	4618      	mov	r0, r3
 800a17a:	370c      	adds	r7, #12
 800a17c:	46bd      	mov	sp, r7
 800a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a182:	4770      	bx	lr
 800a184:	200000e0 	.word	0x200000e0

0800a188 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a188:	b480      	push	{r7}
 800a18a:	b083      	sub	sp, #12
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	220a      	movs	r2, #10
 800a194:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a196:	4b03      	ldr	r3, [pc, #12]	; (800a1a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a198:	4618      	mov	r0, r3
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	20000014 	.word	0x20000014

0800a1a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a1b2:	683b      	ldr	r3, [r7, #0]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d101      	bne.n	800a1bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a1b8:	2303      	movs	r3, #3
 800a1ba:	e004      	b.n	800a1c6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	683a      	ldr	r2, [r7, #0]
 800a1c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	370c      	adds	r7, #12
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr

0800a1d2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a1d2:	b480      	push	{r7}
 800a1d4:	b087      	sub	sp, #28
 800a1d6:	af00      	add	r7, sp, #0
 800a1d8:	60f8      	str	r0, [r7, #12]
 800a1da:	60b9      	str	r1, [r7, #8]
 800a1dc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a1e4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a1e6:	697b      	ldr	r3, [r7, #20]
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d101      	bne.n	800a1f0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	e008      	b.n	800a202 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a1f0:	697b      	ldr	r3, [r7, #20]
 800a1f2:	68ba      	ldr	r2, [r7, #8]
 800a1f4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a200:	2300      	movs	r3, #0
}
 800a202:	4618      	mov	r0, r3
 800a204:	371c      	adds	r7, #28
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr

0800a20e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a20e:	b480      	push	{r7}
 800a210:	b085      	sub	sp, #20
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a21e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d101      	bne.n	800a22a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a226:	2303      	movs	r3, #3
 800a228:	e004      	b.n	800a234 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	683a      	ldr	r2, [r7, #0]
 800a22e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a232:	2300      	movs	r3, #0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3714      	adds	r7, #20
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b084      	sub	sp, #16
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a24e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a256:	2b00      	cmp	r3, #0
 800a258:	d101      	bne.n	800a25e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a25a:	2303      	movs	r3, #3
 800a25c:	e016      	b.n	800a28c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	7c1b      	ldrb	r3, [r3, #16]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d109      	bne.n	800a27a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a26c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a270:	2101      	movs	r1, #1
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f001 fd80 	bl	800bd78 <USBD_LL_PrepareReceive>
 800a278:	e007      	b.n	800a28a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a280:	2340      	movs	r3, #64	; 0x40
 800a282:	2101      	movs	r1, #1
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f001 fd77 	bl	800bd78 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	3710      	adds	r7, #16
 800a290:	46bd      	mov	sp, r7
 800a292:	bd80      	pop	{r7, pc}

0800a294 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b086      	sub	sp, #24
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d101      	bne.n	800a2ac <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a2a8:	2303      	movs	r3, #3
 800a2aa:	e01f      	b.n	800a2ec <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2200      	movs	r2, #0
 800a2c0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d003      	beq.n	800a2d2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	68ba      	ldr	r2, [r7, #8]
 800a2ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	79fa      	ldrb	r2, [r7, #7]
 800a2de:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a2e0:	68f8      	ldr	r0, [r7, #12]
 800a2e2:	f001 fbdf 	bl	800baa4 <USBD_LL_Init>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a2ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3718      	adds	r7, #24
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a2fe:	2300      	movs	r3, #0
 800a300:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d101      	bne.n	800a30c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a308:	2303      	movs	r3, #3
 800a30a:	e016      	b.n	800a33a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	683a      	ldr	r2, [r7, #0]
 800a310:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d00b      	beq.n	800a338 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a328:	f107 020e 	add.w	r2, r7, #14
 800a32c:	4610      	mov	r0, r2
 800a32e:	4798      	blx	r3
 800a330:	4602      	mov	r2, r0
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a338:	2300      	movs	r3, #0
}
 800a33a:	4618      	mov	r0, r3
 800a33c:	3710      	adds	r7, #16
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b082      	sub	sp, #8
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f001 fc0a 	bl	800bb64 <USBD_LL_Start>
 800a350:	4603      	mov	r3, r0
}
 800a352:	4618      	mov	r0, r3
 800a354:	3708      	adds	r7, #8
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}

0800a35a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a35a:	b480      	push	{r7}
 800a35c:	b083      	sub	sp, #12
 800a35e:	af00      	add	r7, sp, #0
 800a360:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a362:	2300      	movs	r3, #0
}
 800a364:	4618      	mov	r0, r3
 800a366:	370c      	adds	r7, #12
 800a368:	46bd      	mov	sp, r7
 800a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36e:	4770      	bx	lr

0800a370 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	460b      	mov	r3, r1
 800a37a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a37c:	2303      	movs	r3, #3
 800a37e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a386:	2b00      	cmp	r3, #0
 800a388:	d009      	beq.n	800a39e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	78fa      	ldrb	r2, [r7, #3]
 800a394:	4611      	mov	r1, r2
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	4798      	blx	r3
 800a39a:	4603      	mov	r3, r0
 800a39c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	3710      	adds	r7, #16
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	bd80      	pop	{r7, pc}

0800a3a8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	460b      	mov	r3, r1
 800a3b2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d007      	beq.n	800a3ce <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	78fa      	ldrb	r2, [r7, #3]
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	4798      	blx	r3
  }

  return USBD_OK;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3708      	adds	r7, #8
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	bd80      	pop	{r7, pc}

0800a3d8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b084      	sub	sp, #16
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
 800a3e0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a3e8:	6839      	ldr	r1, [r7, #0]
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f000 ff46 	bl	800b27c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2201      	movs	r2, #1
 800a3f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a3fe:	461a      	mov	r2, r3
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a40c:	f003 031f 	and.w	r3, r3, #31
 800a410:	2b02      	cmp	r3, #2
 800a412:	d01a      	beq.n	800a44a <USBD_LL_SetupStage+0x72>
 800a414:	2b02      	cmp	r3, #2
 800a416:	d822      	bhi.n	800a45e <USBD_LL_SetupStage+0x86>
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d002      	beq.n	800a422 <USBD_LL_SetupStage+0x4a>
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d00a      	beq.n	800a436 <USBD_LL_SetupStage+0x5e>
 800a420:	e01d      	b.n	800a45e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a428:	4619      	mov	r1, r3
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f9ee 	bl	800a80c <USBD_StdDevReq>
 800a430:	4603      	mov	r3, r0
 800a432:	73fb      	strb	r3, [r7, #15]
      break;
 800a434:	e020      	b.n	800a478 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a43c:	4619      	mov	r1, r3
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f000 fa52 	bl	800a8e8 <USBD_StdItfReq>
 800a444:	4603      	mov	r3, r0
 800a446:	73fb      	strb	r3, [r7, #15]
      break;
 800a448:	e016      	b.n	800a478 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a450:	4619      	mov	r1, r3
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f000 fa91 	bl	800a97a <USBD_StdEPReq>
 800a458:	4603      	mov	r3, r0
 800a45a:	73fb      	strb	r3, [r7, #15]
      break;
 800a45c:	e00c      	b.n	800a478 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a464:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a468:	b2db      	uxtb	r3, r3
 800a46a:	4619      	mov	r1, r3
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f001 fbd9 	bl	800bc24 <USBD_LL_StallEP>
 800a472:	4603      	mov	r3, r0
 800a474:	73fb      	strb	r3, [r7, #15]
      break;
 800a476:	bf00      	nop
  }

  return ret;
 800a478:	7bfb      	ldrb	r3, [r7, #15]
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3710      	adds	r7, #16
 800a47e:	46bd      	mov	sp, r7
 800a480:	bd80      	pop	{r7, pc}

0800a482 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a482:	b580      	push	{r7, lr}
 800a484:	b086      	sub	sp, #24
 800a486:	af00      	add	r7, sp, #0
 800a488:	60f8      	str	r0, [r7, #12]
 800a48a:	460b      	mov	r3, r1
 800a48c:	607a      	str	r2, [r7, #4]
 800a48e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a490:	7afb      	ldrb	r3, [r7, #11]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d138      	bne.n	800a508 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a49c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a4a4:	2b03      	cmp	r3, #3
 800a4a6:	d14a      	bne.n	800a53e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	689a      	ldr	r2, [r3, #8]
 800a4ac:	693b      	ldr	r3, [r7, #16]
 800a4ae:	68db      	ldr	r3, [r3, #12]
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d913      	bls.n	800a4dc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	689a      	ldr	r2, [r3, #8]
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	1ad2      	subs	r2, r2, r3
 800a4be:	693b      	ldr	r3, [r7, #16]
 800a4c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a4c2:	693b      	ldr	r3, [r7, #16]
 800a4c4:	68da      	ldr	r2, [r3, #12]
 800a4c6:	693b      	ldr	r3, [r7, #16]
 800a4c8:	689b      	ldr	r3, [r3, #8]
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	bf28      	it	cs
 800a4ce:	4613      	movcs	r3, r2
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	6879      	ldr	r1, [r7, #4]
 800a4d4:	68f8      	ldr	r0, [r7, #12]
 800a4d6:	f000 ffc5 	bl	800b464 <USBD_CtlContinueRx>
 800a4da:	e030      	b.n	800a53e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	2b03      	cmp	r3, #3
 800a4e6:	d10b      	bne.n	800a500 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4ee:	691b      	ldr	r3, [r3, #16]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d005      	beq.n	800a500 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	68f8      	ldr	r0, [r7, #12]
 800a4fe:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f000 ffc0 	bl	800b486 <USBD_CtlSendStatus>
 800a506:	e01a      	b.n	800a53e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a50e:	b2db      	uxtb	r3, r3
 800a510:	2b03      	cmp	r3, #3
 800a512:	d114      	bne.n	800a53e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a51a:	699b      	ldr	r3, [r3, #24]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00e      	beq.n	800a53e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a526:	699b      	ldr	r3, [r3, #24]
 800a528:	7afa      	ldrb	r2, [r7, #11]
 800a52a:	4611      	mov	r1, r2
 800a52c:	68f8      	ldr	r0, [r7, #12]
 800a52e:	4798      	blx	r3
 800a530:	4603      	mov	r3, r0
 800a532:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a534:	7dfb      	ldrb	r3, [r7, #23]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d001      	beq.n	800a53e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a53a:	7dfb      	ldrb	r3, [r7, #23]
 800a53c:	e000      	b.n	800a540 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3718      	adds	r7, #24
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b086      	sub	sp, #24
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	460b      	mov	r3, r1
 800a552:	607a      	str	r2, [r7, #4]
 800a554:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a556:	7afb      	ldrb	r3, [r7, #11]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d16b      	bne.n	800a634 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	3314      	adds	r3, #20
 800a560:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d156      	bne.n	800a61a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	689a      	ldr	r2, [r3, #8]
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	429a      	cmp	r2, r3
 800a576:	d914      	bls.n	800a5a2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	689a      	ldr	r2, [r3, #8]
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	1ad2      	subs	r2, r2, r3
 800a582:	693b      	ldr	r3, [r7, #16]
 800a584:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	461a      	mov	r2, r3
 800a58c:	6879      	ldr	r1, [r7, #4]
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f000 ff3a 	bl	800b408 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a594:	2300      	movs	r3, #0
 800a596:	2200      	movs	r2, #0
 800a598:	2100      	movs	r1, #0
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f001 fbec 	bl	800bd78 <USBD_LL_PrepareReceive>
 800a5a0:	e03b      	b.n	800a61a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	68da      	ldr	r2, [r3, #12]
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	689b      	ldr	r3, [r3, #8]
 800a5aa:	429a      	cmp	r2, r3
 800a5ac:	d11c      	bne.n	800a5e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	685a      	ldr	r2, [r3, #4]
 800a5b2:	693b      	ldr	r3, [r7, #16]
 800a5b4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d316      	bcc.n	800a5e8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a5ba:	693b      	ldr	r3, [r7, #16]
 800a5bc:	685a      	ldr	r2, [r3, #4]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d20f      	bcs.n	800a5e8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	2100      	movs	r1, #0
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f000 ff1b 	bl	800b408 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a5da:	2300      	movs	r3, #0
 800a5dc:	2200      	movs	r2, #0
 800a5de:	2100      	movs	r1, #0
 800a5e0:	68f8      	ldr	r0, [r7, #12]
 800a5e2:	f001 fbc9 	bl	800bd78 <USBD_LL_PrepareReceive>
 800a5e6:	e018      	b.n	800a61a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	2b03      	cmp	r3, #3
 800a5f2:	d10b      	bne.n	800a60c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5fa:	68db      	ldr	r3, [r3, #12]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d005      	beq.n	800a60c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a606:	68db      	ldr	r3, [r3, #12]
 800a608:	68f8      	ldr	r0, [r7, #12]
 800a60a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a60c:	2180      	movs	r1, #128	; 0x80
 800a60e:	68f8      	ldr	r0, [r7, #12]
 800a610:	f001 fb08 	bl	800bc24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	f000 ff49 	bl	800b4ac <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a620:	2b01      	cmp	r3, #1
 800a622:	d122      	bne.n	800a66a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a624:	68f8      	ldr	r0, [r7, #12]
 800a626:	f7ff fe98 	bl	800a35a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2200      	movs	r2, #0
 800a62e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a632:	e01a      	b.n	800a66a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a63a:	b2db      	uxtb	r3, r3
 800a63c:	2b03      	cmp	r3, #3
 800a63e:	d114      	bne.n	800a66a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a646:	695b      	ldr	r3, [r3, #20]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d00e      	beq.n	800a66a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a652:	695b      	ldr	r3, [r3, #20]
 800a654:	7afa      	ldrb	r2, [r7, #11]
 800a656:	4611      	mov	r1, r2
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	4798      	blx	r3
 800a65c:	4603      	mov	r3, r0
 800a65e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a660:	7dfb      	ldrb	r3, [r7, #23]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d001      	beq.n	800a66a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a666:	7dfb      	ldrb	r3, [r7, #23]
 800a668:	e000      	b.n	800a66c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a66a:	2300      	movs	r3, #0
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3718      	adds	r7, #24
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}

0800a674 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b082      	sub	sp, #8
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2201      	movs	r2, #1
 800a680:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2200      	movs	r2, #0
 800a688:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	2200      	movs	r2, #0
 800a696:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d101      	bne.n	800a6a8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a6a4:	2303      	movs	r3, #3
 800a6a6:	e02f      	b.n	800a708 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d00f      	beq.n	800a6d2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d009      	beq.n	800a6d2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6c4:	685b      	ldr	r3, [r3, #4]
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	6852      	ldr	r2, [r2, #4]
 800a6ca:	b2d2      	uxtb	r2, r2
 800a6cc:	4611      	mov	r1, r2
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6d2:	2340      	movs	r3, #64	; 0x40
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	2100      	movs	r1, #0
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f001 fa5e 	bl	800bb9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2240      	movs	r2, #64	; 0x40
 800a6ea:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a6ee:	2340      	movs	r3, #64	; 0x40
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	2180      	movs	r1, #128	; 0x80
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f001 fa50 	bl	800bb9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2240      	movs	r2, #64	; 0x40
 800a704:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a706:	2300      	movs	r3, #0
}
 800a708:	4618      	mov	r0, r3
 800a70a:	3708      	adds	r7, #8
 800a70c:	46bd      	mov	sp, r7
 800a70e:	bd80      	pop	{r7, pc}

0800a710 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
 800a718:	460b      	mov	r3, r1
 800a71a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	78fa      	ldrb	r2, [r7, #3]
 800a720:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a730:	b480      	push	{r7}
 800a732:	b083      	sub	sp, #12
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a73e:	b2da      	uxtb	r2, r3
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2204      	movs	r2, #4
 800a74a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a74e:	2300      	movs	r3, #0
}
 800a750:	4618      	mov	r0, r3
 800a752:	370c      	adds	r7, #12
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b083      	sub	sp, #12
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a76a:	b2db      	uxtb	r3, r3
 800a76c:	2b04      	cmp	r3, #4
 800a76e:	d106      	bne.n	800a77e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a776:	b2da      	uxtb	r2, r3
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a78c:	b580      	push	{r7, lr}
 800a78e:	b082      	sub	sp, #8
 800a790:	af00      	add	r7, sp, #0
 800a792:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a79e:	2303      	movs	r3, #3
 800a7a0:	e012      	b.n	800a7c8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	2b03      	cmp	r3, #3
 800a7ac:	d10b      	bne.n	800a7c6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7b4:	69db      	ldr	r3, [r3, #28]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d005      	beq.n	800a7c6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7c0:	69db      	ldr	r3, [r3, #28]
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a7c6:	2300      	movs	r3, #0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b087      	sub	sp, #28
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	781b      	ldrb	r3, [r3, #0]
 800a7e0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	3301      	adds	r3, #1
 800a7e6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a7ee:	8a3b      	ldrh	r3, [r7, #16]
 800a7f0:	021b      	lsls	r3, r3, #8
 800a7f2:	b21a      	sxth	r2, r3
 800a7f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	b21b      	sxth	r3, r3
 800a7fc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a7fe:	89fb      	ldrh	r3, [r7, #14]
}
 800a800:	4618      	mov	r0, r3
 800a802:	371c      	adds	r7, #28
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a816:	2300      	movs	r3, #0
 800a818:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	781b      	ldrb	r3, [r3, #0]
 800a81e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a822:	2b40      	cmp	r3, #64	; 0x40
 800a824:	d005      	beq.n	800a832 <USBD_StdDevReq+0x26>
 800a826:	2b40      	cmp	r3, #64	; 0x40
 800a828:	d853      	bhi.n	800a8d2 <USBD_StdDevReq+0xc6>
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d00b      	beq.n	800a846 <USBD_StdDevReq+0x3a>
 800a82e:	2b20      	cmp	r3, #32
 800a830:	d14f      	bne.n	800a8d2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	6839      	ldr	r1, [r7, #0]
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	4798      	blx	r3
 800a840:	4603      	mov	r3, r0
 800a842:	73fb      	strb	r3, [r7, #15]
      break;
 800a844:	e04a      	b.n	800a8dc <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	785b      	ldrb	r3, [r3, #1]
 800a84a:	2b09      	cmp	r3, #9
 800a84c:	d83b      	bhi.n	800a8c6 <USBD_StdDevReq+0xba>
 800a84e:	a201      	add	r2, pc, #4	; (adr r2, 800a854 <USBD_StdDevReq+0x48>)
 800a850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a854:	0800a8a9 	.word	0x0800a8a9
 800a858:	0800a8bd 	.word	0x0800a8bd
 800a85c:	0800a8c7 	.word	0x0800a8c7
 800a860:	0800a8b3 	.word	0x0800a8b3
 800a864:	0800a8c7 	.word	0x0800a8c7
 800a868:	0800a887 	.word	0x0800a887
 800a86c:	0800a87d 	.word	0x0800a87d
 800a870:	0800a8c7 	.word	0x0800a8c7
 800a874:	0800a89f 	.word	0x0800a89f
 800a878:	0800a891 	.word	0x0800a891
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a87c:	6839      	ldr	r1, [r7, #0]
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f9de 	bl	800ac40 <USBD_GetDescriptor>
          break;
 800a884:	e024      	b.n	800a8d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a886:	6839      	ldr	r1, [r7, #0]
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 fb6d 	bl	800af68 <USBD_SetAddress>
          break;
 800a88e:	e01f      	b.n	800a8d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a890:	6839      	ldr	r1, [r7, #0]
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 fbac 	bl	800aff0 <USBD_SetConfig>
 800a898:	4603      	mov	r3, r0
 800a89a:	73fb      	strb	r3, [r7, #15]
          break;
 800a89c:	e018      	b.n	800a8d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a89e:	6839      	ldr	r1, [r7, #0]
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f000 fc4b 	bl	800b13c <USBD_GetConfig>
          break;
 800a8a6:	e013      	b.n	800a8d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a8a8:	6839      	ldr	r1, [r7, #0]
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f000 fc7c 	bl	800b1a8 <USBD_GetStatus>
          break;
 800a8b0:	e00e      	b.n	800a8d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a8b2:	6839      	ldr	r1, [r7, #0]
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 fcab 	bl	800b210 <USBD_SetFeature>
          break;
 800a8ba:	e009      	b.n	800a8d0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a8bc:	6839      	ldr	r1, [r7, #0]
 800a8be:	6878      	ldr	r0, [r7, #4]
 800a8c0:	f000 fcba 	bl	800b238 <USBD_ClrFeature>
          break;
 800a8c4:	e004      	b.n	800a8d0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a8c6:	6839      	ldr	r1, [r7, #0]
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 fd11 	bl	800b2f0 <USBD_CtlError>
          break;
 800a8ce:	bf00      	nop
      }
      break;
 800a8d0:	e004      	b.n	800a8dc <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a8d2:	6839      	ldr	r1, [r7, #0]
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f000 fd0b 	bl	800b2f0 <USBD_CtlError>
      break;
 800a8da:	bf00      	nop
  }

  return ret;
 800a8dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop

0800a8e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b084      	sub	sp, #16
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a8fe:	2b40      	cmp	r3, #64	; 0x40
 800a900:	d005      	beq.n	800a90e <USBD_StdItfReq+0x26>
 800a902:	2b40      	cmp	r3, #64	; 0x40
 800a904:	d82f      	bhi.n	800a966 <USBD_StdItfReq+0x7e>
 800a906:	2b00      	cmp	r3, #0
 800a908:	d001      	beq.n	800a90e <USBD_StdItfReq+0x26>
 800a90a:	2b20      	cmp	r3, #32
 800a90c:	d12b      	bne.n	800a966 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a914:	b2db      	uxtb	r3, r3
 800a916:	3b01      	subs	r3, #1
 800a918:	2b02      	cmp	r3, #2
 800a91a:	d81d      	bhi.n	800a958 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	889b      	ldrh	r3, [r3, #4]
 800a920:	b2db      	uxtb	r3, r3
 800a922:	2b01      	cmp	r3, #1
 800a924:	d813      	bhi.n	800a94e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	6839      	ldr	r1, [r7, #0]
 800a930:	6878      	ldr	r0, [r7, #4]
 800a932:	4798      	blx	r3
 800a934:	4603      	mov	r3, r0
 800a936:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	88db      	ldrh	r3, [r3, #6]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d110      	bne.n	800a962 <USBD_StdItfReq+0x7a>
 800a940:	7bfb      	ldrb	r3, [r7, #15]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d10d      	bne.n	800a962 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f000 fd9d 	bl	800b486 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a94c:	e009      	b.n	800a962 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a94e:	6839      	ldr	r1, [r7, #0]
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fccd 	bl	800b2f0 <USBD_CtlError>
          break;
 800a956:	e004      	b.n	800a962 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a958:	6839      	ldr	r1, [r7, #0]
 800a95a:	6878      	ldr	r0, [r7, #4]
 800a95c:	f000 fcc8 	bl	800b2f0 <USBD_CtlError>
          break;
 800a960:	e000      	b.n	800a964 <USBD_StdItfReq+0x7c>
          break;
 800a962:	bf00      	nop
      }
      break;
 800a964:	e004      	b.n	800a970 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a966:	6839      	ldr	r1, [r7, #0]
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f000 fcc1 	bl	800b2f0 <USBD_CtlError>
      break;
 800a96e:	bf00      	nop
  }

  return ret;
 800a970:	7bfb      	ldrb	r3, [r7, #15]
}
 800a972:	4618      	mov	r0, r3
 800a974:	3710      	adds	r7, #16
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b084      	sub	sp, #16
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
 800a982:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a984:	2300      	movs	r3, #0
 800a986:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	889b      	ldrh	r3, [r3, #4]
 800a98c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	781b      	ldrb	r3, [r3, #0]
 800a992:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a996:	2b40      	cmp	r3, #64	; 0x40
 800a998:	d007      	beq.n	800a9aa <USBD_StdEPReq+0x30>
 800a99a:	2b40      	cmp	r3, #64	; 0x40
 800a99c:	f200 8145 	bhi.w	800ac2a <USBD_StdEPReq+0x2b0>
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d00c      	beq.n	800a9be <USBD_StdEPReq+0x44>
 800a9a4:	2b20      	cmp	r3, #32
 800a9a6:	f040 8140 	bne.w	800ac2a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	6839      	ldr	r1, [r7, #0]
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	4798      	blx	r3
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	73fb      	strb	r3, [r7, #15]
      break;
 800a9bc:	e13a      	b.n	800ac34 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	785b      	ldrb	r3, [r3, #1]
 800a9c2:	2b03      	cmp	r3, #3
 800a9c4:	d007      	beq.n	800a9d6 <USBD_StdEPReq+0x5c>
 800a9c6:	2b03      	cmp	r3, #3
 800a9c8:	f300 8129 	bgt.w	800ac1e <USBD_StdEPReq+0x2a4>
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d07f      	beq.n	800aad0 <USBD_StdEPReq+0x156>
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d03c      	beq.n	800aa4e <USBD_StdEPReq+0xd4>
 800a9d4:	e123      	b.n	800ac1e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9dc:	b2db      	uxtb	r3, r3
 800a9de:	2b02      	cmp	r3, #2
 800a9e0:	d002      	beq.n	800a9e8 <USBD_StdEPReq+0x6e>
 800a9e2:	2b03      	cmp	r3, #3
 800a9e4:	d016      	beq.n	800aa14 <USBD_StdEPReq+0x9a>
 800a9e6:	e02c      	b.n	800aa42 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a9e8:	7bbb      	ldrb	r3, [r7, #14]
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00d      	beq.n	800aa0a <USBD_StdEPReq+0x90>
 800a9ee:	7bbb      	ldrb	r3, [r7, #14]
 800a9f0:	2b80      	cmp	r3, #128	; 0x80
 800a9f2:	d00a      	beq.n	800aa0a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a9f4:	7bbb      	ldrb	r3, [r7, #14]
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f001 f913 	bl	800bc24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a9fe:	2180      	movs	r1, #128	; 0x80
 800aa00:	6878      	ldr	r0, [r7, #4]
 800aa02:	f001 f90f 	bl	800bc24 <USBD_LL_StallEP>
 800aa06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa08:	e020      	b.n	800aa4c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800aa0a:	6839      	ldr	r1, [r7, #0]
 800aa0c:	6878      	ldr	r0, [r7, #4]
 800aa0e:	f000 fc6f 	bl	800b2f0 <USBD_CtlError>
              break;
 800aa12:	e01b      	b.n	800aa4c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	885b      	ldrh	r3, [r3, #2]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d10e      	bne.n	800aa3a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800aa1c:	7bbb      	ldrb	r3, [r7, #14]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00b      	beq.n	800aa3a <USBD_StdEPReq+0xc0>
 800aa22:	7bbb      	ldrb	r3, [r7, #14]
 800aa24:	2b80      	cmp	r3, #128	; 0x80
 800aa26:	d008      	beq.n	800aa3a <USBD_StdEPReq+0xc0>
 800aa28:	683b      	ldr	r3, [r7, #0]
 800aa2a:	88db      	ldrh	r3, [r3, #6]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d104      	bne.n	800aa3a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa30:	7bbb      	ldrb	r3, [r7, #14]
 800aa32:	4619      	mov	r1, r3
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f001 f8f5 	bl	800bc24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 fd23 	bl	800b486 <USBD_CtlSendStatus>

              break;
 800aa40:	e004      	b.n	800aa4c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800aa42:	6839      	ldr	r1, [r7, #0]
 800aa44:	6878      	ldr	r0, [r7, #4]
 800aa46:	f000 fc53 	bl	800b2f0 <USBD_CtlError>
              break;
 800aa4a:	bf00      	nop
          }
          break;
 800aa4c:	e0ec      	b.n	800ac28 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d002      	beq.n	800aa60 <USBD_StdEPReq+0xe6>
 800aa5a:	2b03      	cmp	r3, #3
 800aa5c:	d016      	beq.n	800aa8c <USBD_StdEPReq+0x112>
 800aa5e:	e030      	b.n	800aac2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa60:	7bbb      	ldrb	r3, [r7, #14]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00d      	beq.n	800aa82 <USBD_StdEPReq+0x108>
 800aa66:	7bbb      	ldrb	r3, [r7, #14]
 800aa68:	2b80      	cmp	r3, #128	; 0x80
 800aa6a:	d00a      	beq.n	800aa82 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aa6c:	7bbb      	ldrb	r3, [r7, #14]
 800aa6e:	4619      	mov	r1, r3
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f001 f8d7 	bl	800bc24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aa76:	2180      	movs	r1, #128	; 0x80
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f001 f8d3 	bl	800bc24 <USBD_LL_StallEP>
 800aa7e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aa80:	e025      	b.n	800aace <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800aa82:	6839      	ldr	r1, [r7, #0]
 800aa84:	6878      	ldr	r0, [r7, #4]
 800aa86:	f000 fc33 	bl	800b2f0 <USBD_CtlError>
              break;
 800aa8a:	e020      	b.n	800aace <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	885b      	ldrh	r3, [r3, #2]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d11b      	bne.n	800aacc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aa94:	7bbb      	ldrb	r3, [r7, #14]
 800aa96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d004      	beq.n	800aaa8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa9e:	7bbb      	ldrb	r3, [r7, #14]
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f001 f8dd 	bl	800bc62 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aaa8:	6878      	ldr	r0, [r7, #4]
 800aaaa:	f000 fcec 	bl	800b486 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	6839      	ldr	r1, [r7, #0]
 800aab8:	6878      	ldr	r0, [r7, #4]
 800aaba:	4798      	blx	r3
 800aabc:	4603      	mov	r3, r0
 800aabe:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800aac0:	e004      	b.n	800aacc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800aac2:	6839      	ldr	r1, [r7, #0]
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f000 fc13 	bl	800b2f0 <USBD_CtlError>
              break;
 800aaca:	e000      	b.n	800aace <USBD_StdEPReq+0x154>
              break;
 800aacc:	bf00      	nop
          }
          break;
 800aace:	e0ab      	b.n	800ac28 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aad6:	b2db      	uxtb	r3, r3
 800aad8:	2b02      	cmp	r3, #2
 800aada:	d002      	beq.n	800aae2 <USBD_StdEPReq+0x168>
 800aadc:	2b03      	cmp	r3, #3
 800aade:	d032      	beq.n	800ab46 <USBD_StdEPReq+0x1cc>
 800aae0:	e097      	b.n	800ac12 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aae2:	7bbb      	ldrb	r3, [r7, #14]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d007      	beq.n	800aaf8 <USBD_StdEPReq+0x17e>
 800aae8:	7bbb      	ldrb	r3, [r7, #14]
 800aaea:	2b80      	cmp	r3, #128	; 0x80
 800aaec:	d004      	beq.n	800aaf8 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800aaee:	6839      	ldr	r1, [r7, #0]
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 fbfd 	bl	800b2f0 <USBD_CtlError>
                break;
 800aaf6:	e091      	b.n	800ac1c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800aaf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	da0b      	bge.n	800ab18 <USBD_StdEPReq+0x19e>
 800ab00:	7bbb      	ldrb	r3, [r7, #14]
 800ab02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab06:	4613      	mov	r3, r2
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	4413      	add	r3, r2
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	3310      	adds	r3, #16
 800ab10:	687a      	ldr	r2, [r7, #4]
 800ab12:	4413      	add	r3, r2
 800ab14:	3304      	adds	r3, #4
 800ab16:	e00b      	b.n	800ab30 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ab18:	7bbb      	ldrb	r3, [r7, #14]
 800ab1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab1e:	4613      	mov	r3, r2
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	4413      	add	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ab2a:	687a      	ldr	r2, [r7, #4]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	3304      	adds	r3, #4
 800ab30:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ab32:	68bb      	ldr	r3, [r7, #8]
 800ab34:	2200      	movs	r2, #0
 800ab36:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	2202      	movs	r2, #2
 800ab3c:	4619      	mov	r1, r3
 800ab3e:	6878      	ldr	r0, [r7, #4]
 800ab40:	f000 fc47 	bl	800b3d2 <USBD_CtlSendData>
              break;
 800ab44:	e06a      	b.n	800ac1c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ab46:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	da11      	bge.n	800ab72 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ab4e:	7bbb      	ldrb	r3, [r7, #14]
 800ab50:	f003 020f 	and.w	r2, r3, #15
 800ab54:	6879      	ldr	r1, [r7, #4]
 800ab56:	4613      	mov	r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4413      	add	r3, r2
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	440b      	add	r3, r1
 800ab60:	3324      	adds	r3, #36	; 0x24
 800ab62:	881b      	ldrh	r3, [r3, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d117      	bne.n	800ab98 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ab68:	6839      	ldr	r1, [r7, #0]
 800ab6a:	6878      	ldr	r0, [r7, #4]
 800ab6c:	f000 fbc0 	bl	800b2f0 <USBD_CtlError>
                  break;
 800ab70:	e054      	b.n	800ac1c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ab72:	7bbb      	ldrb	r3, [r7, #14]
 800ab74:	f003 020f 	and.w	r2, r3, #15
 800ab78:	6879      	ldr	r1, [r7, #4]
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	009b      	lsls	r3, r3, #2
 800ab7e:	4413      	add	r3, r2
 800ab80:	009b      	lsls	r3, r3, #2
 800ab82:	440b      	add	r3, r1
 800ab84:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ab88:	881b      	ldrh	r3, [r3, #0]
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d104      	bne.n	800ab98 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ab8e:	6839      	ldr	r1, [r7, #0]
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f000 fbad 	bl	800b2f0 <USBD_CtlError>
                  break;
 800ab96:	e041      	b.n	800ac1c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ab98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	da0b      	bge.n	800abb8 <USBD_StdEPReq+0x23e>
 800aba0:	7bbb      	ldrb	r3, [r7, #14]
 800aba2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aba6:	4613      	mov	r3, r2
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	4413      	add	r3, r2
 800abac:	009b      	lsls	r3, r3, #2
 800abae:	3310      	adds	r3, #16
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	4413      	add	r3, r2
 800abb4:	3304      	adds	r3, #4
 800abb6:	e00b      	b.n	800abd0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800abb8:	7bbb      	ldrb	r3, [r7, #14]
 800abba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800abbe:	4613      	mov	r3, r2
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	4413      	add	r3, r2
 800abc4:	009b      	lsls	r3, r3, #2
 800abc6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	4413      	add	r3, r2
 800abce:	3304      	adds	r3, #4
 800abd0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800abd2:	7bbb      	ldrb	r3, [r7, #14]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d002      	beq.n	800abde <USBD_StdEPReq+0x264>
 800abd8:	7bbb      	ldrb	r3, [r7, #14]
 800abda:	2b80      	cmp	r3, #128	; 0x80
 800abdc:	d103      	bne.n	800abe6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	2200      	movs	r2, #0
 800abe2:	601a      	str	r2, [r3, #0]
 800abe4:	e00e      	b.n	800ac04 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800abe6:	7bbb      	ldrb	r3, [r7, #14]
 800abe8:	4619      	mov	r1, r3
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f001 f858 	bl	800bca0 <USBD_LL_IsStallEP>
 800abf0:	4603      	mov	r3, r0
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d003      	beq.n	800abfe <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	2201      	movs	r2, #1
 800abfa:	601a      	str	r2, [r3, #0]
 800abfc:	e002      	b.n	800ac04 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	2200      	movs	r2, #0
 800ac02:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	2202      	movs	r2, #2
 800ac08:	4619      	mov	r1, r3
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f000 fbe1 	bl	800b3d2 <USBD_CtlSendData>
              break;
 800ac10:	e004      	b.n	800ac1c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ac12:	6839      	ldr	r1, [r7, #0]
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f000 fb6b 	bl	800b2f0 <USBD_CtlError>
              break;
 800ac1a:	bf00      	nop
          }
          break;
 800ac1c:	e004      	b.n	800ac28 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ac1e:	6839      	ldr	r1, [r7, #0]
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 fb65 	bl	800b2f0 <USBD_CtlError>
          break;
 800ac26:	bf00      	nop
      }
      break;
 800ac28:	e004      	b.n	800ac34 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ac2a:	6839      	ldr	r1, [r7, #0]
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 fb5f 	bl	800b2f0 <USBD_CtlError>
      break;
 800ac32:	bf00      	nop
  }

  return ret;
 800ac34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac36:	4618      	mov	r0, r3
 800ac38:	3710      	adds	r7, #16
 800ac3a:	46bd      	mov	sp, r7
 800ac3c:	bd80      	pop	{r7, pc}
	...

0800ac40 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ac52:	2300      	movs	r3, #0
 800ac54:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	885b      	ldrh	r3, [r3, #2]
 800ac5a:	0a1b      	lsrs	r3, r3, #8
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	3b01      	subs	r3, #1
 800ac60:	2b0e      	cmp	r3, #14
 800ac62:	f200 8152 	bhi.w	800af0a <USBD_GetDescriptor+0x2ca>
 800ac66:	a201      	add	r2, pc, #4	; (adr r2, 800ac6c <USBD_GetDescriptor+0x2c>)
 800ac68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac6c:	0800acdd 	.word	0x0800acdd
 800ac70:	0800acf5 	.word	0x0800acf5
 800ac74:	0800ad35 	.word	0x0800ad35
 800ac78:	0800af0b 	.word	0x0800af0b
 800ac7c:	0800af0b 	.word	0x0800af0b
 800ac80:	0800aeab 	.word	0x0800aeab
 800ac84:	0800aed7 	.word	0x0800aed7
 800ac88:	0800af0b 	.word	0x0800af0b
 800ac8c:	0800af0b 	.word	0x0800af0b
 800ac90:	0800af0b 	.word	0x0800af0b
 800ac94:	0800af0b 	.word	0x0800af0b
 800ac98:	0800af0b 	.word	0x0800af0b
 800ac9c:	0800af0b 	.word	0x0800af0b
 800aca0:	0800af0b 	.word	0x0800af0b
 800aca4:	0800aca9 	.word	0x0800aca9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acae:	69db      	ldr	r3, [r3, #28]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d00b      	beq.n	800accc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800acba:	69db      	ldr	r3, [r3, #28]
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	7c12      	ldrb	r2, [r2, #16]
 800acc0:	f107 0108 	add.w	r1, r7, #8
 800acc4:	4610      	mov	r0, r2
 800acc6:	4798      	blx	r3
 800acc8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800acca:	e126      	b.n	800af1a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800accc:	6839      	ldr	r1, [r7, #0]
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fb0e 	bl	800b2f0 <USBD_CtlError>
        err++;
 800acd4:	7afb      	ldrb	r3, [r7, #11]
 800acd6:	3301      	adds	r3, #1
 800acd8:	72fb      	strb	r3, [r7, #11]
      break;
 800acda:	e11e      	b.n	800af1a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	687a      	ldr	r2, [r7, #4]
 800ace6:	7c12      	ldrb	r2, [r2, #16]
 800ace8:	f107 0108 	add.w	r1, r7, #8
 800acec:	4610      	mov	r0, r2
 800acee:	4798      	blx	r3
 800acf0:	60f8      	str	r0, [r7, #12]
      break;
 800acf2:	e112      	b.n	800af1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	7c1b      	ldrb	r3, [r3, #16]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10d      	bne.n	800ad18 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad04:	f107 0208 	add.w	r2, r7, #8
 800ad08:	4610      	mov	r0, r2
 800ad0a:	4798      	blx	r3
 800ad0c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	3301      	adds	r3, #1
 800ad12:	2202      	movs	r2, #2
 800ad14:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ad16:	e100      	b.n	800af1a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad20:	f107 0208 	add.w	r2, r7, #8
 800ad24:	4610      	mov	r0, r2
 800ad26:	4798      	blx	r3
 800ad28:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	2202      	movs	r2, #2
 800ad30:	701a      	strb	r2, [r3, #0]
      break;
 800ad32:	e0f2      	b.n	800af1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	885b      	ldrh	r3, [r3, #2]
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	2b05      	cmp	r3, #5
 800ad3c:	f200 80ac 	bhi.w	800ae98 <USBD_GetDescriptor+0x258>
 800ad40:	a201      	add	r2, pc, #4	; (adr r2, 800ad48 <USBD_GetDescriptor+0x108>)
 800ad42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad46:	bf00      	nop
 800ad48:	0800ad61 	.word	0x0800ad61
 800ad4c:	0800ad95 	.word	0x0800ad95
 800ad50:	0800adc9 	.word	0x0800adc9
 800ad54:	0800adfd 	.word	0x0800adfd
 800ad58:	0800ae31 	.word	0x0800ae31
 800ad5c:	0800ae65 	.word	0x0800ae65
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d00b      	beq.n	800ad84 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad72:	685b      	ldr	r3, [r3, #4]
 800ad74:	687a      	ldr	r2, [r7, #4]
 800ad76:	7c12      	ldrb	r2, [r2, #16]
 800ad78:	f107 0108 	add.w	r1, r7, #8
 800ad7c:	4610      	mov	r0, r2
 800ad7e:	4798      	blx	r3
 800ad80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ad82:	e091      	b.n	800aea8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ad84:	6839      	ldr	r1, [r7, #0]
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f000 fab2 	bl	800b2f0 <USBD_CtlError>
            err++;
 800ad8c:	7afb      	ldrb	r3, [r7, #11]
 800ad8e:	3301      	adds	r3, #1
 800ad90:	72fb      	strb	r3, [r7, #11]
          break;
 800ad92:	e089      	b.n	800aea8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ad9a:	689b      	ldr	r3, [r3, #8]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d00b      	beq.n	800adb8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	687a      	ldr	r2, [r7, #4]
 800adaa:	7c12      	ldrb	r2, [r2, #16]
 800adac:	f107 0108 	add.w	r1, r7, #8
 800adb0:	4610      	mov	r0, r2
 800adb2:	4798      	blx	r3
 800adb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adb6:	e077      	b.n	800aea8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800adb8:	6839      	ldr	r1, [r7, #0]
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fa98 	bl	800b2f0 <USBD_CtlError>
            err++;
 800adc0:	7afb      	ldrb	r3, [r7, #11]
 800adc2:	3301      	adds	r3, #1
 800adc4:	72fb      	strb	r3, [r7, #11]
          break;
 800adc6:	e06f      	b.n	800aea8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adce:	68db      	ldr	r3, [r3, #12]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d00b      	beq.n	800adec <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	7c12      	ldrb	r2, [r2, #16]
 800ade0:	f107 0108 	add.w	r1, r7, #8
 800ade4:	4610      	mov	r0, r2
 800ade6:	4798      	blx	r3
 800ade8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800adea:	e05d      	b.n	800aea8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800adec:	6839      	ldr	r1, [r7, #0]
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	f000 fa7e 	bl	800b2f0 <USBD_CtlError>
            err++;
 800adf4:	7afb      	ldrb	r3, [r7, #11]
 800adf6:	3301      	adds	r3, #1
 800adf8:	72fb      	strb	r3, [r7, #11]
          break;
 800adfa:	e055      	b.n	800aea8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae02:	691b      	ldr	r3, [r3, #16]
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d00b      	beq.n	800ae20 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae0e:	691b      	ldr	r3, [r3, #16]
 800ae10:	687a      	ldr	r2, [r7, #4]
 800ae12:	7c12      	ldrb	r2, [r2, #16]
 800ae14:	f107 0108 	add.w	r1, r7, #8
 800ae18:	4610      	mov	r0, r2
 800ae1a:	4798      	blx	r3
 800ae1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae1e:	e043      	b.n	800aea8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae20:	6839      	ldr	r1, [r7, #0]
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f000 fa64 	bl	800b2f0 <USBD_CtlError>
            err++;
 800ae28:	7afb      	ldrb	r3, [r7, #11]
 800ae2a:	3301      	adds	r3, #1
 800ae2c:	72fb      	strb	r3, [r7, #11]
          break;
 800ae2e:	e03b      	b.n	800aea8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae36:	695b      	ldr	r3, [r3, #20]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d00b      	beq.n	800ae54 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae42:	695b      	ldr	r3, [r3, #20]
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	7c12      	ldrb	r2, [r2, #16]
 800ae48:	f107 0108 	add.w	r1, r7, #8
 800ae4c:	4610      	mov	r0, r2
 800ae4e:	4798      	blx	r3
 800ae50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae52:	e029      	b.n	800aea8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae54:	6839      	ldr	r1, [r7, #0]
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f000 fa4a 	bl	800b2f0 <USBD_CtlError>
            err++;
 800ae5c:	7afb      	ldrb	r3, [r7, #11]
 800ae5e:	3301      	adds	r3, #1
 800ae60:	72fb      	strb	r3, [r7, #11]
          break;
 800ae62:	e021      	b.n	800aea8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae6a:	699b      	ldr	r3, [r3, #24]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d00b      	beq.n	800ae88 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae76:	699b      	ldr	r3, [r3, #24]
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	7c12      	ldrb	r2, [r2, #16]
 800ae7c:	f107 0108 	add.w	r1, r7, #8
 800ae80:	4610      	mov	r0, r2
 800ae82:	4798      	blx	r3
 800ae84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ae86:	e00f      	b.n	800aea8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ae88:	6839      	ldr	r1, [r7, #0]
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 fa30 	bl	800b2f0 <USBD_CtlError>
            err++;
 800ae90:	7afb      	ldrb	r3, [r7, #11]
 800ae92:	3301      	adds	r3, #1
 800ae94:	72fb      	strb	r3, [r7, #11]
          break;
 800ae96:	e007      	b.n	800aea8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ae98:	6839      	ldr	r1, [r7, #0]
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f000 fa28 	bl	800b2f0 <USBD_CtlError>
          err++;
 800aea0:	7afb      	ldrb	r3, [r7, #11]
 800aea2:	3301      	adds	r3, #1
 800aea4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800aea6:	bf00      	nop
      }
      break;
 800aea8:	e037      	b.n	800af1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	7c1b      	ldrb	r3, [r3, #16]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d109      	bne.n	800aec6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeba:	f107 0208 	add.w	r2, r7, #8
 800aebe:	4610      	mov	r0, r2
 800aec0:	4798      	blx	r3
 800aec2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aec4:	e029      	b.n	800af1a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aec6:	6839      	ldr	r1, [r7, #0]
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	f000 fa11 	bl	800b2f0 <USBD_CtlError>
        err++;
 800aece:	7afb      	ldrb	r3, [r7, #11]
 800aed0:	3301      	adds	r3, #1
 800aed2:	72fb      	strb	r3, [r7, #11]
      break;
 800aed4:	e021      	b.n	800af1a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	7c1b      	ldrb	r3, [r3, #16]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d10d      	bne.n	800aefa <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aee6:	f107 0208 	add.w	r2, r7, #8
 800aeea:	4610      	mov	r0, r2
 800aeec:	4798      	blx	r3
 800aeee:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	3301      	adds	r3, #1
 800aef4:	2207      	movs	r2, #7
 800aef6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aef8:	e00f      	b.n	800af1a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800aefa:	6839      	ldr	r1, [r7, #0]
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f000 f9f7 	bl	800b2f0 <USBD_CtlError>
        err++;
 800af02:	7afb      	ldrb	r3, [r7, #11]
 800af04:	3301      	adds	r3, #1
 800af06:	72fb      	strb	r3, [r7, #11]
      break;
 800af08:	e007      	b.n	800af1a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800af0a:	6839      	ldr	r1, [r7, #0]
 800af0c:	6878      	ldr	r0, [r7, #4]
 800af0e:	f000 f9ef 	bl	800b2f0 <USBD_CtlError>
      err++;
 800af12:	7afb      	ldrb	r3, [r7, #11]
 800af14:	3301      	adds	r3, #1
 800af16:	72fb      	strb	r3, [r7, #11]
      break;
 800af18:	bf00      	nop
  }

  if (err != 0U)
 800af1a:	7afb      	ldrb	r3, [r7, #11]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d11e      	bne.n	800af5e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	88db      	ldrh	r3, [r3, #6]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d016      	beq.n	800af56 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800af28:	893b      	ldrh	r3, [r7, #8]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d00e      	beq.n	800af4c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	88da      	ldrh	r2, [r3, #6]
 800af32:	893b      	ldrh	r3, [r7, #8]
 800af34:	4293      	cmp	r3, r2
 800af36:	bf28      	it	cs
 800af38:	4613      	movcs	r3, r2
 800af3a:	b29b      	uxth	r3, r3
 800af3c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800af3e:	893b      	ldrh	r3, [r7, #8]
 800af40:	461a      	mov	r2, r3
 800af42:	68f9      	ldr	r1, [r7, #12]
 800af44:	6878      	ldr	r0, [r7, #4]
 800af46:	f000 fa44 	bl	800b3d2 <USBD_CtlSendData>
 800af4a:	e009      	b.n	800af60 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800af4c:	6839      	ldr	r1, [r7, #0]
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f000 f9ce 	bl	800b2f0 <USBD_CtlError>
 800af54:	e004      	b.n	800af60 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 fa95 	bl	800b486 <USBD_CtlSendStatus>
 800af5c:	e000      	b.n	800af60 <USBD_GetDescriptor+0x320>
    return;
 800af5e:	bf00      	nop
  }
}
 800af60:	3710      	adds	r7, #16
 800af62:	46bd      	mov	sp, r7
 800af64:	bd80      	pop	{r7, pc}
 800af66:	bf00      	nop

0800af68 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b084      	sub	sp, #16
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	889b      	ldrh	r3, [r3, #4]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d131      	bne.n	800afde <USBD_SetAddress+0x76>
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	88db      	ldrh	r3, [r3, #6]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d12d      	bne.n	800afde <USBD_SetAddress+0x76>
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	885b      	ldrh	r3, [r3, #2]
 800af86:	2b7f      	cmp	r3, #127	; 0x7f
 800af88:	d829      	bhi.n	800afde <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	885b      	ldrh	r3, [r3, #2]
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af94:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	2b03      	cmp	r3, #3
 800afa0:	d104      	bne.n	800afac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800afa2:	6839      	ldr	r1, [r7, #0]
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 f9a3 	bl	800b2f0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afaa:	e01d      	b.n	800afe8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	7bfa      	ldrb	r2, [r7, #15]
 800afb0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800afb4:	7bfb      	ldrb	r3, [r7, #15]
 800afb6:	4619      	mov	r1, r3
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 fe9d 	bl	800bcf8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 fa61 	bl	800b486 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800afc4:	7bfb      	ldrb	r3, [r7, #15]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d004      	beq.n	800afd4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	2202      	movs	r2, #2
 800afce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afd2:	e009      	b.n	800afe8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	2201      	movs	r2, #1
 800afd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afdc:	e004      	b.n	800afe8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800afde:	6839      	ldr	r1, [r7, #0]
 800afe0:	6878      	ldr	r0, [r7, #4]
 800afe2:	f000 f985 	bl	800b2f0 <USBD_CtlError>
  }
}
 800afe6:	bf00      	nop
 800afe8:	bf00      	nop
 800afea:	3710      	adds	r7, #16
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800affa:	2300      	movs	r3, #0
 800affc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	885b      	ldrh	r3, [r3, #2]
 800b002:	b2da      	uxtb	r2, r3
 800b004:	4b4c      	ldr	r3, [pc, #304]	; (800b138 <USBD_SetConfig+0x148>)
 800b006:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b008:	4b4b      	ldr	r3, [pc, #300]	; (800b138 <USBD_SetConfig+0x148>)
 800b00a:	781b      	ldrb	r3, [r3, #0]
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d905      	bls.n	800b01c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b010:	6839      	ldr	r1, [r7, #0]
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 f96c 	bl	800b2f0 <USBD_CtlError>
    return USBD_FAIL;
 800b018:	2303      	movs	r3, #3
 800b01a:	e088      	b.n	800b12e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b022:	b2db      	uxtb	r3, r3
 800b024:	2b02      	cmp	r3, #2
 800b026:	d002      	beq.n	800b02e <USBD_SetConfig+0x3e>
 800b028:	2b03      	cmp	r3, #3
 800b02a:	d025      	beq.n	800b078 <USBD_SetConfig+0x88>
 800b02c:	e071      	b.n	800b112 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b02e:	4b42      	ldr	r3, [pc, #264]	; (800b138 <USBD_SetConfig+0x148>)
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d01c      	beq.n	800b070 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b036:	4b40      	ldr	r3, [pc, #256]	; (800b138 <USBD_SetConfig+0x148>)
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	461a      	mov	r2, r3
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b040:	4b3d      	ldr	r3, [pc, #244]	; (800b138 <USBD_SetConfig+0x148>)
 800b042:	781b      	ldrb	r3, [r3, #0]
 800b044:	4619      	mov	r1, r3
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f7ff f992 	bl	800a370 <USBD_SetClassConfig>
 800b04c:	4603      	mov	r3, r0
 800b04e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b050:	7bfb      	ldrb	r3, [r7, #15]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d004      	beq.n	800b060 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b056:	6839      	ldr	r1, [r7, #0]
 800b058:	6878      	ldr	r0, [r7, #4]
 800b05a:	f000 f949 	bl	800b2f0 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b05e:	e065      	b.n	800b12c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 fa10 	bl	800b486 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2203      	movs	r2, #3
 800b06a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b06e:	e05d      	b.n	800b12c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 fa08 	bl	800b486 <USBD_CtlSendStatus>
      break;
 800b076:	e059      	b.n	800b12c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b078:	4b2f      	ldr	r3, [pc, #188]	; (800b138 <USBD_SetConfig+0x148>)
 800b07a:	781b      	ldrb	r3, [r3, #0]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d112      	bne.n	800b0a6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2202      	movs	r2, #2
 800b084:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b088:	4b2b      	ldr	r3, [pc, #172]	; (800b138 <USBD_SetConfig+0x148>)
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	461a      	mov	r2, r3
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b092:	4b29      	ldr	r3, [pc, #164]	; (800b138 <USBD_SetConfig+0x148>)
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	4619      	mov	r1, r3
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f7ff f985 	bl	800a3a8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f000 f9f1 	bl	800b486 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b0a4:	e042      	b.n	800b12c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b0a6:	4b24      	ldr	r3, [pc, #144]	; (800b138 <USBD_SetConfig+0x148>)
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d02a      	beq.n	800b10a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	685b      	ldr	r3, [r3, #4]
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	4619      	mov	r1, r3
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f7ff f973 	bl	800a3a8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b0c2:	4b1d      	ldr	r3, [pc, #116]	; (800b138 <USBD_SetConfig+0x148>)
 800b0c4:	781b      	ldrb	r3, [r3, #0]
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b0cc:	4b1a      	ldr	r3, [pc, #104]	; (800b138 <USBD_SetConfig+0x148>)
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f7ff f94c 	bl	800a370 <USBD_SetClassConfig>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b0dc:	7bfb      	ldrb	r3, [r7, #15]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d00f      	beq.n	800b102 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b0e2:	6839      	ldr	r1, [r7, #0]
 800b0e4:	6878      	ldr	r0, [r7, #4]
 800b0e6:	f000 f903 	bl	800b2f0 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f7ff f958 	bl	800a3a8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2202      	movs	r2, #2
 800b0fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b100:	e014      	b.n	800b12c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 f9bf 	bl	800b486 <USBD_CtlSendStatus>
      break;
 800b108:	e010      	b.n	800b12c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 f9bb 	bl	800b486 <USBD_CtlSendStatus>
      break;
 800b110:	e00c      	b.n	800b12c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b112:	6839      	ldr	r1, [r7, #0]
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 f8eb 	bl	800b2f0 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b11a:	4b07      	ldr	r3, [pc, #28]	; (800b138 <USBD_SetConfig+0x148>)
 800b11c:	781b      	ldrb	r3, [r3, #0]
 800b11e:	4619      	mov	r1, r3
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f7ff f941 	bl	800a3a8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b126:	2303      	movs	r3, #3
 800b128:	73fb      	strb	r3, [r7, #15]
      break;
 800b12a:	bf00      	nop
  }

  return ret;
 800b12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	20000668 	.word	0x20000668

0800b13c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b082      	sub	sp, #8
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
 800b144:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	88db      	ldrh	r3, [r3, #6]
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d004      	beq.n	800b158 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b14e:	6839      	ldr	r1, [r7, #0]
 800b150:	6878      	ldr	r0, [r7, #4]
 800b152:	f000 f8cd 	bl	800b2f0 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b156:	e023      	b.n	800b1a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	2b02      	cmp	r3, #2
 800b162:	dc02      	bgt.n	800b16a <USBD_GetConfig+0x2e>
 800b164:	2b00      	cmp	r3, #0
 800b166:	dc03      	bgt.n	800b170 <USBD_GetConfig+0x34>
 800b168:	e015      	b.n	800b196 <USBD_GetConfig+0x5a>
 800b16a:	2b03      	cmp	r3, #3
 800b16c:	d00b      	beq.n	800b186 <USBD_GetConfig+0x4a>
 800b16e:	e012      	b.n	800b196 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2200      	movs	r2, #0
 800b174:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	3308      	adds	r3, #8
 800b17a:	2201      	movs	r2, #1
 800b17c:	4619      	mov	r1, r3
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f000 f927 	bl	800b3d2 <USBD_CtlSendData>
        break;
 800b184:	e00c      	b.n	800b1a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	3304      	adds	r3, #4
 800b18a:	2201      	movs	r2, #1
 800b18c:	4619      	mov	r1, r3
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 f91f 	bl	800b3d2 <USBD_CtlSendData>
        break;
 800b194:	e004      	b.n	800b1a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b196:	6839      	ldr	r1, [r7, #0]
 800b198:	6878      	ldr	r0, [r7, #4]
 800b19a:	f000 f8a9 	bl	800b2f0 <USBD_CtlError>
        break;
 800b19e:	bf00      	nop
}
 800b1a0:	bf00      	nop
 800b1a2:	3708      	adds	r7, #8
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b082      	sub	sp, #8
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1b8:	b2db      	uxtb	r3, r3
 800b1ba:	3b01      	subs	r3, #1
 800b1bc:	2b02      	cmp	r3, #2
 800b1be:	d81e      	bhi.n	800b1fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	88db      	ldrh	r3, [r3, #6]
 800b1c4:	2b02      	cmp	r3, #2
 800b1c6:	d004      	beq.n	800b1d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b1c8:	6839      	ldr	r1, [r7, #0]
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f000 f890 	bl	800b2f0 <USBD_CtlError>
        break;
 800b1d0:	e01a      	b.n	800b208 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2201      	movs	r2, #1
 800b1d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d005      	beq.n	800b1ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	68db      	ldr	r3, [r3, #12]
 800b1e6:	f043 0202 	orr.w	r2, r3, #2
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	330c      	adds	r3, #12
 800b1f2:	2202      	movs	r2, #2
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 f8eb 	bl	800b3d2 <USBD_CtlSendData>
      break;
 800b1fc:	e004      	b.n	800b208 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b1fe:	6839      	ldr	r1, [r7, #0]
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f000 f875 	bl	800b2f0 <USBD_CtlError>
      break;
 800b206:	bf00      	nop
  }
}
 800b208:	bf00      	nop
 800b20a:	3708      	adds	r7, #8
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bd80      	pop	{r7, pc}

0800b210 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b082      	sub	sp, #8
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	885b      	ldrh	r3, [r3, #2]
 800b21e:	2b01      	cmp	r3, #1
 800b220:	d106      	bne.n	800b230 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2201      	movs	r2, #1
 800b226:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b22a:	6878      	ldr	r0, [r7, #4]
 800b22c:	f000 f92b 	bl	800b486 <USBD_CtlSendStatus>
  }
}
 800b230:	bf00      	nop
 800b232:	3708      	adds	r7, #8
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}

0800b238 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b238:	b580      	push	{r7, lr}
 800b23a:	b082      	sub	sp, #8
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b248:	b2db      	uxtb	r3, r3
 800b24a:	3b01      	subs	r3, #1
 800b24c:	2b02      	cmp	r3, #2
 800b24e:	d80b      	bhi.n	800b268 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	885b      	ldrh	r3, [r3, #2]
 800b254:	2b01      	cmp	r3, #1
 800b256:	d10c      	bne.n	800b272 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2200      	movs	r2, #0
 800b25c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b260:	6878      	ldr	r0, [r7, #4]
 800b262:	f000 f910 	bl	800b486 <USBD_CtlSendStatus>
      }
      break;
 800b266:	e004      	b.n	800b272 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b268:	6839      	ldr	r1, [r7, #0]
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 f840 	bl	800b2f0 <USBD_CtlError>
      break;
 800b270:	e000      	b.n	800b274 <USBD_ClrFeature+0x3c>
      break;
 800b272:	bf00      	nop
  }
}
 800b274:	bf00      	nop
 800b276:	3708      	adds	r7, #8
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b286:	683b      	ldr	r3, [r7, #0]
 800b288:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	781a      	ldrb	r2, [r3, #0]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	3301      	adds	r3, #1
 800b296:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	781a      	ldrb	r2, [r3, #0]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b2a6:	68f8      	ldr	r0, [r7, #12]
 800b2a8:	f7ff fa92 	bl	800a7d0 <SWAPBYTE>
 800b2ac:	4603      	mov	r3, r0
 800b2ae:	461a      	mov	r2, r3
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	3301      	adds	r3, #1
 800b2be:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f7ff fa85 	bl	800a7d0 <SWAPBYTE>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	461a      	mov	r2, r3
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	3301      	adds	r3, #1
 800b2d8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b2da:	68f8      	ldr	r0, [r7, #12]
 800b2dc:	f7ff fa78 	bl	800a7d0 <SWAPBYTE>
 800b2e0:	4603      	mov	r3, r0
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	80da      	strh	r2, [r3, #6]
}
 800b2e8:	bf00      	nop
 800b2ea:	3710      	adds	r7, #16
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2fa:	2180      	movs	r1, #128	; 0x80
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fc91 	bl	800bc24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b302:	2100      	movs	r1, #0
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f000 fc8d 	bl	800bc24 <USBD_LL_StallEP>
}
 800b30a:	bf00      	nop
 800b30c:	3708      	adds	r7, #8
 800b30e:	46bd      	mov	sp, r7
 800b310:	bd80      	pop	{r7, pc}

0800b312 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b312:	b580      	push	{r7, lr}
 800b314:	b086      	sub	sp, #24
 800b316:	af00      	add	r7, sp, #0
 800b318:	60f8      	str	r0, [r7, #12]
 800b31a:	60b9      	str	r1, [r7, #8]
 800b31c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b31e:	2300      	movs	r3, #0
 800b320:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d036      	beq.n	800b396 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b32c:	6938      	ldr	r0, [r7, #16]
 800b32e:	f000 f836 	bl	800b39e <USBD_GetLen>
 800b332:	4603      	mov	r3, r0
 800b334:	3301      	adds	r3, #1
 800b336:	b29b      	uxth	r3, r3
 800b338:	005b      	lsls	r3, r3, #1
 800b33a:	b29a      	uxth	r2, r3
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b340:	7dfb      	ldrb	r3, [r7, #23]
 800b342:	68ba      	ldr	r2, [r7, #8]
 800b344:	4413      	add	r3, r2
 800b346:	687a      	ldr	r2, [r7, #4]
 800b348:	7812      	ldrb	r2, [r2, #0]
 800b34a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b34c:	7dfb      	ldrb	r3, [r7, #23]
 800b34e:	3301      	adds	r3, #1
 800b350:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b352:	7dfb      	ldrb	r3, [r7, #23]
 800b354:	68ba      	ldr	r2, [r7, #8]
 800b356:	4413      	add	r3, r2
 800b358:	2203      	movs	r2, #3
 800b35a:	701a      	strb	r2, [r3, #0]
  idx++;
 800b35c:	7dfb      	ldrb	r3, [r7, #23]
 800b35e:	3301      	adds	r3, #1
 800b360:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b362:	e013      	b.n	800b38c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b364:	7dfb      	ldrb	r3, [r7, #23]
 800b366:	68ba      	ldr	r2, [r7, #8]
 800b368:	4413      	add	r3, r2
 800b36a:	693a      	ldr	r2, [r7, #16]
 800b36c:	7812      	ldrb	r2, [r2, #0]
 800b36e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	3301      	adds	r3, #1
 800b374:	613b      	str	r3, [r7, #16]
    idx++;
 800b376:	7dfb      	ldrb	r3, [r7, #23]
 800b378:	3301      	adds	r3, #1
 800b37a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b37c:	7dfb      	ldrb	r3, [r7, #23]
 800b37e:	68ba      	ldr	r2, [r7, #8]
 800b380:	4413      	add	r3, r2
 800b382:	2200      	movs	r2, #0
 800b384:	701a      	strb	r2, [r3, #0]
    idx++;
 800b386:	7dfb      	ldrb	r3, [r7, #23]
 800b388:	3301      	adds	r3, #1
 800b38a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	781b      	ldrb	r3, [r3, #0]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d1e7      	bne.n	800b364 <USBD_GetString+0x52>
 800b394:	e000      	b.n	800b398 <USBD_GetString+0x86>
    return;
 800b396:	bf00      	nop
  }
}
 800b398:	3718      	adds	r7, #24
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}

0800b39e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b39e:	b480      	push	{r7}
 800b3a0:	b085      	sub	sp, #20
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b3ae:	e005      	b.n	800b3bc <USBD_GetLen+0x1e>
  {
    len++;
 800b3b0:	7bfb      	ldrb	r3, [r7, #15]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b3b6:	68bb      	ldr	r3, [r7, #8]
 800b3b8:	3301      	adds	r3, #1
 800b3ba:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d1f5      	bne.n	800b3b0 <USBD_GetLen+0x12>
  }

  return len;
 800b3c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3714      	adds	r7, #20
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr

0800b3d2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	b084      	sub	sp, #16
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	60f8      	str	r0, [r7, #12]
 800b3da:	60b9      	str	r1, [r7, #8]
 800b3dc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2202      	movs	r2, #2
 800b3e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	687a      	ldr	r2, [r7, #4]
 800b3f0:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	68ba      	ldr	r2, [r7, #8]
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f000 fc9c 	bl	800bd36 <USBD_LL_Transmit>

  return USBD_OK;
 800b3fe:	2300      	movs	r3, #0
}
 800b400:	4618      	mov	r0, r3
 800b402:	3710      	adds	r7, #16
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	60f8      	str	r0, [r7, #12]
 800b410:	60b9      	str	r1, [r7, #8]
 800b412:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	68ba      	ldr	r2, [r7, #8]
 800b418:	2100      	movs	r1, #0
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f000 fc8b 	bl	800bd36 <USBD_LL_Transmit>

  return USBD_OK;
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}

0800b42a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b42a:	b580      	push	{r7, lr}
 800b42c:	b084      	sub	sp, #16
 800b42e:	af00      	add	r7, sp, #0
 800b430:	60f8      	str	r0, [r7, #12]
 800b432:	60b9      	str	r1, [r7, #8]
 800b434:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2203      	movs	r2, #3
 800b43a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b446:	68fb      	ldr	r3, [r7, #12]
 800b448:	687a      	ldr	r2, [r7, #4]
 800b44a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	68ba      	ldr	r2, [r7, #8]
 800b452:	2100      	movs	r1, #0
 800b454:	68f8      	ldr	r0, [r7, #12]
 800b456:	f000 fc8f 	bl	800bd78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b45a:	2300      	movs	r3, #0
}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3710      	adds	r7, #16
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}

0800b464 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b084      	sub	sp, #16
 800b468:	af00      	add	r7, sp, #0
 800b46a:	60f8      	str	r0, [r7, #12]
 800b46c:	60b9      	str	r1, [r7, #8]
 800b46e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	68ba      	ldr	r2, [r7, #8]
 800b474:	2100      	movs	r1, #0
 800b476:	68f8      	ldr	r0, [r7, #12]
 800b478:	f000 fc7e 	bl	800bd78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b47c:	2300      	movs	r3, #0
}
 800b47e:	4618      	mov	r0, r3
 800b480:	3710      	adds	r7, #16
 800b482:	46bd      	mov	sp, r7
 800b484:	bd80      	pop	{r7, pc}

0800b486 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b486:	b580      	push	{r7, lr}
 800b488:	b082      	sub	sp, #8
 800b48a:	af00      	add	r7, sp, #0
 800b48c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2204      	movs	r2, #4
 800b492:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b496:	2300      	movs	r3, #0
 800b498:	2200      	movs	r2, #0
 800b49a:	2100      	movs	r1, #0
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 fc4a 	bl	800bd36 <USBD_LL_Transmit>

  return USBD_OK;
 800b4a2:	2300      	movs	r3, #0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3708      	adds	r7, #8
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b082      	sub	sp, #8
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	2205      	movs	r2, #5
 800b4b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b4bc:	2300      	movs	r3, #0
 800b4be:	2200      	movs	r2, #0
 800b4c0:	2100      	movs	r1, #0
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f000 fc58 	bl	800bd78 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b4c8:	2300      	movs	r3, #0
}
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	3708      	adds	r7, #8
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	bd80      	pop	{r7, pc}
	...

0800b4d4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b4d8:	2200      	movs	r2, #0
 800b4da:	4912      	ldr	r1, [pc, #72]	; (800b524 <MX_USB_Device_Init+0x50>)
 800b4dc:	4812      	ldr	r0, [pc, #72]	; (800b528 <MX_USB_Device_Init+0x54>)
 800b4de:	f7fe fed9 	bl	800a294 <USBD_Init>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d001      	beq.n	800b4ec <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b4e8:	f7f5 fd4e 	bl	8000f88 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b4ec:	490f      	ldr	r1, [pc, #60]	; (800b52c <MX_USB_Device_Init+0x58>)
 800b4ee:	480e      	ldr	r0, [pc, #56]	; (800b528 <MX_USB_Device_Init+0x54>)
 800b4f0:	f7fe ff00 	bl	800a2f4 <USBD_RegisterClass>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d001      	beq.n	800b4fe <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b4fa:	f7f5 fd45 	bl	8000f88 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b4fe:	490c      	ldr	r1, [pc, #48]	; (800b530 <MX_USB_Device_Init+0x5c>)
 800b500:	4809      	ldr	r0, [pc, #36]	; (800b528 <MX_USB_Device_Init+0x54>)
 800b502:	f7fe fe51 	bl	800a1a8 <USBD_CDC_RegisterInterface>
 800b506:	4603      	mov	r3, r0
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d001      	beq.n	800b510 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b50c:	f7f5 fd3c 	bl	8000f88 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b510:	4805      	ldr	r0, [pc, #20]	; (800b528 <MX_USB_Device_Init+0x54>)
 800b512:	f7fe ff16 	bl	800a342 <USBD_Start>
 800b516:	4603      	mov	r3, r0
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d001      	beq.n	800b520 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b51c:	f7f5 fd34 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b520:	bf00      	nop
 800b522:	bd80      	pop	{r7, pc}
 800b524:	20000138 	.word	0x20000138
 800b528:	2000066c 	.word	0x2000066c
 800b52c:	20000020 	.word	0x20000020
 800b530:	20000124 	.word	0x20000124

0800b534 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b534:	b580      	push	{r7, lr}
 800b536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b538:	2200      	movs	r2, #0
 800b53a:	4905      	ldr	r1, [pc, #20]	; (800b550 <CDC_Init_FS+0x1c>)
 800b53c:	4805      	ldr	r0, [pc, #20]	; (800b554 <CDC_Init_FS+0x20>)
 800b53e:	f7fe fe48 	bl	800a1d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b542:	4905      	ldr	r1, [pc, #20]	; (800b558 <CDC_Init_FS+0x24>)
 800b544:	4803      	ldr	r0, [pc, #12]	; (800b554 <CDC_Init_FS+0x20>)
 800b546:	f7fe fe62 	bl	800a20e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b54a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	bd80      	pop	{r7, pc}
 800b550:	2000113c 	.word	0x2000113c
 800b554:	2000066c 	.word	0x2000066c
 800b558:	2000093c 	.word	0x2000093c

0800b55c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b55c:	b480      	push	{r7}
 800b55e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b560:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b562:	4618      	mov	r0, r3
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	4603      	mov	r3, r0
 800b574:	6039      	str	r1, [r7, #0]
 800b576:	71fb      	strb	r3, [r7, #7]
 800b578:	4613      	mov	r3, r2
 800b57a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b57c:	79fb      	ldrb	r3, [r7, #7]
 800b57e:	2b23      	cmp	r3, #35	; 0x23
 800b580:	d84a      	bhi.n	800b618 <CDC_Control_FS+0xac>
 800b582:	a201      	add	r2, pc, #4	; (adr r2, 800b588 <CDC_Control_FS+0x1c>)
 800b584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b588:	0800b619 	.word	0x0800b619
 800b58c:	0800b619 	.word	0x0800b619
 800b590:	0800b619 	.word	0x0800b619
 800b594:	0800b619 	.word	0x0800b619
 800b598:	0800b619 	.word	0x0800b619
 800b59c:	0800b619 	.word	0x0800b619
 800b5a0:	0800b619 	.word	0x0800b619
 800b5a4:	0800b619 	.word	0x0800b619
 800b5a8:	0800b619 	.word	0x0800b619
 800b5ac:	0800b619 	.word	0x0800b619
 800b5b0:	0800b619 	.word	0x0800b619
 800b5b4:	0800b619 	.word	0x0800b619
 800b5b8:	0800b619 	.word	0x0800b619
 800b5bc:	0800b619 	.word	0x0800b619
 800b5c0:	0800b619 	.word	0x0800b619
 800b5c4:	0800b619 	.word	0x0800b619
 800b5c8:	0800b619 	.word	0x0800b619
 800b5cc:	0800b619 	.word	0x0800b619
 800b5d0:	0800b619 	.word	0x0800b619
 800b5d4:	0800b619 	.word	0x0800b619
 800b5d8:	0800b619 	.word	0x0800b619
 800b5dc:	0800b619 	.word	0x0800b619
 800b5e0:	0800b619 	.word	0x0800b619
 800b5e4:	0800b619 	.word	0x0800b619
 800b5e8:	0800b619 	.word	0x0800b619
 800b5ec:	0800b619 	.word	0x0800b619
 800b5f0:	0800b619 	.word	0x0800b619
 800b5f4:	0800b619 	.word	0x0800b619
 800b5f8:	0800b619 	.word	0x0800b619
 800b5fc:	0800b619 	.word	0x0800b619
 800b600:	0800b619 	.word	0x0800b619
 800b604:	0800b619 	.word	0x0800b619
 800b608:	0800b619 	.word	0x0800b619
 800b60c:	0800b619 	.word	0x0800b619
 800b610:	0800b619 	.word	0x0800b619
 800b614:	0800b619 	.word	0x0800b619
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b618:	bf00      	nop
  }

  return (USBD_OK);
 800b61a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	370c      	adds	r7, #12
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b632:	6879      	ldr	r1, [r7, #4]
 800b634:	4810      	ldr	r0, [pc, #64]	; (800b678 <CDC_Receive_FS+0x50>)
 800b636:	f7fe fdea 	bl	800a20e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b63a:	480f      	ldr	r0, [pc, #60]	; (800b678 <CDC_Receive_FS+0x50>)
 800b63c:	f7fe fe00 	bl	800a240 <USBD_CDC_ReceivePacket>

  memset (rx_buffer, '\0', USB_RX_BUFFER_SIZE);  // clear the buffer
 800b640:	2240      	movs	r2, #64	; 0x40
 800b642:	2100      	movs	r1, #0
 800b644:	480d      	ldr	r0, [pc, #52]	; (800b67c <CDC_Receive_FS+0x54>)
 800b646:	f000 fcdb 	bl	800c000 <memset>
  uint8_t len = (uint8_t)*Len;
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	73fb      	strb	r3, [r7, #15]
  memcpy(rx_buffer, Buf, len);  // copy the data to the buffer
 800b650:	7bfb      	ldrb	r3, [r7, #15]
 800b652:	461a      	mov	r2, r3
 800b654:	6879      	ldr	r1, [r7, #4]
 800b656:	4809      	ldr	r0, [pc, #36]	; (800b67c <CDC_Receive_FS+0x54>)
 800b658:	f000 fd18 	bl	800c08c <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800b65c:	7bfb      	ldrb	r3, [r7, #15]
 800b65e:	461a      	mov	r2, r3
 800b660:	2100      	movs	r1, #0
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 fccc 	bl	800c000 <memset>

  conv_state = CFG_RECEIVED;
 800b668:	4b05      	ldr	r3, [pc, #20]	; (800b680 <CDC_Receive_FS+0x58>)
 800b66a:	2201      	movs	r2, #1
 800b66c:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800b66e:	2300      	movs	r3, #0


  /* USER CODE END 6 */
}
 800b670:	4618      	mov	r0, r3
 800b672:	3710      	adds	r7, #16
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	2000066c 	.word	0x2000066c
 800b67c:	20000608 	.word	0x20000608
 800b680:	20000648 	.word	0x20000648

0800b684 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b684:	b480      	push	{r7}
 800b686:	b087      	sub	sp, #28
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	4613      	mov	r3, r2
 800b690:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b692:	2300      	movs	r3, #0
 800b694:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b696:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	371c      	adds	r7, #28
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr
	...

0800b6a8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	6039      	str	r1, [r7, #0]
 800b6b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	2212      	movs	r2, #18
 800b6b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b6ba:	4b03      	ldr	r3, [pc, #12]	; (800b6c8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	370c      	adds	r7, #12
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c6:	4770      	bx	lr
 800b6c8:	20000158 	.word	0x20000158

0800b6cc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	6039      	str	r1, [r7, #0]
 800b6d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b6d8:	683b      	ldr	r3, [r7, #0]
 800b6da:	2204      	movs	r2, #4
 800b6dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b6de:	4b03      	ldr	r3, [pc, #12]	; (800b6ec <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	370c      	adds	r7, #12
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr
 800b6ec:	2000016c 	.word	0x2000016c

0800b6f0 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b082      	sub	sp, #8
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	6039      	str	r1, [r7, #0]
 800b6fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b6fc:	79fb      	ldrb	r3, [r7, #7]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d105      	bne.n	800b70e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b702:	683a      	ldr	r2, [r7, #0]
 800b704:	4907      	ldr	r1, [pc, #28]	; (800b724 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b706:	4808      	ldr	r0, [pc, #32]	; (800b728 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b708:	f7ff fe03 	bl	800b312 <USBD_GetString>
 800b70c:	e004      	b.n	800b718 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b70e:	683a      	ldr	r2, [r7, #0]
 800b710:	4904      	ldr	r1, [pc, #16]	; (800b724 <USBD_CDC_ProductStrDescriptor+0x34>)
 800b712:	4805      	ldr	r0, [pc, #20]	; (800b728 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b714:	f7ff fdfd 	bl	800b312 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b718:	4b02      	ldr	r3, [pc, #8]	; (800b724 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3708      	adds	r7, #8
 800b71e:	46bd      	mov	sp, r7
 800b720:	bd80      	pop	{r7, pc}
 800b722:	bf00      	nop
 800b724:	2000193c 	.word	0x2000193c
 800b728:	0800c0ec 	.word	0x0800c0ec

0800b72c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
 800b732:	4603      	mov	r3, r0
 800b734:	6039      	str	r1, [r7, #0]
 800b736:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b738:	683a      	ldr	r2, [r7, #0]
 800b73a:	4904      	ldr	r1, [pc, #16]	; (800b74c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b73c:	4804      	ldr	r0, [pc, #16]	; (800b750 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b73e:	f7ff fde8 	bl	800b312 <USBD_GetString>
  return USBD_StrDesc;
 800b742:	4b02      	ldr	r3, [pc, #8]	; (800b74c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b744:	4618      	mov	r0, r3
 800b746:	3708      	adds	r7, #8
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	2000193c 	.word	0x2000193c
 800b750:	0800c0fc 	.word	0x0800c0fc

0800b754 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
 800b75a:	4603      	mov	r3, r0
 800b75c:	6039      	str	r1, [r7, #0]
 800b75e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b760:	683b      	ldr	r3, [r7, #0]
 800b762:	221a      	movs	r2, #26
 800b764:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b766:	f000 f843 	bl	800b7f0 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b76a:	4b02      	ldr	r3, [pc, #8]	; (800b774 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3708      	adds	r7, #8
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	20000170 	.word	0x20000170

0800b778 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	4603      	mov	r3, r0
 800b780:	6039      	str	r1, [r7, #0]
 800b782:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b784:	79fb      	ldrb	r3, [r7, #7]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d105      	bne.n	800b796 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b78a:	683a      	ldr	r2, [r7, #0]
 800b78c:	4907      	ldr	r1, [pc, #28]	; (800b7ac <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b78e:	4808      	ldr	r0, [pc, #32]	; (800b7b0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b790:	f7ff fdbf 	bl	800b312 <USBD_GetString>
 800b794:	e004      	b.n	800b7a0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b796:	683a      	ldr	r2, [r7, #0]
 800b798:	4904      	ldr	r1, [pc, #16]	; (800b7ac <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b79a:	4805      	ldr	r0, [pc, #20]	; (800b7b0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b79c:	f7ff fdb9 	bl	800b312 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7a0:	4b02      	ldr	r3, [pc, #8]	; (800b7ac <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3708      	adds	r7, #8
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}
 800b7aa:	bf00      	nop
 800b7ac:	2000193c 	.word	0x2000193c
 800b7b0:	0800c100 	.word	0x0800c100

0800b7b4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	4603      	mov	r3, r0
 800b7bc:	6039      	str	r1, [r7, #0]
 800b7be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b7c0:	79fb      	ldrb	r3, [r7, #7]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d105      	bne.n	800b7d2 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b7c6:	683a      	ldr	r2, [r7, #0]
 800b7c8:	4907      	ldr	r1, [pc, #28]	; (800b7e8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b7ca:	4808      	ldr	r0, [pc, #32]	; (800b7ec <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b7cc:	f7ff fda1 	bl	800b312 <USBD_GetString>
 800b7d0:	e004      	b.n	800b7dc <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b7d2:	683a      	ldr	r2, [r7, #0]
 800b7d4:	4904      	ldr	r1, [pc, #16]	; (800b7e8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b7d6:	4805      	ldr	r0, [pc, #20]	; (800b7ec <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b7d8:	f7ff fd9b 	bl	800b312 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b7dc:	4b02      	ldr	r3, [pc, #8]	; (800b7e8 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3708      	adds	r7, #8
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	2000193c 	.word	0x2000193c
 800b7ec:	0800c10c 	.word	0x0800c10c

0800b7f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b7f6:	4b0f      	ldr	r3, [pc, #60]	; (800b834 <Get_SerialNum+0x44>)
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b7fc:	4b0e      	ldr	r3, [pc, #56]	; (800b838 <Get_SerialNum+0x48>)
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b802:	4b0e      	ldr	r3, [pc, #56]	; (800b83c <Get_SerialNum+0x4c>)
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b808:	68fa      	ldr	r2, [r7, #12]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	4413      	add	r3, r2
 800b80e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	2b00      	cmp	r3, #0
 800b814:	d009      	beq.n	800b82a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b816:	2208      	movs	r2, #8
 800b818:	4909      	ldr	r1, [pc, #36]	; (800b840 <Get_SerialNum+0x50>)
 800b81a:	68f8      	ldr	r0, [r7, #12]
 800b81c:	f000 f814 	bl	800b848 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b820:	2204      	movs	r2, #4
 800b822:	4908      	ldr	r1, [pc, #32]	; (800b844 <Get_SerialNum+0x54>)
 800b824:	68b8      	ldr	r0, [r7, #8]
 800b826:	f000 f80f 	bl	800b848 <IntToUnicode>
  }
}
 800b82a:	bf00      	nop
 800b82c:	3710      	adds	r7, #16
 800b82e:	46bd      	mov	sp, r7
 800b830:	bd80      	pop	{r7, pc}
 800b832:	bf00      	nop
 800b834:	1fff7590 	.word	0x1fff7590
 800b838:	1fff7594 	.word	0x1fff7594
 800b83c:	1fff7598 	.word	0x1fff7598
 800b840:	20000172 	.word	0x20000172
 800b844:	20000182 	.word	0x20000182

0800b848 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b848:	b480      	push	{r7}
 800b84a:	b087      	sub	sp, #28
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	60f8      	str	r0, [r7, #12]
 800b850:	60b9      	str	r1, [r7, #8]
 800b852:	4613      	mov	r3, r2
 800b854:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b856:	2300      	movs	r3, #0
 800b858:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b85a:	2300      	movs	r3, #0
 800b85c:	75fb      	strb	r3, [r7, #23]
 800b85e:	e027      	b.n	800b8b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	0f1b      	lsrs	r3, r3, #28
 800b864:	2b09      	cmp	r3, #9
 800b866:	d80b      	bhi.n	800b880 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	0f1b      	lsrs	r3, r3, #28
 800b86c:	b2da      	uxtb	r2, r3
 800b86e:	7dfb      	ldrb	r3, [r7, #23]
 800b870:	005b      	lsls	r3, r3, #1
 800b872:	4619      	mov	r1, r3
 800b874:	68bb      	ldr	r3, [r7, #8]
 800b876:	440b      	add	r3, r1
 800b878:	3230      	adds	r2, #48	; 0x30
 800b87a:	b2d2      	uxtb	r2, r2
 800b87c:	701a      	strb	r2, [r3, #0]
 800b87e:	e00a      	b.n	800b896 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	0f1b      	lsrs	r3, r3, #28
 800b884:	b2da      	uxtb	r2, r3
 800b886:	7dfb      	ldrb	r3, [r7, #23]
 800b888:	005b      	lsls	r3, r3, #1
 800b88a:	4619      	mov	r1, r3
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	440b      	add	r3, r1
 800b890:	3237      	adds	r2, #55	; 0x37
 800b892:	b2d2      	uxtb	r2, r2
 800b894:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	011b      	lsls	r3, r3, #4
 800b89a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b89c:	7dfb      	ldrb	r3, [r7, #23]
 800b89e:	005b      	lsls	r3, r3, #1
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	68ba      	ldr	r2, [r7, #8]
 800b8a4:	4413      	add	r3, r2
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b8aa:	7dfb      	ldrb	r3, [r7, #23]
 800b8ac:	3301      	adds	r3, #1
 800b8ae:	75fb      	strb	r3, [r7, #23]
 800b8b0:	7dfa      	ldrb	r2, [r7, #23]
 800b8b2:	79fb      	ldrb	r3, [r7, #7]
 800b8b4:	429a      	cmp	r2, r3
 800b8b6:	d3d3      	bcc.n	800b860 <IntToUnicode+0x18>
  }
}
 800b8b8:	bf00      	nop
 800b8ba:	bf00      	nop
 800b8bc:	371c      	adds	r7, #28
 800b8be:	46bd      	mov	sp, r7
 800b8c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c4:	4770      	bx	lr
	...

0800b8c8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b098      	sub	sp, #96	; 0x60
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b8d0:	f107 030c 	add.w	r3, r7, #12
 800b8d4:	2254      	movs	r2, #84	; 0x54
 800b8d6:	2100      	movs	r1, #0
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f000 fb91 	bl	800c000 <memset>
  if(pcdHandle->Instance==USB)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a19      	ldr	r2, [pc, #100]	; (800b948 <HAL_PCD_MspInit+0x80>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d12a      	bne.n	800b93e <HAL_PCD_MspInit+0x76>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b8e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b8ec:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b8f2:	f107 030c 	add.w	r3, r7, #12
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7f9 ffde 	bl	80058b8 <HAL_RCCEx_PeriphCLKConfig>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d001      	beq.n	800b906 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800b902:	f7f5 fb41 	bl	8000f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800b906:	4b11      	ldr	r3, [pc, #68]	; (800b94c <HAL_PCD_MspInit+0x84>)
 800b908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b90a:	4a10      	ldr	r2, [pc, #64]	; (800b94c <HAL_PCD_MspInit+0x84>)
 800b90c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800b910:	6593      	str	r3, [r2, #88]	; 0x58
 800b912:	4b0e      	ldr	r3, [pc, #56]	; (800b94c <HAL_PCD_MspInit+0x84>)
 800b914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b916:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b91a:	60bb      	str	r3, [r7, #8]
 800b91c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800b91e:	2200      	movs	r2, #0
 800b920:	2100      	movs	r1, #0
 800b922:	2013      	movs	r0, #19
 800b924:	f7f7 f8eb 	bl	8002afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800b928:	2013      	movs	r0, #19
 800b92a:	f7f7 f902 	bl	8002b32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800b92e:	2200      	movs	r2, #0
 800b930:	2100      	movs	r1, #0
 800b932:	2014      	movs	r0, #20
 800b934:	f7f7 f8e3 	bl	8002afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800b938:	2014      	movs	r0, #20
 800b93a:	f7f7 f8fa 	bl	8002b32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800b93e:	bf00      	nop
 800b940:	3760      	adds	r7, #96	; 0x60
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	40005c00 	.word	0x40005c00
 800b94c:	40021000 	.word	0x40021000

0800b950 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b950:	b580      	push	{r7, lr}
 800b952:	b082      	sub	sp, #8
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800b964:	4619      	mov	r1, r3
 800b966:	4610      	mov	r0, r2
 800b968:	f7fe fd36 	bl	800a3d8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800b96c:	bf00      	nop
 800b96e:	3708      	adds	r7, #8
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}

0800b974 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b082      	sub	sp, #8
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
 800b97c:	460b      	mov	r3, r1
 800b97e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800b986:	78fa      	ldrb	r2, [r7, #3]
 800b988:	6879      	ldr	r1, [r7, #4]
 800b98a:	4613      	mov	r3, r2
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	4413      	add	r3, r2
 800b990:	00db      	lsls	r3, r3, #3
 800b992:	440b      	add	r3, r1
 800b994:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b998:	681a      	ldr	r2, [r3, #0]
 800b99a:	78fb      	ldrb	r3, [r7, #3]
 800b99c:	4619      	mov	r1, r3
 800b99e:	f7fe fd70 	bl	800a482 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800b9a2:	bf00      	nop
 800b9a4:	3708      	adds	r7, #8
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b082      	sub	sp, #8
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800b9bc:	78fa      	ldrb	r2, [r7, #3]
 800b9be:	6879      	ldr	r1, [r7, #4]
 800b9c0:	4613      	mov	r3, r2
 800b9c2:	009b      	lsls	r3, r3, #2
 800b9c4:	4413      	add	r3, r2
 800b9c6:	00db      	lsls	r3, r3, #3
 800b9c8:	440b      	add	r3, r1
 800b9ca:	3324      	adds	r3, #36	; 0x24
 800b9cc:	681a      	ldr	r2, [r3, #0]
 800b9ce:	78fb      	ldrb	r3, [r7, #3]
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	f7fe fdb9 	bl	800a548 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800b9d6:	bf00      	nop
 800b9d8:	3708      	adds	r7, #8
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}

0800b9de <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9de:	b580      	push	{r7, lr}
 800b9e0:	b082      	sub	sp, #8
 800b9e2:	af00      	add	r7, sp, #0
 800b9e4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7fe fecd 	bl	800a78c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800b9f2:	bf00      	nop
 800b9f4:	3708      	adds	r7, #8
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}

0800b9fa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b084      	sub	sp, #16
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ba02:	2301      	movs	r3, #1
 800ba04:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	795b      	ldrb	r3, [r3, #5]
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d001      	beq.n	800ba12 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ba0e:	f7f5 fabb 	bl	8000f88 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ba18:	7bfa      	ldrb	r2, [r7, #15]
 800ba1a:	4611      	mov	r1, r2
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	f7fe fe77 	bl	800a710 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ba28:	4618      	mov	r0, r3
 800ba2a:	f7fe fe23 	bl	800a674 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ba2e:	bf00      	nop
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}
	...

0800ba38 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b082      	sub	sp, #8
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ba46:	4618      	mov	r0, r3
 800ba48:	f7fe fe72 	bl	800a730 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	7a5b      	ldrb	r3, [r3, #9]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d005      	beq.n	800ba60 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba54:	4b04      	ldr	r3, [pc, #16]	; (800ba68 <HAL_PCD_SuspendCallback+0x30>)
 800ba56:	691b      	ldr	r3, [r3, #16]
 800ba58:	4a03      	ldr	r2, [pc, #12]	; (800ba68 <HAL_PCD_SuspendCallback+0x30>)
 800ba5a:	f043 0306 	orr.w	r3, r3, #6
 800ba5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800ba60:	bf00      	nop
 800ba62:	3708      	adds	r7, #8
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}
 800ba68:	e000ed00 	.word	0xe000ed00

0800ba6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b082      	sub	sp, #8
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	7a5b      	ldrb	r3, [r3, #9]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d007      	beq.n	800ba8c <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ba7c:	4b08      	ldr	r3, [pc, #32]	; (800baa0 <HAL_PCD_ResumeCallback+0x34>)
 800ba7e:	691b      	ldr	r3, [r3, #16]
 800ba80:	4a07      	ldr	r2, [pc, #28]	; (800baa0 <HAL_PCD_ResumeCallback+0x34>)
 800ba82:	f023 0306 	bic.w	r3, r3, #6
 800ba86:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ba88:	f000 f9f8 	bl	800be7c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ba92:	4618      	mov	r0, r3
 800ba94:	f7fe fe62 	bl	800a75c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800ba98:	bf00      	nop
 800ba9a:	3708      	adds	r7, #8
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}
 800baa0:	e000ed00 	.word	0xe000ed00

0800baa4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800baa4:	b580      	push	{r7, lr}
 800baa6:	b082      	sub	sp, #8
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800baac:	4a2b      	ldr	r2, [pc, #172]	; (800bb5c <USBD_LL_Init+0xb8>)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	4a29      	ldr	r2, [pc, #164]	; (800bb5c <USBD_LL_Init+0xb8>)
 800bab8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800babc:	4b27      	ldr	r3, [pc, #156]	; (800bb5c <USBD_LL_Init+0xb8>)
 800babe:	4a28      	ldr	r2, [pc, #160]	; (800bb60 <USBD_LL_Init+0xbc>)
 800bac0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bac2:	4b26      	ldr	r3, [pc, #152]	; (800bb5c <USBD_LL_Init+0xb8>)
 800bac4:	2208      	movs	r2, #8
 800bac6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bac8:	4b24      	ldr	r3, [pc, #144]	; (800bb5c <USBD_LL_Init+0xb8>)
 800baca:	2202      	movs	r2, #2
 800bacc:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bace:	4b23      	ldr	r3, [pc, #140]	; (800bb5c <USBD_LL_Init+0xb8>)
 800bad0:	2202      	movs	r2, #2
 800bad2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bad4:	4b21      	ldr	r3, [pc, #132]	; (800bb5c <USBD_LL_Init+0xb8>)
 800bad6:	2200      	movs	r2, #0
 800bad8:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bada:	4b20      	ldr	r3, [pc, #128]	; (800bb5c <USBD_LL_Init+0xb8>)
 800badc:	2200      	movs	r2, #0
 800bade:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bae0:	4b1e      	ldr	r3, [pc, #120]	; (800bb5c <USBD_LL_Init+0xb8>)
 800bae2:	2200      	movs	r2, #0
 800bae4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bae6:	4b1d      	ldr	r3, [pc, #116]	; (800bb5c <USBD_LL_Init+0xb8>)
 800bae8:	2200      	movs	r2, #0
 800baea:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800baec:	481b      	ldr	r0, [pc, #108]	; (800bb5c <USBD_LL_Init+0xb8>)
 800baee:	f7f7 fbcc 	bl	800328a <HAL_PCD_Init>
 800baf2:	4603      	mov	r3, r0
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d001      	beq.n	800bafc <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800baf8:	f7f5 fa46 	bl	8000f88 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb02:	2318      	movs	r3, #24
 800bb04:	2200      	movs	r2, #0
 800bb06:	2100      	movs	r1, #0
 800bb08:	f7f9 f886 	bl	8004c18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb12:	2358      	movs	r3, #88	; 0x58
 800bb14:	2200      	movs	r2, #0
 800bb16:	2180      	movs	r1, #128	; 0x80
 800bb18:	f7f9 f87e 	bl	8004c18 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb22:	23c0      	movs	r3, #192	; 0xc0
 800bb24:	2200      	movs	r2, #0
 800bb26:	2181      	movs	r1, #129	; 0x81
 800bb28:	f7f9 f876 	bl	8004c18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb32:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bb36:	2200      	movs	r2, #0
 800bb38:	2101      	movs	r1, #1
 800bb3a:	f7f9 f86d 	bl	8004c18 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bb44:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bb48:	2200      	movs	r2, #0
 800bb4a:	2182      	movs	r1, #130	; 0x82
 800bb4c:	f7f9 f864 	bl	8004c18 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bb50:	2300      	movs	r3, #0
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3708      	adds	r7, #8
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	20001b3c 	.word	0x20001b3c
 800bb60:	40005c00 	.word	0x40005c00

0800bb64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b084      	sub	sp, #16
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb70:	2300      	movs	r3, #0
 800bb72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	f7f7 fc53 	bl	8003426 <HAL_PCD_Start>
 800bb80:	4603      	mov	r3, r0
 800bb82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb84:	7bfb      	ldrb	r3, [r7, #15]
 800bb86:	4618      	mov	r0, r3
 800bb88:	f000 f97e 	bl	800be88 <USBD_Get_USB_Status>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb90:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3710      	adds	r7, #16
 800bb96:	46bd      	mov	sp, r7
 800bb98:	bd80      	pop	{r7, pc}

0800bb9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bb9a:	b580      	push	{r7, lr}
 800bb9c:	b084      	sub	sp, #16
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
 800bba2:	4608      	mov	r0, r1
 800bba4:	4611      	mov	r1, r2
 800bba6:	461a      	mov	r2, r3
 800bba8:	4603      	mov	r3, r0
 800bbaa:	70fb      	strb	r3, [r7, #3]
 800bbac:	460b      	mov	r3, r1
 800bbae:	70bb      	strb	r3, [r7, #2]
 800bbb0:	4613      	mov	r3, r2
 800bbb2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bbc2:	78bb      	ldrb	r3, [r7, #2]
 800bbc4:	883a      	ldrh	r2, [r7, #0]
 800bbc6:	78f9      	ldrb	r1, [r7, #3]
 800bbc8:	f7f7 fd9a 	bl	8003700 <HAL_PCD_EP_Open>
 800bbcc:	4603      	mov	r3, r0
 800bbce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbd0:	7bfb      	ldrb	r3, [r7, #15]
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f000 f958 	bl	800be88 <USBD_Get_USB_Status>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bbdc:	7bbb      	ldrb	r3, [r7, #14]
}
 800bbde:	4618      	mov	r0, r3
 800bbe0:	3710      	adds	r7, #16
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}

0800bbe6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bbe6:	b580      	push	{r7, lr}
 800bbe8:	b084      	sub	sp, #16
 800bbea:	af00      	add	r7, sp, #0
 800bbec:	6078      	str	r0, [r7, #4]
 800bbee:	460b      	mov	r3, r1
 800bbf0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbf2:	2300      	movs	r3, #0
 800bbf4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc00:	78fa      	ldrb	r2, [r7, #3]
 800bc02:	4611      	mov	r1, r2
 800bc04:	4618      	mov	r0, r3
 800bc06:	f7f7 fdd8 	bl	80037ba <HAL_PCD_EP_Close>
 800bc0a:	4603      	mov	r3, r0
 800bc0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc0e:	7bfb      	ldrb	r3, [r7, #15]
 800bc10:	4618      	mov	r0, r3
 800bc12:	f000 f939 	bl	800be88 <USBD_Get_USB_Status>
 800bc16:	4603      	mov	r3, r0
 800bc18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc1a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3710      	adds	r7, #16
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc30:	2300      	movs	r3, #0
 800bc32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc34:	2300      	movs	r3, #0
 800bc36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc3e:	78fa      	ldrb	r2, [r7, #3]
 800bc40:	4611      	mov	r1, r2
 800bc42:	4618      	mov	r0, r3
 800bc44:	f7f7 fe81 	bl	800394a <HAL_PCD_EP_SetStall>
 800bc48:	4603      	mov	r3, r0
 800bc4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc4c:	7bfb      	ldrb	r3, [r7, #15]
 800bc4e:	4618      	mov	r0, r3
 800bc50:	f000 f91a 	bl	800be88 <USBD_Get_USB_Status>
 800bc54:	4603      	mov	r3, r0
 800bc56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc58:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	3710      	adds	r7, #16
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	bd80      	pop	{r7, pc}

0800bc62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc62:	b580      	push	{r7, lr}
 800bc64:	b084      	sub	sp, #16
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
 800bc6a:	460b      	mov	r3, r1
 800bc6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc72:	2300      	movs	r3, #0
 800bc74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc7c:	78fa      	ldrb	r2, [r7, #3]
 800bc7e:	4611      	mov	r1, r2
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7f7 feb4 	bl	80039ee <HAL_PCD_EP_ClrStall>
 800bc86:	4603      	mov	r3, r0
 800bc88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc8a:	7bfb      	ldrb	r3, [r7, #15]
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f000 f8fb 	bl	800be88 <USBD_Get_USB_Status>
 800bc92:	4603      	mov	r3, r0
 800bc94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bc96:	7bbb      	ldrb	r3, [r7, #14]
}
 800bc98:	4618      	mov	r0, r3
 800bc9a:	3710      	adds	r7, #16
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	460b      	mov	r3, r1
 800bcaa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bcb2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bcb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	da0b      	bge.n	800bcd4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bcbc:	78fb      	ldrb	r3, [r7, #3]
 800bcbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcc2:	68f9      	ldr	r1, [r7, #12]
 800bcc4:	4613      	mov	r3, r2
 800bcc6:	009b      	lsls	r3, r3, #2
 800bcc8:	4413      	add	r3, r2
 800bcca:	00db      	lsls	r3, r3, #3
 800bccc:	440b      	add	r3, r1
 800bcce:	3312      	adds	r3, #18
 800bcd0:	781b      	ldrb	r3, [r3, #0]
 800bcd2:	e00b      	b.n	800bcec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bcd4:	78fb      	ldrb	r3, [r7, #3]
 800bcd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bcda:	68f9      	ldr	r1, [r7, #12]
 800bcdc:	4613      	mov	r3, r2
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	4413      	add	r3, r2
 800bce2:	00db      	lsls	r3, r3, #3
 800bce4:	440b      	add	r3, r1
 800bce6:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800bcea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bcec:	4618      	mov	r0, r3
 800bcee:	3714      	adds	r7, #20
 800bcf0:	46bd      	mov	sp, r7
 800bcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf6:	4770      	bx	lr

0800bcf8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	6078      	str	r0, [r7, #4]
 800bd00:	460b      	mov	r3, r1
 800bd02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd04:	2300      	movs	r3, #0
 800bd06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd08:	2300      	movs	r3, #0
 800bd0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd12:	78fa      	ldrb	r2, [r7, #3]
 800bd14:	4611      	mov	r1, r2
 800bd16:	4618      	mov	r0, r3
 800bd18:	f7f7 fcce 	bl	80036b8 <HAL_PCD_SetAddress>
 800bd1c:	4603      	mov	r3, r0
 800bd1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd20:	7bfb      	ldrb	r3, [r7, #15]
 800bd22:	4618      	mov	r0, r3
 800bd24:	f000 f8b0 	bl	800be88 <USBD_Get_USB_Status>
 800bd28:	4603      	mov	r3, r0
 800bd2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd2c:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}

0800bd36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd36:	b580      	push	{r7, lr}
 800bd38:	b086      	sub	sp, #24
 800bd3a:	af00      	add	r7, sp, #0
 800bd3c:	60f8      	str	r0, [r7, #12]
 800bd3e:	607a      	str	r2, [r7, #4]
 800bd40:	603b      	str	r3, [r7, #0]
 800bd42:	460b      	mov	r3, r1
 800bd44:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd46:	2300      	movs	r3, #0
 800bd48:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bd54:	7af9      	ldrb	r1, [r7, #11]
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	f7f7 fdbf 	bl	80038dc <HAL_PCD_EP_Transmit>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd62:	7dfb      	ldrb	r3, [r7, #23]
 800bd64:	4618      	mov	r0, r3
 800bd66:	f000 f88f 	bl	800be88 <USBD_Get_USB_Status>
 800bd6a:	4603      	mov	r3, r0
 800bd6c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bd6e:	7dbb      	ldrb	r3, [r7, #22]
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3718      	adds	r7, #24
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b086      	sub	sp, #24
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	607a      	str	r2, [r7, #4]
 800bd82:	603b      	str	r3, [r7, #0]
 800bd84:	460b      	mov	r3, r1
 800bd86:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bd96:	7af9      	ldrb	r1, [r7, #11]
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	687a      	ldr	r2, [r7, #4]
 800bd9c:	f7f7 fd55 	bl	800384a <HAL_PCD_EP_Receive>
 800bda0:	4603      	mov	r3, r0
 800bda2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bda4:	7dfb      	ldrb	r3, [r7, #23]
 800bda6:	4618      	mov	r0, r3
 800bda8:	f000 f86e 	bl	800be88 <USBD_Get_USB_Status>
 800bdac:	4603      	mov	r3, r0
 800bdae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bdb0:	7dbb      	ldrb	r3, [r7, #22]
}
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	3718      	adds	r7, #24
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}

0800bdba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdba:	b580      	push	{r7, lr}
 800bdbc:	b082      	sub	sp, #8
 800bdbe:	af00      	add	r7, sp, #0
 800bdc0:	6078      	str	r0, [r7, #4]
 800bdc2:	460b      	mov	r3, r1
 800bdc4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bdcc:	78fa      	ldrb	r2, [r7, #3]
 800bdce:	4611      	mov	r1, r2
 800bdd0:	4618      	mov	r0, r3
 800bdd2:	f7f7 fd6b 	bl	80038ac <HAL_PCD_EP_GetRxCount>
 800bdd6:	4603      	mov	r3, r0
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3708      	adds	r7, #8
 800bddc:	46bd      	mov	sp, r7
 800bdde:	bd80      	pop	{r7, pc}

0800bde0 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	b082      	sub	sp, #8
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
 800bde8:	460b      	mov	r3, r1
 800bdea:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bdec:	78fb      	ldrb	r3, [r7, #3]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d002      	beq.n	800bdf8 <HAL_PCDEx_LPM_Callback+0x18>
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d013      	beq.n	800be1e <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bdf6:	e023      	b.n	800be40 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	7a5b      	ldrb	r3, [r3, #9]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d007      	beq.n	800be10 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800be00:	f000 f83c 	bl	800be7c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be04:	4b10      	ldr	r3, [pc, #64]	; (800be48 <HAL_PCDEx_LPM_Callback+0x68>)
 800be06:	691b      	ldr	r3, [r3, #16]
 800be08:	4a0f      	ldr	r2, [pc, #60]	; (800be48 <HAL_PCDEx_LPM_Callback+0x68>)
 800be0a:	f023 0306 	bic.w	r3, r3, #6
 800be0e:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800be16:	4618      	mov	r0, r3
 800be18:	f7fe fca0 	bl	800a75c <USBD_LL_Resume>
    break;
 800be1c:	e010      	b.n	800be40 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800be24:	4618      	mov	r0, r3
 800be26:	f7fe fc83 	bl	800a730 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	7a5b      	ldrb	r3, [r3, #9]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d005      	beq.n	800be3e <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800be32:	4b05      	ldr	r3, [pc, #20]	; (800be48 <HAL_PCDEx_LPM_Callback+0x68>)
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	4a04      	ldr	r2, [pc, #16]	; (800be48 <HAL_PCDEx_LPM_Callback+0x68>)
 800be38:	f043 0306 	orr.w	r3, r3, #6
 800be3c:	6113      	str	r3, [r2, #16]
    break;
 800be3e:	bf00      	nop
}
 800be40:	bf00      	nop
 800be42:	3708      	adds	r7, #8
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}
 800be48:	e000ed00 	.word	0xe000ed00

0800be4c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800be54:	4b03      	ldr	r3, [pc, #12]	; (800be64 <USBD_static_malloc+0x18>)
}
 800be56:	4618      	mov	r0, r3
 800be58:	370c      	adds	r7, #12
 800be5a:	46bd      	mov	sp, r7
 800be5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be60:	4770      	bx	lr
 800be62:	bf00      	nop
 800be64:	20001e18 	.word	0x20001e18

0800be68 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800be68:	b480      	push	{r7}
 800be6a:	b083      	sub	sp, #12
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]

}
 800be70:	bf00      	nop
 800be72:	370c      	adds	r7, #12
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr

0800be7c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800be80:	f7f4 fb9a 	bl	80005b8 <SystemClock_Config>
}
 800be84:	bf00      	nop
 800be86:	bd80      	pop	{r7, pc}

0800be88 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800be88:	b480      	push	{r7}
 800be8a:	b085      	sub	sp, #20
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	4603      	mov	r3, r0
 800be90:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be92:	2300      	movs	r3, #0
 800be94:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800be96:	79fb      	ldrb	r3, [r7, #7]
 800be98:	2b03      	cmp	r3, #3
 800be9a:	d817      	bhi.n	800becc <USBD_Get_USB_Status+0x44>
 800be9c:	a201      	add	r2, pc, #4	; (adr r2, 800bea4 <USBD_Get_USB_Status+0x1c>)
 800be9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bea2:	bf00      	nop
 800bea4:	0800beb5 	.word	0x0800beb5
 800bea8:	0800bebb 	.word	0x0800bebb
 800beac:	0800bec1 	.word	0x0800bec1
 800beb0:	0800bec7 	.word	0x0800bec7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800beb4:	2300      	movs	r3, #0
 800beb6:	73fb      	strb	r3, [r7, #15]
    break;
 800beb8:	e00b      	b.n	800bed2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800beba:	2303      	movs	r3, #3
 800bebc:	73fb      	strb	r3, [r7, #15]
    break;
 800bebe:	e008      	b.n	800bed2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bec0:	2301      	movs	r3, #1
 800bec2:	73fb      	strb	r3, [r7, #15]
    break;
 800bec4:	e005      	b.n	800bed2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bec6:	2303      	movs	r3, #3
 800bec8:	73fb      	strb	r3, [r7, #15]
    break;
 800beca:	e002      	b.n	800bed2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800becc:	2303      	movs	r3, #3
 800bece:	73fb      	strb	r3, [r7, #15]
    break;
 800bed0:	bf00      	nop
  }
  return usb_status;
 800bed2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3714      	adds	r7, #20
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <atoi>:
 800bee0:	220a      	movs	r2, #10
 800bee2:	2100      	movs	r1, #0
 800bee4:	f000 b882 	b.w	800bfec <strtol>

0800bee8 <_strtol_l.constprop.0>:
 800bee8:	2b01      	cmp	r3, #1
 800beea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beee:	d001      	beq.n	800bef4 <_strtol_l.constprop.0+0xc>
 800bef0:	2b24      	cmp	r3, #36	; 0x24
 800bef2:	d906      	bls.n	800bf02 <_strtol_l.constprop.0+0x1a>
 800bef4:	f000 f8a0 	bl	800c038 <__errno>
 800bef8:	2316      	movs	r3, #22
 800befa:	6003      	str	r3, [r0, #0]
 800befc:	2000      	movs	r0, #0
 800befe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf02:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bfe8 <_strtol_l.constprop.0+0x100>
 800bf06:	460d      	mov	r5, r1
 800bf08:	462e      	mov	r6, r5
 800bf0a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf0e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800bf12:	f017 0708 	ands.w	r7, r7, #8
 800bf16:	d1f7      	bne.n	800bf08 <_strtol_l.constprop.0+0x20>
 800bf18:	2c2d      	cmp	r4, #45	; 0x2d
 800bf1a:	d132      	bne.n	800bf82 <_strtol_l.constprop.0+0x9a>
 800bf1c:	782c      	ldrb	r4, [r5, #0]
 800bf1e:	2701      	movs	r7, #1
 800bf20:	1cb5      	adds	r5, r6, #2
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d05b      	beq.n	800bfde <_strtol_l.constprop.0+0xf6>
 800bf26:	2b10      	cmp	r3, #16
 800bf28:	d109      	bne.n	800bf3e <_strtol_l.constprop.0+0x56>
 800bf2a:	2c30      	cmp	r4, #48	; 0x30
 800bf2c:	d107      	bne.n	800bf3e <_strtol_l.constprop.0+0x56>
 800bf2e:	782c      	ldrb	r4, [r5, #0]
 800bf30:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800bf34:	2c58      	cmp	r4, #88	; 0x58
 800bf36:	d14d      	bne.n	800bfd4 <_strtol_l.constprop.0+0xec>
 800bf38:	786c      	ldrb	r4, [r5, #1]
 800bf3a:	2310      	movs	r3, #16
 800bf3c:	3502      	adds	r5, #2
 800bf3e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800bf42:	f108 38ff 	add.w	r8, r8, #4294967295
 800bf46:	f04f 0e00 	mov.w	lr, #0
 800bf4a:	fbb8 f9f3 	udiv	r9, r8, r3
 800bf4e:	4676      	mov	r6, lr
 800bf50:	fb03 8a19 	mls	sl, r3, r9, r8
 800bf54:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800bf58:	f1bc 0f09 	cmp.w	ip, #9
 800bf5c:	d816      	bhi.n	800bf8c <_strtol_l.constprop.0+0xa4>
 800bf5e:	4664      	mov	r4, ip
 800bf60:	42a3      	cmp	r3, r4
 800bf62:	dd24      	ble.n	800bfae <_strtol_l.constprop.0+0xc6>
 800bf64:	f1be 3fff 	cmp.w	lr, #4294967295
 800bf68:	d008      	beq.n	800bf7c <_strtol_l.constprop.0+0x94>
 800bf6a:	45b1      	cmp	r9, r6
 800bf6c:	d31c      	bcc.n	800bfa8 <_strtol_l.constprop.0+0xc0>
 800bf6e:	d101      	bne.n	800bf74 <_strtol_l.constprop.0+0x8c>
 800bf70:	45a2      	cmp	sl, r4
 800bf72:	db19      	blt.n	800bfa8 <_strtol_l.constprop.0+0xc0>
 800bf74:	fb06 4603 	mla	r6, r6, r3, r4
 800bf78:	f04f 0e01 	mov.w	lr, #1
 800bf7c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bf80:	e7e8      	b.n	800bf54 <_strtol_l.constprop.0+0x6c>
 800bf82:	2c2b      	cmp	r4, #43	; 0x2b
 800bf84:	bf04      	itt	eq
 800bf86:	782c      	ldrbeq	r4, [r5, #0]
 800bf88:	1cb5      	addeq	r5, r6, #2
 800bf8a:	e7ca      	b.n	800bf22 <_strtol_l.constprop.0+0x3a>
 800bf8c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800bf90:	f1bc 0f19 	cmp.w	ip, #25
 800bf94:	d801      	bhi.n	800bf9a <_strtol_l.constprop.0+0xb2>
 800bf96:	3c37      	subs	r4, #55	; 0x37
 800bf98:	e7e2      	b.n	800bf60 <_strtol_l.constprop.0+0x78>
 800bf9a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800bf9e:	f1bc 0f19 	cmp.w	ip, #25
 800bfa2:	d804      	bhi.n	800bfae <_strtol_l.constprop.0+0xc6>
 800bfa4:	3c57      	subs	r4, #87	; 0x57
 800bfa6:	e7db      	b.n	800bf60 <_strtol_l.constprop.0+0x78>
 800bfa8:	f04f 3eff 	mov.w	lr, #4294967295
 800bfac:	e7e6      	b.n	800bf7c <_strtol_l.constprop.0+0x94>
 800bfae:	f1be 3fff 	cmp.w	lr, #4294967295
 800bfb2:	d105      	bne.n	800bfc0 <_strtol_l.constprop.0+0xd8>
 800bfb4:	2322      	movs	r3, #34	; 0x22
 800bfb6:	6003      	str	r3, [r0, #0]
 800bfb8:	4646      	mov	r6, r8
 800bfba:	b942      	cbnz	r2, 800bfce <_strtol_l.constprop.0+0xe6>
 800bfbc:	4630      	mov	r0, r6
 800bfbe:	e79e      	b.n	800befe <_strtol_l.constprop.0+0x16>
 800bfc0:	b107      	cbz	r7, 800bfc4 <_strtol_l.constprop.0+0xdc>
 800bfc2:	4276      	negs	r6, r6
 800bfc4:	2a00      	cmp	r2, #0
 800bfc6:	d0f9      	beq.n	800bfbc <_strtol_l.constprop.0+0xd4>
 800bfc8:	f1be 0f00 	cmp.w	lr, #0
 800bfcc:	d000      	beq.n	800bfd0 <_strtol_l.constprop.0+0xe8>
 800bfce:	1e69      	subs	r1, r5, #1
 800bfd0:	6011      	str	r1, [r2, #0]
 800bfd2:	e7f3      	b.n	800bfbc <_strtol_l.constprop.0+0xd4>
 800bfd4:	2430      	movs	r4, #48	; 0x30
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d1b1      	bne.n	800bf3e <_strtol_l.constprop.0+0x56>
 800bfda:	2308      	movs	r3, #8
 800bfdc:	e7af      	b.n	800bf3e <_strtol_l.constprop.0+0x56>
 800bfde:	2c30      	cmp	r4, #48	; 0x30
 800bfe0:	d0a5      	beq.n	800bf2e <_strtol_l.constprop.0+0x46>
 800bfe2:	230a      	movs	r3, #10
 800bfe4:	e7ab      	b.n	800bf3e <_strtol_l.constprop.0+0x56>
 800bfe6:	bf00      	nop
 800bfe8:	0800c15d 	.word	0x0800c15d

0800bfec <strtol>:
 800bfec:	4613      	mov	r3, r2
 800bfee:	460a      	mov	r2, r1
 800bff0:	4601      	mov	r1, r0
 800bff2:	4802      	ldr	r0, [pc, #8]	; (800bffc <strtol+0x10>)
 800bff4:	6800      	ldr	r0, [r0, #0]
 800bff6:	f7ff bf77 	b.w	800bee8 <_strtol_l.constprop.0>
 800bffa:	bf00      	nop
 800bffc:	200001d8 	.word	0x200001d8

0800c000 <memset>:
 800c000:	4402      	add	r2, r0
 800c002:	4603      	mov	r3, r0
 800c004:	4293      	cmp	r3, r2
 800c006:	d100      	bne.n	800c00a <memset+0xa>
 800c008:	4770      	bx	lr
 800c00a:	f803 1b01 	strb.w	r1, [r3], #1
 800c00e:	e7f9      	b.n	800c004 <memset+0x4>

0800c010 <strncpy>:
 800c010:	b510      	push	{r4, lr}
 800c012:	3901      	subs	r1, #1
 800c014:	4603      	mov	r3, r0
 800c016:	b132      	cbz	r2, 800c026 <strncpy+0x16>
 800c018:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c01c:	f803 4b01 	strb.w	r4, [r3], #1
 800c020:	3a01      	subs	r2, #1
 800c022:	2c00      	cmp	r4, #0
 800c024:	d1f7      	bne.n	800c016 <strncpy+0x6>
 800c026:	441a      	add	r2, r3
 800c028:	2100      	movs	r1, #0
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d100      	bne.n	800c030 <strncpy+0x20>
 800c02e:	bd10      	pop	{r4, pc}
 800c030:	f803 1b01 	strb.w	r1, [r3], #1
 800c034:	e7f9      	b.n	800c02a <strncpy+0x1a>
	...

0800c038 <__errno>:
 800c038:	4b01      	ldr	r3, [pc, #4]	; (800c040 <__errno+0x8>)
 800c03a:	6818      	ldr	r0, [r3, #0]
 800c03c:	4770      	bx	lr
 800c03e:	bf00      	nop
 800c040:	200001d8 	.word	0x200001d8

0800c044 <__libc_init_array>:
 800c044:	b570      	push	{r4, r5, r6, lr}
 800c046:	4d0d      	ldr	r5, [pc, #52]	; (800c07c <__libc_init_array+0x38>)
 800c048:	4c0d      	ldr	r4, [pc, #52]	; (800c080 <__libc_init_array+0x3c>)
 800c04a:	1b64      	subs	r4, r4, r5
 800c04c:	10a4      	asrs	r4, r4, #2
 800c04e:	2600      	movs	r6, #0
 800c050:	42a6      	cmp	r6, r4
 800c052:	d109      	bne.n	800c068 <__libc_init_array+0x24>
 800c054:	4d0b      	ldr	r5, [pc, #44]	; (800c084 <__libc_init_array+0x40>)
 800c056:	4c0c      	ldr	r4, [pc, #48]	; (800c088 <__libc_init_array+0x44>)
 800c058:	f000 f826 	bl	800c0a8 <_init>
 800c05c:	1b64      	subs	r4, r4, r5
 800c05e:	10a4      	asrs	r4, r4, #2
 800c060:	2600      	movs	r6, #0
 800c062:	42a6      	cmp	r6, r4
 800c064:	d105      	bne.n	800c072 <__libc_init_array+0x2e>
 800c066:	bd70      	pop	{r4, r5, r6, pc}
 800c068:	f855 3b04 	ldr.w	r3, [r5], #4
 800c06c:	4798      	blx	r3
 800c06e:	3601      	adds	r6, #1
 800c070:	e7ee      	b.n	800c050 <__libc_init_array+0xc>
 800c072:	f855 3b04 	ldr.w	r3, [r5], #4
 800c076:	4798      	blx	r3
 800c078:	3601      	adds	r6, #1
 800c07a:	e7f2      	b.n	800c062 <__libc_init_array+0x1e>
 800c07c:	0800c268 	.word	0x0800c268
 800c080:	0800c268 	.word	0x0800c268
 800c084:	0800c268 	.word	0x0800c268
 800c088:	0800c26c 	.word	0x0800c26c

0800c08c <memcpy>:
 800c08c:	440a      	add	r2, r1
 800c08e:	4291      	cmp	r1, r2
 800c090:	f100 33ff 	add.w	r3, r0, #4294967295
 800c094:	d100      	bne.n	800c098 <memcpy+0xc>
 800c096:	4770      	bx	lr
 800c098:	b510      	push	{r4, lr}
 800c09a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c09e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0a2:	4291      	cmp	r1, r2
 800c0a4:	d1f9      	bne.n	800c09a <memcpy+0xe>
 800c0a6:	bd10      	pop	{r4, pc}

0800c0a8 <_init>:
 800c0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0aa:	bf00      	nop
 800c0ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ae:	bc08      	pop	{r3}
 800c0b0:	469e      	mov	lr, r3
 800c0b2:	4770      	bx	lr

0800c0b4 <_fini>:
 800c0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0b6:	bf00      	nop
 800c0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ba:	bc08      	pop	{r3}
 800c0bc:	469e      	mov	lr, r3
 800c0be:	4770      	bx	lr
