
HS_thermocouple_logger_G474.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd5c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e4  0800df3c  0800df3c  0001df3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e120  0800e120  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e120  0800e120  0001e120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e128  0800e128  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e128  0800e128  0001e128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e12c  0800e12c  0001e12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800e130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005e2c  200001e8  0800e318  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  20006014  0800e318  00026014  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021936  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047ad  00000000  00000000  00041b91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c00  00000000  00000000  00046340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001590  00000000  00000000  00047f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c61e  00000000  00000000  000494d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022841  00000000  00000000  00075aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001194f3  00000000  00000000  0009832f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007fb4  00000000  00000000  001b1824  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  001b97d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800df24 	.word	0x0800df24

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	0800df24 	.word	0x0800df24

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b970 	b.w	80005d8 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	460d      	mov	r5, r1
 8000318:	4604      	mov	r4, r0
 800031a:	460f      	mov	r7, r1
 800031c:	2b00      	cmp	r3, #0
 800031e:	d14a      	bne.n	80003b6 <__udivmoddi4+0xa6>
 8000320:	428a      	cmp	r2, r1
 8000322:	4694      	mov	ip, r2
 8000324:	d965      	bls.n	80003f2 <__udivmoddi4+0xe2>
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	b143      	cbz	r3, 800033e <__udivmoddi4+0x2e>
 800032c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000330:	f1c3 0220 	rsb	r2, r3, #32
 8000334:	409f      	lsls	r7, r3
 8000336:	fa20 f202 	lsr.w	r2, r0, r2
 800033a:	4317      	orrs	r7, r2
 800033c:	409c      	lsls	r4, r3
 800033e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000342:	fa1f f58c 	uxth.w	r5, ip
 8000346:	fbb7 f1fe 	udiv	r1, r7, lr
 800034a:	0c22      	lsrs	r2, r4, #16
 800034c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000350:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000354:	fb01 f005 	mul.w	r0, r1, r5
 8000358:	4290      	cmp	r0, r2
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x62>
 800035c:	eb1c 0202 	adds.w	r2, ip, r2
 8000360:	f101 37ff 	add.w	r7, r1, #4294967295
 8000364:	f080 811c 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000368:	4290      	cmp	r0, r2
 800036a:	f240 8119 	bls.w	80005a0 <__udivmoddi4+0x290>
 800036e:	3902      	subs	r1, #2
 8000370:	4462      	add	r2, ip
 8000372:	1a12      	subs	r2, r2, r0
 8000374:	b2a4      	uxth	r4, r4
 8000376:	fbb2 f0fe 	udiv	r0, r2, lr
 800037a:	fb0e 2210 	mls	r2, lr, r0, r2
 800037e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000382:	fb00 f505 	mul.w	r5, r0, r5
 8000386:	42a5      	cmp	r5, r4
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x90>
 800038a:	eb1c 0404 	adds.w	r4, ip, r4
 800038e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000392:	f080 8107 	bcs.w	80005a4 <__udivmoddi4+0x294>
 8000396:	42a5      	cmp	r5, r4
 8000398:	f240 8104 	bls.w	80005a4 <__udivmoddi4+0x294>
 800039c:	4464      	add	r4, ip
 800039e:	3802      	subs	r0, #2
 80003a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003a4:	1b64      	subs	r4, r4, r5
 80003a6:	2100      	movs	r1, #0
 80003a8:	b11e      	cbz	r6, 80003b2 <__udivmoddi4+0xa2>
 80003aa:	40dc      	lsrs	r4, r3
 80003ac:	2300      	movs	r3, #0
 80003ae:	e9c6 4300 	strd	r4, r3, [r6]
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0xbc>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80ed 	beq.w	800059a <__udivmoddi4+0x28a>
 80003c0:	2100      	movs	r1, #0
 80003c2:	e9c6 0500 	strd	r0, r5, [r6]
 80003c6:	4608      	mov	r0, r1
 80003c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003cc:	fab3 f183 	clz	r1, r3
 80003d0:	2900      	cmp	r1, #0
 80003d2:	d149      	bne.n	8000468 <__udivmoddi4+0x158>
 80003d4:	42ab      	cmp	r3, r5
 80003d6:	d302      	bcc.n	80003de <__udivmoddi4+0xce>
 80003d8:	4282      	cmp	r2, r0
 80003da:	f200 80f8 	bhi.w	80005ce <__udivmoddi4+0x2be>
 80003de:	1a84      	subs	r4, r0, r2
 80003e0:	eb65 0203 	sbc.w	r2, r5, r3
 80003e4:	2001      	movs	r0, #1
 80003e6:	4617      	mov	r7, r2
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d0e2      	beq.n	80003b2 <__udivmoddi4+0xa2>
 80003ec:	e9c6 4700 	strd	r4, r7, [r6]
 80003f0:	e7df      	b.n	80003b2 <__udivmoddi4+0xa2>
 80003f2:	b902      	cbnz	r2, 80003f6 <__udivmoddi4+0xe6>
 80003f4:	deff      	udf	#255	; 0xff
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	f040 8090 	bne.w	8000520 <__udivmoddi4+0x210>
 8000400:	1a8a      	subs	r2, r1, r2
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2101      	movs	r1, #1
 800040c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000410:	fb07 2015 	mls	r0, r7, r5, r2
 8000414:	0c22      	lsrs	r2, r4, #16
 8000416:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800041a:	fb0e f005 	mul.w	r0, lr, r5
 800041e:	4290      	cmp	r0, r2
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x124>
 8000422:	eb1c 0202 	adds.w	r2, ip, r2
 8000426:	f105 38ff 	add.w	r8, r5, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4290      	cmp	r0, r2
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2b8>
 8000432:	4645      	mov	r5, r8
 8000434:	1a12      	subs	r2, r2, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb2 f0f7 	udiv	r0, r2, r7
 800043c:	fb07 2210 	mls	r2, r7, r0, r2
 8000440:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x14e>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 32ff 	add.w	r2, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x14c>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2c2>
 800045c:	4610      	mov	r0, r2
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000466:	e79f      	b.n	80003a8 <__udivmoddi4+0x98>
 8000468:	f1c1 0720 	rsb	r7, r1, #32
 800046c:	408b      	lsls	r3, r1
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa05 f401 	lsl.w	r4, r5, r1
 800047a:	fa20 f307 	lsr.w	r3, r0, r7
 800047e:	40fd      	lsrs	r5, r7
 8000480:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000484:	4323      	orrs	r3, r4
 8000486:	fbb5 f8f9 	udiv	r8, r5, r9
 800048a:	fa1f fe8c 	uxth.w	lr, ip
 800048e:	fb09 5518 	mls	r5, r9, r8, r5
 8000492:	0c1c      	lsrs	r4, r3, #16
 8000494:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000498:	fb08 f50e 	mul.w	r5, r8, lr
 800049c:	42a5      	cmp	r5, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	fa00 f001 	lsl.w	r0, r0, r1
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2b4>
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2b4>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4464      	add	r4, ip
 80004c0:	1b64      	subs	r4, r4, r5
 80004c2:	b29d      	uxth	r5, r3
 80004c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c8:	fb09 4413 	mls	r4, r9, r3, r4
 80004cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004d4:	45a6      	cmp	lr, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2ac>
 80004e2:	45a6      	cmp	lr, r4
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2ac>
 80004e6:	3b02      	subs	r3, #2
 80004e8:	4464      	add	r4, ip
 80004ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ee:	fba3 9502 	umull	r9, r5, r3, r2
 80004f2:	eba4 040e 	sub.w	r4, r4, lr
 80004f6:	42ac      	cmp	r4, r5
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46ae      	mov	lr, r5
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x29c>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x298>
 8000500:	b156      	cbz	r6, 8000518 <__udivmoddi4+0x208>
 8000502:	ebb0 0208 	subs.w	r2, r0, r8
 8000506:	eb64 040e 	sbc.w	r4, r4, lr
 800050a:	fa04 f707 	lsl.w	r7, r4, r7
 800050e:	40ca      	lsrs	r2, r1
 8000510:	40cc      	lsrs	r4, r1
 8000512:	4317      	orrs	r7, r2
 8000514:	e9c6 7400 	strd	r7, r4, [r6]
 8000518:	4618      	mov	r0, r3
 800051a:	2100      	movs	r1, #0
 800051c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000520:	f1c3 0120 	rsb	r1, r3, #32
 8000524:	fa02 fc03 	lsl.w	ip, r2, r3
 8000528:	fa20 f201 	lsr.w	r2, r0, r1
 800052c:	fa25 f101 	lsr.w	r1, r5, r1
 8000530:	409d      	lsls	r5, r3
 8000532:	432a      	orrs	r2, r5
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000540:	fb07 1510 	mls	r5, r7, r0, r1
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800054a:	fb00 f50e 	mul.w	r5, r0, lr
 800054e:	428d      	cmp	r5, r1
 8000550:	fa04 f403 	lsl.w	r4, r4, r3
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x258>
 8000556:	eb1c 0101 	adds.w	r1, ip, r1
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000560:	428d      	cmp	r5, r1
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000564:	3802      	subs	r0, #2
 8000566:	4461      	add	r1, ip
 8000568:	1b49      	subs	r1, r1, r5
 800056a:	b292      	uxth	r2, r2
 800056c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000570:	fb07 1115 	mls	r1, r7, r5, r1
 8000574:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000578:	fb05 f10e 	mul.w	r1, r5, lr
 800057c:	4291      	cmp	r1, r2
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x282>
 8000580:	eb1c 0202 	adds.w	r2, ip, r2
 8000584:	f105 38ff 	add.w	r8, r5, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2a8>
 800058a:	4291      	cmp	r1, r2
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2a8>
 800058e:	3d02      	subs	r5, #2
 8000590:	4462      	add	r2, ip
 8000592:	1a52      	subs	r2, r2, r1
 8000594:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0xfc>
 800059a:	4631      	mov	r1, r6
 800059c:	4630      	mov	r0, r6
 800059e:	e708      	b.n	80003b2 <__udivmoddi4+0xa2>
 80005a0:	4639      	mov	r1, r7
 80005a2:	e6e6      	b.n	8000372 <__udivmoddi4+0x62>
 80005a4:	4610      	mov	r0, r2
 80005a6:	e6fb      	b.n	80003a0 <__udivmoddi4+0x90>
 80005a8:	4548      	cmp	r0, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005b4:	3b01      	subs	r3, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b8:	4645      	mov	r5, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x282>
 80005bc:	462b      	mov	r3, r5
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1da>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x258>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c8:	3d02      	subs	r5, #2
 80005ca:	4462      	add	r2, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x124>
 80005ce:	4608      	mov	r0, r1
 80005d0:	e70a      	b.n	80003e8 <__udivmoddi4+0xd8>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x14e>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b082      	sub	sp, #8
 80005e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e2:	f001 fa72 	bl	8001aca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e6:	f000 f8a7 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ea:	f000 fbb7 	bl	8000d5c <MX_GPIO_Init>
  MX_DMA_Init();
 80005ee:	f000 fb73 	bl	8000cd8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005f2:	f000 fadb 	bl	8000bac <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80005f6:	f000 f8eb 	bl	80007d0 <MX_ADC1_Init>
  MX_ADC2_Init();
 80005fa:	f000 f96d 	bl	80008d8 <MX_ADC2_Init>
  MX_ADC3_Init();
 80005fe:	f000 f9dd 	bl	80009bc <MX_ADC3_Init>
  MX_ADC4_Init();
 8000602:	f000 fa61 	bl	8000ac8 <MX_ADC4_Init>
  MX_TIM2_Init();
 8000606:	f000 fb1b 	bl	8000c40 <MX_TIM2_Init>
  MX_USB_Device_Init();
 800060a:	f00b ff9d 	bl	800c548 <MX_USB_Device_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Wait for instructions
	  if(prog_state == CFG_RECEIVED){
 800060e:	4b40      	ldr	r3, [pc, #256]	; (8000710 <main+0x134>)
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b01      	cmp	r3, #1
 8000616:	d101      	bne.n	800061c <main+0x40>
		  InterpretConfig();
 8000618:	f000 fc3e 	bl	8000e98 <InterpretConfig>
	  }
	  if(prog_state == CFG_INTERPRETED){
 800061c:	4b3c      	ldr	r3, [pc, #240]	; (8000710 <main+0x134>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	b2db      	uxtb	r3, r3
 8000622:	2b02      	cmp	r3, #2
 8000624:	d101      	bne.n	800062a <main+0x4e>
		  SetupMeasurement();
 8000626:	f000 fd53 	bl	80010d0 <SetupMeasurement>
	  }
	  if(prog_state == ARMED){
 800062a:	4b39      	ldr	r3, [pc, #228]	; (8000710 <main+0x134>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	b2db      	uxtb	r3, r3
 8000630:	2b03      	cmp	r3, #3
 8000632:	d101      	bne.n	8000638 <main+0x5c>
		  StartMeasurement();
 8000634:	f000 fd80 	bl	8001138 <StartMeasurement>
	  }
	  if(prog_state == MEASURING){
 8000638:	4b35      	ldr	r3, [pc, #212]	; (8000710 <main+0x134>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	b2db      	uxtb	r3, r3
 800063e:	2b04      	cmp	r3, #4
 8000640:	d145      	bne.n	80006ce <main+0xf2>
		 if(adc_state[0] == START_FULL &&
 8000642:	4b34      	ldr	r3, [pc, #208]	; (8000714 <main+0x138>)
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d11f      	bne.n	800068a <main+0xae>
			adc_state[1] == START_FULL &&
 800064a:	4b32      	ldr	r3, [pc, #200]	; (8000714 <main+0x138>)
 800064c:	785b      	ldrb	r3, [r3, #1]
		 if(adc_state[0] == START_FULL &&
 800064e:	2b01      	cmp	r3, #1
 8000650:	d11b      	bne.n	800068a <main+0xae>
			adc_state[2] == START_FULL &&
 8000652:	4b30      	ldr	r3, [pc, #192]	; (8000714 <main+0x138>)
 8000654:	789b      	ldrb	r3, [r3, #2]
			adc_state[1] == START_FULL &&
 8000656:	2b01      	cmp	r3, #1
 8000658:	d117      	bne.n	800068a <main+0xae>
			adc_state[3] == START_FULL) {
 800065a:	4b2e      	ldr	r3, [pc, #184]	; (8000714 <main+0x138>)
 800065c:	78db      	ldrb	r3, [r3, #3]
			adc_state[2] == START_FULL &&
 800065e:	2b01      	cmp	r3, #1
 8000660:	d113      	bne.n	800068a <main+0xae>
			 for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	e007      	b.n	8000678 <main+0x9c>
				 adc_state[i] = EMPTY;
 8000668:	4a2a      	ldr	r2, [pc, #168]	; (8000714 <main+0x138>)
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	4413      	add	r3, r2
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
			 for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	3301      	adds	r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b03      	cmp	r3, #3
 800067c:	ddf4      	ble.n	8000668 <main+0x8c>
			 }
			 HAL_GPIO_TogglePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin);
 800067e:	2102      	movs	r1, #2
 8000680:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000684:	f003 fdfe 	bl	8004284 <HAL_GPIO_TogglePin>
 8000688:	e021      	b.n	80006ce <main+0xf2>
		 }
		 else if(adc_state[0] == END_FULL &&
 800068a:	4b22      	ldr	r3, [pc, #136]	; (8000714 <main+0x138>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d11d      	bne.n	80006ce <main+0xf2>
				 adc_state[1] == END_FULL &&
 8000692:	4b20      	ldr	r3, [pc, #128]	; (8000714 <main+0x138>)
 8000694:	785b      	ldrb	r3, [r3, #1]
		 else if(adc_state[0] == END_FULL &&
 8000696:	2b02      	cmp	r3, #2
 8000698:	d119      	bne.n	80006ce <main+0xf2>
				 adc_state[2] == END_FULL &&
 800069a:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <main+0x138>)
 800069c:	789b      	ldrb	r3, [r3, #2]
				 adc_state[1] == END_FULL &&
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d115      	bne.n	80006ce <main+0xf2>
				 adc_state[3] == END_FULL) {
 80006a2:	4b1c      	ldr	r3, [pc, #112]	; (8000714 <main+0x138>)
 80006a4:	78db      	ldrb	r3, [r3, #3]
				 adc_state[2] == END_FULL &&
 80006a6:	2b02      	cmp	r3, #2
 80006a8:	d111      	bne.n	80006ce <main+0xf2>
			 for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 80006aa:	2300      	movs	r3, #0
 80006ac:	603b      	str	r3, [r7, #0]
 80006ae:	e007      	b.n	80006c0 <main+0xe4>
				 adc_state[i] = EMPTY;
 80006b0:	4a18      	ldr	r2, [pc, #96]	; (8000714 <main+0x138>)
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	4413      	add	r3, r2
 80006b6:	2200      	movs	r2, #0
 80006b8:	701a      	strb	r2, [r3, #0]
			 for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	3301      	adds	r3, #1
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	2b03      	cmp	r3, #3
 80006c4:	ddf4      	ble.n	80006b0 <main+0xd4>
			 }
			 HAL_GPIO_TogglePin(TEST_OUT2_GPIO_Port, TEST_OUT2_Pin);
 80006c6:	2102      	movs	r1, #2
 80006c8:	4813      	ldr	r0, [pc, #76]	; (8000718 <main+0x13c>)
 80006ca:	f003 fddb 	bl	8004284 <HAL_GPIO_TogglePin>
		 }
	  }
	  if(prog_state == DONE){
 80006ce:	4b10      	ldr	r3, [pc, #64]	; (8000710 <main+0x134>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	2b05      	cmp	r3, #5
 80006d6:	d19a      	bne.n	800060e <main+0x32>
		  HAL_TIM_Base_Stop_IT(&htim2);
 80006d8:	4810      	ldr	r0, [pc, #64]	; (800071c <main+0x140>)
 80006da:	f006 fc45 	bl	8006f68 <HAL_TIM_Base_Stop_IT>
		  HAL_ADC_Stop_DMA(&hadc1);
 80006de:	4810      	ldr	r0, [pc, #64]	; (8000720 <main+0x144>)
 80006e0:	f001 ffac 	bl	800263c <HAL_ADC_Stop_DMA>
		  HAL_ADC_Stop_DMA(&hadc2);
 80006e4:	480f      	ldr	r0, [pc, #60]	; (8000724 <main+0x148>)
 80006e6:	f001 ffa9 	bl	800263c <HAL_ADC_Stop_DMA>
		  HAL_ADC_Stop_DMA(&hadc3);
 80006ea:	480f      	ldr	r0, [pc, #60]	; (8000728 <main+0x14c>)
 80006ec:	f001 ffa6 	bl	800263c <HAL_ADC_Stop_DMA>
		  HAL_ADC_Stop_DMA(&hadc4);
 80006f0:	480e      	ldr	r0, [pc, #56]	; (800072c <main+0x150>)
 80006f2:	f001 ffa3 	bl	800263c <HAL_ADC_Stop_DMA>
		  memset(adc_buffers, 0, sizeof(adc_buffers));
 80006f6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80006fa:	2100      	movs	r1, #0
 80006fc:	480c      	ldr	r0, [pc, #48]	; (8000730 <main+0x154>)
 80006fe:	f00c fdd0 	bl	800d2a2 <memset>
		  prog_state = IDLE;
 8000702:	4b03      	ldr	r3, [pc, #12]	; (8000710 <main+0x134>)
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
		  conv_count = 0;
 8000708:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <main+0x158>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
	  if(prog_state == CFG_RECEIVED){
 800070e:	e77e      	b.n	800060e <main+0x32>
 8000710:	200044d4 	.word	0x200044d4
 8000714:	200044e4 	.word	0x200044e4
 8000718:	48000800 	.word	0x48000800
 800071c:	200005c8 	.word	0x200005c8
 8000720:	20000204 	.word	0x20000204
 8000724:	20000270 	.word	0x20000270
 8000728:	200002dc 	.word	0x200002dc
 800072c:	20000348 	.word	0x20000348
 8000730:	20000614 	.word	0x20000614
 8000734:	200044dc 	.word	0x200044dc

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b094      	sub	sp, #80	; 0x50
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	f107 0318 	add.w	r3, r7, #24
 8000742:	2238      	movs	r2, #56	; 0x38
 8000744:	2100      	movs	r1, #0
 8000746:	4618      	mov	r0, r3
 8000748:	f00c fdab 	bl	800d2a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800075a:	2000      	movs	r0, #0
 800075c:	f005 fb04 	bl	8005d68 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000760:	2321      	movs	r3, #33	; 0x21
 8000762:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000764:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000768:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800076a:	2301      	movs	r3, #1
 800076c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076e:	2302      	movs	r3, #2
 8000770:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000772:	2303      	movs	r3, #3
 8000774:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000776:	2306      	movs	r3, #6
 8000778:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 78;
 800077a:	234e      	movs	r3, #78	; 0x4e
 800077c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800077e:	2306      	movs	r3, #6
 8000780:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000782:	2302      	movs	r3, #2
 8000784:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000786:	2302      	movs	r3, #2
 8000788:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078a:	f107 0318 	add.w	r3, r7, #24
 800078e:	4618      	mov	r0, r3
 8000790:	f005 fb9e 	bl	8005ed0 <HAL_RCC_OscConfig>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800079a:	f000 fd7f 	bl	800129c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2303      	movs	r3, #3
 80007a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ae:	2300      	movs	r3, #0
 80007b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	2104      	movs	r1, #4
 80007b6:	4618      	mov	r0, r3
 80007b8:	f005 fe9c 	bl	80064f4 <HAL_RCC_ClockConfig>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80007c2:	f000 fd6b 	bl	800129c <Error_Handler>
  }
}
 80007c6:	bf00      	nop
 80007c8:	3750      	adds	r7, #80	; 0x50
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
	...

080007d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08c      	sub	sp, #48	; 0x30
 80007d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2220      	movs	r2, #32
 80007e6:	2100      	movs	r1, #0
 80007e8:	4618      	mov	r0, r3
 80007ea:	f00c fd5a 	bl	800d2a2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007ee:	4b38      	ldr	r3, [pc, #224]	; (80008d0 <MX_ADC1_Init+0x100>)
 80007f0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80007f4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007f6:	4b36      	ldr	r3, [pc, #216]	; (80008d0 <MX_ADC1_Init+0x100>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007fc:	4b34      	ldr	r3, [pc, #208]	; (80008d0 <MX_ADC1_Init+0x100>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000802:	4b33      	ldr	r3, [pc, #204]	; (80008d0 <MX_ADC1_Init+0x100>)
 8000804:	2200      	movs	r2, #0
 8000806:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000808:	4b31      	ldr	r3, [pc, #196]	; (80008d0 <MX_ADC1_Init+0x100>)
 800080a:	2200      	movs	r2, #0
 800080c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800080e:	4b30      	ldr	r3, [pc, #192]	; (80008d0 <MX_ADC1_Init+0x100>)
 8000810:	2200      	movs	r2, #0
 8000812:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000814:	4b2e      	ldr	r3, [pc, #184]	; (80008d0 <MX_ADC1_Init+0x100>)
 8000816:	2204      	movs	r2, #4
 8000818:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800081a:	4b2d      	ldr	r3, [pc, #180]	; (80008d0 <MX_ADC1_Init+0x100>)
 800081c:	2200      	movs	r2, #0
 800081e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000820:	4b2b      	ldr	r3, [pc, #172]	; (80008d0 <MX_ADC1_Init+0x100>)
 8000822:	2200      	movs	r2, #0
 8000824:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000826:	4b2a      	ldr	r3, [pc, #168]	; (80008d0 <MX_ADC1_Init+0x100>)
 8000828:	2201      	movs	r2, #1
 800082a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800082c:	4b28      	ldr	r3, [pc, #160]	; (80008d0 <MX_ADC1_Init+0x100>)
 800082e:	2200      	movs	r2, #0
 8000830:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000834:	4b26      	ldr	r3, [pc, #152]	; (80008d0 <MX_ADC1_Init+0x100>)
 8000836:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 800083a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800083c:	4b24      	ldr	r3, [pc, #144]	; (80008d0 <MX_ADC1_Init+0x100>)
 800083e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000842:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000844:	4b22      	ldr	r3, [pc, #136]	; (80008d0 <MX_ADC1_Init+0x100>)
 8000846:	2201      	movs	r2, #1
 8000848:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800084c:	4b20      	ldr	r3, [pc, #128]	; (80008d0 <MX_ADC1_Init+0x100>)
 800084e:	2200      	movs	r2, #0
 8000850:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000852:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <MX_ADC1_Init+0x100>)
 8000854:	2201      	movs	r2, #1
 8000856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 800085a:	4b1d      	ldr	r3, [pc, #116]	; (80008d0 <MX_ADC1_Init+0x100>)
 800085c:	2210      	movs	r2, #16
 800085e:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8000860:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <MX_ADC1_Init+0x100>)
 8000862:	2220      	movs	r2, #32
 8000864:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000866:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_ADC1_Init+0x100>)
 8000868:	2200      	movs	r2, #0
 800086a:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800086c:	4b18      	ldr	r3, [pc, #96]	; (80008d0 <MX_ADC1_Init+0x100>)
 800086e:	2201      	movs	r2, #1
 8000870:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000872:	4817      	ldr	r0, [pc, #92]	; (80008d0 <MX_ADC1_Init+0x100>)
 8000874:	f001 fc52 	bl	800211c <HAL_ADC_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800087e:	f000 fd0d 	bl	800129c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000882:	2300      	movs	r3, #0
 8000884:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000886:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088a:	4619      	mov	r1, r3
 800088c:	4810      	ldr	r0, [pc, #64]	; (80008d0 <MX_ADC1_Init+0x100>)
 800088e:	f002 fe7b 	bl	8003588 <HAL_ADCEx_MultiModeConfigChannel>
 8000892:	4603      	mov	r3, r0
 8000894:	2b00      	cmp	r3, #0
 8000896:	d001      	beq.n	800089c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000898:	f000 fd00 	bl	800129c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800089c:	4b0d      	ldr	r3, [pc, #52]	; (80008d4 <MX_ADC1_Init+0x104>)
 800089e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008a0:	2306      	movs	r3, #6
 80008a2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80008a4:	2300      	movs	r3, #0
 80008a6:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008a8:	237f      	movs	r3, #127	; 0x7f
 80008aa:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ac:	2304      	movs	r3, #4
 80008ae:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	4619      	mov	r1, r3
 80008b8:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_ADC1_Init+0x100>)
 80008ba:	f001 ff2b 	bl	8002714 <HAL_ADC_ConfigChannel>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80008c4:	f000 fcea 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	3730      	adds	r7, #48	; 0x30
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	20000204 	.word	0x20000204
 80008d4:	04300002 	.word	0x04300002

080008d8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008de:	463b      	mov	r3, r7
 80008e0:	2220      	movs	r2, #32
 80008e2:	2100      	movs	r1, #0
 80008e4:	4618      	mov	r0, r3
 80008e6:	f00c fcdc 	bl	800d2a2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80008ea:	4b31      	ldr	r3, [pc, #196]	; (80009b0 <MX_ADC2_Init+0xd8>)
 80008ec:	4a31      	ldr	r2, [pc, #196]	; (80009b4 <MX_ADC2_Init+0xdc>)
 80008ee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008f0:	4b2f      	ldr	r3, [pc, #188]	; (80009b0 <MX_ADC2_Init+0xd8>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80008f6:	4b2e      	ldr	r3, [pc, #184]	; (80009b0 <MX_ADC2_Init+0xd8>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008fc:	4b2c      	ldr	r3, [pc, #176]	; (80009b0 <MX_ADC2_Init+0xd8>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000902:	4b2b      	ldr	r3, [pc, #172]	; (80009b0 <MX_ADC2_Init+0xd8>)
 8000904:	2200      	movs	r2, #0
 8000906:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000908:	4b29      	ldr	r3, [pc, #164]	; (80009b0 <MX_ADC2_Init+0xd8>)
 800090a:	2200      	movs	r2, #0
 800090c:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800090e:	4b28      	ldr	r3, [pc, #160]	; (80009b0 <MX_ADC2_Init+0xd8>)
 8000910:	2204      	movs	r2, #4
 8000912:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000914:	4b26      	ldr	r3, [pc, #152]	; (80009b0 <MX_ADC2_Init+0xd8>)
 8000916:	2200      	movs	r2, #0
 8000918:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800091a:	4b25      	ldr	r3, [pc, #148]	; (80009b0 <MX_ADC2_Init+0xd8>)
 800091c:	2200      	movs	r2, #0
 800091e:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000920:	4b23      	ldr	r3, [pc, #140]	; (80009b0 <MX_ADC2_Init+0xd8>)
 8000922:	2201      	movs	r2, #1
 8000924:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000926:	4b22      	ldr	r3, [pc, #136]	; (80009b0 <MX_ADC2_Init+0xd8>)
 8000928:	2200      	movs	r2, #0
 800092a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 800092e:	4b20      	ldr	r3, [pc, #128]	; (80009b0 <MX_ADC2_Init+0xd8>)
 8000930:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000934:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000936:	4b1e      	ldr	r3, [pc, #120]	; (80009b0 <MX_ADC2_Init+0xd8>)
 8000938:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800093c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 800093e:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <MX_ADC2_Init+0xd8>)
 8000940:	2201      	movs	r2, #1
 8000942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000946:	4b1a      	ldr	r3, [pc, #104]	; (80009b0 <MX_ADC2_Init+0xd8>)
 8000948:	2200      	movs	r2, #0
 800094a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 800094c:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <MX_ADC2_Init+0xd8>)
 800094e:	2201      	movs	r2, #1
 8000950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8000954:	4b16      	ldr	r3, [pc, #88]	; (80009b0 <MX_ADC2_Init+0xd8>)
 8000956:	2210      	movs	r2, #16
 8000958:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <MX_ADC2_Init+0xd8>)
 800095c:	2220      	movs	r2, #32
 800095e:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000960:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <MX_ADC2_Init+0xd8>)
 8000962:	2200      	movs	r2, #0
 8000964:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000966:	4b12      	ldr	r3, [pc, #72]	; (80009b0 <MX_ADC2_Init+0xd8>)
 8000968:	2201      	movs	r2, #1
 800096a:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800096c:	4810      	ldr	r0, [pc, #64]	; (80009b0 <MX_ADC2_Init+0xd8>)
 800096e:	f001 fbd5 	bl	800211c <HAL_ADC_Init>
 8000972:	4603      	mov	r3, r0
 8000974:	2b00      	cmp	r3, #0
 8000976:	d001      	beq.n	800097c <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 8000978:	f000 fc90 	bl	800129c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800097c:	4b0e      	ldr	r3, [pc, #56]	; (80009b8 <MX_ADC2_Init+0xe0>)
 800097e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000980:	2306      	movs	r3, #6
 8000982:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000988:	237f      	movs	r3, #127	; 0x7f
 800098a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800098c:	2304      	movs	r3, #4
 800098e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000990:	2300      	movs	r3, #0
 8000992:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000994:	463b      	mov	r3, r7
 8000996:	4619      	mov	r1, r3
 8000998:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_ADC2_Init+0xd8>)
 800099a:	f001 febb 	bl	8002714 <HAL_ADC_ConfigChannel>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 80009a4:	f000 fc7a 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80009a8:	bf00      	nop
 80009aa:	3720      	adds	r7, #32
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000270 	.word	0x20000270
 80009b4:	50000100 	.word	0x50000100
 80009b8:	0c900008 	.word	0x0c900008

080009bc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	; 0x30
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2220      	movs	r2, #32
 80009d2:	2100      	movs	r1, #0
 80009d4:	4618      	mov	r0, r3
 80009d6:	f00c fc64 	bl	800d2a2 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80009da:	4b38      	ldr	r3, [pc, #224]	; (8000abc <MX_ADC3_Init+0x100>)
 80009dc:	4a38      	ldr	r2, [pc, #224]	; (8000ac0 <MX_ADC3_Init+0x104>)
 80009de:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009e0:	4b36      	ldr	r3, [pc, #216]	; (8000abc <MX_ADC3_Init+0x100>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80009e6:	4b35      	ldr	r3, [pc, #212]	; (8000abc <MX_ADC3_Init+0x100>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ec:	4b33      	ldr	r3, [pc, #204]	; (8000abc <MX_ADC3_Init+0x100>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80009f2:	4b32      	ldr	r3, [pc, #200]	; (8000abc <MX_ADC3_Init+0x100>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009f8:	4b30      	ldr	r3, [pc, #192]	; (8000abc <MX_ADC3_Init+0x100>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009fe:	4b2f      	ldr	r3, [pc, #188]	; (8000abc <MX_ADC3_Init+0x100>)
 8000a00:	2204      	movs	r2, #4
 8000a02:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a04:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <MX_ADC3_Init+0x100>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a0a:	4b2c      	ldr	r3, [pc, #176]	; (8000abc <MX_ADC3_Init+0x100>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000a10:	4b2a      	ldr	r3, [pc, #168]	; (8000abc <MX_ADC3_Init+0x100>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a16:	4b29      	ldr	r3, [pc, #164]	; (8000abc <MX_ADC3_Init+0x100>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000a1e:	4b27      	ldr	r3, [pc, #156]	; (8000abc <MX_ADC3_Init+0x100>)
 8000a20:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000a24:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000a26:	4b25      	ldr	r3, [pc, #148]	; (8000abc <MX_ADC3_Init+0x100>)
 8000a28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a2c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000a2e:	4b23      	ldr	r3, [pc, #140]	; (8000abc <MX_ADC3_Init+0x100>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_ADC3_Init+0x100>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_ADC3_Init+0x100>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8000a44:	4b1d      	ldr	r3, [pc, #116]	; (8000abc <MX_ADC3_Init+0x100>)
 8000a46:	2210      	movs	r2, #16
 8000a48:	645a      	str	r2, [r3, #68]	; 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_ADC3_Init+0x100>)
 8000a4c:	2220      	movs	r2, #32
 8000a4e:	649a      	str	r2, [r3, #72]	; 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <MX_ADC3_Init+0x100>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000a56:	4b19      	ldr	r3, [pc, #100]	; (8000abc <MX_ADC3_Init+0x100>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a5c:	4817      	ldr	r0, [pc, #92]	; (8000abc <MX_ADC3_Init+0x100>)
 8000a5e:	f001 fb5d 	bl	800211c <HAL_ADC_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000a68:	f000 fc18 	bl	800129c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 8000a70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a74:	4619      	mov	r1, r3
 8000a76:	4811      	ldr	r0, [pc, #68]	; (8000abc <MX_ADC3_Init+0x100>)
 8000a78:	f002 fd86 	bl	8003588 <HAL_ADCEx_MultiModeConfigChannel>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_ADC3_Init+0xca>
  {
    Error_Handler();
 8000a82:	f000 fc0b 	bl	800129c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a86:	4b0f      	ldr	r3, [pc, #60]	; (8000ac4 <MX_ADC3_Init+0x108>)
 8000a88:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a8a:	2306      	movs	r3, #6
 8000a8c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a92:	237f      	movs	r3, #127	; 0x7f
 8000a94:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a96:	2304      	movs	r3, #4
 8000a98:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <MX_ADC3_Init+0x100>)
 8000aa4:	f001 fe36 	bl	8002714 <HAL_ADC_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC3_Init+0xf6>
  {
    Error_Handler();
 8000aae:	f000 fbf5 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3730      	adds	r7, #48	; 0x30
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200002dc 	.word	0x200002dc
 8000ac0:	50000400 	.word	0x50000400
 8000ac4:	32601000 	.word	0x32601000

08000ac8 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ace:	463b      	mov	r3, r7
 8000ad0:	2220      	movs	r2, #32
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f00c fbe4 	bl	800d2a2 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000ada:	4b31      	ldr	r3, [pc, #196]	; (8000ba0 <MX_ADC4_Init+0xd8>)
 8000adc:	4a31      	ldr	r2, [pc, #196]	; (8000ba4 <MX_ADC4_Init+0xdc>)
 8000ade:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ae0:	4b2f      	ldr	r3, [pc, #188]	; (8000ba0 <MX_ADC4_Init+0xd8>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 8000ae6:	4b2e      	ldr	r3, [pc, #184]	; (8000ba0 <MX_ADC4_Init+0xd8>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aec:	4b2c      	ldr	r3, [pc, #176]	; (8000ba0 <MX_ADC4_Init+0xd8>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000af2:	4b2b      	ldr	r3, [pc, #172]	; (8000ba0 <MX_ADC4_Init+0xd8>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000af8:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <MX_ADC4_Init+0xd8>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000afe:	4b28      	ldr	r3, [pc, #160]	; (8000ba0 <MX_ADC4_Init+0xd8>)
 8000b00:	2204      	movs	r2, #4
 8000b02:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000b04:	4b26      	ldr	r3, [pc, #152]	; (8000ba0 <MX_ADC4_Init+0xd8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8000b0a:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <MX_ADC4_Init+0xd8>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000b10:	4b23      	ldr	r3, [pc, #140]	; (8000ba0 <MX_ADC4_Init+0xd8>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 8000b16:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <MX_ADC4_Init+0xd8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000b1e:	4b20      	ldr	r3, [pc, #128]	; (8000ba0 <MX_ADC4_Init+0xd8>)
 8000b20:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000b24:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000b26:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <MX_ADC4_Init+0xd8>)
 8000b28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b2c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8000b2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ba0 <MX_ADC4_Init+0xd8>)
 8000b30:	2201      	movs	r2, #1
 8000b32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <MX_ADC4_Init+0xd8>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 8000b3c:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <MX_ADC4_Init+0xd8>)
 8000b3e:	2201      	movs	r2, #1
 8000b40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_ADC4_Init+0xd8>)
 8000b46:	2210      	movs	r2, #16
 8000b48:	645a      	str	r2, [r3, #68]	; 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <MX_ADC4_Init+0xd8>)
 8000b4c:	2220      	movs	r2, #32
 8000b4e:	649a      	str	r2, [r3, #72]	; 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_ADC4_Init+0xd8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_ADC4_Init+0xd8>)
 8000b58:	2201      	movs	r2, #1
 8000b5a:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000b5c:	4810      	ldr	r0, [pc, #64]	; (8000ba0 <MX_ADC4_Init+0xd8>)
 8000b5e:	f001 fadd 	bl	800211c <HAL_ADC_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_ADC4_Init+0xa4>
  {
    Error_Handler();
 8000b68:	f000 fb98 	bl	800129c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000b6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ba8 <MX_ADC4_Init+0xe0>)
 8000b6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b70:	2306      	movs	r3, #6
 8000b72:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b74:	2300      	movs	r3, #0
 8000b76:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b78:	237f      	movs	r3, #127	; 0x7f
 8000b7a:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000b84:	463b      	mov	r3, r7
 8000b86:	4619      	mov	r1, r3
 8000b88:	4805      	ldr	r0, [pc, #20]	; (8000ba0 <MX_ADC4_Init+0xd8>)
 8000b8a:	f001 fdc3 	bl	8002714 <HAL_ADC_ConfigChannel>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_ADC4_Init+0xd0>
  {
    Error_Handler();
 8000b94:	f000 fb82 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	3720      	adds	r7, #32
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000348 	.word	0x20000348
 8000ba4:	50000500 	.word	0x50000500
 8000ba8:	14f00020 	.word	0x14f00020

08000bac <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000bb0:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <MX_LPUART1_UART_Init+0x8c>)
 8000bb2:	4a22      	ldr	r2, [pc, #136]	; (8000c3c <MX_LPUART1_UART_Init+0x90>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000bb6:	4b20      	ldr	r3, [pc, #128]	; (8000c38 <MX_LPUART1_UART_Init+0x8c>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <MX_LPUART1_UART_Init+0x8c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <MX_LPUART1_UART_Init+0x8c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <MX_LPUART1_UART_Init+0x8c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <MX_LPUART1_UART_Init+0x8c>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b18      	ldr	r3, [pc, #96]	; (8000c38 <MX_LPUART1_UART_Init+0x8c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bdc:	4b16      	ldr	r3, [pc, #88]	; (8000c38 <MX_LPUART1_UART_Init+0x8c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <MX_LPUART1_UART_Init+0x8c>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <MX_LPUART1_UART_Init+0x8c>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000bee:	4812      	ldr	r0, [pc, #72]	; (8000c38 <MX_LPUART1_UART_Init+0x8c>)
 8000bf0:	f006 feac 	bl	800794c <HAL_UART_Init>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000bfa:	f000 fb4f 	bl	800129c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bfe:	2100      	movs	r1, #0
 8000c00:	480d      	ldr	r0, [pc, #52]	; (8000c38 <MX_LPUART1_UART_Init+0x8c>)
 8000c02:	f007 fc47 	bl	8008494 <HAL_UARTEx_SetTxFifoThreshold>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000c0c:	f000 fb46 	bl	800129c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c10:	2100      	movs	r1, #0
 8000c12:	4809      	ldr	r0, [pc, #36]	; (8000c38 <MX_LPUART1_UART_Init+0x8c>)
 8000c14:	f007 fc7c 	bl	8008510 <HAL_UARTEx_SetRxFifoThreshold>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000c1e:	f000 fb3d 	bl	800129c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000c22:	4805      	ldr	r0, [pc, #20]	; (8000c38 <MX_LPUART1_UART_Init+0x8c>)
 8000c24:	f007 fbfd 	bl	8008422 <HAL_UARTEx_DisableFifoMode>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000c2e:	f000 fb35 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000534 	.word	0x20000534
 8000c3c:	40008000 	.word	0x40008000

08000c40 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c46:	f107 0310 	add.w	r3, r7, #16
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	1d3b      	adds	r3, r7, #4
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c5e:	4b1d      	ldr	r3, [pc, #116]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c60:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c64:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 156 - 1;
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c68:	229b      	movs	r2, #155	; 0x9b
 8000c6a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6c:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000c72:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c74:	2209      	movs	r2, #9
 8000c76:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c78:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c7e:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c84:	4813      	ldr	r0, [pc, #76]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000c86:	f006 f89f 	bl	8006dc8 <HAL_TIM_Base_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c90:	f000 fb04 	bl	800129c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c9a:	f107 0310 	add.w	r3, r7, #16
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	480c      	ldr	r0, [pc, #48]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000ca2:	f006 fadf 	bl	8007264 <HAL_TIM_ConfigClockSource>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000cac:	f000 faf6 	bl	800129c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000cb0:	2320      	movs	r3, #32
 8000cb2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_TIM2_Init+0x94>)
 8000cbe:	f006 fd69 	bl	8007794 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000cc8:	f000 fae8 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ccc:	bf00      	nop
 8000cce:	3720      	adds	r7, #32
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200005c8 	.word	0x200005c8

08000cd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000cde:	4b1e      	ldr	r3, [pc, #120]	; (8000d58 <MX_DMA_Init+0x80>)
 8000ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ce2:	4a1d      	ldr	r2, [pc, #116]	; (8000d58 <MX_DMA_Init+0x80>)
 8000ce4:	f043 0304 	orr.w	r3, r3, #4
 8000ce8:	6493      	str	r3, [r2, #72]	; 0x48
 8000cea:	4b1b      	ldr	r3, [pc, #108]	; (8000d58 <MX_DMA_Init+0x80>)
 8000cec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cee:	f003 0304 	and.w	r3, r3, #4
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cf6:	4b18      	ldr	r3, [pc, #96]	; (8000d58 <MX_DMA_Init+0x80>)
 8000cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cfa:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <MX_DMA_Init+0x80>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6493      	str	r3, [r2, #72]	; 0x48
 8000d02:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <MX_DMA_Init+0x80>)
 8000d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	200c      	movs	r0, #12
 8000d14:	f002 fe1b 	bl	800394e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000d18:	200c      	movs	r0, #12
 8000d1a:	f002 fe32 	bl	8003982 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000d1e:	2200      	movs	r2, #0
 8000d20:	2100      	movs	r1, #0
 8000d22:	200d      	movs	r0, #13
 8000d24:	f002 fe13 	bl	800394e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000d28:	200d      	movs	r0, #13
 8000d2a:	f002 fe2a 	bl	8003982 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	200e      	movs	r0, #14
 8000d34:	f002 fe0b 	bl	800394e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000d38:	200e      	movs	r0, #14
 8000d3a:	f002 fe22 	bl	8003982 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	200f      	movs	r0, #15
 8000d44:	f002 fe03 	bl	800394e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000d48:	200f      	movs	r0, #15
 8000d4a:	f002 fe1a 	bl	8003982 <HAL_NVIC_EnableIRQ>

}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40021000 	.word	0x40021000

08000d5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b08a      	sub	sp, #40	; 0x28
 8000d60:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d62:	f107 0314 	add.w	r3, r7, #20
 8000d66:	2200      	movs	r2, #0
 8000d68:	601a      	str	r2, [r3, #0]
 8000d6a:	605a      	str	r2, [r3, #4]
 8000d6c:	609a      	str	r2, [r3, #8]
 8000d6e:	60da      	str	r2, [r3, #12]
 8000d70:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d72:	4b47      	ldr	r3, [pc, #284]	; (8000e90 <MX_GPIO_Init+0x134>)
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	4a46      	ldr	r2, [pc, #280]	; (8000e90 <MX_GPIO_Init+0x134>)
 8000d78:	f043 0304 	orr.w	r3, r3, #4
 8000d7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d7e:	4b44      	ldr	r3, [pc, #272]	; (8000e90 <MX_GPIO_Init+0x134>)
 8000d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d82:	f003 0304 	and.w	r3, r3, #4
 8000d86:	613b      	str	r3, [r7, #16]
 8000d88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d8a:	4b41      	ldr	r3, [pc, #260]	; (8000e90 <MX_GPIO_Init+0x134>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	4a40      	ldr	r2, [pc, #256]	; (8000e90 <MX_GPIO_Init+0x134>)
 8000d90:	f043 0320 	orr.w	r3, r3, #32
 8000d94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d96:	4b3e      	ldr	r3, [pc, #248]	; (8000e90 <MX_GPIO_Init+0x134>)
 8000d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9a:	f003 0320 	and.w	r3, r3, #32
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b3b      	ldr	r3, [pc, #236]	; (8000e90 <MX_GPIO_Init+0x134>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da6:	4a3a      	ldr	r2, [pc, #232]	; (8000e90 <MX_GPIO_Init+0x134>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dae:	4b38      	ldr	r3, [pc, #224]	; (8000e90 <MX_GPIO_Init+0x134>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dba:	4b35      	ldr	r3, [pc, #212]	; (8000e90 <MX_GPIO_Init+0x134>)
 8000dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dbe:	4a34      	ldr	r2, [pc, #208]	; (8000e90 <MX_GPIO_Init+0x134>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc6:	4b32      	ldr	r3, [pc, #200]	; (8000e90 <MX_GPIO_Init+0x134>)
 8000dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dca:	f003 0302 	and.w	r3, r3, #2
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USB_EN_Pin|TEST_OUT2_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2103      	movs	r1, #3
 8000dd6:	482f      	ldr	r0, [pc, #188]	; (8000e94 <MX_GPIO_Init+0x138>)
 8000dd8:	f003 fa3c 	bl	8004254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEST_OUT_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2122      	movs	r1, #34	; 0x22
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de4:	f003 fa36 	bl	8004254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000de8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4825      	ldr	r0, [pc, #148]	; (8000e94 <MX_GPIO_Init+0x138>)
 8000e00:	f003 f8a6 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_EN_Pin */
  GPIO_InitStruct.Pin = USB_EN_Pin;
 8000e04:	2301      	movs	r3, #1
 8000e06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e10:	2300      	movs	r3, #0
 8000e12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_EN_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f107 0314 	add.w	r3, r7, #20
 8000e18:	4619      	mov	r1, r3
 8000e1a:	481e      	ldr	r0, [pc, #120]	; (8000e94 <MX_GPIO_Init+0x138>)
 8000e1c:	f003 f898 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUT2_Pin */
  GPIO_InitStruct.Pin = TEST_OUT2_Pin;
 8000e20:	2302      	movs	r3, #2
 8000e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2c:	2303      	movs	r3, #3
 8000e2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_OUT2_GPIO_Port, &GPIO_InitStruct);
 8000e30:	f107 0314 	add.w	r3, r7, #20
 8000e34:	4619      	mov	r1, r3
 8000e36:	4817      	ldr	r0, [pc, #92]	; (8000e94 <MX_GPIO_Init+0x138>)
 8000e38:	f003 f88a 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e56:	f003 f87b 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e5a:	2320      	movs	r3, #32
 8000e5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e74:	f003 f86c 	bl	8003f50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	2028      	movs	r0, #40	; 0x28
 8000e7e:	f002 fd66 	bl	800394e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e82:	2028      	movs	r0, #40	; 0x28
 8000e84:	f002 fd7d 	bl	8003982 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e88:	bf00      	nop
 8000e8a:	3728      	adds	r7, #40	; 0x28
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40021000 	.word	0x40021000
 8000e94:	48000800 	.word	0x48000800

08000e98 <InterpretConfig>:

/* USER CODE BEGIN 4 */

int InterpretConfig(void) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b0a6      	sub	sp, #152	; 0x98
 8000e9c:	af00      	add	r7, sp, #0
	char variable_name[CFG_VAR_SIZE];
	char variable_value[CFG_VAR_SIZE];
	memset(variable_name, 0, sizeof(variable_name));
 8000e9e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000ea2:	2240      	movs	r2, #64	; 0x40
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f00c f9fb 	bl	800d2a2 <memset>
	memset(variable_value, 0, sizeof(variable_value));
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	2240      	movs	r2, #64	; 0x40
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f00c f9f4 	bl	800d2a2 <memset>
	int variable_name_indexes[2] = {0, 0};
 8000eba:	2300      	movs	r3, #0
 8000ebc:	60bb      	str	r3, [r7, #8]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
	int variable_value_indexes[2] = {0, 0};
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	603b      	str	r3, [r7, #0]
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	607b      	str	r3, [r7, #4]
	char reading_status = 'n';
 8000eca:	236e      	movs	r3, #110	; 0x6e
 8000ecc:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	for(int i = 0; i < USB_RX_BUFFER_SIZE; i++){
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000ed6:	e077      	b.n	8000fc8 <InterpretConfig+0x130>
		if(rx_buffer[i] == '\0'){
 8000ed8:	4a42      	ldr	r2, [pc, #264]	; (8000fe4 <InterpretConfig+0x14c>)
 8000eda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ede:	4413      	add	r3, r2
 8000ee0:	f993 3000 	ldrsb.w	r3, [r3]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d074      	beq.n	8000fd2 <InterpretConfig+0x13a>
			break;
		}
		// Reading the variable name
		if(reading_status == 'n'){
 8000ee8:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000eec:	2b6e      	cmp	r3, #110	; 0x6e
 8000eee:	d112      	bne.n	8000f16 <InterpretConfig+0x7e>
			if(rx_buffer[i] == ':') {
 8000ef0:	4a3c      	ldr	r2, [pc, #240]	; (8000fe4 <InterpretConfig+0x14c>)
 8000ef2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000ef6:	4413      	add	r3, r2
 8000ef8:	f993 3000 	ldrsb.w	r3, [r3]
 8000efc:	2b3a      	cmp	r3, #58	; 0x3a
 8000efe:	d15e      	bne.n	8000fbe <InterpretConfig+0x126>
				variable_name_indexes[1] = i;
 8000f00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f04:	60fb      	str	r3, [r7, #12]
				variable_value_indexes[0] = i+1;
 8000f06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	603b      	str	r3, [r7, #0]
				reading_status = 'v';
 8000f0e:	2376      	movs	r3, #118	; 0x76
 8000f10:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8000f14:	e053      	b.n	8000fbe <InterpretConfig+0x126>
			}
		}
		// Reading the variable value
		else if(reading_status == 'v'){
 8000f16:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000f1a:	2b76      	cmp	r3, #118	; 0x76
 8000f1c:	d14f      	bne.n	8000fbe <InterpretConfig+0x126>
			if(rx_buffer[i] == ';') {
 8000f1e:	4a31      	ldr	r2, [pc, #196]	; (8000fe4 <InterpretConfig+0x14c>)
 8000f20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f24:	4413      	add	r3, r2
 8000f26:	f993 3000 	ldrsb.w	r3, [r3]
 8000f2a:	2b3b      	cmp	r3, #59	; 0x3b
 8000f2c:	d147      	bne.n	8000fbe <InterpretConfig+0x126>
				variable_value_indexes[1] = i;
 8000f2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000f32:	607b      	str	r3, [r7, #4]

				strncpy(variable_name, ((char*)rx_buffer + variable_name_indexes[0]), (variable_name_indexes[1] - variable_name_indexes[0]));
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	461a      	mov	r2, r3
 8000f38:	4b2a      	ldr	r3, [pc, #168]	; (8000fe4 <InterpretConfig+0x14c>)
 8000f3a:	18d1      	adds	r1, r2, r3
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	68bb      	ldr	r3, [r7, #8]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	461a      	mov	r2, r3
 8000f44:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f00c f9b2 	bl	800d2b2 <strncpy>
				variable_name[variable_name_indexes[1] + 1] = '\0';
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	3301      	adds	r3, #1
 8000f52:	3398      	adds	r3, #152	; 0x98
 8000f54:	443b      	add	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	f803 2c48 	strb.w	r2, [r3, #-72]
				strncpy(variable_value, ((char*)rx_buffer + variable_value_indexes[0]), (variable_value_indexes[1] - variable_value_indexes[0]));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <InterpretConfig+0x14c>)
 8000f62:	18d1      	adds	r1, r2, r3
 8000f64:	687a      	ldr	r2, [r7, #4]
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	f107 0310 	add.w	r3, r7, #16
 8000f70:	4618      	mov	r0, r3
 8000f72:	f00c f99e 	bl	800d2b2 <strncpy>
				variable_value[variable_value_indexes[1] + 1] = '\0';
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3301      	adds	r3, #1
 8000f7a:	3398      	adds	r3, #152	; 0x98
 8000f7c:	443b      	add	r3, r7
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f803 2c88 	strb.w	r2, [r3, #-136]

				InterpretVariable(variable_name, variable_value);
 8000f84:	f107 0210 	add.w	r2, r7, #16
 8000f88:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 f82c 	bl	8000fec <InterpretVariable>
				memset(variable_name, 0, sizeof(variable_name));
 8000f94:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000f98:	2240      	movs	r2, #64	; 0x40
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f00c f980 	bl	800d2a2 <memset>
				memset(variable_value, 0, sizeof(variable_value));
 8000fa2:	f107 0310 	add.w	r3, r7, #16
 8000fa6:	2240      	movs	r2, #64	; 0x40
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f00c f979 	bl	800d2a2 <memset>
				variable_name_indexes[0] = i + 1;
 8000fb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	60bb      	str	r3, [r7, #8]
				reading_status = 'n';
 8000fb8:	236e      	movs	r3, #110	; 0x6e
 8000fba:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	for(int i = 0; i < USB_RX_BUFFER_SIZE; i++){
 8000fbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8000fc8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000fcc:	2b3f      	cmp	r3, #63	; 0x3f
 8000fce:	dd83      	ble.n	8000ed8 <InterpretConfig+0x40>
 8000fd0:	e000      	b.n	8000fd4 <InterpretConfig+0x13c>
			break;
 8000fd2:	bf00      	nop
			}
		}
	}

	prog_state = CFG_INTERPRETED;
 8000fd4:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <InterpretConfig+0x150>)
 8000fd6:	2202      	movs	r2, #2
 8000fd8:	701a      	strb	r2, [r3, #0]
	return 1;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3798      	adds	r7, #152	; 0x98
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20004494 	.word	0x20004494
 8000fe8:	200044d4 	.word	0x200044d4

08000fec <InterpretVariable>:

int InterpretVariable(char name[CFG_VAR_SIZE], char value[CFG_VAR_SIZE]) {
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6039      	str	r1, [r7, #0]
	if(strcmp(name, "RecLen") == 0) {
 8000ff6:	492b      	ldr	r1, [pc, #172]	; (80010a4 <InterpretVariable+0xb8>)
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff f911 	bl	8000220 <strcmp>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d107      	bne.n	8001014 <InterpretVariable+0x28>
		record_length_ms = (uint16_t)atoi(value);
 8001004:	6838      	ldr	r0, [r7, #0]
 8001006:	f00b ffa5 	bl	800cf54 <atoi>
 800100a:	4603      	mov	r3, r0
 800100c:	b29a      	uxth	r2, r3
 800100e:	4b26      	ldr	r3, [pc, #152]	; (80010a8 <InterpretVariable+0xbc>)
 8001010:	801a      	strh	r2, [r3, #0]
 8001012:	e041      	b.n	8001098 <InterpretVariable+0xac>
	}
	else if(strcmp(name, "RecInt") == 0) {
 8001014:	4925      	ldr	r1, [pc, #148]	; (80010ac <InterpretVariable+0xc0>)
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff f902 	bl	8000220 <strcmp>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d107      	bne.n	8001032 <InterpretVariable+0x46>
		record_interval_us = (uint16_t)atoi(value);
 8001022:	6838      	ldr	r0, [r7, #0]
 8001024:	f00b ff96 	bl	800cf54 <atoi>
 8001028:	4603      	mov	r3, r0
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b20      	ldr	r3, [pc, #128]	; (80010b0 <InterpretVariable+0xc4>)
 800102e:	801a      	strh	r2, [r3, #0]
 8001030:	e032      	b.n	8001098 <InterpretVariable+0xac>
	}
	else if(strcmp(name, "TcType") == 0) {
 8001032:	4920      	ldr	r1, [pc, #128]	; (80010b4 <InterpretVariable+0xc8>)
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff f8f3 	bl	8000220 <strcmp>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d104      	bne.n	800104a <InterpretVariable+0x5e>
		tc_type = value[0];
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	781a      	ldrb	r2, [r3, #0]
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <InterpretVariable+0xcc>)
 8001046:	701a      	strb	r2, [r3, #0]
 8001048:	e026      	b.n	8001098 <InterpretVariable+0xac>
	}
	else if(strcmp(name, "TrgSrc") == 0) {
 800104a:	491c      	ldr	r1, [pc, #112]	; (80010bc <InterpretVariable+0xd0>)
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff f8e7 	bl	8000220 <strcmp>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d11f      	bne.n	8001098 <InterpretVariable+0xac>
		if(strcmp(value, "btn") == 0) {
 8001058:	4919      	ldr	r1, [pc, #100]	; (80010c0 <InterpretVariable+0xd4>)
 800105a:	6838      	ldr	r0, [r7, #0]
 800105c:	f7ff f8e0 	bl	8000220 <strcmp>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d103      	bne.n	800106e <InterpretVariable+0x82>
			trig_source = TRIG_SHORT;
 8001066:	4b17      	ldr	r3, [pc, #92]	; (80010c4 <InterpretVariable+0xd8>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
 800106c:	e014      	b.n	8001098 <InterpretVariable+0xac>
		}
		else if(strcmp(value, "ex1") == 0) {
 800106e:	4916      	ldr	r1, [pc, #88]	; (80010c8 <InterpretVariable+0xdc>)
 8001070:	6838      	ldr	r0, [r7, #0]
 8001072:	f7ff f8d5 	bl	8000220 <strcmp>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d103      	bne.n	8001084 <InterpretVariable+0x98>
			trig_source = TRIG_EXT_1;
 800107c:	4b11      	ldr	r3, [pc, #68]	; (80010c4 <InterpretVariable+0xd8>)
 800107e:	2201      	movs	r2, #1
 8001080:	701a      	strb	r2, [r3, #0]
 8001082:	e009      	b.n	8001098 <InterpretVariable+0xac>
		}
		else if(strcmp(value, "ex2") == 0) {
 8001084:	4911      	ldr	r1, [pc, #68]	; (80010cc <InterpretVariable+0xe0>)
 8001086:	6838      	ldr	r0, [r7, #0]
 8001088:	f7ff f8ca 	bl	8000220 <strcmp>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <InterpretVariable+0xac>
			trig_source = TRIG_EXT_2;
 8001092:	4b0c      	ldr	r3, [pc, #48]	; (80010c4 <InterpretVariable+0xd8>)
 8001094:	2202      	movs	r2, #2
 8001096:	701a      	strb	r2, [r3, #0]
		}
	}
	return 1;
 8001098:	2301      	movs	r3, #1
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	0800df3c 	.word	0x0800df3c
 80010a8:	20000000 	.word	0x20000000
 80010ac:	0800df44 	.word	0x0800df44
 80010b0:	20000002 	.word	0x20000002
 80010b4:	0800df4c 	.word	0x0800df4c
 80010b8:	20000004 	.word	0x20000004
 80010bc:	0800df54 	.word	0x0800df54
 80010c0:	0800df5c 	.word	0x0800df5c
 80010c4:	200044e0 	.word	0x200044e0
 80010c8:	0800df60 	.word	0x0800df60
 80010cc:	0800df64 	.word	0x0800df64

080010d0 <SetupMeasurement>:

int SetupMeasurement(void){
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
	// ADC sync timer
	target_conv_count = (record_length_ms * 1000) / record_interval_us;
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <SetupMeasurement+0x54>)
 80010d6:	881b      	ldrh	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010de:	fb02 f303 	mul.w	r3, r2, r3
 80010e2:	4a11      	ldr	r2, [pc, #68]	; (8001128 <SetupMeasurement+0x58>)
 80010e4:	8812      	ldrh	r2, [r2, #0]
 80010e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80010ea:	4a10      	ldr	r2, [pc, #64]	; (800112c <SetupMeasurement+0x5c>)
 80010ec:	6013      	str	r3, [r2, #0]

	__HAL_TIM_SET_AUTORELOAD(&htim2, record_interval_us - 1);
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <SetupMeasurement+0x58>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	1e5a      	subs	r2, r3, #1
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <SetupMeasurement+0x60>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	62da      	str	r2, [r3, #44]	; 0x2c
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <SetupMeasurement+0x58>)
 80010fc:	881b      	ldrh	r3, [r3, #0]
 80010fe:	3b01      	subs	r3, #1
 8001100:	461a      	mov	r2, r3
 8001102:	4b0b      	ldr	r3, [pc, #44]	; (8001130 <SetupMeasurement+0x60>)
 8001104:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(&htim2, record_interval_us - 1);
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <SetupMeasurement+0x58>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	1e5a      	subs	r2, r3, #1
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <SetupMeasurement+0x60>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	625a      	str	r2, [r3, #36]	; 0x24

	// Calculate and set DAC value

	prog_state = ARMED;
 8001112:	4b08      	ldr	r3, [pc, #32]	; (8001134 <SetupMeasurement+0x64>)
 8001114:	2203      	movs	r2, #3
 8001116:	701a      	strb	r2, [r3, #0]
	return 1;
 8001118:	2301      	movs	r3, #1
}
 800111a:	4618      	mov	r0, r3
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	20000000 	.word	0x20000000
 8001128:	20000002 	.word	0x20000002
 800112c:	200044d8 	.word	0x200044d8
 8001130:	200005c8 	.word	0x200005c8
 8001134:	200044d4 	.word	0x200044d4

08001138 <StartMeasurement>:

int StartMeasurement(void) {
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800113c:	217f      	movs	r1, #127	; 0x7f
 800113e:	4818      	ldr	r0, [pc, #96]	; (80011a0 <StartMeasurement+0x68>)
 8001140:	f002 f9c0 	bl	80034c4 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffers[0], ADC_BUFFER_SIZE);
 8001144:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001148:	4916      	ldr	r1, [pc, #88]	; (80011a4 <StartMeasurement+0x6c>)
 800114a:	4815      	ldr	r0, [pc, #84]	; (80011a0 <StartMeasurement+0x68>)
 800114c:	f001 f9a2 	bl	8002494 <HAL_ADC_Start_DMA>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001150:	217f      	movs	r1, #127	; 0x7f
 8001152:	4815      	ldr	r0, [pc, #84]	; (80011a8 <StartMeasurement+0x70>)
 8001154:	f002 f9b6 	bl	80034c4 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buffers[1], ADC_BUFFER_SIZE);
 8001158:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800115c:	4913      	ldr	r1, [pc, #76]	; (80011ac <StartMeasurement+0x74>)
 800115e:	4812      	ldr	r0, [pc, #72]	; (80011a8 <StartMeasurement+0x70>)
 8001160:	f001 f998 	bl	8002494 <HAL_ADC_Start_DMA>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8001164:	217f      	movs	r1, #127	; 0x7f
 8001166:	4812      	ldr	r0, [pc, #72]	; (80011b0 <StartMeasurement+0x78>)
 8001168:	f002 f9ac 	bl	80034c4 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc_buffers[2], ADC_BUFFER_SIZE);
 800116c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001170:	4910      	ldr	r1, [pc, #64]	; (80011b4 <StartMeasurement+0x7c>)
 8001172:	480f      	ldr	r0, [pc, #60]	; (80011b0 <StartMeasurement+0x78>)
 8001174:	f001 f98e 	bl	8002494 <HAL_ADC_Start_DMA>
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8001178:	217f      	movs	r1, #127	; 0x7f
 800117a:	480f      	ldr	r0, [pc, #60]	; (80011b8 <StartMeasurement+0x80>)
 800117c:	f002 f9a2 	bl	80034c4 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc_buffers[3], ADC_BUFFER_SIZE);
 8001180:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001184:	490d      	ldr	r1, [pc, #52]	; (80011bc <StartMeasurement+0x84>)
 8001186:	480c      	ldr	r0, [pc, #48]	; (80011b8 <StartMeasurement+0x80>)
 8001188:	f001 f984 	bl	8002494 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 800118c:	480c      	ldr	r0, [pc, #48]	; (80011c0 <StartMeasurement+0x88>)
 800118e:	f005 fe73 	bl	8006e78 <HAL_TIM_Base_Start_IT>
	prog_state = MEASURING;
 8001192:	4b0c      	ldr	r3, [pc, #48]	; (80011c4 <StartMeasurement+0x8c>)
 8001194:	2204      	movs	r2, #4
 8001196:	701a      	strb	r2, [r3, #0]

	return 1;
 8001198:	2301      	movs	r3, #1
}
 800119a:	4618      	mov	r0, r3
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000204 	.word	0x20000204
 80011a4:	20000614 	.word	0x20000614
 80011a8:	20000270 	.word	0x20000270
 80011ac:	200015b4 	.word	0x200015b4
 80011b0:	200002dc 	.word	0x200002dc
 80011b4:	20002554 	.word	0x20002554
 80011b8:	20000348 	.word	0x20000348
 80011bc:	200034f4 	.word	0x200034f4
 80011c0:	200005c8 	.word	0x200005c8
 80011c4:	200044d4 	.word	0x200044d4

080011c8 <HAL_ADC_ConvHalfCpltCallback>:

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <HAL_ADC_ConvHalfCpltCallback+0x54>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d103      	bne.n	80011e0 <HAL_ADC_ConvHalfCpltCallback+0x18>
		adc_state[0] = START_FULL;
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 80011da:	2201      	movs	r2, #1
 80011dc:	701a      	strb	r2, [r3, #0]
		adc_state[2] = START_FULL;
	}
	else if(hadc == &hadc4){
		adc_state[3] = START_FULL;
	}
}
 80011de:	e016      	b.n	800120e <HAL_ADC_ConvHalfCpltCallback+0x46>
	else if(hadc == &hadc2){
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a10      	ldr	r2, [pc, #64]	; (8001224 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d103      	bne.n	80011f0 <HAL_ADC_ConvHalfCpltCallback+0x28>
		adc_state[1] = START_FULL;
 80011e8:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	705a      	strb	r2, [r3, #1]
}
 80011ee:	e00e      	b.n	800120e <HAL_ADC_ConvHalfCpltCallback+0x46>
	else if(hadc == &hadc3){
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d103      	bne.n	8001200 <HAL_ADC_ConvHalfCpltCallback+0x38>
		adc_state[2] = START_FULL;
 80011f8:	4b09      	ldr	r3, [pc, #36]	; (8001220 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	709a      	strb	r2, [r3, #2]
}
 80011fe:	e006      	b.n	800120e <HAL_ADC_ConvHalfCpltCallback+0x46>
	else if(hadc == &hadc4){
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d102      	bne.n	800120e <HAL_ADC_ConvHalfCpltCallback+0x46>
		adc_state[3] = START_FULL;
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 800120a:	2201      	movs	r2, #1
 800120c:	70da      	strb	r2, [r3, #3]
}
 800120e:	bf00      	nop
 8001210:	370c      	adds	r7, #12
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
 800121a:	bf00      	nop
 800121c:	20000204 	.word	0x20000204
 8001220:	200044e4 	.word	0x200044e4
 8001224:	20000270 	.word	0x20000270
 8001228:	200002dc 	.word	0x200002dc
 800122c:	20000348 	.word	0x20000348

08001230 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	printf("Asdf");
 8001238:	4812      	ldr	r0, [pc, #72]	; (8001284 <HAL_ADC_ConvCpltCallback+0x54>)
 800123a:	f00b ffdd 	bl	800d1f8 <iprintf>
	if (hadc == &hadc1){
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a11      	ldr	r2, [pc, #68]	; (8001288 <HAL_ADC_ConvCpltCallback+0x58>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d103      	bne.n	800124e <HAL_ADC_ConvCpltCallback+0x1e>
		adc_state[0] = END_FULL;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001248:	2202      	movs	r2, #2
 800124a:	701a      	strb	r2, [r3, #0]
		adc_state[2] = END_FULL;
	}
	else if(hadc == &hadc4){
		adc_state[3] = END_FULL;
	}
}
 800124c:	e016      	b.n	800127c <HAL_ADC_ConvCpltCallback+0x4c>
	else if(hadc == &hadc2){
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a0f      	ldr	r2, [pc, #60]	; (8001290 <HAL_ADC_ConvCpltCallback+0x60>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d103      	bne.n	800125e <HAL_ADC_ConvCpltCallback+0x2e>
		adc_state[1] = END_FULL;
 8001256:	4b0d      	ldr	r3, [pc, #52]	; (800128c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001258:	2202      	movs	r2, #2
 800125a:	705a      	strb	r2, [r3, #1]
}
 800125c:	e00e      	b.n	800127c <HAL_ADC_ConvCpltCallback+0x4c>
	else if(hadc == &hadc3){
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	4a0c      	ldr	r2, [pc, #48]	; (8001294 <HAL_ADC_ConvCpltCallback+0x64>)
 8001262:	4293      	cmp	r3, r2
 8001264:	d103      	bne.n	800126e <HAL_ADC_ConvCpltCallback+0x3e>
		adc_state[2] = END_FULL;
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001268:	2202      	movs	r2, #2
 800126a:	709a      	strb	r2, [r3, #2]
}
 800126c:	e006      	b.n	800127c <HAL_ADC_ConvCpltCallback+0x4c>
	else if(hadc == &hadc4){
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a09      	ldr	r2, [pc, #36]	; (8001298 <HAL_ADC_ConvCpltCallback+0x68>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d102      	bne.n	800127c <HAL_ADC_ConvCpltCallback+0x4c>
		adc_state[3] = END_FULL;
 8001276:	4b05      	ldr	r3, [pc, #20]	; (800128c <HAL_ADC_ConvCpltCallback+0x5c>)
 8001278:	2202      	movs	r2, #2
 800127a:	70da      	strb	r2, [r3, #3]
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	0800df68 	.word	0x0800df68
 8001288:	20000204 	.word	0x20000204
 800128c:	200044e4 	.word	0x200044e4
 8001290:	20000270 	.word	0x20000270
 8001294:	200002dc 	.word	0x200002dc
 8001298:	20000348 	.word	0x20000348

0800129c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012a0:	b672      	cpsid	i
}
 80012a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012a4:	e7fe      	b.n	80012a4 <Error_Handler+0x8>
	...

080012a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ae:	4b13      	ldr	r3, [pc, #76]	; (80012fc <HAL_MspInit+0x54>)
 80012b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b2:	4a12      	ldr	r2, [pc, #72]	; (80012fc <HAL_MspInit+0x54>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6613      	str	r3, [r2, #96]	; 0x60
 80012ba:	4b10      	ldr	r3, [pc, #64]	; (80012fc <HAL_MspInit+0x54>)
 80012bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	4b0d      	ldr	r3, [pc, #52]	; (80012fc <HAL_MspInit+0x54>)
 80012c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ca:	4a0c      	ldr	r2, [pc, #48]	; (80012fc <HAL_MspInit+0x54>)
 80012cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d0:	6593      	str	r3, [r2, #88]	; 0x58
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_MspInit+0x54>)
 80012d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 80012de:	2020      	movs	r0, #32
 80012e0:	f000 fc64 	bl	8001bac <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80012e4:	f000 fc8a 	bl	8001bfc <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80012e8:	2000      	movs	r0, #0
 80012ea:	f000 fc73 	bl	8001bd4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012ee:	f004 fddf 	bl	8005eb0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000

08001300 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b0a4      	sub	sp, #144	; 0x90
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001318:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800131c:	2254      	movs	r2, #84	; 0x54
 800131e:	2100      	movs	r1, #0
 8001320:	4618      	mov	r0, r3
 8001322:	f00b ffbe 	bl	800d2a2 <memset>
  if(hadc->Instance==ADC1)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800132e:	d16b      	bne.n	8001408 <HAL_ADC_MspInit+0x108>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001330:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8001336:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800133a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800133c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001340:	4618      	mov	r0, r3
 8001342:	f005 faf3 	bl	800692c <HAL_RCCEx_PeriphCLKConfig>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800134c:	f7ff ffa6 	bl	800129c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001350:	4b9e      	ldr	r3, [pc, #632]	; (80015cc <HAL_ADC_MspInit+0x2cc>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	4a9d      	ldr	r2, [pc, #628]	; (80015cc <HAL_ADC_MspInit+0x2cc>)
 8001358:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800135a:	4b9c      	ldr	r3, [pc, #624]	; (80015cc <HAL_ADC_MspInit+0x2cc>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d10b      	bne.n	800137a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001362:	4b9b      	ldr	r3, [pc, #620]	; (80015d0 <HAL_ADC_MspInit+0x2d0>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	4a9a      	ldr	r2, [pc, #616]	; (80015d0 <HAL_ADC_MspInit+0x2d0>)
 8001368:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800136c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136e:	4b98      	ldr	r3, [pc, #608]	; (80015d0 <HAL_ADC_MspInit+0x2d0>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
 8001378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b95      	ldr	r3, [pc, #596]	; (80015d0 <HAL_ADC_MspInit+0x2d0>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	4a94      	ldr	r2, [pc, #592]	; (80015d0 <HAL_ADC_MspInit+0x2d0>)
 8001380:	f043 0301 	orr.w	r3, r3, #1
 8001384:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001386:	4b92      	ldr	r3, [pc, #584]	; (80015d0 <HAL_ADC_MspInit+0x2d0>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	623b      	str	r3, [r7, #32]
 8001390:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001392:	2301      	movs	r3, #1
 8001394:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001396:	2303      	movs	r3, #3
 8001398:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013a6:	4619      	mov	r1, r3
 80013a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ac:	f002 fdd0 	bl	8003f50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel5;
 80013b0:	4b88      	ldr	r3, [pc, #544]	; (80015d4 <HAL_ADC_MspInit+0x2d4>)
 80013b2:	4a89      	ldr	r2, [pc, #548]	; (80015d8 <HAL_ADC_MspInit+0x2d8>)
 80013b4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80013b6:	4b87      	ldr	r3, [pc, #540]	; (80015d4 <HAL_ADC_MspInit+0x2d4>)
 80013b8:	2205      	movs	r2, #5
 80013ba:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013bc:	4b85      	ldr	r3, [pc, #532]	; (80015d4 <HAL_ADC_MspInit+0x2d4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c2:	4b84      	ldr	r3, [pc, #528]	; (80015d4 <HAL_ADC_MspInit+0x2d4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013c8:	4b82      	ldr	r3, [pc, #520]	; (80015d4 <HAL_ADC_MspInit+0x2d4>)
 80013ca:	2280      	movs	r2, #128	; 0x80
 80013cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013ce:	4b81      	ldr	r3, [pc, #516]	; (80015d4 <HAL_ADC_MspInit+0x2d4>)
 80013d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013d6:	4b7f      	ldr	r3, [pc, #508]	; (80015d4 <HAL_ADC_MspInit+0x2d4>)
 80013d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80013de:	4b7d      	ldr	r3, [pc, #500]	; (80015d4 <HAL_ADC_MspInit+0x2d4>)
 80013e0:	2220      	movs	r2, #32
 80013e2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80013e4:	4b7b      	ldr	r3, [pc, #492]	; (80015d4 <HAL_ADC_MspInit+0x2d4>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80013ea:	487a      	ldr	r0, [pc, #488]	; (80015d4 <HAL_ADC_MspInit+0x2d4>)
 80013ec:	f002 fae4 	bl	80039b8 <HAL_DMA_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80013f6:	f7ff ff51 	bl	800129c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a75      	ldr	r2, [pc, #468]	; (80015d4 <HAL_ADC_MspInit+0x2d4>)
 80013fe:	655a      	str	r2, [r3, #84]	; 0x54
 8001400:	4a74      	ldr	r2, [pc, #464]	; (80015d4 <HAL_ADC_MspInit+0x2d4>)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8001406:	e169      	b.n	80016dc <HAL_ADC_MspInit+0x3dc>
  else if(hadc->Instance==ADC2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a73      	ldr	r2, [pc, #460]	; (80015dc <HAL_ADC_MspInit+0x2dc>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d16b      	bne.n	80014ea <HAL_ADC_MspInit+0x1ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8001418:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800141c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800141e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001422:	4618      	mov	r0, r3
 8001424:	f005 fa82 	bl	800692c <HAL_RCCEx_PeriphCLKConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_ADC_MspInit+0x132>
      Error_Handler();
 800142e:	f7ff ff35 	bl	800129c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001432:	4b66      	ldr	r3, [pc, #408]	; (80015cc <HAL_ADC_MspInit+0x2cc>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	3301      	adds	r3, #1
 8001438:	4a64      	ldr	r2, [pc, #400]	; (80015cc <HAL_ADC_MspInit+0x2cc>)
 800143a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800143c:	4b63      	ldr	r3, [pc, #396]	; (80015cc <HAL_ADC_MspInit+0x2cc>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d10b      	bne.n	800145c <HAL_ADC_MspInit+0x15c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001444:	4b62      	ldr	r3, [pc, #392]	; (80015d0 <HAL_ADC_MspInit+0x2d0>)
 8001446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001448:	4a61      	ldr	r2, [pc, #388]	; (80015d0 <HAL_ADC_MspInit+0x2d0>)
 800144a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800144e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001450:	4b5f      	ldr	r3, [pc, #380]	; (80015d0 <HAL_ADC_MspInit+0x2d0>)
 8001452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001454:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001458:	61fb      	str	r3, [r7, #28]
 800145a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800145c:	4b5c      	ldr	r3, [pc, #368]	; (80015d0 <HAL_ADC_MspInit+0x2d0>)
 800145e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001460:	4a5b      	ldr	r2, [pc, #364]	; (80015d0 <HAL_ADC_MspInit+0x2d0>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001468:	4b59      	ldr	r3, [pc, #356]	; (80015d0 <HAL_ADC_MspInit+0x2d0>)
 800146a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146c:	f003 0301 	and.w	r3, r3, #1
 8001470:	61bb      	str	r3, [r7, #24]
 8001472:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001474:	2340      	movs	r3, #64	; 0x40
 8001476:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001478:	2303      	movs	r3, #3
 800147a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001488:	4619      	mov	r1, r3
 800148a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800148e:	f002 fd5f 	bl	8003f50 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8001492:	4b53      	ldr	r3, [pc, #332]	; (80015e0 <HAL_ADC_MspInit+0x2e0>)
 8001494:	4a53      	ldr	r2, [pc, #332]	; (80015e4 <HAL_ADC_MspInit+0x2e4>)
 8001496:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001498:	4b51      	ldr	r3, [pc, #324]	; (80015e0 <HAL_ADC_MspInit+0x2e0>)
 800149a:	2224      	movs	r2, #36	; 0x24
 800149c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800149e:	4b50      	ldr	r3, [pc, #320]	; (80015e0 <HAL_ADC_MspInit+0x2e0>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a4:	4b4e      	ldr	r3, [pc, #312]	; (80015e0 <HAL_ADC_MspInit+0x2e0>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80014aa:	4b4d      	ldr	r3, [pc, #308]	; (80015e0 <HAL_ADC_MspInit+0x2e0>)
 80014ac:	2280      	movs	r2, #128	; 0x80
 80014ae:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014b0:	4b4b      	ldr	r3, [pc, #300]	; (80015e0 <HAL_ADC_MspInit+0x2e0>)
 80014b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014b6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014b8:	4b49      	ldr	r3, [pc, #292]	; (80015e0 <HAL_ADC_MspInit+0x2e0>)
 80014ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014be:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80014c0:	4b47      	ldr	r3, [pc, #284]	; (80015e0 <HAL_ADC_MspInit+0x2e0>)
 80014c2:	2220      	movs	r2, #32
 80014c4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80014c6:	4b46      	ldr	r3, [pc, #280]	; (80015e0 <HAL_ADC_MspInit+0x2e0>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80014cc:	4844      	ldr	r0, [pc, #272]	; (80015e0 <HAL_ADC_MspInit+0x2e0>)
 80014ce:	f002 fa73 	bl	80039b8 <HAL_DMA_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <HAL_ADC_MspInit+0x1dc>
      Error_Handler();
 80014d8:	f7ff fee0 	bl	800129c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a40      	ldr	r2, [pc, #256]	; (80015e0 <HAL_ADC_MspInit+0x2e0>)
 80014e0:	655a      	str	r2, [r3, #84]	; 0x54
 80014e2:	4a3f      	ldr	r2, [pc, #252]	; (80015e0 <HAL_ADC_MspInit+0x2e0>)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6293      	str	r3, [r2, #40]	; 0x28
}
 80014e8:	e0f8      	b.n	80016dc <HAL_ADC_MspInit+0x3dc>
  else if(hadc->Instance==ADC3)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a3e      	ldr	r2, [pc, #248]	; (80015e8 <HAL_ADC_MspInit+0x2e8>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	f040 8083 	bne.w	80015fc <HAL_ADC_MspInit+0x2fc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80014f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80014fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001500:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001506:	4618      	mov	r0, r3
 8001508:	f005 fa10 	bl	800692c <HAL_RCCEx_PeriphCLKConfig>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_ADC_MspInit+0x216>
      Error_Handler();
 8001512:	f7ff fec3 	bl	800129c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001516:	4b35      	ldr	r3, [pc, #212]	; (80015ec <HAL_ADC_MspInit+0x2ec>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	3301      	adds	r3, #1
 800151c:	4a33      	ldr	r2, [pc, #204]	; (80015ec <HAL_ADC_MspInit+0x2ec>)
 800151e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001520:	4b32      	ldr	r3, [pc, #200]	; (80015ec <HAL_ADC_MspInit+0x2ec>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d10b      	bne.n	8001540 <HAL_ADC_MspInit+0x240>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001528:	4b29      	ldr	r3, [pc, #164]	; (80015d0 <HAL_ADC_MspInit+0x2d0>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152c:	4a28      	ldr	r2, [pc, #160]	; (80015d0 <HAL_ADC_MspInit+0x2d0>)
 800152e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001532:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <HAL_ADC_MspInit+0x2d0>)
 8001536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001540:	4b23      	ldr	r3, [pc, #140]	; (80015d0 <HAL_ADC_MspInit+0x2d0>)
 8001542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001544:	4a22      	ldr	r2, [pc, #136]	; (80015d0 <HAL_ADC_MspInit+0x2d0>)
 8001546:	f043 0302 	orr.w	r3, r3, #2
 800154a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154c:	4b20      	ldr	r3, [pc, #128]	; (80015d0 <HAL_ADC_MspInit+0x2d0>)
 800154e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	613b      	str	r3, [r7, #16]
 8001556:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001558:	2301      	movs	r3, #1
 800155a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800155c:	2303      	movs	r3, #3
 800155e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800156c:	4619      	mov	r1, r3
 800156e:	4820      	ldr	r0, [pc, #128]	; (80015f0 <HAL_ADC_MspInit+0x2f0>)
 8001570:	f002 fcee 	bl	8003f50 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8001574:	4b1f      	ldr	r3, [pc, #124]	; (80015f4 <HAL_ADC_MspInit+0x2f4>)
 8001576:	4a20      	ldr	r2, [pc, #128]	; (80015f8 <HAL_ADC_MspInit+0x2f8>)
 8001578:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 800157a:	4b1e      	ldr	r3, [pc, #120]	; (80015f4 <HAL_ADC_MspInit+0x2f4>)
 800157c:	2225      	movs	r2, #37	; 0x25
 800157e:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001580:	4b1c      	ldr	r3, [pc, #112]	; (80015f4 <HAL_ADC_MspInit+0x2f4>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001586:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <HAL_ADC_MspInit+0x2f4>)
 8001588:	2200      	movs	r2, #0
 800158a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <HAL_ADC_MspInit+0x2f4>)
 800158e:	2280      	movs	r2, #128	; 0x80
 8001590:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001592:	4b18      	ldr	r3, [pc, #96]	; (80015f4 <HAL_ADC_MspInit+0x2f4>)
 8001594:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001598:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800159a:	4b16      	ldr	r3, [pc, #88]	; (80015f4 <HAL_ADC_MspInit+0x2f4>)
 800159c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015a0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80015a2:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <HAL_ADC_MspInit+0x2f4>)
 80015a4:	2220      	movs	r2, #32
 80015a6:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <HAL_ADC_MspInit+0x2f4>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80015ae:	4811      	ldr	r0, [pc, #68]	; (80015f4 <HAL_ADC_MspInit+0x2f4>)
 80015b0:	f002 fa02 	bl	80039b8 <HAL_DMA_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <HAL_ADC_MspInit+0x2be>
      Error_Handler();
 80015ba:	f7ff fe6f 	bl	800129c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a0c      	ldr	r2, [pc, #48]	; (80015f4 <HAL_ADC_MspInit+0x2f4>)
 80015c2:	655a      	str	r2, [r3, #84]	; 0x54
 80015c4:	4a0b      	ldr	r2, [pc, #44]	; (80015f4 <HAL_ADC_MspInit+0x2f4>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80015ca:	e087      	b.n	80016dc <HAL_ADC_MspInit+0x3dc>
 80015cc:	200044e8 	.word	0x200044e8
 80015d0:	40021000 	.word	0x40021000
 80015d4:	200003b4 	.word	0x200003b4
 80015d8:	40020058 	.word	0x40020058
 80015dc:	50000100 	.word	0x50000100
 80015e0:	20000414 	.word	0x20000414
 80015e4:	4002001c 	.word	0x4002001c
 80015e8:	50000400 	.word	0x50000400
 80015ec:	200044ec 	.word	0x200044ec
 80015f0:	48000400 	.word	0x48000400
 80015f4:	20000474 	.word	0x20000474
 80015f8:	40020030 	.word	0x40020030
  else if(hadc->Instance==ADC4)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a38      	ldr	r2, [pc, #224]	; (80016e4 <HAL_ADC_MspInit+0x3e4>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d16a      	bne.n	80016dc <HAL_ADC_MspInit+0x3dc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8001606:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800160a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 800160c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001610:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001612:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001616:	4618      	mov	r0, r3
 8001618:	f005 f988 	bl	800692c <HAL_RCCEx_PeriphCLKConfig>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <HAL_ADC_MspInit+0x326>
      Error_Handler();
 8001622:	f7ff fe3b 	bl	800129c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8001626:	4b30      	ldr	r3, [pc, #192]	; (80016e8 <HAL_ADC_MspInit+0x3e8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	3301      	adds	r3, #1
 800162c:	4a2e      	ldr	r2, [pc, #184]	; (80016e8 <HAL_ADC_MspInit+0x3e8>)
 800162e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8001630:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <HAL_ADC_MspInit+0x3e8>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d10b      	bne.n	8001650 <HAL_ADC_MspInit+0x350>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001638:	4b2c      	ldr	r3, [pc, #176]	; (80016ec <HAL_ADC_MspInit+0x3ec>)
 800163a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163c:	4a2b      	ldr	r2, [pc, #172]	; (80016ec <HAL_ADC_MspInit+0x3ec>)
 800163e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001642:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001644:	4b29      	ldr	r3, [pc, #164]	; (80016ec <HAL_ADC_MspInit+0x3ec>)
 8001646:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164c:	60fb      	str	r3, [r7, #12]
 800164e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001650:	4b26      	ldr	r3, [pc, #152]	; (80016ec <HAL_ADC_MspInit+0x3ec>)
 8001652:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001654:	4a25      	ldr	r2, [pc, #148]	; (80016ec <HAL_ADC_MspInit+0x3ec>)
 8001656:	f043 0302 	orr.w	r3, r3, #2
 800165a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165c:	4b23      	ldr	r3, [pc, #140]	; (80016ec <HAL_ADC_MspInit+0x3ec>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001668:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800166c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800166e:	2303      	movs	r3, #3
 8001670:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800167e:	4619      	mov	r1, r3
 8001680:	481b      	ldr	r0, [pc, #108]	; (80016f0 <HAL_ADC_MspInit+0x3f0>)
 8001682:	f002 fc65 	bl	8003f50 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8001686:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_ADC_MspInit+0x3f4>)
 8001688:	4a1b      	ldr	r2, [pc, #108]	; (80016f8 <HAL_ADC_MspInit+0x3f8>)
 800168a:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 800168c:	4b19      	ldr	r3, [pc, #100]	; (80016f4 <HAL_ADC_MspInit+0x3f4>)
 800168e:	2226      	movs	r2, #38	; 0x26
 8001690:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001692:	4b18      	ldr	r3, [pc, #96]	; (80016f4 <HAL_ADC_MspInit+0x3f4>)
 8001694:	2200      	movs	r2, #0
 8001696:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001698:	4b16      	ldr	r3, [pc, #88]	; (80016f4 <HAL_ADC_MspInit+0x3f4>)
 800169a:	2200      	movs	r2, #0
 800169c:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_ADC_MspInit+0x3f4>)
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <HAL_ADC_MspInit+0x3f4>)
 80016a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016aa:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016ac:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <HAL_ADC_MspInit+0x3f4>)
 80016ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016b2:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80016b4:	4b0f      	ldr	r3, [pc, #60]	; (80016f4 <HAL_ADC_MspInit+0x3f4>)
 80016b6:	2220      	movs	r2, #32
 80016b8:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80016ba:	4b0e      	ldr	r3, [pc, #56]	; (80016f4 <HAL_ADC_MspInit+0x3f4>)
 80016bc:	2200      	movs	r2, #0
 80016be:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80016c0:	480c      	ldr	r0, [pc, #48]	; (80016f4 <HAL_ADC_MspInit+0x3f4>)
 80016c2:	f002 f979 	bl	80039b8 <HAL_DMA_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <HAL_ADC_MspInit+0x3d0>
      Error_Handler();
 80016cc:	f7ff fde6 	bl	800129c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <HAL_ADC_MspInit+0x3f4>)
 80016d4:	655a      	str	r2, [r3, #84]	; 0x54
 80016d6:	4a07      	ldr	r2, [pc, #28]	; (80016f4 <HAL_ADC_MspInit+0x3f4>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6293      	str	r3, [r2, #40]	; 0x28
}
 80016dc:	bf00      	nop
 80016de:	3790      	adds	r7, #144	; 0x90
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	50000500 	.word	0x50000500
 80016e8:	200044ec 	.word	0x200044ec
 80016ec:	40021000 	.word	0x40021000
 80016f0:	48000400 	.word	0x48000400
 80016f4:	200004d4 	.word	0x200004d4
 80016f8:	40020044 	.word	0x40020044

080016fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b09e      	sub	sp, #120	; 0x78
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	2254      	movs	r2, #84	; 0x54
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f00b fdc0 	bl	800d2a2 <memset>
  if(huart->Instance==LPUART1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a1f      	ldr	r2, [pc, #124]	; (80017a4 <HAL_UART_MspInit+0xa8>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d136      	bne.n	800179a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800172c:	2320      	movs	r3, #32
 800172e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001730:	2300      	movs	r3, #0
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001734:	f107 0310 	add.w	r3, r7, #16
 8001738:	4618      	mov	r0, r3
 800173a:	f005 f8f7 	bl	800692c <HAL_RCCEx_PeriphCLKConfig>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001744:	f7ff fdaa 	bl	800129c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <HAL_UART_MspInit+0xac>)
 800174a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174c:	4a16      	ldr	r2, [pc, #88]	; (80017a8 <HAL_UART_MspInit+0xac>)
 800174e:	f043 0301 	orr.w	r3, r3, #1
 8001752:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_UART_MspInit+0xac>)
 8001756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	60fb      	str	r3, [r7, #12]
 800175e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_UART_MspInit+0xac>)
 8001762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001764:	4a10      	ldr	r2, [pc, #64]	; (80017a8 <HAL_UART_MspInit+0xac>)
 8001766:	f043 0301 	orr.w	r3, r3, #1
 800176a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <HAL_UART_MspInit+0xac>)
 800176e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8001778:	230c      	movs	r3, #12
 800177a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001784:	2300      	movs	r3, #0
 8001786:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001788:	230c      	movs	r3, #12
 800178a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001790:	4619      	mov	r1, r3
 8001792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001796:	f002 fbdb 	bl	8003f50 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800179a:	bf00      	nop
 800179c:	3778      	adds	r7, #120	; 0x78
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40008000 	.word	0x40008000
 80017a8:	40021000 	.word	0x40021000

080017ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017bc:	d113      	bne.n	80017e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017be:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <HAL_TIM_Base_MspInit+0x44>)
 80017c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <HAL_TIM_Base_MspInit+0x44>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6593      	str	r3, [r2, #88]	; 0x58
 80017ca:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <HAL_TIM_Base_MspInit+0x44>)
 80017cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017d6:	2200      	movs	r2, #0
 80017d8:	2100      	movs	r1, #0
 80017da:	201c      	movs	r0, #28
 80017dc:	f002 f8b7 	bl	800394e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017e0:	201c      	movs	r0, #28
 80017e2:	f002 f8ce 	bl	8003982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80017e6:	bf00      	nop
 80017e8:	3710      	adds	r7, #16
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	40021000 	.word	0x40021000

080017f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017f8:	e7fe      	b.n	80017f8 <NMI_Handler+0x4>

080017fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017fa:	b480      	push	{r7}
 80017fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fe:	e7fe      	b.n	80017fe <HardFault_Handler+0x4>

08001800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <MemManage_Handler+0x4>

08001806 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <BusFault_Handler+0x4>

0800180c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <UsageFault_Handler+0x4>

08001812 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182e:	b480      	push	{r7}
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001840:	f000 f996 	bl	8001b70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	bd80      	pop	{r7, pc}

08001848 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800184c:	4802      	ldr	r0, [pc, #8]	; (8001858 <DMA1_Channel2_IRQHandler+0x10>)
 800184e:	f002 fa2f 	bl	8003cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	20000414 	.word	0x20000414

0800185c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001860:	4802      	ldr	r0, [pc, #8]	; (800186c <DMA1_Channel3_IRQHandler+0x10>)
 8001862:	f002 fa25 	bl	8003cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000474 	.word	0x20000474

08001870 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8001874:	4802      	ldr	r0, [pc, #8]	; (8001880 <DMA1_Channel4_IRQHandler+0x10>)
 8001876:	f002 fa1b 	bl	8003cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800187a:	bf00      	nop
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200004d4 	.word	0x200004d4

08001884 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001888:	4802      	ldr	r0, [pc, #8]	; (8001894 <DMA1_Channel5_IRQHandler+0x10>)
 800188a:	f002 fa11 	bl	8003cb0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	200003b4 	.word	0x200003b4

08001898 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <USB_HP_IRQHandler+0x10>)
 800189e:	f002 fe1e 	bl	80044de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200059cc 	.word	0x200059cc

080018ac <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80018b0:	4802      	ldr	r0, [pc, #8]	; (80018bc <USB_LP_IRQHandler+0x10>)
 80018b2:	f002 fe14 	bl	80044de <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80018b6:	bf00      	nop
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200059cc 	.word	0x200059cc

080018c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018c4:	4809      	ldr	r0, [pc, #36]	; (80018ec <TIM2_IRQHandler+0x2c>)
 80018c6:	f005 fb7e 	bl	8006fc6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  conv_count++;
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <TIM2_IRQHandler+0x30>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	3301      	adds	r3, #1
 80018d0:	4a07      	ldr	r2, [pc, #28]	; (80018f0 <TIM2_IRQHandler+0x30>)
 80018d2:	6013      	str	r3, [r2, #0]
  if(conv_count > target_conv_count){
 80018d4:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <TIM2_IRQHandler+0x30>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <TIM2_IRQHandler+0x34>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	429a      	cmp	r2, r3
 80018de:	dd02      	ble.n	80018e6 <TIM2_IRQHandler+0x26>
	  prog_state = DONE;
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <TIM2_IRQHandler+0x38>)
 80018e2:	2205      	movs	r2, #5
 80018e4:	701a      	strb	r2, [r3, #0]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200005c8 	.word	0x200005c8
 80018f0:	200044dc 	.word	0x200044dc
 80018f4:	200044d8 	.word	0x200044d8
 80018f8:	200044d4 	.word	0x200044d4

080018fc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001900:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001904:	f002 fcd8 	bl	80042b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001908:	bf00      	nop
 800190a:	bd80      	pop	{r7, pc}

0800190c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b086      	sub	sp, #24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e00a      	b.n	8001934 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800191e:	f3af 8000 	nop.w
 8001922:	4601      	mov	r1, r0
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	1c5a      	adds	r2, r3, #1
 8001928:	60ba      	str	r2, [r7, #8]
 800192a:	b2ca      	uxtb	r2, r1
 800192c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3301      	adds	r3, #1
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697a      	ldr	r2, [r7, #20]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	429a      	cmp	r2, r3
 800193a:	dbf0      	blt.n	800191e <_read+0x12>
  }

  return len;
 800193c:	687b      	ldr	r3, [r7, #4]
}
 800193e:	4618      	mov	r0, r3
 8001940:	3718      	adds	r7, #24
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}

08001946 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001946:	b580      	push	{r7, lr}
 8001948:	b086      	sub	sp, #24
 800194a:	af00      	add	r7, sp, #0
 800194c:	60f8      	str	r0, [r7, #12]
 800194e:	60b9      	str	r1, [r7, #8]
 8001950:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e009      	b.n	800196c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	1c5a      	adds	r2, r3, #1
 800195c:	60ba      	str	r2, [r7, #8]
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	4618      	mov	r0, r3
 8001962:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3301      	adds	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	429a      	cmp	r2, r3
 8001972:	dbf1      	blt.n	8001958 <_write+0x12>
  }
  return len;
 8001974:	687b      	ldr	r3, [r7, #4]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}

0800197e <_close>:

int _close(int file)
{
 800197e:	b480      	push	{r7}
 8001980:	b083      	sub	sp, #12
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001986:	f04f 33ff 	mov.w	r3, #4294967295
}
 800198a:	4618      	mov	r0, r3
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001996:	b480      	push	{r7}
 8001998:	b083      	sub	sp, #12
 800199a:	af00      	add	r7, sp, #0
 800199c:	6078      	str	r0, [r7, #4]
 800199e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019a6:	605a      	str	r2, [r3, #4]
  return 0;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <_isatty>:

int _isatty(int file)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b083      	sub	sp, #12
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019be:	2301      	movs	r3, #1
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr

080019cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b086      	sub	sp, #24
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f0:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <_sbrk+0x5c>)
 80019f2:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <_sbrk+0x60>)
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019fc:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <_sbrk+0x64>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d102      	bne.n	8001a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a04:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <_sbrk+0x64>)
 8001a06:	4a12      	ldr	r2, [pc, #72]	; (8001a50 <_sbrk+0x68>)
 8001a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a0a:	4b10      	ldr	r3, [pc, #64]	; (8001a4c <_sbrk+0x64>)
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4413      	add	r3, r2
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d207      	bcs.n	8001a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a18:	f00b fca4 	bl	800d364 <__errno>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	220c      	movs	r2, #12
 8001a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a22:	f04f 33ff 	mov.w	r3, #4294967295
 8001a26:	e009      	b.n	8001a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <_sbrk+0x64>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a2e:	4b07      	ldr	r3, [pc, #28]	; (8001a4c <_sbrk+0x64>)
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4413      	add	r3, r2
 8001a36:	4a05      	ldr	r2, [pc, #20]	; (8001a4c <_sbrk+0x64>)
 8001a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a3a:	68fb      	ldr	r3, [r7, #12]
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3718      	adds	r7, #24
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	20020000 	.word	0x20020000
 8001a48:	00001000 	.word	0x00001000
 8001a4c:	200044f0 	.word	0x200044f0
 8001a50:	20006018 	.word	0x20006018

08001a54 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <SystemInit+0x20>)
 8001a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <SystemInit+0x20>)
 8001a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a78:	480d      	ldr	r0, [pc, #52]	; (8001ab0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a7a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a7c:	f7ff ffea 	bl	8001a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a80:	480c      	ldr	r0, [pc, #48]	; (8001ab4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a82:	490d      	ldr	r1, [pc, #52]	; (8001ab8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a84:	4a0d      	ldr	r2, [pc, #52]	; (8001abc <LoopForever+0xe>)
  movs r3, #0
 8001a86:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a88:	e002      	b.n	8001a90 <LoopCopyDataInit>

08001a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a8e:	3304      	adds	r3, #4

08001a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a94:	d3f9      	bcc.n	8001a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a96:	4a0a      	ldr	r2, [pc, #40]	; (8001ac0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a98:	4c0a      	ldr	r4, [pc, #40]	; (8001ac4 <LoopForever+0x16>)
  movs r3, #0
 8001a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a9c:	e001      	b.n	8001aa2 <LoopFillZerobss>

08001a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa0:	3204      	adds	r2, #4

08001aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aa4:	d3fb      	bcc.n	8001a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aa6:	f00b fc63 	bl	800d370 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aaa:	f7fe fd97 	bl	80005dc <main>

08001aae <LoopForever>:

LoopForever:
    b LoopForever
 8001aae:	e7fe      	b.n	8001aae <LoopForever>
  ldr   r0, =_estack
 8001ab0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ab8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001abc:	0800e130 	.word	0x0800e130
  ldr r2, =_sbss
 8001ac0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001ac4:	20006014 	.word	0x20006014

08001ac8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ac8:	e7fe      	b.n	8001ac8 <ADC1_2_IRQHandler>

08001aca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aca:	b580      	push	{r7, lr}
 8001acc:	b082      	sub	sp, #8
 8001ace:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ad4:	2003      	movs	r0, #3
 8001ad6:	f001 ff2f 	bl	8003938 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ada:	2000      	movs	r0, #0
 8001adc:	f000 f80e 	bl	8001afc <HAL_InitTick>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d002      	beq.n	8001aec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	71fb      	strb	r3, [r7, #7]
 8001aea:	e001      	b.n	8001af0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001aec:	f7ff fbdc 	bl	80012a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001af0:	79fb      	ldrb	r3, [r7, #7]

}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001b08:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <HAL_InitTick+0x68>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d022      	beq.n	8001b56 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001b10:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <HAL_InitTick+0x6c>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <HAL_InitTick+0x68>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001b1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b24:	4618      	mov	r0, r3
 8001b26:	f001 ff3a 	bl	800399e <HAL_SYSTICK_Config>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d10f      	bne.n	8001b50 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b0f      	cmp	r3, #15
 8001b34:	d809      	bhi.n	8001b4a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b36:	2200      	movs	r2, #0
 8001b38:	6879      	ldr	r1, [r7, #4]
 8001b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8001b3e:	f001 ff06 	bl	800394e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b42:	4a0a      	ldr	r2, [pc, #40]	; (8001b6c <HAL_InitTick+0x70>)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	e007      	b.n	8001b5a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	73fb      	strb	r3, [r7, #15]
 8001b4e:	e004      	b.n	8001b5a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	e001      	b.n	8001b5a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3710      	adds	r7, #16
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000010 	.word	0x20000010
 8001b68:	20000008 	.word	0x20000008
 8001b6c:	2000000c 	.word	0x2000000c

08001b70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_IncTick+0x1c>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_IncTick+0x20>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4a03      	ldr	r2, [pc, #12]	; (8001b8c <HAL_IncTick+0x1c>)
 8001b80:	6013      	str	r3, [r2, #0]
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	200044f4 	.word	0x200044f4
 8001b90:	20000010 	.word	0x20000010

08001b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  return uwTick;
 8001b98:	4b03      	ldr	r3, [pc, #12]	; (8001ba8 <HAL_GetTick+0x14>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	200044f4 	.word	0x200044f4

08001bac <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8001bb4:	4b06      	ldr	r3, [pc, #24]	; (8001bd0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001bbc:	4904      	ldr	r1, [pc, #16]	; (8001bd0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	600b      	str	r3, [r1, #0]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	40010030 	.word	0x40010030

08001bd4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8001bdc:	4b06      	ldr	r3, [pc, #24]	; (8001bf8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f023 0202 	bic.w	r2, r3, #2
 8001be4:	4904      	ldr	r1, [pc, #16]	; (8001bf8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr
 8001bf8:	40010030 	.word	0x40010030

08001bfc <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b082      	sub	sp, #8
 8001c00:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a0e      	ldr	r2, [pc, #56]	; (8001c40 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001c0e:	f7ff ffc1 	bl	8001b94 <HAL_GetTick>
 8001c12:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8001c14:	e008      	b.n	8001c28 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001c16:	f7ff ffbd 	bl	8001b94 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	2b0a      	cmp	r3, #10
 8001c22:	d901      	bls.n	8001c28 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e006      	b.n	8001c36 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0f0      	beq.n	8001c16 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40010030 	.word	0x40010030

08001c44 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	609a      	str	r2, [r3, #8]
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	609a      	str	r2, [r3, #8]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
 8001cb8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	3360      	adds	r3, #96	; 0x60
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b08      	ldr	r3, [pc, #32]	; (8001cf0 <LL_ADC_SetOffset+0x44>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001ce4:	bf00      	nop
 8001ce6:	371c      	adds	r7, #28
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	03fff000 	.word	0x03fff000

08001cf4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	3360      	adds	r3, #96	; 0x60
 8001d02:	461a      	mov	r2, r3
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	4413      	add	r3, r2
 8001d0a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b087      	sub	sp, #28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3360      	adds	r3, #96	; 0x60
 8001d30:	461a      	mov	r2, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	4413      	add	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	431a      	orrs	r2, r3
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001d4a:	bf00      	nop
 8001d4c:	371c      	adds	r7, #28
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b087      	sub	sp, #28
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	60f8      	str	r0, [r7, #12]
 8001d5e:	60b9      	str	r1, [r7, #8]
 8001d60:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	3360      	adds	r3, #96	; 0x60
 8001d66:	461a      	mov	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	009b      	lsls	r3, r3, #2
 8001d6c:	4413      	add	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	431a      	orrs	r2, r3
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001d80:	bf00      	nop
 8001d82:	371c      	adds	r7, #28
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	3360      	adds	r3, #96	; 0x60
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	431a      	orrs	r2, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001db6:	bf00      	nop
 8001db8:	371c      	adds	r7, #28
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
 8001dca:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	431a      	orrs	r2, r3
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	615a      	str	r2, [r3, #20]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d101      	bne.n	8001e00 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	e000      	b.n	8001e02 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b087      	sub	sp, #28
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	3330      	adds	r3, #48	; 0x30
 8001e1e:	461a      	mov	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	0a1b      	lsrs	r3, r3, #8
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	4413      	add	r3, r2
 8001e2c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	f003 031f 	and.w	r3, r3, #31
 8001e38:	211f      	movs	r1, #31
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	401a      	ands	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	0e9b      	lsrs	r3, r3, #26
 8001e46:	f003 011f 	and.w	r1, r3, #31
 8001e4a:	68bb      	ldr	r3, [r7, #8]
 8001e4c:	f003 031f 	and.w	r3, r3, #31
 8001e50:	fa01 f303 	lsl.w	r3, r1, r3
 8001e54:	431a      	orrs	r2, r3
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001e5a:	bf00      	nop
 8001e5c:	371c      	adds	r7, #28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b087      	sub	sp, #28
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	60b9      	str	r1, [r7, #8]
 8001e70:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	3314      	adds	r3, #20
 8001e76:	461a      	mov	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	0e5b      	lsrs	r3, r3, #25
 8001e7c:	009b      	lsls	r3, r3, #2
 8001e7e:	f003 0304 	and.w	r3, r3, #4
 8001e82:	4413      	add	r3, r2
 8001e84:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	0d1b      	lsrs	r3, r3, #20
 8001e8e:	f003 031f 	and.w	r3, r3, #31
 8001e92:	2107      	movs	r1, #7
 8001e94:	fa01 f303 	lsl.w	r3, r1, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	0d1b      	lsrs	r3, r3, #20
 8001ea0:	f003 031f 	and.w	r3, r3, #31
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001eb0:	bf00      	nop
 8001eb2:	371c      	adds	r7, #28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0318 	and.w	r3, r3, #24
 8001ede:	4908      	ldr	r1, [pc, #32]	; (8001f00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ee0:	40d9      	lsrs	r1, r3
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	400b      	ands	r3, r1
 8001ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eea:	431a      	orrs	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001ef2:	bf00      	nop
 8001ef4:	3714      	adds	r7, #20
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	0007ffff 	.word	0x0007ffff

08001f04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f003 031f 	and.w	r3, r3, #31
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr

08001f20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001f30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6093      	str	r3, [r2, #8]
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f58:	d101      	bne.n	8001f5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001f7c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f80:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fa8:	d101      	bne.n	8001fae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001fcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fd0:	f043 0201 	orr.w	r2, r3, #1
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr

08001fe4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	b083      	sub	sp, #12
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ff4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ff8:	f043 0202 	orr.w	r2, r3, #2
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	d101      	bne.n	8002024 <LL_ADC_IsEnabled+0x18>
 8002020:	2301      	movs	r3, #1
 8002022:	e000      	b.n	8002026 <LL_ADC_IsEnabled+0x1a>
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr

08002032 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b02      	cmp	r3, #2
 8002044:	d101      	bne.n	800204a <LL_ADC_IsDisableOngoing+0x18>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <LL_ADC_IsDisableOngoing+0x1a>
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002068:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800206c:	f043 0204 	orr.w	r2, r3, #4
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002090:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002094:	f043 0210 	orr.w	r2, r3, #16
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d101      	bne.n	80020c0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80020ce:	b480      	push	{r7}
 80020d0:	b083      	sub	sp, #12
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020de:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020e2:	f043 0220 	orr.w	r2, r3, #32
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 0308 	and.w	r3, r3, #8
 8002106:	2b08      	cmp	r3, #8
 8002108:	d101      	bne.n	800210e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800210a:	2301      	movs	r3, #1
 800210c:	e000      	b.n	8002110 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800210e:	2300      	movs	r3, #0
}
 8002110:	4618      	mov	r0, r3
 8002112:	370c      	adds	r7, #12
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800211c:	b590      	push	{r4, r7, lr}
 800211e:	b089      	sub	sp, #36	; 0x24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002128:	2300      	movs	r3, #0
 800212a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e1a9      	b.n	800248a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002140:	2b00      	cmp	r3, #0
 8002142:	d109      	bne.n	8002158 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff f8db 	bl	8001300 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4618      	mov	r0, r3
 800215e:	f7ff fef1 	bl	8001f44 <LL_ADC_IsDeepPowerDownEnabled>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d004      	beq.n	8002172 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fed7 	bl	8001f20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ff0c 	bl	8001f94 <LL_ADC_IsInternalRegulatorEnabled>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d115      	bne.n	80021ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fef0 	bl	8001f6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800218c:	4b9c      	ldr	r3, [pc, #624]	; (8002400 <HAL_ADC_Init+0x2e4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	099b      	lsrs	r3, r3, #6
 8002192:	4a9c      	ldr	r2, [pc, #624]	; (8002404 <HAL_ADC_Init+0x2e8>)
 8002194:	fba2 2303 	umull	r2, r3, r2, r3
 8002198:	099b      	lsrs	r3, r3, #6
 800219a:	3301      	adds	r3, #1
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021a0:	e002      	b.n	80021a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	3b01      	subs	r3, #1
 80021a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1f9      	bne.n	80021a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff feee 	bl	8001f94 <LL_ADC_IsInternalRegulatorEnabled>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10d      	bne.n	80021da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c2:	f043 0210 	orr.w	r2, r3, #16
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021ce:	f043 0201 	orr.w	r2, r3, #1
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff62 	bl	80020a8 <LL_ADC_REG_IsConversionOngoing>
 80021e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f040 8142 	bne.w	8002478 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f040 813e 	bne.w	8002478 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002200:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002204:	f043 0202 	orr.w	r2, r3, #2
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7ff fefb 	bl	800200c <LL_ADC_IsEnabled>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d141      	bne.n	80022a0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002224:	d004      	beq.n	8002230 <HAL_ADC_Init+0x114>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a77      	ldr	r2, [pc, #476]	; (8002408 <HAL_ADC_Init+0x2ec>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d10f      	bne.n	8002250 <HAL_ADC_Init+0x134>
 8002230:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002234:	f7ff feea 	bl	800200c <LL_ADC_IsEnabled>
 8002238:	4604      	mov	r4, r0
 800223a:	4873      	ldr	r0, [pc, #460]	; (8002408 <HAL_ADC_Init+0x2ec>)
 800223c:	f7ff fee6 	bl	800200c <LL_ADC_IsEnabled>
 8002240:	4603      	mov	r3, r0
 8002242:	4323      	orrs	r3, r4
 8002244:	2b00      	cmp	r3, #0
 8002246:	bf0c      	ite	eq
 8002248:	2301      	moveq	r3, #1
 800224a:	2300      	movne	r3, #0
 800224c:	b2db      	uxtb	r3, r3
 800224e:	e012      	b.n	8002276 <HAL_ADC_Init+0x15a>
 8002250:	486e      	ldr	r0, [pc, #440]	; (800240c <HAL_ADC_Init+0x2f0>)
 8002252:	f7ff fedb 	bl	800200c <LL_ADC_IsEnabled>
 8002256:	4604      	mov	r4, r0
 8002258:	486d      	ldr	r0, [pc, #436]	; (8002410 <HAL_ADC_Init+0x2f4>)
 800225a:	f7ff fed7 	bl	800200c <LL_ADC_IsEnabled>
 800225e:	4603      	mov	r3, r0
 8002260:	431c      	orrs	r4, r3
 8002262:	486c      	ldr	r0, [pc, #432]	; (8002414 <HAL_ADC_Init+0x2f8>)
 8002264:	f7ff fed2 	bl	800200c <LL_ADC_IsEnabled>
 8002268:	4603      	mov	r3, r0
 800226a:	4323      	orrs	r3, r4
 800226c:	2b00      	cmp	r3, #0
 800226e:	bf0c      	ite	eq
 8002270:	2301      	moveq	r3, #1
 8002272:	2300      	movne	r3, #0
 8002274:	b2db      	uxtb	r3, r3
 8002276:	2b00      	cmp	r3, #0
 8002278:	d012      	beq.n	80022a0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002282:	d004      	beq.n	800228e <HAL_ADC_Init+0x172>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a5f      	ldr	r2, [pc, #380]	; (8002408 <HAL_ADC_Init+0x2ec>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d101      	bne.n	8002292 <HAL_ADC_Init+0x176>
 800228e:	4a62      	ldr	r2, [pc, #392]	; (8002418 <HAL_ADC_Init+0x2fc>)
 8002290:	e000      	b.n	8002294 <HAL_ADC_Init+0x178>
 8002292:	4a62      	ldr	r2, [pc, #392]	; (800241c <HAL_ADC_Init+0x300>)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	4619      	mov	r1, r3
 800229a:	4610      	mov	r0, r2
 800229c:	f7ff fcd2 	bl	8001c44 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7f5b      	ldrb	r3, [r3, #29]
 80022a4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022aa:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80022b0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80022b6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022be:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d106      	bne.n	80022dc <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d2:	3b01      	subs	r3, #1
 80022d4:	045b      	lsls	r3, r3, #17
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d009      	beq.n	80022f8 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f0:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80022f2:	69ba      	ldr	r2, [r7, #24]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	68da      	ldr	r2, [r3, #12]
 80022fe:	4b48      	ldr	r3, [pc, #288]	; (8002420 <HAL_ADC_Init+0x304>)
 8002300:	4013      	ands	r3, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6812      	ldr	r2, [r2, #0]
 8002306:	69b9      	ldr	r1, [r7, #24]
 8002308:	430b      	orrs	r3, r1
 800230a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f7ff fee5 	bl	80020f6 <LL_ADC_INJ_IsConversionOngoing>
 800232c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d17f      	bne.n	8002434 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d17c      	bne.n	8002434 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800233e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002346:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002356:	f023 0302 	bic.w	r3, r3, #2
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	6812      	ldr	r2, [r2, #0]
 800235e:	69b9      	ldr	r1, [r7, #24]
 8002360:	430b      	orrs	r3, r1
 8002362:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d017      	beq.n	800239c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691a      	ldr	r2, [r3, #16]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800237a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002384:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002388:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6911      	ldr	r1, [r2, #16]
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	430b      	orrs	r3, r1
 8002396:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800239a:	e013      	b.n	80023c4 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	691a      	ldr	r2, [r3, #16]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6812      	ldr	r2, [r2, #0]
 80023b8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80023bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023c0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d12a      	bne.n	8002424 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	691b      	ldr	r3, [r3, #16]
 80023d4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80023d8:	f023 0304 	bic.w	r3, r3, #4
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023e4:	4311      	orrs	r1, r2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80023ea:	4311      	orrs	r1, r2
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80023f0:	430a      	orrs	r2, r1
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f042 0201 	orr.w	r2, r2, #1
 80023fc:	611a      	str	r2, [r3, #16]
 80023fe:	e019      	b.n	8002434 <HAL_ADC_Init+0x318>
 8002400:	20000008 	.word	0x20000008
 8002404:	053e2d63 	.word	0x053e2d63
 8002408:	50000100 	.word	0x50000100
 800240c:	50000400 	.word	0x50000400
 8002410:	50000500 	.word	0x50000500
 8002414:	50000600 	.word	0x50000600
 8002418:	50000300 	.word	0x50000300
 800241c:	50000700 	.word	0x50000700
 8002420:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	691a      	ldr	r2, [r3, #16]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 0201 	bic.w	r2, r2, #1
 8002432:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d10c      	bne.n	8002456 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f023 010f 	bic.w	r1, r3, #15
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	1e5a      	subs	r2, r3, #1
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	631a      	str	r2, [r3, #48]	; 0x30
 8002454:	e007      	b.n	8002466 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f022 020f 	bic.w	r2, r2, #15
 8002464:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246a:	f023 0303 	bic.w	r3, r3, #3
 800246e:	f043 0201 	orr.w	r2, r3, #1
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	65da      	str	r2, [r3, #92]	; 0x5c
 8002476:	e007      	b.n	8002488 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247c:	f043 0210 	orr.w	r2, r3, #16
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002488:	7ffb      	ldrb	r3, [r7, #31]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3724      	adds	r7, #36	; 0x24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd90      	pop	{r4, r7, pc}
 8002492:	bf00      	nop

08002494 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b086      	sub	sp, #24
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024a8:	d004      	beq.n	80024b4 <HAL_ADC_Start_DMA+0x20>
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a5a      	ldr	r2, [pc, #360]	; (8002618 <HAL_ADC_Start_DMA+0x184>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d101      	bne.n	80024b8 <HAL_ADC_Start_DMA+0x24>
 80024b4:	4b59      	ldr	r3, [pc, #356]	; (800261c <HAL_ADC_Start_DMA+0x188>)
 80024b6:	e000      	b.n	80024ba <HAL_ADC_Start_DMA+0x26>
 80024b8:	4b59      	ldr	r3, [pc, #356]	; (8002620 <HAL_ADC_Start_DMA+0x18c>)
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fd22 	bl	8001f04 <LL_ADC_GetMultimode>
 80024c0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff fdee 	bl	80020a8 <LL_ADC_REG_IsConversionOngoing>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f040 809b 	bne.w	800260a <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_ADC_Start_DMA+0x4e>
 80024de:	2302      	movs	r3, #2
 80024e0:	e096      	b.n	8002610 <HAL_ADC_Start_DMA+0x17c>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a4d      	ldr	r2, [pc, #308]	; (8002624 <HAL_ADC_Start_DMA+0x190>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d008      	beq.n	8002506 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d005      	beq.n	8002506 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	2b05      	cmp	r3, #5
 80024fe:	d002      	beq.n	8002506 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002500:	693b      	ldr	r3, [r7, #16]
 8002502:	2b09      	cmp	r3, #9
 8002504:	d17a      	bne.n	80025fc <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f000 fe00 	bl	800310c <ADC_Enable>
 800250c:	4603      	mov	r3, r0
 800250e:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002510:	7dfb      	ldrb	r3, [r7, #23]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d16d      	bne.n	80025f2 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800251e:	f023 0301 	bic.w	r3, r3, #1
 8002522:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a3a      	ldr	r2, [pc, #232]	; (8002618 <HAL_ADC_Start_DMA+0x184>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d009      	beq.n	8002548 <HAL_ADC_Start_DMA+0xb4>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a3b      	ldr	r2, [pc, #236]	; (8002628 <HAL_ADC_Start_DMA+0x194>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d002      	beq.n	8002544 <HAL_ADC_Start_DMA+0xb0>
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	e003      	b.n	800254c <HAL_ADC_Start_DMA+0xb8>
 8002544:	4b39      	ldr	r3, [pc, #228]	; (800262c <HAL_ADC_Start_DMA+0x198>)
 8002546:	e001      	b.n	800254c <HAL_ADC_Start_DMA+0xb8>
 8002548:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	6812      	ldr	r2, [r2, #0]
 8002550:	4293      	cmp	r3, r2
 8002552:	d002      	beq.n	800255a <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d105      	bne.n	8002566 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800255e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d006      	beq.n	8002580 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002576:	f023 0206 	bic.w	r2, r3, #6
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	661a      	str	r2, [r3, #96]	; 0x60
 800257e:	e002      	b.n	8002586 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2200      	movs	r2, #0
 8002584:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258a:	4a29      	ldr	r2, [pc, #164]	; (8002630 <HAL_ADC_Start_DMA+0x19c>)
 800258c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002592:	4a28      	ldr	r2, [pc, #160]	; (8002634 <HAL_ADC_Start_DMA+0x1a0>)
 8002594:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800259a:	4a27      	ldr	r2, [pc, #156]	; (8002638 <HAL_ADC_Start_DMA+0x1a4>)
 800259c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	221c      	movs	r2, #28
 80025a4:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685a      	ldr	r2, [r3, #4]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f042 0210 	orr.w	r2, r2, #16
 80025bc:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f042 0201 	orr.w	r2, r2, #1
 80025cc:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	3340      	adds	r3, #64	; 0x40
 80025d8:	4619      	mov	r1, r3
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f001 fa93 	bl	8003b08 <HAL_DMA_Start_IT>
 80025e2:	4603      	mov	r3, r0
 80025e4:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f7ff fd34 	bl	8002058 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80025f0:	e00d      	b.n	800260e <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80025fa:	e008      	b.n	800260e <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002608:	e001      	b.n	800260e <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800260a:	2302      	movs	r3, #2
 800260c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800260e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	50000100 	.word	0x50000100
 800261c:	50000300 	.word	0x50000300
 8002620:	50000700 	.word	0x50000700
 8002624:	50000600 	.word	0x50000600
 8002628:	50000500 	.word	0x50000500
 800262c:	50000400 	.word	0x50000400
 8002630:	080032f7 	.word	0x080032f7
 8002634:	080033cf 	.word	0x080033cf
 8002638:	080033eb 	.word	0x080033eb

0800263c <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800264a:	2b01      	cmp	r3, #1
 800264c:	d101      	bne.n	8002652 <HAL_ADC_Stop_DMA+0x16>
 800264e:	2302      	movs	r3, #2
 8002650:	e051      	b.n	80026f6 <HAL_ADC_Stop_DMA+0xba>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800265a:	2103      	movs	r1, #3
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 fc99 	bl	8002f94 <ADC_ConversionStop>
 8002662:	4603      	mov	r3, r0
 8002664:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d13f      	bne.n	80026ec <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	68da      	ldr	r2, [r3, #12]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 0201 	bic.w	r2, r2, #1
 800267a:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002680:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b02      	cmp	r3, #2
 8002688:	d10f      	bne.n	80026aa <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268e:	4618      	mov	r0, r3
 8002690:	f001 fab5 	bl	8003bfe <HAL_DMA_Abort>
 8002694:	4603      	mov	r3, r0
 8002696:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8002698:	7bfb      	ldrb	r3, [r7, #15]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d005      	beq.n	80026aa <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685a      	ldr	r2, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f022 0210 	bic.w	r2, r2, #16
 80026b8:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80026ba:	7bfb      	ldrb	r3, [r7, #15]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d105      	bne.n	80026cc <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fdb9 	bl	8003238 <ADC_Disable>
 80026c6:	4603      	mov	r3, r0
 80026c8:	73fb      	strb	r3, [r7, #15]
 80026ca:	e002      	b.n	80026d2 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 fdb3 	bl	8003238 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80026d2:	7bfb      	ldrb	r3, [r7, #15]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d109      	bne.n	80026ec <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026dc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026e0:	f023 0301 	bic.w	r3, r3, #1
 80026e4:	f043 0201 	orr.w	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80026fe:	b480      	push	{r7}
 8002700:	b083      	sub	sp, #12
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
	...

08002714 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b0b6      	sub	sp, #216	; 0xd8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800271e:	2300      	movs	r3, #0
 8002720:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002724:	2300      	movs	r3, #0
 8002726:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800272e:	2b01      	cmp	r3, #1
 8002730:	d102      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x24>
 8002732:	2302      	movs	r3, #2
 8002734:	f000 bc13 	b.w	8002f5e <HAL_ADC_ConfigChannel+0x84a>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff fcaf 	bl	80020a8 <LL_ADC_REG_IsConversionOngoing>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	f040 83f3 	bne.w	8002f38 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6818      	ldr	r0, [r3, #0]
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6859      	ldr	r1, [r3, #4]
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	f7ff fb55 	bl	8001e0e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff fc9d 	bl	80020a8 <LL_ADC_REG_IsConversionOngoing>
 800276e:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fcbd 	bl	80020f6 <LL_ADC_INJ_IsConversionOngoing>
 800277c:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002780:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002784:	2b00      	cmp	r3, #0
 8002786:	f040 81d9 	bne.w	8002b3c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800278a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800278e:	2b00      	cmp	r3, #0
 8002790:	f040 81d4 	bne.w	8002b3c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800279c:	d10f      	bne.n	80027be <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2200      	movs	r2, #0
 80027a8:	4619      	mov	r1, r3
 80027aa:	f7ff fb5c 	bl	8001e66 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff fb03 	bl	8001dc2 <LL_ADC_SetSamplingTimeCommonConfig>
 80027bc:	e00e      	b.n	80027dc <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	6819      	ldr	r1, [r3, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	461a      	mov	r2, r3
 80027cc:	f7ff fb4b 	bl	8001e66 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2100      	movs	r1, #0
 80027d6:	4618      	mov	r0, r3
 80027d8:	f7ff faf3 	bl	8001dc2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	695a      	ldr	r2, [r3, #20]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	08db      	lsrs	r3, r3, #3
 80027e8:	f003 0303 	and.w	r3, r3, #3
 80027ec:	005b      	lsls	r3, r3, #1
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d022      	beq.n	8002844 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6818      	ldr	r0, [r3, #0]
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	6919      	ldr	r1, [r3, #16]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800280e:	f7ff fa4d 	bl	8001cac <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	6919      	ldr	r1, [r3, #16]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	461a      	mov	r2, r3
 8002820:	f7ff fa99 	bl	8001d56 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002830:	2b01      	cmp	r3, #1
 8002832:	d102      	bne.n	800283a <HAL_ADC_ConfigChannel+0x126>
 8002834:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002838:	e000      	b.n	800283c <HAL_ADC_ConfigChannel+0x128>
 800283a:	2300      	movs	r3, #0
 800283c:	461a      	mov	r2, r3
 800283e:	f7ff faa5 	bl	8001d8c <LL_ADC_SetOffsetSaturation>
 8002842:	e17b      	b.n	8002b3c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2100      	movs	r1, #0
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff fa52 	bl	8001cf4 <LL_ADC_GetOffsetChannel>
 8002850:	4603      	mov	r3, r0
 8002852:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10a      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x15c>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2100      	movs	r1, #0
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fa47 	bl	8001cf4 <LL_ADC_GetOffsetChannel>
 8002866:	4603      	mov	r3, r0
 8002868:	0e9b      	lsrs	r3, r3, #26
 800286a:	f003 021f 	and.w	r2, r3, #31
 800286e:	e01e      	b.n	80028ae <HAL_ADC_ConfigChannel+0x19a>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2100      	movs	r1, #0
 8002876:	4618      	mov	r0, r3
 8002878:	f7ff fa3c 	bl	8001cf4 <LL_ADC_GetOffsetChannel>
 800287c:	4603      	mov	r3, r0
 800287e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002882:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002886:	fa93 f3a3 	rbit	r3, r3
 800288a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800288e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002892:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002896:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800289e:	2320      	movs	r3, #32
 80028a0:	e004      	b.n	80028ac <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80028a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028a6:	fab3 f383 	clz	r3, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d105      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x1b2>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	0e9b      	lsrs	r3, r3, #26
 80028c0:	f003 031f 	and.w	r3, r3, #31
 80028c4:	e018      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x1e4>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028d2:	fa93 f3a3 	rbit	r3, r3
 80028d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80028da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80028e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80028ea:	2320      	movs	r3, #32
 80028ec:	e004      	b.n	80028f8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80028ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028f2:	fab3 f383 	clz	r3, r3
 80028f6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d106      	bne.n	800290a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2200      	movs	r2, #0
 8002902:	2100      	movs	r1, #0
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fa0b 	bl	8001d20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2101      	movs	r1, #1
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff f9ef 	bl	8001cf4 <LL_ADC_GetOffsetChannel>
 8002916:	4603      	mov	r3, r0
 8002918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10a      	bne.n	8002936 <HAL_ADC_ConfigChannel+0x222>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2101      	movs	r1, #1
 8002926:	4618      	mov	r0, r3
 8002928:	f7ff f9e4 	bl	8001cf4 <LL_ADC_GetOffsetChannel>
 800292c:	4603      	mov	r3, r0
 800292e:	0e9b      	lsrs	r3, r3, #26
 8002930:	f003 021f 	and.w	r2, r3, #31
 8002934:	e01e      	b.n	8002974 <HAL_ADC_ConfigChannel+0x260>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2101      	movs	r1, #1
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff f9d9 	bl	8001cf4 <LL_ADC_GetOffsetChannel>
 8002942:	4603      	mov	r3, r0
 8002944:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002948:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800294c:	fa93 f3a3 	rbit	r3, r3
 8002950:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002954:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002958:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800295c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d101      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002964:	2320      	movs	r3, #32
 8002966:	e004      	b.n	8002972 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002968:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800296c:	fab3 f383 	clz	r3, r3
 8002970:	b2db      	uxtb	r3, r3
 8002972:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297c:	2b00      	cmp	r3, #0
 800297e:	d105      	bne.n	800298c <HAL_ADC_ConfigChannel+0x278>
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	0e9b      	lsrs	r3, r3, #26
 8002986:	f003 031f 	and.w	r3, r3, #31
 800298a:	e018      	b.n	80029be <HAL_ADC_ConfigChannel+0x2aa>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002994:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002998:	fa93 f3a3 	rbit	r3, r3
 800299c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80029a0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80029a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80029b0:	2320      	movs	r3, #32
 80029b2:	e004      	b.n	80029be <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80029b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029b8:	fab3 f383 	clz	r3, r3
 80029bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029be:	429a      	cmp	r2, r3
 80029c0:	d106      	bne.n	80029d0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2200      	movs	r2, #0
 80029c8:	2101      	movs	r1, #1
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff f9a8 	bl	8001d20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2102      	movs	r1, #2
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff f98c 	bl	8001cf4 <LL_ADC_GetOffsetChannel>
 80029dc:	4603      	mov	r3, r0
 80029de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10a      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x2e8>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2102      	movs	r1, #2
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff f981 	bl	8001cf4 <LL_ADC_GetOffsetChannel>
 80029f2:	4603      	mov	r3, r0
 80029f4:	0e9b      	lsrs	r3, r3, #26
 80029f6:	f003 021f 	and.w	r2, r3, #31
 80029fa:	e01e      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x326>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2102      	movs	r1, #2
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7ff f976 	bl	8001cf4 <LL_ADC_GetOffsetChannel>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a12:	fa93 f3a3 	rbit	r3, r3
 8002a16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002a1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002a22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d101      	bne.n	8002a2e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002a2a:	2320      	movs	r3, #32
 8002a2c:	e004      	b.n	8002a38 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002a2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002a32:	fab3 f383 	clz	r3, r3
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d105      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x33e>
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	0e9b      	lsrs	r3, r3, #26
 8002a4c:	f003 031f 	and.w	r3, r3, #31
 8002a50:	e016      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x36c>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002a64:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002a6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002a72:	2320      	movs	r3, #32
 8002a74:	e004      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002a76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a7a:	fab3 f383 	clz	r3, r3
 8002a7e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d106      	bne.n	8002a92 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	2102      	movs	r1, #2
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff f947 	bl	8001d20 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2103      	movs	r1, #3
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff f92b 	bl	8001cf4 <LL_ADC_GetOffsetChannel>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d10a      	bne.n	8002abe <HAL_ADC_ConfigChannel+0x3aa>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2103      	movs	r1, #3
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff f920 	bl	8001cf4 <LL_ADC_GetOffsetChannel>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	0e9b      	lsrs	r3, r3, #26
 8002ab8:	f003 021f 	and.w	r2, r3, #31
 8002abc:	e017      	b.n	8002aee <HAL_ADC_ConfigChannel+0x3da>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2103      	movs	r1, #3
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff f915 	bl	8001cf4 <LL_ADC_GetOffsetChannel>
 8002aca:	4603      	mov	r3, r0
 8002acc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ad0:	fa93 f3a3 	rbit	r3, r3
 8002ad4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ad8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002ada:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002ae0:	2320      	movs	r3, #32
 8002ae2:	e003      	b.n	8002aec <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002ae4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ae6:	fab3 f383 	clz	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d105      	bne.n	8002b06 <HAL_ADC_ConfigChannel+0x3f2>
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	0e9b      	lsrs	r3, r3, #26
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	e011      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x416>
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002b14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b16:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002b18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002b1e:	2320      	movs	r3, #32
 8002b20:	e003      	b.n	8002b2a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b24:	fab3 f383 	clz	r3, r3
 8002b28:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d106      	bne.n	8002b3c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	2200      	movs	r2, #0
 8002b34:	2103      	movs	r1, #3
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff f8f2 	bl	8001d20 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff fa63 	bl	800200c <LL_ADC_IsEnabled>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f040 813d 	bne.w	8002dc8 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	6819      	ldr	r1, [r3, #0]
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f7ff f9ae 	bl	8001ebc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	4aa2      	ldr	r2, [pc, #648]	; (8002df0 <HAL_ADC_ConfigChannel+0x6dc>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	f040 812e 	bne.w	8002dc8 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10b      	bne.n	8002b94 <HAL_ADC_ConfigChannel+0x480>
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	0e9b      	lsrs	r3, r3, #26
 8002b82:	3301      	adds	r3, #1
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	2b09      	cmp	r3, #9
 8002b8a:	bf94      	ite	ls
 8002b8c:	2301      	movls	r3, #1
 8002b8e:	2300      	movhi	r3, #0
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	e019      	b.n	8002bc8 <HAL_ADC_ConfigChannel+0x4b4>
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b9c:	fa93 f3a3 	rbit	r3, r3
 8002ba0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002ba2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ba4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002ba6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002bac:	2320      	movs	r3, #32
 8002bae:	e003      	b.n	8002bb8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002bb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bb2:	fab3 f383 	clz	r3, r3
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	3301      	adds	r3, #1
 8002bba:	f003 031f 	and.w	r3, r3, #31
 8002bbe:	2b09      	cmp	r3, #9
 8002bc0:	bf94      	ite	ls
 8002bc2:	2301      	movls	r3, #1
 8002bc4:	2300      	movhi	r3, #0
 8002bc6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d079      	beq.n	8002cc0 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d107      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x4d4>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	0e9b      	lsrs	r3, r3, #26
 8002bde:	3301      	adds	r3, #1
 8002be0:	069b      	lsls	r3, r3, #26
 8002be2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002be6:	e015      	b.n	8002c14 <HAL_ADC_ConfigChannel+0x500>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002bf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bf8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d101      	bne.n	8002c04 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002c00:	2320      	movs	r3, #32
 8002c02:	e003      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c06:	fab3 f383 	clz	r3, r3
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	069b      	lsls	r3, r3, #26
 8002c10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d109      	bne.n	8002c34 <HAL_ADC_ConfigChannel+0x520>
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	0e9b      	lsrs	r3, r3, #26
 8002c26:	3301      	adds	r3, #1
 8002c28:	f003 031f 	and.w	r3, r3, #31
 8002c2c:	2101      	movs	r1, #1
 8002c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c32:	e017      	b.n	8002c64 <HAL_ADC_ConfigChannel+0x550>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c44:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d101      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002c4c:	2320      	movs	r3, #32
 8002c4e:	e003      	b.n	8002c58 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002c50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c52:	fab3 f383 	clz	r3, r3
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	3301      	adds	r3, #1
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	2101      	movs	r1, #1
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	ea42 0103 	orr.w	r1, r2, r3
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d10a      	bne.n	8002c8a <HAL_ADC_ConfigChannel+0x576>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	0e9b      	lsrs	r3, r3, #26
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	f003 021f 	and.w	r2, r3, #31
 8002c80:	4613      	mov	r3, r2
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	4413      	add	r3, r2
 8002c86:	051b      	lsls	r3, r3, #20
 8002c88:	e018      	b.n	8002cbc <HAL_ADC_ConfigChannel+0x5a8>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c92:	fa93 f3a3 	rbit	r3, r3
 8002c96:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002ca2:	2320      	movs	r3, #32
 8002ca4:	e003      	b.n	8002cae <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ca8:	fab3 f383 	clz	r3, r3
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	f003 021f 	and.w	r2, r3, #31
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	4413      	add	r3, r2
 8002cba:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cbc:	430b      	orrs	r3, r1
 8002cbe:	e07e      	b.n	8002dbe <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d107      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x5c8>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	0e9b      	lsrs	r3, r3, #26
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	069b      	lsls	r3, r3, #26
 8002cd6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cda:	e015      	b.n	8002d08 <HAL_ADC_ConfigChannel+0x5f4>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cec:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002cf4:	2320      	movs	r3, #32
 8002cf6:	e003      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	3301      	adds	r3, #1
 8002d02:	069b      	lsls	r3, r3, #26
 8002d04:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d109      	bne.n	8002d28 <HAL_ADC_ConfigChannel+0x614>
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	0e9b      	lsrs	r3, r3, #26
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	2101      	movs	r1, #1
 8002d22:	fa01 f303 	lsl.w	r3, r1, r3
 8002d26:	e017      	b.n	8002d58 <HAL_ADC_ConfigChannel+0x644>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	61fb      	str	r3, [r7, #28]
  return result;
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002d40:	2320      	movs	r3, #32
 8002d42:	e003      	b.n	8002d4c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d46:	fab3 f383 	clz	r3, r3
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	f003 031f 	and.w	r3, r3, #31
 8002d52:	2101      	movs	r1, #1
 8002d54:	fa01 f303 	lsl.w	r3, r1, r3
 8002d58:	ea42 0103 	orr.w	r1, r2, r3
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10d      	bne.n	8002d84 <HAL_ADC_ConfigChannel+0x670>
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	0e9b      	lsrs	r3, r3, #26
 8002d6e:	3301      	adds	r3, #1
 8002d70:	f003 021f 	and.w	r2, r3, #31
 8002d74:	4613      	mov	r3, r2
 8002d76:	005b      	lsls	r3, r3, #1
 8002d78:	4413      	add	r3, r2
 8002d7a:	3b1e      	subs	r3, #30
 8002d7c:	051b      	lsls	r3, r3, #20
 8002d7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d82:	e01b      	b.n	8002dbc <HAL_ADC_ConfigChannel+0x6a8>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	fa93 f3a3 	rbit	r3, r3
 8002d90:	613b      	str	r3, [r7, #16]
  return result;
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d101      	bne.n	8002da0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002d9c:	2320      	movs	r3, #32
 8002d9e:	e003      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	fab3 f383 	clz	r3, r3
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	3301      	adds	r3, #1
 8002daa:	f003 021f 	and.w	r2, r3, #31
 8002dae:	4613      	mov	r3, r2
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	4413      	add	r3, r2
 8002db4:	3b1e      	subs	r3, #30
 8002db6:	051b      	lsls	r3, r3, #20
 8002db8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dbc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	f7ff f84f 	bl	8001e66 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	4b09      	ldr	r3, [pc, #36]	; (8002df4 <HAL_ADC_ConfigChannel+0x6e0>)
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	f000 80be 	beq.w	8002f52 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dde:	d004      	beq.n	8002dea <HAL_ADC_ConfigChannel+0x6d6>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a04      	ldr	r2, [pc, #16]	; (8002df8 <HAL_ADC_ConfigChannel+0x6e4>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d10a      	bne.n	8002e00 <HAL_ADC_ConfigChannel+0x6ec>
 8002dea:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <HAL_ADC_ConfigChannel+0x6e8>)
 8002dec:	e009      	b.n	8002e02 <HAL_ADC_ConfigChannel+0x6ee>
 8002dee:	bf00      	nop
 8002df0:	407f0000 	.word	0x407f0000
 8002df4:	80080000 	.word	0x80080000
 8002df8:	50000100 	.word	0x50000100
 8002dfc:	50000300 	.word	0x50000300
 8002e00:	4b59      	ldr	r3, [pc, #356]	; (8002f68 <HAL_ADC_ConfigChannel+0x854>)
 8002e02:	4618      	mov	r0, r3
 8002e04:	f7fe ff44 	bl	8001c90 <LL_ADC_GetCommonPathInternalCh>
 8002e08:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a56      	ldr	r2, [pc, #344]	; (8002f6c <HAL_ADC_ConfigChannel+0x858>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d004      	beq.n	8002e20 <HAL_ADC_ConfigChannel+0x70c>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a55      	ldr	r2, [pc, #340]	; (8002f70 <HAL_ADC_ConfigChannel+0x85c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d13a      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d134      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e34:	d005      	beq.n	8002e42 <HAL_ADC_ConfigChannel+0x72e>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a4e      	ldr	r2, [pc, #312]	; (8002f74 <HAL_ADC_ConfigChannel+0x860>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	f040 8085 	bne.w	8002f4c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e4a:	d004      	beq.n	8002e56 <HAL_ADC_ConfigChannel+0x742>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a49      	ldr	r2, [pc, #292]	; (8002f78 <HAL_ADC_ConfigChannel+0x864>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d101      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x746>
 8002e56:	4a49      	ldr	r2, [pc, #292]	; (8002f7c <HAL_ADC_ConfigChannel+0x868>)
 8002e58:	e000      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x748>
 8002e5a:	4a43      	ldr	r2, [pc, #268]	; (8002f68 <HAL_ADC_ConfigChannel+0x854>)
 8002e5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002e60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e64:	4619      	mov	r1, r3
 8002e66:	4610      	mov	r0, r2
 8002e68:	f7fe feff 	bl	8001c6a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e6c:	4b44      	ldr	r3, [pc, #272]	; (8002f80 <HAL_ADC_ConfigChannel+0x86c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	099b      	lsrs	r3, r3, #6
 8002e72:	4a44      	ldr	r2, [pc, #272]	; (8002f84 <HAL_ADC_ConfigChannel+0x870>)
 8002e74:	fba2 2303 	umull	r2, r3, r2, r3
 8002e78:	099b      	lsrs	r3, r3, #6
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	4413      	add	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e86:	e002      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1f9      	bne.n	8002e88 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e94:	e05a      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a3b      	ldr	r2, [pc, #236]	; (8002f88 <HAL_ADC_ConfigChannel+0x874>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d125      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ea0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ea4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d11f      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a31      	ldr	r2, [pc, #196]	; (8002f78 <HAL_ADC_ConfigChannel+0x864>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d104      	bne.n	8002ec0 <HAL_ADC_ConfigChannel+0x7ac>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a34      	ldr	r2, [pc, #208]	; (8002f8c <HAL_ADC_ConfigChannel+0x878>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d047      	beq.n	8002f50 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ec8:	d004      	beq.n	8002ed4 <HAL_ADC_ConfigChannel+0x7c0>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a2a      	ldr	r2, [pc, #168]	; (8002f78 <HAL_ADC_ConfigChannel+0x864>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d101      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x7c4>
 8002ed4:	4a29      	ldr	r2, [pc, #164]	; (8002f7c <HAL_ADC_ConfigChannel+0x868>)
 8002ed6:	e000      	b.n	8002eda <HAL_ADC_ConfigChannel+0x7c6>
 8002ed8:	4a23      	ldr	r2, [pc, #140]	; (8002f68 <HAL_ADC_ConfigChannel+0x854>)
 8002eda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002ede:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	4610      	mov	r0, r2
 8002ee6:	f7fe fec0 	bl	8001c6a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eea:	e031      	b.n	8002f50 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a27      	ldr	r2, [pc, #156]	; (8002f90 <HAL_ADC_ConfigChannel+0x87c>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d12d      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ef6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d127      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a1c      	ldr	r2, [pc, #112]	; (8002f78 <HAL_ADC_ConfigChannel+0x864>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d022      	beq.n	8002f52 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f14:	d004      	beq.n	8002f20 <HAL_ADC_ConfigChannel+0x80c>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a17      	ldr	r2, [pc, #92]	; (8002f78 <HAL_ADC_ConfigChannel+0x864>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d101      	bne.n	8002f24 <HAL_ADC_ConfigChannel+0x810>
 8002f20:	4a16      	ldr	r2, [pc, #88]	; (8002f7c <HAL_ADC_ConfigChannel+0x868>)
 8002f22:	e000      	b.n	8002f26 <HAL_ADC_ConfigChannel+0x812>
 8002f24:	4a10      	ldr	r2, [pc, #64]	; (8002f68 <HAL_ADC_ConfigChannel+0x854>)
 8002f26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f2a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002f2e:	4619      	mov	r1, r3
 8002f30:	4610      	mov	r0, r2
 8002f32:	f7fe fe9a 	bl	8001c6a <LL_ADC_SetCommonPathInternalCh>
 8002f36:	e00c      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3c:	f043 0220 	orr.w	r2, r3, #32
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002f4a:	e002      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f4c:	bf00      	nop
 8002f4e:	e000      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002f50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f5a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	37d8      	adds	r7, #216	; 0xd8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	50000700 	.word	0x50000700
 8002f6c:	c3210000 	.word	0xc3210000
 8002f70:	90c00010 	.word	0x90c00010
 8002f74:	50000600 	.word	0x50000600
 8002f78:	50000100 	.word	0x50000100
 8002f7c:	50000300 	.word	0x50000300
 8002f80:	20000008 	.word	0x20000008
 8002f84:	053e2d63 	.word	0x053e2d63
 8002f88:	c7520000 	.word	0xc7520000
 8002f8c:	50000500 	.word	0x50000500
 8002f90:	cb840000 	.word	0xcb840000

08002f94 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff f87c 	bl	80020a8 <LL_ADC_REG_IsConversionOngoing>
 8002fb0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff f89d 	bl	80020f6 <LL_ADC_INJ_IsConversionOngoing>
 8002fbc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d103      	bne.n	8002fcc <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 8098 	beq.w	80030fc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d02a      	beq.n	8003030 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	7f5b      	ldrb	r3, [r3, #29]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d126      	bne.n	8003030 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	7f1b      	ldrb	r3, [r3, #28]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d122      	bne.n	8003030 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002fea:	2301      	movs	r3, #1
 8002fec:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002fee:	e014      	b.n	800301a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002ff0:	69fb      	ldr	r3, [r7, #28]
 8002ff2:	4a45      	ldr	r2, [pc, #276]	; (8003108 <ADC_ConversionStop+0x174>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d90d      	bls.n	8003014 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ffc:	f043 0210 	orr.w	r2, r3, #16
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003008:	f043 0201 	orr.w	r2, r3, #1
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e074      	b.n	80030fe <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	3301      	adds	r3, #1
 8003018:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	d1e3      	bne.n	8002ff0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2240      	movs	r2, #64	; 0x40
 800302e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d014      	beq.n	8003060 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff f834 	bl	80020a8 <LL_ADC_REG_IsConversionOngoing>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00c      	beq.n	8003060 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7fe fff1 	bl	8002032 <LL_ADC_IsDisableOngoing>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d104      	bne.n	8003060 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff f810 	bl	8002080 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d014      	beq.n	8003090 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff f843 	bl	80020f6 <LL_ADC_INJ_IsConversionOngoing>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d00c      	beq.n	8003090 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe ffd9 	bl	8002032 <LL_ADC_IsDisableOngoing>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d104      	bne.n	8003090 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff f81f 	bl	80020ce <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d005      	beq.n	80030a2 <ADC_ConversionStop+0x10e>
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	2b03      	cmp	r3, #3
 800309a:	d105      	bne.n	80030a8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800309c:	230c      	movs	r3, #12
 800309e:	617b      	str	r3, [r7, #20]
        break;
 80030a0:	e005      	b.n	80030ae <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80030a2:	2308      	movs	r3, #8
 80030a4:	617b      	str	r3, [r7, #20]
        break;
 80030a6:	e002      	b.n	80030ae <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80030a8:	2304      	movs	r3, #4
 80030aa:	617b      	str	r3, [r7, #20]
        break;
 80030ac:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80030ae:	f7fe fd71 	bl	8001b94 <HAL_GetTick>
 80030b2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80030b4:	e01b      	b.n	80030ee <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80030b6:	f7fe fd6d 	bl	8001b94 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	2b05      	cmp	r3, #5
 80030c2:	d914      	bls.n	80030ee <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00d      	beq.n	80030ee <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d6:	f043 0210 	orr.w	r2, r3, #16
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030e2:	f043 0201 	orr.w	r2, r3, #1
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e007      	b.n	80030fe <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	4013      	ands	r3, r2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1dc      	bne.n	80030b6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3720      	adds	r7, #32
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	a33fffff 	.word	0xa33fffff

0800310c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003114:	2300      	movs	r3, #0
 8003116:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4618      	mov	r0, r3
 800311e:	f7fe ff75 	bl	800200c <LL_ADC_IsEnabled>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d176      	bne.n	8003216 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689a      	ldr	r2, [r3, #8]
 800312e:	4b3c      	ldr	r3, [pc, #240]	; (8003220 <ADC_Enable+0x114>)
 8003130:	4013      	ands	r3, r2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d00d      	beq.n	8003152 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800313a:	f043 0210 	orr.w	r2, r3, #16
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003146:	f043 0201 	orr.w	r2, r3, #1
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e062      	b.n	8003218 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f7fe ff30 	bl	8001fbc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003164:	d004      	beq.n	8003170 <ADC_Enable+0x64>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a2e      	ldr	r2, [pc, #184]	; (8003224 <ADC_Enable+0x118>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d101      	bne.n	8003174 <ADC_Enable+0x68>
 8003170:	4b2d      	ldr	r3, [pc, #180]	; (8003228 <ADC_Enable+0x11c>)
 8003172:	e000      	b.n	8003176 <ADC_Enable+0x6a>
 8003174:	4b2d      	ldr	r3, [pc, #180]	; (800322c <ADC_Enable+0x120>)
 8003176:	4618      	mov	r0, r3
 8003178:	f7fe fd8a 	bl	8001c90 <LL_ADC_GetCommonPathInternalCh>
 800317c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800317e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003182:	2b00      	cmp	r3, #0
 8003184:	d013      	beq.n	80031ae <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003186:	4b2a      	ldr	r3, [pc, #168]	; (8003230 <ADC_Enable+0x124>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	099b      	lsrs	r3, r3, #6
 800318c:	4a29      	ldr	r2, [pc, #164]	; (8003234 <ADC_Enable+0x128>)
 800318e:	fba2 2303 	umull	r2, r3, r2, r3
 8003192:	099b      	lsrs	r3, r3, #6
 8003194:	1c5a      	adds	r2, r3, #1
 8003196:	4613      	mov	r3, r2
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	4413      	add	r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80031a0:	e002      	b.n	80031a8 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	3b01      	subs	r3, #1
 80031a6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f9      	bne.n	80031a2 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031ae:	f7fe fcf1 	bl	8001b94 <HAL_GetTick>
 80031b2:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031b4:	e028      	b.n	8003208 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7fe ff26 	bl	800200c <LL_ADC_IsEnabled>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d104      	bne.n	80031d0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fe fef6 	bl	8001fbc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80031d0:	f7fe fce0 	bl	8001b94 <HAL_GetTick>
 80031d4:	4602      	mov	r2, r0
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b02      	cmp	r3, #2
 80031dc:	d914      	bls.n	8003208 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d00d      	beq.n	8003208 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f0:	f043 0210 	orr.w	r2, r3, #16
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031fc:	f043 0201 	orr.w	r2, r3, #1
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e007      	b.n	8003218 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0301 	and.w	r3, r3, #1
 8003212:	2b01      	cmp	r3, #1
 8003214:	d1cf      	bne.n	80031b6 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003216:	2300      	movs	r3, #0
}
 8003218:	4618      	mov	r0, r3
 800321a:	3710      	adds	r7, #16
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	8000003f 	.word	0x8000003f
 8003224:	50000100 	.word	0x50000100
 8003228:	50000300 	.word	0x50000300
 800322c:	50000700 	.word	0x50000700
 8003230:	20000008 	.word	0x20000008
 8003234:	053e2d63 	.word	0x053e2d63

08003238 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f7fe fef4 	bl	8002032 <LL_ADC_IsDisableOngoing>
 800324a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4618      	mov	r0, r3
 8003252:	f7fe fedb 	bl	800200c <LL_ADC_IsEnabled>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d047      	beq.n	80032ec <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d144      	bne.n	80032ec <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 030d 	and.w	r3, r3, #13
 800326c:	2b01      	cmp	r3, #1
 800326e:	d10c      	bne.n	800328a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4618      	mov	r0, r3
 8003276:	f7fe feb5 	bl	8001fe4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2203      	movs	r2, #3
 8003280:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003282:	f7fe fc87 	bl	8001b94 <HAL_GetTick>
 8003286:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003288:	e029      	b.n	80032de <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328e:	f043 0210 	orr.w	r2, r3, #16
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800329a:	f043 0201 	orr.w	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e023      	b.n	80032ee <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032a6:	f7fe fc75 	bl	8001b94 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d914      	bls.n	80032de <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00d      	beq.n	80032de <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c6:	f043 0210 	orr.w	r2, r3, #16
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032d2:	f043 0201 	orr.w	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e007      	b.n	80032ee <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1dc      	bne.n	80032a6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b084      	sub	sp, #16
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003302:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003308:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800330c:	2b00      	cmp	r3, #0
 800330e:	d14b      	bne.n	80033a8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003314:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 0308 	and.w	r3, r3, #8
 8003326:	2b00      	cmp	r3, #0
 8003328:	d021      	beq.n	800336e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fe fd5a 	bl	8001de8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d032      	beq.n	80033a0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d12b      	bne.n	80033a0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800334c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d11f      	bne.n	80033a0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003364:	f043 0201 	orr.w	r2, r3, #1
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	65da      	str	r2, [r3, #92]	; 0x5c
 800336c:	e018      	b.n	80033a0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d111      	bne.n	80033a0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003380:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d105      	bne.n	80033a0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003398:	f043 0201 	orr.w	r2, r3, #1
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f7fd ff45 	bl	8001230 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80033a6:	e00e      	b.n	80033c6 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ac:	f003 0310 	and.w	r3, r3, #16
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d003      	beq.n	80033bc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f7ff f9a2 	bl	80026fe <HAL_ADC_ErrorCallback>
}
 80033ba:	e004      	b.n	80033c6 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	4798      	blx	r3
}
 80033c6:	bf00      	nop
 80033c8:	3710      	adds	r7, #16
 80033ca:	46bd      	mov	sp, r7
 80033cc:	bd80      	pop	{r7, pc}

080033ce <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80033ce:	b580      	push	{r7, lr}
 80033d0:	b084      	sub	sp, #16
 80033d2:	af00      	add	r7, sp, #0
 80033d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f7fd fef3 	bl	80011c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033e2:	bf00      	nop
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b084      	sub	sp, #16
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003408:	f043 0204 	orr.w	r2, r3, #4
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f7ff f974 	bl	80026fe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003416:	bf00      	nop
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <LL_ADC_IsEnabled>:
{
 800341e:	b480      	push	{r7}
 8003420:	b083      	sub	sp, #12
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 0301 	and.w	r3, r3, #1
 800342e:	2b01      	cmp	r3, #1
 8003430:	d101      	bne.n	8003436 <LL_ADC_IsEnabled+0x18>
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <LL_ADC_IsEnabled+0x1a>
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <LL_ADC_StartCalibration>:
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003456:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003460:	4313      	orrs	r3, r2
 8003462:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	609a      	str	r2, [r3, #8]
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr

08003476 <LL_ADC_IsCalibrationOnGoing>:
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003486:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800348a:	d101      	bne.n	8003490 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800348c:	2301      	movs	r3, #1
 800348e:	e000      	b.n	8003492 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <LL_ADC_REG_IsConversionOngoing>:
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d101      	bne.n	80034b6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034b2:	2301      	movs	r3, #1
 80034b4:	e000      	b.n	80034b8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_ADCEx_Calibration_Start+0x1c>
 80034dc:	2302      	movs	r3, #2
 80034de:	e04d      	b.n	800357c <HAL_ADCEx_Calibration_Start+0xb8>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f7ff fea5 	bl	8003238 <ADC_Disable>
 80034ee:	4603      	mov	r3, r0
 80034f0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d136      	bne.n	8003566 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003500:	f023 0302 	bic.w	r3, r3, #2
 8003504:	f043 0202 	orr.w	r2, r3, #2
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	6839      	ldr	r1, [r7, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7ff ff96 	bl	8003444 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003518:	e014      	b.n	8003544 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	3301      	adds	r3, #1
 800351e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	4a18      	ldr	r2, [pc, #96]	; (8003584 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d90d      	bls.n	8003544 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352c:	f023 0312 	bic.w	r3, r3, #18
 8003530:	f043 0210 	orr.w	r2, r3, #16
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e01b      	b.n	800357c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff ff94 	bl	8003476 <LL_ADC_IsCalibrationOnGoing>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e2      	bne.n	800351a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003558:	f023 0303 	bic.w	r3, r3, #3
 800355c:	f043 0201 	orr.w	r2, r3, #1
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	65da      	str	r2, [r3, #92]	; 0x5c
 8003564:	e005      	b.n	8003572 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800356a:	f043 0210 	orr.w	r2, r3, #16
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800357a:	7bfb      	ldrb	r3, [r7, #15]
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	0004de01 	.word	0x0004de01

08003588 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003588:	b590      	push	{r4, r7, lr}
 800358a:	b0a1      	sub	sp, #132	; 0x84
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e0e7      	b.n	8003776 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80035ae:	2300      	movs	r3, #0
 80035b0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80035b2:	2300      	movs	r3, #0
 80035b4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035be:	d102      	bne.n	80035c6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035c0:	4b6f      	ldr	r3, [pc, #444]	; (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80035c2:	60bb      	str	r3, [r7, #8]
 80035c4:	e009      	b.n	80035da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a6e      	ldr	r2, [pc, #440]	; (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d102      	bne.n	80035d6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80035d0:	4b6d      	ldr	r3, [pc, #436]	; (8003788 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80035d2:	60bb      	str	r3, [r7, #8]
 80035d4:	e001      	b.n	80035da <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d10b      	bne.n	80035f8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e4:	f043 0220 	orr.w	r2, r3, #32
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80035f4:	2301      	movs	r3, #1
 80035f6:	e0be      	b.n	8003776 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7ff ff4f 	bl	800349e <LL_ADC_REG_IsConversionOngoing>
 8003600:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4618      	mov	r0, r3
 8003608:	f7ff ff49 	bl	800349e <LL_ADC_REG_IsConversionOngoing>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	f040 80a0 	bne.w	8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 809c 	bne.w	8003754 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003624:	d004      	beq.n	8003630 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a55      	ldr	r2, [pc, #340]	; (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d101      	bne.n	8003634 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003630:	4b56      	ldr	r3, [pc, #344]	; (800378c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003632:	e000      	b.n	8003636 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003634:	4b56      	ldr	r3, [pc, #344]	; (8003790 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003636:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d04b      	beq.n	80036d8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	6859      	ldr	r1, [r3, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003652:	035b      	lsls	r3, r3, #13
 8003654:	430b      	orrs	r3, r1
 8003656:	431a      	orrs	r2, r3
 8003658:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800365a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003664:	d004      	beq.n	8003670 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a45      	ldr	r2, [pc, #276]	; (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d10f      	bne.n	8003690 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003670:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003674:	f7ff fed3 	bl	800341e <LL_ADC_IsEnabled>
 8003678:	4604      	mov	r4, r0
 800367a:	4841      	ldr	r0, [pc, #260]	; (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800367c:	f7ff fecf 	bl	800341e <LL_ADC_IsEnabled>
 8003680:	4603      	mov	r3, r0
 8003682:	4323      	orrs	r3, r4
 8003684:	2b00      	cmp	r3, #0
 8003686:	bf0c      	ite	eq
 8003688:	2301      	moveq	r3, #1
 800368a:	2300      	movne	r3, #0
 800368c:	b2db      	uxtb	r3, r3
 800368e:	e012      	b.n	80036b6 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003690:	483c      	ldr	r0, [pc, #240]	; (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003692:	f7ff fec4 	bl	800341e <LL_ADC_IsEnabled>
 8003696:	4604      	mov	r4, r0
 8003698:	483b      	ldr	r0, [pc, #236]	; (8003788 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800369a:	f7ff fec0 	bl	800341e <LL_ADC_IsEnabled>
 800369e:	4603      	mov	r3, r0
 80036a0:	431c      	orrs	r4, r3
 80036a2:	483c      	ldr	r0, [pc, #240]	; (8003794 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80036a4:	f7ff febb 	bl	800341e <LL_ADC_IsEnabled>
 80036a8:	4603      	mov	r3, r0
 80036aa:	4323      	orrs	r3, r4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	bf0c      	ite	eq
 80036b0:	2301      	moveq	r3, #1
 80036b2:	2300      	movne	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d056      	beq.n	8003768 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80036ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036c2:	f023 030f 	bic.w	r3, r3, #15
 80036c6:	683a      	ldr	r2, [r7, #0]
 80036c8:	6811      	ldr	r1, [r2, #0]
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	6892      	ldr	r2, [r2, #8]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	431a      	orrs	r2, r3
 80036d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036d4:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036d6:	e047      	b.n	8003768 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80036d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036e2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036ec:	d004      	beq.n	80036f8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a23      	ldr	r2, [pc, #140]	; (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d10f      	bne.n	8003718 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80036f8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80036fc:	f7ff fe8f 	bl	800341e <LL_ADC_IsEnabled>
 8003700:	4604      	mov	r4, r0
 8003702:	481f      	ldr	r0, [pc, #124]	; (8003780 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003704:	f7ff fe8b 	bl	800341e <LL_ADC_IsEnabled>
 8003708:	4603      	mov	r3, r0
 800370a:	4323      	orrs	r3, r4
 800370c:	2b00      	cmp	r3, #0
 800370e:	bf0c      	ite	eq
 8003710:	2301      	moveq	r3, #1
 8003712:	2300      	movne	r3, #0
 8003714:	b2db      	uxtb	r3, r3
 8003716:	e012      	b.n	800373e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003718:	481a      	ldr	r0, [pc, #104]	; (8003784 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800371a:	f7ff fe80 	bl	800341e <LL_ADC_IsEnabled>
 800371e:	4604      	mov	r4, r0
 8003720:	4819      	ldr	r0, [pc, #100]	; (8003788 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003722:	f7ff fe7c 	bl	800341e <LL_ADC_IsEnabled>
 8003726:	4603      	mov	r3, r0
 8003728:	431c      	orrs	r4, r3
 800372a:	481a      	ldr	r0, [pc, #104]	; (8003794 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 800372c:	f7ff fe77 	bl	800341e <LL_ADC_IsEnabled>
 8003730:	4603      	mov	r3, r0
 8003732:	4323      	orrs	r3, r4
 8003734:	2b00      	cmp	r3, #0
 8003736:	bf0c      	ite	eq
 8003738:	2301      	moveq	r3, #1
 800373a:	2300      	movne	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d012      	beq.n	8003768 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003742:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800374a:	f023 030f 	bic.w	r3, r3, #15
 800374e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003750:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003752:	e009      	b.n	8003768 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003758:	f043 0220 	orr.w	r2, r3, #32
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003766:	e000      	b.n	800376a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003768:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003772:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003776:	4618      	mov	r0, r3
 8003778:	3784      	adds	r7, #132	; 0x84
 800377a:	46bd      	mov	sp, r7
 800377c:	bd90      	pop	{r4, r7, pc}
 800377e:	bf00      	nop
 8003780:	50000100 	.word	0x50000100
 8003784:	50000400 	.word	0x50000400
 8003788:	50000500 	.word	0x50000500
 800378c:	50000300 	.word	0x50000300
 8003790:	50000700 	.word	0x50000700
 8003794:	50000600 	.word	0x50000600

08003798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003798:	b480      	push	{r7}
 800379a:	b085      	sub	sp, #20
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f003 0307 	and.w	r3, r3, #7
 80037a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037a8:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <__NVIC_SetPriorityGrouping+0x44>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037b4:	4013      	ands	r3, r2
 80037b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037ca:	4a04      	ldr	r2, [pc, #16]	; (80037dc <__NVIC_SetPriorityGrouping+0x44>)
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	60d3      	str	r3, [r2, #12]
}
 80037d0:	bf00      	nop
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000ed00 	.word	0xe000ed00

080037e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037e4:	4b04      	ldr	r3, [pc, #16]	; (80037f8 <__NVIC_GetPriorityGrouping+0x18>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	0a1b      	lsrs	r3, r3, #8
 80037ea:	f003 0307 	and.w	r3, r3, #7
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr
 80037f8:	e000ed00 	.word	0xe000ed00

080037fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380a:	2b00      	cmp	r3, #0
 800380c:	db0b      	blt.n	8003826 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800380e:	79fb      	ldrb	r3, [r7, #7]
 8003810:	f003 021f 	and.w	r2, r3, #31
 8003814:	4907      	ldr	r1, [pc, #28]	; (8003834 <__NVIC_EnableIRQ+0x38>)
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	095b      	lsrs	r3, r3, #5
 800381c:	2001      	movs	r0, #1
 800381e:	fa00 f202 	lsl.w	r2, r0, r2
 8003822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003826:	bf00      	nop
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	e000e100 	.word	0xe000e100

08003838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	6039      	str	r1, [r7, #0]
 8003842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003848:	2b00      	cmp	r3, #0
 800384a:	db0a      	blt.n	8003862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	b2da      	uxtb	r2, r3
 8003850:	490c      	ldr	r1, [pc, #48]	; (8003884 <__NVIC_SetPriority+0x4c>)
 8003852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003856:	0112      	lsls	r2, r2, #4
 8003858:	b2d2      	uxtb	r2, r2
 800385a:	440b      	add	r3, r1
 800385c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003860:	e00a      	b.n	8003878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	4908      	ldr	r1, [pc, #32]	; (8003888 <__NVIC_SetPriority+0x50>)
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	3b04      	subs	r3, #4
 8003870:	0112      	lsls	r2, r2, #4
 8003872:	b2d2      	uxtb	r2, r2
 8003874:	440b      	add	r3, r1
 8003876:	761a      	strb	r2, [r3, #24]
}
 8003878:	bf00      	nop
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	e000e100 	.word	0xe000e100
 8003888:	e000ed00 	.word	0xe000ed00

0800388c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800388c:	b480      	push	{r7}
 800388e:	b089      	sub	sp, #36	; 0x24
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	f1c3 0307 	rsb	r3, r3, #7
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	bf28      	it	cs
 80038aa:	2304      	movcs	r3, #4
 80038ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	3304      	adds	r3, #4
 80038b2:	2b06      	cmp	r3, #6
 80038b4:	d902      	bls.n	80038bc <NVIC_EncodePriority+0x30>
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	3b03      	subs	r3, #3
 80038ba:	e000      	b.n	80038be <NVIC_EncodePriority+0x32>
 80038bc:	2300      	movs	r3, #0
 80038be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038c0:	f04f 32ff 	mov.w	r2, #4294967295
 80038c4:	69bb      	ldr	r3, [r7, #24]
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43da      	mvns	r2, r3
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	401a      	ands	r2, r3
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038d4:	f04f 31ff 	mov.w	r1, #4294967295
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	fa01 f303 	lsl.w	r3, r1, r3
 80038de:	43d9      	mvns	r1, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038e4:	4313      	orrs	r3, r2
         );
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3724      	adds	r7, #36	; 0x24
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr
	...

080038f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3b01      	subs	r3, #1
 8003900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003904:	d301      	bcc.n	800390a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003906:	2301      	movs	r3, #1
 8003908:	e00f      	b.n	800392a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800390a:	4a0a      	ldr	r2, [pc, #40]	; (8003934 <SysTick_Config+0x40>)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	3b01      	subs	r3, #1
 8003910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003912:	210f      	movs	r1, #15
 8003914:	f04f 30ff 	mov.w	r0, #4294967295
 8003918:	f7ff ff8e 	bl	8003838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <SysTick_Config+0x40>)
 800391e:	2200      	movs	r2, #0
 8003920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003922:	4b04      	ldr	r3, [pc, #16]	; (8003934 <SysTick_Config+0x40>)
 8003924:	2207      	movs	r2, #7
 8003926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	e000e010 	.word	0xe000e010

08003938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff ff29 	bl	8003798 <__NVIC_SetPriorityGrouping>
}
 8003946:	bf00      	nop
 8003948:	3708      	adds	r7, #8
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b086      	sub	sp, #24
 8003952:	af00      	add	r7, sp, #0
 8003954:	4603      	mov	r3, r0
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	607a      	str	r2, [r7, #4]
 800395a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800395c:	f7ff ff40 	bl	80037e0 <__NVIC_GetPriorityGrouping>
 8003960:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	68b9      	ldr	r1, [r7, #8]
 8003966:	6978      	ldr	r0, [r7, #20]
 8003968:	f7ff ff90 	bl	800388c <NVIC_EncodePriority>
 800396c:	4602      	mov	r2, r0
 800396e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003972:	4611      	mov	r1, r2
 8003974:	4618      	mov	r0, r3
 8003976:	f7ff ff5f 	bl	8003838 <__NVIC_SetPriority>
}
 800397a:	bf00      	nop
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
 8003988:	4603      	mov	r3, r0
 800398a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800398c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff ff33 	bl	80037fc <__NVIC_EnableIRQ>
}
 8003996:	bf00      	nop
 8003998:	3708      	adds	r7, #8
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}

0800399e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b082      	sub	sp, #8
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7ff ffa4 	bl	80038f4 <SysTick_Config>
 80039ac:	4603      	mov	r3, r0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3708      	adds	r7, #8
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
	...

080039b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e08d      	b.n	8003ae6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	461a      	mov	r2, r3
 80039d0:	4b47      	ldr	r3, [pc, #284]	; (8003af0 <HAL_DMA_Init+0x138>)
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d80f      	bhi.n	80039f6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	4b45      	ldr	r3, [pc, #276]	; (8003af4 <HAL_DMA_Init+0x13c>)
 80039de:	4413      	add	r3, r2
 80039e0:	4a45      	ldr	r2, [pc, #276]	; (8003af8 <HAL_DMA_Init+0x140>)
 80039e2:	fba2 2303 	umull	r2, r3, r2, r3
 80039e6:	091b      	lsrs	r3, r3, #4
 80039e8:	009a      	lsls	r2, r3, #2
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a42      	ldr	r2, [pc, #264]	; (8003afc <HAL_DMA_Init+0x144>)
 80039f2:	641a      	str	r2, [r3, #64]	; 0x40
 80039f4:	e00e      	b.n	8003a14 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	461a      	mov	r2, r3
 80039fc:	4b40      	ldr	r3, [pc, #256]	; (8003b00 <HAL_DMA_Init+0x148>)
 80039fe:	4413      	add	r3, r2
 8003a00:	4a3d      	ldr	r2, [pc, #244]	; (8003af8 <HAL_DMA_Init+0x140>)
 8003a02:	fba2 2303 	umull	r2, r3, r2, r3
 8003a06:	091b      	lsrs	r3, r3, #4
 8003a08:	009a      	lsls	r2, r3, #2
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a3c      	ldr	r2, [pc, #240]	; (8003b04 <HAL_DMA_Init+0x14c>)
 8003a12:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2202      	movs	r2, #2
 8003a18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a2e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	699b      	ldr	r3, [r3, #24]
 8003a4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003a50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fa10 	bl	8003e8c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a74:	d102      	bne.n	8003a7c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685a      	ldr	r2, [r3, #4]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a90:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d010      	beq.n	8003abc <HAL_DMA_Init+0x104>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d80c      	bhi.n	8003abc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003aa2:	6878      	ldr	r0, [r7, #4]
 8003aa4:	f000 fa30 	bl	8003f08 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	e008      	b.n	8003ace <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3710      	adds	r7, #16
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	40020407 	.word	0x40020407
 8003af4:	bffdfff8 	.word	0xbffdfff8
 8003af8:	cccccccd 	.word	0xcccccccd
 8003afc:	40020000 	.word	0x40020000
 8003b00:	bffdfbf8 	.word	0xbffdfbf8
 8003b04:	40020400 	.word	0x40020400

08003b08 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	60f8      	str	r0, [r7, #12]
 8003b10:	60b9      	str	r1, [r7, #8]
 8003b12:	607a      	str	r2, [r7, #4]
 8003b14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b16:	2300      	movs	r3, #0
 8003b18:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <HAL_DMA_Start_IT+0x20>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e066      	b.n	8003bf6 <HAL_DMA_Start_IT+0xee>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d155      	bne.n	8003be8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0201 	bic.w	r2, r2, #1
 8003b58:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	68b9      	ldr	r1, [r7, #8]
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f000 f954 	bl	8003e0e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d008      	beq.n	8003b80 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f042 020e 	orr.w	r2, r2, #14
 8003b7c:	601a      	str	r2, [r3, #0]
 8003b7e:	e00f      	b.n	8003ba0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f022 0204 	bic.w	r2, r2, #4
 8003b8e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f042 020a 	orr.w	r2, r2, #10
 8003b9e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d007      	beq.n	8003bbe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bbc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d007      	beq.n	8003bd6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bd4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f042 0201 	orr.w	r2, r2, #1
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	e005      	b.n	8003bf4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003bf0:	2302      	movs	r3, #2
 8003bf2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}

08003bfe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b085      	sub	sp, #20
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c06:	2300      	movs	r3, #0
 8003c08:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d005      	beq.n	8003c22 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2204      	movs	r2, #4
 8003c1a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	73fb      	strb	r3, [r7, #15]
 8003c20:	e037      	b.n	8003c92 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f022 020e 	bic.w	r2, r2, #14
 8003c30:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c36:	681a      	ldr	r2, [r3, #0]
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c40:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681a      	ldr	r2, [r3, #0]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0201 	bic.w	r2, r2, #1
 8003c50:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c56:	f003 021f 	and.w	r2, r3, #31
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	2101      	movs	r1, #1
 8003c60:	fa01 f202 	lsl.w	r2, r1, r2
 8003c64:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003c6e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00c      	beq.n	8003c92 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c86:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003c90:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ccc:	f003 031f 	and.w	r3, r3, #31
 8003cd0:	2204      	movs	r2, #4
 8003cd2:	409a      	lsls	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d026      	beq.n	8003d2a <HAL_DMA_IRQHandler+0x7a>
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d021      	beq.n	8003d2a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0320 	and.w	r3, r3, #32
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d107      	bne.n	8003d04 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0204 	bic.w	r2, r2, #4
 8003d02:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d08:	f003 021f 	and.w	r2, r3, #31
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d10:	2104      	movs	r1, #4
 8003d12:	fa01 f202 	lsl.w	r2, r1, r2
 8003d16:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d071      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003d28:	e06c      	b.n	8003e04 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	f003 031f 	and.w	r3, r3, #31
 8003d32:	2202      	movs	r2, #2
 8003d34:	409a      	lsls	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d02e      	beq.n	8003d9c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d029      	beq.n	8003d9c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0320 	and.w	r3, r3, #32
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10b      	bne.n	8003d6e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f022 020a 	bic.w	r2, r2, #10
 8003d64:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2201      	movs	r2, #1
 8003d6a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d72:	f003 021f 	and.w	r2, r3, #31
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d7a:	2102      	movs	r1, #2
 8003d7c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d80:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d038      	beq.n	8003e04 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003d9a:	e033      	b.n	8003e04 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da0:	f003 031f 	and.w	r3, r3, #31
 8003da4:	2208      	movs	r2, #8
 8003da6:	409a      	lsls	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4013      	ands	r3, r2
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d02a      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d025      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f022 020e 	bic.w	r2, r2, #14
 8003dc8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	f003 021f 	and.w	r2, r3, #31
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003ddc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2201      	movs	r2, #1
 8003de2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d004      	beq.n	8003e06 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
}
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}

08003e0e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b085      	sub	sp, #20
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	60f8      	str	r0, [r7, #12]
 8003e16:	60b9      	str	r1, [r7, #8]
 8003e18:	607a      	str	r2, [r7, #4]
 8003e1a:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003e24:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d004      	beq.n	8003e38 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003e36:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3c:	f003 021f 	and.w	r2, r3, #31
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	2101      	movs	r1, #1
 8003e46:	fa01 f202 	lsl.w	r2, r1, r2
 8003e4a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	2b10      	cmp	r3, #16
 8003e5a:	d108      	bne.n	8003e6e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003e6c:	e007      	b.n	8003e7e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	60da      	str	r2, [r3, #12]
}
 8003e7e:	bf00      	nop
 8003e80:	3714      	adds	r7, #20
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr
	...

08003e8c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b087      	sub	sp, #28
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4b16      	ldr	r3, [pc, #88]	; (8003ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d802      	bhi.n	8003ea6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003ea0:	4b15      	ldr	r3, [pc, #84]	; (8003ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	e001      	b.n	8003eaa <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003ea6:	4b15      	ldr	r3, [pc, #84]	; (8003efc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003ea8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	3b08      	subs	r3, #8
 8003eb6:	4a12      	ldr	r2, [pc, #72]	; (8003f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ebc:	091b      	lsrs	r3, r3, #4
 8003ebe:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec4:	089b      	lsrs	r3, r3, #2
 8003ec6:	009a      	lsls	r2, r3, #2
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	4413      	add	r3, r2
 8003ecc:	461a      	mov	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a0b      	ldr	r2, [pc, #44]	; (8003f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003ed6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	2201      	movs	r2, #1
 8003ee0:	409a      	lsls	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003ee6:	bf00      	nop
 8003ee8:	371c      	adds	r7, #28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr
 8003ef2:	bf00      	nop
 8003ef4:	40020407 	.word	0x40020407
 8003ef8:	40020800 	.word	0x40020800
 8003efc:	40020820 	.word	0x40020820
 8003f00:	cccccccd 	.word	0xcccccccd
 8003f04:	40020880 	.word	0x40020880

08003f08 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	4b0b      	ldr	r3, [pc, #44]	; (8003f48 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	461a      	mov	r2, r3
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4a08      	ldr	r2, [pc, #32]	; (8003f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003f2a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	f003 031f 	and.w	r3, r3, #31
 8003f34:	2201      	movs	r2, #1
 8003f36:	409a      	lsls	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003f3c:	bf00      	nop
 8003f3e:	3714      	adds	r7, #20
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	1000823f 	.word	0x1000823f
 8003f4c:	40020940 	.word	0x40020940

08003f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003f5e:	e15a      	b.n	8004216 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	2101      	movs	r1, #1
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	fa01 f303 	lsl.w	r3, r1, r3
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 814c 	beq.w	8004210 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f003 0303 	and.w	r3, r3, #3
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d005      	beq.n	8003f90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d130      	bne.n	8003ff2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	2203      	movs	r2, #3
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	43db      	mvns	r3, r3
 8003fa2:	693a      	ldr	r2, [r7, #16]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	005b      	lsls	r3, r3, #1
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	43db      	mvns	r3, r3
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	091b      	lsrs	r3, r3, #4
 8003fdc:	f003 0201 	and.w	r2, r3, #1
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe6:	693a      	ldr	r2, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	693a      	ldr	r2, [r7, #16]
 8003ff0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	2b03      	cmp	r3, #3
 8003ffc:	d017      	beq.n	800402e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	005b      	lsls	r3, r3, #1
 8004008:	2203      	movs	r2, #3
 800400a:	fa02 f303 	lsl.w	r3, r2, r3
 800400e:	43db      	mvns	r3, r3
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	4013      	ands	r3, r2
 8004014:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	689a      	ldr	r2, [r3, #8]
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	fa02 f303 	lsl.w	r3, r2, r3
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f003 0303 	and.w	r3, r3, #3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d123      	bne.n	8004082 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	08da      	lsrs	r2, r3, #3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	3208      	adds	r2, #8
 8004042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004046:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f003 0307 	and.w	r3, r3, #7
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	220f      	movs	r2, #15
 8004052:	fa02 f303 	lsl.w	r3, r2, r3
 8004056:	43db      	mvns	r3, r3
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4013      	ands	r3, r2
 800405c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	697b      	ldr	r3, [r7, #20]
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	693a      	ldr	r2, [r7, #16]
 8004070:	4313      	orrs	r3, r2
 8004072:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	08da      	lsrs	r2, r3, #3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	3208      	adds	r2, #8
 800407c:	6939      	ldr	r1, [r7, #16]
 800407e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	005b      	lsls	r3, r3, #1
 800408c:	2203      	movs	r2, #3
 800408e:	fa02 f303 	lsl.w	r3, r2, r3
 8004092:	43db      	mvns	r3, r3
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	4013      	ands	r3, r2
 8004098:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f003 0203 	and.w	r2, r3, #3
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	005b      	lsls	r3, r3, #1
 80040a6:	fa02 f303 	lsl.w	r3, r2, r3
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 80a6 	beq.w	8004210 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040c4:	4b5b      	ldr	r3, [pc, #364]	; (8004234 <HAL_GPIO_Init+0x2e4>)
 80040c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040c8:	4a5a      	ldr	r2, [pc, #360]	; (8004234 <HAL_GPIO_Init+0x2e4>)
 80040ca:	f043 0301 	orr.w	r3, r3, #1
 80040ce:	6613      	str	r3, [r2, #96]	; 0x60
 80040d0:	4b58      	ldr	r3, [pc, #352]	; (8004234 <HAL_GPIO_Init+0x2e4>)
 80040d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d4:	f003 0301 	and.w	r3, r3, #1
 80040d8:	60bb      	str	r3, [r7, #8]
 80040da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040dc:	4a56      	ldr	r2, [pc, #344]	; (8004238 <HAL_GPIO_Init+0x2e8>)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	089b      	lsrs	r3, r3, #2
 80040e2:	3302      	adds	r3, #2
 80040e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	220f      	movs	r2, #15
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	43db      	mvns	r3, r3
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	4013      	ands	r3, r2
 80040fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004106:	d01f      	beq.n	8004148 <HAL_GPIO_Init+0x1f8>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	4a4c      	ldr	r2, [pc, #304]	; (800423c <HAL_GPIO_Init+0x2ec>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d019      	beq.n	8004144 <HAL_GPIO_Init+0x1f4>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	4a4b      	ldr	r2, [pc, #300]	; (8004240 <HAL_GPIO_Init+0x2f0>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d013      	beq.n	8004140 <HAL_GPIO_Init+0x1f0>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a4a      	ldr	r2, [pc, #296]	; (8004244 <HAL_GPIO_Init+0x2f4>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d00d      	beq.n	800413c <HAL_GPIO_Init+0x1ec>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a49      	ldr	r2, [pc, #292]	; (8004248 <HAL_GPIO_Init+0x2f8>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d007      	beq.n	8004138 <HAL_GPIO_Init+0x1e8>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a48      	ldr	r2, [pc, #288]	; (800424c <HAL_GPIO_Init+0x2fc>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d101      	bne.n	8004134 <HAL_GPIO_Init+0x1e4>
 8004130:	2305      	movs	r3, #5
 8004132:	e00a      	b.n	800414a <HAL_GPIO_Init+0x1fa>
 8004134:	2306      	movs	r3, #6
 8004136:	e008      	b.n	800414a <HAL_GPIO_Init+0x1fa>
 8004138:	2304      	movs	r3, #4
 800413a:	e006      	b.n	800414a <HAL_GPIO_Init+0x1fa>
 800413c:	2303      	movs	r3, #3
 800413e:	e004      	b.n	800414a <HAL_GPIO_Init+0x1fa>
 8004140:	2302      	movs	r3, #2
 8004142:	e002      	b.n	800414a <HAL_GPIO_Init+0x1fa>
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <HAL_GPIO_Init+0x1fa>
 8004148:	2300      	movs	r3, #0
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	f002 0203 	and.w	r2, r2, #3
 8004150:	0092      	lsls	r2, r2, #2
 8004152:	4093      	lsls	r3, r2
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4313      	orrs	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800415a:	4937      	ldr	r1, [pc, #220]	; (8004238 <HAL_GPIO_Init+0x2e8>)
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	089b      	lsrs	r3, r3, #2
 8004160:	3302      	adds	r3, #2
 8004162:	693a      	ldr	r2, [r7, #16]
 8004164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004168:	4b39      	ldr	r3, [pc, #228]	; (8004250 <HAL_GPIO_Init+0x300>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	43db      	mvns	r3, r3
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4013      	ands	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800418c:	4a30      	ldr	r2, [pc, #192]	; (8004250 <HAL_GPIO_Init+0x300>)
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004192:	4b2f      	ldr	r3, [pc, #188]	; (8004250 <HAL_GPIO_Init+0x300>)
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	43db      	mvns	r3, r3
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4013      	ands	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80041b6:	4a26      	ldr	r2, [pc, #152]	; (8004250 <HAL_GPIO_Init+0x300>)
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80041bc:	4b24      	ldr	r3, [pc, #144]	; (8004250 <HAL_GPIO_Init+0x300>)
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	43db      	mvns	r3, r3
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	4013      	ands	r3, r2
 80041ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	4313      	orrs	r3, r2
 80041de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80041e0:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <HAL_GPIO_Init+0x300>)
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80041e6:	4b1a      	ldr	r3, [pc, #104]	; (8004250 <HAL_GPIO_Init+0x300>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	43db      	mvns	r3, r3
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4013      	ands	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800420a:	4a11      	ldr	r2, [pc, #68]	; (8004250 <HAL_GPIO_Init+0x300>)
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	3301      	adds	r3, #1
 8004214:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
 8004220:	2b00      	cmp	r3, #0
 8004222:	f47f ae9d 	bne.w	8003f60 <HAL_GPIO_Init+0x10>
  }
}
 8004226:	bf00      	nop
 8004228:	bf00      	nop
 800422a:	371c      	adds	r7, #28
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	40021000 	.word	0x40021000
 8004238:	40010000 	.word	0x40010000
 800423c:	48000400 	.word	0x48000400
 8004240:	48000800 	.word	0x48000800
 8004244:	48000c00 	.word	0x48000c00
 8004248:	48001000 	.word	0x48001000
 800424c:	48001400 	.word	0x48001400
 8004250:	40010400 	.word	0x40010400

08004254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004254:	b480      	push	{r7}
 8004256:	b083      	sub	sp, #12
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	460b      	mov	r3, r1
 800425e:	807b      	strh	r3, [r7, #2]
 8004260:	4613      	mov	r3, r2
 8004262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004264:	787b      	ldrb	r3, [r7, #1]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800426a:	887a      	ldrh	r2, [r7, #2]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004270:	e002      	b.n	8004278 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004272:	887a      	ldrh	r2, [r7, #2]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004284:	b480      	push	{r7}
 8004286:	b085      	sub	sp, #20
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	460b      	mov	r3, r1
 800428e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	695b      	ldr	r3, [r3, #20]
 8004294:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004296:	887a      	ldrh	r2, [r7, #2]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	4013      	ands	r3, r2
 800429c:	041a      	lsls	r2, r3, #16
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	43d9      	mvns	r1, r3
 80042a2:	887b      	ldrh	r3, [r7, #2]
 80042a4:	400b      	ands	r3, r1
 80042a6:	431a      	orrs	r2, r3
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	619a      	str	r2, [r3, #24]
}
 80042ac:	bf00      	nop
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	4603      	mov	r3, r0
 80042c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80042c2:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042c4:	695a      	ldr	r2, [r3, #20]
 80042c6:	88fb      	ldrh	r3, [r7, #6]
 80042c8:	4013      	ands	r3, r2
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d006      	beq.n	80042dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042ce:	4a05      	ldr	r2, [pc, #20]	; (80042e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042d0:	88fb      	ldrh	r3, [r7, #6]
 80042d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042d4:	88fb      	ldrh	r3, [r7, #6]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f000 f806 	bl	80042e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}
 80042e4:	40010400 	.word	0x40010400

080042e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b083      	sub	sp, #12
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b084      	sub	sp, #16
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0c0      	b.n	8004492 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d106      	bne.n	800432a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004324:	6878      	ldr	r0, [r7, #4]
 8004326:	f008 fb09 	bl	800c93c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2203      	movs	r2, #3
 800432e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4618      	mov	r0, r3
 8004338:	f004 f98d 	bl	8008656 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800433c:	2300      	movs	r3, #0
 800433e:	73fb      	strb	r3, [r7, #15]
 8004340:	e03e      	b.n	80043c0 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004342:	7bfa      	ldrb	r2, [r7, #15]
 8004344:	6879      	ldr	r1, [r7, #4]
 8004346:	4613      	mov	r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	4413      	add	r3, r2
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	440b      	add	r3, r1
 8004350:	3311      	adds	r3, #17
 8004352:	2201      	movs	r2, #1
 8004354:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004356:	7bfa      	ldrb	r2, [r7, #15]
 8004358:	6879      	ldr	r1, [r7, #4]
 800435a:	4613      	mov	r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	4413      	add	r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	440b      	add	r3, r1
 8004364:	3310      	adds	r3, #16
 8004366:	7bfa      	ldrb	r2, [r7, #15]
 8004368:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800436a:	7bfa      	ldrb	r2, [r7, #15]
 800436c:	6879      	ldr	r1, [r7, #4]
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	440b      	add	r3, r1
 8004378:	3313      	adds	r3, #19
 800437a:	2200      	movs	r2, #0
 800437c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800437e:	7bfa      	ldrb	r2, [r7, #15]
 8004380:	6879      	ldr	r1, [r7, #4]
 8004382:	4613      	mov	r3, r2
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	4413      	add	r3, r2
 8004388:	00db      	lsls	r3, r3, #3
 800438a:	440b      	add	r3, r1
 800438c:	3320      	adds	r3, #32
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004392:	7bfa      	ldrb	r2, [r7, #15]
 8004394:	6879      	ldr	r1, [r7, #4]
 8004396:	4613      	mov	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	4413      	add	r3, r2
 800439c:	00db      	lsls	r3, r3, #3
 800439e:	440b      	add	r3, r1
 80043a0:	3324      	adds	r3, #36	; 0x24
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80043a6:	7bfb      	ldrb	r3, [r7, #15]
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	440b      	add	r3, r1
 80043b6:	2200      	movs	r2, #0
 80043b8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	3301      	adds	r3, #1
 80043be:	73fb      	strb	r3, [r7, #15]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	791b      	ldrb	r3, [r3, #4]
 80043c4:	7bfa      	ldrb	r2, [r7, #15]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d3bb      	bcc.n	8004342 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043ca:	2300      	movs	r3, #0
 80043cc:	73fb      	strb	r3, [r7, #15]
 80043ce:	e044      	b.n	800445a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80043d0:	7bfa      	ldrb	r2, [r7, #15]
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	4413      	add	r3, r2
 80043da:	00db      	lsls	r3, r3, #3
 80043dc:	440b      	add	r3, r1
 80043de:	f203 1351 	addw	r3, r3, #337	; 0x151
 80043e2:	2200      	movs	r2, #0
 80043e4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80043e6:	7bfa      	ldrb	r2, [r7, #15]
 80043e8:	6879      	ldr	r1, [r7, #4]
 80043ea:	4613      	mov	r3, r2
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	4413      	add	r3, r2
 80043f0:	00db      	lsls	r3, r3, #3
 80043f2:	440b      	add	r3, r1
 80043f4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80043f8:	7bfa      	ldrb	r2, [r7, #15]
 80043fa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80043fc:	7bfa      	ldrb	r2, [r7, #15]
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	00db      	lsls	r3, r3, #3
 8004408:	440b      	add	r3, r1
 800440a:	f203 1353 	addw	r3, r3, #339	; 0x153
 800440e:	2200      	movs	r2, #0
 8004410:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004412:	7bfa      	ldrb	r2, [r7, #15]
 8004414:	6879      	ldr	r1, [r7, #4]
 8004416:	4613      	mov	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	440b      	add	r3, r1
 8004420:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004428:	7bfa      	ldrb	r2, [r7, #15]
 800442a:	6879      	ldr	r1, [r7, #4]
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	00db      	lsls	r3, r3, #3
 8004434:	440b      	add	r3, r1
 8004436:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800443a:	2200      	movs	r2, #0
 800443c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800443e:	7bfa      	ldrb	r2, [r7, #15]
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	4613      	mov	r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	4413      	add	r3, r2
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	440b      	add	r3, r1
 800444c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004454:	7bfb      	ldrb	r3, [r7, #15]
 8004456:	3301      	adds	r3, #1
 8004458:	73fb      	strb	r3, [r7, #15]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	791b      	ldrb	r3, [r3, #4]
 800445e:	7bfa      	ldrb	r2, [r7, #15]
 8004460:	429a      	cmp	r2, r3
 8004462:	d3b5      	bcc.n	80043d0 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6818      	ldr	r0, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	3304      	adds	r3, #4
 800446c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004470:	f004 f90c 	bl	800868c <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	7a9b      	ldrb	r3, [r3, #10]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d102      	bne.n	8004490 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f001 fc41 	bl	8005d12 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3710      	adds	r7, #16
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b082      	sub	sp, #8
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_PCD_Start+0x16>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e012      	b.n	80044d6 <HAL_PCD_Start+0x3c>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4618      	mov	r0, r3
 80044be:	f004 f8b3 	bl	8008628 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4618      	mov	r0, r3
 80044c8:	f006 fb73 	bl	800abb2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3708      	adds	r7, #8
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}

080044de <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f006 fb78 	bl	800abe0 <USB_ReadInterrupts>
 80044f0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fb04 	bl	8004b0a <PCD_EP_ISR_Handler>

    return;
 8004502:	e110      	b.n	8004726 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800450a:	2b00      	cmp	r3, #0
 800450c:	d013      	beq.n	8004536 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004516:	b29a      	uxth	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004520:	b292      	uxth	r2, r2
 8004522:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f008 faa1 	bl	800ca6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800452c:	2100      	movs	r1, #0
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f8fc 	bl	800472c <HAL_PCD_SetAddress>

    return;
 8004534:	e0f7      	b.n	8004726 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d00c      	beq.n	800455a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004548:	b29a      	uxth	r2, r3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004552:	b292      	uxth	r2, r2
 8004554:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004558:	e0e5      	b.n	8004726 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d00c      	beq.n	800457e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800456c:	b29a      	uxth	r2, r3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004576:	b292      	uxth	r2, r2
 8004578:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800457c:	e0d3      	b.n	8004726 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d034      	beq.n	80045f2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004590:	b29a      	uxth	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f022 0204 	bic.w	r2, r2, #4
 800459a:	b292      	uxth	r2, r2
 800459c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f022 0208 	bic.w	r2, r2, #8
 80045b2:	b292      	uxth	r2, r2
 80045b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d107      	bne.n	80045d2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80045ca:	2100      	movs	r1, #0
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f008 fc41 	bl	800ce54 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f008 fa84 	bl	800cae0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80045ea:	b292      	uxth	r2, r2
 80045ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80045f0:	e099      	b.n	8004726 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d027      	beq.n	800464c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004604:	b29a      	uxth	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f042 0208 	orr.w	r2, r2, #8
 800460e:	b292      	uxth	r2, r2
 8004610:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800461c:	b29a      	uxth	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004626:	b292      	uxth	r2, r2
 8004628:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004634:	b29a      	uxth	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0204 	orr.w	r2, r2, #4
 800463e:	b292      	uxth	r2, r2
 8004640:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f008 fa31 	bl	800caac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800464a:	e06c      	b.n	8004726 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004652:	2b00      	cmp	r3, #0
 8004654:	d040      	beq.n	80046d8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800465e:	b29a      	uxth	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004668:	b292      	uxth	r2, r2
 800466a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8004674:	2b00      	cmp	r3, #0
 8004676:	d12b      	bne.n	80046d0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004680:	b29a      	uxth	r2, r3
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f042 0204 	orr.w	r2, r2, #4
 800468a:	b292      	uxth	r2, r2
 800468c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004698:	b29a      	uxth	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0208 	orr.w	r2, r2, #8
 80046a2:	b292      	uxth	r2, r2
 80046a4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80046b8:	b29b      	uxth	r3, r3
 80046ba:	089b      	lsrs	r3, r3, #2
 80046bc:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80046c6:	2101      	movs	r1, #1
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f008 fbc3 	bl	800ce54 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 80046ce:	e02a      	b.n	8004726 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f008 f9eb 	bl	800caac <HAL_PCD_SuspendCallback>
    return;
 80046d6:	e026      	b.n	8004726 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d00f      	beq.n	8004702 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80046ea:	b29a      	uxth	r2, r3
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046f4:	b292      	uxth	r2, r2
 80046f6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f008 f9a9 	bl	800ca52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004700:	e011      	b.n	8004726 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004708:	2b00      	cmp	r3, #0
 800470a:	d00c      	beq.n	8004726 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004714:	b29a      	uxth	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800471e:	b292      	uxth	r2, r2
 8004720:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004724:	bf00      	nop
  }
}
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <HAL_PCD_SetAddress+0x1a>
 8004742:	2302      	movs	r3, #2
 8004744:	e012      	b.n	800476c <HAL_PCD_SetAddress+0x40>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	78fa      	ldrb	r2, [r7, #3]
 8004752:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	78fa      	ldrb	r2, [r7, #3]
 800475a:	4611      	mov	r1, r2
 800475c:	4618      	mov	r0, r3
 800475e:	f006 fa14 	bl	800ab8a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	4608      	mov	r0, r1
 800477e:	4611      	mov	r1, r2
 8004780:	461a      	mov	r2, r3
 8004782:	4603      	mov	r3, r0
 8004784:	70fb      	strb	r3, [r7, #3]
 8004786:	460b      	mov	r3, r1
 8004788:	803b      	strh	r3, [r7, #0]
 800478a:	4613      	mov	r3, r2
 800478c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004792:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004796:	2b00      	cmp	r3, #0
 8004798:	da0e      	bge.n	80047b8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800479a:	78fb      	ldrb	r3, [r7, #3]
 800479c:	f003 0207 	and.w	r2, r3, #7
 80047a0:	4613      	mov	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4413      	add	r3, r2
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	3310      	adds	r3, #16
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	4413      	add	r3, r2
 80047ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2201      	movs	r2, #1
 80047b4:	705a      	strb	r2, [r3, #1]
 80047b6:	e00e      	b.n	80047d6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	f003 0207 	and.w	r2, r3, #7
 80047be:	4613      	mov	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	4413      	add	r3, r2
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	4413      	add	r3, r2
 80047ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80047d6:	78fb      	ldrb	r3, [r7, #3]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80047e2:	883a      	ldrh	r2, [r7, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	78ba      	ldrb	r2, [r7, #2]
 80047ec:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80047ee:	78bb      	ldrb	r3, [r7, #2]
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d102      	bne.n	80047fa <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_PCD_EP_Open+0x94>
 8004804:	2302      	movs	r3, #2
 8004806:	e00e      	b.n	8004826 <HAL_PCD_EP_Open+0xb2>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68f9      	ldr	r1, [r7, #12]
 8004816:	4618      	mov	r0, r3
 8004818:	f003 ff56 	bl	80086c8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8004824:	7afb      	ldrb	r3, [r7, #11]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b084      	sub	sp, #16
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
 8004836:	460b      	mov	r3, r1
 8004838:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800483a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800483e:	2b00      	cmp	r3, #0
 8004840:	da0e      	bge.n	8004860 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004842:	78fb      	ldrb	r3, [r7, #3]
 8004844:	f003 0207 	and.w	r2, r3, #7
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	00db      	lsls	r3, r3, #3
 8004850:	3310      	adds	r3, #16
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	4413      	add	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2201      	movs	r2, #1
 800485c:	705a      	strb	r2, [r3, #1]
 800485e:	e00e      	b.n	800487e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	f003 0207 	and.w	r2, r3, #7
 8004866:	4613      	mov	r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	00db      	lsls	r3, r3, #3
 800486e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	4413      	add	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800487e:	78fb      	ldrb	r3, [r7, #3]
 8004880:	f003 0307 	and.w	r3, r3, #7
 8004884:	b2da      	uxtb	r2, r3
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004890:	2b01      	cmp	r3, #1
 8004892:	d101      	bne.n	8004898 <HAL_PCD_EP_Close+0x6a>
 8004894:	2302      	movs	r3, #2
 8004896:	e00e      	b.n	80048b6 <HAL_PCD_EP_Close+0x88>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	68f9      	ldr	r1, [r7, #12]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f004 fad2 	bl	8008e50 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}

080048be <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b086      	sub	sp, #24
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	607a      	str	r2, [r7, #4]
 80048c8:	603b      	str	r3, [r7, #0]
 80048ca:	460b      	mov	r3, r1
 80048cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80048ce:	7afb      	ldrb	r3, [r7, #11]
 80048d0:	f003 0207 	and.w	r2, r3, #7
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	00db      	lsls	r3, r3, #3
 80048dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80048e0:	68fa      	ldr	r2, [r7, #12]
 80048e2:	4413      	add	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	2200      	movs	r2, #0
 80048f6:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	2200      	movs	r2, #0
 80048fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048fe:	7afb      	ldrb	r3, [r7, #11]
 8004900:	f003 0307 	and.w	r3, r3, #7
 8004904:	b2da      	uxtb	r2, r3
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6979      	ldr	r1, [r7, #20]
 8004910:	4618      	mov	r0, r3
 8004912:	f004 fc8a 	bl	800922a <USB_EPStartXfer>

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
 8004928:	460b      	mov	r3, r1
 800492a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	f003 0207 	and.w	r2, r3, #7
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	4613      	mov	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	00db      	lsls	r3, r3, #3
 800493c:	440b      	add	r3, r1
 800493e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8004942:	681b      	ldr	r3, [r3, #0]
}
 8004944:	4618      	mov	r0, r3
 8004946:	370c      	adds	r7, #12
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b086      	sub	sp, #24
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	607a      	str	r2, [r7, #4]
 800495a:	603b      	str	r3, [r7, #0]
 800495c:	460b      	mov	r3, r1
 800495e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004960:	7afb      	ldrb	r3, [r7, #11]
 8004962:	f003 0207 	and.w	r2, r3, #7
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	3310      	adds	r3, #16
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	683a      	ldr	r2, [r7, #0]
 800498e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	2200      	movs	r2, #0
 8004994:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	2201      	movs	r2, #1
 800499a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800499c:	7afb      	ldrb	r3, [r7, #11]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	b2da      	uxtb	r2, r3
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6979      	ldr	r1, [r7, #20]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f004 fc3b 	bl	800922a <USB_EPStartXfer>

  return HAL_OK;
 80049b4:	2300      	movs	r3, #0
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	3718      	adds	r7, #24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b084      	sub	sp, #16
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	460b      	mov	r3, r1
 80049c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	7912      	ldrb	r2, [r2, #4]
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d901      	bls.n	80049dc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e03e      	b.n	8004a5a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	da0e      	bge.n	8004a02 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049e4:	78fb      	ldrb	r3, [r7, #3]
 80049e6:	f003 0207 	and.w	r2, r3, #7
 80049ea:	4613      	mov	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	3310      	adds	r3, #16
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	4413      	add	r3, r2
 80049f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2201      	movs	r2, #1
 80049fe:	705a      	strb	r2, [r3, #1]
 8004a00:	e00c      	b.n	8004a1c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	4613      	mov	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4413      	add	r3, r2
 8004a0a:	00db      	lsls	r3, r3, #3
 8004a0c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	4413      	add	r3, r2
 8004a14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a22:	78fb      	ldrb	r3, [r7, #3]
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_PCD_EP_SetStall+0x7e>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e00e      	b.n	8004a5a <HAL_PCD_EP_SetStall+0x9c>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68f9      	ldr	r1, [r7, #12]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f005 ff9e 	bl	800a98c <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b084      	sub	sp, #16
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
 8004a6a:	460b      	mov	r3, r1
 8004a6c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a6e:	78fb      	ldrb	r3, [r7, #3]
 8004a70:	f003 030f 	and.w	r3, r3, #15
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	7912      	ldrb	r2, [r2, #4]
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d901      	bls.n	8004a80 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e040      	b.n	8004b02 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	da0e      	bge.n	8004aa6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	f003 0207 	and.w	r2, r3, #7
 8004a8e:	4613      	mov	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	4413      	add	r3, r2
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	3310      	adds	r3, #16
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	705a      	strb	r2, [r3, #1]
 8004aa4:	e00e      	b.n	8004ac4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aa6:	78fb      	ldrb	r3, [r7, #3]
 8004aa8:	f003 0207 	and.w	r2, r3, #7
 8004aac:	4613      	mov	r3, r2
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	4413      	add	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	4413      	add	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004aca:	78fb      	ldrb	r3, [r7, #3]
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	b2da      	uxtb	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_PCD_EP_ClrStall+0x82>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e00e      	b.n	8004b02 <HAL_PCD_EP_ClrStall+0xa0>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68f9      	ldr	r1, [r7, #12]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f005 ff9b 	bl	800aa2e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004b0a:	b580      	push	{r7, lr}
 8004b0c:	b096      	sub	sp, #88	; 0x58
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004b12:	e3ae      	b.n	8005272 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004b1c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004b20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8004b2e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	f040 8170 	bne.w	8004e18 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8004b38:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004b3c:	f003 0310 	and.w	r3, r3, #16
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d14d      	bne.n	8004be0 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	881b      	ldrh	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004b50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b54:	81fb      	strh	r3, [r7, #14]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	89fb      	ldrh	r3, [r7, #14]
 8004b5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3310      	adds	r3, #16
 8004b6c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	461a      	mov	r2, r3
 8004b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	00db      	lsls	r3, r3, #3
 8004b80:	4413      	add	r3, r2
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	6812      	ldr	r2, [r2, #0]
 8004b86:	4413      	add	r3, r2
 8004b88:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b8c:	881b      	ldrh	r3, [r3, #0]
 8004b8e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004b92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b94:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8004b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b98:	695a      	ldr	r2, [r3, #20]
 8004b9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b9c:	69db      	ldr	r3, [r3, #28]
 8004b9e:	441a      	add	r2, r3
 8004ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ba2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f007 ff39 	bl	800ca1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	7b1b      	ldrb	r3, [r3, #12]
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	f000 835d 	beq.w	8005272 <PCD_EP_ISR_Handler+0x768>
 8004bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bba:	699b      	ldr	r3, [r3, #24]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	f040 8358 	bne.w	8005272 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	7b1b      	ldrb	r3, [r3, #12]
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	b292      	uxth	r2, r2
 8004bd4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	731a      	strb	r2, [r3, #12]
 8004bde:	e348      	b.n	8005272 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004be6:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004bf2:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d032      	beq.n	8004c64 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	461a      	mov	r2, r3
 8004c0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	4413      	add	r3, r2
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6812      	ldr	r2, [r2, #0]
 8004c16:	4413      	add	r3, r2
 8004c18:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c1c:	881b      	ldrh	r3, [r3, #0]
 8004c1e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004c22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c24:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8004c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c32:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c36:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004c38:	b29b      	uxth	r3, r3
 8004c3a:	f006 f823 	bl	800ac84 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	881b      	ldrh	r3, [r3, #0]
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	823b      	strh	r3, [r7, #16]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	8a3a      	ldrh	r2, [r7, #16]
 8004c54:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c58:	b292      	uxth	r2, r2
 8004c5a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f007 feb1 	bl	800c9c4 <HAL_PCD_SetupStageCallback>
 8004c62:	e306      	b.n	8005272 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004c64:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f280 8302 	bge.w	8005272 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	881b      	ldrh	r3, [r3, #0]
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	83fb      	strh	r3, [r7, #30]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	8bfa      	ldrh	r2, [r7, #30]
 8004c84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004c88:	b292      	uxth	r2, r2
 8004c8a:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	461a      	mov	r2, r3
 8004c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	00db      	lsls	r3, r3, #3
 8004c9e:	4413      	add	r3, r2
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	6812      	ldr	r2, [r2, #0]
 8004ca4:	4413      	add	r3, r2
 8004ca6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004caa:	881b      	ldrh	r3, [r3, #0]
 8004cac:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8004cb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cb6:	69db      	ldr	r3, [r3, #28]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d019      	beq.n	8004cf0 <PCD_EP_ISR_Handler+0x1e6>
 8004cbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cbe:	695b      	ldr	r3, [r3, #20]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d015      	beq.n	8004cf0 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6818      	ldr	r0, [r3, #0]
 8004cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cca:	6959      	ldr	r1, [r3, #20]
 8004ccc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cce:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004cd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cd2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	f005 ffd5 	bl	800ac84 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cdc:	695a      	ldr	r2, [r3, #20]
 8004cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ce0:	69db      	ldr	r3, [r3, #28]
 8004ce2:	441a      	add	r2, r3
 8004ce4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ce6:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004ce8:	2100      	movs	r1, #0
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f007 fe7c 	bl	800c9e8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004cfa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004cfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	f040 82b5 	bne.w	8005272 <PCD_EP_ISR_Handler+0x768>
 8004d08:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004d0c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004d10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004d14:	f000 82ad 	beq.w	8005272 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	61bb      	str	r3, [r7, #24]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	461a      	mov	r2, r3
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004d36:	617b      	str	r3, [r7, #20]
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	881b      	ldrh	r3, [r3, #0]
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d42:	b29a      	uxth	r2, r3
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	801a      	strh	r2, [r3, #0]
 8004d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d4a:	691b      	ldr	r3, [r3, #16]
 8004d4c:	2b3e      	cmp	r3, #62	; 0x3e
 8004d4e:	d91d      	bls.n	8004d8c <PCD_EP_ISR_Handler+0x282>
 8004d50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	095b      	lsrs	r3, r3, #5
 8004d56:	647b      	str	r3, [r7, #68]	; 0x44
 8004d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	f003 031f 	and.w	r3, r3, #31
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d102      	bne.n	8004d6a <PCD_EP_ISR_Handler+0x260>
 8004d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d66:	3b01      	subs	r3, #1
 8004d68:	647b      	str	r3, [r7, #68]	; 0x44
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	881b      	ldrh	r3, [r3, #0]
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	029b      	lsls	r3, r3, #10
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	b29b      	uxth	r3, r3
 8004d7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	801a      	strh	r2, [r3, #0]
 8004d8a:	e026      	b.n	8004dda <PCD_EP_ISR_Handler+0x2d0>
 8004d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10a      	bne.n	8004daa <PCD_EP_ISR_Handler+0x2a0>
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	881b      	ldrh	r3, [r3, #0]
 8004d98:	b29b      	uxth	r3, r3
 8004d9a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d9e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	801a      	strh	r2, [r3, #0]
 8004da8:	e017      	b.n	8004dda <PCD_EP_ISR_Handler+0x2d0>
 8004daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	085b      	lsrs	r3, r3, #1
 8004db0:	647b      	str	r3, [r7, #68]	; 0x44
 8004db2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	f003 0301 	and.w	r3, r3, #1
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d002      	beq.n	8004dc4 <PCD_EP_ISR_Handler+0x2ba>
 8004dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	647b      	str	r3, [r7, #68]	; 0x44
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	881b      	ldrh	r3, [r3, #0]
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dcc:	b29b      	uxth	r3, r3
 8004dce:	029b      	lsls	r3, r3, #10
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	881b      	ldrh	r3, [r3, #0]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dea:	827b      	strh	r3, [r7, #18]
 8004dec:	8a7b      	ldrh	r3, [r7, #18]
 8004dee:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004df2:	827b      	strh	r3, [r7, #18]
 8004df4:	8a7b      	ldrh	r3, [r7, #18]
 8004df6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004dfa:	827b      	strh	r3, [r7, #18]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	8a7b      	ldrh	r3, [r7, #18]
 8004e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	8013      	strh	r3, [r2, #0]
 8004e16:	e22c      	b.n	8005272 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	881b      	ldrh	r3, [r3, #0]
 8004e28:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004e2c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f280 80f6 	bge.w	8005022 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4413      	add	r3, r2
 8004e44:	881b      	ldrh	r3, [r3, #0]
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004e64:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e68:	b292      	uxth	r2, r2
 8004e6a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004e6c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004e70:	4613      	mov	r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	4413      	add	r3, r2
 8004e76:	00db      	lsls	r3, r3, #3
 8004e78:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	4413      	add	r3, r2
 8004e80:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004e82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e84:	7b1b      	ldrb	r3, [r3, #12]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d123      	bne.n	8004ed2 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	461a      	mov	r2, r3
 8004e96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e98:	781b      	ldrb	r3, [r3, #0]
 8004e9a:	00db      	lsls	r3, r3, #3
 8004e9c:	4413      	add	r3, r2
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	6812      	ldr	r2, [r2, #0]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eae:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8004eb2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	f000 808e 	beq.w	8004fd8 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6818      	ldr	r0, [r3, #0]
 8004ec0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ec2:	6959      	ldr	r1, [r3, #20]
 8004ec4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ec6:	88da      	ldrh	r2, [r3, #6]
 8004ec8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004ecc:	f005 feda 	bl	800ac84 <USB_ReadPMA>
 8004ed0:	e082      	b.n	8004fd8 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ed4:	78db      	ldrb	r3, [r3, #3]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d10a      	bne.n	8004ef0 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004eda:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ede:	461a      	mov	r2, r3
 8004ee0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f9d3 	bl	800528e <HAL_PCD_EP_DB_Receive>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004eee:	e073      	b.n	8004fd8 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	461a      	mov	r2, r3
 8004f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f16:	781b      	ldrb	r3, [r3, #0]
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	441a      	add	r2, r3
 8004f1c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004f20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f28:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f2c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	881b      	ldrh	r3, [r3, #0]
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d022      	beq.n	8004f94 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	461a      	mov	r2, r3
 8004f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	00db      	lsls	r3, r3, #3
 8004f60:	4413      	add	r3, r2
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	6812      	ldr	r2, [r2, #0]
 8004f66:	4413      	add	r3, r2
 8004f68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f6c:	881b      	ldrh	r3, [r3, #0]
 8004f6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f72:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004f76:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d02c      	beq.n	8004fd8 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f84:	6959      	ldr	r1, [r3, #20]
 8004f86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f88:	891a      	ldrh	r2, [r3, #8]
 8004f8a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004f8e:	f005 fe79 	bl	800ac84 <USB_ReadPMA>
 8004f92:	e021      	b.n	8004fd8 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	00db      	lsls	r3, r3, #3
 8004fa6:	4413      	add	r3, r2
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6812      	ldr	r2, [r2, #0]
 8004fac:	4413      	add	r3, r2
 8004fae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004fb2:	881b      	ldrh	r3, [r3, #0]
 8004fb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004fb8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004fbc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d009      	beq.n	8004fd8 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6818      	ldr	r0, [r3, #0]
 8004fc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fca:	6959      	ldr	r1, [r3, #20]
 8004fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fce:	895a      	ldrh	r2, [r3, #10]
 8004fd0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004fd4:	f005 fe56 	bl	800ac84 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fda:	69da      	ldr	r2, [r3, #28]
 8004fdc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004fe0:	441a      	add	r2, r3
 8004fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fe4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004fe8:	695a      	ldr	r2, [r3, #20]
 8004fea:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004fee:	441a      	add	r2, r3
 8004ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ff2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004ff4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ff6:	699b      	ldr	r3, [r3, #24]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d005      	beq.n	8005008 <PCD_EP_ISR_Handler+0x4fe>
 8004ffc:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8005000:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	429a      	cmp	r2, r3
 8005006:	d206      	bcs.n	8005016 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8005008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	4619      	mov	r1, r3
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f007 fcea 	bl	800c9e8 <HAL_PCD_DataOutStageCallback>
 8005014:	e005      	b.n	8005022 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800501c:	4618      	mov	r0, r3
 800501e:	f004 f904 	bl	800922a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8005022:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800502a:	2b00      	cmp	r3, #0
 800502c:	f000 8121 	beq.w	8005272 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8005030:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	00db      	lsls	r3, r3, #3
 800503c:	3310      	adds	r3, #16
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	4413      	add	r3, r2
 8005042:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	461a      	mov	r2, r3
 800504a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4413      	add	r3, r2
 8005052:	881b      	ldrh	r3, [r3, #0]
 8005054:	b29b      	uxth	r3, r3
 8005056:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800505a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800505e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	441a      	add	r2, r3
 8005070:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800507c:	b29b      	uxth	r3, r3
 800507e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005082:	78db      	ldrb	r3, [r3, #3]
 8005084:	2b01      	cmp	r3, #1
 8005086:	f040 80a2 	bne.w	80051ce <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 800508a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800508c:	2200      	movs	r2, #0
 800508e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005092:	7b1b      	ldrb	r3, [r3, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	f000 8093 	beq.w	80051c0 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800509a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800509e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d046      	beq.n	8005134 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80050a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050a8:	785b      	ldrb	r3, [r3, #1]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d126      	bne.n	80050fc <PCD_EP_ISR_Handler+0x5f2>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	627b      	str	r3, [r7, #36]	; 0x24
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050bc:	b29b      	uxth	r3, r3
 80050be:	461a      	mov	r2, r3
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	4413      	add	r3, r2
 80050c4:	627b      	str	r3, [r7, #36]	; 0x24
 80050c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	00da      	lsls	r2, r3, #3
 80050cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ce:	4413      	add	r3, r2
 80050d0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80050d4:	623b      	str	r3, [r7, #32]
 80050d6:	6a3b      	ldr	r3, [r7, #32]
 80050d8:	881b      	ldrh	r3, [r3, #0]
 80050da:	b29b      	uxth	r3, r3
 80050dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	801a      	strh	r2, [r3, #0]
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	881b      	ldrh	r3, [r3, #0]
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050f4:	b29a      	uxth	r2, r3
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	801a      	strh	r2, [r3, #0]
 80050fa:	e061      	b.n	80051c0 <PCD_EP_ISR_Handler+0x6b6>
 80050fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80050fe:	785b      	ldrb	r3, [r3, #1]
 8005100:	2b01      	cmp	r3, #1
 8005102:	d15d      	bne.n	80051c0 <PCD_EP_ISR_Handler+0x6b6>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005112:	b29b      	uxth	r3, r3
 8005114:	461a      	mov	r2, r3
 8005116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005118:	4413      	add	r3, r2
 800511a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800511c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	00da      	lsls	r2, r3, #3
 8005122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005124:	4413      	add	r3, r2
 8005126:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800512a:	62bb      	str	r3, [r7, #40]	; 0x28
 800512c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800512e:	2200      	movs	r2, #0
 8005130:	801a      	strh	r2, [r3, #0]
 8005132:	e045      	b.n	80051c0 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	63fb      	str	r3, [r7, #60]	; 0x3c
 800513a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800513c:	785b      	ldrb	r3, [r3, #1]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d126      	bne.n	8005190 <PCD_EP_ISR_Handler+0x686>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	637b      	str	r3, [r7, #52]	; 0x34
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005150:	b29b      	uxth	r3, r3
 8005152:	461a      	mov	r2, r3
 8005154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005156:	4413      	add	r3, r2
 8005158:	637b      	str	r3, [r7, #52]	; 0x34
 800515a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	00da      	lsls	r2, r3, #3
 8005160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005162:	4413      	add	r3, r2
 8005164:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005168:	633b      	str	r3, [r7, #48]	; 0x30
 800516a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800516c:	881b      	ldrh	r3, [r3, #0]
 800516e:	b29b      	uxth	r3, r3
 8005170:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005174:	b29a      	uxth	r2, r3
 8005176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005178:	801a      	strh	r2, [r3, #0]
 800517a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517c:	881b      	ldrh	r3, [r3, #0]
 800517e:	b29b      	uxth	r3, r3
 8005180:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005184:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005188:	b29a      	uxth	r2, r3
 800518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518c:	801a      	strh	r2, [r3, #0]
 800518e:	e017      	b.n	80051c0 <PCD_EP_ISR_Handler+0x6b6>
 8005190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005192:	785b      	ldrb	r3, [r3, #1]
 8005194:	2b01      	cmp	r3, #1
 8005196:	d113      	bne.n	80051c0 <PCD_EP_ISR_Handler+0x6b6>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	461a      	mov	r2, r3
 80051a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a6:	4413      	add	r3, r2
 80051a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	00da      	lsls	r2, r3, #3
 80051b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b2:	4413      	add	r3, r2
 80051b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80051b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80051ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051bc:	2200      	movs	r2, #0
 80051be:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80051c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	4619      	mov	r1, r3
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f007 fc29 	bl	800ca1e <HAL_PCD_DataInStageCallback>
 80051cc:	e051      	b.n	8005272 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80051ce:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80051d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d144      	bne.n	8005264 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	461a      	mov	r2, r3
 80051e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	4413      	add	r3, r2
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6812      	ldr	r2, [r2, #0]
 80051f2:	4413      	add	r3, r2
 80051f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051f8:	881b      	ldrh	r3, [r3, #0]
 80051fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051fe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8005202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800520a:	429a      	cmp	r2, r3
 800520c:	d907      	bls.n	800521e <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800520e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005210:	699a      	ldr	r2, [r3, #24]
 8005212:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005216:	1ad2      	subs	r2, r2, r3
 8005218:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800521a:	619a      	str	r2, [r3, #24]
 800521c:	e002      	b.n	8005224 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800521e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005220:	2200      	movs	r2, #0
 8005222:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8005224:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005226:	699b      	ldr	r3, [r3, #24]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d106      	bne.n	800523a <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800522c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	4619      	mov	r1, r3
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f007 fbf3 	bl	800ca1e <HAL_PCD_DataInStageCallback>
 8005238:	e01b      	b.n	8005272 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800523a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800523c:	695a      	ldr	r2, [r3, #20]
 800523e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005242:	441a      	add	r2, r3
 8005244:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005246:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8005248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005250:	441a      	add	r2, r3
 8005252:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005254:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800525c:	4618      	mov	r0, r3
 800525e:	f003 ffe4 	bl	800922a <USB_EPStartXfer>
 8005262:	e006      	b.n	8005272 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005264:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8005268:	461a      	mov	r2, r3
 800526a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f000 f917 	bl	80054a0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800527a:	b29b      	uxth	r3, r3
 800527c:	b21b      	sxth	r3, r3
 800527e:	2b00      	cmp	r3, #0
 8005280:	f6ff ac48 	blt.w	8004b14 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3758      	adds	r7, #88	; 0x58
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800528e:	b580      	push	{r7, lr}
 8005290:	b088      	sub	sp, #32
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
 8005296:	60b9      	str	r1, [r7, #8]
 8005298:	4613      	mov	r3, r2
 800529a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800529c:	88fb      	ldrh	r3, [r7, #6]
 800529e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d07c      	beq.n	80053a0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052ae:	b29b      	uxth	r3, r3
 80052b0:	461a      	mov	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	4413      	add	r3, r2
 80052ba:	68fa      	ldr	r2, [r7, #12]
 80052bc:	6812      	ldr	r2, [r2, #0]
 80052be:	4413      	add	r3, r2
 80052c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80052c4:	881b      	ldrh	r3, [r3, #0]
 80052c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80052ca:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	699a      	ldr	r2, [r3, #24]
 80052d0:	8b7b      	ldrh	r3, [r7, #26]
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d306      	bcc.n	80052e4 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	699a      	ldr	r2, [r3, #24]
 80052da:	8b7b      	ldrh	r3, [r7, #26]
 80052dc:	1ad2      	subs	r2, r2, r3
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	619a      	str	r2, [r3, #24]
 80052e2:	e002      	b.n	80052ea <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	2200      	movs	r2, #0
 80052e8:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d123      	bne.n	800533a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	461a      	mov	r2, r3
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	781b      	ldrb	r3, [r3, #0]
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	4413      	add	r3, r2
 8005300:	881b      	ldrh	r3, [r3, #0]
 8005302:	b29b      	uxth	r3, r3
 8005304:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530c:	833b      	strh	r3, [r7, #24]
 800530e:	8b3b      	ldrh	r3, [r7, #24]
 8005310:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005314:	833b      	strh	r3, [r7, #24]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	461a      	mov	r2, r3
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	441a      	add	r2, r3
 8005324:	8b3b      	ldrh	r3, [r7, #24]
 8005326:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800532a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800532e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005332:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005336:	b29b      	uxth	r3, r3
 8005338:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800533a:	88fb      	ldrh	r3, [r7, #6]
 800533c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005340:	2b00      	cmp	r3, #0
 8005342:	d01f      	beq.n	8005384 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	461a      	mov	r2, r3
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	b29b      	uxth	r3, r3
 8005356:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800535a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535e:	82fb      	strh	r3, [r7, #22]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	461a      	mov	r2, r3
 8005366:	68bb      	ldr	r3, [r7, #8]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	441a      	add	r2, r3
 800536e:	8afb      	ldrh	r3, [r7, #22]
 8005370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800537c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005380:	b29b      	uxth	r3, r3
 8005382:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005384:	8b7b      	ldrh	r3, [r7, #26]
 8005386:	2b00      	cmp	r3, #0
 8005388:	f000 8085 	beq.w	8005496 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	6959      	ldr	r1, [r3, #20]
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	891a      	ldrh	r2, [r3, #8]
 8005398:	8b7b      	ldrh	r3, [r7, #26]
 800539a:	f005 fc73 	bl	800ac84 <USB_ReadPMA>
 800539e:	e07a      	b.n	8005496 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	461a      	mov	r2, r3
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	4413      	add	r3, r2
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	6812      	ldr	r2, [r2, #0]
 80053b8:	4413      	add	r3, r2
 80053ba:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80053be:	881b      	ldrh	r3, [r3, #0]
 80053c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053c4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	699a      	ldr	r2, [r3, #24]
 80053ca:	8b7b      	ldrh	r3, [r7, #26]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d306      	bcc.n	80053de <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	699a      	ldr	r2, [r3, #24]
 80053d4:	8b7b      	ldrh	r3, [r7, #26]
 80053d6:	1ad2      	subs	r2, r2, r3
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	619a      	str	r2, [r3, #24]
 80053dc:	e002      	b.n	80053e4 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	2200      	movs	r2, #0
 80053e2:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d123      	bne.n	8005434 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	781b      	ldrb	r3, [r3, #0]
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	881b      	ldrh	r3, [r3, #0]
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005406:	83fb      	strh	r3, [r7, #30]
 8005408:	8bfb      	ldrh	r3, [r7, #30]
 800540a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800540e:	83fb      	strh	r3, [r7, #30]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	461a      	mov	r2, r3
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	441a      	add	r2, r3
 800541e:	8bfb      	ldrh	r3, [r7, #30]
 8005420:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005424:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005428:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800542c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005430:	b29b      	uxth	r3, r3
 8005432:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005434:	88fb      	ldrh	r3, [r7, #6]
 8005436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543a:	2b00      	cmp	r3, #0
 800543c:	d11f      	bne.n	800547e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	461a      	mov	r2, r3
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4413      	add	r3, r2
 800544c:	881b      	ldrh	r3, [r3, #0]
 800544e:	b29b      	uxth	r3, r3
 8005450:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005454:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005458:	83bb      	strh	r3, [r7, #28]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	461a      	mov	r2, r3
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	441a      	add	r2, r3
 8005468:	8bbb      	ldrh	r3, [r7, #28]
 800546a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800546e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005476:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800547a:	b29b      	uxth	r3, r3
 800547c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800547e:	8b7b      	ldrh	r3, [r7, #26]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d008      	beq.n	8005496 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6818      	ldr	r0, [r3, #0]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	6959      	ldr	r1, [r3, #20]
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	895a      	ldrh	r2, [r3, #10]
 8005490:	8b7b      	ldrh	r3, [r7, #26]
 8005492:	f005 fbf7 	bl	800ac84 <USB_ReadPMA>
    }
  }

  return count;
 8005496:	8b7b      	ldrh	r3, [r7, #26]
}
 8005498:	4618      	mov	r0, r3
 800549a:	3720      	adds	r7, #32
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b0a4      	sub	sp, #144	; 0x90
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	60b9      	str	r1, [r7, #8]
 80054aa:	4613      	mov	r3, r2
 80054ac:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80054ae:	88fb      	ldrh	r3, [r7, #6]
 80054b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	f000 81db 	beq.w	8005870 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	461a      	mov	r2, r3
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	4413      	add	r3, r2
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	6812      	ldr	r2, [r2, #0]
 80054d2:	4413      	add	r3, r2
 80054d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80054d8:	881b      	ldrh	r3, [r3, #0]
 80054da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80054de:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	699a      	ldr	r2, [r3, #24]
 80054e6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d907      	bls.n	80054fe <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	699a      	ldr	r2, [r3, #24]
 80054f2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80054f6:	1ad2      	subs	r2, r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	619a      	str	r2, [r3, #24]
 80054fc:	e002      	b.n	8005504 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2200      	movs	r2, #0
 8005502:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	2b00      	cmp	r3, #0
 800550a:	f040 80b9 	bne.w	8005680 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	785b      	ldrb	r3, [r3, #1]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d126      	bne.n	8005564 <HAL_PCD_EP_DB_Transmit+0xc4>
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005524:	b29b      	uxth	r3, r3
 8005526:	461a      	mov	r2, r3
 8005528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552a:	4413      	add	r3, r2
 800552c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	00da      	lsls	r2, r3, #3
 8005534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005536:	4413      	add	r3, r2
 8005538:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800553c:	62bb      	str	r3, [r7, #40]	; 0x28
 800553e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005540:	881b      	ldrh	r3, [r3, #0]
 8005542:	b29b      	uxth	r3, r3
 8005544:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005548:	b29a      	uxth	r2, r3
 800554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800554c:	801a      	strh	r2, [r3, #0]
 800554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005550:	881b      	ldrh	r3, [r3, #0]
 8005552:	b29b      	uxth	r3, r3
 8005554:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005558:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800555c:	b29a      	uxth	r2, r3
 800555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005560:	801a      	strh	r2, [r3, #0]
 8005562:	e01a      	b.n	800559a <HAL_PCD_EP_DB_Transmit+0xfa>
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	785b      	ldrb	r3, [r3, #1]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d116      	bne.n	800559a <HAL_PCD_EP_DB_Transmit+0xfa>
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	637b      	str	r3, [r7, #52]	; 0x34
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800557a:	b29b      	uxth	r3, r3
 800557c:	461a      	mov	r2, r3
 800557e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005580:	4413      	add	r3, r2
 8005582:	637b      	str	r3, [r7, #52]	; 0x34
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	00da      	lsls	r2, r3, #3
 800558a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558c:	4413      	add	r3, r2
 800558e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005592:	633b      	str	r3, [r7, #48]	; 0x30
 8005594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005596:	2200      	movs	r2, #0
 8005598:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	785b      	ldrb	r3, [r3, #1]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d126      	bne.n	80055f6 <HAL_PCD_EP_DB_Transmit+0x156>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	61fb      	str	r3, [r7, #28]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	461a      	mov	r2, r3
 80055ba:	69fb      	ldr	r3, [r7, #28]
 80055bc:	4413      	add	r3, r2
 80055be:	61fb      	str	r3, [r7, #28]
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	00da      	lsls	r2, r3, #3
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	4413      	add	r3, r2
 80055ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055ce:	61bb      	str	r3, [r7, #24]
 80055d0:	69bb      	ldr	r3, [r7, #24]
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80055da:	b29a      	uxth	r2, r3
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	801a      	strh	r2, [r3, #0]
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055ee:	b29a      	uxth	r2, r3
 80055f0:	69bb      	ldr	r3, [r7, #24]
 80055f2:	801a      	strh	r2, [r3, #0]
 80055f4:	e017      	b.n	8005626 <HAL_PCD_EP_DB_Transmit+0x186>
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	785b      	ldrb	r3, [r3, #1]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d113      	bne.n	8005626 <HAL_PCD_EP_DB_Transmit+0x186>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005606:	b29b      	uxth	r3, r3
 8005608:	461a      	mov	r2, r3
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	4413      	add	r3, r2
 800560e:	627b      	str	r3, [r7, #36]	; 0x24
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	00da      	lsls	r2, r3, #3
 8005616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005618:	4413      	add	r3, r2
 800561a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800561e:	623b      	str	r3, [r7, #32]
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	2200      	movs	r2, #0
 8005624:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	4619      	mov	r1, r3
 800562c:	68f8      	ldr	r0, [r7, #12]
 800562e:	f007 f9f6 	bl	800ca1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005632:	88fb      	ldrh	r3, [r7, #6]
 8005634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005638:	2b00      	cmp	r3, #0
 800563a:	f000 82fa 	beq.w	8005c32 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	461a      	mov	r2, r3
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	4413      	add	r3, r2
 800564c:	881b      	ldrh	r3, [r3, #0]
 800564e:	b29b      	uxth	r3, r3
 8005650:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005654:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005658:	82fb      	strh	r3, [r7, #22]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	441a      	add	r2, r3
 8005668:	8afb      	ldrh	r3, [r7, #22]
 800566a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800566e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005672:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005676:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800567a:	b29b      	uxth	r3, r3
 800567c:	8013      	strh	r3, [r2, #0]
 800567e:	e2d8      	b.n	8005c32 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005680:	88fb      	ldrh	r3, [r7, #6]
 8005682:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d021      	beq.n	80056ce <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	881b      	ldrh	r3, [r3, #0]
 800569a:	b29b      	uxth	r3, r3
 800569c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056a4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	461a      	mov	r2, r3
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	441a      	add	r2, r3
 80056b6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80056ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	f040 82ac 	bne.w	8005c32 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	695a      	ldr	r2, [r3, #20]
 80056de:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80056e2:	441a      	add	r2, r3
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	69da      	ldr	r2, [r3, #28]
 80056ec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80056f0:	441a      	add	r2, r3
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	6a1a      	ldr	r2, [r3, #32]
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	429a      	cmp	r2, r3
 8005700:	d30b      	bcc.n	800571a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	691b      	ldr	r3, [r3, #16]
 8005706:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	6a1a      	ldr	r2, [r3, #32]
 800570e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005712:	1ad2      	subs	r2, r2, r3
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	621a      	str	r2, [r3, #32]
 8005718:	e017      	b.n	800574a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800571a:	68bb      	ldr	r3, [r7, #8]
 800571c:	6a1b      	ldr	r3, [r3, #32]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d108      	bne.n	8005734 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005722:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005726:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	2200      	movs	r2, #0
 800572e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005732:	e00a      	b.n	800574a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	2200      	movs	r2, #0
 8005738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	6a1b      	ldr	r3, [r3, #32]
 8005740:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	2200      	movs	r2, #0
 8005748:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	785b      	ldrb	r3, [r3, #1]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d165      	bne.n	800581e <HAL_PCD_EP_DB_Transmit+0x37e>
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005760:	b29b      	uxth	r3, r3
 8005762:	461a      	mov	r2, r3
 8005764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005766:	4413      	add	r3, r2
 8005768:	63fb      	str	r3, [r7, #60]	; 0x3c
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	00da      	lsls	r2, r3, #3
 8005770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005772:	4413      	add	r3, r2
 8005774:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005778:	63bb      	str	r3, [r7, #56]	; 0x38
 800577a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577c:	881b      	ldrh	r3, [r3, #0]
 800577e:	b29b      	uxth	r3, r3
 8005780:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005784:	b29a      	uxth	r2, r3
 8005786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005788:	801a      	strh	r2, [r3, #0]
 800578a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800578e:	2b3e      	cmp	r3, #62	; 0x3e
 8005790:	d91d      	bls.n	80057ce <HAL_PCD_EP_DB_Transmit+0x32e>
 8005792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005796:	095b      	lsrs	r3, r3, #5
 8005798:	64bb      	str	r3, [r7, #72]	; 0x48
 800579a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800579e:	f003 031f 	and.w	r3, r3, #31
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d102      	bne.n	80057ac <HAL_PCD_EP_DB_Transmit+0x30c>
 80057a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057a8:	3b01      	subs	r3, #1
 80057aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80057ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ae:	881b      	ldrh	r3, [r3, #0]
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	029b      	lsls	r3, r3, #10
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	4313      	orrs	r3, r2
 80057bc:	b29b      	uxth	r3, r3
 80057be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ca:	801a      	strh	r2, [r3, #0]
 80057cc:	e044      	b.n	8005858 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80057ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <HAL_PCD_EP_DB_Transmit+0x34c>
 80057d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d8:	881b      	ldrh	r3, [r3, #0]
 80057da:	b29b      	uxth	r3, r3
 80057dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e8:	801a      	strh	r2, [r3, #0]
 80057ea:	e035      	b.n	8005858 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80057ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057f0:	085b      	lsrs	r3, r3, #1
 80057f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80057f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057f8:	f003 0301 	and.w	r3, r3, #1
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <HAL_PCD_EP_DB_Transmit+0x366>
 8005800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005802:	3301      	adds	r3, #1
 8005804:	64bb      	str	r3, [r7, #72]	; 0x48
 8005806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	b29a      	uxth	r2, r3
 800580c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800580e:	b29b      	uxth	r3, r3
 8005810:	029b      	lsls	r3, r3, #10
 8005812:	b29b      	uxth	r3, r3
 8005814:	4313      	orrs	r3, r2
 8005816:	b29a      	uxth	r2, r3
 8005818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800581a:	801a      	strh	r2, [r3, #0]
 800581c:	e01c      	b.n	8005858 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	785b      	ldrb	r3, [r3, #1]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d118      	bne.n	8005858 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	647b      	str	r3, [r7, #68]	; 0x44
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005834:	b29b      	uxth	r3, r3
 8005836:	461a      	mov	r2, r3
 8005838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800583a:	4413      	add	r3, r2
 800583c:	647b      	str	r3, [r7, #68]	; 0x44
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	00da      	lsls	r2, r3, #3
 8005844:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005846:	4413      	add	r3, r2
 8005848:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800584c:	643b      	str	r3, [r7, #64]	; 0x40
 800584e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005852:	b29a      	uxth	r2, r3
 8005854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005856:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6818      	ldr	r0, [r3, #0]
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	6959      	ldr	r1, [r3, #20]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	891a      	ldrh	r2, [r3, #8]
 8005864:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005868:	b29b      	uxth	r3, r3
 800586a:	f005 f9c9 	bl	800ac00 <USB_WritePMA>
 800586e:	e1e0      	b.n	8005c32 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005878:	b29b      	uxth	r3, r3
 800587a:	461a      	mov	r2, r3
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	4413      	add	r3, r2
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	6812      	ldr	r2, [r2, #0]
 8005888:	4413      	add	r3, r2
 800588a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800588e:	881b      	ldrh	r3, [r3, #0]
 8005890:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005894:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	699a      	ldr	r2, [r3, #24]
 800589c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d307      	bcc.n	80058b4 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80058a4:	68bb      	ldr	r3, [r7, #8]
 80058a6:	699a      	ldr	r2, [r3, #24]
 80058a8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80058ac:	1ad2      	subs	r2, r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	619a      	str	r2, [r3, #24]
 80058b2:	e002      	b.n	80058ba <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2200      	movs	r2, #0
 80058b8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f040 80c0 	bne.w	8005a44 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	785b      	ldrb	r3, [r3, #1]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d126      	bne.n	800591a <HAL_PCD_EP_DB_Transmit+0x47a>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058da:	b29b      	uxth	r3, r3
 80058dc:	461a      	mov	r2, r3
 80058de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058e0:	4413      	add	r3, r2
 80058e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	00da      	lsls	r2, r3, #3
 80058ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80058ec:	4413      	add	r3, r2
 80058ee:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80058f2:	67bb      	str	r3, [r7, #120]	; 0x78
 80058f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058f6:	881b      	ldrh	r3, [r3, #0]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058fe:	b29a      	uxth	r2, r3
 8005900:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005902:	801a      	strh	r2, [r3, #0]
 8005904:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005906:	881b      	ldrh	r3, [r3, #0]
 8005908:	b29b      	uxth	r3, r3
 800590a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800590e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005912:	b29a      	uxth	r2, r3
 8005914:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005916:	801a      	strh	r2, [r3, #0]
 8005918:	e01a      	b.n	8005950 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	785b      	ldrb	r3, [r3, #1]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d116      	bne.n	8005950 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	667b      	str	r3, [r7, #100]	; 0x64
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005930:	b29b      	uxth	r3, r3
 8005932:	461a      	mov	r2, r3
 8005934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005936:	4413      	add	r3, r2
 8005938:	667b      	str	r3, [r7, #100]	; 0x64
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	00da      	lsls	r2, r3, #3
 8005940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005942:	4413      	add	r3, r2
 8005944:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005948:	663b      	str	r3, [r7, #96]	; 0x60
 800594a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800594c:	2200      	movs	r2, #0
 800594e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	677b      	str	r3, [r7, #116]	; 0x74
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	785b      	ldrb	r3, [r3, #1]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d12b      	bne.n	80059b6 <HAL_PCD_EP_DB_Transmit+0x516>
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800596c:	b29b      	uxth	r3, r3
 800596e:	461a      	mov	r2, r3
 8005970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005972:	4413      	add	r3, r2
 8005974:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	00da      	lsls	r2, r3, #3
 800597c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800597e:	4413      	add	r3, r2
 8005980:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005984:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005988:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800598c:	881b      	ldrh	r3, [r3, #0]
 800598e:	b29b      	uxth	r3, r3
 8005990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005994:	b29a      	uxth	r2, r3
 8005996:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800599a:	801a      	strh	r2, [r3, #0]
 800599c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80059b2:	801a      	strh	r2, [r3, #0]
 80059b4:	e017      	b.n	80059e6 <HAL_PCD_EP_DB_Transmit+0x546>
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	785b      	ldrb	r3, [r3, #1]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d113      	bne.n	80059e6 <HAL_PCD_EP_DB_Transmit+0x546>
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	461a      	mov	r2, r3
 80059ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059cc:	4413      	add	r3, r2
 80059ce:	677b      	str	r3, [r7, #116]	; 0x74
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	00da      	lsls	r2, r3, #3
 80059d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059d8:	4413      	add	r3, r2
 80059da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80059de:	673b      	str	r3, [r7, #112]	; 0x70
 80059e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059e2:	2200      	movs	r2, #0
 80059e4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	781b      	ldrb	r3, [r3, #0]
 80059ea:	4619      	mov	r1, r3
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f007 f816 	bl	800ca1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80059f2:	88fb      	ldrh	r3, [r7, #6]
 80059f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f040 811a 	bne.w	8005c32 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	781b      	ldrb	r3, [r3, #0]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	4413      	add	r3, r2
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a18:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	461a      	mov	r2, r3
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	009b      	lsls	r3, r3, #2
 8005a28:	441a      	add	r2, r3
 8005a2a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8005a2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	8013      	strh	r3, [r2, #0]
 8005a42:	e0f6      	b.n	8005c32 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005a44:	88fb      	ldrh	r3, [r7, #6]
 8005a46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d121      	bne.n	8005a92 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	461a      	mov	r2, r3
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4413      	add	r3, r2
 8005a5c:	881b      	ldrh	r3, [r3, #0]
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a68:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	461a      	mov	r2, r3
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	009b      	lsls	r3, r3, #2
 8005a78:	441a      	add	r2, r3
 8005a7a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8005a7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a8e:	b29b      	uxth	r3, r3
 8005a90:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	f040 80ca 	bne.w	8005c32 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	695a      	ldr	r2, [r3, #20]
 8005aa2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005aa6:	441a      	add	r2, r3
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	69da      	ldr	r2, [r3, #28]
 8005ab0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005ab4:	441a      	add	r2, r3
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	6a1a      	ldr	r2, [r3, #32]
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d30b      	bcc.n	8005ade <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	6a1a      	ldr	r2, [r3, #32]
 8005ad2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ad6:	1ad2      	subs	r2, r2, r3
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	621a      	str	r2, [r3, #32]
 8005adc:	e017      	b.n	8005b0e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	6a1b      	ldr	r3, [r3, #32]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d108      	bne.n	8005af8 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8005ae6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005aea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8005af6:	e00a      	b.n	8005b0e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	6a1b      	ldr	r3, [r3, #32]
 8005afc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2200      	movs	r2, #0
 8005b04:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	657b      	str	r3, [r7, #84]	; 0x54
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	785b      	ldrb	r3, [r3, #1]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d165      	bne.n	8005be8 <HAL_PCD_EP_DB_Transmit+0x748>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b30:	4413      	add	r3, r2
 8005b32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	00da      	lsls	r2, r3, #3
 8005b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005b42:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b4e:	b29a      	uxth	r2, r3
 8005b50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b52:	801a      	strh	r2, [r3, #0]
 8005b54:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b58:	2b3e      	cmp	r3, #62	; 0x3e
 8005b5a:	d91d      	bls.n	8005b98 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8005b5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b60:	095b      	lsrs	r3, r3, #5
 8005b62:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b68:	f003 031f 	and.w	r3, r3, #31
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d102      	bne.n	8005b76 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8005b70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b72:	3b01      	subs	r3, #1
 8005b74:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b78:	881b      	ldrh	r3, [r3, #0]
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	029b      	lsls	r3, r3, #10
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	4313      	orrs	r3, r2
 8005b86:	b29b      	uxth	r3, r3
 8005b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b90:	b29a      	uxth	r2, r3
 8005b92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005b94:	801a      	strh	r2, [r3, #0]
 8005b96:	e041      	b.n	8005c1c <HAL_PCD_EP_DB_Transmit+0x77c>
 8005b98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10a      	bne.n	8005bb6 <HAL_PCD_EP_DB_Transmit+0x716>
 8005ba0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005ba2:	881b      	ldrh	r3, [r3, #0]
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bb2:	801a      	strh	r2, [r3, #0]
 8005bb4:	e032      	b.n	8005c1c <HAL_PCD_EP_DB_Transmit+0x77c>
 8005bb6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bba:	085b      	lsrs	r3, r3, #1
 8005bbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bbe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_PCD_EP_DB_Transmit+0x730>
 8005bca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bcc:	3301      	adds	r3, #1
 8005bce:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005bd2:	881b      	ldrh	r3, [r3, #0]
 8005bd4:	b29a      	uxth	r2, r3
 8005bd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	029b      	lsls	r3, r3, #10
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	4313      	orrs	r3, r2
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005be4:	801a      	strh	r2, [r3, #0]
 8005be6:	e019      	b.n	8005c1c <HAL_PCD_EP_DB_Transmit+0x77c>
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	785b      	ldrb	r3, [r3, #1]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d115      	bne.n	8005c1c <HAL_PCD_EP_DB_Transmit+0x77c>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bfe:	4413      	add	r3, r2
 8005c00:	657b      	str	r3, [r7, #84]	; 0x54
 8005c02:	68bb      	ldr	r3, [r7, #8]
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	00da      	lsls	r2, r3, #3
 8005c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005c10:	653b      	str	r3, [r7, #80]	; 0x50
 8005c12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c1a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6818      	ldr	r0, [r3, #0]
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	6959      	ldr	r1, [r3, #20]
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	895a      	ldrh	r2, [r3, #10]
 8005c28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	f004 ffe7 	bl	800ac00 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	461a      	mov	r2, r3
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	4413      	add	r3, r2
 8005c40:	881b      	ldrh	r3, [r3, #0]
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c4c:	82bb      	strh	r3, [r7, #20]
 8005c4e:	8abb      	ldrh	r3, [r7, #20]
 8005c50:	f083 0310 	eor.w	r3, r3, #16
 8005c54:	82bb      	strh	r3, [r7, #20]
 8005c56:	8abb      	ldrh	r3, [r7, #20]
 8005c58:	f083 0320 	eor.w	r3, r3, #32
 8005c5c:	82bb      	strh	r3, [r7, #20]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	461a      	mov	r2, r3
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	441a      	add	r2, r3
 8005c6c:	8abb      	ldrh	r3, [r7, #20]
 8005c6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8005c82:	2300      	movs	r3, #0
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	3790      	adds	r7, #144	; 0x90
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}

08005c8c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	b087      	sub	sp, #28
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	607b      	str	r3, [r7, #4]
 8005c96:	460b      	mov	r3, r1
 8005c98:	817b      	strh	r3, [r7, #10]
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005c9e:	897b      	ldrh	r3, [r7, #10]
 8005ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00b      	beq.n	8005cc2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005caa:	897b      	ldrh	r3, [r7, #10]
 8005cac:	f003 0207 	and.w	r2, r3, #7
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	00db      	lsls	r3, r3, #3
 8005cb8:	3310      	adds	r3, #16
 8005cba:	68fa      	ldr	r2, [r7, #12]
 8005cbc:	4413      	add	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]
 8005cc0:	e009      	b.n	8005cd6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005cc2:	897a      	ldrh	r2, [r7, #10]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	00db      	lsls	r3, r3, #3
 8005ccc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8005cd6:	893b      	ldrh	r3, [r7, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d107      	bne.n	8005cec <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	b29a      	uxth	r2, r3
 8005ce6:	697b      	ldr	r3, [r7, #20]
 8005ce8:	80da      	strh	r2, [r3, #6]
 8005cea:	e00b      	b.n	8005d04 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	b29a      	uxth	r2, r3
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	0c1b      	lsrs	r3, r3, #16
 8005cfe:	b29a      	uxth	r2, r3
 8005d00:	697b      	ldr	r3, [r7, #20]
 8005d02:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	371c      	adds	r7, #28
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b085      	sub	sp, #20
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	f043 0301 	orr.w	r3, r3, #1
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	f043 0302 	orr.w	r3, r3, #2
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3714      	adds	r7, #20
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d64:	4770      	bx	lr
	...

08005d68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d141      	bne.n	8005dfa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005d76:	4b4b      	ldr	r3, [pc, #300]	; (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d82:	d131      	bne.n	8005de8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005d84:	4b47      	ldr	r3, [pc, #284]	; (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d8a:	4a46      	ldr	r2, [pc, #280]	; (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d94:	4b43      	ldr	r3, [pc, #268]	; (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d9c:	4a41      	ldr	r2, [pc, #260]	; (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005d9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005da2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005da4:	4b40      	ldr	r3, [pc, #256]	; (8005ea8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2232      	movs	r2, #50	; 0x32
 8005daa:	fb02 f303 	mul.w	r3, r2, r3
 8005dae:	4a3f      	ldr	r2, [pc, #252]	; (8005eac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005db0:	fba2 2303 	umull	r2, r3, r2, r3
 8005db4:	0c9b      	lsrs	r3, r3, #18
 8005db6:	3301      	adds	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dba:	e002      	b.n	8005dc2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3b01      	subs	r3, #1
 8005dc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005dc2:	4b38      	ldr	r3, [pc, #224]	; (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dce:	d102      	bne.n	8005dd6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1f2      	bne.n	8005dbc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005dd6:	4b33      	ldr	r3, [pc, #204]	; (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de2:	d158      	bne.n	8005e96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e057      	b.n	8005e98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005de8:	4b2e      	ldr	r3, [pc, #184]	; (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005dee:	4a2d      	ldr	r2, [pc, #180]	; (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005df0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005df4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005df8:	e04d      	b.n	8005e96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e00:	d141      	bne.n	8005e86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005e02:	4b28      	ldr	r3, [pc, #160]	; (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e0e:	d131      	bne.n	8005e74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e10:	4b24      	ldr	r3, [pc, #144]	; (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e16:	4a23      	ldr	r2, [pc, #140]	; (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e20:	4b20      	ldr	r3, [pc, #128]	; (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e28:	4a1e      	ldr	r2, [pc, #120]	; (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005e30:	4b1d      	ldr	r3, [pc, #116]	; (8005ea8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2232      	movs	r2, #50	; 0x32
 8005e36:	fb02 f303 	mul.w	r3, r2, r3
 8005e3a:	4a1c      	ldr	r2, [pc, #112]	; (8005eac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e40:	0c9b      	lsrs	r3, r3, #18
 8005e42:	3301      	adds	r3, #1
 8005e44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e46:	e002      	b.n	8005e4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005e4e:	4b15      	ldr	r3, [pc, #84]	; (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e5a:	d102      	bne.n	8005e62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1f2      	bne.n	8005e48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005e62:	4b10      	ldr	r3, [pc, #64]	; (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e6e:	d112      	bne.n	8005e96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e011      	b.n	8005e98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005e74:	4b0b      	ldr	r3, [pc, #44]	; (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e7a:	4a0a      	ldr	r2, [pc, #40]	; (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005e84:	e007      	b.n	8005e96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e86:	4b07      	ldr	r3, [pc, #28]	; (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005e8e:	4a05      	ldr	r2, [pc, #20]	; (8005ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005e90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e94:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3714      	adds	r7, #20
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr
 8005ea4:	40007000 	.word	0x40007000
 8005ea8:	20000008 	.word	0x20000008
 8005eac:	431bde83 	.word	0x431bde83

08005eb0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005eb4:	4b05      	ldr	r3, [pc, #20]	; (8005ecc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	4a04      	ldr	r2, [pc, #16]	; (8005ecc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005eba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ebe:	6093      	str	r3, [r2, #8]
}
 8005ec0:	bf00      	nop
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40007000 	.word	0x40007000

08005ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b088      	sub	sp, #32
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e2fe      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d075      	beq.n	8005fda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eee:	4b97      	ldr	r3, [pc, #604]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 030c 	and.w	r3, r3, #12
 8005ef6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ef8:	4b94      	ldr	r3, [pc, #592]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f003 0303 	and.w	r3, r3, #3
 8005f00:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005f02:	69bb      	ldr	r3, [r7, #24]
 8005f04:	2b0c      	cmp	r3, #12
 8005f06:	d102      	bne.n	8005f0e <HAL_RCC_OscConfig+0x3e>
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d002      	beq.n	8005f14 <HAL_RCC_OscConfig+0x44>
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	d10b      	bne.n	8005f2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f14:	4b8d      	ldr	r3, [pc, #564]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d05b      	beq.n	8005fd8 <HAL_RCC_OscConfig+0x108>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d157      	bne.n	8005fd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e2d9      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f34:	d106      	bne.n	8005f44 <HAL_RCC_OscConfig+0x74>
 8005f36:	4b85      	ldr	r3, [pc, #532]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a84      	ldr	r2, [pc, #528]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8005f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	e01d      	b.n	8005f80 <HAL_RCC_OscConfig+0xb0>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f4c:	d10c      	bne.n	8005f68 <HAL_RCC_OscConfig+0x98>
 8005f4e:	4b7f      	ldr	r3, [pc, #508]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a7e      	ldr	r2, [pc, #504]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8005f54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	4b7c      	ldr	r3, [pc, #496]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a7b      	ldr	r2, [pc, #492]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8005f60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f64:	6013      	str	r3, [r2, #0]
 8005f66:	e00b      	b.n	8005f80 <HAL_RCC_OscConfig+0xb0>
 8005f68:	4b78      	ldr	r3, [pc, #480]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a77      	ldr	r2, [pc, #476]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8005f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f72:	6013      	str	r3, [r2, #0]
 8005f74:	4b75      	ldr	r3, [pc, #468]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a74      	ldr	r2, [pc, #464]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8005f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d013      	beq.n	8005fb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f88:	f7fb fe04 	bl	8001b94 <HAL_GetTick>
 8005f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005f8e:	e008      	b.n	8005fa2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f90:	f7fb fe00 	bl	8001b94 <HAL_GetTick>
 8005f94:	4602      	mov	r2, r0
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	1ad3      	subs	r3, r2, r3
 8005f9a:	2b64      	cmp	r3, #100	; 0x64
 8005f9c:	d901      	bls.n	8005fa2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e29e      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fa2:	4b6a      	ldr	r3, [pc, #424]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d0f0      	beq.n	8005f90 <HAL_RCC_OscConfig+0xc0>
 8005fae:	e014      	b.n	8005fda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb0:	f7fb fdf0 	bl	8001b94 <HAL_GetTick>
 8005fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005fb6:	e008      	b.n	8005fca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fb8:	f7fb fdec 	bl	8001b94 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	2b64      	cmp	r3, #100	; 0x64
 8005fc4:	d901      	bls.n	8005fca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e28a      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005fca:	4b60      	ldr	r3, [pc, #384]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1f0      	bne.n	8005fb8 <HAL_RCC_OscConfig+0xe8>
 8005fd6:	e000      	b.n	8005fda <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d075      	beq.n	80060d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fe6:	4b59      	ldr	r3, [pc, #356]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f003 030c 	and.w	r3, r3, #12
 8005fee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ff0:	4b56      	ldr	r3, [pc, #344]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f003 0303 	and.w	r3, r3, #3
 8005ff8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	2b0c      	cmp	r3, #12
 8005ffe:	d102      	bne.n	8006006 <HAL_RCC_OscConfig+0x136>
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2b02      	cmp	r3, #2
 8006004:	d002      	beq.n	800600c <HAL_RCC_OscConfig+0x13c>
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	2b04      	cmp	r3, #4
 800600a:	d11f      	bne.n	800604c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800600c:	4b4f      	ldr	r3, [pc, #316]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006014:	2b00      	cmp	r3, #0
 8006016:	d005      	beq.n	8006024 <HAL_RCC_OscConfig+0x154>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d101      	bne.n	8006024 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e25d      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006024:	4b49      	ldr	r3, [pc, #292]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	061b      	lsls	r3, r3, #24
 8006032:	4946      	ldr	r1, [pc, #280]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8006034:	4313      	orrs	r3, r2
 8006036:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006038:	4b45      	ldr	r3, [pc, #276]	; (8006150 <HAL_RCC_OscConfig+0x280>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4618      	mov	r0, r3
 800603e:	f7fb fd5d 	bl	8001afc <HAL_InitTick>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d043      	beq.n	80060d0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e249      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d023      	beq.n	800609c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006054:	4b3d      	ldr	r3, [pc, #244]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a3c      	ldr	r2, [pc, #240]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 800605a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800605e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006060:	f7fb fd98 	bl	8001b94 <HAL_GetTick>
 8006064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006066:	e008      	b.n	800607a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006068:	f7fb fd94 	bl	8001b94 <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b02      	cmp	r3, #2
 8006074:	d901      	bls.n	800607a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e232      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800607a:	4b34      	ldr	r3, [pc, #208]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0f0      	beq.n	8006068 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006086:	4b31      	ldr	r3, [pc, #196]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	061b      	lsls	r3, r3, #24
 8006094:	492d      	ldr	r1, [pc, #180]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8006096:	4313      	orrs	r3, r2
 8006098:	604b      	str	r3, [r1, #4]
 800609a:	e01a      	b.n	80060d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800609c:	4b2b      	ldr	r3, [pc, #172]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a2a      	ldr	r2, [pc, #168]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 80060a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a8:	f7fb fd74 	bl	8001b94 <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060ae:	e008      	b.n	80060c2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060b0:	f7fb fd70 	bl	8001b94 <HAL_GetTick>
 80060b4:	4602      	mov	r2, r0
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	1ad3      	subs	r3, r2, r3
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d901      	bls.n	80060c2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e20e      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80060c2:	4b22      	ldr	r3, [pc, #136]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1f0      	bne.n	80060b0 <HAL_RCC_OscConfig+0x1e0>
 80060ce:	e000      	b.n	80060d2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060d0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0308 	and.w	r3, r3, #8
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d041      	beq.n	8006162 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d01c      	beq.n	8006120 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060e6:	4b19      	ldr	r3, [pc, #100]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 80060e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060ec:	4a17      	ldr	r2, [pc, #92]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 80060ee:	f043 0301 	orr.w	r3, r3, #1
 80060f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060f6:	f7fb fd4d 	bl	8001b94 <HAL_GetTick>
 80060fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80060fc:	e008      	b.n	8006110 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80060fe:	f7fb fd49 	bl	8001b94 <HAL_GetTick>
 8006102:	4602      	mov	r2, r0
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	2b02      	cmp	r3, #2
 800610a:	d901      	bls.n	8006110 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e1e7      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006110:	4b0e      	ldr	r3, [pc, #56]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8006112:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	2b00      	cmp	r3, #0
 800611c:	d0ef      	beq.n	80060fe <HAL_RCC_OscConfig+0x22e>
 800611e:	e020      	b.n	8006162 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006120:	4b0a      	ldr	r3, [pc, #40]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8006122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006126:	4a09      	ldr	r2, [pc, #36]	; (800614c <HAL_RCC_OscConfig+0x27c>)
 8006128:	f023 0301 	bic.w	r3, r3, #1
 800612c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006130:	f7fb fd30 	bl	8001b94 <HAL_GetTick>
 8006134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006136:	e00d      	b.n	8006154 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006138:	f7fb fd2c 	bl	8001b94 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	2b02      	cmp	r3, #2
 8006144:	d906      	bls.n	8006154 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e1ca      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
 800614a:	bf00      	nop
 800614c:	40021000 	.word	0x40021000
 8006150:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006154:	4b8c      	ldr	r3, [pc, #560]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1ea      	bne.n	8006138 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f003 0304 	and.w	r3, r3, #4
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 80a6 	beq.w	80062bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006170:	2300      	movs	r3, #0
 8006172:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006174:	4b84      	ldr	r3, [pc, #528]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d101      	bne.n	8006184 <HAL_RCC_OscConfig+0x2b4>
 8006180:	2301      	movs	r3, #1
 8006182:	e000      	b.n	8006186 <HAL_RCC_OscConfig+0x2b6>
 8006184:	2300      	movs	r3, #0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00d      	beq.n	80061a6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800618a:	4b7f      	ldr	r3, [pc, #508]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 800618c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800618e:	4a7e      	ldr	r2, [pc, #504]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006194:	6593      	str	r3, [r2, #88]	; 0x58
 8006196:	4b7c      	ldr	r3, [pc, #496]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800619a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80061a2:	2301      	movs	r3, #1
 80061a4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061a6:	4b79      	ldr	r3, [pc, #484]	; (800638c <HAL_RCC_OscConfig+0x4bc>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d118      	bne.n	80061e4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061b2:	4b76      	ldr	r3, [pc, #472]	; (800638c <HAL_RCC_OscConfig+0x4bc>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a75      	ldr	r2, [pc, #468]	; (800638c <HAL_RCC_OscConfig+0x4bc>)
 80061b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061be:	f7fb fce9 	bl	8001b94 <HAL_GetTick>
 80061c2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061c4:	e008      	b.n	80061d8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061c6:	f7fb fce5 	bl	8001b94 <HAL_GetTick>
 80061ca:	4602      	mov	r2, r0
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d901      	bls.n	80061d8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e183      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80061d8:	4b6c      	ldr	r3, [pc, #432]	; (800638c <HAL_RCC_OscConfig+0x4bc>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d0f0      	beq.n	80061c6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	2b01      	cmp	r3, #1
 80061ea:	d108      	bne.n	80061fe <HAL_RCC_OscConfig+0x32e>
 80061ec:	4b66      	ldr	r3, [pc, #408]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 80061ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f2:	4a65      	ldr	r2, [pc, #404]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 80061f4:	f043 0301 	orr.w	r3, r3, #1
 80061f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80061fc:	e024      	b.n	8006248 <HAL_RCC_OscConfig+0x378>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	2b05      	cmp	r3, #5
 8006204:	d110      	bne.n	8006228 <HAL_RCC_OscConfig+0x358>
 8006206:	4b60      	ldr	r3, [pc, #384]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800620c:	4a5e      	ldr	r2, [pc, #376]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 800620e:	f043 0304 	orr.w	r3, r3, #4
 8006212:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006216:	4b5c      	ldr	r3, [pc, #368]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800621c:	4a5a      	ldr	r2, [pc, #360]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 800621e:	f043 0301 	orr.w	r3, r3, #1
 8006222:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006226:	e00f      	b.n	8006248 <HAL_RCC_OscConfig+0x378>
 8006228:	4b57      	ldr	r3, [pc, #348]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 800622a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622e:	4a56      	ldr	r2, [pc, #344]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006230:	f023 0301 	bic.w	r3, r3, #1
 8006234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006238:	4b53      	ldr	r3, [pc, #332]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 800623a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800623e:	4a52      	ldr	r2, [pc, #328]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006240:	f023 0304 	bic.w	r3, r3, #4
 8006244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d016      	beq.n	800627e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006250:	f7fb fca0 	bl	8001b94 <HAL_GetTick>
 8006254:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006256:	e00a      	b.n	800626e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006258:	f7fb fc9c 	bl	8001b94 <HAL_GetTick>
 800625c:	4602      	mov	r2, r0
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	f241 3288 	movw	r2, #5000	; 0x1388
 8006266:	4293      	cmp	r3, r2
 8006268:	d901      	bls.n	800626e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800626a:	2303      	movs	r3, #3
 800626c:	e138      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800626e:	4b46      	ldr	r3, [pc, #280]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006274:	f003 0302 	and.w	r3, r3, #2
 8006278:	2b00      	cmp	r3, #0
 800627a:	d0ed      	beq.n	8006258 <HAL_RCC_OscConfig+0x388>
 800627c:	e015      	b.n	80062aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800627e:	f7fb fc89 	bl	8001b94 <HAL_GetTick>
 8006282:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006284:	e00a      	b.n	800629c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006286:	f7fb fc85 	bl	8001b94 <HAL_GetTick>
 800628a:	4602      	mov	r2, r0
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	1ad3      	subs	r3, r2, r3
 8006290:	f241 3288 	movw	r2, #5000	; 0x1388
 8006294:	4293      	cmp	r3, r2
 8006296:	d901      	bls.n	800629c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8006298:	2303      	movs	r3, #3
 800629a:	e121      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800629c:	4b3a      	ldr	r3, [pc, #232]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 800629e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d1ed      	bne.n	8006286 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80062aa:	7ffb      	ldrb	r3, [r7, #31]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d105      	bne.n	80062bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062b0:	4b35      	ldr	r3, [pc, #212]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 80062b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062b4:	4a34      	ldr	r2, [pc, #208]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 80062b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0320 	and.w	r3, r3, #32
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d03c      	beq.n	8006342 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	699b      	ldr	r3, [r3, #24]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d01c      	beq.n	800630a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80062d0:	4b2d      	ldr	r3, [pc, #180]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 80062d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062d6:	4a2c      	ldr	r2, [pc, #176]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 80062d8:	f043 0301 	orr.w	r3, r3, #1
 80062dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062e0:	f7fb fc58 	bl	8001b94 <HAL_GetTick>
 80062e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062e6:	e008      	b.n	80062fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80062e8:	f7fb fc54 	bl	8001b94 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d901      	bls.n	80062fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e0f2      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80062fa:	4b23      	ldr	r3, [pc, #140]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 80062fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d0ef      	beq.n	80062e8 <HAL_RCC_OscConfig+0x418>
 8006308:	e01b      	b.n	8006342 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800630a:	4b1f      	ldr	r3, [pc, #124]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 800630c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006310:	4a1d      	ldr	r2, [pc, #116]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006312:	f023 0301 	bic.w	r3, r3, #1
 8006316:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800631a:	f7fb fc3b 	bl	8001b94 <HAL_GetTick>
 800631e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006320:	e008      	b.n	8006334 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006322:	f7fb fc37 	bl	8001b94 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b02      	cmp	r3, #2
 800632e:	d901      	bls.n	8006334 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e0d5      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006334:	4b14      	ldr	r3, [pc, #80]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006336:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800633a:	f003 0302 	and.w	r3, r3, #2
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1ef      	bne.n	8006322 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	2b00      	cmp	r3, #0
 8006348:	f000 80c9 	beq.w	80064de <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800634c:	4b0e      	ldr	r3, [pc, #56]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f003 030c 	and.w	r3, r3, #12
 8006354:	2b0c      	cmp	r3, #12
 8006356:	f000 8083 	beq.w	8006460 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	69db      	ldr	r3, [r3, #28]
 800635e:	2b02      	cmp	r3, #2
 8006360:	d15e      	bne.n	8006420 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006362:	4b09      	ldr	r3, [pc, #36]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a08      	ldr	r2, [pc, #32]	; (8006388 <HAL_RCC_OscConfig+0x4b8>)
 8006368:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800636c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800636e:	f7fb fc11 	bl	8001b94 <HAL_GetTick>
 8006372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006374:	e00c      	b.n	8006390 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006376:	f7fb fc0d 	bl	8001b94 <HAL_GetTick>
 800637a:	4602      	mov	r2, r0
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	1ad3      	subs	r3, r2, r3
 8006380:	2b02      	cmp	r3, #2
 8006382:	d905      	bls.n	8006390 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8006384:	2303      	movs	r3, #3
 8006386:	e0ab      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
 8006388:	40021000 	.word	0x40021000
 800638c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006390:	4b55      	ldr	r3, [pc, #340]	; (80064e8 <HAL_RCC_OscConfig+0x618>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006398:	2b00      	cmp	r3, #0
 800639a:	d1ec      	bne.n	8006376 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800639c:	4b52      	ldr	r3, [pc, #328]	; (80064e8 <HAL_RCC_OscConfig+0x618>)
 800639e:	68da      	ldr	r2, [r3, #12]
 80063a0:	4b52      	ldr	r3, [pc, #328]	; (80064ec <HAL_RCC_OscConfig+0x61c>)
 80063a2:	4013      	ands	r3, r2
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	6a11      	ldr	r1, [r2, #32]
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80063ac:	3a01      	subs	r2, #1
 80063ae:	0112      	lsls	r2, r2, #4
 80063b0:	4311      	orrs	r1, r2
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80063b6:	0212      	lsls	r2, r2, #8
 80063b8:	4311      	orrs	r1, r2
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80063be:	0852      	lsrs	r2, r2, #1
 80063c0:	3a01      	subs	r2, #1
 80063c2:	0552      	lsls	r2, r2, #21
 80063c4:	4311      	orrs	r1, r2
 80063c6:	687a      	ldr	r2, [r7, #4]
 80063c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80063ca:	0852      	lsrs	r2, r2, #1
 80063cc:	3a01      	subs	r2, #1
 80063ce:	0652      	lsls	r2, r2, #25
 80063d0:	4311      	orrs	r1, r2
 80063d2:	687a      	ldr	r2, [r7, #4]
 80063d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80063d6:	06d2      	lsls	r2, r2, #27
 80063d8:	430a      	orrs	r2, r1
 80063da:	4943      	ldr	r1, [pc, #268]	; (80064e8 <HAL_RCC_OscConfig+0x618>)
 80063dc:	4313      	orrs	r3, r2
 80063de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063e0:	4b41      	ldr	r3, [pc, #260]	; (80064e8 <HAL_RCC_OscConfig+0x618>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a40      	ldr	r2, [pc, #256]	; (80064e8 <HAL_RCC_OscConfig+0x618>)
 80063e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80063ec:	4b3e      	ldr	r3, [pc, #248]	; (80064e8 <HAL_RCC_OscConfig+0x618>)
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	4a3d      	ldr	r2, [pc, #244]	; (80064e8 <HAL_RCC_OscConfig+0x618>)
 80063f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063f8:	f7fb fbcc 	bl	8001b94 <HAL_GetTick>
 80063fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80063fe:	e008      	b.n	8006412 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006400:	f7fb fbc8 	bl	8001b94 <HAL_GetTick>
 8006404:	4602      	mov	r2, r0
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	1ad3      	subs	r3, r2, r3
 800640a:	2b02      	cmp	r3, #2
 800640c:	d901      	bls.n	8006412 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800640e:	2303      	movs	r3, #3
 8006410:	e066      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006412:	4b35      	ldr	r3, [pc, #212]	; (80064e8 <HAL_RCC_OscConfig+0x618>)
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d0f0      	beq.n	8006400 <HAL_RCC_OscConfig+0x530>
 800641e:	e05e      	b.n	80064de <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006420:	4b31      	ldr	r3, [pc, #196]	; (80064e8 <HAL_RCC_OscConfig+0x618>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a30      	ldr	r2, [pc, #192]	; (80064e8 <HAL_RCC_OscConfig+0x618>)
 8006426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800642a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800642c:	f7fb fbb2 	bl	8001b94 <HAL_GetTick>
 8006430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006432:	e008      	b.n	8006446 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006434:	f7fb fbae 	bl	8001b94 <HAL_GetTick>
 8006438:	4602      	mov	r2, r0
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	1ad3      	subs	r3, r2, r3
 800643e:	2b02      	cmp	r3, #2
 8006440:	d901      	bls.n	8006446 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8006442:	2303      	movs	r3, #3
 8006444:	e04c      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006446:	4b28      	ldr	r3, [pc, #160]	; (80064e8 <HAL_RCC_OscConfig+0x618>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1f0      	bne.n	8006434 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006452:	4b25      	ldr	r3, [pc, #148]	; (80064e8 <HAL_RCC_OscConfig+0x618>)
 8006454:	68da      	ldr	r2, [r3, #12]
 8006456:	4924      	ldr	r1, [pc, #144]	; (80064e8 <HAL_RCC_OscConfig+0x618>)
 8006458:	4b25      	ldr	r3, [pc, #148]	; (80064f0 <HAL_RCC_OscConfig+0x620>)
 800645a:	4013      	ands	r3, r2
 800645c:	60cb      	str	r3, [r1, #12]
 800645e:	e03e      	b.n	80064de <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	69db      	ldr	r3, [r3, #28]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d101      	bne.n	800646c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	e039      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800646c:	4b1e      	ldr	r3, [pc, #120]	; (80064e8 <HAL_RCC_OscConfig+0x618>)
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f003 0203 	and.w	r2, r3, #3
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	429a      	cmp	r2, r3
 800647e:	d12c      	bne.n	80064da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648a:	3b01      	subs	r3, #1
 800648c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800648e:	429a      	cmp	r2, r3
 8006490:	d123      	bne.n	80064da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800649e:	429a      	cmp	r2, r3
 80064a0:	d11b      	bne.n	80064da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ac:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d113      	bne.n	80064da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064bc:	085b      	lsrs	r3, r3, #1
 80064be:	3b01      	subs	r3, #1
 80064c0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d109      	bne.n	80064da <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d0:	085b      	lsrs	r3, r3, #1
 80064d2:	3b01      	subs	r3, #1
 80064d4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d001      	beq.n	80064de <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e000      	b.n	80064e0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3720      	adds	r7, #32
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	40021000 	.word	0x40021000
 80064ec:	019f800c 	.word	0x019f800c
 80064f0:	feeefffc 	.word	0xfeeefffc

080064f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80064fe:	2300      	movs	r3, #0
 8006500:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006508:	2301      	movs	r3, #1
 800650a:	e11e      	b.n	800674a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800650c:	4b91      	ldr	r3, [pc, #580]	; (8006754 <HAL_RCC_ClockConfig+0x260>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f003 030f 	and.w	r3, r3, #15
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	429a      	cmp	r2, r3
 8006518:	d910      	bls.n	800653c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800651a:	4b8e      	ldr	r3, [pc, #568]	; (8006754 <HAL_RCC_ClockConfig+0x260>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f023 020f 	bic.w	r2, r3, #15
 8006522:	498c      	ldr	r1, [pc, #560]	; (8006754 <HAL_RCC_ClockConfig+0x260>)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	4313      	orrs	r3, r2
 8006528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800652a:	4b8a      	ldr	r3, [pc, #552]	; (8006754 <HAL_RCC_ClockConfig+0x260>)
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 030f 	and.w	r3, r3, #15
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d001      	beq.n	800653c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006538:	2301      	movs	r3, #1
 800653a:	e106      	b.n	800674a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d073      	beq.n	8006630 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	2b03      	cmp	r3, #3
 800654e:	d129      	bne.n	80065a4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006550:	4b81      	ldr	r3, [pc, #516]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e0f4      	b.n	800674a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8006560:	f000 f99e 	bl	80068a0 <RCC_GetSysClockFreqFromPLLSource>
 8006564:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	4a7c      	ldr	r2, [pc, #496]	; (800675c <HAL_RCC_ClockConfig+0x268>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d93f      	bls.n	80065ee <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800656e:	4b7a      	ldr	r3, [pc, #488]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 8006570:	689b      	ldr	r3, [r3, #8]
 8006572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006576:	2b00      	cmp	r3, #0
 8006578:	d009      	beq.n	800658e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8006582:	2b00      	cmp	r3, #0
 8006584:	d033      	beq.n	80065ee <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800658a:	2b00      	cmp	r3, #0
 800658c:	d12f      	bne.n	80065ee <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800658e:	4b72      	ldr	r3, [pc, #456]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006596:	4a70      	ldr	r2, [pc, #448]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 8006598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800659e:	2380      	movs	r3, #128	; 0x80
 80065a0:	617b      	str	r3, [r7, #20]
 80065a2:	e024      	b.n	80065ee <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d107      	bne.n	80065bc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80065ac:	4b6a      	ldr	r3, [pc, #424]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d109      	bne.n	80065cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e0c6      	b.n	800674a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80065bc:	4b66      	ldr	r3, [pc, #408]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d101      	bne.n	80065cc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80065c8:	2301      	movs	r3, #1
 80065ca:	e0be      	b.n	800674a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80065cc:	f000 f8ce 	bl	800676c <HAL_RCC_GetSysClockFreq>
 80065d0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	4a61      	ldr	r2, [pc, #388]	; (800675c <HAL_RCC_ClockConfig+0x268>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d909      	bls.n	80065ee <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80065da:	4b5f      	ldr	r3, [pc, #380]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80065e2:	4a5d      	ldr	r2, [pc, #372]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 80065e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065e8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80065ea:	2380      	movs	r3, #128	; 0x80
 80065ec:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065ee:	4b5a      	ldr	r3, [pc, #360]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f023 0203 	bic.w	r2, r3, #3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	4957      	ldr	r1, [pc, #348]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 80065fc:	4313      	orrs	r3, r2
 80065fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006600:	f7fb fac8 	bl	8001b94 <HAL_GetTick>
 8006604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006606:	e00a      	b.n	800661e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006608:	f7fb fac4 	bl	8001b94 <HAL_GetTick>
 800660c:	4602      	mov	r2, r0
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	1ad3      	subs	r3, r2, r3
 8006612:	f241 3288 	movw	r2, #5000	; 0x1388
 8006616:	4293      	cmp	r3, r2
 8006618:	d901      	bls.n	800661e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800661a:	2303      	movs	r3, #3
 800661c:	e095      	b.n	800674a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800661e:	4b4e      	ldr	r3, [pc, #312]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	f003 020c 	and.w	r2, r3, #12
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	429a      	cmp	r2, r3
 800662e:	d1eb      	bne.n	8006608 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d023      	beq.n	8006684 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f003 0304 	and.w	r3, r3, #4
 8006644:	2b00      	cmp	r3, #0
 8006646:	d005      	beq.n	8006654 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006648:	4b43      	ldr	r3, [pc, #268]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	4a42      	ldr	r2, [pc, #264]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 800664e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006652:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0308 	and.w	r3, r3, #8
 800665c:	2b00      	cmp	r3, #0
 800665e:	d007      	beq.n	8006670 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8006660:	4b3d      	ldr	r3, [pc, #244]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006668:	4a3b      	ldr	r2, [pc, #236]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 800666a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800666e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006670:	4b39      	ldr	r3, [pc, #228]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	4936      	ldr	r1, [pc, #216]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 800667e:	4313      	orrs	r3, r2
 8006680:	608b      	str	r3, [r1, #8]
 8006682:	e008      	b.n	8006696 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	2b80      	cmp	r3, #128	; 0x80
 8006688:	d105      	bne.n	8006696 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800668a:	4b33      	ldr	r3, [pc, #204]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	4a32      	ldr	r2, [pc, #200]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 8006690:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006694:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006696:	4b2f      	ldr	r3, [pc, #188]	; (8006754 <HAL_RCC_ClockConfig+0x260>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 030f 	and.w	r3, r3, #15
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d21d      	bcs.n	80066e0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066a4:	4b2b      	ldr	r3, [pc, #172]	; (8006754 <HAL_RCC_ClockConfig+0x260>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f023 020f 	bic.w	r2, r3, #15
 80066ac:	4929      	ldr	r1, [pc, #164]	; (8006754 <HAL_RCC_ClockConfig+0x260>)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80066b4:	f7fb fa6e 	bl	8001b94 <HAL_GetTick>
 80066b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066ba:	e00a      	b.n	80066d2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066bc:	f7fb fa6a 	bl	8001b94 <HAL_GetTick>
 80066c0:	4602      	mov	r2, r0
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	1ad3      	subs	r3, r2, r3
 80066c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d901      	bls.n	80066d2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e03b      	b.n	800674a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066d2:	4b20      	ldr	r3, [pc, #128]	; (8006754 <HAL_RCC_ClockConfig+0x260>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 030f 	and.w	r3, r3, #15
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d1ed      	bne.n	80066bc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d008      	beq.n	80066fe <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066ec:	4b1a      	ldr	r3, [pc, #104]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 80066ee:	689b      	ldr	r3, [r3, #8]
 80066f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	4917      	ldr	r1, [pc, #92]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 80066fa:	4313      	orrs	r3, r2
 80066fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f003 0308 	and.w	r3, r3, #8
 8006706:	2b00      	cmp	r3, #0
 8006708:	d009      	beq.n	800671e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800670a:	4b13      	ldr	r3, [pc, #76]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	00db      	lsls	r3, r3, #3
 8006718:	490f      	ldr	r1, [pc, #60]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 800671a:	4313      	orrs	r3, r2
 800671c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800671e:	f000 f825 	bl	800676c <HAL_RCC_GetSysClockFreq>
 8006722:	4602      	mov	r2, r0
 8006724:	4b0c      	ldr	r3, [pc, #48]	; (8006758 <HAL_RCC_ClockConfig+0x264>)
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	091b      	lsrs	r3, r3, #4
 800672a:	f003 030f 	and.w	r3, r3, #15
 800672e:	490c      	ldr	r1, [pc, #48]	; (8006760 <HAL_RCC_ClockConfig+0x26c>)
 8006730:	5ccb      	ldrb	r3, [r1, r3]
 8006732:	f003 031f 	and.w	r3, r3, #31
 8006736:	fa22 f303 	lsr.w	r3, r2, r3
 800673a:	4a0a      	ldr	r2, [pc, #40]	; (8006764 <HAL_RCC_ClockConfig+0x270>)
 800673c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800673e:	4b0a      	ldr	r3, [pc, #40]	; (8006768 <HAL_RCC_ClockConfig+0x274>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4618      	mov	r0, r3
 8006744:	f7fb f9da 	bl	8001afc <HAL_InitTick>
 8006748:	4603      	mov	r3, r0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	40022000 	.word	0x40022000
 8006758:	40021000 	.word	0x40021000
 800675c:	04c4b400 	.word	0x04c4b400
 8006760:	0800dfac 	.word	0x0800dfac
 8006764:	20000008 	.word	0x20000008
 8006768:	2000000c 	.word	0x2000000c

0800676c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800676c:	b480      	push	{r7}
 800676e:	b087      	sub	sp, #28
 8006770:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8006772:	4b2c      	ldr	r3, [pc, #176]	; (8006824 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	f003 030c 	and.w	r3, r3, #12
 800677a:	2b04      	cmp	r3, #4
 800677c:	d102      	bne.n	8006784 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800677e:	4b2a      	ldr	r3, [pc, #168]	; (8006828 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006780:	613b      	str	r3, [r7, #16]
 8006782:	e047      	b.n	8006814 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006784:	4b27      	ldr	r3, [pc, #156]	; (8006824 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	f003 030c 	and.w	r3, r3, #12
 800678c:	2b08      	cmp	r3, #8
 800678e:	d102      	bne.n	8006796 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006790:	4b26      	ldr	r3, [pc, #152]	; (800682c <HAL_RCC_GetSysClockFreq+0xc0>)
 8006792:	613b      	str	r3, [r7, #16]
 8006794:	e03e      	b.n	8006814 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006796:	4b23      	ldr	r3, [pc, #140]	; (8006824 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f003 030c 	and.w	r3, r3, #12
 800679e:	2b0c      	cmp	r3, #12
 80067a0:	d136      	bne.n	8006810 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80067a2:	4b20      	ldr	r3, [pc, #128]	; (8006824 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f003 0303 	and.w	r3, r3, #3
 80067aa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80067ac:	4b1d      	ldr	r3, [pc, #116]	; (8006824 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	091b      	lsrs	r3, r3, #4
 80067b2:	f003 030f 	and.w	r3, r3, #15
 80067b6:	3301      	adds	r3, #1
 80067b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2b03      	cmp	r3, #3
 80067be:	d10c      	bne.n	80067da <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067c0:	4a1a      	ldr	r2, [pc, #104]	; (800682c <HAL_RCC_GetSysClockFreq+0xc0>)
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c8:	4a16      	ldr	r2, [pc, #88]	; (8006824 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067ca:	68d2      	ldr	r2, [r2, #12]
 80067cc:	0a12      	lsrs	r2, r2, #8
 80067ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067d2:	fb02 f303 	mul.w	r3, r2, r3
 80067d6:	617b      	str	r3, [r7, #20]
      break;
 80067d8:	e00c      	b.n	80067f4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80067da:	4a13      	ldr	r2, [pc, #76]	; (8006828 <HAL_RCC_GetSysClockFreq+0xbc>)
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	fbb2 f3f3 	udiv	r3, r2, r3
 80067e2:	4a10      	ldr	r2, [pc, #64]	; (8006824 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067e4:	68d2      	ldr	r2, [r2, #12]
 80067e6:	0a12      	lsrs	r2, r2, #8
 80067e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80067ec:	fb02 f303 	mul.w	r3, r2, r3
 80067f0:	617b      	str	r3, [r7, #20]
      break;
 80067f2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80067f4:	4b0b      	ldr	r3, [pc, #44]	; (8006824 <HAL_RCC_GetSysClockFreq+0xb8>)
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	0e5b      	lsrs	r3, r3, #25
 80067fa:	f003 0303 	and.w	r3, r3, #3
 80067fe:	3301      	adds	r3, #1
 8006800:	005b      	lsls	r3, r3, #1
 8006802:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006804:	697a      	ldr	r2, [r7, #20]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	fbb2 f3f3 	udiv	r3, r2, r3
 800680c:	613b      	str	r3, [r7, #16]
 800680e:	e001      	b.n	8006814 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006814:	693b      	ldr	r3, [r7, #16]
}
 8006816:	4618      	mov	r0, r3
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
 8006822:	bf00      	nop
 8006824:	40021000 	.word	0x40021000
 8006828:	00f42400 	.word	0x00f42400
 800682c:	016e3600 	.word	0x016e3600

08006830 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006830:	b480      	push	{r7}
 8006832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006834:	4b03      	ldr	r3, [pc, #12]	; (8006844 <HAL_RCC_GetHCLKFreq+0x14>)
 8006836:	681b      	ldr	r3, [r3, #0]
}
 8006838:	4618      	mov	r0, r3
 800683a:	46bd      	mov	sp, r7
 800683c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006840:	4770      	bx	lr
 8006842:	bf00      	nop
 8006844:	20000008 	.word	0x20000008

08006848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800684c:	f7ff fff0 	bl	8006830 <HAL_RCC_GetHCLKFreq>
 8006850:	4602      	mov	r2, r0
 8006852:	4b06      	ldr	r3, [pc, #24]	; (800686c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	0a1b      	lsrs	r3, r3, #8
 8006858:	f003 0307 	and.w	r3, r3, #7
 800685c:	4904      	ldr	r1, [pc, #16]	; (8006870 <HAL_RCC_GetPCLK1Freq+0x28>)
 800685e:	5ccb      	ldrb	r3, [r1, r3]
 8006860:	f003 031f 	and.w	r3, r3, #31
 8006864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006868:	4618      	mov	r0, r3
 800686a:	bd80      	pop	{r7, pc}
 800686c:	40021000 	.word	0x40021000
 8006870:	0800dfbc 	.word	0x0800dfbc

08006874 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006878:	f7ff ffda 	bl	8006830 <HAL_RCC_GetHCLKFreq>
 800687c:	4602      	mov	r2, r0
 800687e:	4b06      	ldr	r3, [pc, #24]	; (8006898 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	0adb      	lsrs	r3, r3, #11
 8006884:	f003 0307 	and.w	r3, r3, #7
 8006888:	4904      	ldr	r1, [pc, #16]	; (800689c <HAL_RCC_GetPCLK2Freq+0x28>)
 800688a:	5ccb      	ldrb	r3, [r1, r3]
 800688c:	f003 031f 	and.w	r3, r3, #31
 8006890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006894:	4618      	mov	r0, r3
 8006896:	bd80      	pop	{r7, pc}
 8006898:	40021000 	.word	0x40021000
 800689c:	0800dfbc 	.word	0x0800dfbc

080068a0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b087      	sub	sp, #28
 80068a4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80068a6:	4b1e      	ldr	r3, [pc, #120]	; (8006920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068a8:	68db      	ldr	r3, [r3, #12]
 80068aa:	f003 0303 	and.w	r3, r3, #3
 80068ae:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80068b0:	4b1b      	ldr	r3, [pc, #108]	; (8006920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	091b      	lsrs	r3, r3, #4
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	3301      	adds	r3, #1
 80068bc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80068be:	693b      	ldr	r3, [r7, #16]
 80068c0:	2b03      	cmp	r3, #3
 80068c2:	d10c      	bne.n	80068de <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80068c4:	4a17      	ldr	r2, [pc, #92]	; (8006924 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068cc:	4a14      	ldr	r2, [pc, #80]	; (8006920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068ce:	68d2      	ldr	r2, [r2, #12]
 80068d0:	0a12      	lsrs	r2, r2, #8
 80068d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80068d6:	fb02 f303 	mul.w	r3, r2, r3
 80068da:	617b      	str	r3, [r7, #20]
    break;
 80068dc:	e00c      	b.n	80068f8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80068de:	4a12      	ldr	r2, [pc, #72]	; (8006928 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068e6:	4a0e      	ldr	r2, [pc, #56]	; (8006920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068e8:	68d2      	ldr	r2, [r2, #12]
 80068ea:	0a12      	lsrs	r2, r2, #8
 80068ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80068f0:	fb02 f303 	mul.w	r3, r2, r3
 80068f4:	617b      	str	r3, [r7, #20]
    break;
 80068f6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80068f8:	4b09      	ldr	r3, [pc, #36]	; (8006920 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	0e5b      	lsrs	r3, r3, #25
 80068fe:	f003 0303 	and.w	r3, r3, #3
 8006902:	3301      	adds	r3, #1
 8006904:	005b      	lsls	r3, r3, #1
 8006906:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006910:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8006912:	687b      	ldr	r3, [r7, #4]
}
 8006914:	4618      	mov	r0, r3
 8006916:	371c      	adds	r7, #28
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr
 8006920:	40021000 	.word	0x40021000
 8006924:	016e3600 	.word	0x016e3600
 8006928:	00f42400 	.word	0x00f42400

0800692c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006934:	2300      	movs	r3, #0
 8006936:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006938:	2300      	movs	r3, #0
 800693a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006944:	2b00      	cmp	r3, #0
 8006946:	f000 8098 	beq.w	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800694a:	2300      	movs	r3, #0
 800694c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800694e:	4b43      	ldr	r3, [pc, #268]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10d      	bne.n	8006976 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800695a:	4b40      	ldr	r3, [pc, #256]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800695c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800695e:	4a3f      	ldr	r2, [pc, #252]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006964:	6593      	str	r3, [r2, #88]	; 0x58
 8006966:	4b3d      	ldr	r3, [pc, #244]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800696a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800696e:	60bb      	str	r3, [r7, #8]
 8006970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006972:	2301      	movs	r3, #1
 8006974:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006976:	4b3a      	ldr	r3, [pc, #232]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a39      	ldr	r2, [pc, #228]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800697c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006980:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006982:	f7fb f907 	bl	8001b94 <HAL_GetTick>
 8006986:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006988:	e009      	b.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800698a:	f7fb f903 	bl	8001b94 <HAL_GetTick>
 800698e:	4602      	mov	r2, r0
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	1ad3      	subs	r3, r2, r3
 8006994:	2b02      	cmp	r3, #2
 8006996:	d902      	bls.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006998:	2303      	movs	r3, #3
 800699a:	74fb      	strb	r3, [r7, #19]
        break;
 800699c:	e005      	b.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800699e:	4b30      	ldr	r3, [pc, #192]	; (8006a60 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d0ef      	beq.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80069aa:	7cfb      	ldrb	r3, [r7, #19]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d159      	bne.n	8006a64 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80069b0:	4b2a      	ldr	r3, [pc, #168]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ba:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d01e      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069c6:	697a      	ldr	r2, [r7, #20]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d019      	beq.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80069cc:	4b23      	ldr	r3, [pc, #140]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069d6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80069d8:	4b20      	ldr	r3, [pc, #128]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069de:	4a1f      	ldr	r2, [pc, #124]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069e8:	4b1c      	ldr	r3, [pc, #112]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069ee:	4a1b      	ldr	r2, [pc, #108]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80069f8:	4a18      	ldr	r2, [pc, #96]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d016      	beq.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a0a:	f7fb f8c3 	bl	8001b94 <HAL_GetTick>
 8006a0e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a10:	e00b      	b.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a12:	f7fb f8bf 	bl	8001b94 <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d902      	bls.n	8006a2a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	74fb      	strb	r3, [r7, #19]
            break;
 8006a28:	e006      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a2a:	4b0c      	ldr	r3, [pc, #48]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a30:	f003 0302 	and.w	r3, r3, #2
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d0ec      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006a38:	7cfb      	ldrb	r3, [r7, #19]
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d10b      	bne.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a3e:	4b07      	ldr	r3, [pc, #28]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a44:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a4c:	4903      	ldr	r1, [pc, #12]	; (8006a5c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006a54:	e008      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a56:	7cfb      	ldrb	r3, [r7, #19]
 8006a58:	74bb      	strb	r3, [r7, #18]
 8006a5a:	e005      	b.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006a5c:	40021000 	.word	0x40021000
 8006a60:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a64:	7cfb      	ldrb	r3, [r7, #19]
 8006a66:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a68:	7c7b      	ldrb	r3, [r7, #17]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d105      	bne.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a6e:	4ba7      	ldr	r3, [pc, #668]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a72:	4aa6      	ldr	r2, [pc, #664]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a78:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f003 0301 	and.w	r3, r3, #1
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00a      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a86:	4ba1      	ldr	r3, [pc, #644]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a8c:	f023 0203 	bic.w	r2, r3, #3
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	499d      	ldr	r1, [pc, #628]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006a96:	4313      	orrs	r3, r2
 8006a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00a      	beq.n	8006abe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006aa8:	4b98      	ldr	r3, [pc, #608]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aae:	f023 020c 	bic.w	r2, r3, #12
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	4995      	ldr	r1, [pc, #596]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f003 0304 	and.w	r3, r3, #4
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d00a      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006aca:	4b90      	ldr	r3, [pc, #576]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	498c      	ldr	r1, [pc, #560]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ada:	4313      	orrs	r3, r2
 8006adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0308 	and.w	r3, r3, #8
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d00a      	beq.n	8006b02 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006aec:	4b87      	ldr	r3, [pc, #540]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006af2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	4984      	ldr	r1, [pc, #528]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006afc:	4313      	orrs	r3, r2
 8006afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f003 0310 	and.w	r3, r3, #16
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d00a      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b0e:	4b7f      	ldr	r3, [pc, #508]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	695b      	ldr	r3, [r3, #20]
 8006b1c:	497b      	ldr	r1, [pc, #492]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0320 	and.w	r3, r3, #32
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00a      	beq.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006b30:	4b76      	ldr	r3, [pc, #472]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	4973      	ldr	r1, [pc, #460]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00a      	beq.n	8006b68 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006b52:	4b6e      	ldr	r3, [pc, #440]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b58:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	69db      	ldr	r3, [r3, #28]
 8006b60:	496a      	ldr	r1, [pc, #424]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b62:	4313      	orrs	r3, r2
 8006b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00a      	beq.n	8006b8a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b74:	4b65      	ldr	r3, [pc, #404]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b7a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a1b      	ldr	r3, [r3, #32]
 8006b82:	4962      	ldr	r1, [pc, #392]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b84:	4313      	orrs	r3, r2
 8006b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00a      	beq.n	8006bac <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b96:	4b5d      	ldr	r3, [pc, #372]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b9c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	4959      	ldr	r1, [pc, #356]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d00a      	beq.n	8006bce <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006bb8:	4b54      	ldr	r3, [pc, #336]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bbe:	f023 0203 	bic.w	r2, r3, #3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc6:	4951      	ldr	r1, [pc, #324]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bc8:	4313      	orrs	r3, r2
 8006bca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00a      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006bda:	4b4c      	ldr	r3, [pc, #304]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be8:	4948      	ldr	r1, [pc, #288]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d015      	beq.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006bfc:	4b43      	ldr	r3, [pc, #268]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c0a:	4940      	ldr	r1, [pc, #256]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c1a:	d105      	bne.n	8006c28 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c1c:	4b3b      	ldr	r3, [pc, #236]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	4a3a      	ldr	r2, [pc, #232]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c26:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d015      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c34:	4b35      	ldr	r3, [pc, #212]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c42:	4932      	ldr	r1, [pc, #200]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c44:	4313      	orrs	r3, r2
 8006c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006c52:	d105      	bne.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c54:	4b2d      	ldr	r3, [pc, #180]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	4a2c      	ldr	r2, [pc, #176]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c5e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d015      	beq.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c6c:	4b27      	ldr	r3, [pc, #156]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7a:	4924      	ldr	r1, [pc, #144]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c8a:	d105      	bne.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006c8c:	4b1f      	ldr	r3, [pc, #124]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	4a1e      	ldr	r2, [pc, #120]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c96:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d015      	beq.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006ca4:	4b19      	ldr	r3, [pc, #100]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006caa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb2:	4916      	ldr	r1, [pc, #88]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cc2:	d105      	bne.n	8006cd0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cc4:	4b11      	ldr	r3, [pc, #68]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	4a10      	ldr	r2, [pc, #64]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006cce:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d019      	beq.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cdc:	4b0b      	ldr	r3, [pc, #44]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cea:	4908      	ldr	r1, [pc, #32]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cec:	4313      	orrs	r3, r2
 8006cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cfa:	d109      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006cfc:	4b03      	ldr	r3, [pc, #12]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	4a02      	ldr	r2, [pc, #8]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006d02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d06:	60d3      	str	r3, [r2, #12]
 8006d08:	e002      	b.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006d0a:	bf00      	nop
 8006d0c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d015      	beq.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006d1c:	4b29      	ldr	r3, [pc, #164]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d2a:	4926      	ldr	r1, [pc, #152]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d3a:	d105      	bne.n	8006d48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006d3c:	4b21      	ldr	r3, [pc, #132]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	4a20      	ldr	r2, [pc, #128]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d46:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d015      	beq.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006d54:	4b1b      	ldr	r3, [pc, #108]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d5a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d62:	4918      	ldr	r1, [pc, #96]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d64:	4313      	orrs	r3, r2
 8006d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d72:	d105      	bne.n	8006d80 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006d74:	4b13      	ldr	r3, [pc, #76]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	4a12      	ldr	r2, [pc, #72]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d7e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d015      	beq.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006d8c:	4b0d      	ldr	r3, [pc, #52]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9a:	490a      	ldr	r1, [pc, #40]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006daa:	d105      	bne.n	8006db8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006dac:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	4a04      	ldr	r2, [pc, #16]	; (8006dc4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006db2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006db6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006db8:	7cbb      	ldrb	r3, [r7, #18]
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3718      	adds	r7, #24
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	40021000 	.word	0x40021000

08006dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d101      	bne.n	8006dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e049      	b.n	8006e6e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d106      	bne.n	8006df4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7fa fcdc 	bl	80017ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2202      	movs	r2, #2
 8006df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681a      	ldr	r2, [r3, #0]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3304      	adds	r3, #4
 8006e04:	4619      	mov	r1, r3
 8006e06:	4610      	mov	r0, r2
 8006e08:	f000 fb74 	bl	80074f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2201      	movs	r2, #1
 8006e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2201      	movs	r2, #1
 8006e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2201      	movs	r2, #1
 8006e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2201      	movs	r2, #1
 8006e60:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006e6c:	2300      	movs	r3, #0
}
 8006e6e:	4618      	mov	r0, r3
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}
	...

08006e78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b085      	sub	sp, #20
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e86:	b2db      	uxtb	r3, r3
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d001      	beq.n	8006e90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e054      	b.n	8006f3a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2202      	movs	r2, #2
 8006e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68da      	ldr	r2, [r3, #12]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	f042 0201 	orr.w	r2, r2, #1
 8006ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a26      	ldr	r2, [pc, #152]	; (8006f48 <HAL_TIM_Base_Start_IT+0xd0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d022      	beq.n	8006ef8 <HAL_TIM_Base_Start_IT+0x80>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eba:	d01d      	beq.n	8006ef8 <HAL_TIM_Base_Start_IT+0x80>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a22      	ldr	r2, [pc, #136]	; (8006f4c <HAL_TIM_Base_Start_IT+0xd4>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d018      	beq.n	8006ef8 <HAL_TIM_Base_Start_IT+0x80>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a21      	ldr	r2, [pc, #132]	; (8006f50 <HAL_TIM_Base_Start_IT+0xd8>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d013      	beq.n	8006ef8 <HAL_TIM_Base_Start_IT+0x80>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a1f      	ldr	r2, [pc, #124]	; (8006f54 <HAL_TIM_Base_Start_IT+0xdc>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d00e      	beq.n	8006ef8 <HAL_TIM_Base_Start_IT+0x80>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a1e      	ldr	r2, [pc, #120]	; (8006f58 <HAL_TIM_Base_Start_IT+0xe0>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d009      	beq.n	8006ef8 <HAL_TIM_Base_Start_IT+0x80>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a1c      	ldr	r2, [pc, #112]	; (8006f5c <HAL_TIM_Base_Start_IT+0xe4>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d004      	beq.n	8006ef8 <HAL_TIM_Base_Start_IT+0x80>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a1b      	ldr	r2, [pc, #108]	; (8006f60 <HAL_TIM_Base_Start_IT+0xe8>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d115      	bne.n	8006f24 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	689a      	ldr	r2, [r3, #8]
 8006efe:	4b19      	ldr	r3, [pc, #100]	; (8006f64 <HAL_TIM_Base_Start_IT+0xec>)
 8006f00:	4013      	ands	r3, r2
 8006f02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2b06      	cmp	r3, #6
 8006f08:	d015      	beq.n	8006f36 <HAL_TIM_Base_Start_IT+0xbe>
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f10:	d011      	beq.n	8006f36 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	681a      	ldr	r2, [r3, #0]
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f042 0201 	orr.w	r2, r2, #1
 8006f20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f22:	e008      	b.n	8006f36 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	681a      	ldr	r2, [r3, #0]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f042 0201 	orr.w	r2, r2, #1
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	e000      	b.n	8006f38 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f44:	4770      	bx	lr
 8006f46:	bf00      	nop
 8006f48:	40012c00 	.word	0x40012c00
 8006f4c:	40000400 	.word	0x40000400
 8006f50:	40000800 	.word	0x40000800
 8006f54:	40000c00 	.word	0x40000c00
 8006f58:	40013400 	.word	0x40013400
 8006f5c:	40014000 	.word	0x40014000
 8006f60:	40015000 	.word	0x40015000
 8006f64:	00010007 	.word	0x00010007

08006f68 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68da      	ldr	r2, [r3, #12]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0201 	bic.w	r2, r2, #1
 8006f7e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	6a1a      	ldr	r2, [r3, #32]
 8006f86:	f241 1311 	movw	r3, #4369	; 0x1111
 8006f8a:	4013      	ands	r3, r2
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10f      	bne.n	8006fb0 <HAL_TIM_Base_Stop_IT+0x48>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	6a1a      	ldr	r2, [r3, #32]
 8006f96:	f244 4344 	movw	r3, #17476	; 0x4444
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d107      	bne.n	8006fb0 <HAL_TIM_Base_Stop_IT+0x48>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f022 0201 	bic.w	r2, r2, #1
 8006fae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	370c      	adds	r7, #12
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006fc6:	b580      	push	{r7, lr}
 8006fc8:	b084      	sub	sp, #16
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	f003 0302 	and.w	r3, r3, #2
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d020      	beq.n	800702a <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f003 0302 	and.w	r3, r3, #2
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d01b      	beq.n	800702a <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f06f 0202 	mvn.w	r2, #2
 8006ffa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	f003 0303 	and.w	r3, r3, #3
 800700c:	2b00      	cmp	r3, #0
 800700e:	d003      	beq.n	8007018 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f000 fa51 	bl	80074b8 <HAL_TIM_IC_CaptureCallback>
 8007016:	e005      	b.n	8007024 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007018:	6878      	ldr	r0, [r7, #4]
 800701a:	f000 fa43 	bl	80074a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fa54 	bl	80074cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800702a:	68bb      	ldr	r3, [r7, #8]
 800702c:	f003 0304 	and.w	r3, r3, #4
 8007030:	2b00      	cmp	r3, #0
 8007032:	d020      	beq.n	8007076 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f003 0304 	and.w	r3, r3, #4
 800703a:	2b00      	cmp	r3, #0
 800703c:	d01b      	beq.n	8007076 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f06f 0204 	mvn.w	r2, #4
 8007046:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2202      	movs	r2, #2
 800704c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	699b      	ldr	r3, [r3, #24]
 8007054:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007058:	2b00      	cmp	r3, #0
 800705a:	d003      	beq.n	8007064 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fa2b 	bl	80074b8 <HAL_TIM_IC_CaptureCallback>
 8007062:	e005      	b.n	8007070 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f000 fa1d 	bl	80074a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 fa2e 	bl	80074cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	f003 0308 	and.w	r3, r3, #8
 800707c:	2b00      	cmp	r3, #0
 800707e:	d020      	beq.n	80070c2 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f003 0308 	and.w	r3, r3, #8
 8007086:	2b00      	cmp	r3, #0
 8007088:	d01b      	beq.n	80070c2 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f06f 0208 	mvn.w	r2, #8
 8007092:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2204      	movs	r2, #4
 8007098:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	69db      	ldr	r3, [r3, #28]
 80070a0:	f003 0303 	and.w	r3, r3, #3
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d003      	beq.n	80070b0 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fa05 	bl	80074b8 <HAL_TIM_IC_CaptureCallback>
 80070ae:	e005      	b.n	80070bc <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 f9f7 	bl	80074a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fa08 	bl	80074cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	f003 0310 	and.w	r3, r3, #16
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d020      	beq.n	800710e <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f003 0310 	and.w	r3, r3, #16
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d01b      	beq.n	800710e <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f06f 0210 	mvn.w	r2, #16
 80070de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2208      	movs	r2, #8
 80070e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	69db      	ldr	r3, [r3, #28]
 80070ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d003      	beq.n	80070fc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f9df 	bl	80074b8 <HAL_TIM_IC_CaptureCallback>
 80070fa:	e005      	b.n	8007108 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f9d1 	bl	80074a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f9e2 	bl	80074cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	f003 0301 	and.w	r3, r3, #1
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00c      	beq.n	8007132 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f003 0301 	and.w	r3, r3, #1
 800711e:	2b00      	cmp	r3, #0
 8007120:	d007      	beq.n	8007132 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f06f 0201 	mvn.w	r2, #1
 800712a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f9af 	bl	8007490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007138:	2b00      	cmp	r3, #0
 800713a:	d104      	bne.n	8007146 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007142:	2b00      	cmp	r3, #0
 8007144:	d00c      	beq.n	8007160 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800714c:	2b00      	cmp	r3, #0
 800714e:	d007      	beq.n	8007160 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8007158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fbba 	bl	80078d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00c      	beq.n	8007184 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007170:	2b00      	cmp	r3, #0
 8007172:	d007      	beq.n	8007184 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800717c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800717e:	6878      	ldr	r0, [r7, #4]
 8007180:	f000 fbb2 	bl	80078e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007184:	68bb      	ldr	r3, [r7, #8]
 8007186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718a:	2b00      	cmp	r3, #0
 800718c:	d00c      	beq.n	80071a8 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007194:	2b00      	cmp	r3, #0
 8007196:	d007      	beq.n	80071a8 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80071a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f99c 	bl	80074e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	f003 0320 	and.w	r3, r3, #32
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00c      	beq.n	80071cc <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f003 0320 	and.w	r3, r3, #32
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d007      	beq.n	80071cc <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f06f 0220 	mvn.w	r2, #32
 80071c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fb7a 	bl	80078c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00c      	beq.n	80071f0 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d007      	beq.n	80071f0 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80071e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	f000 fb86 	bl	80078fc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00c      	beq.n	8007214 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007200:	2b00      	cmp	r3, #0
 8007202:	d007      	beq.n	8007214 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800720c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fb7e 	bl	8007910 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00c      	beq.n	8007238 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d007      	beq.n	8007238 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f000 fb76 	bl	8007924 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d00c      	beq.n	800725c <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007248:	2b00      	cmp	r3, #0
 800724a:	d007      	beq.n	800725c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 fb6e 	bl	8007938 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800725c:	bf00      	nop
 800725e:	3710      	adds	r7, #16
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b084      	sub	sp, #16
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800726e:	2300      	movs	r3, #0
 8007270:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007278:	2b01      	cmp	r3, #1
 800727a:	d101      	bne.n	8007280 <HAL_TIM_ConfigClockSource+0x1c>
 800727c:	2302      	movs	r3, #2
 800727e:	e0f6      	b.n	800746e <HAL_TIM_ConfigClockSource+0x20a>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2201      	movs	r2, #1
 8007284:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2202      	movs	r2, #2
 800728c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800729e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a6f      	ldr	r2, [pc, #444]	; (8007478 <HAL_TIM_ConfigClockSource+0x214>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	f000 80c1 	beq.w	8007442 <HAL_TIM_ConfigClockSource+0x1de>
 80072c0:	4a6d      	ldr	r2, [pc, #436]	; (8007478 <HAL_TIM_ConfigClockSource+0x214>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	f200 80c6 	bhi.w	8007454 <HAL_TIM_ConfigClockSource+0x1f0>
 80072c8:	4a6c      	ldr	r2, [pc, #432]	; (800747c <HAL_TIM_ConfigClockSource+0x218>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	f000 80b9 	beq.w	8007442 <HAL_TIM_ConfigClockSource+0x1de>
 80072d0:	4a6a      	ldr	r2, [pc, #424]	; (800747c <HAL_TIM_ConfigClockSource+0x218>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	f200 80be 	bhi.w	8007454 <HAL_TIM_ConfigClockSource+0x1f0>
 80072d8:	4a69      	ldr	r2, [pc, #420]	; (8007480 <HAL_TIM_ConfigClockSource+0x21c>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	f000 80b1 	beq.w	8007442 <HAL_TIM_ConfigClockSource+0x1de>
 80072e0:	4a67      	ldr	r2, [pc, #412]	; (8007480 <HAL_TIM_ConfigClockSource+0x21c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	f200 80b6 	bhi.w	8007454 <HAL_TIM_ConfigClockSource+0x1f0>
 80072e8:	4a66      	ldr	r2, [pc, #408]	; (8007484 <HAL_TIM_ConfigClockSource+0x220>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	f000 80a9 	beq.w	8007442 <HAL_TIM_ConfigClockSource+0x1de>
 80072f0:	4a64      	ldr	r2, [pc, #400]	; (8007484 <HAL_TIM_ConfigClockSource+0x220>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	f200 80ae 	bhi.w	8007454 <HAL_TIM_ConfigClockSource+0x1f0>
 80072f8:	4a63      	ldr	r2, [pc, #396]	; (8007488 <HAL_TIM_ConfigClockSource+0x224>)
 80072fa:	4293      	cmp	r3, r2
 80072fc:	f000 80a1 	beq.w	8007442 <HAL_TIM_ConfigClockSource+0x1de>
 8007300:	4a61      	ldr	r2, [pc, #388]	; (8007488 <HAL_TIM_ConfigClockSource+0x224>)
 8007302:	4293      	cmp	r3, r2
 8007304:	f200 80a6 	bhi.w	8007454 <HAL_TIM_ConfigClockSource+0x1f0>
 8007308:	4a60      	ldr	r2, [pc, #384]	; (800748c <HAL_TIM_ConfigClockSource+0x228>)
 800730a:	4293      	cmp	r3, r2
 800730c:	f000 8099 	beq.w	8007442 <HAL_TIM_ConfigClockSource+0x1de>
 8007310:	4a5e      	ldr	r2, [pc, #376]	; (800748c <HAL_TIM_ConfigClockSource+0x228>)
 8007312:	4293      	cmp	r3, r2
 8007314:	f200 809e 	bhi.w	8007454 <HAL_TIM_ConfigClockSource+0x1f0>
 8007318:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800731c:	f000 8091 	beq.w	8007442 <HAL_TIM_ConfigClockSource+0x1de>
 8007320:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007324:	f200 8096 	bhi.w	8007454 <HAL_TIM_ConfigClockSource+0x1f0>
 8007328:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800732c:	f000 8089 	beq.w	8007442 <HAL_TIM_ConfigClockSource+0x1de>
 8007330:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007334:	f200 808e 	bhi.w	8007454 <HAL_TIM_ConfigClockSource+0x1f0>
 8007338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800733c:	d03e      	beq.n	80073bc <HAL_TIM_ConfigClockSource+0x158>
 800733e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007342:	f200 8087 	bhi.w	8007454 <HAL_TIM_ConfigClockSource+0x1f0>
 8007346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800734a:	f000 8086 	beq.w	800745a <HAL_TIM_ConfigClockSource+0x1f6>
 800734e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007352:	d87f      	bhi.n	8007454 <HAL_TIM_ConfigClockSource+0x1f0>
 8007354:	2b70      	cmp	r3, #112	; 0x70
 8007356:	d01a      	beq.n	800738e <HAL_TIM_ConfigClockSource+0x12a>
 8007358:	2b70      	cmp	r3, #112	; 0x70
 800735a:	d87b      	bhi.n	8007454 <HAL_TIM_ConfigClockSource+0x1f0>
 800735c:	2b60      	cmp	r3, #96	; 0x60
 800735e:	d050      	beq.n	8007402 <HAL_TIM_ConfigClockSource+0x19e>
 8007360:	2b60      	cmp	r3, #96	; 0x60
 8007362:	d877      	bhi.n	8007454 <HAL_TIM_ConfigClockSource+0x1f0>
 8007364:	2b50      	cmp	r3, #80	; 0x50
 8007366:	d03c      	beq.n	80073e2 <HAL_TIM_ConfigClockSource+0x17e>
 8007368:	2b50      	cmp	r3, #80	; 0x50
 800736a:	d873      	bhi.n	8007454 <HAL_TIM_ConfigClockSource+0x1f0>
 800736c:	2b40      	cmp	r3, #64	; 0x40
 800736e:	d058      	beq.n	8007422 <HAL_TIM_ConfigClockSource+0x1be>
 8007370:	2b40      	cmp	r3, #64	; 0x40
 8007372:	d86f      	bhi.n	8007454 <HAL_TIM_ConfigClockSource+0x1f0>
 8007374:	2b30      	cmp	r3, #48	; 0x30
 8007376:	d064      	beq.n	8007442 <HAL_TIM_ConfigClockSource+0x1de>
 8007378:	2b30      	cmp	r3, #48	; 0x30
 800737a:	d86b      	bhi.n	8007454 <HAL_TIM_ConfigClockSource+0x1f0>
 800737c:	2b20      	cmp	r3, #32
 800737e:	d060      	beq.n	8007442 <HAL_TIM_ConfigClockSource+0x1de>
 8007380:	2b20      	cmp	r3, #32
 8007382:	d867      	bhi.n	8007454 <HAL_TIM_ConfigClockSource+0x1f0>
 8007384:	2b00      	cmp	r3, #0
 8007386:	d05c      	beq.n	8007442 <HAL_TIM_ConfigClockSource+0x1de>
 8007388:	2b10      	cmp	r3, #16
 800738a:	d05a      	beq.n	8007442 <HAL_TIM_ConfigClockSource+0x1de>
 800738c:	e062      	b.n	8007454 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800739e:	f000 f9d9 	bl	8007754 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80073b0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	609a      	str	r2, [r3, #8]
      break;
 80073ba:	e04f      	b.n	800745c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80073cc:	f000 f9c2 	bl	8007754 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	689a      	ldr	r2, [r3, #8]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073de:	609a      	str	r2, [r3, #8]
      break;
 80073e0:	e03c      	b.n	800745c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ee:	461a      	mov	r2, r3
 80073f0:	f000 f934 	bl	800765c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2150      	movs	r1, #80	; 0x50
 80073fa:	4618      	mov	r0, r3
 80073fc:	f000 f98d 	bl	800771a <TIM_ITRx_SetConfig>
      break;
 8007400:	e02c      	b.n	800745c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800740e:	461a      	mov	r2, r3
 8007410:	f000 f953 	bl	80076ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2160      	movs	r1, #96	; 0x60
 800741a:	4618      	mov	r0, r3
 800741c:	f000 f97d 	bl	800771a <TIM_ITRx_SetConfig>
      break;
 8007420:	e01c      	b.n	800745c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800742e:	461a      	mov	r2, r3
 8007430:	f000 f914 	bl	800765c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	2140      	movs	r1, #64	; 0x40
 800743a:	4618      	mov	r0, r3
 800743c:	f000 f96d 	bl	800771a <TIM_ITRx_SetConfig>
      break;
 8007440:	e00c      	b.n	800745c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4619      	mov	r1, r3
 800744c:	4610      	mov	r0, r2
 800744e:	f000 f964 	bl	800771a <TIM_ITRx_SetConfig>
      break;
 8007452:	e003      	b.n	800745c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	73fb      	strb	r3, [r7, #15]
      break;
 8007458:	e000      	b.n	800745c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800745a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2201      	movs	r2, #1
 8007460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800746c:	7bfb      	ldrb	r3, [r7, #15]
}
 800746e:	4618      	mov	r0, r3
 8007470:	3710      	adds	r7, #16
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}
 8007476:	bf00      	nop
 8007478:	00100070 	.word	0x00100070
 800747c:	00100060 	.word	0x00100060
 8007480:	00100050 	.word	0x00100050
 8007484:	00100040 	.word	0x00100040
 8007488:	00100030 	.word	0x00100030
 800748c:	00100020 	.word	0x00100020

08007490 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007490:	b480      	push	{r7}
 8007492:	b083      	sub	sp, #12
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b083      	sub	sp, #12
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80074b8:	b480      	push	{r7}
 80074ba:	b083      	sub	sp, #12
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr

080074cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b083      	sub	sp, #12
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074d4:	bf00      	nop
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr

080074e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074e0:	b480      	push	{r7}
 80074e2:	b083      	sub	sp, #12
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074e8:	bf00      	nop
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b085      	sub	sp, #20
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a4c      	ldr	r2, [pc, #304]	; (8007638 <TIM_Base_SetConfig+0x144>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d017      	beq.n	800753c <TIM_Base_SetConfig+0x48>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007512:	d013      	beq.n	800753c <TIM_Base_SetConfig+0x48>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	4a49      	ldr	r2, [pc, #292]	; (800763c <TIM_Base_SetConfig+0x148>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d00f      	beq.n	800753c <TIM_Base_SetConfig+0x48>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	4a48      	ldr	r2, [pc, #288]	; (8007640 <TIM_Base_SetConfig+0x14c>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d00b      	beq.n	800753c <TIM_Base_SetConfig+0x48>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	4a47      	ldr	r2, [pc, #284]	; (8007644 <TIM_Base_SetConfig+0x150>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d007      	beq.n	800753c <TIM_Base_SetConfig+0x48>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	4a46      	ldr	r2, [pc, #280]	; (8007648 <TIM_Base_SetConfig+0x154>)
 8007530:	4293      	cmp	r3, r2
 8007532:	d003      	beq.n	800753c <TIM_Base_SetConfig+0x48>
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	4a45      	ldr	r2, [pc, #276]	; (800764c <TIM_Base_SetConfig+0x158>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d108      	bne.n	800754e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007542:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4313      	orrs	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a39      	ldr	r2, [pc, #228]	; (8007638 <TIM_Base_SetConfig+0x144>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d023      	beq.n	800759e <TIM_Base_SetConfig+0xaa>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800755c:	d01f      	beq.n	800759e <TIM_Base_SetConfig+0xaa>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a36      	ldr	r2, [pc, #216]	; (800763c <TIM_Base_SetConfig+0x148>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d01b      	beq.n	800759e <TIM_Base_SetConfig+0xaa>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a35      	ldr	r2, [pc, #212]	; (8007640 <TIM_Base_SetConfig+0x14c>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d017      	beq.n	800759e <TIM_Base_SetConfig+0xaa>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a34      	ldr	r2, [pc, #208]	; (8007644 <TIM_Base_SetConfig+0x150>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d013      	beq.n	800759e <TIM_Base_SetConfig+0xaa>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a33      	ldr	r2, [pc, #204]	; (8007648 <TIM_Base_SetConfig+0x154>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d00f      	beq.n	800759e <TIM_Base_SetConfig+0xaa>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a33      	ldr	r2, [pc, #204]	; (8007650 <TIM_Base_SetConfig+0x15c>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d00b      	beq.n	800759e <TIM_Base_SetConfig+0xaa>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	4a32      	ldr	r2, [pc, #200]	; (8007654 <TIM_Base_SetConfig+0x160>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d007      	beq.n	800759e <TIM_Base_SetConfig+0xaa>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	4a31      	ldr	r2, [pc, #196]	; (8007658 <TIM_Base_SetConfig+0x164>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d003      	beq.n	800759e <TIM_Base_SetConfig+0xaa>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	4a2c      	ldr	r2, [pc, #176]	; (800764c <TIM_Base_SetConfig+0x158>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d108      	bne.n	80075b0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80075a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	695b      	ldr	r3, [r3, #20]
 80075ba:	4313      	orrs	r3, r2
 80075bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	68fa      	ldr	r2, [r7, #12]
 80075c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a18      	ldr	r2, [pc, #96]	; (8007638 <TIM_Base_SetConfig+0x144>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d013      	beq.n	8007604 <TIM_Base_SetConfig+0x110>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a1a      	ldr	r2, [pc, #104]	; (8007648 <TIM_Base_SetConfig+0x154>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d00f      	beq.n	8007604 <TIM_Base_SetConfig+0x110>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a1a      	ldr	r2, [pc, #104]	; (8007650 <TIM_Base_SetConfig+0x15c>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d00b      	beq.n	8007604 <TIM_Base_SetConfig+0x110>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a19      	ldr	r2, [pc, #100]	; (8007654 <TIM_Base_SetConfig+0x160>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d007      	beq.n	8007604 <TIM_Base_SetConfig+0x110>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a18      	ldr	r2, [pc, #96]	; (8007658 <TIM_Base_SetConfig+0x164>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d003      	beq.n	8007604 <TIM_Base_SetConfig+0x110>
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a13      	ldr	r2, [pc, #76]	; (800764c <TIM_Base_SetConfig+0x158>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d103      	bne.n	800760c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	691a      	ldr	r2, [r3, #16]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	2201      	movs	r2, #1
 8007610:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	691b      	ldr	r3, [r3, #16]
 8007616:	f003 0301 	and.w	r3, r3, #1
 800761a:	2b01      	cmp	r3, #1
 800761c:	d105      	bne.n	800762a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	691b      	ldr	r3, [r3, #16]
 8007622:	f023 0201 	bic.w	r2, r3, #1
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	611a      	str	r2, [r3, #16]
  }
}
 800762a:	bf00      	nop
 800762c:	3714      	adds	r7, #20
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr
 8007636:	bf00      	nop
 8007638:	40012c00 	.word	0x40012c00
 800763c:	40000400 	.word	0x40000400
 8007640:	40000800 	.word	0x40000800
 8007644:	40000c00 	.word	0x40000c00
 8007648:	40013400 	.word	0x40013400
 800764c:	40015000 	.word	0x40015000
 8007650:	40014000 	.word	0x40014000
 8007654:	40014400 	.word	0x40014400
 8007658:	40014800 	.word	0x40014800

0800765c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800765c:	b480      	push	{r7}
 800765e:	b087      	sub	sp, #28
 8007660:	af00      	add	r7, sp, #0
 8007662:	60f8      	str	r0, [r7, #12]
 8007664:	60b9      	str	r1, [r7, #8]
 8007666:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6a1b      	ldr	r3, [r3, #32]
 800766c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	f023 0201 	bic.w	r2, r3, #1
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007686:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	011b      	lsls	r3, r3, #4
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	4313      	orrs	r3, r2
 8007690:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	f023 030a 	bic.w	r3, r3, #10
 8007698:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	4313      	orrs	r3, r2
 80076a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	697a      	ldr	r2, [r7, #20]
 80076ac:	621a      	str	r2, [r3, #32]
}
 80076ae:	bf00      	nop
 80076b0:	371c      	adds	r7, #28
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b087      	sub	sp, #28
 80076be:	af00      	add	r7, sp, #0
 80076c0:	60f8      	str	r0, [r7, #12]
 80076c2:	60b9      	str	r1, [r7, #8]
 80076c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	6a1b      	ldr	r3, [r3, #32]
 80076ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6a1b      	ldr	r3, [r3, #32]
 80076d0:	f023 0210 	bic.w	r2, r3, #16
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	699b      	ldr	r3, [r3, #24]
 80076dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	031b      	lsls	r3, r3, #12
 80076ea:	693a      	ldr	r2, [r7, #16]
 80076ec:	4313      	orrs	r3, r2
 80076ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076f0:	697b      	ldr	r3, [r7, #20]
 80076f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	011b      	lsls	r3, r3, #4
 80076fc:	697a      	ldr	r2, [r7, #20]
 80076fe:	4313      	orrs	r3, r2
 8007700:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	693a      	ldr	r2, [r7, #16]
 8007706:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	697a      	ldr	r2, [r7, #20]
 800770c:	621a      	str	r2, [r3, #32]
}
 800770e:	bf00      	nop
 8007710:	371c      	adds	r7, #28
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr

0800771a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800771a:	b480      	push	{r7}
 800771c:	b085      	sub	sp, #20
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007730:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007734:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	4313      	orrs	r3, r2
 800773c:	f043 0307 	orr.w	r3, r3, #7
 8007740:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68fa      	ldr	r2, [r7, #12]
 8007746:	609a      	str	r2, [r3, #8]
}
 8007748:	bf00      	nop
 800774a:	3714      	adds	r7, #20
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007754:	b480      	push	{r7}
 8007756:	b087      	sub	sp, #28
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	607a      	str	r2, [r7, #4]
 8007760:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800776e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	021a      	lsls	r2, r3, #8
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	431a      	orrs	r2, r3
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	4313      	orrs	r3, r2
 800777c:	697a      	ldr	r2, [r7, #20]
 800777e:	4313      	orrs	r3, r2
 8007780:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	609a      	str	r2, [r3, #8]
}
 8007788:	bf00      	nop
 800778a:	371c      	adds	r7, #28
 800778c:	46bd      	mov	sp, r7
 800778e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007792:	4770      	bx	lr

08007794 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
 800779c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d101      	bne.n	80077ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077a8:	2302      	movs	r3, #2
 80077aa:	e074      	b.n	8007896 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2202      	movs	r2, #2
 80077b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a34      	ldr	r2, [pc, #208]	; (80078a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d009      	beq.n	80077ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4a33      	ldr	r2, [pc, #204]	; (80078a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d004      	beq.n	80077ea <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a31      	ldr	r2, [pc, #196]	; (80078ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80077e6:	4293      	cmp	r3, r2
 80077e8:	d108      	bne.n	80077fc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	685b      	ldr	r3, [r3, #4]
 80077f6:	68fa      	ldr	r2, [r7, #12]
 80077f8:	4313      	orrs	r3, r2
 80077fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007802:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007806:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	68fa      	ldr	r2, [r7, #12]
 800780e:	4313      	orrs	r3, r2
 8007810:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a21      	ldr	r2, [pc, #132]	; (80078a4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d022      	beq.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800782c:	d01d      	beq.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a1f      	ldr	r2, [pc, #124]	; (80078b0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d018      	beq.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a1d      	ldr	r2, [pc, #116]	; (80078b4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d013      	beq.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a1c      	ldr	r2, [pc, #112]	; (80078b8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007848:	4293      	cmp	r3, r2
 800784a:	d00e      	beq.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a15      	ldr	r2, [pc, #84]	; (80078a8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d009      	beq.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a18      	ldr	r2, [pc, #96]	; (80078bc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800785c:	4293      	cmp	r3, r2
 800785e:	d004      	beq.n	800786a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a11      	ldr	r2, [pc, #68]	; (80078ac <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d10c      	bne.n	8007884 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007870:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	68ba      	ldr	r2, [r7, #8]
 8007878:	4313      	orrs	r3, r2
 800787a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68ba      	ldr	r2, [r7, #8]
 8007882:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3714      	adds	r7, #20
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop
 80078a4:	40012c00 	.word	0x40012c00
 80078a8:	40013400 	.word	0x40013400
 80078ac:	40015000 	.word	0x40015000
 80078b0:	40000400 	.word	0x40000400
 80078b4:	40000800 	.word	0x40000800
 80078b8:	40000c00 	.word	0x40000c00
 80078bc:	40014000 	.word	0x40014000

080078c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078c8:	bf00      	nop
 80078ca:	370c      	adds	r7, #12
 80078cc:	46bd      	mov	sp, r7
 80078ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d2:	4770      	bx	lr

080078d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80078dc:	bf00      	nop
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr

080078e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80078f0:	bf00      	nop
 80078f2:	370c      	adds	r7, #12
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007904:	bf00      	nop
 8007906:	370c      	adds	r7, #12
 8007908:	46bd      	mov	sp, r7
 800790a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790e:	4770      	bx	lr

08007910 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007918:	bf00      	nop
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007924:	b480      	push	{r7}
 8007926:	b083      	sub	sp, #12
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr

08007938 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007940:	bf00      	nop
 8007942:	370c      	adds	r7, #12
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e042      	b.n	80079e4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007964:	2b00      	cmp	r3, #0
 8007966:	d106      	bne.n	8007976 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f7f9 fec3 	bl	80016fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2224      	movs	r2, #36	; 0x24
 800797a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	681a      	ldr	r2, [r3, #0]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f022 0201 	bic.w	r2, r2, #1
 800798c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007992:	2b00      	cmp	r3, #0
 8007994:	d002      	beq.n	800799c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fb24 	bl	8007fe4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 f825 	bl	80079ec <UART_SetConfig>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b01      	cmp	r3, #1
 80079a6:	d101      	bne.n	80079ac <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80079a8:	2301      	movs	r3, #1
 80079aa:	e01b      	b.n	80079e4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685a      	ldr	r2, [r3, #4]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80079ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	689a      	ldr	r2, [r3, #8]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f042 0201 	orr.w	r2, r2, #1
 80079da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f000 fba3 	bl	8008128 <UART_CheckIdleState>
 80079e2:	4603      	mov	r3, r0
}
 80079e4:	4618      	mov	r0, r3
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079f0:	b08c      	sub	sp, #48	; 0x30
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	689a      	ldr	r2, [r3, #8]
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	431a      	orrs	r2, r3
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	695b      	ldr	r3, [r3, #20]
 8007a0a:	431a      	orrs	r2, r3
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	69db      	ldr	r3, [r3, #28]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	4baa      	ldr	r3, [pc, #680]	; (8007cc4 <UART_SetConfig+0x2d8>)
 8007a1c:	4013      	ands	r3, r2
 8007a1e:	697a      	ldr	r2, [r7, #20]
 8007a20:	6812      	ldr	r2, [r2, #0]
 8007a22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a24:	430b      	orrs	r3, r1
 8007a26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	685b      	ldr	r3, [r3, #4]
 8007a2e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	68da      	ldr	r2, [r3, #12]
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	430a      	orrs	r2, r1
 8007a3c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	699b      	ldr	r3, [r3, #24]
 8007a42:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a9f      	ldr	r2, [pc, #636]	; (8007cc8 <UART_SetConfig+0x2dc>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d004      	beq.n	8007a58 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	6a1b      	ldr	r3, [r3, #32]
 8007a52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a54:	4313      	orrs	r3, r2
 8007a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689b      	ldr	r3, [r3, #8]
 8007a5e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007a62:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	6812      	ldr	r2, [r2, #0]
 8007a6a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a6c:	430b      	orrs	r3, r1
 8007a6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a76:	f023 010f 	bic.w	r1, r3, #15
 8007a7a:	697b      	ldr	r3, [r7, #20]
 8007a7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a7e:	697b      	ldr	r3, [r7, #20]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	430a      	orrs	r2, r1
 8007a84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a90      	ldr	r2, [pc, #576]	; (8007ccc <UART_SetConfig+0x2e0>)
 8007a8c:	4293      	cmp	r3, r2
 8007a8e:	d125      	bne.n	8007adc <UART_SetConfig+0xf0>
 8007a90:	4b8f      	ldr	r3, [pc, #572]	; (8007cd0 <UART_SetConfig+0x2e4>)
 8007a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a96:	f003 0303 	and.w	r3, r3, #3
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d81a      	bhi.n	8007ad4 <UART_SetConfig+0xe8>
 8007a9e:	a201      	add	r2, pc, #4	; (adr r2, 8007aa4 <UART_SetConfig+0xb8>)
 8007aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aa4:	08007ab5 	.word	0x08007ab5
 8007aa8:	08007ac5 	.word	0x08007ac5
 8007aac:	08007abd 	.word	0x08007abd
 8007ab0:	08007acd 	.word	0x08007acd
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aba:	e116      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007abc:	2302      	movs	r3, #2
 8007abe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ac2:	e112      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007ac4:	2304      	movs	r3, #4
 8007ac6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007aca:	e10e      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007acc:	2308      	movs	r3, #8
 8007ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ad2:	e10a      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007ad4:	2310      	movs	r3, #16
 8007ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ada:	e106      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007adc:	697b      	ldr	r3, [r7, #20]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a7c      	ldr	r2, [pc, #496]	; (8007cd4 <UART_SetConfig+0x2e8>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d138      	bne.n	8007b58 <UART_SetConfig+0x16c>
 8007ae6:	4b7a      	ldr	r3, [pc, #488]	; (8007cd0 <UART_SetConfig+0x2e4>)
 8007ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aec:	f003 030c 	and.w	r3, r3, #12
 8007af0:	2b0c      	cmp	r3, #12
 8007af2:	d82d      	bhi.n	8007b50 <UART_SetConfig+0x164>
 8007af4:	a201      	add	r2, pc, #4	; (adr r2, 8007afc <UART_SetConfig+0x110>)
 8007af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007afa:	bf00      	nop
 8007afc:	08007b31 	.word	0x08007b31
 8007b00:	08007b51 	.word	0x08007b51
 8007b04:	08007b51 	.word	0x08007b51
 8007b08:	08007b51 	.word	0x08007b51
 8007b0c:	08007b41 	.word	0x08007b41
 8007b10:	08007b51 	.word	0x08007b51
 8007b14:	08007b51 	.word	0x08007b51
 8007b18:	08007b51 	.word	0x08007b51
 8007b1c:	08007b39 	.word	0x08007b39
 8007b20:	08007b51 	.word	0x08007b51
 8007b24:	08007b51 	.word	0x08007b51
 8007b28:	08007b51 	.word	0x08007b51
 8007b2c:	08007b49 	.word	0x08007b49
 8007b30:	2300      	movs	r3, #0
 8007b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b36:	e0d8      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007b38:	2302      	movs	r3, #2
 8007b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b3e:	e0d4      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007b40:	2304      	movs	r3, #4
 8007b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b46:	e0d0      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007b48:	2308      	movs	r3, #8
 8007b4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b4e:	e0cc      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007b50:	2310      	movs	r3, #16
 8007b52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b56:	e0c8      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a5e      	ldr	r2, [pc, #376]	; (8007cd8 <UART_SetConfig+0x2ec>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d125      	bne.n	8007bae <UART_SetConfig+0x1c2>
 8007b62:	4b5b      	ldr	r3, [pc, #364]	; (8007cd0 <UART_SetConfig+0x2e4>)
 8007b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007b6c:	2b30      	cmp	r3, #48	; 0x30
 8007b6e:	d016      	beq.n	8007b9e <UART_SetConfig+0x1b2>
 8007b70:	2b30      	cmp	r3, #48	; 0x30
 8007b72:	d818      	bhi.n	8007ba6 <UART_SetConfig+0x1ba>
 8007b74:	2b20      	cmp	r3, #32
 8007b76:	d00a      	beq.n	8007b8e <UART_SetConfig+0x1a2>
 8007b78:	2b20      	cmp	r3, #32
 8007b7a:	d814      	bhi.n	8007ba6 <UART_SetConfig+0x1ba>
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d002      	beq.n	8007b86 <UART_SetConfig+0x19a>
 8007b80:	2b10      	cmp	r3, #16
 8007b82:	d008      	beq.n	8007b96 <UART_SetConfig+0x1aa>
 8007b84:	e00f      	b.n	8007ba6 <UART_SetConfig+0x1ba>
 8007b86:	2300      	movs	r3, #0
 8007b88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b8c:	e0ad      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007b8e:	2302      	movs	r3, #2
 8007b90:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b94:	e0a9      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007b96:	2304      	movs	r3, #4
 8007b98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007b9c:	e0a5      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007b9e:	2308      	movs	r3, #8
 8007ba0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ba4:	e0a1      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007ba6:	2310      	movs	r3, #16
 8007ba8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bac:	e09d      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007bae:	697b      	ldr	r3, [r7, #20]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a4a      	ldr	r2, [pc, #296]	; (8007cdc <UART_SetConfig+0x2f0>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d125      	bne.n	8007c04 <UART_SetConfig+0x218>
 8007bb8:	4b45      	ldr	r3, [pc, #276]	; (8007cd0 <UART_SetConfig+0x2e4>)
 8007bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007bc2:	2bc0      	cmp	r3, #192	; 0xc0
 8007bc4:	d016      	beq.n	8007bf4 <UART_SetConfig+0x208>
 8007bc6:	2bc0      	cmp	r3, #192	; 0xc0
 8007bc8:	d818      	bhi.n	8007bfc <UART_SetConfig+0x210>
 8007bca:	2b80      	cmp	r3, #128	; 0x80
 8007bcc:	d00a      	beq.n	8007be4 <UART_SetConfig+0x1f8>
 8007bce:	2b80      	cmp	r3, #128	; 0x80
 8007bd0:	d814      	bhi.n	8007bfc <UART_SetConfig+0x210>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d002      	beq.n	8007bdc <UART_SetConfig+0x1f0>
 8007bd6:	2b40      	cmp	r3, #64	; 0x40
 8007bd8:	d008      	beq.n	8007bec <UART_SetConfig+0x200>
 8007bda:	e00f      	b.n	8007bfc <UART_SetConfig+0x210>
 8007bdc:	2300      	movs	r3, #0
 8007bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007be2:	e082      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007be4:	2302      	movs	r3, #2
 8007be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bea:	e07e      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007bec:	2304      	movs	r3, #4
 8007bee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bf2:	e07a      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007bf4:	2308      	movs	r3, #8
 8007bf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007bfa:	e076      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007bfc:	2310      	movs	r3, #16
 8007bfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c02:	e072      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a35      	ldr	r2, [pc, #212]	; (8007ce0 <UART_SetConfig+0x2f4>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d12a      	bne.n	8007c64 <UART_SetConfig+0x278>
 8007c0e:	4b30      	ldr	r3, [pc, #192]	; (8007cd0 <UART_SetConfig+0x2e4>)
 8007c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c1c:	d01a      	beq.n	8007c54 <UART_SetConfig+0x268>
 8007c1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c22:	d81b      	bhi.n	8007c5c <UART_SetConfig+0x270>
 8007c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c28:	d00c      	beq.n	8007c44 <UART_SetConfig+0x258>
 8007c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c2e:	d815      	bhi.n	8007c5c <UART_SetConfig+0x270>
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d003      	beq.n	8007c3c <UART_SetConfig+0x250>
 8007c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c38:	d008      	beq.n	8007c4c <UART_SetConfig+0x260>
 8007c3a:	e00f      	b.n	8007c5c <UART_SetConfig+0x270>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c42:	e052      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007c44:	2302      	movs	r3, #2
 8007c46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c4a:	e04e      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007c4c:	2304      	movs	r3, #4
 8007c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c52:	e04a      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007c54:	2308      	movs	r3, #8
 8007c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c5a:	e046      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007c5c:	2310      	movs	r3, #16
 8007c5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007c62:	e042      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007c64:	697b      	ldr	r3, [r7, #20]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a17      	ldr	r2, [pc, #92]	; (8007cc8 <UART_SetConfig+0x2dc>)
 8007c6a:	4293      	cmp	r3, r2
 8007c6c:	d13a      	bne.n	8007ce4 <UART_SetConfig+0x2f8>
 8007c6e:	4b18      	ldr	r3, [pc, #96]	; (8007cd0 <UART_SetConfig+0x2e4>)
 8007c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007c78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c7c:	d01a      	beq.n	8007cb4 <UART_SetConfig+0x2c8>
 8007c7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c82:	d81b      	bhi.n	8007cbc <UART_SetConfig+0x2d0>
 8007c84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c88:	d00c      	beq.n	8007ca4 <UART_SetConfig+0x2b8>
 8007c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c8e:	d815      	bhi.n	8007cbc <UART_SetConfig+0x2d0>
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d003      	beq.n	8007c9c <UART_SetConfig+0x2b0>
 8007c94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c98:	d008      	beq.n	8007cac <UART_SetConfig+0x2c0>
 8007c9a:	e00f      	b.n	8007cbc <UART_SetConfig+0x2d0>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ca2:	e022      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007ca4:	2302      	movs	r3, #2
 8007ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007caa:	e01e      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007cac:	2304      	movs	r3, #4
 8007cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cb2:	e01a      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007cb4:	2308      	movs	r3, #8
 8007cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cba:	e016      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007cbc:	2310      	movs	r3, #16
 8007cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007cc2:	e012      	b.n	8007cea <UART_SetConfig+0x2fe>
 8007cc4:	cfff69f3 	.word	0xcfff69f3
 8007cc8:	40008000 	.word	0x40008000
 8007ccc:	40013800 	.word	0x40013800
 8007cd0:	40021000 	.word	0x40021000
 8007cd4:	40004400 	.word	0x40004400
 8007cd8:	40004800 	.word	0x40004800
 8007cdc:	40004c00 	.word	0x40004c00
 8007ce0:	40005000 	.word	0x40005000
 8007ce4:	2310      	movs	r3, #16
 8007ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	4aae      	ldr	r2, [pc, #696]	; (8007fa8 <UART_SetConfig+0x5bc>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	f040 8097 	bne.w	8007e24 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007cf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007cfa:	2b08      	cmp	r3, #8
 8007cfc:	d823      	bhi.n	8007d46 <UART_SetConfig+0x35a>
 8007cfe:	a201      	add	r2, pc, #4	; (adr r2, 8007d04 <UART_SetConfig+0x318>)
 8007d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d04:	08007d29 	.word	0x08007d29
 8007d08:	08007d47 	.word	0x08007d47
 8007d0c:	08007d31 	.word	0x08007d31
 8007d10:	08007d47 	.word	0x08007d47
 8007d14:	08007d37 	.word	0x08007d37
 8007d18:	08007d47 	.word	0x08007d47
 8007d1c:	08007d47 	.word	0x08007d47
 8007d20:	08007d47 	.word	0x08007d47
 8007d24:	08007d3f 	.word	0x08007d3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d28:	f7fe fd8e 	bl	8006848 <HAL_RCC_GetPCLK1Freq>
 8007d2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d2e:	e010      	b.n	8007d52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d30:	4b9e      	ldr	r3, [pc, #632]	; (8007fac <UART_SetConfig+0x5c0>)
 8007d32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d34:	e00d      	b.n	8007d52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d36:	f7fe fd19 	bl	800676c <HAL_RCC_GetSysClockFreq>
 8007d3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007d3c:	e009      	b.n	8007d52 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007d44:	e005      	b.n	8007d52 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007d46:	2300      	movs	r3, #0
 8007d48:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007d50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 8130 	beq.w	8007fba <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d5e:	4a94      	ldr	r2, [pc, #592]	; (8007fb0 <UART_SetConfig+0x5c4>)
 8007d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d64:	461a      	mov	r2, r3
 8007d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d68:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d6c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	4613      	mov	r3, r2
 8007d74:	005b      	lsls	r3, r3, #1
 8007d76:	4413      	add	r3, r2
 8007d78:	69ba      	ldr	r2, [r7, #24]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d305      	bcc.n	8007d8a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d903      	bls.n	8007d92 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007d90:	e113      	b.n	8007fba <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d94:	2200      	movs	r2, #0
 8007d96:	60bb      	str	r3, [r7, #8]
 8007d98:	60fa      	str	r2, [r7, #12]
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d9e:	4a84      	ldr	r2, [pc, #528]	; (8007fb0 <UART_SetConfig+0x5c4>)
 8007da0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	2200      	movs	r2, #0
 8007da8:	603b      	str	r3, [r7, #0]
 8007daa:	607a      	str	r2, [r7, #4]
 8007dac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007db0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007db4:	f7f8 fa94 	bl	80002e0 <__aeabi_uldivmod>
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	4610      	mov	r0, r2
 8007dbe:	4619      	mov	r1, r3
 8007dc0:	f04f 0200 	mov.w	r2, #0
 8007dc4:	f04f 0300 	mov.w	r3, #0
 8007dc8:	020b      	lsls	r3, r1, #8
 8007dca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007dce:	0202      	lsls	r2, r0, #8
 8007dd0:	6979      	ldr	r1, [r7, #20]
 8007dd2:	6849      	ldr	r1, [r1, #4]
 8007dd4:	0849      	lsrs	r1, r1, #1
 8007dd6:	2000      	movs	r0, #0
 8007dd8:	460c      	mov	r4, r1
 8007dda:	4605      	mov	r5, r0
 8007ddc:	eb12 0804 	adds.w	r8, r2, r4
 8007de0:	eb43 0905 	adc.w	r9, r3, r5
 8007de4:	697b      	ldr	r3, [r7, #20]
 8007de6:	685b      	ldr	r3, [r3, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	469a      	mov	sl, r3
 8007dec:	4693      	mov	fp, r2
 8007dee:	4652      	mov	r2, sl
 8007df0:	465b      	mov	r3, fp
 8007df2:	4640      	mov	r0, r8
 8007df4:	4649      	mov	r1, r9
 8007df6:	f7f8 fa73 	bl	80002e0 <__aeabi_uldivmod>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	4613      	mov	r3, r2
 8007e00:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007e02:	6a3b      	ldr	r3, [r7, #32]
 8007e04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e08:	d308      	bcc.n	8007e1c <UART_SetConfig+0x430>
 8007e0a:	6a3b      	ldr	r3, [r7, #32]
 8007e0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e10:	d204      	bcs.n	8007e1c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	6a3a      	ldr	r2, [r7, #32]
 8007e18:	60da      	str	r2, [r3, #12]
 8007e1a:	e0ce      	b.n	8007fba <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e22:	e0ca      	b.n	8007fba <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	69db      	ldr	r3, [r3, #28]
 8007e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e2c:	d166      	bne.n	8007efc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007e2e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007e32:	2b08      	cmp	r3, #8
 8007e34:	d827      	bhi.n	8007e86 <UART_SetConfig+0x49a>
 8007e36:	a201      	add	r2, pc, #4	; (adr r2, 8007e3c <UART_SetConfig+0x450>)
 8007e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3c:	08007e61 	.word	0x08007e61
 8007e40:	08007e69 	.word	0x08007e69
 8007e44:	08007e71 	.word	0x08007e71
 8007e48:	08007e87 	.word	0x08007e87
 8007e4c:	08007e77 	.word	0x08007e77
 8007e50:	08007e87 	.word	0x08007e87
 8007e54:	08007e87 	.word	0x08007e87
 8007e58:	08007e87 	.word	0x08007e87
 8007e5c:	08007e7f 	.word	0x08007e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e60:	f7fe fcf2 	bl	8006848 <HAL_RCC_GetPCLK1Freq>
 8007e64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e66:	e014      	b.n	8007e92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e68:	f7fe fd04 	bl	8006874 <HAL_RCC_GetPCLK2Freq>
 8007e6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e6e:	e010      	b.n	8007e92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e70:	4b4e      	ldr	r3, [pc, #312]	; (8007fac <UART_SetConfig+0x5c0>)
 8007e72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e74:	e00d      	b.n	8007e92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e76:	f7fe fc79 	bl	800676c <HAL_RCC_GetSysClockFreq>
 8007e7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007e7c:	e009      	b.n	8007e92 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007e84:	e005      	b.n	8007e92 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007e86:	2300      	movs	r3, #0
 8007e88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007e90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	f000 8090 	beq.w	8007fba <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e9e:	4a44      	ldr	r2, [pc, #272]	; (8007fb0 <UART_SetConfig+0x5c4>)
 8007ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea8:	fbb3 f3f2 	udiv	r3, r3, r2
 8007eac:	005a      	lsls	r2, r3, #1
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	085b      	lsrs	r3, r3, #1
 8007eb4:	441a      	add	r2, r3
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ebe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ec0:	6a3b      	ldr	r3, [r7, #32]
 8007ec2:	2b0f      	cmp	r3, #15
 8007ec4:	d916      	bls.n	8007ef4 <UART_SetConfig+0x508>
 8007ec6:	6a3b      	ldr	r3, [r7, #32]
 8007ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ecc:	d212      	bcs.n	8007ef4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ece:	6a3b      	ldr	r3, [r7, #32]
 8007ed0:	b29b      	uxth	r3, r3
 8007ed2:	f023 030f 	bic.w	r3, r3, #15
 8007ed6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	085b      	lsrs	r3, r3, #1
 8007edc:	b29b      	uxth	r3, r3
 8007ede:	f003 0307 	and.w	r3, r3, #7
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	8bfb      	ldrh	r3, [r7, #30]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8007eea:	697b      	ldr	r3, [r7, #20]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	8bfa      	ldrh	r2, [r7, #30]
 8007ef0:	60da      	str	r2, [r3, #12]
 8007ef2:	e062      	b.n	8007fba <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007efa:	e05e      	b.n	8007fba <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007efc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007f00:	2b08      	cmp	r3, #8
 8007f02:	d828      	bhi.n	8007f56 <UART_SetConfig+0x56a>
 8007f04:	a201      	add	r2, pc, #4	; (adr r2, 8007f0c <UART_SetConfig+0x520>)
 8007f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0a:	bf00      	nop
 8007f0c:	08007f31 	.word	0x08007f31
 8007f10:	08007f39 	.word	0x08007f39
 8007f14:	08007f41 	.word	0x08007f41
 8007f18:	08007f57 	.word	0x08007f57
 8007f1c:	08007f47 	.word	0x08007f47
 8007f20:	08007f57 	.word	0x08007f57
 8007f24:	08007f57 	.word	0x08007f57
 8007f28:	08007f57 	.word	0x08007f57
 8007f2c:	08007f4f 	.word	0x08007f4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f30:	f7fe fc8a 	bl	8006848 <HAL_RCC_GetPCLK1Freq>
 8007f34:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f36:	e014      	b.n	8007f62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007f38:	f7fe fc9c 	bl	8006874 <HAL_RCC_GetPCLK2Freq>
 8007f3c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f3e:	e010      	b.n	8007f62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f40:	4b1a      	ldr	r3, [pc, #104]	; (8007fac <UART_SetConfig+0x5c0>)
 8007f42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f44:	e00d      	b.n	8007f62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f46:	f7fe fc11 	bl	800676c <HAL_RCC_GetSysClockFreq>
 8007f4a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007f4c:	e009      	b.n	8007f62 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007f52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007f54:	e005      	b.n	8007f62 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007f56:	2300      	movs	r3, #0
 8007f58:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007f60:	bf00      	nop
    }

    if (pclk != 0U)
 8007f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d028      	beq.n	8007fba <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6c:	4a10      	ldr	r2, [pc, #64]	; (8007fb0 <UART_SetConfig+0x5c4>)
 8007f6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f72:	461a      	mov	r2, r3
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	fbb3 f2f2 	udiv	r2, r3, r2
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	085b      	lsrs	r3, r3, #1
 8007f80:	441a      	add	r2, r3
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f8a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f8c:	6a3b      	ldr	r3, [r7, #32]
 8007f8e:	2b0f      	cmp	r3, #15
 8007f90:	d910      	bls.n	8007fb4 <UART_SetConfig+0x5c8>
 8007f92:	6a3b      	ldr	r3, [r7, #32]
 8007f94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f98:	d20c      	bcs.n	8007fb4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007f9a:	6a3b      	ldr	r3, [r7, #32]
 8007f9c:	b29a      	uxth	r2, r3
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	60da      	str	r2, [r3, #12]
 8007fa4:	e009      	b.n	8007fba <UART_SetConfig+0x5ce>
 8007fa6:	bf00      	nop
 8007fa8:	40008000 	.word	0x40008000
 8007fac:	00f42400 	.word	0x00f42400
 8007fb0:	0800dfc4 	.word	0x0800dfc4
      }
      else
      {
        ret = HAL_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8007fba:	697b      	ldr	r3, [r7, #20]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007fd6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3730      	adds	r7, #48	; 0x30
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007fe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff0:	f003 0308 	and.w	r3, r3, #8
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00a      	beq.n	800800e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	430a      	orrs	r2, r1
 800800c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00a      	beq.n	8008030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	685b      	ldr	r3, [r3, #4]
 8008020:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	430a      	orrs	r2, r1
 800802e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008034:	f003 0302 	and.w	r3, r3, #2
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00a      	beq.n	8008052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	430a      	orrs	r2, r1
 8008050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008056:	f003 0304 	and.w	r3, r3, #4
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00a      	beq.n	8008074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	430a      	orrs	r2, r1
 8008072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008078:	f003 0310 	and.w	r3, r3, #16
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00a      	beq.n	8008096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	430a      	orrs	r2, r1
 8008094:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800809a:	f003 0320 	and.w	r3, r3, #32
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d00a      	beq.n	80080b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	689b      	ldr	r3, [r3, #8]
 80080a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	430a      	orrs	r2, r1
 80080b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d01a      	beq.n	80080fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	685b      	ldr	r3, [r3, #4]
 80080ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	430a      	orrs	r2, r1
 80080d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080e2:	d10a      	bne.n	80080fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	430a      	orrs	r2, r1
 80080f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008102:	2b00      	cmp	r3, #0
 8008104:	d00a      	beq.n	800811c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	430a      	orrs	r2, r1
 800811a:	605a      	str	r2, [r3, #4]
  }
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b098      	sub	sp, #96	; 0x60
 800812c:	af02      	add	r7, sp, #8
 800812e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2200      	movs	r2, #0
 8008134:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008138:	f7f9 fd2c 	bl	8001b94 <HAL_GetTick>
 800813c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	f003 0308 	and.w	r3, r3, #8
 8008148:	2b08      	cmp	r3, #8
 800814a:	d12f      	bne.n	80081ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800814c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008150:	9300      	str	r3, [sp, #0]
 8008152:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008154:	2200      	movs	r2, #0
 8008156:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 f88e 	bl	800827c <UART_WaitOnFlagUntilTimeout>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d022      	beq.n	80081ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816e:	e853 3f00 	ldrex	r3, [r3]
 8008172:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800817a:	653b      	str	r3, [r7, #80]	; 0x50
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	461a      	mov	r2, r3
 8008182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008184:	647b      	str	r3, [r7, #68]	; 0x44
 8008186:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008188:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800818a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800818c:	e841 2300 	strex	r3, r2, [r1]
 8008190:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008192:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1e6      	bne.n	8008166 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2220      	movs	r2, #32
 800819c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80081a8:	2303      	movs	r3, #3
 80081aa:	e063      	b.n	8008274 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	f003 0304 	and.w	r3, r3, #4
 80081b6:	2b04      	cmp	r3, #4
 80081b8:	d149      	bne.n	800824e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80081ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80081be:	9300      	str	r3, [sp, #0]
 80081c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081c2:	2200      	movs	r2, #0
 80081c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 f857 	bl	800827c <UART_WaitOnFlagUntilTimeout>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d03c      	beq.n	800824e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	e853 3f00 	ldrex	r3, [r3]
 80081e0:	623b      	str	r3, [r7, #32]
   return(result);
 80081e2:	6a3b      	ldr	r3, [r7, #32]
 80081e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80081e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	461a      	mov	r2, r3
 80081f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081f2:	633b      	str	r3, [r7, #48]	; 0x30
 80081f4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081fa:	e841 2300 	strex	r3, r2, [r1]
 80081fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008202:	2b00      	cmp	r3, #0
 8008204:	d1e6      	bne.n	80081d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	3308      	adds	r3, #8
 800820c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	e853 3f00 	ldrex	r3, [r3]
 8008214:	60fb      	str	r3, [r7, #12]
   return(result);
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f023 0301 	bic.w	r3, r3, #1
 800821c:	64bb      	str	r3, [r7, #72]	; 0x48
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3308      	adds	r3, #8
 8008224:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008226:	61fa      	str	r2, [r7, #28]
 8008228:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800822a:	69b9      	ldr	r1, [r7, #24]
 800822c:	69fa      	ldr	r2, [r7, #28]
 800822e:	e841 2300 	strex	r3, r2, [r1]
 8008232:	617b      	str	r3, [r7, #20]
   return(result);
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2b00      	cmp	r3, #0
 8008238:	d1e5      	bne.n	8008206 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2220      	movs	r2, #32
 800823e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e012      	b.n	8008274 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2220      	movs	r2, #32
 8008252:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2220      	movs	r2, #32
 800825a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2200      	movs	r2, #0
 8008268:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008272:	2300      	movs	r3, #0
}
 8008274:	4618      	mov	r0, r3
 8008276:	3758      	adds	r7, #88	; 0x58
 8008278:	46bd      	mov	sp, r7
 800827a:	bd80      	pop	{r7, pc}

0800827c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b084      	sub	sp, #16
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	603b      	str	r3, [r7, #0]
 8008288:	4613      	mov	r3, r2
 800828a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800828c:	e04f      	b.n	800832e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008294:	d04b      	beq.n	800832e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008296:	f7f9 fc7d 	bl	8001b94 <HAL_GetTick>
 800829a:	4602      	mov	r2, r0
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	69ba      	ldr	r2, [r7, #24]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d302      	bcc.n	80082ac <UART_WaitOnFlagUntilTimeout+0x30>
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d101      	bne.n	80082b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e04e      	b.n	800834e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f003 0304 	and.w	r3, r3, #4
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d037      	beq.n	800832e <UART_WaitOnFlagUntilTimeout+0xb2>
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	2b80      	cmp	r3, #128	; 0x80
 80082c2:	d034      	beq.n	800832e <UART_WaitOnFlagUntilTimeout+0xb2>
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2b40      	cmp	r3, #64	; 0x40
 80082c8:	d031      	beq.n	800832e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	69db      	ldr	r3, [r3, #28]
 80082d0:	f003 0308 	and.w	r3, r3, #8
 80082d4:	2b08      	cmp	r3, #8
 80082d6:	d110      	bne.n	80082fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2208      	movs	r2, #8
 80082de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f000 f838 	bl	8008356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2208      	movs	r2, #8
 80082ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2200      	movs	r2, #0
 80082f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80082f6:	2301      	movs	r3, #1
 80082f8:	e029      	b.n	800834e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	69db      	ldr	r3, [r3, #28]
 8008300:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008304:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008308:	d111      	bne.n	800832e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008314:	68f8      	ldr	r0, [r7, #12]
 8008316:	f000 f81e 	bl	8008356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	2220      	movs	r2, #32
 800831e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800832a:	2303      	movs	r3, #3
 800832c:	e00f      	b.n	800834e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	69da      	ldr	r2, [r3, #28]
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	4013      	ands	r3, r2
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	429a      	cmp	r2, r3
 800833c:	bf0c      	ite	eq
 800833e:	2301      	moveq	r3, #1
 8008340:	2300      	movne	r3, #0
 8008342:	b2db      	uxtb	r3, r3
 8008344:	461a      	mov	r2, r3
 8008346:	79fb      	ldrb	r3, [r7, #7]
 8008348:	429a      	cmp	r2, r3
 800834a:	d0a0      	beq.n	800828e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800834c:	2300      	movs	r3, #0
}
 800834e:	4618      	mov	r0, r3
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}

08008356 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008356:	b480      	push	{r7}
 8008358:	b095      	sub	sp, #84	; 0x54
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008364:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008366:	e853 3f00 	ldrex	r3, [r3]
 800836a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800836c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800836e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008372:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	461a      	mov	r2, r3
 800837a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800837c:	643b      	str	r3, [r7, #64]	; 0x40
 800837e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008380:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008382:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008384:	e841 2300 	strex	r3, r2, [r1]
 8008388:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800838a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1e6      	bne.n	800835e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	3308      	adds	r3, #8
 8008396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	e853 3f00 	ldrex	r3, [r3]
 800839e:	61fb      	str	r3, [r7, #28]
   return(result);
 80083a0:	69fb      	ldr	r3, [r7, #28]
 80083a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083a6:	f023 0301 	bic.w	r3, r3, #1
 80083aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3308      	adds	r3, #8
 80083b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80083b4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80083b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80083ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80083bc:	e841 2300 	strex	r3, r2, [r1]
 80083c0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80083c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d1e3      	bne.n	8008390 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d118      	bne.n	8008402 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	e853 3f00 	ldrex	r3, [r3]
 80083dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	f023 0310 	bic.w	r3, r3, #16
 80083e4:	647b      	str	r3, [r7, #68]	; 0x44
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	461a      	mov	r2, r3
 80083ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083ee:	61bb      	str	r3, [r7, #24]
 80083f0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083f2:	6979      	ldr	r1, [r7, #20]
 80083f4:	69ba      	ldr	r2, [r7, #24]
 80083f6:	e841 2300 	strex	r3, r2, [r1]
 80083fa:	613b      	str	r3, [r7, #16]
   return(result);
 80083fc:	693b      	ldr	r3, [r7, #16]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d1e6      	bne.n	80083d0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2220      	movs	r2, #32
 8008406:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2200      	movs	r2, #0
 8008414:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008416:	bf00      	nop
 8008418:	3754      	adds	r7, #84	; 0x54
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr

08008422 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008422:	b480      	push	{r7}
 8008424:	b085      	sub	sp, #20
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008430:	2b01      	cmp	r3, #1
 8008432:	d101      	bne.n	8008438 <HAL_UARTEx_DisableFifoMode+0x16>
 8008434:	2302      	movs	r3, #2
 8008436:	e027      	b.n	8008488 <HAL_UARTEx_DisableFifoMode+0x66>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2224      	movs	r2, #36	; 0x24
 8008444:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	681a      	ldr	r2, [r3, #0]
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f022 0201 	bic.w	r2, r2, #1
 800845e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008466:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2220      	movs	r2, #32
 800847a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3714      	adds	r7, #20
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
 800849c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80084a4:	2b01      	cmp	r3, #1
 80084a6:	d101      	bne.n	80084ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084a8:	2302      	movs	r3, #2
 80084aa:	e02d      	b.n	8008508 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	2201      	movs	r2, #1
 80084b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2224      	movs	r2, #36	; 0x24
 80084b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f022 0201 	bic.w	r2, r2, #1
 80084d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	683a      	ldr	r2, [r7, #0]
 80084e4:	430a      	orrs	r2, r1
 80084e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f000 f84f 	bl	800858c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	68fa      	ldr	r2, [r7, #12]
 80084f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2220      	movs	r2, #32
 80084fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008506:	2300      	movs	r3, #0
}
 8008508:	4618      	mov	r0, r3
 800850a:	3710      	adds	r7, #16
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b084      	sub	sp, #16
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008520:	2b01      	cmp	r3, #1
 8008522:	d101      	bne.n	8008528 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008524:	2302      	movs	r3, #2
 8008526:	e02d      	b.n	8008584 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2201      	movs	r2, #1
 800852c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2224      	movs	r2, #36	; 0x24
 8008534:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681a      	ldr	r2, [r3, #0]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f022 0201 	bic.w	r2, r2, #1
 800854e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	430a      	orrs	r2, r1
 8008562:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f000 f811 	bl	800858c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	68fa      	ldr	r2, [r7, #12]
 8008570:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2220      	movs	r2, #32
 8008576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2200      	movs	r2, #0
 800857e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008582:	2300      	movs	r3, #0
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008598:	2b00      	cmp	r3, #0
 800859a:	d108      	bne.n	80085ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085ac:	e031      	b.n	8008612 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085ae:	2308      	movs	r3, #8
 80085b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085b2:	2308      	movs	r3, #8
 80085b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	689b      	ldr	r3, [r3, #8]
 80085bc:	0e5b      	lsrs	r3, r3, #25
 80085be:	b2db      	uxtb	r3, r3
 80085c0:	f003 0307 	and.w	r3, r3, #7
 80085c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	689b      	ldr	r3, [r3, #8]
 80085cc:	0f5b      	lsrs	r3, r3, #29
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	f003 0307 	and.w	r3, r3, #7
 80085d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085d6:	7bbb      	ldrb	r3, [r7, #14]
 80085d8:	7b3a      	ldrb	r2, [r7, #12]
 80085da:	4911      	ldr	r1, [pc, #68]	; (8008620 <UARTEx_SetNbDataToProcess+0x94>)
 80085dc:	5c8a      	ldrb	r2, [r1, r2]
 80085de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80085e2:	7b3a      	ldrb	r2, [r7, #12]
 80085e4:	490f      	ldr	r1, [pc, #60]	; (8008624 <UARTEx_SetNbDataToProcess+0x98>)
 80085e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80085e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80085ec:	b29a      	uxth	r2, r3
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80085f4:	7bfb      	ldrb	r3, [r7, #15]
 80085f6:	7b7a      	ldrb	r2, [r7, #13]
 80085f8:	4909      	ldr	r1, [pc, #36]	; (8008620 <UARTEx_SetNbDataToProcess+0x94>)
 80085fa:	5c8a      	ldrb	r2, [r1, r2]
 80085fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008600:	7b7a      	ldrb	r2, [r7, #13]
 8008602:	4908      	ldr	r1, [pc, #32]	; (8008624 <UARTEx_SetNbDataToProcess+0x98>)
 8008604:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008606:	fb93 f3f2 	sdiv	r3, r3, r2
 800860a:	b29a      	uxth	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008612:	bf00      	nop
 8008614:	3714      	adds	r7, #20
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	0800dfdc 	.word	0x0800dfdc
 8008624:	0800dfe4 	.word	0x0800dfe4

08008628 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8008638:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800863c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	b29a      	uxth	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3714      	adds	r7, #20
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr

08008656 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8008656:	b480      	push	{r7}
 8008658:	b085      	sub	sp, #20
 800865a:	af00      	add	r7, sp, #0
 800865c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800865e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8008662:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800866a:	b29a      	uxth	r2, r3
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	b29b      	uxth	r3, r3
 8008670:	43db      	mvns	r3, r3
 8008672:	b29b      	uxth	r3, r3
 8008674:	4013      	ands	r3, r2
 8008676:	b29a      	uxth	r2, r3
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	1d3b      	adds	r3, r7, #4
 8008696:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	2201      	movs	r2, #1
 800869e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2200      	movs	r2, #0
 80086a6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2200      	movs	r2, #0
 80086b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3714      	adds	r7, #20
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b09d      	sub	sp, #116	; 0x74
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
 80086d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80086d2:	2300      	movs	r3, #0
 80086d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	781b      	ldrb	r3, [r3, #0]
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	881b      	ldrh	r3, [r3, #0]
 80086e4:	b29b      	uxth	r3, r3
 80086e6:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80086ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80086ee:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	78db      	ldrb	r3, [r3, #3]
 80086f6:	2b03      	cmp	r3, #3
 80086f8:	d81f      	bhi.n	800873a <USB_ActivateEndpoint+0x72>
 80086fa:	a201      	add	r2, pc, #4	; (adr r2, 8008700 <USB_ActivateEndpoint+0x38>)
 80086fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008700:	08008711 	.word	0x08008711
 8008704:	0800872d 	.word	0x0800872d
 8008708:	08008743 	.word	0x08008743
 800870c:	0800871f 	.word	0x0800871f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8008710:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008714:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008718:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800871c:	e012      	b.n	8008744 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800871e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008722:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8008726:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800872a:	e00b      	b.n	8008744 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800872c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008730:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008734:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8008738:	e004      	b.n	8008744 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800873a:	2301      	movs	r3, #1
 800873c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8008740:	e000      	b.n	8008744 <USB_ActivateEndpoint+0x7c>
      break;
 8008742:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	441a      	add	r2, r3
 800874e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8008752:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008756:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800875a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800875e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008762:	b29b      	uxth	r3, r3
 8008764:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8008766:	687a      	ldr	r2, [r7, #4]
 8008768:	683b      	ldr	r3, [r7, #0]
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	881b      	ldrh	r3, [r3, #0]
 8008772:	b29b      	uxth	r3, r3
 8008774:	b21b      	sxth	r3, r3
 8008776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800877a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800877e:	b21a      	sxth	r2, r3
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	b21b      	sxth	r3, r3
 8008786:	4313      	orrs	r3, r2
 8008788:	b21b      	sxth	r3, r3
 800878a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 800878e:	687a      	ldr	r2, [r7, #4]
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	781b      	ldrb	r3, [r3, #0]
 8008794:	009b      	lsls	r3, r3, #2
 8008796:	441a      	add	r2, r3
 8008798:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 800879c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	7b1b      	ldrb	r3, [r3, #12]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	f040 8178 	bne.w	8008aaa <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80087ba:	683b      	ldr	r3, [r7, #0]
 80087bc:	785b      	ldrb	r3, [r3, #1]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	f000 8084 	beq.w	80088cc <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	61bb      	str	r3, [r7, #24]
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	461a      	mov	r2, r3
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	4413      	add	r3, r2
 80087d6:	61bb      	str	r3, [r7, #24]
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	781b      	ldrb	r3, [r3, #0]
 80087dc:	00da      	lsls	r2, r3, #3
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	4413      	add	r3, r2
 80087e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80087e6:	617b      	str	r3, [r7, #20]
 80087e8:	683b      	ldr	r3, [r7, #0]
 80087ea:	88db      	ldrh	r3, [r3, #6]
 80087ec:	085b      	lsrs	r3, r3, #1
 80087ee:	b29b      	uxth	r3, r3
 80087f0:	005b      	lsls	r3, r3, #1
 80087f2:	b29a      	uxth	r2, r3
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	781b      	ldrb	r3, [r3, #0]
 80087fe:	009b      	lsls	r3, r3, #2
 8008800:	4413      	add	r3, r2
 8008802:	881b      	ldrh	r3, [r3, #0]
 8008804:	827b      	strh	r3, [r7, #18]
 8008806:	8a7b      	ldrh	r3, [r7, #18]
 8008808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800880c:	2b00      	cmp	r3, #0
 800880e:	d01b      	beq.n	8008848 <USB_ActivateEndpoint+0x180>
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	781b      	ldrb	r3, [r3, #0]
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4413      	add	r3, r2
 800881a:	881b      	ldrh	r3, [r3, #0]
 800881c:	b29b      	uxth	r3, r3
 800881e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008826:	823b      	strh	r3, [r7, #16]
 8008828:	687a      	ldr	r2, [r7, #4]
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	009b      	lsls	r3, r3, #2
 8008830:	441a      	add	r2, r3
 8008832:	8a3b      	ldrh	r3, [r7, #16]
 8008834:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008838:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800883c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008840:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008844:	b29b      	uxth	r3, r3
 8008846:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	78db      	ldrb	r3, [r3, #3]
 800884c:	2b01      	cmp	r3, #1
 800884e:	d020      	beq.n	8008892 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008850:	687a      	ldr	r2, [r7, #4]
 8008852:	683b      	ldr	r3, [r7, #0]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	881b      	ldrh	r3, [r3, #0]
 800885c:	b29b      	uxth	r3, r3
 800885e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008866:	81bb      	strh	r3, [r7, #12]
 8008868:	89bb      	ldrh	r3, [r7, #12]
 800886a:	f083 0320 	eor.w	r3, r3, #32
 800886e:	81bb      	strh	r3, [r7, #12]
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	781b      	ldrb	r3, [r3, #0]
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	441a      	add	r2, r3
 800887a:	89bb      	ldrh	r3, [r7, #12]
 800887c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008880:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008884:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800888c:	b29b      	uxth	r3, r3
 800888e:	8013      	strh	r3, [r2, #0]
 8008890:	e2d5      	b.n	8008e3e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	009b      	lsls	r3, r3, #2
 800889a:	4413      	add	r3, r2
 800889c:	881b      	ldrh	r3, [r3, #0]
 800889e:	b29b      	uxth	r3, r3
 80088a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80088a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088a8:	81fb      	strh	r3, [r7, #14]
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	441a      	add	r2, r3
 80088b4:	89fb      	ldrh	r3, [r7, #14]
 80088b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80088ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80088be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80088c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088c6:	b29b      	uxth	r3, r3
 80088c8:	8013      	strh	r3, [r2, #0]
 80088ca:	e2b8      	b.n	8008e3e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	633b      	str	r3, [r7, #48]	; 0x30
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	461a      	mov	r2, r3
 80088da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088dc:	4413      	add	r3, r2
 80088de:	633b      	str	r3, [r7, #48]	; 0x30
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	781b      	ldrb	r3, [r3, #0]
 80088e4:	00da      	lsls	r2, r3, #3
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	4413      	add	r3, r2
 80088ea:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80088ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	88db      	ldrh	r3, [r3, #6]
 80088f4:	085b      	lsrs	r3, r3, #1
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	005b      	lsls	r3, r3, #1
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088fe:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	62bb      	str	r3, [r7, #40]	; 0x28
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800890a:	b29b      	uxth	r3, r3
 800890c:	461a      	mov	r2, r3
 800890e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008910:	4413      	add	r3, r2
 8008912:	62bb      	str	r3, [r7, #40]	; 0x28
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	781b      	ldrb	r3, [r3, #0]
 8008918:	00da      	lsls	r2, r3, #3
 800891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891c:	4413      	add	r3, r2
 800891e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008922:	627b      	str	r3, [r7, #36]	; 0x24
 8008924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008926:	881b      	ldrh	r3, [r3, #0]
 8008928:	b29b      	uxth	r3, r3
 800892a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800892e:	b29a      	uxth	r2, r3
 8008930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008932:	801a      	strh	r2, [r3, #0]
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	2b3e      	cmp	r3, #62	; 0x3e
 800893a:	d91d      	bls.n	8008978 <USB_ActivateEndpoint+0x2b0>
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	095b      	lsrs	r3, r3, #5
 8008942:	66bb      	str	r3, [r7, #104]	; 0x68
 8008944:	683b      	ldr	r3, [r7, #0]
 8008946:	691b      	ldr	r3, [r3, #16]
 8008948:	f003 031f 	and.w	r3, r3, #31
 800894c:	2b00      	cmp	r3, #0
 800894e:	d102      	bne.n	8008956 <USB_ActivateEndpoint+0x28e>
 8008950:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008952:	3b01      	subs	r3, #1
 8008954:	66bb      	str	r3, [r7, #104]	; 0x68
 8008956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	b29a      	uxth	r2, r3
 800895c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800895e:	b29b      	uxth	r3, r3
 8008960:	029b      	lsls	r3, r3, #10
 8008962:	b29b      	uxth	r3, r3
 8008964:	4313      	orrs	r3, r2
 8008966:	b29b      	uxth	r3, r3
 8008968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800896c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008970:	b29a      	uxth	r2, r3
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	801a      	strh	r2, [r3, #0]
 8008976:	e026      	b.n	80089c6 <USB_ActivateEndpoint+0x2fe>
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	691b      	ldr	r3, [r3, #16]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10a      	bne.n	8008996 <USB_ActivateEndpoint+0x2ce>
 8008980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008982:	881b      	ldrh	r3, [r3, #0]
 8008984:	b29b      	uxth	r3, r3
 8008986:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800898a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800898e:	b29a      	uxth	r2, r3
 8008990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008992:	801a      	strh	r2, [r3, #0]
 8008994:	e017      	b.n	80089c6 <USB_ActivateEndpoint+0x2fe>
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	691b      	ldr	r3, [r3, #16]
 800899a:	085b      	lsrs	r3, r3, #1
 800899c:	66bb      	str	r3, [r7, #104]	; 0x68
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	691b      	ldr	r3, [r3, #16]
 80089a2:	f003 0301 	and.w	r3, r3, #1
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d002      	beq.n	80089b0 <USB_ActivateEndpoint+0x2e8>
 80089aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089ac:	3301      	adds	r3, #1
 80089ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80089b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089b2:	881b      	ldrh	r3, [r3, #0]
 80089b4:	b29a      	uxth	r2, r3
 80089b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	029b      	lsls	r3, r3, #10
 80089bc:	b29b      	uxth	r3, r3
 80089be:	4313      	orrs	r3, r2
 80089c0:	b29a      	uxth	r2, r3
 80089c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	009b      	lsls	r3, r3, #2
 80089ce:	4413      	add	r3, r2
 80089d0:	881b      	ldrh	r3, [r3, #0]
 80089d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80089d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80089d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d01b      	beq.n	8008a16 <USB_ActivateEndpoint+0x34e>
 80089de:	687a      	ldr	r2, [r7, #4]
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	781b      	ldrb	r3, [r3, #0]
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	4413      	add	r3, r2
 80089e8:	881b      	ldrh	r3, [r3, #0]
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089f4:	843b      	strh	r3, [r7, #32]
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	781b      	ldrb	r3, [r3, #0]
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	441a      	add	r2, r3
 8008a00:	8c3b      	ldrh	r3, [r7, #32]
 8008a02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d124      	bne.n	8008a68 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	781b      	ldrb	r3, [r3, #0]
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	881b      	ldrh	r3, [r3, #0]
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a34:	83bb      	strh	r3, [r7, #28]
 8008a36:	8bbb      	ldrh	r3, [r7, #28]
 8008a38:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008a3c:	83bb      	strh	r3, [r7, #28]
 8008a3e:	8bbb      	ldrh	r3, [r7, #28]
 8008a40:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008a44:	83bb      	strh	r3, [r7, #28]
 8008a46:	687a      	ldr	r2, [r7, #4]
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	441a      	add	r2, r3
 8008a50:	8bbb      	ldrh	r3, [r7, #28]
 8008a52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	8013      	strh	r3, [r2, #0]
 8008a66:	e1ea      	b.n	8008e3e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008a68:	687a      	ldr	r2, [r7, #4]
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	881b      	ldrh	r3, [r3, #0]
 8008a74:	b29b      	uxth	r3, r3
 8008a76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008a7e:	83fb      	strh	r3, [r7, #30]
 8008a80:	8bfb      	ldrh	r3, [r7, #30]
 8008a82:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008a86:	83fb      	strh	r3, [r7, #30]
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	781b      	ldrb	r3, [r3, #0]
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	441a      	add	r2, r3
 8008a92:	8bfb      	ldrh	r3, [r7, #30]
 8008a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	8013      	strh	r3, [r2, #0]
 8008aa8:	e1c9      	b.n	8008e3e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	78db      	ldrb	r3, [r3, #3]
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d11e      	bne.n	8008af0 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4413      	add	r3, r2
 8008abc:	881b      	ldrh	r3, [r3, #0]
 8008abe:	b29b      	uxth	r3, r3
 8008ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ac8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008acc:	687a      	ldr	r2, [r7, #4]
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	441a      	add	r2, r3
 8008ad6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ae2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8008ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008aea:	b29b      	uxth	r3, r3
 8008aec:	8013      	strh	r3, [r2, #0]
 8008aee:	e01d      	b.n	8008b2c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	881b      	ldrh	r3, [r3, #0]
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b06:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008b0a:	687a      	ldr	r2, [r7, #4]
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	781b      	ldrb	r3, [r3, #0]
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	441a      	add	r2, r3
 8008b14:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008b18:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008b1c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008b20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b36:	b29b      	uxth	r3, r3
 8008b38:	461a      	mov	r2, r3
 8008b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b3c:	4413      	add	r3, r2
 8008b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	781b      	ldrb	r3, [r3, #0]
 8008b44:	00da      	lsls	r2, r3, #3
 8008b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008b4e:	65bb      	str	r3, [r7, #88]	; 0x58
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	891b      	ldrh	r3, [r3, #8]
 8008b54:	085b      	lsrs	r3, r3, #1
 8008b56:	b29b      	uxth	r3, r3
 8008b58:	005b      	lsls	r3, r3, #1
 8008b5a:	b29a      	uxth	r2, r3
 8008b5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008b5e:	801a      	strh	r2, [r3, #0]
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	657b      	str	r3, [r7, #84]	; 0x54
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b70:	4413      	add	r3, r2
 8008b72:	657b      	str	r3, [r7, #84]	; 0x54
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	00da      	lsls	r2, r3, #3
 8008b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b7c:	4413      	add	r3, r2
 8008b7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8008b82:	653b      	str	r3, [r7, #80]	; 0x50
 8008b84:	683b      	ldr	r3, [r7, #0]
 8008b86:	895b      	ldrh	r3, [r3, #10]
 8008b88:	085b      	lsrs	r3, r3, #1
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	005b      	lsls	r3, r3, #1
 8008b8e:	b29a      	uxth	r2, r3
 8008b90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b92:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	785b      	ldrb	r3, [r3, #1]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	f040 8093 	bne.w	8008cc4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	009b      	lsls	r3, r3, #2
 8008ba6:	4413      	add	r3, r2
 8008ba8:	881b      	ldrh	r3, [r3, #0]
 8008baa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8008bae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008bb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d01b      	beq.n	8008bf2 <USB_ActivateEndpoint+0x52a>
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	4413      	add	r3, r2
 8008bc4:	881b      	ldrh	r3, [r3, #0]
 8008bc6:	b29b      	uxth	r3, r3
 8008bc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008bcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bd0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	683b      	ldr	r3, [r7, #0]
 8008bd6:	781b      	ldrb	r3, [r3, #0]
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	441a      	add	r2, r3
 8008bdc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008bde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008be2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008be6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bee:	b29b      	uxth	r3, r3
 8008bf0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	781b      	ldrb	r3, [r3, #0]
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	4413      	add	r3, r2
 8008bfc:	881b      	ldrh	r3, [r3, #0]
 8008bfe:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008c00:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d01b      	beq.n	8008c42 <USB_ActivateEndpoint+0x57a>
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	781b      	ldrb	r3, [r3, #0]
 8008c10:	009b      	lsls	r3, r3, #2
 8008c12:	4413      	add	r3, r2
 8008c14:	881b      	ldrh	r3, [r3, #0]
 8008c16:	b29b      	uxth	r3, r3
 8008c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c20:	877b      	strh	r3, [r7, #58]	; 0x3a
 8008c22:	687a      	ldr	r2, [r7, #4]
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	781b      	ldrb	r3, [r3, #0]
 8008c28:	009b      	lsls	r3, r3, #2
 8008c2a:	441a      	add	r2, r3
 8008c2c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008c2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008c3e:	b29b      	uxth	r3, r3
 8008c40:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008c42:	687a      	ldr	r2, [r7, #4]
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	781b      	ldrb	r3, [r3, #0]
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	4413      	add	r3, r2
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c58:	873b      	strh	r3, [r7, #56]	; 0x38
 8008c5a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008c5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008c60:	873b      	strh	r3, [r7, #56]	; 0x38
 8008c62:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008c64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008c68:	873b      	strh	r3, [r7, #56]	; 0x38
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	781b      	ldrb	r3, [r3, #0]
 8008c70:	009b      	lsls	r3, r3, #2
 8008c72:	441a      	add	r2, r3
 8008c74:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008c76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c86:	b29b      	uxth	r3, r3
 8008c88:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	009b      	lsls	r3, r3, #2
 8008c92:	4413      	add	r3, r2
 8008c94:	881b      	ldrh	r3, [r3, #0]
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ca0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	441a      	add	r2, r3
 8008cac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8008cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	8013      	strh	r3, [r2, #0]
 8008cc2:	e0bc      	b.n	8008e3e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	4413      	add	r3, r2
 8008cce:	881b      	ldrh	r3, [r3, #0]
 8008cd0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8008cd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8008cd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d01d      	beq.n	8008d1c <USB_ActivateEndpoint+0x654>
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	009b      	lsls	r3, r3, #2
 8008ce8:	4413      	add	r3, r2
 8008cea:	881b      	ldrh	r3, [r3, #0]
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cf6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	781b      	ldrb	r3, [r3, #0]
 8008d00:	009b      	lsls	r3, r3, #2
 8008d02:	441a      	add	r2, r3
 8008d04:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	009b      	lsls	r3, r3, #2
 8008d24:	4413      	add	r3, r2
 8008d26:	881b      	ldrh	r3, [r3, #0]
 8008d28:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008d2c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d01d      	beq.n	8008d74 <USB_ActivateEndpoint+0x6ac>
 8008d38:	687a      	ldr	r2, [r7, #4]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	781b      	ldrb	r3, [r3, #0]
 8008d3e:	009b      	lsls	r3, r3, #2
 8008d40:	4413      	add	r3, r2
 8008d42:	881b      	ldrh	r3, [r3, #0]
 8008d44:	b29b      	uxth	r3, r3
 8008d46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d4e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	441a      	add	r2, r3
 8008d5c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008d60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008d64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008d68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008d6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	78db      	ldrb	r3, [r3, #3]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d024      	beq.n	8008dc6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	781b      	ldrb	r3, [r3, #0]
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	4413      	add	r3, r2
 8008d86:	881b      	ldrh	r3, [r3, #0]
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008d8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008d96:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008d9a:	f083 0320 	eor.w	r3, r3, #32
 8008d9e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	009b      	lsls	r3, r3, #2
 8008daa:	441a      	add	r2, r3
 8008dac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8008db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008db4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dc0:	b29b      	uxth	r3, r3
 8008dc2:	8013      	strh	r3, [r2, #0]
 8008dc4:	e01d      	b.n	8008e02 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	683b      	ldr	r3, [r7, #0]
 8008dca:	781b      	ldrb	r3, [r3, #0]
 8008dcc:	009b      	lsls	r3, r3, #2
 8008dce:	4413      	add	r3, r2
 8008dd0:	881b      	ldrh	r3, [r3, #0]
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ddc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8008de0:	687a      	ldr	r2, [r7, #4]
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	441a      	add	r2, r3
 8008dea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8008dee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008df2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008df6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008dfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008dfe:	b29b      	uxth	r3, r3
 8008e00:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	781b      	ldrb	r3, [r3, #0]
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	4413      	add	r3, r2
 8008e0c:	881b      	ldrh	r3, [r3, #0]
 8008e0e:	b29b      	uxth	r3, r3
 8008e10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e18:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	781b      	ldrb	r3, [r3, #0]
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	441a      	add	r2, r3
 8008e26:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008e3a:	b29b      	uxth	r3, r3
 8008e3c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008e3e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	3774      	adds	r7, #116	; 0x74
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
 8008e4e:	bf00      	nop

08008e50 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b08d      	sub	sp, #52	; 0x34
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
 8008e58:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008e5a:	683b      	ldr	r3, [r7, #0]
 8008e5c:	7b1b      	ldrb	r3, [r3, #12]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	f040 808e 	bne.w	8008f80 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	785b      	ldrb	r3, [r3, #1]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d044      	beq.n	8008ef6 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008e6c:	687a      	ldr	r2, [r7, #4]
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	781b      	ldrb	r3, [r3, #0]
 8008e72:	009b      	lsls	r3, r3, #2
 8008e74:	4413      	add	r3, r2
 8008e76:	881b      	ldrh	r3, [r3, #0]
 8008e78:	81bb      	strh	r3, [r7, #12]
 8008e7a:	89bb      	ldrh	r3, [r7, #12]
 8008e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d01b      	beq.n	8008ebc <USB_DeactivateEndpoint+0x6c>
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	4413      	add	r3, r2
 8008e8e:	881b      	ldrh	r3, [r3, #0]
 8008e90:	b29b      	uxth	r3, r3
 8008e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e9a:	817b      	strh	r3, [r7, #10]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	441a      	add	r2, r3
 8008ea6:	897b      	ldrh	r3, [r7, #10]
 8008ea8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008eac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008eb0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eb4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	4413      	add	r3, r2
 8008ec6:	881b      	ldrh	r3, [r3, #0]
 8008ec8:	b29b      	uxth	r3, r3
 8008eca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ece:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ed2:	813b      	strh	r3, [r7, #8]
 8008ed4:	687a      	ldr	r2, [r7, #4]
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	781b      	ldrb	r3, [r3, #0]
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	441a      	add	r2, r3
 8008ede:	893b      	ldrh	r3, [r7, #8]
 8008ee0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008ee4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008ee8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008eec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ef0:	b29b      	uxth	r3, r3
 8008ef2:	8013      	strh	r3, [r2, #0]
 8008ef4:	e192      	b.n	800921c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	009b      	lsls	r3, r3, #2
 8008efe:	4413      	add	r3, r2
 8008f00:	881b      	ldrh	r3, [r3, #0]
 8008f02:	827b      	strh	r3, [r7, #18]
 8008f04:	8a7b      	ldrh	r3, [r7, #18]
 8008f06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d01b      	beq.n	8008f46 <USB_DeactivateEndpoint+0xf6>
 8008f0e:	687a      	ldr	r2, [r7, #4]
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	009b      	lsls	r3, r3, #2
 8008f16:	4413      	add	r3, r2
 8008f18:	881b      	ldrh	r3, [r3, #0]
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f24:	823b      	strh	r3, [r7, #16]
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	683b      	ldr	r3, [r7, #0]
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	009b      	lsls	r3, r3, #2
 8008f2e:	441a      	add	r2, r3
 8008f30:	8a3b      	ldrh	r3, [r7, #16]
 8008f32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008f3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f42:	b29b      	uxth	r3, r3
 8008f44:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	781b      	ldrb	r3, [r3, #0]
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	4413      	add	r3, r2
 8008f50:	881b      	ldrh	r3, [r3, #0]
 8008f52:	b29b      	uxth	r3, r3
 8008f54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008f58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f5c:	81fb      	strh	r3, [r7, #14]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	441a      	add	r2, r3
 8008f68:	89fb      	ldrh	r3, [r7, #14]
 8008f6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008f6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008f76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	8013      	strh	r3, [r2, #0]
 8008f7e:	e14d      	b.n	800921c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	785b      	ldrb	r3, [r3, #1]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f040 80a5 	bne.w	80090d4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008f8a:	687a      	ldr	r2, [r7, #4]
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	4413      	add	r3, r2
 8008f94:	881b      	ldrh	r3, [r3, #0]
 8008f96:	843b      	strh	r3, [r7, #32]
 8008f98:	8c3b      	ldrh	r3, [r7, #32]
 8008f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d01b      	beq.n	8008fda <USB_DeactivateEndpoint+0x18a>
 8008fa2:	687a      	ldr	r2, [r7, #4]
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	781b      	ldrb	r3, [r3, #0]
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	4413      	add	r3, r2
 8008fac:	881b      	ldrh	r3, [r3, #0]
 8008fae:	b29b      	uxth	r3, r3
 8008fb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008fb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008fb8:	83fb      	strh	r3, [r7, #30]
 8008fba:	687a      	ldr	r2, [r7, #4]
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	781b      	ldrb	r3, [r3, #0]
 8008fc0:	009b      	lsls	r3, r3, #2
 8008fc2:	441a      	add	r2, r3
 8008fc4:	8bfb      	ldrh	r3, [r7, #30]
 8008fc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008fca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008fce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fd6:	b29b      	uxth	r3, r3
 8008fd8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	4413      	add	r3, r2
 8008fe4:	881b      	ldrh	r3, [r3, #0]
 8008fe6:	83bb      	strh	r3, [r7, #28]
 8008fe8:	8bbb      	ldrh	r3, [r7, #28]
 8008fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d01b      	beq.n	800902a <USB_DeactivateEndpoint+0x1da>
 8008ff2:	687a      	ldr	r2, [r7, #4]
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	781b      	ldrb	r3, [r3, #0]
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	4413      	add	r3, r2
 8008ffc:	881b      	ldrh	r3, [r3, #0]
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009008:	837b      	strh	r3, [r7, #26]
 800900a:	687a      	ldr	r2, [r7, #4]
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	441a      	add	r2, r3
 8009014:	8b7b      	ldrh	r3, [r7, #26]
 8009016:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800901a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800901e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009022:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009026:	b29b      	uxth	r3, r3
 8009028:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	683b      	ldr	r3, [r7, #0]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	4413      	add	r3, r2
 8009034:	881b      	ldrh	r3, [r3, #0]
 8009036:	b29b      	uxth	r3, r3
 8009038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800903c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009040:	833b      	strh	r3, [r7, #24]
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	683b      	ldr	r3, [r7, #0]
 8009046:	781b      	ldrb	r3, [r3, #0]
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	441a      	add	r2, r3
 800904c:	8b3b      	ldrh	r3, [r7, #24]
 800904e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009052:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009056:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800905a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800905e:	b29b      	uxth	r3, r3
 8009060:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009062:	687a      	ldr	r2, [r7, #4]
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	009b      	lsls	r3, r3, #2
 800906a:	4413      	add	r3, r2
 800906c:	881b      	ldrh	r3, [r3, #0]
 800906e:	b29b      	uxth	r3, r3
 8009070:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009078:	82fb      	strh	r3, [r7, #22]
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	781b      	ldrb	r3, [r3, #0]
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	441a      	add	r2, r3
 8009084:	8afb      	ldrh	r3, [r7, #22]
 8009086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800908a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800908e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009096:	b29b      	uxth	r3, r3
 8009098:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800909a:	687a      	ldr	r2, [r7, #4]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	4413      	add	r3, r2
 80090a4:	881b      	ldrh	r3, [r3, #0]
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090b0:	82bb      	strh	r3, [r7, #20]
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	781b      	ldrb	r3, [r3, #0]
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	441a      	add	r2, r3
 80090bc:	8abb      	ldrh	r3, [r7, #20]
 80090be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090ce:	b29b      	uxth	r3, r3
 80090d0:	8013      	strh	r3, [r2, #0]
 80090d2:	e0a3      	b.n	800921c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	781b      	ldrb	r3, [r3, #0]
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	881b      	ldrh	r3, [r3, #0]
 80090e0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80090e2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80090e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d01b      	beq.n	8009124 <USB_DeactivateEndpoint+0x2d4>
 80090ec:	687a      	ldr	r2, [r7, #4]
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	4413      	add	r3, r2
 80090f6:	881b      	ldrh	r3, [r3, #0]
 80090f8:	b29b      	uxth	r3, r3
 80090fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009102:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009104:	687a      	ldr	r2, [r7, #4]
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	009b      	lsls	r3, r3, #2
 800910c:	441a      	add	r2, r3
 800910e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009114:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009118:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800911c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009120:	b29b      	uxth	r3, r3
 8009122:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	781b      	ldrb	r3, [r3, #0]
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	4413      	add	r3, r2
 800912e:	881b      	ldrh	r3, [r3, #0]
 8009130:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009132:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009138:	2b00      	cmp	r3, #0
 800913a:	d01b      	beq.n	8009174 <USB_DeactivateEndpoint+0x324>
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	683b      	ldr	r3, [r7, #0]
 8009140:	781b      	ldrb	r3, [r3, #0]
 8009142:	009b      	lsls	r3, r3, #2
 8009144:	4413      	add	r3, r2
 8009146:	881b      	ldrh	r3, [r3, #0]
 8009148:	b29b      	uxth	r3, r3
 800914a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800914e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009152:	853b      	strh	r3, [r7, #40]	; 0x28
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	683b      	ldr	r3, [r7, #0]
 8009158:	781b      	ldrb	r3, [r3, #0]
 800915a:	009b      	lsls	r3, r3, #2
 800915c:	441a      	add	r2, r3
 800915e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009160:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009164:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009168:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800916c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009170:	b29b      	uxth	r3, r3
 8009172:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009174:	687a      	ldr	r2, [r7, #4]
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	781b      	ldrb	r3, [r3, #0]
 800917a:	009b      	lsls	r3, r3, #2
 800917c:	4413      	add	r3, r2
 800917e:	881b      	ldrh	r3, [r3, #0]
 8009180:	b29b      	uxth	r3, r3
 8009182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800918a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	781b      	ldrb	r3, [r3, #0]
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	441a      	add	r2, r3
 8009196:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009198:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800919c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80091a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	881b      	ldrh	r3, [r3, #0]
 80091b8:	b29b      	uxth	r3, r3
 80091ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091c2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80091c4:	687a      	ldr	r2, [r7, #4]
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	441a      	add	r2, r3
 80091ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80091d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80091d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80091d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80091dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091e0:	b29b      	uxth	r3, r3
 80091e2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	683b      	ldr	r3, [r7, #0]
 80091e8:	781b      	ldrb	r3, [r3, #0]
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	4413      	add	r3, r2
 80091ee:	881b      	ldrh	r3, [r3, #0]
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80091f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091fa:	847b      	strh	r3, [r7, #34]	; 0x22
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	441a      	add	r2, r3
 8009206:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009208:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800920c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009210:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009218:	b29b      	uxth	r3, r3
 800921a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800921c:	2300      	movs	r3, #0
}
 800921e:	4618      	mov	r0, r3
 8009220:	3734      	adds	r7, #52	; 0x34
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b0c2      	sub	sp, #264	; 0x108
 800922e:	af00      	add	r7, sp, #0
 8009230:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009234:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009238:	6018      	str	r0, [r3, #0]
 800923a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800923e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009242:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009244:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	785b      	ldrb	r3, [r3, #1]
 8009250:	2b01      	cmp	r3, #1
 8009252:	f040 86b7 	bne.w	8009fc4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009256:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800925a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	699a      	ldr	r2, [r3, #24]
 8009262:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009266:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	429a      	cmp	r2, r3
 8009270:	d908      	bls.n	8009284 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009272:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009276:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	691b      	ldr	r3, [r3, #16]
 800927e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009282:	e007      	b.n	8009294 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009284:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009288:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	699b      	ldr	r3, [r3, #24]
 8009290:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009294:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009298:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	7b1b      	ldrb	r3, [r3, #12]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d13a      	bne.n	800931a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80092a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	6959      	ldr	r1, [r3, #20]
 80092b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	88da      	ldrh	r2, [r3, #6]
 80092bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092c0:	b29b      	uxth	r3, r3
 80092c2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80092c6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80092ca:	6800      	ldr	r0, [r0, #0]
 80092cc:	f001 fc98 	bl	800ac00 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80092d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	613b      	str	r3, [r7, #16]
 80092dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	461a      	mov	r2, r3
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	4413      	add	r3, r2
 80092f2:	613b      	str	r3, [r7, #16]
 80092f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	781b      	ldrb	r3, [r3, #0]
 8009300:	00da      	lsls	r2, r3, #3
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	4413      	add	r3, r2
 8009306:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800930a:	60fb      	str	r3, [r7, #12]
 800930c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009310:	b29a      	uxth	r2, r3
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	801a      	strh	r2, [r3, #0]
 8009316:	f000 be1f 	b.w	8009f58 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800931a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800931e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	78db      	ldrb	r3, [r3, #3]
 8009326:	2b02      	cmp	r3, #2
 8009328:	f040 8462 	bne.w	8009bf0 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800932c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009330:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	6a1a      	ldr	r2, [r3, #32]
 8009338:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800933c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	429a      	cmp	r2, r3
 8009346:	f240 83df 	bls.w	8009b08 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800934a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800934e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009352:	681a      	ldr	r2, [r3, #0]
 8009354:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009358:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	009b      	lsls	r3, r3, #2
 8009362:	4413      	add	r3, r2
 8009364:	881b      	ldrh	r3, [r3, #0]
 8009366:	b29b      	uxth	r3, r3
 8009368:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800936c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009370:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8009374:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009378:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	441a      	add	r2, r3
 800938e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009392:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009396:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800939a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800939e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80093a2:	b29b      	uxth	r3, r3
 80093a4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80093a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6a1a      	ldr	r2, [r3, #32]
 80093b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093b6:	1ad2      	subs	r2, r2, r3
 80093b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80093c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093c8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093cc:	681a      	ldr	r2, [r3, #0]
 80093ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4413      	add	r3, r2
 80093de:	881b      	ldrh	r3, [r3, #0]
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f000 81c7 	beq.w	800977a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80093ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	633b      	str	r3, [r7, #48]	; 0x30
 80093f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	785b      	ldrb	r3, [r3, #1]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d177      	bne.n	80094f8 <USB_EPStartXfer+0x2ce>
 8009408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800940c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	62bb      	str	r3, [r7, #40]	; 0x28
 8009414:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009418:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009422:	b29b      	uxth	r3, r3
 8009424:	461a      	mov	r2, r3
 8009426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009428:	4413      	add	r3, r2
 800942a:	62bb      	str	r3, [r7, #40]	; 0x28
 800942c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009430:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	00da      	lsls	r2, r3, #3
 800943a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800943c:	4413      	add	r3, r2
 800943e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009442:	627b      	str	r3, [r7, #36]	; 0x24
 8009444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009446:	881b      	ldrh	r3, [r3, #0]
 8009448:	b29b      	uxth	r3, r3
 800944a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800944e:	b29a      	uxth	r2, r3
 8009450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009452:	801a      	strh	r2, [r3, #0]
 8009454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009458:	2b3e      	cmp	r3, #62	; 0x3e
 800945a:	d921      	bls.n	80094a0 <USB_EPStartXfer+0x276>
 800945c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009460:	095b      	lsrs	r3, r3, #5
 8009462:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009466:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800946a:	f003 031f 	and.w	r3, r3, #31
 800946e:	2b00      	cmp	r3, #0
 8009470:	d104      	bne.n	800947c <USB_EPStartXfer+0x252>
 8009472:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009476:	3b01      	subs	r3, #1
 8009478:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800947c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947e:	881b      	ldrh	r3, [r3, #0]
 8009480:	b29a      	uxth	r2, r3
 8009482:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8009486:	b29b      	uxth	r3, r3
 8009488:	029b      	lsls	r3, r3, #10
 800948a:	b29b      	uxth	r3, r3
 800948c:	4313      	orrs	r3, r2
 800948e:	b29b      	uxth	r3, r3
 8009490:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009494:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009498:	b29a      	uxth	r2, r3
 800949a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800949c:	801a      	strh	r2, [r3, #0]
 800949e:	e050      	b.n	8009542 <USB_EPStartXfer+0x318>
 80094a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10a      	bne.n	80094be <USB_EPStartXfer+0x294>
 80094a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094aa:	881b      	ldrh	r3, [r3, #0]
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80094b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80094b6:	b29a      	uxth	r2, r3
 80094b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ba:	801a      	strh	r2, [r3, #0]
 80094bc:	e041      	b.n	8009542 <USB_EPStartXfer+0x318>
 80094be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094c2:	085b      	lsrs	r3, r3, #1
 80094c4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80094c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80094cc:	f003 0301 	and.w	r3, r3, #1
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d004      	beq.n	80094de <USB_EPStartXfer+0x2b4>
 80094d4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80094d8:	3301      	adds	r3, #1
 80094da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80094de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e0:	881b      	ldrh	r3, [r3, #0]
 80094e2:	b29a      	uxth	r2, r3
 80094e4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80094e8:	b29b      	uxth	r3, r3
 80094ea:	029b      	lsls	r3, r3, #10
 80094ec:	b29b      	uxth	r3, r3
 80094ee:	4313      	orrs	r3, r2
 80094f0:	b29a      	uxth	r2, r3
 80094f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f4:	801a      	strh	r2, [r3, #0]
 80094f6:	e024      	b.n	8009542 <USB_EPStartXfer+0x318>
 80094f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	785b      	ldrb	r3, [r3, #1]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d11c      	bne.n	8009542 <USB_EPStartXfer+0x318>
 8009508:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800950c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009516:	b29b      	uxth	r3, r3
 8009518:	461a      	mov	r2, r3
 800951a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800951c:	4413      	add	r3, r2
 800951e:	633b      	str	r3, [r7, #48]	; 0x30
 8009520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	00da      	lsls	r2, r3, #3
 800952e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009530:	4413      	add	r3, r2
 8009532:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009538:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800953c:	b29a      	uxth	r2, r3
 800953e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009540:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	895b      	ldrh	r3, [r3, #10]
 800954e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009556:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6959      	ldr	r1, [r3, #20]
 800955e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009562:	b29b      	uxth	r3, r3
 8009564:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009568:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800956c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009570:	6800      	ldr	r0, [r0, #0]
 8009572:	f001 fb45 	bl	800ac00 <USB_WritePMA>
            ep->xfer_buff += len;
 8009576:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800957a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	695a      	ldr	r2, [r3, #20]
 8009582:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009586:	441a      	add	r2, r3
 8009588:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800958c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009598:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6a1a      	ldr	r2, [r3, #32]
 80095a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d90f      	bls.n	80095d0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80095b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	6a1a      	ldr	r2, [r3, #32]
 80095bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80095c0:	1ad2      	subs	r2, r2, r3
 80095c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	621a      	str	r2, [r3, #32]
 80095ce:	e00e      	b.n	80095ee <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80095d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	6a1b      	ldr	r3, [r3, #32]
 80095dc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 80095e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	2200      	movs	r2, #0
 80095ec:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80095ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	785b      	ldrb	r3, [r3, #1]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	d177      	bne.n	80096ee <USB_EPStartXfer+0x4c4>
 80095fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009602:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	61bb      	str	r3, [r7, #24]
 800960a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800960e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009618:	b29b      	uxth	r3, r3
 800961a:	461a      	mov	r2, r3
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	4413      	add	r3, r2
 8009620:	61bb      	str	r3, [r7, #24]
 8009622:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009626:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	00da      	lsls	r2, r3, #3
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	4413      	add	r3, r2
 8009634:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009638:	617b      	str	r3, [r7, #20]
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	881b      	ldrh	r3, [r3, #0]
 800963e:	b29b      	uxth	r3, r3
 8009640:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009644:	b29a      	uxth	r2, r3
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	801a      	strh	r2, [r3, #0]
 800964a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800964e:	2b3e      	cmp	r3, #62	; 0x3e
 8009650:	d921      	bls.n	8009696 <USB_EPStartXfer+0x46c>
 8009652:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009656:	095b      	lsrs	r3, r3, #5
 8009658:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800965c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009660:	f003 031f 	and.w	r3, r3, #31
 8009664:	2b00      	cmp	r3, #0
 8009666:	d104      	bne.n	8009672 <USB_EPStartXfer+0x448>
 8009668:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800966c:	3b01      	subs	r3, #1
 800966e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	881b      	ldrh	r3, [r3, #0]
 8009676:	b29a      	uxth	r2, r3
 8009678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800967c:	b29b      	uxth	r3, r3
 800967e:	029b      	lsls	r3, r3, #10
 8009680:	b29b      	uxth	r3, r3
 8009682:	4313      	orrs	r3, r2
 8009684:	b29b      	uxth	r3, r3
 8009686:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800968a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800968e:	b29a      	uxth	r2, r3
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	801a      	strh	r2, [r3, #0]
 8009694:	e056      	b.n	8009744 <USB_EPStartXfer+0x51a>
 8009696:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10a      	bne.n	80096b4 <USB_EPStartXfer+0x48a>
 800969e:	697b      	ldr	r3, [r7, #20]
 80096a0:	881b      	ldrh	r3, [r3, #0]
 80096a2:	b29b      	uxth	r3, r3
 80096a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096ac:	b29a      	uxth	r2, r3
 80096ae:	697b      	ldr	r3, [r7, #20]
 80096b0:	801a      	strh	r2, [r3, #0]
 80096b2:	e047      	b.n	8009744 <USB_EPStartXfer+0x51a>
 80096b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096b8:	085b      	lsrs	r3, r3, #1
 80096ba:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80096be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096c2:	f003 0301 	and.w	r3, r3, #1
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d004      	beq.n	80096d4 <USB_EPStartXfer+0x4aa>
 80096ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096ce:	3301      	adds	r3, #1
 80096d0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	881b      	ldrh	r3, [r3, #0]
 80096d8:	b29a      	uxth	r2, r3
 80096da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096de:	b29b      	uxth	r3, r3
 80096e0:	029b      	lsls	r3, r3, #10
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	4313      	orrs	r3, r2
 80096e6:	b29a      	uxth	r2, r3
 80096e8:	697b      	ldr	r3, [r7, #20]
 80096ea:	801a      	strh	r2, [r3, #0]
 80096ec:	e02a      	b.n	8009744 <USB_EPStartXfer+0x51a>
 80096ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	785b      	ldrb	r3, [r3, #1]
 80096fa:	2b01      	cmp	r3, #1
 80096fc:	d122      	bne.n	8009744 <USB_EPStartXfer+0x51a>
 80096fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009702:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	623b      	str	r3, [r7, #32]
 800970a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800970e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009718:	b29b      	uxth	r3, r3
 800971a:	461a      	mov	r2, r3
 800971c:	6a3b      	ldr	r3, [r7, #32]
 800971e:	4413      	add	r3, r2
 8009720:	623b      	str	r3, [r7, #32]
 8009722:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009726:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	00da      	lsls	r2, r3, #3
 8009730:	6a3b      	ldr	r3, [r7, #32]
 8009732:	4413      	add	r3, r2
 8009734:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009738:	61fb      	str	r3, [r7, #28]
 800973a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800973e:	b29a      	uxth	r2, r3
 8009740:	69fb      	ldr	r3, [r7, #28]
 8009742:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8009744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009748:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	891b      	ldrh	r3, [r3, #8]
 8009750:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	6959      	ldr	r1, [r3, #20]
 8009760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009764:	b29b      	uxth	r3, r3
 8009766:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800976a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800976e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009772:	6800      	ldr	r0, [r0, #0]
 8009774:	f001 fa44 	bl	800ac00 <USB_WritePMA>
 8009778:	e3ee      	b.n	8009f58 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800977a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800977e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	785b      	ldrb	r3, [r3, #1]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d177      	bne.n	800987a <USB_EPStartXfer+0x650>
 800978a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800978e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	64bb      	str	r3, [r7, #72]	; 0x48
 8009796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800979a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	461a      	mov	r2, r3
 80097a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097aa:	4413      	add	r3, r2
 80097ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80097ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	781b      	ldrb	r3, [r3, #0]
 80097ba:	00da      	lsls	r2, r3, #3
 80097bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80097be:	4413      	add	r3, r2
 80097c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80097c4:	647b      	str	r3, [r7, #68]	; 0x44
 80097c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097c8:	881b      	ldrh	r3, [r3, #0]
 80097ca:	b29b      	uxth	r3, r3
 80097cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80097d4:	801a      	strh	r2, [r3, #0]
 80097d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097da:	2b3e      	cmp	r3, #62	; 0x3e
 80097dc:	d921      	bls.n	8009822 <USB_EPStartXfer+0x5f8>
 80097de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097e2:	095b      	lsrs	r3, r3, #5
 80097e4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80097e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097ec:	f003 031f 	and.w	r3, r3, #31
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d104      	bne.n	80097fe <USB_EPStartXfer+0x5d4>
 80097f4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80097f8:	3b01      	subs	r3, #1
 80097fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80097fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009800:	881b      	ldrh	r3, [r3, #0]
 8009802:	b29a      	uxth	r2, r3
 8009804:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009808:	b29b      	uxth	r3, r3
 800980a:	029b      	lsls	r3, r3, #10
 800980c:	b29b      	uxth	r3, r3
 800980e:	4313      	orrs	r3, r2
 8009810:	b29b      	uxth	r3, r3
 8009812:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009816:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800981a:	b29a      	uxth	r2, r3
 800981c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800981e:	801a      	strh	r2, [r3, #0]
 8009820:	e056      	b.n	80098d0 <USB_EPStartXfer+0x6a6>
 8009822:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009826:	2b00      	cmp	r3, #0
 8009828:	d10a      	bne.n	8009840 <USB_EPStartXfer+0x616>
 800982a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800982c:	881b      	ldrh	r3, [r3, #0]
 800982e:	b29b      	uxth	r3, r3
 8009830:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009834:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009838:	b29a      	uxth	r2, r3
 800983a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800983c:	801a      	strh	r2, [r3, #0]
 800983e:	e047      	b.n	80098d0 <USB_EPStartXfer+0x6a6>
 8009840:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009844:	085b      	lsrs	r3, r3, #1
 8009846:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800984a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800984e:	f003 0301 	and.w	r3, r3, #1
 8009852:	2b00      	cmp	r3, #0
 8009854:	d004      	beq.n	8009860 <USB_EPStartXfer+0x636>
 8009856:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800985a:	3301      	adds	r3, #1
 800985c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009862:	881b      	ldrh	r3, [r3, #0]
 8009864:	b29a      	uxth	r2, r3
 8009866:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800986a:	b29b      	uxth	r3, r3
 800986c:	029b      	lsls	r3, r3, #10
 800986e:	b29b      	uxth	r3, r3
 8009870:	4313      	orrs	r3, r2
 8009872:	b29a      	uxth	r2, r3
 8009874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009876:	801a      	strh	r2, [r3, #0]
 8009878:	e02a      	b.n	80098d0 <USB_EPStartXfer+0x6a6>
 800987a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800987e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	785b      	ldrb	r3, [r3, #1]
 8009886:	2b01      	cmp	r3, #1
 8009888:	d122      	bne.n	80098d0 <USB_EPStartXfer+0x6a6>
 800988a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800988e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	653b      	str	r3, [r7, #80]	; 0x50
 8009896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800989a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	461a      	mov	r2, r3
 80098a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098aa:	4413      	add	r3, r2
 80098ac:	653b      	str	r3, [r7, #80]	; 0x50
 80098ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	00da      	lsls	r2, r3, #3
 80098bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098be:	4413      	add	r3, r2
 80098c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80098c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80098c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098ca:	b29a      	uxth	r2, r3
 80098cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098ce:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80098d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	891b      	ldrh	r3, [r3, #8]
 80098dc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80098e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	6959      	ldr	r1, [r3, #20]
 80098ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098f0:	b29b      	uxth	r3, r3
 80098f2:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80098f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80098fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80098fe:	6800      	ldr	r0, [r0, #0]
 8009900:	f001 f97e 	bl	800ac00 <USB_WritePMA>
            ep->xfer_buff += len;
 8009904:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009908:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	695a      	ldr	r2, [r3, #20]
 8009910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009914:	441a      	add	r2, r3
 8009916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800991a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8009922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	6a1a      	ldr	r2, [r3, #32]
 800992e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	691b      	ldr	r3, [r3, #16]
 800993a:	429a      	cmp	r2, r3
 800993c:	d90f      	bls.n	800995e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800993e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	6a1a      	ldr	r2, [r3, #32]
 800994a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800994e:	1ad2      	subs	r2, r2, r3
 8009950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	621a      	str	r2, [r3, #32]
 800995c:	e00e      	b.n	800997c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800995e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	6a1b      	ldr	r3, [r3, #32]
 800996a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800996e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	2200      	movs	r2, #0
 800997a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800997c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009980:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	643b      	str	r3, [r7, #64]	; 0x40
 8009988:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800998c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	785b      	ldrb	r3, [r3, #1]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d177      	bne.n	8009a88 <USB_EPStartXfer+0x85e>
 8009998:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800999c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80099a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099a8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	461a      	mov	r2, r3
 80099b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099b8:	4413      	add	r3, r2
 80099ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80099bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	781b      	ldrb	r3, [r3, #0]
 80099c8:	00da      	lsls	r2, r3, #3
 80099ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099cc:	4413      	add	r3, r2
 80099ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80099d2:	637b      	str	r3, [r7, #52]	; 0x34
 80099d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099d6:	881b      	ldrh	r3, [r3, #0]
 80099d8:	b29b      	uxth	r3, r3
 80099da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80099de:	b29a      	uxth	r2, r3
 80099e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099e2:	801a      	strh	r2, [r3, #0]
 80099e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099e8:	2b3e      	cmp	r3, #62	; 0x3e
 80099ea:	d921      	bls.n	8009a30 <USB_EPStartXfer+0x806>
 80099ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099f0:	095b      	lsrs	r3, r3, #5
 80099f2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80099f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099fa:	f003 031f 	and.w	r3, r3, #31
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d104      	bne.n	8009a0c <USB_EPStartXfer+0x7e2>
 8009a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a06:	3b01      	subs	r3, #1
 8009a08:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a0e:	881b      	ldrh	r3, [r3, #0]
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	029b      	lsls	r3, r3, #10
 8009a1a:	b29b      	uxth	r3, r3
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	b29b      	uxth	r3, r3
 8009a20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a28:	b29a      	uxth	r2, r3
 8009a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a2c:	801a      	strh	r2, [r3, #0]
 8009a2e:	e050      	b.n	8009ad2 <USB_EPStartXfer+0x8a8>
 8009a30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d10a      	bne.n	8009a4e <USB_EPStartXfer+0x824>
 8009a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a3a:	881b      	ldrh	r3, [r3, #0]
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a42:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a46:	b29a      	uxth	r2, r3
 8009a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a4a:	801a      	strh	r2, [r3, #0]
 8009a4c:	e041      	b.n	8009ad2 <USB_EPStartXfer+0x8a8>
 8009a4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a52:	085b      	lsrs	r3, r3, #1
 8009a54:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a5c:	f003 0301 	and.w	r3, r3, #1
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d004      	beq.n	8009a6e <USB_EPStartXfer+0x844>
 8009a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a68:	3301      	adds	r3, #1
 8009a6a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a70:	881b      	ldrh	r3, [r3, #0]
 8009a72:	b29a      	uxth	r2, r3
 8009a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	029b      	lsls	r3, r3, #10
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	b29a      	uxth	r2, r3
 8009a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a84:	801a      	strh	r2, [r3, #0]
 8009a86:	e024      	b.n	8009ad2 <USB_EPStartXfer+0x8a8>
 8009a88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	785b      	ldrb	r3, [r3, #1]
 8009a94:	2b01      	cmp	r3, #1
 8009a96:	d11c      	bne.n	8009ad2 <USB_EPStartXfer+0x8a8>
 8009a98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a9c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009aa6:	b29b      	uxth	r3, r3
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aac:	4413      	add	r3, r2
 8009aae:	643b      	str	r3, [r7, #64]	; 0x40
 8009ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	781b      	ldrb	r3, [r3, #0]
 8009abc:	00da      	lsls	r2, r3, #3
 8009abe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ac0:	4413      	add	r3, r2
 8009ac2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ad0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8009ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	895b      	ldrh	r3, [r3, #10]
 8009ade:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009ae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ae6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	6959      	ldr	r1, [r3, #20]
 8009aee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009af8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009afc:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009b00:	6800      	ldr	r0, [r0, #0]
 8009b02:	f001 f87d 	bl	800ac00 <USB_WritePMA>
 8009b06:	e227      	b.n	8009f58 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009b08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6a1b      	ldr	r3, [r3, #32]
 8009b14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009b18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	4413      	add	r3, r2
 8009b32:	881b      	ldrh	r3, [r3, #0]
 8009b34:	b29b      	uxth	r3, r3
 8009b36:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b3e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b46:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b4a:	681a      	ldr	r2, [r3, #0]
 8009b4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	009b      	lsls	r3, r3, #2
 8009b5a:	441a      	add	r2, r3
 8009b5c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009b60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b70:	b29b      	uxth	r3, r3
 8009b72:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009b74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b84:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	461a      	mov	r2, r3
 8009b92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009b94:	4413      	add	r3, r2
 8009b96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009b98:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b9c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	781b      	ldrb	r3, [r3, #0]
 8009ba4:	00da      	lsls	r2, r3, #3
 8009ba6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009ba8:	4413      	add	r3, r2
 8009baa:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009bae:	65bb      	str	r3, [r7, #88]	; 0x58
 8009bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bb4:	b29a      	uxth	r2, r3
 8009bb6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009bb8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	891b      	ldrh	r3, [r3, #8]
 8009bc6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	6959      	ldr	r1, [r3, #20]
 8009bd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009be0:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009be4:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009be8:	6800      	ldr	r0, [r0, #0]
 8009bea:	f001 f809 	bl	800ac00 <USB_WritePMA>
 8009bee:	e1b3      	b.n	8009f58 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8009bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	6a1a      	ldr	r2, [r3, #32]
 8009bfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c00:	1ad2      	subs	r2, r2, r3
 8009c02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009c0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c12:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	4413      	add	r3, r2
 8009c28:	881b      	ldrh	r3, [r3, #0]
 8009c2a:	b29b      	uxth	r3, r3
 8009c2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f000 80c6 	beq.w	8009dc2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8009c36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	673b      	str	r3, [r7, #112]	; 0x70
 8009c42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	785b      	ldrb	r3, [r3, #1]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d177      	bne.n	8009d42 <USB_EPStartXfer+0xb18>
 8009c52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	461a      	mov	r2, r3
 8009c70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c72:	4413      	add	r3, r2
 8009c74:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	00da      	lsls	r2, r3, #3
 8009c84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c86:	4413      	add	r3, r2
 8009c88:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009c8c:	667b      	str	r3, [r7, #100]	; 0x64
 8009c8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c90:	881b      	ldrh	r3, [r3, #0]
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c98:	b29a      	uxth	r2, r3
 8009c9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c9c:	801a      	strh	r2, [r3, #0]
 8009c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009ca2:	2b3e      	cmp	r3, #62	; 0x3e
 8009ca4:	d921      	bls.n	8009cea <USB_EPStartXfer+0xac0>
 8009ca6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009caa:	095b      	lsrs	r3, r3, #5
 8009cac:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cb4:	f003 031f 	and.w	r3, r3, #31
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d104      	bne.n	8009cc6 <USB_EPStartXfer+0xa9c>
 8009cbc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009cc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cc8:	881b      	ldrh	r3, [r3, #0]
 8009cca:	b29a      	uxth	r2, r3
 8009ccc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009cd0:	b29b      	uxth	r3, r3
 8009cd2:	029b      	lsls	r3, r3, #10
 8009cd4:	b29b      	uxth	r3, r3
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	b29b      	uxth	r3, r3
 8009cda:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cde:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ce6:	801a      	strh	r2, [r3, #0]
 8009ce8:	e050      	b.n	8009d8c <USB_EPStartXfer+0xb62>
 8009cea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d10a      	bne.n	8009d08 <USB_EPStartXfer+0xade>
 8009cf2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cf4:	881b      	ldrh	r3, [r3, #0]
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009d00:	b29a      	uxth	r2, r3
 8009d02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d04:	801a      	strh	r2, [r3, #0]
 8009d06:	e041      	b.n	8009d8c <USB_EPStartXfer+0xb62>
 8009d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d0c:	085b      	lsrs	r3, r3, #1
 8009d0e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009d12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d16:	f003 0301 	and.w	r3, r3, #1
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d004      	beq.n	8009d28 <USB_EPStartXfer+0xafe>
 8009d1e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009d22:	3301      	adds	r3, #1
 8009d24:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009d28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d2a:	881b      	ldrh	r3, [r3, #0]
 8009d2c:	b29a      	uxth	r2, r3
 8009d2e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	029b      	lsls	r3, r3, #10
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	4313      	orrs	r3, r2
 8009d3a:	b29a      	uxth	r2, r3
 8009d3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d3e:	801a      	strh	r2, [r3, #0]
 8009d40:	e024      	b.n	8009d8c <USB_EPStartXfer+0xb62>
 8009d42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	785b      	ldrb	r3, [r3, #1]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d11c      	bne.n	8009d8c <USB_EPStartXfer+0xb62>
 8009d52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d56:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	461a      	mov	r2, r3
 8009d64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d66:	4413      	add	r3, r2
 8009d68:	673b      	str	r3, [r7, #112]	; 0x70
 8009d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	781b      	ldrb	r3, [r3, #0]
 8009d76:	00da      	lsls	r2, r3, #3
 8009d78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009d7a:	4413      	add	r3, r2
 8009d7c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009d80:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d86:	b29a      	uxth	r2, r3
 8009d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d8a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009d8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d90:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	895b      	ldrh	r3, [r3, #10]
 8009d98:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009da0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	6959      	ldr	r1, [r3, #20]
 8009da8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009db2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009db6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009dba:	6800      	ldr	r0, [r0, #0]
 8009dbc:	f000 ff20 	bl	800ac00 <USB_WritePMA>
 8009dc0:	e0ca      	b.n	8009f58 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8009dc2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dc6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	785b      	ldrb	r3, [r3, #1]
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d177      	bne.n	8009ec2 <USB_EPStartXfer+0xc98>
 8009dd2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dd6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009dde:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009de2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dec:	b29b      	uxth	r3, r3
 8009dee:	461a      	mov	r2, r3
 8009df0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009df2:	4413      	add	r3, r2
 8009df4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009df6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	00da      	lsls	r2, r3, #3
 8009e04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009e06:	4413      	add	r3, r2
 8009e08:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009e0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009e0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e18:	b29a      	uxth	r2, r3
 8009e1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e1c:	801a      	strh	r2, [r3, #0]
 8009e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e22:	2b3e      	cmp	r3, #62	; 0x3e
 8009e24:	d921      	bls.n	8009e6a <USB_EPStartXfer+0xc40>
 8009e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e2a:	095b      	lsrs	r3, r3, #5
 8009e2c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e34:	f003 031f 	and.w	r3, r3, #31
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d104      	bne.n	8009e46 <USB_EPStartXfer+0xc1c>
 8009e3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009e40:	3b01      	subs	r3, #1
 8009e42:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009e46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	b29a      	uxth	r2, r3
 8009e4c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	029b      	lsls	r3, r3, #10
 8009e54:	b29b      	uxth	r3, r3
 8009e56:	4313      	orrs	r3, r2
 8009e58:	b29b      	uxth	r3, r3
 8009e5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e66:	801a      	strh	r2, [r3, #0]
 8009e68:	e05c      	b.n	8009f24 <USB_EPStartXfer+0xcfa>
 8009e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d10a      	bne.n	8009e88 <USB_EPStartXfer+0xc5e>
 8009e72:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e74:	881b      	ldrh	r3, [r3, #0]
 8009e76:	b29b      	uxth	r3, r3
 8009e78:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e7c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e80:	b29a      	uxth	r2, r3
 8009e82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009e84:	801a      	strh	r2, [r3, #0]
 8009e86:	e04d      	b.n	8009f24 <USB_EPStartXfer+0xcfa>
 8009e88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e8c:	085b      	lsrs	r3, r3, #1
 8009e8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e96:	f003 0301 	and.w	r3, r3, #1
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d004      	beq.n	8009ea8 <USB_EPStartXfer+0xc7e>
 8009e9e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009ea2:	3301      	adds	r3, #1
 8009ea4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009ea8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009eaa:	881b      	ldrh	r3, [r3, #0]
 8009eac:	b29a      	uxth	r2, r3
 8009eae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009eb2:	b29b      	uxth	r3, r3
 8009eb4:	029b      	lsls	r3, r3, #10
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	b29a      	uxth	r2, r3
 8009ebc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ebe:	801a      	strh	r2, [r3, #0]
 8009ec0:	e030      	b.n	8009f24 <USB_EPStartXfer+0xcfa>
 8009ec2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ec6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	785b      	ldrb	r3, [r3, #1]
 8009ece:	2b01      	cmp	r3, #1
 8009ed0:	d128      	bne.n	8009f24 <USB_EPStartXfer+0xcfa>
 8009ed2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ed6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009ee0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ee4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009eee:	b29b      	uxth	r3, r3
 8009ef0:	461a      	mov	r2, r3
 8009ef2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009ef6:	4413      	add	r3, r2
 8009ef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	00da      	lsls	r2, r3, #3
 8009f0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f0e:	4413      	add	r3, r2
 8009f10:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009f14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f1c:	b29a      	uxth	r2, r3
 8009f1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009f22:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8009f24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	891b      	ldrh	r3, [r3, #8]
 8009f30:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8009f34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	6959      	ldr	r1, [r3, #20]
 8009f40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f44:	b29b      	uxth	r3, r3
 8009f46:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009f4a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009f4e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009f52:	6800      	ldr	r0, [r0, #0]
 8009f54:	f000 fe54 	bl	800ac00 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4413      	add	r3, r2
 8009f72:	881b      	ldrh	r3, [r3, #0]
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f7e:	817b      	strh	r3, [r7, #10]
 8009f80:	897b      	ldrh	r3, [r7, #10]
 8009f82:	f083 0310 	eor.w	r3, r3, #16
 8009f86:	817b      	strh	r3, [r7, #10]
 8009f88:	897b      	ldrh	r3, [r7, #10]
 8009f8a:	f083 0320 	eor.w	r3, r3, #32
 8009f8e:	817b      	strh	r3, [r7, #10]
 8009f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	441a      	add	r2, r3
 8009faa:	897b      	ldrh	r3, [r7, #10]
 8009fac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fbc:	b29b      	uxth	r3, r3
 8009fbe:	8013      	strh	r3, [r2, #0]
 8009fc0:	f000 bcde 	b.w	800a980 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8009fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	7b1b      	ldrb	r3, [r3, #12]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f040 80bb 	bne.w	800a14c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8009fd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	699a      	ldr	r2, [r3, #24]
 8009fe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009fe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	691b      	ldr	r3, [r3, #16]
 8009fee:	429a      	cmp	r2, r3
 8009ff0:	d917      	bls.n	800a022 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 8009ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ff6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800a002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	699a      	ldr	r2, [r3, #24]
 800a00e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a012:	1ad2      	subs	r2, r2, r3
 800a014:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a018:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	619a      	str	r2, [r3, #24]
 800a020:	e00e      	b.n	800a040 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800a022:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a026:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	699b      	ldr	r3, [r3, #24]
 800a02e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800a032:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a036:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2200      	movs	r2, #0
 800a03e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800a040:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a044:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a04e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a052:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	461a      	mov	r2, r3
 800a060:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a064:	4413      	add	r3, r2
 800a066:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a06a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a06e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	00da      	lsls	r2, r3, #3
 800a078:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a07c:	4413      	add	r3, r2
 800a07e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a082:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a086:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a08a:	881b      	ldrh	r3, [r3, #0]
 800a08c:	b29b      	uxth	r3, r3
 800a08e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a092:	b29a      	uxth	r2, r3
 800a094:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a098:	801a      	strh	r2, [r3, #0]
 800a09a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a09e:	2b3e      	cmp	r3, #62	; 0x3e
 800a0a0:	d924      	bls.n	800a0ec <USB_EPStartXfer+0xec2>
 800a0a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0a6:	095b      	lsrs	r3, r3, #5
 800a0a8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a0ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0b0:	f003 031f 	and.w	r3, r3, #31
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d104      	bne.n	800a0c2 <USB_EPStartXfer+0xe98>
 800a0b8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a0bc:	3b01      	subs	r3, #1
 800a0be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a0c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0c6:	881b      	ldrh	r3, [r3, #0]
 800a0c8:	b29a      	uxth	r2, r3
 800a0ca:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a0ce:	b29b      	uxth	r3, r3
 800a0d0:	029b      	lsls	r3, r3, #10
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	b29b      	uxth	r3, r3
 800a0d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a0dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a0e0:	b29a      	uxth	r2, r3
 800a0e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0e6:	801a      	strh	r2, [r3, #0]
 800a0e8:	f000 bc10 	b.w	800a90c <USB_EPStartXfer+0x16e2>
 800a0ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d10c      	bne.n	800a10e <USB_EPStartXfer+0xee4>
 800a0f4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0f8:	881b      	ldrh	r3, [r3, #0]
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a100:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a104:	b29a      	uxth	r2, r3
 800a106:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a10a:	801a      	strh	r2, [r3, #0]
 800a10c:	e3fe      	b.n	800a90c <USB_EPStartXfer+0x16e2>
 800a10e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a112:	085b      	lsrs	r3, r3, #1
 800a114:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a118:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a11c:	f003 0301 	and.w	r3, r3, #1
 800a120:	2b00      	cmp	r3, #0
 800a122:	d004      	beq.n	800a12e <USB_EPStartXfer+0xf04>
 800a124:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a128:	3301      	adds	r3, #1
 800a12a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a12e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a132:	881b      	ldrh	r3, [r3, #0]
 800a134:	b29a      	uxth	r2, r3
 800a136:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	029b      	lsls	r3, r3, #10
 800a13e:	b29b      	uxth	r3, r3
 800a140:	4313      	orrs	r3, r2
 800a142:	b29a      	uxth	r2, r3
 800a144:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a148:	801a      	strh	r2, [r3, #0]
 800a14a:	e3df      	b.n	800a90c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800a14c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a150:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	78db      	ldrb	r3, [r3, #3]
 800a158:	2b02      	cmp	r3, #2
 800a15a:	f040 8218 	bne.w	800a58e <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800a15e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a162:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	785b      	ldrb	r3, [r3, #1]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	f040 809d 	bne.w	800a2aa <USB_EPStartXfer+0x1080>
 800a170:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a174:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a17e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a182:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a18c:	b29b      	uxth	r3, r3
 800a18e:	461a      	mov	r2, r3
 800a190:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a194:	4413      	add	r3, r2
 800a196:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a19a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a19e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	781b      	ldrb	r3, [r3, #0]
 800a1a6:	00da      	lsls	r2, r3, #3
 800a1a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a1ac:	4413      	add	r3, r2
 800a1ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a1b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a1b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a1ba:	881b      	ldrh	r3, [r3, #0]
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a1c2:	b29a      	uxth	r2, r3
 800a1c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a1c8:	801a      	strh	r2, [r3, #0]
 800a1ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	691b      	ldr	r3, [r3, #16]
 800a1d6:	2b3e      	cmp	r3, #62	; 0x3e
 800a1d8:	d92b      	bls.n	800a232 <USB_EPStartXfer+0x1008>
 800a1da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	691b      	ldr	r3, [r3, #16]
 800a1e6:	095b      	lsrs	r3, r3, #5
 800a1e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a1ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a1f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	f003 031f 	and.w	r3, r3, #31
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d104      	bne.n	800a20a <USB_EPStartXfer+0xfe0>
 800a200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a204:	3b01      	subs	r3, #1
 800a206:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a20a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a20e:	881b      	ldrh	r3, [r3, #0]
 800a210:	b29a      	uxth	r2, r3
 800a212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a216:	b29b      	uxth	r3, r3
 800a218:	029b      	lsls	r3, r3, #10
 800a21a:	b29b      	uxth	r3, r3
 800a21c:	4313      	orrs	r3, r2
 800a21e:	b29b      	uxth	r3, r3
 800a220:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a224:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a228:	b29a      	uxth	r2, r3
 800a22a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a22e:	801a      	strh	r2, [r3, #0]
 800a230:	e070      	b.n	800a314 <USB_EPStartXfer+0x10ea>
 800a232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	691b      	ldr	r3, [r3, #16]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d10c      	bne.n	800a25c <USB_EPStartXfer+0x1032>
 800a242:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a246:	881b      	ldrh	r3, [r3, #0]
 800a248:	b29b      	uxth	r3, r3
 800a24a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a24e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a252:	b29a      	uxth	r2, r3
 800a254:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a258:	801a      	strh	r2, [r3, #0]
 800a25a:	e05b      	b.n	800a314 <USB_EPStartXfer+0x10ea>
 800a25c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	691b      	ldr	r3, [r3, #16]
 800a268:	085b      	lsrs	r3, r3, #1
 800a26a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a26e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	691b      	ldr	r3, [r3, #16]
 800a27a:	f003 0301 	and.w	r3, r3, #1
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d004      	beq.n	800a28c <USB_EPStartXfer+0x1062>
 800a282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a286:	3301      	adds	r3, #1
 800a288:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a28c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a290:	881b      	ldrh	r3, [r3, #0]
 800a292:	b29a      	uxth	r2, r3
 800a294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a298:	b29b      	uxth	r3, r3
 800a29a:	029b      	lsls	r3, r3, #10
 800a29c:	b29b      	uxth	r3, r3
 800a29e:	4313      	orrs	r3, r2
 800a2a0:	b29a      	uxth	r2, r3
 800a2a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a2a6:	801a      	strh	r2, [r3, #0]
 800a2a8:	e034      	b.n	800a314 <USB_EPStartXfer+0x10ea>
 800a2aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2ae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	785b      	ldrb	r3, [r3, #1]
 800a2b6:	2b01      	cmp	r3, #1
 800a2b8:	d12c      	bne.n	800a314 <USB_EPStartXfer+0x10ea>
 800a2ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a2c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a2d6:	b29b      	uxth	r3, r3
 800a2d8:	461a      	mov	r2, r3
 800a2da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a2de:	4413      	add	r3, r2
 800a2e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a2e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a2e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	781b      	ldrb	r3, [r3, #0]
 800a2f0:	00da      	lsls	r2, r3, #3
 800a2f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800a2f6:	4413      	add	r3, r2
 800a2f8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a2fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a300:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a304:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	691b      	ldr	r3, [r3, #16]
 800a30c:	b29a      	uxth	r2, r3
 800a30e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800a312:	801a      	strh	r2, [r3, #0]
 800a314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a318:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a322:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a326:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	785b      	ldrb	r3, [r3, #1]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	f040 809d 	bne.w	800a46e <USB_EPStartXfer+0x1244>
 800a334:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a338:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a342:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a346:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a350:	b29b      	uxth	r3, r3
 800a352:	461a      	mov	r2, r3
 800a354:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a358:	4413      	add	r3, r2
 800a35a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a35e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	781b      	ldrb	r3, [r3, #0]
 800a36a:	00da      	lsls	r2, r3, #3
 800a36c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a370:	4413      	add	r3, r2
 800a372:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a376:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a37a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a37e:	881b      	ldrh	r3, [r3, #0]
 800a380:	b29b      	uxth	r3, r3
 800a382:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a386:	b29a      	uxth	r2, r3
 800a388:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a38c:	801a      	strh	r2, [r3, #0]
 800a38e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a392:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	2b3e      	cmp	r3, #62	; 0x3e
 800a39c:	d92b      	bls.n	800a3f6 <USB_EPStartXfer+0x11cc>
 800a39e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	691b      	ldr	r3, [r3, #16]
 800a3aa:	095b      	lsrs	r3, r3, #5
 800a3ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a3b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	691b      	ldr	r3, [r3, #16]
 800a3bc:	f003 031f 	and.w	r3, r3, #31
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d104      	bne.n	800a3ce <USB_EPStartXfer+0x11a4>
 800a3c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3c8:	3b01      	subs	r3, #1
 800a3ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a3ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a3d2:	881b      	ldrh	r3, [r3, #0]
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3da:	b29b      	uxth	r3, r3
 800a3dc:	029b      	lsls	r3, r3, #10
 800a3de:	b29b      	uxth	r3, r3
 800a3e0:	4313      	orrs	r3, r2
 800a3e2:	b29b      	uxth	r3, r3
 800a3e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3ec:	b29a      	uxth	r2, r3
 800a3ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a3f2:	801a      	strh	r2, [r3, #0]
 800a3f4:	e069      	b.n	800a4ca <USB_EPStartXfer+0x12a0>
 800a3f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a3fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	691b      	ldr	r3, [r3, #16]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d10c      	bne.n	800a420 <USB_EPStartXfer+0x11f6>
 800a406:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a40a:	881b      	ldrh	r3, [r3, #0]
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a412:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a416:	b29a      	uxth	r2, r3
 800a418:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a41c:	801a      	strh	r2, [r3, #0]
 800a41e:	e054      	b.n	800a4ca <USB_EPStartXfer+0x12a0>
 800a420:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a424:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	085b      	lsrs	r3, r3, #1
 800a42e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	691b      	ldr	r3, [r3, #16]
 800a43e:	f003 0301 	and.w	r3, r3, #1
 800a442:	2b00      	cmp	r3, #0
 800a444:	d004      	beq.n	800a450 <USB_EPStartXfer+0x1226>
 800a446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a44a:	3301      	adds	r3, #1
 800a44c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a450:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a454:	881b      	ldrh	r3, [r3, #0]
 800a456:	b29a      	uxth	r2, r3
 800a458:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a45c:	b29b      	uxth	r3, r3
 800a45e:	029b      	lsls	r3, r3, #10
 800a460:	b29b      	uxth	r3, r3
 800a462:	4313      	orrs	r3, r2
 800a464:	b29a      	uxth	r2, r3
 800a466:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a46a:	801a      	strh	r2, [r3, #0]
 800a46c:	e02d      	b.n	800a4ca <USB_EPStartXfer+0x12a0>
 800a46e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a472:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	785b      	ldrb	r3, [r3, #1]
 800a47a:	2b01      	cmp	r3, #1
 800a47c:	d125      	bne.n	800a4ca <USB_EPStartXfer+0x12a0>
 800a47e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a482:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	461a      	mov	r2, r3
 800a490:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a494:	4413      	add	r3, r2
 800a496:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a49a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a49e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	00da      	lsls	r2, r3, #3
 800a4a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a4ac:	4413      	add	r3, r2
 800a4ae:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a4b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a4b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	691b      	ldr	r3, [r3, #16]
 800a4c2:	b29a      	uxth	r2, r3
 800a4c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a4c8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800a4ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	69db      	ldr	r3, [r3, #28]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	f000 8218 	beq.w	800a90c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800a4dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4e4:	681a      	ldr	r2, [r3, #0]
 800a4e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4ea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	781b      	ldrb	r3, [r3, #0]
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	4413      	add	r3, r2
 800a4f6:	881b      	ldrh	r3, [r3, #0]
 800a4f8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a4fc:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a500:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a504:	2b00      	cmp	r3, #0
 800a506:	d005      	beq.n	800a514 <USB_EPStartXfer+0x12ea>
 800a508:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a50c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a510:	2b00      	cmp	r3, #0
 800a512:	d10d      	bne.n	800a530 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a514:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	f040 81f5 	bne.w	800a90c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800a522:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800a526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	f040 81ee 	bne.w	800a90c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800a530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a534:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a53e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	781b      	ldrb	r3, [r3, #0]
 800a546:	009b      	lsls	r3, r3, #2
 800a548:	4413      	add	r3, r2
 800a54a:	881b      	ldrh	r3, [r3, #0]
 800a54c:	b29b      	uxth	r3, r3
 800a54e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a556:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800a55a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a55e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a562:	681a      	ldr	r2, [r3, #0]
 800a564:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a568:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	781b      	ldrb	r3, [r3, #0]
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	441a      	add	r2, r3
 800a574:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800a578:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a57c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a580:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a584:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a588:	b29b      	uxth	r3, r3
 800a58a:	8013      	strh	r3, [r2, #0]
 800a58c:	e1be      	b.n	800a90c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800a58e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a592:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	78db      	ldrb	r3, [r3, #3]
 800a59a:	2b01      	cmp	r3, #1
 800a59c:	f040 81b4 	bne.w	800a908 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800a5a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	699a      	ldr	r2, [r3, #24]
 800a5ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	429a      	cmp	r2, r3
 800a5ba:	d917      	bls.n	800a5ec <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800a5bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	691b      	ldr	r3, [r3, #16]
 800a5c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800a5cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	699a      	ldr	r2, [r3, #24]
 800a5d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5dc:	1ad2      	subs	r2, r2, r3
 800a5de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	619a      	str	r2, [r3, #24]
 800a5ea:	e00e      	b.n	800a60a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800a5ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	699b      	ldr	r3, [r3, #24]
 800a5f8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800a5fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a600:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	2200      	movs	r2, #0
 800a608:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800a60a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a60e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	785b      	ldrb	r3, [r3, #1]
 800a616:	2b00      	cmp	r3, #0
 800a618:	f040 8085 	bne.w	800a726 <USB_EPStartXfer+0x14fc>
 800a61c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a620:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a62a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a62e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a638:	b29b      	uxth	r3, r3
 800a63a:	461a      	mov	r2, r3
 800a63c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a640:	4413      	add	r3, r2
 800a642:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a646:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a64a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	781b      	ldrb	r3, [r3, #0]
 800a652:	00da      	lsls	r2, r3, #3
 800a654:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800a658:	4413      	add	r3, r2
 800a65a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a65e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a662:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a666:	881b      	ldrh	r3, [r3, #0]
 800a668:	b29b      	uxth	r3, r3
 800a66a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a66e:	b29a      	uxth	r2, r3
 800a670:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a674:	801a      	strh	r2, [r3, #0]
 800a676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a67a:	2b3e      	cmp	r3, #62	; 0x3e
 800a67c:	d923      	bls.n	800a6c6 <USB_EPStartXfer+0x149c>
 800a67e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a682:	095b      	lsrs	r3, r3, #5
 800a684:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a688:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a68c:	f003 031f 	and.w	r3, r3, #31
 800a690:	2b00      	cmp	r3, #0
 800a692:	d104      	bne.n	800a69e <USB_EPStartXfer+0x1474>
 800a694:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a698:	3b01      	subs	r3, #1
 800a69a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a69e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a6a2:	881b      	ldrh	r3, [r3, #0]
 800a6a4:	b29a      	uxth	r2, r3
 800a6a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	029b      	lsls	r3, r3, #10
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6bc:	b29a      	uxth	r2, r3
 800a6be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a6c2:	801a      	strh	r2, [r3, #0]
 800a6c4:	e060      	b.n	800a788 <USB_EPStartXfer+0x155e>
 800a6c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d10c      	bne.n	800a6e8 <USB_EPStartXfer+0x14be>
 800a6ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a6d2:	881b      	ldrh	r3, [r3, #0]
 800a6d4:	b29b      	uxth	r3, r3
 800a6d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6de:	b29a      	uxth	r2, r3
 800a6e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a6e4:	801a      	strh	r2, [r3, #0]
 800a6e6:	e04f      	b.n	800a788 <USB_EPStartXfer+0x155e>
 800a6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ec:	085b      	lsrs	r3, r3, #1
 800a6ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a6f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f6:	f003 0301 	and.w	r3, r3, #1
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d004      	beq.n	800a708 <USB_EPStartXfer+0x14de>
 800a6fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a702:	3301      	adds	r3, #1
 800a704:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800a708:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a70c:	881b      	ldrh	r3, [r3, #0]
 800a70e:	b29a      	uxth	r2, r3
 800a710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a714:	b29b      	uxth	r3, r3
 800a716:	029b      	lsls	r3, r3, #10
 800a718:	b29b      	uxth	r3, r3
 800a71a:	4313      	orrs	r3, r2
 800a71c:	b29a      	uxth	r2, r3
 800a71e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a722:	801a      	strh	r2, [r3, #0]
 800a724:	e030      	b.n	800a788 <USB_EPStartXfer+0x155e>
 800a726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a72a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	785b      	ldrb	r3, [r3, #1]
 800a732:	2b01      	cmp	r3, #1
 800a734:	d128      	bne.n	800a788 <USB_EPStartXfer+0x155e>
 800a736:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a73a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a748:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a752:	b29b      	uxth	r3, r3
 800a754:	461a      	mov	r2, r3
 800a756:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a75a:	4413      	add	r3, r2
 800a75c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800a760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	00da      	lsls	r2, r3, #3
 800a76e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a772:	4413      	add	r3, r2
 800a774:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a77c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a780:	b29a      	uxth	r2, r3
 800a782:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800a786:	801a      	strh	r2, [r3, #0]
 800a788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a78c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a79a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	785b      	ldrb	r3, [r3, #1]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	f040 8085 	bne.w	800a8b2 <USB_EPStartXfer+0x1688>
 800a7a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a7b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7c4:	b29b      	uxth	r3, r3
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a7cc:	4413      	add	r3, r2
 800a7ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a7d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	781b      	ldrb	r3, [r3, #0]
 800a7de:	00da      	lsls	r2, r3, #3
 800a7e0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800a7e4:	4413      	add	r3, r2
 800a7e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a7ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a7ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a7f2:	881b      	ldrh	r3, [r3, #0]
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a7fa:	b29a      	uxth	r2, r3
 800a7fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a800:	801a      	strh	r2, [r3, #0]
 800a802:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a806:	2b3e      	cmp	r3, #62	; 0x3e
 800a808:	d923      	bls.n	800a852 <USB_EPStartXfer+0x1628>
 800a80a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a80e:	095b      	lsrs	r3, r3, #5
 800a810:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a818:	f003 031f 	and.w	r3, r3, #31
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d104      	bne.n	800a82a <USB_EPStartXfer+0x1600>
 800a820:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a824:	3b01      	subs	r3, #1
 800a826:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a82a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a82e:	881b      	ldrh	r3, [r3, #0]
 800a830:	b29a      	uxth	r2, r3
 800a832:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a836:	b29b      	uxth	r3, r3
 800a838:	029b      	lsls	r3, r3, #10
 800a83a:	b29b      	uxth	r3, r3
 800a83c:	4313      	orrs	r3, r2
 800a83e:	b29b      	uxth	r3, r3
 800a840:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a844:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a848:	b29a      	uxth	r2, r3
 800a84a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a84e:	801a      	strh	r2, [r3, #0]
 800a850:	e05c      	b.n	800a90c <USB_EPStartXfer+0x16e2>
 800a852:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10c      	bne.n	800a874 <USB_EPStartXfer+0x164a>
 800a85a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a85e:	881b      	ldrh	r3, [r3, #0]
 800a860:	b29b      	uxth	r3, r3
 800a862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a870:	801a      	strh	r2, [r3, #0]
 800a872:	e04b      	b.n	800a90c <USB_EPStartXfer+0x16e2>
 800a874:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a878:	085b      	lsrs	r3, r3, #1
 800a87a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a87e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a882:	f003 0301 	and.w	r3, r3, #1
 800a886:	2b00      	cmp	r3, #0
 800a888:	d004      	beq.n	800a894 <USB_EPStartXfer+0x166a>
 800a88a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a88e:	3301      	adds	r3, #1
 800a890:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a894:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a898:	881b      	ldrh	r3, [r3, #0]
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	029b      	lsls	r3, r3, #10
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	4313      	orrs	r3, r2
 800a8a8:	b29a      	uxth	r2, r3
 800a8aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a8ae:	801a      	strh	r2, [r3, #0]
 800a8b0:	e02c      	b.n	800a90c <USB_EPStartXfer+0x16e2>
 800a8b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	785b      	ldrb	r3, [r3, #1]
 800a8be:	2b01      	cmp	r3, #1
 800a8c0:	d124      	bne.n	800a90c <USB_EPStartXfer+0x16e2>
 800a8c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8d0:	b29b      	uxth	r3, r3
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a8d8:	4413      	add	r3, r2
 800a8da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a8de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	781b      	ldrb	r3, [r3, #0]
 800a8ea:	00da      	lsls	r2, r3, #3
 800a8ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800a8f0:	4413      	add	r3, r2
 800a8f2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a8f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a8fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8fe:	b29a      	uxth	r2, r3
 800a900:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a904:	801a      	strh	r2, [r3, #0]
 800a906:	e001      	b.n	800a90c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800a908:	2301      	movs	r3, #1
 800a90a:	e03a      	b.n	800a982 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a90c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a910:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a914:	681a      	ldr	r2, [r3, #0]
 800a916:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a91a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	4413      	add	r3, r2
 800a926:	881b      	ldrh	r3, [r3, #0]
 800a928:	b29b      	uxth	r3, r3
 800a92a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a92e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a932:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a936:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a93a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a93e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a942:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a946:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a94a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800a94e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a952:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a956:	681a      	ldr	r2, [r3, #0]
 800a958:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a95c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	009b      	lsls	r3, r3, #2
 800a966:	441a      	add	r2, r3
 800a968:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800a96c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a970:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a978:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a97c:	b29b      	uxth	r3, r3
 800a97e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	785b      	ldrb	r3, [r3, #1]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d020      	beq.n	800a9e0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	683b      	ldr	r3, [r7, #0]
 800a9a2:	781b      	ldrb	r3, [r3, #0]
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	4413      	add	r3, r2
 800a9a8:	881b      	ldrh	r3, [r3, #0]
 800a9aa:	b29b      	uxth	r3, r3
 800a9ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9b4:	81bb      	strh	r3, [r7, #12]
 800a9b6:	89bb      	ldrh	r3, [r7, #12]
 800a9b8:	f083 0310 	eor.w	r3, r3, #16
 800a9bc:	81bb      	strh	r3, [r7, #12]
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	781b      	ldrb	r3, [r3, #0]
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	441a      	add	r2, r3
 800a9c8:	89bb      	ldrh	r3, [r7, #12]
 800a9ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a9d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	8013      	strh	r3, [r2, #0]
 800a9de:	e01f      	b.n	800aa20 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	4413      	add	r3, r2
 800a9ea:	881b      	ldrh	r3, [r3, #0]
 800a9ec:	b29b      	uxth	r3, r3
 800a9ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a9f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9f6:	81fb      	strh	r3, [r7, #14]
 800a9f8:	89fb      	ldrh	r3, [r7, #14]
 800a9fa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a9fe:	81fb      	strh	r3, [r7, #14]
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	441a      	add	r2, r3
 800aa0a:	89fb      	ldrh	r3, [r7, #14]
 800aa0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa1c:	b29b      	uxth	r3, r3
 800aa1e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800aa20:	2300      	movs	r3, #0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	3714      	adds	r7, #20
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr

0800aa2e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800aa2e:	b480      	push	{r7}
 800aa30:	b087      	sub	sp, #28
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	6078      	str	r0, [r7, #4]
 800aa36:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	7b1b      	ldrb	r3, [r3, #12]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	f040 809d 	bne.w	800ab7c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800aa42:	683b      	ldr	r3, [r7, #0]
 800aa44:	785b      	ldrb	r3, [r3, #1]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d04c      	beq.n	800aae4 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	4413      	add	r3, r2
 800aa54:	881b      	ldrh	r3, [r3, #0]
 800aa56:	823b      	strh	r3, [r7, #16]
 800aa58:	8a3b      	ldrh	r3, [r7, #16]
 800aa5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d01b      	beq.n	800aa9a <USB_EPClearStall+0x6c>
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	881b      	ldrh	r3, [r3, #0]
 800aa6e:	b29b      	uxth	r3, r3
 800aa70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aa74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa78:	81fb      	strh	r3, [r7, #14]
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	441a      	add	r2, r3
 800aa84:	89fb      	ldrh	r3, [r7, #14]
 800aa86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aa8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aa8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa92:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	78db      	ldrb	r3, [r3, #3]
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d06c      	beq.n	800ab7c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800aaa2:	687a      	ldr	r2, [r7, #4]
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	009b      	lsls	r3, r3, #2
 800aaaa:	4413      	add	r3, r2
 800aaac:	881b      	ldrh	r3, [r3, #0]
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aab8:	81bb      	strh	r3, [r7, #12]
 800aaba:	89bb      	ldrh	r3, [r7, #12]
 800aabc:	f083 0320 	eor.w	r3, r3, #32
 800aac0:	81bb      	strh	r3, [r7, #12]
 800aac2:	687a      	ldr	r2, [r7, #4]
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	781b      	ldrb	r3, [r3, #0]
 800aac8:	009b      	lsls	r3, r3, #2
 800aaca:	441a      	add	r2, r3
 800aacc:	89bb      	ldrh	r3, [r7, #12]
 800aace:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800aad2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800aad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aade:	b29b      	uxth	r3, r3
 800aae0:	8013      	strh	r3, [r2, #0]
 800aae2:	e04b      	b.n	800ab7c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	009b      	lsls	r3, r3, #2
 800aaec:	4413      	add	r3, r2
 800aaee:	881b      	ldrh	r3, [r3, #0]
 800aaf0:	82fb      	strh	r3, [r7, #22]
 800aaf2:	8afb      	ldrh	r3, [r7, #22]
 800aaf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d01b      	beq.n	800ab34 <USB_EPClearStall+0x106>
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	781b      	ldrb	r3, [r3, #0]
 800ab02:	009b      	lsls	r3, r3, #2
 800ab04:	4413      	add	r3, r2
 800ab06:	881b      	ldrh	r3, [r3, #0]
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab12:	82bb      	strh	r3, [r7, #20]
 800ab14:	687a      	ldr	r2, [r7, #4]
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	441a      	add	r2, r3
 800ab1e:	8abb      	ldrh	r3, [r7, #20]
 800ab20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800ab2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4413      	add	r3, r2
 800ab3e:	881b      	ldrh	r3, [r3, #0]
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab4a:	827b      	strh	r3, [r7, #18]
 800ab4c:	8a7b      	ldrh	r3, [r7, #18]
 800ab4e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800ab52:	827b      	strh	r3, [r7, #18]
 800ab54:	8a7b      	ldrh	r3, [r7, #18]
 800ab56:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800ab5a:	827b      	strh	r3, [r7, #18]
 800ab5c:	687a      	ldr	r2, [r7, #4]
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	009b      	lsls	r3, r3, #2
 800ab64:	441a      	add	r2, r3
 800ab66:	8a7b      	ldrh	r3, [r7, #18]
 800ab68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	371c      	adds	r7, #28
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800ab8a:	b480      	push	{r7}
 800ab8c:	b083      	sub	sp, #12
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
 800ab92:	460b      	mov	r3, r1
 800ab94:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800ab96:	78fb      	ldrb	r3, [r7, #3]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d103      	bne.n	800aba4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2280      	movs	r2, #128	; 0x80
 800aba0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800aba4:	2300      	movs	r3, #0
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	370c      	adds	r7, #12
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800abb2:	b480      	push	{r7}
 800abb4:	b083      	sub	sp, #12
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800abc0:	b29b      	uxth	r3, r3
 800abc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800abc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800abca:	b29a      	uxth	r2, r3
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800abd2:	2300      	movs	r3, #0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800abee:	b29b      	uxth	r3, r3
 800abf0:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800abf2:	68fb      	ldr	r3, [r7, #12]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3714      	adds	r7, #20
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b08b      	sub	sp, #44	; 0x2c
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	4611      	mov	r1, r2
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	460b      	mov	r3, r1
 800ac10:	80fb      	strh	r3, [r7, #6]
 800ac12:	4613      	mov	r3, r2
 800ac14:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800ac16:	88bb      	ldrh	r3, [r7, #4]
 800ac18:	3301      	adds	r3, #1
 800ac1a:	085b      	lsrs	r3, r3, #1
 800ac1c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800ac22:	68bb      	ldr	r3, [r7, #8]
 800ac24:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800ac26:	88fa      	ldrh	r2, [r7, #6]
 800ac28:	697b      	ldr	r3, [r7, #20]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ac30:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	627b      	str	r3, [r7, #36]	; 0x24
 800ac36:	e01b      	b.n	800ac70 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800ac38:	69fb      	ldr	r3, [r7, #28]
 800ac3a:	781b      	ldrb	r3, [r3, #0]
 800ac3c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800ac3e:	69fb      	ldr	r3, [r7, #28]
 800ac40:	3301      	adds	r3, #1
 800ac42:	781b      	ldrb	r3, [r3, #0]
 800ac44:	021b      	lsls	r3, r3, #8
 800ac46:	b21a      	sxth	r2, r3
 800ac48:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	b21b      	sxth	r3, r3
 800ac50:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800ac52:	6a3b      	ldr	r3, [r7, #32]
 800ac54:	8a7a      	ldrh	r2, [r7, #18]
 800ac56:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800ac58:	6a3b      	ldr	r3, [r7, #32]
 800ac5a:	3302      	adds	r3, #2
 800ac5c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800ac5e:	69fb      	ldr	r3, [r7, #28]
 800ac60:	3301      	adds	r3, #1
 800ac62:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800ac64:	69fb      	ldr	r3, [r7, #28]
 800ac66:	3301      	adds	r3, #1
 800ac68:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6c:	3b01      	subs	r3, #1
 800ac6e:	627b      	str	r3, [r7, #36]	; 0x24
 800ac70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d1e0      	bne.n	800ac38 <USB_WritePMA+0x38>
  }
}
 800ac76:	bf00      	nop
 800ac78:	bf00      	nop
 800ac7a:	372c      	adds	r7, #44	; 0x2c
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b08b      	sub	sp, #44	; 0x2c
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	60f8      	str	r0, [r7, #12]
 800ac8c:	60b9      	str	r1, [r7, #8]
 800ac8e:	4611      	mov	r1, r2
 800ac90:	461a      	mov	r2, r3
 800ac92:	460b      	mov	r3, r1
 800ac94:	80fb      	strh	r3, [r7, #6]
 800ac96:	4613      	mov	r3, r2
 800ac98:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800ac9a:	88bb      	ldrh	r3, [r7, #4]
 800ac9c:	085b      	lsrs	r3, r3, #1
 800ac9e:	b29b      	uxth	r3, r3
 800aca0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800acaa:	88fa      	ldrh	r2, [r7, #6]
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	4413      	add	r3, r2
 800acb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800acb4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	627b      	str	r3, [r7, #36]	; 0x24
 800acba:	e018      	b.n	800acee <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800acbc:	6a3b      	ldr	r3, [r7, #32]
 800acbe:	881b      	ldrh	r3, [r3, #0]
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800acc4:	6a3b      	ldr	r3, [r7, #32]
 800acc6:	3302      	adds	r3, #2
 800acc8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	b2da      	uxtb	r2, r3
 800acce:	69fb      	ldr	r3, [r7, #28]
 800acd0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800acd2:	69fb      	ldr	r3, [r7, #28]
 800acd4:	3301      	adds	r3, #1
 800acd6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	0a1b      	lsrs	r3, r3, #8
 800acdc:	b2da      	uxtb	r2, r3
 800acde:	69fb      	ldr	r3, [r7, #28]
 800ace0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	3301      	adds	r3, #1
 800ace6:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800ace8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acea:	3b01      	subs	r3, #1
 800acec:	627b      	str	r3, [r7, #36]	; 0x24
 800acee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d1e3      	bne.n	800acbc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800acf4:	88bb      	ldrh	r3, [r7, #4]
 800acf6:	f003 0301 	and.w	r3, r3, #1
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d007      	beq.n	800ad10 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800ad00:	6a3b      	ldr	r3, [r7, #32]
 800ad02:	881b      	ldrh	r3, [r3, #0]
 800ad04:	b29b      	uxth	r3, r3
 800ad06:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800ad08:	693b      	ldr	r3, [r7, #16]
 800ad0a:	b2da      	uxtb	r2, r3
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	701a      	strb	r2, [r3, #0]
  }
}
 800ad10:	bf00      	nop
 800ad12:	372c      	adds	r7, #44	; 0x2c
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	460b      	mov	r3, r1
 800ad26:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ad28:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800ad2c:	f002 f8c8 	bl	800cec0 <USBD_static_malloc>
 800ad30:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d105      	bne.n	800ad44 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ad40:	2302      	movs	r3, #2
 800ad42:	e066      	b.n	800ae12 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	7c1b      	ldrb	r3, [r3, #16]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d119      	bne.n	800ad88 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ad54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad58:	2202      	movs	r2, #2
 800ad5a:	2181      	movs	r1, #129	; 0x81
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f001 ff56 	bl	800cc0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2201      	movs	r2, #1
 800ad66:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ad68:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ad6c:	2202      	movs	r2, #2
 800ad6e:	2101      	movs	r1, #1
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f001 ff4c 	bl	800cc0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	2201      	movs	r2, #1
 800ad7a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2210      	movs	r2, #16
 800ad82:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ad86:	e016      	b.n	800adb6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ad88:	2340      	movs	r3, #64	; 0x40
 800ad8a:	2202      	movs	r2, #2
 800ad8c:	2181      	movs	r1, #129	; 0x81
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f001 ff3d 	bl	800cc0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ad9a:	2340      	movs	r3, #64	; 0x40
 800ad9c:	2202      	movs	r2, #2
 800ad9e:	2101      	movs	r1, #1
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f001 ff34 	bl	800cc0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2201      	movs	r2, #1
 800adaa:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2210      	movs	r2, #16
 800adb2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800adb6:	2308      	movs	r3, #8
 800adb8:	2203      	movs	r2, #3
 800adba:	2182      	movs	r1, #130	; 0x82
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f001 ff26 	bl	800cc0e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2201      	movs	r2, #1
 800adc6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2200      	movs	r2, #0
 800add8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	2200      	movs	r2, #0
 800ade0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	7c1b      	ldrb	r3, [r3, #16]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d109      	bne.n	800ae00 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800adf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800adf6:	2101      	movs	r1, #1
 800adf8:	6878      	ldr	r0, [r7, #4]
 800adfa:	f001 fff7 	bl	800cdec <USBD_LL_PrepareReceive>
 800adfe:	e007      	b.n	800ae10 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ae06:	2340      	movs	r3, #64	; 0x40
 800ae08:	2101      	movs	r1, #1
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f001 ffee 	bl	800cdec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ae10:	2300      	movs	r3, #0
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3710      	adds	r7, #16
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}

0800ae1a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ae1a:	b580      	push	{r7, lr}
 800ae1c:	b082      	sub	sp, #8
 800ae1e:	af00      	add	r7, sp, #0
 800ae20:	6078      	str	r0, [r7, #4]
 800ae22:	460b      	mov	r3, r1
 800ae24:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ae26:	2181      	movs	r1, #129	; 0x81
 800ae28:	6878      	ldr	r0, [r7, #4]
 800ae2a:	f001 ff16 	bl	800cc5a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2200      	movs	r2, #0
 800ae32:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ae34:	2101      	movs	r1, #1
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f001 ff0f 	bl	800cc5a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ae44:	2182      	movs	r1, #130	; 0x82
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f001 ff07 	bl	800cc5a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2200      	movs	r2, #0
 800ae58:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d00e      	beq.n	800ae84 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ae6c:	685b      	ldr	r3, [r3, #4]
 800ae6e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ae76:	4618      	mov	r0, r3
 800ae78:	f002 f830 	bl	800cedc <USBD_static_free>
    pdev->pClassData = NULL;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ae84:	2300      	movs	r3, #0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3708      	adds	r7, #8
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
	...

0800ae90 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b086      	sub	sp, #24
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800aea0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800aea2:	2300      	movs	r3, #0
 800aea4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800aea6:	2300      	movs	r3, #0
 800aea8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d101      	bne.n	800aeb8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800aeb4:	2303      	movs	r3, #3
 800aeb6:	e0af      	b.n	800b018 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d03f      	beq.n	800af44 <USBD_CDC_Setup+0xb4>
 800aec4:	2b20      	cmp	r3, #32
 800aec6:	f040 809f 	bne.w	800b008 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	88db      	ldrh	r3, [r3, #6]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d02e      	beq.n	800af30 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	781b      	ldrb	r3, [r3, #0]
 800aed6:	b25b      	sxtb	r3, r3
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	da16      	bge.n	800af0a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800aee2:	689b      	ldr	r3, [r3, #8]
 800aee4:	683a      	ldr	r2, [r7, #0]
 800aee6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800aee8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800aeea:	683a      	ldr	r2, [r7, #0]
 800aeec:	88d2      	ldrh	r2, [r2, #6]
 800aeee:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	88db      	ldrh	r3, [r3, #6]
 800aef4:	2b07      	cmp	r3, #7
 800aef6:	bf28      	it	cs
 800aef8:	2307      	movcs	r3, #7
 800aefa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	89fa      	ldrh	r2, [r7, #14]
 800af00:	4619      	mov	r1, r3
 800af02:	6878      	ldr	r0, [r7, #4]
 800af04:	f001 fa9f 	bl	800c446 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800af08:	e085      	b.n	800b016 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	785a      	ldrb	r2, [r3, #1]
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	88db      	ldrh	r3, [r3, #6]
 800af18:	b2da      	uxtb	r2, r3
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800af20:	6939      	ldr	r1, [r7, #16]
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	88db      	ldrh	r3, [r3, #6]
 800af26:	461a      	mov	r2, r3
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f001 fab8 	bl	800c49e <USBD_CtlPrepareRx>
      break;
 800af2e:	e072      	b.n	800b016 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	683a      	ldr	r2, [r7, #0]
 800af3a:	7850      	ldrb	r0, [r2, #1]
 800af3c:	2200      	movs	r2, #0
 800af3e:	6839      	ldr	r1, [r7, #0]
 800af40:	4798      	blx	r3
      break;
 800af42:	e068      	b.n	800b016 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	785b      	ldrb	r3, [r3, #1]
 800af48:	2b0b      	cmp	r3, #11
 800af4a:	d852      	bhi.n	800aff2 <USBD_CDC_Setup+0x162>
 800af4c:	a201      	add	r2, pc, #4	; (adr r2, 800af54 <USBD_CDC_Setup+0xc4>)
 800af4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af52:	bf00      	nop
 800af54:	0800af85 	.word	0x0800af85
 800af58:	0800b001 	.word	0x0800b001
 800af5c:	0800aff3 	.word	0x0800aff3
 800af60:	0800aff3 	.word	0x0800aff3
 800af64:	0800aff3 	.word	0x0800aff3
 800af68:	0800aff3 	.word	0x0800aff3
 800af6c:	0800aff3 	.word	0x0800aff3
 800af70:	0800aff3 	.word	0x0800aff3
 800af74:	0800aff3 	.word	0x0800aff3
 800af78:	0800aff3 	.word	0x0800aff3
 800af7c:	0800afaf 	.word	0x0800afaf
 800af80:	0800afd9 	.word	0x0800afd9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af8a:	b2db      	uxtb	r3, r3
 800af8c:	2b03      	cmp	r3, #3
 800af8e:	d107      	bne.n	800afa0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800af90:	f107 030a 	add.w	r3, r7, #10
 800af94:	2202      	movs	r2, #2
 800af96:	4619      	mov	r1, r3
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f001 fa54 	bl	800c446 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af9e:	e032      	b.n	800b006 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800afa0:	6839      	ldr	r1, [r7, #0]
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f001 f9de 	bl	800c364 <USBD_CtlError>
            ret = USBD_FAIL;
 800afa8:	2303      	movs	r3, #3
 800afaa:	75fb      	strb	r3, [r7, #23]
          break;
 800afac:	e02b      	b.n	800b006 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afb4:	b2db      	uxtb	r3, r3
 800afb6:	2b03      	cmp	r3, #3
 800afb8:	d107      	bne.n	800afca <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800afba:	f107 030d 	add.w	r3, r7, #13
 800afbe:	2201      	movs	r2, #1
 800afc0:	4619      	mov	r1, r3
 800afc2:	6878      	ldr	r0, [r7, #4]
 800afc4:	f001 fa3f 	bl	800c446 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800afc8:	e01d      	b.n	800b006 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800afca:	6839      	ldr	r1, [r7, #0]
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f001 f9c9 	bl	800c364 <USBD_CtlError>
            ret = USBD_FAIL;
 800afd2:	2303      	movs	r3, #3
 800afd4:	75fb      	strb	r3, [r7, #23]
          break;
 800afd6:	e016      	b.n	800b006 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afde:	b2db      	uxtb	r3, r3
 800afe0:	2b03      	cmp	r3, #3
 800afe2:	d00f      	beq.n	800b004 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800afe4:	6839      	ldr	r1, [r7, #0]
 800afe6:	6878      	ldr	r0, [r7, #4]
 800afe8:	f001 f9bc 	bl	800c364 <USBD_CtlError>
            ret = USBD_FAIL;
 800afec:	2303      	movs	r3, #3
 800afee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aff0:	e008      	b.n	800b004 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aff2:	6839      	ldr	r1, [r7, #0]
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f001 f9b5 	bl	800c364 <USBD_CtlError>
          ret = USBD_FAIL;
 800affa:	2303      	movs	r3, #3
 800affc:	75fb      	strb	r3, [r7, #23]
          break;
 800affe:	e002      	b.n	800b006 <USBD_CDC_Setup+0x176>
          break;
 800b000:	bf00      	nop
 800b002:	e008      	b.n	800b016 <USBD_CDC_Setup+0x186>
          break;
 800b004:	bf00      	nop
      }
      break;
 800b006:	e006      	b.n	800b016 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800b008:	6839      	ldr	r1, [r7, #0]
 800b00a:	6878      	ldr	r0, [r7, #4]
 800b00c:	f001 f9aa 	bl	800c364 <USBD_CtlError>
      ret = USBD_FAIL;
 800b010:	2303      	movs	r3, #3
 800b012:	75fb      	strb	r3, [r7, #23]
      break;
 800b014:	bf00      	nop
  }

  return (uint8_t)ret;
 800b016:	7dfb      	ldrb	r3, [r7, #23]
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3718      	adds	r7, #24
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b084      	sub	sp, #16
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
 800b028:	460b      	mov	r3, r1
 800b02a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b032:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d101      	bne.n	800b042 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b03e:	2303      	movs	r3, #3
 800b040:	e04f      	b.n	800b0e2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b048:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b04a:	78fa      	ldrb	r2, [r7, #3]
 800b04c:	6879      	ldr	r1, [r7, #4]
 800b04e:	4613      	mov	r3, r2
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4413      	add	r3, r2
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	440b      	add	r3, r1
 800b058:	3318      	adds	r3, #24
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d029      	beq.n	800b0b4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800b060:	78fa      	ldrb	r2, [r7, #3]
 800b062:	6879      	ldr	r1, [r7, #4]
 800b064:	4613      	mov	r3, r2
 800b066:	009b      	lsls	r3, r3, #2
 800b068:	4413      	add	r3, r2
 800b06a:	009b      	lsls	r3, r3, #2
 800b06c:	440b      	add	r3, r1
 800b06e:	3318      	adds	r3, #24
 800b070:	681a      	ldr	r2, [r3, #0]
 800b072:	78f9      	ldrb	r1, [r7, #3]
 800b074:	68f8      	ldr	r0, [r7, #12]
 800b076:	460b      	mov	r3, r1
 800b078:	009b      	lsls	r3, r3, #2
 800b07a:	440b      	add	r3, r1
 800b07c:	00db      	lsls	r3, r3, #3
 800b07e:	4403      	add	r3, r0
 800b080:	3320      	adds	r3, #32
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	fbb2 f1f3 	udiv	r1, r2, r3
 800b088:	fb01 f303 	mul.w	r3, r1, r3
 800b08c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d110      	bne.n	800b0b4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800b092:	78fa      	ldrb	r2, [r7, #3]
 800b094:	6879      	ldr	r1, [r7, #4]
 800b096:	4613      	mov	r3, r2
 800b098:	009b      	lsls	r3, r3, #2
 800b09a:	4413      	add	r3, r2
 800b09c:	009b      	lsls	r3, r3, #2
 800b09e:	440b      	add	r3, r1
 800b0a0:	3318      	adds	r3, #24
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b0a6:	78f9      	ldrb	r1, [r7, #3]
 800b0a8:	2300      	movs	r3, #0
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f001 fe7c 	bl	800cdaa <USBD_LL_Transmit>
 800b0b2:	e015      	b.n	800b0e0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0c2:	691b      	ldr	r3, [r3, #16]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d00b      	beq.n	800b0e0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b0ce:	691b      	ldr	r3, [r3, #16]
 800b0d0:	68ba      	ldr	r2, [r7, #8]
 800b0d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800b0d6:	68ba      	ldr	r2, [r7, #8]
 800b0d8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800b0dc:	78fa      	ldrb	r2, [r7, #3]
 800b0de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b0e0:	2300      	movs	r3, #0
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3710      	adds	r7, #16
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b084      	sub	sp, #16
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b0fc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b104:	2b00      	cmp	r3, #0
 800b106:	d101      	bne.n	800b10c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b108:	2303      	movs	r3, #3
 800b10a:	e015      	b.n	800b138 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b10c:	78fb      	ldrb	r3, [r7, #3]
 800b10e:	4619      	mov	r1, r3
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f001 fe8c 	bl	800ce2e <USBD_LL_GetRxDataSize>
 800b116:	4602      	mov	r2, r0
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	68fa      	ldr	r2, [r7, #12]
 800b128:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800b12c:	68fa      	ldr	r2, [r7, #12]
 800b12e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800b132:	4611      	mov	r1, r2
 800b134:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3710      	adds	r7, #16
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b14e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d101      	bne.n	800b15a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800b156:	2303      	movs	r3, #3
 800b158:	e01b      	b.n	800b192 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b160:	2b00      	cmp	r3, #0
 800b162:	d015      	beq.n	800b190 <USBD_CDC_EP0_RxReady+0x50>
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800b16a:	2bff      	cmp	r3, #255	; 0xff
 800b16c:	d010      	beq.n	800b190 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b174:	689b      	ldr	r3, [r3, #8]
 800b176:	68fa      	ldr	r2, [r7, #12]
 800b178:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800b17c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800b184:	b292      	uxth	r2, r2
 800b186:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	22ff      	movs	r2, #255	; 0xff
 800b18c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800b190:	2300      	movs	r3, #0
}
 800b192:	4618      	mov	r0, r3
 800b194:	3710      	adds	r7, #16
 800b196:	46bd      	mov	sp, r7
 800b198:	bd80      	pop	{r7, pc}
	...

0800b19c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b19c:	b480      	push	{r7}
 800b19e:	b083      	sub	sp, #12
 800b1a0:	af00      	add	r7, sp, #0
 800b1a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2243      	movs	r2, #67	; 0x43
 800b1a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800b1aa:	4b03      	ldr	r3, [pc, #12]	; (800b1b8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	370c      	adds	r7, #12
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b6:	4770      	bx	lr
 800b1b8:	2000009c 	.word	0x2000009c

0800b1bc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2243      	movs	r2, #67	; 0x43
 800b1c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800b1ca:	4b03      	ldr	r3, [pc, #12]	; (800b1d8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	370c      	adds	r7, #12
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d6:	4770      	bx	lr
 800b1d8:	20000058 	.word	0x20000058

0800b1dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b083      	sub	sp, #12
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2243      	movs	r2, #67	; 0x43
 800b1e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800b1ea:	4b03      	ldr	r3, [pc, #12]	; (800b1f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	370c      	adds	r7, #12
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f6:	4770      	bx	lr
 800b1f8:	200000e0 	.word	0x200000e0

0800b1fc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	220a      	movs	r2, #10
 800b208:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b20a:	4b03      	ldr	r3, [pc, #12]	; (800b218 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b20c:	4618      	mov	r0, r3
 800b20e:	370c      	adds	r7, #12
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr
 800b218:	20000014 	.word	0x20000014

0800b21c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d101      	bne.n	800b230 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b22c:	2303      	movs	r3, #3
 800b22e:	e004      	b.n	800b23a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	683a      	ldr	r2, [r7, #0]
 800b234:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	370c      	adds	r7, #12
 800b23e:	46bd      	mov	sp, r7
 800b240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b244:	4770      	bx	lr

0800b246 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b246:	b480      	push	{r7}
 800b248:	b087      	sub	sp, #28
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	60f8      	str	r0, [r7, #12]
 800b24e:	60b9      	str	r1, [r7, #8]
 800b250:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b258:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d101      	bne.n	800b264 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b260:	2303      	movs	r3, #3
 800b262:	e008      	b.n	800b276 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800b264:	697b      	ldr	r3, [r7, #20]
 800b266:	68ba      	ldr	r2, [r7, #8]
 800b268:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800b274:	2300      	movs	r3, #0
}
 800b276:	4618      	mov	r0, r3
 800b278:	371c      	adds	r7, #28
 800b27a:	46bd      	mov	sp, r7
 800b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b280:	4770      	bx	lr

0800b282 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b282:	b480      	push	{r7}
 800b284:	b085      	sub	sp, #20
 800b286:	af00      	add	r7, sp, #0
 800b288:	6078      	str	r0, [r7, #4]
 800b28a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b292:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d101      	bne.n	800b29e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800b29a:	2303      	movs	r3, #3
 800b29c:	e004      	b.n	800b2a8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	683a      	ldr	r2, [r7, #0]
 800b2a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800b2a6:	2300      	movs	r3, #0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3714      	adds	r7, #20
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b084      	sub	sp, #16
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d101      	bne.n	800b2d2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800b2ce:	2303      	movs	r3, #3
 800b2d0:	e016      	b.n	800b300 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	7c1b      	ldrb	r3, [r3, #16]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d109      	bne.n	800b2ee <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b2e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b2e4:	2101      	movs	r1, #1
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f001 fd80 	bl	800cdec <USBD_LL_PrepareReceive>
 800b2ec:	e007      	b.n	800b2fe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b2f4:	2340      	movs	r3, #64	; 0x40
 800b2f6:	2101      	movs	r1, #1
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f001 fd77 	bl	800cdec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b2fe:	2300      	movs	r3, #0
}
 800b300:	4618      	mov	r0, r3
 800b302:	3710      	adds	r7, #16
 800b304:	46bd      	mov	sp, r7
 800b306:	bd80      	pop	{r7, pc}

0800b308 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b086      	sub	sp, #24
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	60f8      	str	r0, [r7, #12]
 800b310:	60b9      	str	r1, [r7, #8]
 800b312:	4613      	mov	r3, r2
 800b314:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d101      	bne.n	800b320 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800b31c:	2303      	movs	r3, #3
 800b31e:	e01f      	b.n	800b360 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	2200      	movs	r2, #0
 800b324:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2200      	movs	r2, #0
 800b32c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2200      	movs	r2, #0
 800b334:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d003      	beq.n	800b346 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	68ba      	ldr	r2, [r7, #8]
 800b342:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2201      	movs	r2, #1
 800b34a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	79fa      	ldrb	r2, [r7, #7]
 800b352:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b354:	68f8      	ldr	r0, [r7, #12]
 800b356:	f001 fbdf 	bl	800cb18 <USBD_LL_Init>
 800b35a:	4603      	mov	r3, r0
 800b35c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b35e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b360:	4618      	mov	r0, r3
 800b362:	3718      	adds	r7, #24
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}

0800b368 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b368:	b580      	push	{r7, lr}
 800b36a:	b084      	sub	sp, #16
 800b36c:	af00      	add	r7, sp, #0
 800b36e:	6078      	str	r0, [r7, #4]
 800b370:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b372:	2300      	movs	r3, #0
 800b374:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d101      	bne.n	800b380 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800b37c:	2303      	movs	r3, #3
 800b37e:	e016      	b.n	800b3ae <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	683a      	ldr	r2, [r7, #0]
 800b384:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b38e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b390:	2b00      	cmp	r3, #0
 800b392:	d00b      	beq.n	800b3ac <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b39c:	f107 020e 	add.w	r2, r7, #14
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	4798      	blx	r3
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800b3ac:	2300      	movs	r3, #0
}
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	3710      	adds	r7, #16
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}

0800b3b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b082      	sub	sp, #8
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f001 fc0a 	bl	800cbd8 <USBD_LL_Start>
 800b3c4:	4603      	mov	r3, r0
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3708      	adds	r7, #8
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	bd80      	pop	{r7, pc}

0800b3ce <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800b3ce:	b480      	push	{r7}
 800b3d0:	b083      	sub	sp, #12
 800b3d2:	af00      	add	r7, sp, #0
 800b3d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b3d6:	2300      	movs	r3, #0
}
 800b3d8:	4618      	mov	r0, r3
 800b3da:	370c      	adds	r7, #12
 800b3dc:	46bd      	mov	sp, r7
 800b3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e2:	4770      	bx	lr

0800b3e4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	460b      	mov	r3, r1
 800b3ee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800b3f0:	2303      	movs	r3, #3
 800b3f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d009      	beq.n	800b412 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	78fa      	ldrb	r2, [r7, #3]
 800b408:	4611      	mov	r1, r2
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	4798      	blx	r3
 800b40e:	4603      	mov	r3, r0
 800b410:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800b412:	7bfb      	ldrb	r3, [r7, #15]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3710      	adds	r7, #16
 800b418:	46bd      	mov	sp, r7
 800b41a:	bd80      	pop	{r7, pc}

0800b41c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b41c:	b580      	push	{r7, lr}
 800b41e:	b082      	sub	sp, #8
 800b420:	af00      	add	r7, sp, #0
 800b422:	6078      	str	r0, [r7, #4]
 800b424:	460b      	mov	r3, r1
 800b426:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d007      	beq.n	800b442 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	78fa      	ldrb	r2, [r7, #3]
 800b43c:	4611      	mov	r1, r2
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	4798      	blx	r3
  }

  return USBD_OK;
 800b442:	2300      	movs	r3, #0
}
 800b444:	4618      	mov	r0, r3
 800b446:	3708      	adds	r7, #8
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b45c:	6839      	ldr	r1, [r7, #0]
 800b45e:	4618      	mov	r0, r3
 800b460:	f000 ff46 	bl	800c2f0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2201      	movs	r2, #1
 800b468:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800b472:	461a      	mov	r2, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b480:	f003 031f 	and.w	r3, r3, #31
 800b484:	2b02      	cmp	r3, #2
 800b486:	d01a      	beq.n	800b4be <USBD_LL_SetupStage+0x72>
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d822      	bhi.n	800b4d2 <USBD_LL_SetupStage+0x86>
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d002      	beq.n	800b496 <USBD_LL_SetupStage+0x4a>
 800b490:	2b01      	cmp	r3, #1
 800b492:	d00a      	beq.n	800b4aa <USBD_LL_SetupStage+0x5e>
 800b494:	e01d      	b.n	800b4d2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b49c:	4619      	mov	r1, r3
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f000 f9ee 	bl	800b880 <USBD_StdDevReq>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	73fb      	strb	r3, [r7, #15]
      break;
 800b4a8:	e020      	b.n	800b4ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f000 fa52 	bl	800b95c <USBD_StdItfReq>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b4bc:	e016      	b.n	800b4ec <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800b4c4:	4619      	mov	r1, r3
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f000 fa91 	bl	800b9ee <USBD_StdEPReq>
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	73fb      	strb	r3, [r7, #15]
      break;
 800b4d0:	e00c      	b.n	800b4ec <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800b4d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	4619      	mov	r1, r3
 800b4e0:	6878      	ldr	r0, [r7, #4]
 800b4e2:	f001 fbd9 	bl	800cc98 <USBD_LL_StallEP>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	73fb      	strb	r3, [r7, #15]
      break;
 800b4ea:	bf00      	nop
  }

  return ret;
 800b4ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}

0800b4f6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b4f6:	b580      	push	{r7, lr}
 800b4f8:	b086      	sub	sp, #24
 800b4fa:	af00      	add	r7, sp, #0
 800b4fc:	60f8      	str	r0, [r7, #12]
 800b4fe:	460b      	mov	r3, r1
 800b500:	607a      	str	r2, [r7, #4]
 800b502:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b504:	7afb      	ldrb	r3, [r7, #11]
 800b506:	2b00      	cmp	r3, #0
 800b508:	d138      	bne.n	800b57c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800b50a:	68fb      	ldr	r3, [r7, #12]
 800b50c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800b510:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b518:	2b03      	cmp	r3, #3
 800b51a:	d14a      	bne.n	800b5b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	689a      	ldr	r2, [r3, #8]
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	429a      	cmp	r2, r3
 800b526:	d913      	bls.n	800b550 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	689a      	ldr	r2, [r3, #8]
 800b52c:	693b      	ldr	r3, [r7, #16]
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	1ad2      	subs	r2, r2, r3
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b536:	693b      	ldr	r3, [r7, #16]
 800b538:	68da      	ldr	r2, [r3, #12]
 800b53a:	693b      	ldr	r3, [r7, #16]
 800b53c:	689b      	ldr	r3, [r3, #8]
 800b53e:	4293      	cmp	r3, r2
 800b540:	bf28      	it	cs
 800b542:	4613      	movcs	r3, r2
 800b544:	461a      	mov	r2, r3
 800b546:	6879      	ldr	r1, [r7, #4]
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f000 ffc5 	bl	800c4d8 <USBD_CtlContinueRx>
 800b54e:	e030      	b.n	800b5b2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b556:	b2db      	uxtb	r3, r3
 800b558:	2b03      	cmp	r3, #3
 800b55a:	d10b      	bne.n	800b574 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b562:	691b      	ldr	r3, [r3, #16]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d005      	beq.n	800b574 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b56e:	691b      	ldr	r3, [r3, #16]
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b574:	68f8      	ldr	r0, [r7, #12]
 800b576:	f000 ffc0 	bl	800c4fa <USBD_CtlSendStatus>
 800b57a:	e01a      	b.n	800b5b2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b582:	b2db      	uxtb	r3, r3
 800b584:	2b03      	cmp	r3, #3
 800b586:	d114      	bne.n	800b5b2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b58e:	699b      	ldr	r3, [r3, #24]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d00e      	beq.n	800b5b2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b59a:	699b      	ldr	r3, [r3, #24]
 800b59c:	7afa      	ldrb	r2, [r7, #11]
 800b59e:	4611      	mov	r1, r2
 800b5a0:	68f8      	ldr	r0, [r7, #12]
 800b5a2:	4798      	blx	r3
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b5a8:	7dfb      	ldrb	r3, [r7, #23]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d001      	beq.n	800b5b2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800b5ae:	7dfb      	ldrb	r3, [r7, #23]
 800b5b0:	e000      	b.n	800b5b4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800b5b2:	2300      	movs	r3, #0
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3718      	adds	r7, #24
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	bd80      	pop	{r7, pc}

0800b5bc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b5bc:	b580      	push	{r7, lr}
 800b5be:	b086      	sub	sp, #24
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	60f8      	str	r0, [r7, #12]
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	607a      	str	r2, [r7, #4]
 800b5c8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800b5ca:	7afb      	ldrb	r3, [r7, #11]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d16b      	bne.n	800b6a8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	3314      	adds	r3, #20
 800b5d4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d156      	bne.n	800b68e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	689a      	ldr	r2, [r3, #8]
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	68db      	ldr	r3, [r3, #12]
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d914      	bls.n	800b616 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	689a      	ldr	r2, [r3, #8]
 800b5f0:	693b      	ldr	r3, [r7, #16]
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	1ad2      	subs	r2, r2, r3
 800b5f6:	693b      	ldr	r3, [r7, #16]
 800b5f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b5fa:	693b      	ldr	r3, [r7, #16]
 800b5fc:	689b      	ldr	r3, [r3, #8]
 800b5fe:	461a      	mov	r2, r3
 800b600:	6879      	ldr	r1, [r7, #4]
 800b602:	68f8      	ldr	r0, [r7, #12]
 800b604:	f000 ff3a 	bl	800c47c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b608:	2300      	movs	r3, #0
 800b60a:	2200      	movs	r2, #0
 800b60c:	2100      	movs	r1, #0
 800b60e:	68f8      	ldr	r0, [r7, #12]
 800b610:	f001 fbec 	bl	800cdec <USBD_LL_PrepareReceive>
 800b614:	e03b      	b.n	800b68e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b616:	693b      	ldr	r3, [r7, #16]
 800b618:	68da      	ldr	r2, [r3, #12]
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	689b      	ldr	r3, [r3, #8]
 800b61e:	429a      	cmp	r2, r3
 800b620:	d11c      	bne.n	800b65c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	685a      	ldr	r2, [r3, #4]
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d316      	bcc.n	800b65c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b62e:	693b      	ldr	r3, [r7, #16]
 800b630:	685a      	ldr	r2, [r3, #4]
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b638:	429a      	cmp	r2, r3
 800b63a:	d20f      	bcs.n	800b65c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b63c:	2200      	movs	r2, #0
 800b63e:	2100      	movs	r1, #0
 800b640:	68f8      	ldr	r0, [r7, #12]
 800b642:	f000 ff1b 	bl	800c47c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2200      	movs	r2, #0
 800b64a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b64e:	2300      	movs	r3, #0
 800b650:	2200      	movs	r2, #0
 800b652:	2100      	movs	r1, #0
 800b654:	68f8      	ldr	r0, [r7, #12]
 800b656:	f001 fbc9 	bl	800cdec <USBD_LL_PrepareReceive>
 800b65a:	e018      	b.n	800b68e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b662:	b2db      	uxtb	r3, r3
 800b664:	2b03      	cmp	r3, #3
 800b666:	d10b      	bne.n	800b680 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b66e:	68db      	ldr	r3, [r3, #12]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d005      	beq.n	800b680 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b67a:	68db      	ldr	r3, [r3, #12]
 800b67c:	68f8      	ldr	r0, [r7, #12]
 800b67e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b680:	2180      	movs	r1, #128	; 0x80
 800b682:	68f8      	ldr	r0, [r7, #12]
 800b684:	f001 fb08 	bl	800cc98 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b688:	68f8      	ldr	r0, [r7, #12]
 800b68a:	f000 ff49 	bl	800c520 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b694:	2b01      	cmp	r3, #1
 800b696:	d122      	bne.n	800b6de <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800b698:	68f8      	ldr	r0, [r7, #12]
 800b69a:	f7ff fe98 	bl	800b3ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b6a6:	e01a      	b.n	800b6de <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6ae:	b2db      	uxtb	r3, r3
 800b6b0:	2b03      	cmp	r3, #3
 800b6b2:	d114      	bne.n	800b6de <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6ba:	695b      	ldr	r3, [r3, #20]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d00e      	beq.n	800b6de <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b6c6:	695b      	ldr	r3, [r3, #20]
 800b6c8:	7afa      	ldrb	r2, [r7, #11]
 800b6ca:	4611      	mov	r1, r2
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	4798      	blx	r3
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800b6d4:	7dfb      	ldrb	r3, [r7, #23]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d001      	beq.n	800b6de <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800b6da:	7dfb      	ldrb	r3, [r7, #23]
 800b6dc:	e000      	b.n	800b6e0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800b6de:	2300      	movs	r3, #0
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3718      	adds	r7, #24
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}

0800b6e8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b082      	sub	sp, #8
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2200      	movs	r2, #0
 800b704:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2200      	movs	r2, #0
 800b70a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b714:	2b00      	cmp	r3, #0
 800b716:	d101      	bne.n	800b71c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800b718:	2303      	movs	r3, #3
 800b71a:	e02f      	b.n	800b77c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800b722:	2b00      	cmp	r3, #0
 800b724:	d00f      	beq.n	800b746 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b72c:	685b      	ldr	r3, [r3, #4]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d009      	beq.n	800b746 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b738:	685b      	ldr	r3, [r3, #4]
 800b73a:	687a      	ldr	r2, [r7, #4]
 800b73c:	6852      	ldr	r2, [r2, #4]
 800b73e:	b2d2      	uxtb	r2, r2
 800b740:	4611      	mov	r1, r2
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b746:	2340      	movs	r3, #64	; 0x40
 800b748:	2200      	movs	r2, #0
 800b74a:	2100      	movs	r1, #0
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f001 fa5e 	bl	800cc0e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	2201      	movs	r2, #1
 800b756:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2240      	movs	r2, #64	; 0x40
 800b75e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b762:	2340      	movs	r3, #64	; 0x40
 800b764:	2200      	movs	r2, #0
 800b766:	2180      	movs	r1, #128	; 0x80
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f001 fa50 	bl	800cc0e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2201      	movs	r2, #1
 800b772:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2240      	movs	r2, #64	; 0x40
 800b778:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800b77a:	2300      	movs	r3, #0
}
 800b77c:	4618      	mov	r0, r3
 800b77e:	3708      	adds	r7, #8
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}

0800b784 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b784:	b480      	push	{r7}
 800b786:	b083      	sub	sp, #12
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
 800b78c:	460b      	mov	r3, r1
 800b78e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	78fa      	ldrb	r2, [r7, #3]
 800b794:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b796:	2300      	movs	r3, #0
}
 800b798:	4618      	mov	r0, r3
 800b79a:	370c      	adds	r7, #12
 800b79c:	46bd      	mov	sp, r7
 800b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a2:	4770      	bx	lr

0800b7a4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b7a4:	b480      	push	{r7}
 800b7a6:	b083      	sub	sp, #12
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7b2:	b2da      	uxtb	r2, r3
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	2204      	movs	r2, #4
 800b7be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b7c2:	2300      	movs	r3, #0
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	370c      	adds	r7, #12
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b083      	sub	sp, #12
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7de:	b2db      	uxtb	r3, r3
 800b7e0:	2b04      	cmp	r3, #4
 800b7e2:	d106      	bne.n	800b7f2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b7ea:	b2da      	uxtb	r2, r3
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b7f2:	2300      	movs	r3, #0
}
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	370c      	adds	r7, #12
 800b7f8:	46bd      	mov	sp, r7
 800b7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fe:	4770      	bx	lr

0800b800 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b800:	b580      	push	{r7, lr}
 800b802:	b082      	sub	sp, #8
 800b804:	af00      	add	r7, sp, #0
 800b806:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d101      	bne.n	800b816 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800b812:	2303      	movs	r3, #3
 800b814:	e012      	b.n	800b83c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b81c:	b2db      	uxtb	r3, r3
 800b81e:	2b03      	cmp	r3, #3
 800b820:	d10b      	bne.n	800b83a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b828:	69db      	ldr	r3, [r3, #28]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d005      	beq.n	800b83a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b834:	69db      	ldr	r3, [r3, #28]
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b83a:	2300      	movs	r3, #0
}
 800b83c:	4618      	mov	r0, r3
 800b83e:	3708      	adds	r7, #8
 800b840:	46bd      	mov	sp, r7
 800b842:	bd80      	pop	{r7, pc}

0800b844 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b844:	b480      	push	{r7}
 800b846:	b087      	sub	sp, #28
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	781b      	ldrb	r3, [r3, #0]
 800b854:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	3301      	adds	r3, #1
 800b85a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	781b      	ldrb	r3, [r3, #0]
 800b860:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b862:	8a3b      	ldrh	r3, [r7, #16]
 800b864:	021b      	lsls	r3, r3, #8
 800b866:	b21a      	sxth	r2, r3
 800b868:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b86c:	4313      	orrs	r3, r2
 800b86e:	b21b      	sxth	r3, r3
 800b870:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b872:	89fb      	ldrh	r3, [r7, #14]
}
 800b874:	4618      	mov	r0, r3
 800b876:	371c      	adds	r7, #28
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b88a:	2300      	movs	r3, #0
 800b88c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b896:	2b40      	cmp	r3, #64	; 0x40
 800b898:	d005      	beq.n	800b8a6 <USBD_StdDevReq+0x26>
 800b89a:	2b40      	cmp	r3, #64	; 0x40
 800b89c:	d853      	bhi.n	800b946 <USBD_StdDevReq+0xc6>
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00b      	beq.n	800b8ba <USBD_StdDevReq+0x3a>
 800b8a2:	2b20      	cmp	r3, #32
 800b8a4:	d14f      	bne.n	800b946 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b8ac:	689b      	ldr	r3, [r3, #8]
 800b8ae:	6839      	ldr	r1, [r7, #0]
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	4798      	blx	r3
 800b8b4:	4603      	mov	r3, r0
 800b8b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b8b8:	e04a      	b.n	800b950 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	785b      	ldrb	r3, [r3, #1]
 800b8be:	2b09      	cmp	r3, #9
 800b8c0:	d83b      	bhi.n	800b93a <USBD_StdDevReq+0xba>
 800b8c2:	a201      	add	r2, pc, #4	; (adr r2, 800b8c8 <USBD_StdDevReq+0x48>)
 800b8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8c8:	0800b91d 	.word	0x0800b91d
 800b8cc:	0800b931 	.word	0x0800b931
 800b8d0:	0800b93b 	.word	0x0800b93b
 800b8d4:	0800b927 	.word	0x0800b927
 800b8d8:	0800b93b 	.word	0x0800b93b
 800b8dc:	0800b8fb 	.word	0x0800b8fb
 800b8e0:	0800b8f1 	.word	0x0800b8f1
 800b8e4:	0800b93b 	.word	0x0800b93b
 800b8e8:	0800b913 	.word	0x0800b913
 800b8ec:	0800b905 	.word	0x0800b905
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b8f0:	6839      	ldr	r1, [r7, #0]
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 f9de 	bl	800bcb4 <USBD_GetDescriptor>
          break;
 800b8f8:	e024      	b.n	800b944 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b8fa:	6839      	ldr	r1, [r7, #0]
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 fb6d 	bl	800bfdc <USBD_SetAddress>
          break;
 800b902:	e01f      	b.n	800b944 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b904:	6839      	ldr	r1, [r7, #0]
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 fbac 	bl	800c064 <USBD_SetConfig>
 800b90c:	4603      	mov	r3, r0
 800b90e:	73fb      	strb	r3, [r7, #15]
          break;
 800b910:	e018      	b.n	800b944 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b912:	6839      	ldr	r1, [r7, #0]
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 fc4b 	bl	800c1b0 <USBD_GetConfig>
          break;
 800b91a:	e013      	b.n	800b944 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b91c:	6839      	ldr	r1, [r7, #0]
 800b91e:	6878      	ldr	r0, [r7, #4]
 800b920:	f000 fc7c 	bl	800c21c <USBD_GetStatus>
          break;
 800b924:	e00e      	b.n	800b944 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b926:	6839      	ldr	r1, [r7, #0]
 800b928:	6878      	ldr	r0, [r7, #4]
 800b92a:	f000 fcab 	bl	800c284 <USBD_SetFeature>
          break;
 800b92e:	e009      	b.n	800b944 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b930:	6839      	ldr	r1, [r7, #0]
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 fcba 	bl	800c2ac <USBD_ClrFeature>
          break;
 800b938:	e004      	b.n	800b944 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800b93a:	6839      	ldr	r1, [r7, #0]
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 fd11 	bl	800c364 <USBD_CtlError>
          break;
 800b942:	bf00      	nop
      }
      break;
 800b944:	e004      	b.n	800b950 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800b946:	6839      	ldr	r1, [r7, #0]
 800b948:	6878      	ldr	r0, [r7, #4]
 800b94a:	f000 fd0b 	bl	800c364 <USBD_CtlError>
      break;
 800b94e:	bf00      	nop
  }

  return ret;
 800b950:	7bfb      	ldrb	r3, [r7, #15]
}
 800b952:	4618      	mov	r0, r3
 800b954:	3710      	adds	r7, #16
 800b956:	46bd      	mov	sp, r7
 800b958:	bd80      	pop	{r7, pc}
 800b95a:	bf00      	nop

0800b95c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b966:	2300      	movs	r3, #0
 800b968:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b972:	2b40      	cmp	r3, #64	; 0x40
 800b974:	d005      	beq.n	800b982 <USBD_StdItfReq+0x26>
 800b976:	2b40      	cmp	r3, #64	; 0x40
 800b978:	d82f      	bhi.n	800b9da <USBD_StdItfReq+0x7e>
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d001      	beq.n	800b982 <USBD_StdItfReq+0x26>
 800b97e:	2b20      	cmp	r3, #32
 800b980:	d12b      	bne.n	800b9da <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	3b01      	subs	r3, #1
 800b98c:	2b02      	cmp	r3, #2
 800b98e:	d81d      	bhi.n	800b9cc <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	889b      	ldrh	r3, [r3, #4]
 800b994:	b2db      	uxtb	r3, r3
 800b996:	2b01      	cmp	r3, #1
 800b998:	d813      	bhi.n	800b9c2 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b9a0:	689b      	ldr	r3, [r3, #8]
 800b9a2:	6839      	ldr	r1, [r7, #0]
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	4798      	blx	r3
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	88db      	ldrh	r3, [r3, #6]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d110      	bne.n	800b9d6 <USBD_StdItfReq+0x7a>
 800b9b4:	7bfb      	ldrb	r3, [r7, #15]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d10d      	bne.n	800b9d6 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	f000 fd9d 	bl	800c4fa <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b9c0:	e009      	b.n	800b9d6 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b9c2:	6839      	ldr	r1, [r7, #0]
 800b9c4:	6878      	ldr	r0, [r7, #4]
 800b9c6:	f000 fccd 	bl	800c364 <USBD_CtlError>
          break;
 800b9ca:	e004      	b.n	800b9d6 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b9cc:	6839      	ldr	r1, [r7, #0]
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 fcc8 	bl	800c364 <USBD_CtlError>
          break;
 800b9d4:	e000      	b.n	800b9d8 <USBD_StdItfReq+0x7c>
          break;
 800b9d6:	bf00      	nop
      }
      break;
 800b9d8:	e004      	b.n	800b9e4 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b9da:	6839      	ldr	r1, [r7, #0]
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 fcc1 	bl	800c364 <USBD_CtlError>
      break;
 800b9e2:	bf00      	nop
  }

  return ret;
 800b9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3710      	adds	r7, #16
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b084      	sub	sp, #16
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	6078      	str	r0, [r7, #4]
 800b9f6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	889b      	ldrh	r3, [r3, #4]
 800ba00:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba0a:	2b40      	cmp	r3, #64	; 0x40
 800ba0c:	d007      	beq.n	800ba1e <USBD_StdEPReq+0x30>
 800ba0e:	2b40      	cmp	r3, #64	; 0x40
 800ba10:	f200 8145 	bhi.w	800bc9e <USBD_StdEPReq+0x2b0>
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d00c      	beq.n	800ba32 <USBD_StdEPReq+0x44>
 800ba18:	2b20      	cmp	r3, #32
 800ba1a:	f040 8140 	bne.w	800bc9e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba24:	689b      	ldr	r3, [r3, #8]
 800ba26:	6839      	ldr	r1, [r7, #0]
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	4798      	blx	r3
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	73fb      	strb	r3, [r7, #15]
      break;
 800ba30:	e13a      	b.n	800bca8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba32:	683b      	ldr	r3, [r7, #0]
 800ba34:	785b      	ldrb	r3, [r3, #1]
 800ba36:	2b03      	cmp	r3, #3
 800ba38:	d007      	beq.n	800ba4a <USBD_StdEPReq+0x5c>
 800ba3a:	2b03      	cmp	r3, #3
 800ba3c:	f300 8129 	bgt.w	800bc92 <USBD_StdEPReq+0x2a4>
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d07f      	beq.n	800bb44 <USBD_StdEPReq+0x156>
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d03c      	beq.n	800bac2 <USBD_StdEPReq+0xd4>
 800ba48:	e123      	b.n	800bc92 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	2b02      	cmp	r3, #2
 800ba54:	d002      	beq.n	800ba5c <USBD_StdEPReq+0x6e>
 800ba56:	2b03      	cmp	r3, #3
 800ba58:	d016      	beq.n	800ba88 <USBD_StdEPReq+0x9a>
 800ba5a:	e02c      	b.n	800bab6 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba5c:	7bbb      	ldrb	r3, [r7, #14]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d00d      	beq.n	800ba7e <USBD_StdEPReq+0x90>
 800ba62:	7bbb      	ldrb	r3, [r7, #14]
 800ba64:	2b80      	cmp	r3, #128	; 0x80
 800ba66:	d00a      	beq.n	800ba7e <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba68:	7bbb      	ldrb	r3, [r7, #14]
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f001 f913 	bl	800cc98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba72:	2180      	movs	r1, #128	; 0x80
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f001 f90f 	bl	800cc98 <USBD_LL_StallEP>
 800ba7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba7c:	e020      	b.n	800bac0 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ba7e:	6839      	ldr	r1, [r7, #0]
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 fc6f 	bl	800c364 <USBD_CtlError>
              break;
 800ba86:	e01b      	b.n	800bac0 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	885b      	ldrh	r3, [r3, #2]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d10e      	bne.n	800baae <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ba90:	7bbb      	ldrb	r3, [r7, #14]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d00b      	beq.n	800baae <USBD_StdEPReq+0xc0>
 800ba96:	7bbb      	ldrb	r3, [r7, #14]
 800ba98:	2b80      	cmp	r3, #128	; 0x80
 800ba9a:	d008      	beq.n	800baae <USBD_StdEPReq+0xc0>
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	88db      	ldrh	r3, [r3, #6]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d104      	bne.n	800baae <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800baa4:	7bbb      	ldrb	r3, [r7, #14]
 800baa6:	4619      	mov	r1, r3
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f001 f8f5 	bl	800cc98 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 fd23 	bl	800c4fa <USBD_CtlSendStatus>

              break;
 800bab4:	e004      	b.n	800bac0 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800bab6:	6839      	ldr	r1, [r7, #0]
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f000 fc53 	bl	800c364 <USBD_CtlError>
              break;
 800babe:	bf00      	nop
          }
          break;
 800bac0:	e0ec      	b.n	800bc9c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bac8:	b2db      	uxtb	r3, r3
 800baca:	2b02      	cmp	r3, #2
 800bacc:	d002      	beq.n	800bad4 <USBD_StdEPReq+0xe6>
 800bace:	2b03      	cmp	r3, #3
 800bad0:	d016      	beq.n	800bb00 <USBD_StdEPReq+0x112>
 800bad2:	e030      	b.n	800bb36 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bad4:	7bbb      	ldrb	r3, [r7, #14]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00d      	beq.n	800baf6 <USBD_StdEPReq+0x108>
 800bada:	7bbb      	ldrb	r3, [r7, #14]
 800badc:	2b80      	cmp	r3, #128	; 0x80
 800bade:	d00a      	beq.n	800baf6 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bae0:	7bbb      	ldrb	r3, [r7, #14]
 800bae2:	4619      	mov	r1, r3
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f001 f8d7 	bl	800cc98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800baea:	2180      	movs	r1, #128	; 0x80
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f001 f8d3 	bl	800cc98 <USBD_LL_StallEP>
 800baf2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800baf4:	e025      	b.n	800bb42 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800baf6:	6839      	ldr	r1, [r7, #0]
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fc33 	bl	800c364 <USBD_CtlError>
              break;
 800bafe:	e020      	b.n	800bb42 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	885b      	ldrh	r3, [r3, #2]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d11b      	bne.n	800bb40 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bb08:	7bbb      	ldrb	r3, [r7, #14]
 800bb0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d004      	beq.n	800bb1c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bb12:	7bbb      	ldrb	r3, [r7, #14]
 800bb14:	4619      	mov	r1, r3
 800bb16:	6878      	ldr	r0, [r7, #4]
 800bb18:	f001 f8dd 	bl	800ccd6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bb1c:	6878      	ldr	r0, [r7, #4]
 800bb1e:	f000 fcec 	bl	800c4fa <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bb28:	689b      	ldr	r3, [r3, #8]
 800bb2a:	6839      	ldr	r1, [r7, #0]
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	4798      	blx	r3
 800bb30:	4603      	mov	r3, r0
 800bb32:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800bb34:	e004      	b.n	800bb40 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800bb36:	6839      	ldr	r1, [r7, #0]
 800bb38:	6878      	ldr	r0, [r7, #4]
 800bb3a:	f000 fc13 	bl	800c364 <USBD_CtlError>
              break;
 800bb3e:	e000      	b.n	800bb42 <USBD_StdEPReq+0x154>
              break;
 800bb40:	bf00      	nop
          }
          break;
 800bb42:	e0ab      	b.n	800bc9c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb4a:	b2db      	uxtb	r3, r3
 800bb4c:	2b02      	cmp	r3, #2
 800bb4e:	d002      	beq.n	800bb56 <USBD_StdEPReq+0x168>
 800bb50:	2b03      	cmp	r3, #3
 800bb52:	d032      	beq.n	800bbba <USBD_StdEPReq+0x1cc>
 800bb54:	e097      	b.n	800bc86 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb56:	7bbb      	ldrb	r3, [r7, #14]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d007      	beq.n	800bb6c <USBD_StdEPReq+0x17e>
 800bb5c:	7bbb      	ldrb	r3, [r7, #14]
 800bb5e:	2b80      	cmp	r3, #128	; 0x80
 800bb60:	d004      	beq.n	800bb6c <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800bb62:	6839      	ldr	r1, [r7, #0]
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 fbfd 	bl	800c364 <USBD_CtlError>
                break;
 800bb6a:	e091      	b.n	800bc90 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb6c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	da0b      	bge.n	800bb8c <USBD_StdEPReq+0x19e>
 800bb74:	7bbb      	ldrb	r3, [r7, #14]
 800bb76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	009b      	lsls	r3, r3, #2
 800bb7e:	4413      	add	r3, r2
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	3310      	adds	r3, #16
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	4413      	add	r3, r2
 800bb88:	3304      	adds	r3, #4
 800bb8a:	e00b      	b.n	800bba4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb8c:	7bbb      	ldrb	r3, [r7, #14]
 800bb8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb92:	4613      	mov	r3, r2
 800bb94:	009b      	lsls	r3, r3, #2
 800bb96:	4413      	add	r3, r2
 800bb98:	009b      	lsls	r3, r3, #2
 800bb9a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bb9e:	687a      	ldr	r2, [r7, #4]
 800bba0:	4413      	add	r3, r2
 800bba2:	3304      	adds	r3, #4
 800bba4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bba6:	68bb      	ldr	r3, [r7, #8]
 800bba8:	2200      	movs	r2, #0
 800bbaa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	2202      	movs	r2, #2
 800bbb0:	4619      	mov	r1, r3
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 fc47 	bl	800c446 <USBD_CtlSendData>
              break;
 800bbb8:	e06a      	b.n	800bc90 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bbba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	da11      	bge.n	800bbe6 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bbc2:	7bbb      	ldrb	r3, [r7, #14]
 800bbc4:	f003 020f 	and.w	r2, r3, #15
 800bbc8:	6879      	ldr	r1, [r7, #4]
 800bbca:	4613      	mov	r3, r2
 800bbcc:	009b      	lsls	r3, r3, #2
 800bbce:	4413      	add	r3, r2
 800bbd0:	009b      	lsls	r3, r3, #2
 800bbd2:	440b      	add	r3, r1
 800bbd4:	3324      	adds	r3, #36	; 0x24
 800bbd6:	881b      	ldrh	r3, [r3, #0]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d117      	bne.n	800bc0c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bbdc:	6839      	ldr	r1, [r7, #0]
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 fbc0 	bl	800c364 <USBD_CtlError>
                  break;
 800bbe4:	e054      	b.n	800bc90 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bbe6:	7bbb      	ldrb	r3, [r7, #14]
 800bbe8:	f003 020f 	and.w	r2, r3, #15
 800bbec:	6879      	ldr	r1, [r7, #4]
 800bbee:	4613      	mov	r3, r2
 800bbf0:	009b      	lsls	r3, r3, #2
 800bbf2:	4413      	add	r3, r2
 800bbf4:	009b      	lsls	r3, r3, #2
 800bbf6:	440b      	add	r3, r1
 800bbf8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bbfc:	881b      	ldrh	r3, [r3, #0]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d104      	bne.n	800bc0c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800bc02:	6839      	ldr	r1, [r7, #0]
 800bc04:	6878      	ldr	r0, [r7, #4]
 800bc06:	f000 fbad 	bl	800c364 <USBD_CtlError>
                  break;
 800bc0a:	e041      	b.n	800bc90 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc0c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	da0b      	bge.n	800bc2c <USBD_StdEPReq+0x23e>
 800bc14:	7bbb      	ldrb	r3, [r7, #14]
 800bc16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	009b      	lsls	r3, r3, #2
 800bc1e:	4413      	add	r3, r2
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	3310      	adds	r3, #16
 800bc24:	687a      	ldr	r2, [r7, #4]
 800bc26:	4413      	add	r3, r2
 800bc28:	3304      	adds	r3, #4
 800bc2a:	e00b      	b.n	800bc44 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc2c:	7bbb      	ldrb	r3, [r7, #14]
 800bc2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc32:	4613      	mov	r3, r2
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	4413      	add	r3, r2
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	4413      	add	r3, r2
 800bc42:	3304      	adds	r3, #4
 800bc44:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bc46:	7bbb      	ldrb	r3, [r7, #14]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d002      	beq.n	800bc52 <USBD_StdEPReq+0x264>
 800bc4c:	7bbb      	ldrb	r3, [r7, #14]
 800bc4e:	2b80      	cmp	r3, #128	; 0x80
 800bc50:	d103      	bne.n	800bc5a <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	2200      	movs	r2, #0
 800bc56:	601a      	str	r2, [r3, #0]
 800bc58:	e00e      	b.n	800bc78 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bc5a:	7bbb      	ldrb	r3, [r7, #14]
 800bc5c:	4619      	mov	r1, r3
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f001 f858 	bl	800cd14 <USBD_LL_IsStallEP>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d003      	beq.n	800bc72 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800bc6a:	68bb      	ldr	r3, [r7, #8]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	601a      	str	r2, [r3, #0]
 800bc70:	e002      	b.n	800bc78 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	2200      	movs	r2, #0
 800bc76:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc78:	68bb      	ldr	r3, [r7, #8]
 800bc7a:	2202      	movs	r2, #2
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 fbe1 	bl	800c446 <USBD_CtlSendData>
              break;
 800bc84:	e004      	b.n	800bc90 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800bc86:	6839      	ldr	r1, [r7, #0]
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f000 fb6b 	bl	800c364 <USBD_CtlError>
              break;
 800bc8e:	bf00      	nop
          }
          break;
 800bc90:	e004      	b.n	800bc9c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800bc92:	6839      	ldr	r1, [r7, #0]
 800bc94:	6878      	ldr	r0, [r7, #4]
 800bc96:	f000 fb65 	bl	800c364 <USBD_CtlError>
          break;
 800bc9a:	bf00      	nop
      }
      break;
 800bc9c:	e004      	b.n	800bca8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800bc9e:	6839      	ldr	r1, [r7, #0]
 800bca0:	6878      	ldr	r0, [r7, #4]
 800bca2:	f000 fb5f 	bl	800c364 <USBD_CtlError>
      break;
 800bca6:	bf00      	nop
  }

  return ret;
 800bca8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3710      	adds	r7, #16
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}
	...

0800bcb4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcb4:	b580      	push	{r7, lr}
 800bcb6:	b084      	sub	sp, #16
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	885b      	ldrh	r3, [r3, #2]
 800bcce:	0a1b      	lsrs	r3, r3, #8
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	3b01      	subs	r3, #1
 800bcd4:	2b0e      	cmp	r3, #14
 800bcd6:	f200 8152 	bhi.w	800bf7e <USBD_GetDescriptor+0x2ca>
 800bcda:	a201      	add	r2, pc, #4	; (adr r2, 800bce0 <USBD_GetDescriptor+0x2c>)
 800bcdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bce0:	0800bd51 	.word	0x0800bd51
 800bce4:	0800bd69 	.word	0x0800bd69
 800bce8:	0800bda9 	.word	0x0800bda9
 800bcec:	0800bf7f 	.word	0x0800bf7f
 800bcf0:	0800bf7f 	.word	0x0800bf7f
 800bcf4:	0800bf1f 	.word	0x0800bf1f
 800bcf8:	0800bf4b 	.word	0x0800bf4b
 800bcfc:	0800bf7f 	.word	0x0800bf7f
 800bd00:	0800bf7f 	.word	0x0800bf7f
 800bd04:	0800bf7f 	.word	0x0800bf7f
 800bd08:	0800bf7f 	.word	0x0800bf7f
 800bd0c:	0800bf7f 	.word	0x0800bf7f
 800bd10:	0800bf7f 	.word	0x0800bf7f
 800bd14:	0800bf7f 	.word	0x0800bf7f
 800bd18:	0800bd1d 	.word	0x0800bd1d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd22:	69db      	ldr	r3, [r3, #28]
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d00b      	beq.n	800bd40 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd2e:	69db      	ldr	r3, [r3, #28]
 800bd30:	687a      	ldr	r2, [r7, #4]
 800bd32:	7c12      	ldrb	r2, [r2, #16]
 800bd34:	f107 0108 	add.w	r1, r7, #8
 800bd38:	4610      	mov	r0, r2
 800bd3a:	4798      	blx	r3
 800bd3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bd3e:	e126      	b.n	800bf8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bd40:	6839      	ldr	r1, [r7, #0]
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f000 fb0e 	bl	800c364 <USBD_CtlError>
        err++;
 800bd48:	7afb      	ldrb	r3, [r7, #11]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	72fb      	strb	r3, [r7, #11]
      break;
 800bd4e:	e11e      	b.n	800bf8e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	687a      	ldr	r2, [r7, #4]
 800bd5a:	7c12      	ldrb	r2, [r2, #16]
 800bd5c:	f107 0108 	add.w	r1, r7, #8
 800bd60:	4610      	mov	r0, r2
 800bd62:	4798      	blx	r3
 800bd64:	60f8      	str	r0, [r7, #12]
      break;
 800bd66:	e112      	b.n	800bf8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	7c1b      	ldrb	r3, [r3, #16]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d10d      	bne.n	800bd8c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bd78:	f107 0208 	add.w	r2, r7, #8
 800bd7c:	4610      	mov	r0, r2
 800bd7e:	4798      	blx	r3
 800bd80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	3301      	adds	r3, #1
 800bd86:	2202      	movs	r2, #2
 800bd88:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bd8a:	e100      	b.n	800bf8e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bd92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd94:	f107 0208 	add.w	r2, r7, #8
 800bd98:	4610      	mov	r0, r2
 800bd9a:	4798      	blx	r3
 800bd9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	3301      	adds	r3, #1
 800bda2:	2202      	movs	r2, #2
 800bda4:	701a      	strb	r2, [r3, #0]
      break;
 800bda6:	e0f2      	b.n	800bf8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	885b      	ldrh	r3, [r3, #2]
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	2b05      	cmp	r3, #5
 800bdb0:	f200 80ac 	bhi.w	800bf0c <USBD_GetDescriptor+0x258>
 800bdb4:	a201      	add	r2, pc, #4	; (adr r2, 800bdbc <USBD_GetDescriptor+0x108>)
 800bdb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdba:	bf00      	nop
 800bdbc:	0800bdd5 	.word	0x0800bdd5
 800bdc0:	0800be09 	.word	0x0800be09
 800bdc4:	0800be3d 	.word	0x0800be3d
 800bdc8:	0800be71 	.word	0x0800be71
 800bdcc:	0800bea5 	.word	0x0800bea5
 800bdd0:	0800bed9 	.word	0x0800bed9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bdda:	685b      	ldr	r3, [r3, #4]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d00b      	beq.n	800bdf8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bde6:	685b      	ldr	r3, [r3, #4]
 800bde8:	687a      	ldr	r2, [r7, #4]
 800bdea:	7c12      	ldrb	r2, [r2, #16]
 800bdec:	f107 0108 	add.w	r1, r7, #8
 800bdf0:	4610      	mov	r0, r2
 800bdf2:	4798      	blx	r3
 800bdf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdf6:	e091      	b.n	800bf1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bdf8:	6839      	ldr	r1, [r7, #0]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 fab2 	bl	800c364 <USBD_CtlError>
            err++;
 800be00:	7afb      	ldrb	r3, [r7, #11]
 800be02:	3301      	adds	r3, #1
 800be04:	72fb      	strb	r3, [r7, #11]
          break;
 800be06:	e089      	b.n	800bf1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be0e:	689b      	ldr	r3, [r3, #8]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d00b      	beq.n	800be2c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be1a:	689b      	ldr	r3, [r3, #8]
 800be1c:	687a      	ldr	r2, [r7, #4]
 800be1e:	7c12      	ldrb	r2, [r2, #16]
 800be20:	f107 0108 	add.w	r1, r7, #8
 800be24:	4610      	mov	r0, r2
 800be26:	4798      	blx	r3
 800be28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be2a:	e077      	b.n	800bf1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be2c:	6839      	ldr	r1, [r7, #0]
 800be2e:	6878      	ldr	r0, [r7, #4]
 800be30:	f000 fa98 	bl	800c364 <USBD_CtlError>
            err++;
 800be34:	7afb      	ldrb	r3, [r7, #11]
 800be36:	3301      	adds	r3, #1
 800be38:	72fb      	strb	r3, [r7, #11]
          break;
 800be3a:	e06f      	b.n	800bf1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be42:	68db      	ldr	r3, [r3, #12]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d00b      	beq.n	800be60 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be4e:	68db      	ldr	r3, [r3, #12]
 800be50:	687a      	ldr	r2, [r7, #4]
 800be52:	7c12      	ldrb	r2, [r2, #16]
 800be54:	f107 0108 	add.w	r1, r7, #8
 800be58:	4610      	mov	r0, r2
 800be5a:	4798      	blx	r3
 800be5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be5e:	e05d      	b.n	800bf1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be60:	6839      	ldr	r1, [r7, #0]
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 fa7e 	bl	800c364 <USBD_CtlError>
            err++;
 800be68:	7afb      	ldrb	r3, [r7, #11]
 800be6a:	3301      	adds	r3, #1
 800be6c:	72fb      	strb	r3, [r7, #11]
          break;
 800be6e:	e055      	b.n	800bf1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be76:	691b      	ldr	r3, [r3, #16]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d00b      	beq.n	800be94 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800be82:	691b      	ldr	r3, [r3, #16]
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	7c12      	ldrb	r2, [r2, #16]
 800be88:	f107 0108 	add.w	r1, r7, #8
 800be8c:	4610      	mov	r0, r2
 800be8e:	4798      	blx	r3
 800be90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be92:	e043      	b.n	800bf1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800be94:	6839      	ldr	r1, [r7, #0]
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fa64 	bl	800c364 <USBD_CtlError>
            err++;
 800be9c:	7afb      	ldrb	r3, [r7, #11]
 800be9e:	3301      	adds	r3, #1
 800bea0:	72fb      	strb	r3, [r7, #11]
          break;
 800bea2:	e03b      	b.n	800bf1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beaa:	695b      	ldr	r3, [r3, #20]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d00b      	beq.n	800bec8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beb6:	695b      	ldr	r3, [r3, #20]
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	7c12      	ldrb	r2, [r2, #16]
 800bebc:	f107 0108 	add.w	r1, r7, #8
 800bec0:	4610      	mov	r0, r2
 800bec2:	4798      	blx	r3
 800bec4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bec6:	e029      	b.n	800bf1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bec8:	6839      	ldr	r1, [r7, #0]
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 fa4a 	bl	800c364 <USBD_CtlError>
            err++;
 800bed0:	7afb      	ldrb	r3, [r7, #11]
 800bed2:	3301      	adds	r3, #1
 800bed4:	72fb      	strb	r3, [r7, #11]
          break;
 800bed6:	e021      	b.n	800bf1c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bede:	699b      	ldr	r3, [r3, #24]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d00b      	beq.n	800befc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800beea:	699b      	ldr	r3, [r3, #24]
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	7c12      	ldrb	r2, [r2, #16]
 800bef0:	f107 0108 	add.w	r1, r7, #8
 800bef4:	4610      	mov	r0, r2
 800bef6:	4798      	blx	r3
 800bef8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800befa:	e00f      	b.n	800bf1c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800befc:	6839      	ldr	r1, [r7, #0]
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 fa30 	bl	800c364 <USBD_CtlError>
            err++;
 800bf04:	7afb      	ldrb	r3, [r7, #11]
 800bf06:	3301      	adds	r3, #1
 800bf08:	72fb      	strb	r3, [r7, #11]
          break;
 800bf0a:	e007      	b.n	800bf1c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 fa28 	bl	800c364 <USBD_CtlError>
          err++;
 800bf14:	7afb      	ldrb	r3, [r7, #11]
 800bf16:	3301      	adds	r3, #1
 800bf18:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800bf1a:	bf00      	nop
      }
      break;
 800bf1c:	e037      	b.n	800bf8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	7c1b      	ldrb	r3, [r3, #16]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d109      	bne.n	800bf3a <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf2e:	f107 0208 	add.w	r2, r7, #8
 800bf32:	4610      	mov	r0, r2
 800bf34:	4798      	blx	r3
 800bf36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf38:	e029      	b.n	800bf8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bf3a:	6839      	ldr	r1, [r7, #0]
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f000 fa11 	bl	800c364 <USBD_CtlError>
        err++;
 800bf42:	7afb      	ldrb	r3, [r7, #11]
 800bf44:	3301      	adds	r3, #1
 800bf46:	72fb      	strb	r3, [r7, #11]
      break;
 800bf48:	e021      	b.n	800bf8e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	7c1b      	ldrb	r3, [r3, #16]
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d10d      	bne.n	800bf6e <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bf58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf5a:	f107 0208 	add.w	r2, r7, #8
 800bf5e:	4610      	mov	r0, r2
 800bf60:	4798      	blx	r3
 800bf62:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	3301      	adds	r3, #1
 800bf68:	2207      	movs	r2, #7
 800bf6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf6c:	e00f      	b.n	800bf8e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bf6e:	6839      	ldr	r1, [r7, #0]
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 f9f7 	bl	800c364 <USBD_CtlError>
        err++;
 800bf76:	7afb      	ldrb	r3, [r7, #11]
 800bf78:	3301      	adds	r3, #1
 800bf7a:	72fb      	strb	r3, [r7, #11]
      break;
 800bf7c:	e007      	b.n	800bf8e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bf7e:	6839      	ldr	r1, [r7, #0]
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 f9ef 	bl	800c364 <USBD_CtlError>
      err++;
 800bf86:	7afb      	ldrb	r3, [r7, #11]
 800bf88:	3301      	adds	r3, #1
 800bf8a:	72fb      	strb	r3, [r7, #11]
      break;
 800bf8c:	bf00      	nop
  }

  if (err != 0U)
 800bf8e:	7afb      	ldrb	r3, [r7, #11]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d11e      	bne.n	800bfd2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	88db      	ldrh	r3, [r3, #6]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d016      	beq.n	800bfca <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bf9c:	893b      	ldrh	r3, [r7, #8]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00e      	beq.n	800bfc0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	88da      	ldrh	r2, [r3, #6]
 800bfa6:	893b      	ldrh	r3, [r7, #8]
 800bfa8:	4293      	cmp	r3, r2
 800bfaa:	bf28      	it	cs
 800bfac:	4613      	movcs	r3, r2
 800bfae:	b29b      	uxth	r3, r3
 800bfb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bfb2:	893b      	ldrh	r3, [r7, #8]
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	68f9      	ldr	r1, [r7, #12]
 800bfb8:	6878      	ldr	r0, [r7, #4]
 800bfba:	f000 fa44 	bl	800c446 <USBD_CtlSendData>
 800bfbe:	e009      	b.n	800bfd4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bfc0:	6839      	ldr	r1, [r7, #0]
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f000 f9ce 	bl	800c364 <USBD_CtlError>
 800bfc8:	e004      	b.n	800bfd4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bfca:	6878      	ldr	r0, [r7, #4]
 800bfcc:	f000 fa95 	bl	800c4fa <USBD_CtlSendStatus>
 800bfd0:	e000      	b.n	800bfd4 <USBD_GetDescriptor+0x320>
    return;
 800bfd2:	bf00      	nop
  }
}
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}
 800bfda:	bf00      	nop

0800bfdc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	889b      	ldrh	r3, [r3, #4]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d131      	bne.n	800c052 <USBD_SetAddress+0x76>
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	88db      	ldrh	r3, [r3, #6]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d12d      	bne.n	800c052 <USBD_SetAddress+0x76>
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	885b      	ldrh	r3, [r3, #2]
 800bffa:	2b7f      	cmp	r3, #127	; 0x7f
 800bffc:	d829      	bhi.n	800c052 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	885b      	ldrh	r3, [r3, #2]
 800c002:	b2db      	uxtb	r3, r3
 800c004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c008:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c010:	b2db      	uxtb	r3, r3
 800c012:	2b03      	cmp	r3, #3
 800c014:	d104      	bne.n	800c020 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c016:	6839      	ldr	r1, [r7, #0]
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f000 f9a3 	bl	800c364 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c01e:	e01d      	b.n	800c05c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	7bfa      	ldrb	r2, [r7, #15]
 800c024:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c028:	7bfb      	ldrb	r3, [r7, #15]
 800c02a:	4619      	mov	r1, r3
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f000 fe9d 	bl	800cd6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c032:	6878      	ldr	r0, [r7, #4]
 800c034:	f000 fa61 	bl	800c4fa <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c038:	7bfb      	ldrb	r3, [r7, #15]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d004      	beq.n	800c048 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2202      	movs	r2, #2
 800c042:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c046:	e009      	b.n	800c05c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2201      	movs	r2, #1
 800c04c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c050:	e004      	b.n	800c05c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c052:	6839      	ldr	r1, [r7, #0]
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 f985 	bl	800c364 <USBD_CtlError>
  }
}
 800c05a:	bf00      	nop
 800c05c:	bf00      	nop
 800c05e:	3710      	adds	r7, #16
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c06e:	2300      	movs	r3, #0
 800c070:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	885b      	ldrh	r3, [r3, #2]
 800c076:	b2da      	uxtb	r2, r3
 800c078:	4b4c      	ldr	r3, [pc, #304]	; (800c1ac <USBD_SetConfig+0x148>)
 800c07a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c07c:	4b4b      	ldr	r3, [pc, #300]	; (800c1ac <USBD_SetConfig+0x148>)
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	2b01      	cmp	r3, #1
 800c082:	d905      	bls.n	800c090 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c084:	6839      	ldr	r1, [r7, #0]
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 f96c 	bl	800c364 <USBD_CtlError>
    return USBD_FAIL;
 800c08c:	2303      	movs	r3, #3
 800c08e:	e088      	b.n	800c1a2 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c096:	b2db      	uxtb	r3, r3
 800c098:	2b02      	cmp	r3, #2
 800c09a:	d002      	beq.n	800c0a2 <USBD_SetConfig+0x3e>
 800c09c:	2b03      	cmp	r3, #3
 800c09e:	d025      	beq.n	800c0ec <USBD_SetConfig+0x88>
 800c0a0:	e071      	b.n	800c186 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c0a2:	4b42      	ldr	r3, [pc, #264]	; (800c1ac <USBD_SetConfig+0x148>)
 800c0a4:	781b      	ldrb	r3, [r3, #0]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d01c      	beq.n	800c0e4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800c0aa:	4b40      	ldr	r3, [pc, #256]	; (800c1ac <USBD_SetConfig+0x148>)
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c0b4:	4b3d      	ldr	r3, [pc, #244]	; (800c1ac <USBD_SetConfig+0x148>)
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f7ff f992 	bl	800b3e4 <USBD_SetClassConfig>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c0c4:	7bfb      	ldrb	r3, [r7, #15]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d004      	beq.n	800c0d4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800c0ca:	6839      	ldr	r1, [r7, #0]
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 f949 	bl	800c364 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c0d2:	e065      	b.n	800c1a0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c0d4:	6878      	ldr	r0, [r7, #4]
 800c0d6:	f000 fa10 	bl	800c4fa <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	2203      	movs	r2, #3
 800c0de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c0e2:	e05d      	b.n	800c1a0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 fa08 	bl	800c4fa <USBD_CtlSendStatus>
      break;
 800c0ea:	e059      	b.n	800c1a0 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c0ec:	4b2f      	ldr	r3, [pc, #188]	; (800c1ac <USBD_SetConfig+0x148>)
 800c0ee:	781b      	ldrb	r3, [r3, #0]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d112      	bne.n	800c11a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2202      	movs	r2, #2
 800c0f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800c0fc:	4b2b      	ldr	r3, [pc, #172]	; (800c1ac <USBD_SetConfig+0x148>)
 800c0fe:	781b      	ldrb	r3, [r3, #0]
 800c100:	461a      	mov	r2, r3
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c106:	4b29      	ldr	r3, [pc, #164]	; (800c1ac <USBD_SetConfig+0x148>)
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	4619      	mov	r1, r3
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f7ff f985 	bl	800b41c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 f9f1 	bl	800c4fa <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c118:	e042      	b.n	800c1a0 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800c11a:	4b24      	ldr	r3, [pc, #144]	; (800c1ac <USBD_SetConfig+0x148>)
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	461a      	mov	r2, r3
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	429a      	cmp	r2, r3
 800c126:	d02a      	beq.n	800c17e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	685b      	ldr	r3, [r3, #4]
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	4619      	mov	r1, r3
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f7ff f973 	bl	800b41c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c136:	4b1d      	ldr	r3, [pc, #116]	; (800c1ac <USBD_SetConfig+0x148>)
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	461a      	mov	r2, r3
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c140:	4b1a      	ldr	r3, [pc, #104]	; (800c1ac <USBD_SetConfig+0x148>)
 800c142:	781b      	ldrb	r3, [r3, #0]
 800c144:	4619      	mov	r1, r3
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f7ff f94c 	bl	800b3e4 <USBD_SetClassConfig>
 800c14c:	4603      	mov	r3, r0
 800c14e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c150:	7bfb      	ldrb	r3, [r7, #15]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d00f      	beq.n	800c176 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800c156:	6839      	ldr	r1, [r7, #0]
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f000 f903 	bl	800c364 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	685b      	ldr	r3, [r3, #4]
 800c162:	b2db      	uxtb	r3, r3
 800c164:	4619      	mov	r1, r3
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f7ff f958 	bl	800b41c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2202      	movs	r2, #2
 800c170:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800c174:	e014      	b.n	800c1a0 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 f9bf 	bl	800c4fa <USBD_CtlSendStatus>
      break;
 800c17c:	e010      	b.n	800c1a0 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800c17e:	6878      	ldr	r0, [r7, #4]
 800c180:	f000 f9bb 	bl	800c4fa <USBD_CtlSendStatus>
      break;
 800c184:	e00c      	b.n	800c1a0 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 f8eb 	bl	800c364 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c18e:	4b07      	ldr	r3, [pc, #28]	; (800c1ac <USBD_SetConfig+0x148>)
 800c190:	781b      	ldrb	r3, [r3, #0]
 800c192:	4619      	mov	r1, r3
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f7ff f941 	bl	800b41c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c19a:	2303      	movs	r3, #3
 800c19c:	73fb      	strb	r3, [r7, #15]
      break;
 800c19e:	bf00      	nop
  }

  return ret;
 800c1a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3710      	adds	r7, #16
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	200044f8 	.word	0x200044f8

0800c1b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1b0:	b580      	push	{r7, lr}
 800c1b2:	b082      	sub	sp, #8
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
 800c1b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	88db      	ldrh	r3, [r3, #6]
 800c1be:	2b01      	cmp	r3, #1
 800c1c0:	d004      	beq.n	800c1cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c1c2:	6839      	ldr	r1, [r7, #0]
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f000 f8cd 	bl	800c364 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c1ca:	e023      	b.n	800c214 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1d2:	b2db      	uxtb	r3, r3
 800c1d4:	2b02      	cmp	r3, #2
 800c1d6:	dc02      	bgt.n	800c1de <USBD_GetConfig+0x2e>
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	dc03      	bgt.n	800c1e4 <USBD_GetConfig+0x34>
 800c1dc:	e015      	b.n	800c20a <USBD_GetConfig+0x5a>
 800c1de:	2b03      	cmp	r3, #3
 800c1e0:	d00b      	beq.n	800c1fa <USBD_GetConfig+0x4a>
 800c1e2:	e012      	b.n	800c20a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	3308      	adds	r3, #8
 800c1ee:	2201      	movs	r2, #1
 800c1f0:	4619      	mov	r1, r3
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	f000 f927 	bl	800c446 <USBD_CtlSendData>
        break;
 800c1f8:	e00c      	b.n	800c214 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	3304      	adds	r3, #4
 800c1fe:	2201      	movs	r2, #1
 800c200:	4619      	mov	r1, r3
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 f91f 	bl	800c446 <USBD_CtlSendData>
        break;
 800c208:	e004      	b.n	800c214 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c20a:	6839      	ldr	r1, [r7, #0]
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f000 f8a9 	bl	800c364 <USBD_CtlError>
        break;
 800c212:	bf00      	nop
}
 800c214:	bf00      	nop
 800c216:	3708      	adds	r7, #8
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b082      	sub	sp, #8
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c22c:	b2db      	uxtb	r3, r3
 800c22e:	3b01      	subs	r3, #1
 800c230:	2b02      	cmp	r3, #2
 800c232:	d81e      	bhi.n	800c272 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c234:	683b      	ldr	r3, [r7, #0]
 800c236:	88db      	ldrh	r3, [r3, #6]
 800c238:	2b02      	cmp	r3, #2
 800c23a:	d004      	beq.n	800c246 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c23c:	6839      	ldr	r1, [r7, #0]
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f000 f890 	bl	800c364 <USBD_CtlError>
        break;
 800c244:	e01a      	b.n	800c27c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	2201      	movs	r2, #1
 800c24a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800c252:	2b00      	cmp	r3, #0
 800c254:	d005      	beq.n	800c262 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	f043 0202 	orr.w	r2, r3, #2
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	330c      	adds	r3, #12
 800c266:	2202      	movs	r2, #2
 800c268:	4619      	mov	r1, r3
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 f8eb 	bl	800c446 <USBD_CtlSendData>
      break;
 800c270:	e004      	b.n	800c27c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c272:	6839      	ldr	r1, [r7, #0]
 800c274:	6878      	ldr	r0, [r7, #4]
 800c276:	f000 f875 	bl	800c364 <USBD_CtlError>
      break;
 800c27a:	bf00      	nop
  }
}
 800c27c:	bf00      	nop
 800c27e:	3708      	adds	r7, #8
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}

0800c284 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b082      	sub	sp, #8
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	885b      	ldrh	r3, [r3, #2]
 800c292:	2b01      	cmp	r3, #1
 800c294:	d106      	bne.n	800c2a4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	2201      	movs	r2, #1
 800c29a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 f92b 	bl	800c4fa <USBD_CtlSendStatus>
  }
}
 800c2a4:	bf00      	nop
 800c2a6:	3708      	adds	r7, #8
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}

0800c2ac <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	b082      	sub	sp, #8
 800c2b0:	af00      	add	r7, sp, #0
 800c2b2:	6078      	str	r0, [r7, #4]
 800c2b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2bc:	b2db      	uxtb	r3, r3
 800c2be:	3b01      	subs	r3, #1
 800c2c0:	2b02      	cmp	r3, #2
 800c2c2:	d80b      	bhi.n	800c2dc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c2c4:	683b      	ldr	r3, [r7, #0]
 800c2c6:	885b      	ldrh	r3, [r3, #2]
 800c2c8:	2b01      	cmp	r3, #1
 800c2ca:	d10c      	bne.n	800c2e6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c2d4:	6878      	ldr	r0, [r7, #4]
 800c2d6:	f000 f910 	bl	800c4fa <USBD_CtlSendStatus>
      }
      break;
 800c2da:	e004      	b.n	800c2e6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c2dc:	6839      	ldr	r1, [r7, #0]
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f000 f840 	bl	800c364 <USBD_CtlError>
      break;
 800c2e4:	e000      	b.n	800c2e8 <USBD_ClrFeature+0x3c>
      break;
 800c2e6:	bf00      	nop
  }
}
 800c2e8:	bf00      	nop
 800c2ea:	3708      	adds	r7, #8
 800c2ec:	46bd      	mov	sp, r7
 800c2ee:	bd80      	pop	{r7, pc}

0800c2f0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	b084      	sub	sp, #16
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
 800c2f8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	781a      	ldrb	r2, [r3, #0]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	3301      	adds	r3, #1
 800c30a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	781a      	ldrb	r2, [r3, #0]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	3301      	adds	r3, #1
 800c318:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c31a:	68f8      	ldr	r0, [r7, #12]
 800c31c:	f7ff fa92 	bl	800b844 <SWAPBYTE>
 800c320:	4603      	mov	r3, r0
 800c322:	461a      	mov	r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	3301      	adds	r3, #1
 800c32c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	3301      	adds	r3, #1
 800c332:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c334:	68f8      	ldr	r0, [r7, #12]
 800c336:	f7ff fa85 	bl	800b844 <SWAPBYTE>
 800c33a:	4603      	mov	r3, r0
 800c33c:	461a      	mov	r2, r3
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	3301      	adds	r3, #1
 800c346:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	3301      	adds	r3, #1
 800c34c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c34e:	68f8      	ldr	r0, [r7, #12]
 800c350:	f7ff fa78 	bl	800b844 <SWAPBYTE>
 800c354:	4603      	mov	r3, r0
 800c356:	461a      	mov	r2, r3
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	80da      	strh	r2, [r3, #6]
}
 800c35c:	bf00      	nop
 800c35e:	3710      	adds	r7, #16
 800c360:	46bd      	mov	sp, r7
 800c362:	bd80      	pop	{r7, pc}

0800c364 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b082      	sub	sp, #8
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c36e:	2180      	movs	r1, #128	; 0x80
 800c370:	6878      	ldr	r0, [r7, #4]
 800c372:	f000 fc91 	bl	800cc98 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c376:	2100      	movs	r1, #0
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 fc8d 	bl	800cc98 <USBD_LL_StallEP>
}
 800c37e:	bf00      	nop
 800c380:	3708      	adds	r7, #8
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}

0800c386 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c386:	b580      	push	{r7, lr}
 800c388:	b086      	sub	sp, #24
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	60f8      	str	r0, [r7, #12]
 800c38e:	60b9      	str	r1, [r7, #8]
 800c390:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c392:	2300      	movs	r3, #0
 800c394:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d036      	beq.n	800c40a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c3a0:	6938      	ldr	r0, [r7, #16]
 800c3a2:	f000 f836 	bl	800c412 <USBD_GetLen>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	b29b      	uxth	r3, r3
 800c3ac:	005b      	lsls	r3, r3, #1
 800c3ae:	b29a      	uxth	r2, r3
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c3b4:	7dfb      	ldrb	r3, [r7, #23]
 800c3b6:	68ba      	ldr	r2, [r7, #8]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	687a      	ldr	r2, [r7, #4]
 800c3bc:	7812      	ldrb	r2, [r2, #0]
 800c3be:	701a      	strb	r2, [r3, #0]
  idx++;
 800c3c0:	7dfb      	ldrb	r3, [r7, #23]
 800c3c2:	3301      	adds	r3, #1
 800c3c4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c3c6:	7dfb      	ldrb	r3, [r7, #23]
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	4413      	add	r3, r2
 800c3cc:	2203      	movs	r2, #3
 800c3ce:	701a      	strb	r2, [r3, #0]
  idx++;
 800c3d0:	7dfb      	ldrb	r3, [r7, #23]
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c3d6:	e013      	b.n	800c400 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c3d8:	7dfb      	ldrb	r3, [r7, #23]
 800c3da:	68ba      	ldr	r2, [r7, #8]
 800c3dc:	4413      	add	r3, r2
 800c3de:	693a      	ldr	r2, [r7, #16]
 800c3e0:	7812      	ldrb	r2, [r2, #0]
 800c3e2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c3e4:	693b      	ldr	r3, [r7, #16]
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	613b      	str	r3, [r7, #16]
    idx++;
 800c3ea:	7dfb      	ldrb	r3, [r7, #23]
 800c3ec:	3301      	adds	r3, #1
 800c3ee:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c3f0:	7dfb      	ldrb	r3, [r7, #23]
 800c3f2:	68ba      	ldr	r2, [r7, #8]
 800c3f4:	4413      	add	r3, r2
 800c3f6:	2200      	movs	r2, #0
 800c3f8:	701a      	strb	r2, [r3, #0]
    idx++;
 800c3fa:	7dfb      	ldrb	r3, [r7, #23]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c400:	693b      	ldr	r3, [r7, #16]
 800c402:	781b      	ldrb	r3, [r3, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d1e7      	bne.n	800c3d8 <USBD_GetString+0x52>
 800c408:	e000      	b.n	800c40c <USBD_GetString+0x86>
    return;
 800c40a:	bf00      	nop
  }
}
 800c40c:	3718      	adds	r7, #24
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c412:	b480      	push	{r7}
 800c414:	b085      	sub	sp, #20
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c41a:	2300      	movs	r3, #0
 800c41c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c422:	e005      	b.n	800c430 <USBD_GetLen+0x1e>
  {
    len++;
 800c424:	7bfb      	ldrb	r3, [r7, #15]
 800c426:	3301      	adds	r3, #1
 800c428:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	3301      	adds	r3, #1
 800c42e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d1f5      	bne.n	800c424 <USBD_GetLen+0x12>
  }

  return len;
 800c438:	7bfb      	ldrb	r3, [r7, #15]
}
 800c43a:	4618      	mov	r0, r3
 800c43c:	3714      	adds	r7, #20
 800c43e:	46bd      	mov	sp, r7
 800c440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c444:	4770      	bx	lr

0800c446 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c446:	b580      	push	{r7, lr}
 800c448:	b084      	sub	sp, #16
 800c44a:	af00      	add	r7, sp, #0
 800c44c:	60f8      	str	r0, [r7, #12]
 800c44e:	60b9      	str	r1, [r7, #8]
 800c450:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	2202      	movs	r2, #2
 800c456:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	687a      	ldr	r2, [r7, #4]
 800c45e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	687a      	ldr	r2, [r7, #4]
 800c464:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	68ba      	ldr	r2, [r7, #8]
 800c46a:	2100      	movs	r1, #0
 800c46c:	68f8      	ldr	r0, [r7, #12]
 800c46e:	f000 fc9c 	bl	800cdaa <USBD_LL_Transmit>

  return USBD_OK;
 800c472:	2300      	movs	r3, #0
}
 800c474:	4618      	mov	r0, r3
 800c476:	3710      	adds	r7, #16
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	60b9      	str	r1, [r7, #8]
 800c486:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	68ba      	ldr	r2, [r7, #8]
 800c48c:	2100      	movs	r1, #0
 800c48e:	68f8      	ldr	r0, [r7, #12]
 800c490:	f000 fc8b 	bl	800cdaa <USBD_LL_Transmit>

  return USBD_OK;
 800c494:	2300      	movs	r3, #0
}
 800c496:	4618      	mov	r0, r3
 800c498:	3710      	adds	r7, #16
 800c49a:	46bd      	mov	sp, r7
 800c49c:	bd80      	pop	{r7, pc}

0800c49e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c49e:	b580      	push	{r7, lr}
 800c4a0:	b084      	sub	sp, #16
 800c4a2:	af00      	add	r7, sp, #0
 800c4a4:	60f8      	str	r0, [r7, #12]
 800c4a6:	60b9      	str	r1, [r7, #8]
 800c4a8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c4aa:	68fb      	ldr	r3, [r7, #12]
 800c4ac:	2203      	movs	r2, #3
 800c4ae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c4b2:	68fb      	ldr	r3, [r7, #12]
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	687a      	ldr	r2, [r7, #4]
 800c4be:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	68ba      	ldr	r2, [r7, #8]
 800c4c6:	2100      	movs	r1, #0
 800c4c8:	68f8      	ldr	r0, [r7, #12]
 800c4ca:	f000 fc8f 	bl	800cdec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4ce:	2300      	movs	r3, #0
}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3710      	adds	r7, #16
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	68ba      	ldr	r2, [r7, #8]
 800c4e8:	2100      	movs	r1, #0
 800c4ea:	68f8      	ldr	r0, [r7, #12]
 800c4ec:	f000 fc7e 	bl	800cdec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4f0:	2300      	movs	r3, #0
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3710      	adds	r7, #16
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}

0800c4fa <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c4fa:	b580      	push	{r7, lr}
 800c4fc:	b082      	sub	sp, #8
 800c4fe:	af00      	add	r7, sp, #0
 800c500:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2204      	movs	r2, #4
 800c506:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c50a:	2300      	movs	r3, #0
 800c50c:	2200      	movs	r2, #0
 800c50e:	2100      	movs	r1, #0
 800c510:	6878      	ldr	r0, [r7, #4]
 800c512:	f000 fc4a 	bl	800cdaa <USBD_LL_Transmit>

  return USBD_OK;
 800c516:	2300      	movs	r3, #0
}
 800c518:	4618      	mov	r0, r3
 800c51a:	3708      	adds	r7, #8
 800c51c:	46bd      	mov	sp, r7
 800c51e:	bd80      	pop	{r7, pc}

0800c520 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c520:	b580      	push	{r7, lr}
 800c522:	b082      	sub	sp, #8
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2205      	movs	r2, #5
 800c52c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c530:	2300      	movs	r3, #0
 800c532:	2200      	movs	r2, #0
 800c534:	2100      	movs	r1, #0
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f000 fc58 	bl	800cdec <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c53c:	2300      	movs	r3, #0
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3708      	adds	r7, #8
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}
	...

0800c548 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800c548:	b580      	push	{r7, lr}
 800c54a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800c54c:	2200      	movs	r2, #0
 800c54e:	4912      	ldr	r1, [pc, #72]	; (800c598 <MX_USB_Device_Init+0x50>)
 800c550:	4812      	ldr	r0, [pc, #72]	; (800c59c <MX_USB_Device_Init+0x54>)
 800c552:	f7fe fed9 	bl	800b308 <USBD_Init>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d001      	beq.n	800c560 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800c55c:	f7f4 fe9e 	bl	800129c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800c560:	490f      	ldr	r1, [pc, #60]	; (800c5a0 <MX_USB_Device_Init+0x58>)
 800c562:	480e      	ldr	r0, [pc, #56]	; (800c59c <MX_USB_Device_Init+0x54>)
 800c564:	f7fe ff00 	bl	800b368 <USBD_RegisterClass>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d001      	beq.n	800c572 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800c56e:	f7f4 fe95 	bl	800129c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800c572:	490c      	ldr	r1, [pc, #48]	; (800c5a4 <MX_USB_Device_Init+0x5c>)
 800c574:	4809      	ldr	r0, [pc, #36]	; (800c59c <MX_USB_Device_Init+0x54>)
 800c576:	f7fe fe51 	bl	800b21c <USBD_CDC_RegisterInterface>
 800c57a:	4603      	mov	r3, r0
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d001      	beq.n	800c584 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800c580:	f7f4 fe8c 	bl	800129c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800c584:	4805      	ldr	r0, [pc, #20]	; (800c59c <MX_USB_Device_Init+0x54>)
 800c586:	f7fe ff16 	bl	800b3b6 <USBD_Start>
 800c58a:	4603      	mov	r3, r0
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d001      	beq.n	800c594 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800c590:	f7f4 fe84 	bl	800129c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800c594:	bf00      	nop
 800c596:	bd80      	pop	{r7, pc}
 800c598:	20000138 	.word	0x20000138
 800c59c:	200044fc 	.word	0x200044fc
 800c5a0:	20000020 	.word	0x20000020
 800c5a4:	20000124 	.word	0x20000124

0800c5a8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	4905      	ldr	r1, [pc, #20]	; (800c5c4 <CDC_Init_FS+0x1c>)
 800c5b0:	4805      	ldr	r0, [pc, #20]	; (800c5c8 <CDC_Init_FS+0x20>)
 800c5b2:	f7fe fe48 	bl	800b246 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c5b6:	4905      	ldr	r1, [pc, #20]	; (800c5cc <CDC_Init_FS+0x24>)
 800c5b8:	4803      	ldr	r0, [pc, #12]	; (800c5c8 <CDC_Init_FS+0x20>)
 800c5ba:	f7fe fe62 	bl	800b282 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c5be:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	bd80      	pop	{r7, pc}
 800c5c4:	20004fcc 	.word	0x20004fcc
 800c5c8:	200044fc 	.word	0x200044fc
 800c5cc:	200047cc 	.word	0x200047cc

0800c5d0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c5d0:	b480      	push	{r7}
 800c5d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c5d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr

0800c5e0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c5e0:	b480      	push	{r7}
 800c5e2:	b083      	sub	sp, #12
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	6039      	str	r1, [r7, #0]
 800c5ea:	71fb      	strb	r3, [r7, #7]
 800c5ec:	4613      	mov	r3, r2
 800c5ee:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c5f0:	79fb      	ldrb	r3, [r7, #7]
 800c5f2:	2b23      	cmp	r3, #35	; 0x23
 800c5f4:	d84a      	bhi.n	800c68c <CDC_Control_FS+0xac>
 800c5f6:	a201      	add	r2, pc, #4	; (adr r2, 800c5fc <CDC_Control_FS+0x1c>)
 800c5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5fc:	0800c68d 	.word	0x0800c68d
 800c600:	0800c68d 	.word	0x0800c68d
 800c604:	0800c68d 	.word	0x0800c68d
 800c608:	0800c68d 	.word	0x0800c68d
 800c60c:	0800c68d 	.word	0x0800c68d
 800c610:	0800c68d 	.word	0x0800c68d
 800c614:	0800c68d 	.word	0x0800c68d
 800c618:	0800c68d 	.word	0x0800c68d
 800c61c:	0800c68d 	.word	0x0800c68d
 800c620:	0800c68d 	.word	0x0800c68d
 800c624:	0800c68d 	.word	0x0800c68d
 800c628:	0800c68d 	.word	0x0800c68d
 800c62c:	0800c68d 	.word	0x0800c68d
 800c630:	0800c68d 	.word	0x0800c68d
 800c634:	0800c68d 	.word	0x0800c68d
 800c638:	0800c68d 	.word	0x0800c68d
 800c63c:	0800c68d 	.word	0x0800c68d
 800c640:	0800c68d 	.word	0x0800c68d
 800c644:	0800c68d 	.word	0x0800c68d
 800c648:	0800c68d 	.word	0x0800c68d
 800c64c:	0800c68d 	.word	0x0800c68d
 800c650:	0800c68d 	.word	0x0800c68d
 800c654:	0800c68d 	.word	0x0800c68d
 800c658:	0800c68d 	.word	0x0800c68d
 800c65c:	0800c68d 	.word	0x0800c68d
 800c660:	0800c68d 	.word	0x0800c68d
 800c664:	0800c68d 	.word	0x0800c68d
 800c668:	0800c68d 	.word	0x0800c68d
 800c66c:	0800c68d 	.word	0x0800c68d
 800c670:	0800c68d 	.word	0x0800c68d
 800c674:	0800c68d 	.word	0x0800c68d
 800c678:	0800c68d 	.word	0x0800c68d
 800c67c:	0800c68d 	.word	0x0800c68d
 800c680:	0800c68d 	.word	0x0800c68d
 800c684:	0800c68d 	.word	0x0800c68d
 800c688:	0800c68d 	.word	0x0800c68d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c68c:	bf00      	nop
  }

  return (USBD_OK);
 800c68e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c690:	4618      	mov	r0, r3
 800c692:	370c      	adds	r7, #12
 800c694:	46bd      	mov	sp, r7
 800c696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69a:	4770      	bx	lr

0800c69c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c6a6:	6879      	ldr	r1, [r7, #4]
 800c6a8:	4810      	ldr	r0, [pc, #64]	; (800c6ec <CDC_Receive_FS+0x50>)
 800c6aa:	f7fe fdea 	bl	800b282 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c6ae:	480f      	ldr	r0, [pc, #60]	; (800c6ec <CDC_Receive_FS+0x50>)
 800c6b0:	f7fe fe00 	bl	800b2b4 <USBD_CDC_ReceivePacket>

  memset (rx_buffer, '\0', USB_RX_BUFFER_SIZE);  // clear the buffer
 800c6b4:	2240      	movs	r2, #64	; 0x40
 800c6b6:	2100      	movs	r1, #0
 800c6b8:	480d      	ldr	r0, [pc, #52]	; (800c6f0 <CDC_Receive_FS+0x54>)
 800c6ba:	f000 fdf2 	bl	800d2a2 <memset>
  uint8_t len = (uint8_t)*Len;
 800c6be:	683b      	ldr	r3, [r7, #0]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	73fb      	strb	r3, [r7, #15]
  memcpy(rx_buffer, Buf, len);  // copy the data to the buffer
 800c6c4:	7bfb      	ldrb	r3, [r7, #15]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	6879      	ldr	r1, [r7, #4]
 800c6ca:	4809      	ldr	r0, [pc, #36]	; (800c6f0 <CDC_Receive_FS+0x54>)
 800c6cc:	f000 fe77 	bl	800d3be <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800c6d0:	7bfb      	ldrb	r3, [r7, #15]
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f000 fde3 	bl	800d2a2 <memset>

  prog_state = CFG_RECEIVED;
 800c6dc:	4b05      	ldr	r3, [pc, #20]	; (800c6f4 <CDC_Receive_FS+0x58>)
 800c6de:	2201      	movs	r2, #1
 800c6e0:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800c6e2:	2300      	movs	r3, #0


  /* USER CODE END 6 */
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3710      	adds	r7, #16
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	200044fc 	.word	0x200044fc
 800c6f0:	20004494 	.word	0x20004494
 800c6f4:	200044d4 	.word	0x200044d4

0800c6f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b087      	sub	sp, #28
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	60f8      	str	r0, [r7, #12]
 800c700:	60b9      	str	r1, [r7, #8]
 800c702:	4613      	mov	r3, r2
 800c704:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c706:	2300      	movs	r3, #0
 800c708:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c70a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c70e:	4618      	mov	r0, r3
 800c710:	371c      	adds	r7, #28
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr
	...

0800c71c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b083      	sub	sp, #12
 800c720:	af00      	add	r7, sp, #0
 800c722:	4603      	mov	r3, r0
 800c724:	6039      	str	r1, [r7, #0]
 800c726:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	2212      	movs	r2, #18
 800c72c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800c72e:	4b03      	ldr	r3, [pc, #12]	; (800c73c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800c730:	4618      	mov	r0, r3
 800c732:	370c      	adds	r7, #12
 800c734:	46bd      	mov	sp, r7
 800c736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73a:	4770      	bx	lr
 800c73c:	20000158 	.word	0x20000158

0800c740 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c740:	b480      	push	{r7}
 800c742:	b083      	sub	sp, #12
 800c744:	af00      	add	r7, sp, #0
 800c746:	4603      	mov	r3, r0
 800c748:	6039      	str	r1, [r7, #0]
 800c74a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	2204      	movs	r2, #4
 800c750:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c752:	4b03      	ldr	r3, [pc, #12]	; (800c760 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800c754:	4618      	mov	r0, r3
 800c756:	370c      	adds	r7, #12
 800c758:	46bd      	mov	sp, r7
 800c75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75e:	4770      	bx	lr
 800c760:	2000016c 	.word	0x2000016c

0800c764 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b082      	sub	sp, #8
 800c768:	af00      	add	r7, sp, #0
 800c76a:	4603      	mov	r3, r0
 800c76c:	6039      	str	r1, [r7, #0]
 800c76e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c770:	79fb      	ldrb	r3, [r7, #7]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d105      	bne.n	800c782 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c776:	683a      	ldr	r2, [r7, #0]
 800c778:	4907      	ldr	r1, [pc, #28]	; (800c798 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c77a:	4808      	ldr	r0, [pc, #32]	; (800c79c <USBD_CDC_ProductStrDescriptor+0x38>)
 800c77c:	f7ff fe03 	bl	800c386 <USBD_GetString>
 800c780:	e004      	b.n	800c78c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800c782:	683a      	ldr	r2, [r7, #0]
 800c784:	4904      	ldr	r1, [pc, #16]	; (800c798 <USBD_CDC_ProductStrDescriptor+0x34>)
 800c786:	4805      	ldr	r0, [pc, #20]	; (800c79c <USBD_CDC_ProductStrDescriptor+0x38>)
 800c788:	f7ff fdfd 	bl	800c386 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c78c:	4b02      	ldr	r3, [pc, #8]	; (800c798 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800c78e:	4618      	mov	r0, r3
 800c790:	3708      	adds	r7, #8
 800c792:	46bd      	mov	sp, r7
 800c794:	bd80      	pop	{r7, pc}
 800c796:	bf00      	nop
 800c798:	200057cc 	.word	0x200057cc
 800c79c:	0800df7c 	.word	0x0800df7c

0800c7a0 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b082      	sub	sp, #8
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	6039      	str	r1, [r7, #0]
 800c7aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c7ac:	683a      	ldr	r2, [r7, #0]
 800c7ae:	4904      	ldr	r1, [pc, #16]	; (800c7c0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800c7b0:	4804      	ldr	r0, [pc, #16]	; (800c7c4 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800c7b2:	f7ff fde8 	bl	800c386 <USBD_GetString>
  return USBD_StrDesc;
 800c7b6:	4b02      	ldr	r3, [pc, #8]	; (800c7c0 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3708      	adds	r7, #8
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	bd80      	pop	{r7, pc}
 800c7c0:	200057cc 	.word	0x200057cc
 800c7c4:	0800df8c 	.word	0x0800df8c

0800c7c8 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7c8:	b580      	push	{r7, lr}
 800c7ca:	b082      	sub	sp, #8
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	6039      	str	r1, [r7, #0]
 800c7d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	221a      	movs	r2, #26
 800c7d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c7da:	f000 f843 	bl	800c864 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c7de:	4b02      	ldr	r3, [pc, #8]	; (800c7e8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}
 800c7e8:	20000170 	.word	0x20000170

0800c7ec <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	6039      	str	r1, [r7, #0]
 800c7f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c7f8:	79fb      	ldrb	r3, [r7, #7]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d105      	bne.n	800c80a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c7fe:	683a      	ldr	r2, [r7, #0]
 800c800:	4907      	ldr	r1, [pc, #28]	; (800c820 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c802:	4808      	ldr	r0, [pc, #32]	; (800c824 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c804:	f7ff fdbf 	bl	800c386 <USBD_GetString>
 800c808:	e004      	b.n	800c814 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800c80a:	683a      	ldr	r2, [r7, #0]
 800c80c:	4904      	ldr	r1, [pc, #16]	; (800c820 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800c80e:	4805      	ldr	r0, [pc, #20]	; (800c824 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800c810:	f7ff fdb9 	bl	800c386 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c814:	4b02      	ldr	r3, [pc, #8]	; (800c820 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800c816:	4618      	mov	r0, r3
 800c818:	3708      	adds	r7, #8
 800c81a:	46bd      	mov	sp, r7
 800c81c:	bd80      	pop	{r7, pc}
 800c81e:	bf00      	nop
 800c820:	200057cc 	.word	0x200057cc
 800c824:	0800df90 	.word	0x0800df90

0800c828 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	4603      	mov	r3, r0
 800c830:	6039      	str	r1, [r7, #0]
 800c832:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c834:	79fb      	ldrb	r3, [r7, #7]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d105      	bne.n	800c846 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c83a:	683a      	ldr	r2, [r7, #0]
 800c83c:	4907      	ldr	r1, [pc, #28]	; (800c85c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c83e:	4808      	ldr	r0, [pc, #32]	; (800c860 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c840:	f7ff fda1 	bl	800c386 <USBD_GetString>
 800c844:	e004      	b.n	800c850 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800c846:	683a      	ldr	r2, [r7, #0]
 800c848:	4904      	ldr	r1, [pc, #16]	; (800c85c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800c84a:	4805      	ldr	r0, [pc, #20]	; (800c860 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800c84c:	f7ff fd9b 	bl	800c386 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c850:	4b02      	ldr	r3, [pc, #8]	; (800c85c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800c852:	4618      	mov	r0, r3
 800c854:	3708      	adds	r7, #8
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	200057cc 	.word	0x200057cc
 800c860:	0800df9c 	.word	0x0800df9c

0800c864 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b084      	sub	sp, #16
 800c868:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c86a:	4b0f      	ldr	r3, [pc, #60]	; (800c8a8 <Get_SerialNum+0x44>)
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c870:	4b0e      	ldr	r3, [pc, #56]	; (800c8ac <Get_SerialNum+0x48>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c876:	4b0e      	ldr	r3, [pc, #56]	; (800c8b0 <Get_SerialNum+0x4c>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c87c:	68fa      	ldr	r2, [r7, #12]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	4413      	add	r3, r2
 800c882:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d009      	beq.n	800c89e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c88a:	2208      	movs	r2, #8
 800c88c:	4909      	ldr	r1, [pc, #36]	; (800c8b4 <Get_SerialNum+0x50>)
 800c88e:	68f8      	ldr	r0, [r7, #12]
 800c890:	f000 f814 	bl	800c8bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c894:	2204      	movs	r2, #4
 800c896:	4908      	ldr	r1, [pc, #32]	; (800c8b8 <Get_SerialNum+0x54>)
 800c898:	68b8      	ldr	r0, [r7, #8]
 800c89a:	f000 f80f 	bl	800c8bc <IntToUnicode>
  }
}
 800c89e:	bf00      	nop
 800c8a0:	3710      	adds	r7, #16
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	1fff7590 	.word	0x1fff7590
 800c8ac:	1fff7594 	.word	0x1fff7594
 800c8b0:	1fff7598 	.word	0x1fff7598
 800c8b4:	20000172 	.word	0x20000172
 800c8b8:	20000182 	.word	0x20000182

0800c8bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c8bc:	b480      	push	{r7}
 800c8be:	b087      	sub	sp, #28
 800c8c0:	af00      	add	r7, sp, #0
 800c8c2:	60f8      	str	r0, [r7, #12]
 800c8c4:	60b9      	str	r1, [r7, #8]
 800c8c6:	4613      	mov	r3, r2
 800c8c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	75fb      	strb	r3, [r7, #23]
 800c8d2:	e027      	b.n	800c924 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	0f1b      	lsrs	r3, r3, #28
 800c8d8:	2b09      	cmp	r3, #9
 800c8da:	d80b      	bhi.n	800c8f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	0f1b      	lsrs	r3, r3, #28
 800c8e0:	b2da      	uxtb	r2, r3
 800c8e2:	7dfb      	ldrb	r3, [r7, #23]
 800c8e4:	005b      	lsls	r3, r3, #1
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	440b      	add	r3, r1
 800c8ec:	3230      	adds	r2, #48	; 0x30
 800c8ee:	b2d2      	uxtb	r2, r2
 800c8f0:	701a      	strb	r2, [r3, #0]
 800c8f2:	e00a      	b.n	800c90a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	0f1b      	lsrs	r3, r3, #28
 800c8f8:	b2da      	uxtb	r2, r3
 800c8fa:	7dfb      	ldrb	r3, [r7, #23]
 800c8fc:	005b      	lsls	r3, r3, #1
 800c8fe:	4619      	mov	r1, r3
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	440b      	add	r3, r1
 800c904:	3237      	adds	r2, #55	; 0x37
 800c906:	b2d2      	uxtb	r2, r2
 800c908:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	011b      	lsls	r3, r3, #4
 800c90e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c910:	7dfb      	ldrb	r3, [r7, #23]
 800c912:	005b      	lsls	r3, r3, #1
 800c914:	3301      	adds	r3, #1
 800c916:	68ba      	ldr	r2, [r7, #8]
 800c918:	4413      	add	r3, r2
 800c91a:	2200      	movs	r2, #0
 800c91c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c91e:	7dfb      	ldrb	r3, [r7, #23]
 800c920:	3301      	adds	r3, #1
 800c922:	75fb      	strb	r3, [r7, #23]
 800c924:	7dfa      	ldrb	r2, [r7, #23]
 800c926:	79fb      	ldrb	r3, [r7, #7]
 800c928:	429a      	cmp	r2, r3
 800c92a:	d3d3      	bcc.n	800c8d4 <IntToUnicode+0x18>
  }
}
 800c92c:	bf00      	nop
 800c92e:	bf00      	nop
 800c930:	371c      	adds	r7, #28
 800c932:	46bd      	mov	sp, r7
 800c934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c938:	4770      	bx	lr
	...

0800c93c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b098      	sub	sp, #96	; 0x60
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c944:	f107 030c 	add.w	r3, r7, #12
 800c948:	2254      	movs	r2, #84	; 0x54
 800c94a:	2100      	movs	r1, #0
 800c94c:	4618      	mov	r0, r3
 800c94e:	f000 fca8 	bl	800d2a2 <memset>
  if(pcdHandle->Instance==USB)
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	4a19      	ldr	r2, [pc, #100]	; (800c9bc <HAL_PCD_MspInit+0x80>)
 800c958:	4293      	cmp	r3, r2
 800c95a:	d12a      	bne.n	800c9b2 <HAL_PCD_MspInit+0x76>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800c95c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c960:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800c962:	2300      	movs	r3, #0
 800c964:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c966:	f107 030c 	add.w	r3, r7, #12
 800c96a:	4618      	mov	r0, r3
 800c96c:	f7f9 ffde 	bl	800692c <HAL_RCCEx_PeriphCLKConfig>
 800c970:	4603      	mov	r3, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	d001      	beq.n	800c97a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800c976:	f7f4 fc91 	bl	800129c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800c97a:	4b11      	ldr	r3, [pc, #68]	; (800c9c0 <HAL_PCD_MspInit+0x84>)
 800c97c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c97e:	4a10      	ldr	r2, [pc, #64]	; (800c9c0 <HAL_PCD_MspInit+0x84>)
 800c980:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c984:	6593      	str	r3, [r2, #88]	; 0x58
 800c986:	4b0e      	ldr	r3, [pc, #56]	; (800c9c0 <HAL_PCD_MspInit+0x84>)
 800c988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c98a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c98e:	60bb      	str	r3, [r7, #8]
 800c990:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800c992:	2200      	movs	r2, #0
 800c994:	2100      	movs	r1, #0
 800c996:	2013      	movs	r0, #19
 800c998:	f7f6 ffd9 	bl	800394e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800c99c:	2013      	movs	r0, #19
 800c99e:	f7f6 fff0 	bl	8003982 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	2100      	movs	r1, #0
 800c9a6:	2014      	movs	r0, #20
 800c9a8:	f7f6 ffd1 	bl	800394e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c9ac:	2014      	movs	r0, #20
 800c9ae:	f7f6 ffe8 	bl	8003982 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c9b2:	bf00      	nop
 800c9b4:	3760      	adds	r7, #96	; 0x60
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	40005c00 	.word	0x40005c00
 800c9c0:	40021000 	.word	0x40021000

0800c9c4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b082      	sub	sp, #8
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800c9d8:	4619      	mov	r1, r3
 800c9da:	4610      	mov	r0, r2
 800c9dc:	f7fe fd36 	bl	800b44c <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800c9e0:	bf00      	nop
 800c9e2:	3708      	adds	r7, #8
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}

0800c9e8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
 800c9f0:	460b      	mov	r3, r1
 800c9f2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800c9fa:	78fa      	ldrb	r2, [r7, #3]
 800c9fc:	6879      	ldr	r1, [r7, #4]
 800c9fe:	4613      	mov	r3, r2
 800ca00:	009b      	lsls	r3, r3, #2
 800ca02:	4413      	add	r3, r2
 800ca04:	00db      	lsls	r3, r3, #3
 800ca06:	440b      	add	r3, r1
 800ca08:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ca0c:	681a      	ldr	r2, [r3, #0]
 800ca0e:	78fb      	ldrb	r3, [r7, #3]
 800ca10:	4619      	mov	r1, r3
 800ca12:	f7fe fd70 	bl	800b4f6 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800ca16:	bf00      	nop
 800ca18:	3708      	adds	r7, #8
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}

0800ca1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca1e:	b580      	push	{r7, lr}
 800ca20:	b082      	sub	sp, #8
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
 800ca26:	460b      	mov	r3, r1
 800ca28:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800ca30:	78fa      	ldrb	r2, [r7, #3]
 800ca32:	6879      	ldr	r1, [r7, #4]
 800ca34:	4613      	mov	r3, r2
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	4413      	add	r3, r2
 800ca3a:	00db      	lsls	r3, r3, #3
 800ca3c:	440b      	add	r3, r1
 800ca3e:	3324      	adds	r3, #36	; 0x24
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	78fb      	ldrb	r3, [r7, #3]
 800ca44:	4619      	mov	r1, r3
 800ca46:	f7fe fdb9 	bl	800b5bc <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800ca4a:	bf00      	nop
 800ca4c:	3708      	adds	r7, #8
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}

0800ca52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca52:	b580      	push	{r7, lr}
 800ca54:	b082      	sub	sp, #8
 800ca56:	af00      	add	r7, sp, #0
 800ca58:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ca60:	4618      	mov	r0, r3
 800ca62:	f7fe fecd 	bl	800b800 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ca66:	bf00      	nop
 800ca68:	3708      	adds	r7, #8
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}

0800ca6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ca6e:	b580      	push	{r7, lr}
 800ca70:	b084      	sub	sp, #16
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ca76:	2301      	movs	r3, #1
 800ca78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	795b      	ldrb	r3, [r3, #5]
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	d001      	beq.n	800ca86 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ca82:	f7f4 fc0b 	bl	800129c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ca8c:	7bfa      	ldrb	r2, [r7, #15]
 800ca8e:	4611      	mov	r1, r2
 800ca90:	4618      	mov	r0, r3
 800ca92:	f7fe fe77 	bl	800b784 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f7fe fe23 	bl	800b6e8 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800caa2:	bf00      	nop
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}
	...

0800caac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800caba:	4618      	mov	r0, r3
 800cabc:	f7fe fe72 	bl	800b7a4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	7a5b      	ldrb	r3, [r3, #9]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d005      	beq.n	800cad4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cac8:	4b04      	ldr	r3, [pc, #16]	; (800cadc <HAL_PCD_SuspendCallback+0x30>)
 800caca:	691b      	ldr	r3, [r3, #16]
 800cacc:	4a03      	ldr	r2, [pc, #12]	; (800cadc <HAL_PCD_SuspendCallback+0x30>)
 800cace:	f043 0306 	orr.w	r3, r3, #6
 800cad2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800cad4:	bf00      	nop
 800cad6:	3708      	adds	r7, #8
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}
 800cadc:	e000ed00 	.word	0xe000ed00

0800cae0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	7a5b      	ldrb	r3, [r3, #9]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d007      	beq.n	800cb00 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800caf0:	4b08      	ldr	r3, [pc, #32]	; (800cb14 <HAL_PCD_ResumeCallback+0x34>)
 800caf2:	691b      	ldr	r3, [r3, #16]
 800caf4:	4a07      	ldr	r2, [pc, #28]	; (800cb14 <HAL_PCD_ResumeCallback+0x34>)
 800caf6:	f023 0306 	bic.w	r3, r3, #6
 800cafa:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800cafc:	f000 f9f8 	bl	800cef0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cb06:	4618      	mov	r0, r3
 800cb08:	f7fe fe62 	bl	800b7d0 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800cb0c:	bf00      	nop
 800cb0e:	3708      	adds	r7, #8
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}
 800cb14:	e000ed00 	.word	0xe000ed00

0800cb18 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b082      	sub	sp, #8
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800cb20:	4a2b      	ldr	r2, [pc, #172]	; (800cbd0 <USBD_LL_Init+0xb8>)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	4a29      	ldr	r2, [pc, #164]	; (800cbd0 <USBD_LL_Init+0xb8>)
 800cb2c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800cb30:	4b27      	ldr	r3, [pc, #156]	; (800cbd0 <USBD_LL_Init+0xb8>)
 800cb32:	4a28      	ldr	r2, [pc, #160]	; (800cbd4 <USBD_LL_Init+0xbc>)
 800cb34:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800cb36:	4b26      	ldr	r3, [pc, #152]	; (800cbd0 <USBD_LL_Init+0xb8>)
 800cb38:	2208      	movs	r2, #8
 800cb3a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800cb3c:	4b24      	ldr	r3, [pc, #144]	; (800cbd0 <USBD_LL_Init+0xb8>)
 800cb3e:	2202      	movs	r2, #2
 800cb40:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800cb42:	4b23      	ldr	r3, [pc, #140]	; (800cbd0 <USBD_LL_Init+0xb8>)
 800cb44:	2202      	movs	r2, #2
 800cb46:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800cb48:	4b21      	ldr	r3, [pc, #132]	; (800cbd0 <USBD_LL_Init+0xb8>)
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800cb4e:	4b20      	ldr	r3, [pc, #128]	; (800cbd0 <USBD_LL_Init+0xb8>)
 800cb50:	2200      	movs	r2, #0
 800cb52:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800cb54:	4b1e      	ldr	r3, [pc, #120]	; (800cbd0 <USBD_LL_Init+0xb8>)
 800cb56:	2200      	movs	r2, #0
 800cb58:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800cb5a:	4b1d      	ldr	r3, [pc, #116]	; (800cbd0 <USBD_LL_Init+0xb8>)
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800cb60:	481b      	ldr	r0, [pc, #108]	; (800cbd0 <USBD_LL_Init+0xb8>)
 800cb62:	f7f7 fbcc 	bl	80042fe <HAL_PCD_Init>
 800cb66:	4603      	mov	r3, r0
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d001      	beq.n	800cb70 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800cb6c:	f7f4 fb96 	bl	800129c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cb76:	2318      	movs	r3, #24
 800cb78:	2200      	movs	r2, #0
 800cb7a:	2100      	movs	r1, #0
 800cb7c:	f7f9 f886 	bl	8005c8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cb86:	2358      	movs	r3, #88	; 0x58
 800cb88:	2200      	movs	r2, #0
 800cb8a:	2180      	movs	r1, #128	; 0x80
 800cb8c:	f7f9 f87e 	bl	8005c8c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cb96:	23c0      	movs	r3, #192	; 0xc0
 800cb98:	2200      	movs	r2, #0
 800cb9a:	2181      	movs	r1, #129	; 0x81
 800cb9c:	f7f9 f876 	bl	8005c8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cba6:	f44f 7388 	mov.w	r3, #272	; 0x110
 800cbaa:	2200      	movs	r2, #0
 800cbac:	2101      	movs	r1, #1
 800cbae:	f7f9 f86d 	bl	8005c8c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cbb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cbbc:	2200      	movs	r2, #0
 800cbbe:	2182      	movs	r1, #130	; 0x82
 800cbc0:	f7f9 f864 	bl	8005c8c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800cbc4:	2300      	movs	r3, #0
}
 800cbc6:	4618      	mov	r0, r3
 800cbc8:	3708      	adds	r7, #8
 800cbca:	46bd      	mov	sp, r7
 800cbcc:	bd80      	pop	{r7, pc}
 800cbce:	bf00      	nop
 800cbd0:	200059cc 	.word	0x200059cc
 800cbd4:	40005c00 	.word	0x40005c00

0800cbd8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b084      	sub	sp, #16
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7f7 fc53 	bl	800449a <HAL_PCD_Start>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbf8:	7bfb      	ldrb	r3, [r7, #15]
 800cbfa:	4618      	mov	r0, r3
 800cbfc:	f000 f97e 	bl	800cefc <USBD_Get_USB_Status>
 800cc00:	4603      	mov	r3, r0
 800cc02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc04:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3710      	adds	r7, #16
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}

0800cc0e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800cc0e:	b580      	push	{r7, lr}
 800cc10:	b084      	sub	sp, #16
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
 800cc16:	4608      	mov	r0, r1
 800cc18:	4611      	mov	r1, r2
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	70fb      	strb	r3, [r7, #3]
 800cc20:	460b      	mov	r3, r1
 800cc22:	70bb      	strb	r3, [r7, #2]
 800cc24:	4613      	mov	r3, r2
 800cc26:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cc36:	78bb      	ldrb	r3, [r7, #2]
 800cc38:	883a      	ldrh	r2, [r7, #0]
 800cc3a:	78f9      	ldrb	r1, [r7, #3]
 800cc3c:	f7f7 fd9a 	bl	8004774 <HAL_PCD_EP_Open>
 800cc40:	4603      	mov	r3, r0
 800cc42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc44:	7bfb      	ldrb	r3, [r7, #15]
 800cc46:	4618      	mov	r0, r3
 800cc48:	f000 f958 	bl	800cefc <USBD_Get_USB_Status>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc50:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3710      	adds	r7, #16
 800cc56:	46bd      	mov	sp, r7
 800cc58:	bd80      	pop	{r7, pc}

0800cc5a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc5a:	b580      	push	{r7, lr}
 800cc5c:	b084      	sub	sp, #16
 800cc5e:	af00      	add	r7, sp, #0
 800cc60:	6078      	str	r0, [r7, #4]
 800cc62:	460b      	mov	r3, r1
 800cc64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc66:	2300      	movs	r3, #0
 800cc68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cc74:	78fa      	ldrb	r2, [r7, #3]
 800cc76:	4611      	mov	r1, r2
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7f7 fdd8 	bl	800482e <HAL_PCD_EP_Close>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cc82:	7bfb      	ldrb	r3, [r7, #15]
 800cc84:	4618      	mov	r0, r3
 800cc86:	f000 f939 	bl	800cefc <USBD_Get_USB_Status>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc8e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3710      	adds	r7, #16
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b084      	sub	sp, #16
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
 800cca0:	460b      	mov	r3, r1
 800cca2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cca4:	2300      	movs	r3, #0
 800cca6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cca8:	2300      	movs	r3, #0
 800ccaa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ccb2:	78fa      	ldrb	r2, [r7, #3]
 800ccb4:	4611      	mov	r1, r2
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7f7 fe81 	bl	80049be <HAL_PCD_EP_SetStall>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccc0:	7bfb      	ldrb	r3, [r7, #15]
 800ccc2:	4618      	mov	r0, r3
 800ccc4:	f000 f91a 	bl	800cefc <USBD_Get_USB_Status>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cccc:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}

0800ccd6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ccd6:	b580      	push	{r7, lr}
 800ccd8:	b084      	sub	sp, #16
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
 800ccde:	460b      	mov	r3, r1
 800cce0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cce2:	2300      	movs	r3, #0
 800cce4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cce6:	2300      	movs	r3, #0
 800cce8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ccf0:	78fa      	ldrb	r2, [r7, #3]
 800ccf2:	4611      	mov	r1, r2
 800ccf4:	4618      	mov	r0, r3
 800ccf6:	f7f7 feb4 	bl	8004a62 <HAL_PCD_EP_ClrStall>
 800ccfa:	4603      	mov	r3, r0
 800ccfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ccfe:	7bfb      	ldrb	r3, [r7, #15]
 800cd00:	4618      	mov	r0, r3
 800cd02:	f000 f8fb 	bl	800cefc <USBD_Get_USB_Status>
 800cd06:	4603      	mov	r3, r0
 800cd08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd0a:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3710      	adds	r7, #16
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cd14:	b480      	push	{r7}
 800cd16:	b085      	sub	sp, #20
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	460b      	mov	r3, r1
 800cd1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cd28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	da0b      	bge.n	800cd48 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cd30:	78fb      	ldrb	r3, [r7, #3]
 800cd32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd36:	68f9      	ldr	r1, [r7, #12]
 800cd38:	4613      	mov	r3, r2
 800cd3a:	009b      	lsls	r3, r3, #2
 800cd3c:	4413      	add	r3, r2
 800cd3e:	00db      	lsls	r3, r3, #3
 800cd40:	440b      	add	r3, r1
 800cd42:	3312      	adds	r3, #18
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	e00b      	b.n	800cd60 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800cd48:	78fb      	ldrb	r3, [r7, #3]
 800cd4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd4e:	68f9      	ldr	r1, [r7, #12]
 800cd50:	4613      	mov	r3, r2
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	4413      	add	r3, r2
 800cd56:	00db      	lsls	r3, r3, #3
 800cd58:	440b      	add	r3, r1
 800cd5a:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800cd5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3714      	adds	r7, #20
 800cd64:	46bd      	mov	sp, r7
 800cd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6a:	4770      	bx	lr

0800cd6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b084      	sub	sp, #16
 800cd70:	af00      	add	r7, sp, #0
 800cd72:	6078      	str	r0, [r7, #4]
 800cd74:	460b      	mov	r3, r1
 800cd76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800cd86:	78fa      	ldrb	r2, [r7, #3]
 800cd88:	4611      	mov	r1, r2
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	f7f7 fcce 	bl	800472c <HAL_PCD_SetAddress>
 800cd90:	4603      	mov	r3, r0
 800cd92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cd94:	7bfb      	ldrb	r3, [r7, #15]
 800cd96:	4618      	mov	r0, r3
 800cd98:	f000 f8b0 	bl	800cefc <USBD_Get_USB_Status>
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cda0:	7bbb      	ldrb	r3, [r7, #14]
}
 800cda2:	4618      	mov	r0, r3
 800cda4:	3710      	adds	r7, #16
 800cda6:	46bd      	mov	sp, r7
 800cda8:	bd80      	pop	{r7, pc}

0800cdaa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cdaa:	b580      	push	{r7, lr}
 800cdac:	b086      	sub	sp, #24
 800cdae:	af00      	add	r7, sp, #0
 800cdb0:	60f8      	str	r0, [r7, #12]
 800cdb2:	607a      	str	r2, [r7, #4]
 800cdb4:	603b      	str	r3, [r7, #0]
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800cdc8:	7af9      	ldrb	r1, [r7, #11]
 800cdca:	683b      	ldr	r3, [r7, #0]
 800cdcc:	687a      	ldr	r2, [r7, #4]
 800cdce:	f7f7 fdbf 	bl	8004950 <HAL_PCD_EP_Transmit>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cdd6:	7dfb      	ldrb	r3, [r7, #23]
 800cdd8:	4618      	mov	r0, r3
 800cdda:	f000 f88f 	bl	800cefc <USBD_Get_USB_Status>
 800cdde:	4603      	mov	r3, r0
 800cde0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cde2:	7dbb      	ldrb	r3, [r7, #22]
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3718      	adds	r7, #24
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cdec:	b580      	push	{r7, lr}
 800cdee:	b086      	sub	sp, #24
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	607a      	str	r2, [r7, #4]
 800cdf6:	603b      	str	r3, [r7, #0]
 800cdf8:	460b      	mov	r3, r1
 800cdfa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ce00:	2300      	movs	r3, #0
 800ce02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ce0a:	7af9      	ldrb	r1, [r7, #11]
 800ce0c:	683b      	ldr	r3, [r7, #0]
 800ce0e:	687a      	ldr	r2, [r7, #4]
 800ce10:	f7f7 fd55 	bl	80048be <HAL_PCD_EP_Receive>
 800ce14:	4603      	mov	r3, r0
 800ce16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ce18:	7dfb      	ldrb	r3, [r7, #23]
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	f000 f86e 	bl	800cefc <USBD_Get_USB_Status>
 800ce20:	4603      	mov	r3, r0
 800ce22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ce24:	7dbb      	ldrb	r3, [r7, #22]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3718      	adds	r7, #24
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b082      	sub	sp, #8
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
 800ce36:	460b      	mov	r3, r1
 800ce38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ce40:	78fa      	ldrb	r2, [r7, #3]
 800ce42:	4611      	mov	r1, r2
 800ce44:	4618      	mov	r0, r3
 800ce46:	f7f7 fd6b 	bl	8004920 <HAL_PCD_EP_GetRxCount>
 800ce4a:	4603      	mov	r3, r0
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3708      	adds	r7, #8
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b082      	sub	sp, #8
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800ce60:	78fb      	ldrb	r3, [r7, #3]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d002      	beq.n	800ce6c <HAL_PCDEx_LPM_Callback+0x18>
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	d013      	beq.n	800ce92 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800ce6a:	e023      	b.n	800ceb4 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	7a5b      	ldrb	r3, [r3, #9]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d007      	beq.n	800ce84 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800ce74:	f000 f83c 	bl	800cef0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ce78:	4b10      	ldr	r3, [pc, #64]	; (800cebc <HAL_PCDEx_LPM_Callback+0x68>)
 800ce7a:	691b      	ldr	r3, [r3, #16]
 800ce7c:	4a0f      	ldr	r2, [pc, #60]	; (800cebc <HAL_PCDEx_LPM_Callback+0x68>)
 800ce7e:	f023 0306 	bic.w	r3, r3, #6
 800ce82:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	f7fe fca0 	bl	800b7d0 <USBD_LL_Resume>
    break;
 800ce90:	e010      	b.n	800ceb4 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7fe fc83 	bl	800b7a4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	7a5b      	ldrb	r3, [r3, #9]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d005      	beq.n	800ceb2 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cea6:	4b05      	ldr	r3, [pc, #20]	; (800cebc <HAL_PCDEx_LPM_Callback+0x68>)
 800cea8:	691b      	ldr	r3, [r3, #16]
 800ceaa:	4a04      	ldr	r2, [pc, #16]	; (800cebc <HAL_PCDEx_LPM_Callback+0x68>)
 800ceac:	f043 0306 	orr.w	r3, r3, #6
 800ceb0:	6113      	str	r3, [r2, #16]
    break;
 800ceb2:	bf00      	nop
}
 800ceb4:	bf00      	nop
 800ceb6:	3708      	adds	r7, #8
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	bd80      	pop	{r7, pc}
 800cebc:	e000ed00 	.word	0xe000ed00

0800cec0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800cec8:	4b03      	ldr	r3, [pc, #12]	; (800ced8 <USBD_static_malloc+0x18>)
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	370c      	adds	r7, #12
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr
 800ced6:	bf00      	nop
 800ced8:	20005ca8 	.word	0x20005ca8

0800cedc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800cedc:	b480      	push	{r7}
 800cede:	b083      	sub	sp, #12
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]

}
 800cee4:	bf00      	nop
 800cee6:	370c      	adds	r7, #12
 800cee8:	46bd      	mov	sp, r7
 800ceea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceee:	4770      	bx	lr

0800cef0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cef4:	f7f3 fc20 	bl	8000738 <SystemClock_Config>
}
 800cef8:	bf00      	nop
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b085      	sub	sp, #20
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	4603      	mov	r3, r0
 800cf04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cf06:	2300      	movs	r3, #0
 800cf08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cf0a:	79fb      	ldrb	r3, [r7, #7]
 800cf0c:	2b03      	cmp	r3, #3
 800cf0e:	d817      	bhi.n	800cf40 <USBD_Get_USB_Status+0x44>
 800cf10:	a201      	add	r2, pc, #4	; (adr r2, 800cf18 <USBD_Get_USB_Status+0x1c>)
 800cf12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf16:	bf00      	nop
 800cf18:	0800cf29 	.word	0x0800cf29
 800cf1c:	0800cf2f 	.word	0x0800cf2f
 800cf20:	0800cf35 	.word	0x0800cf35
 800cf24:	0800cf3b 	.word	0x0800cf3b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800cf28:	2300      	movs	r3, #0
 800cf2a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf2c:	e00b      	b.n	800cf46 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800cf2e:	2303      	movs	r3, #3
 800cf30:	73fb      	strb	r3, [r7, #15]
    break;
 800cf32:	e008      	b.n	800cf46 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cf34:	2301      	movs	r3, #1
 800cf36:	73fb      	strb	r3, [r7, #15]
    break;
 800cf38:	e005      	b.n	800cf46 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800cf3a:	2303      	movs	r3, #3
 800cf3c:	73fb      	strb	r3, [r7, #15]
    break;
 800cf3e:	e002      	b.n	800cf46 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800cf40:	2303      	movs	r3, #3
 800cf42:	73fb      	strb	r3, [r7, #15]
    break;
 800cf44:	bf00      	nop
  }
  return usb_status;
 800cf46:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3714      	adds	r7, #20
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr

0800cf54 <atoi>:
 800cf54:	220a      	movs	r2, #10
 800cf56:	2100      	movs	r1, #0
 800cf58:	f000 b882 	b.w	800d060 <strtol>

0800cf5c <_strtol_l.constprop.0>:
 800cf5c:	2b01      	cmp	r3, #1
 800cf5e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf62:	d001      	beq.n	800cf68 <_strtol_l.constprop.0+0xc>
 800cf64:	2b24      	cmp	r3, #36	; 0x24
 800cf66:	d906      	bls.n	800cf76 <_strtol_l.constprop.0+0x1a>
 800cf68:	f000 f9fc 	bl	800d364 <__errno>
 800cf6c:	2316      	movs	r3, #22
 800cf6e:	6003      	str	r3, [r0, #0]
 800cf70:	2000      	movs	r0, #0
 800cf72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf76:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d05c <_strtol_l.constprop.0+0x100>
 800cf7a:	460d      	mov	r5, r1
 800cf7c:	462e      	mov	r6, r5
 800cf7e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cf82:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800cf86:	f017 0708 	ands.w	r7, r7, #8
 800cf8a:	d1f7      	bne.n	800cf7c <_strtol_l.constprop.0+0x20>
 800cf8c:	2c2d      	cmp	r4, #45	; 0x2d
 800cf8e:	d132      	bne.n	800cff6 <_strtol_l.constprop.0+0x9a>
 800cf90:	782c      	ldrb	r4, [r5, #0]
 800cf92:	2701      	movs	r7, #1
 800cf94:	1cb5      	adds	r5, r6, #2
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d05b      	beq.n	800d052 <_strtol_l.constprop.0+0xf6>
 800cf9a:	2b10      	cmp	r3, #16
 800cf9c:	d109      	bne.n	800cfb2 <_strtol_l.constprop.0+0x56>
 800cf9e:	2c30      	cmp	r4, #48	; 0x30
 800cfa0:	d107      	bne.n	800cfb2 <_strtol_l.constprop.0+0x56>
 800cfa2:	782c      	ldrb	r4, [r5, #0]
 800cfa4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800cfa8:	2c58      	cmp	r4, #88	; 0x58
 800cfaa:	d14d      	bne.n	800d048 <_strtol_l.constprop.0+0xec>
 800cfac:	786c      	ldrb	r4, [r5, #1]
 800cfae:	2310      	movs	r3, #16
 800cfb0:	3502      	adds	r5, #2
 800cfb2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800cfb6:	f108 38ff 	add.w	r8, r8, #4294967295
 800cfba:	f04f 0e00 	mov.w	lr, #0
 800cfbe:	fbb8 f9f3 	udiv	r9, r8, r3
 800cfc2:	4676      	mov	r6, lr
 800cfc4:	fb03 8a19 	mls	sl, r3, r9, r8
 800cfc8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800cfcc:	f1bc 0f09 	cmp.w	ip, #9
 800cfd0:	d816      	bhi.n	800d000 <_strtol_l.constprop.0+0xa4>
 800cfd2:	4664      	mov	r4, ip
 800cfd4:	42a3      	cmp	r3, r4
 800cfd6:	dd24      	ble.n	800d022 <_strtol_l.constprop.0+0xc6>
 800cfd8:	f1be 3fff 	cmp.w	lr, #4294967295
 800cfdc:	d008      	beq.n	800cff0 <_strtol_l.constprop.0+0x94>
 800cfde:	45b1      	cmp	r9, r6
 800cfe0:	d31c      	bcc.n	800d01c <_strtol_l.constprop.0+0xc0>
 800cfe2:	d101      	bne.n	800cfe8 <_strtol_l.constprop.0+0x8c>
 800cfe4:	45a2      	cmp	sl, r4
 800cfe6:	db19      	blt.n	800d01c <_strtol_l.constprop.0+0xc0>
 800cfe8:	fb06 4603 	mla	r6, r6, r3, r4
 800cfec:	f04f 0e01 	mov.w	lr, #1
 800cff0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800cff4:	e7e8      	b.n	800cfc8 <_strtol_l.constprop.0+0x6c>
 800cff6:	2c2b      	cmp	r4, #43	; 0x2b
 800cff8:	bf04      	itt	eq
 800cffa:	782c      	ldrbeq	r4, [r5, #0]
 800cffc:	1cb5      	addeq	r5, r6, #2
 800cffe:	e7ca      	b.n	800cf96 <_strtol_l.constprop.0+0x3a>
 800d000:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d004:	f1bc 0f19 	cmp.w	ip, #25
 800d008:	d801      	bhi.n	800d00e <_strtol_l.constprop.0+0xb2>
 800d00a:	3c37      	subs	r4, #55	; 0x37
 800d00c:	e7e2      	b.n	800cfd4 <_strtol_l.constprop.0+0x78>
 800d00e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d012:	f1bc 0f19 	cmp.w	ip, #25
 800d016:	d804      	bhi.n	800d022 <_strtol_l.constprop.0+0xc6>
 800d018:	3c57      	subs	r4, #87	; 0x57
 800d01a:	e7db      	b.n	800cfd4 <_strtol_l.constprop.0+0x78>
 800d01c:	f04f 3eff 	mov.w	lr, #4294967295
 800d020:	e7e6      	b.n	800cff0 <_strtol_l.constprop.0+0x94>
 800d022:	f1be 3fff 	cmp.w	lr, #4294967295
 800d026:	d105      	bne.n	800d034 <_strtol_l.constprop.0+0xd8>
 800d028:	2322      	movs	r3, #34	; 0x22
 800d02a:	6003      	str	r3, [r0, #0]
 800d02c:	4646      	mov	r6, r8
 800d02e:	b942      	cbnz	r2, 800d042 <_strtol_l.constprop.0+0xe6>
 800d030:	4630      	mov	r0, r6
 800d032:	e79e      	b.n	800cf72 <_strtol_l.constprop.0+0x16>
 800d034:	b107      	cbz	r7, 800d038 <_strtol_l.constprop.0+0xdc>
 800d036:	4276      	negs	r6, r6
 800d038:	2a00      	cmp	r2, #0
 800d03a:	d0f9      	beq.n	800d030 <_strtol_l.constprop.0+0xd4>
 800d03c:	f1be 0f00 	cmp.w	lr, #0
 800d040:	d000      	beq.n	800d044 <_strtol_l.constprop.0+0xe8>
 800d042:	1e69      	subs	r1, r5, #1
 800d044:	6011      	str	r1, [r2, #0]
 800d046:	e7f3      	b.n	800d030 <_strtol_l.constprop.0+0xd4>
 800d048:	2430      	movs	r4, #48	; 0x30
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d1b1      	bne.n	800cfb2 <_strtol_l.constprop.0+0x56>
 800d04e:	2308      	movs	r3, #8
 800d050:	e7af      	b.n	800cfb2 <_strtol_l.constprop.0+0x56>
 800d052:	2c30      	cmp	r4, #48	; 0x30
 800d054:	d0a5      	beq.n	800cfa2 <_strtol_l.constprop.0+0x46>
 800d056:	230a      	movs	r3, #10
 800d058:	e7ab      	b.n	800cfb2 <_strtol_l.constprop.0+0x56>
 800d05a:	bf00      	nop
 800d05c:	0800dfed 	.word	0x0800dfed

0800d060 <strtol>:
 800d060:	4613      	mov	r3, r2
 800d062:	460a      	mov	r2, r1
 800d064:	4601      	mov	r1, r0
 800d066:	4802      	ldr	r0, [pc, #8]	; (800d070 <strtol+0x10>)
 800d068:	6800      	ldr	r0, [r0, #0]
 800d06a:	f7ff bf77 	b.w	800cf5c <_strtol_l.constprop.0>
 800d06e:	bf00      	nop
 800d070:	200001e4 	.word	0x200001e4

0800d074 <std>:
 800d074:	2300      	movs	r3, #0
 800d076:	b510      	push	{r4, lr}
 800d078:	4604      	mov	r4, r0
 800d07a:	e9c0 3300 	strd	r3, r3, [r0]
 800d07e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d082:	6083      	str	r3, [r0, #8]
 800d084:	8181      	strh	r1, [r0, #12]
 800d086:	6643      	str	r3, [r0, #100]	; 0x64
 800d088:	81c2      	strh	r2, [r0, #14]
 800d08a:	6183      	str	r3, [r0, #24]
 800d08c:	4619      	mov	r1, r3
 800d08e:	2208      	movs	r2, #8
 800d090:	305c      	adds	r0, #92	; 0x5c
 800d092:	f000 f906 	bl	800d2a2 <memset>
 800d096:	4b0d      	ldr	r3, [pc, #52]	; (800d0cc <std+0x58>)
 800d098:	6263      	str	r3, [r4, #36]	; 0x24
 800d09a:	4b0d      	ldr	r3, [pc, #52]	; (800d0d0 <std+0x5c>)
 800d09c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d09e:	4b0d      	ldr	r3, [pc, #52]	; (800d0d4 <std+0x60>)
 800d0a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d0a2:	4b0d      	ldr	r3, [pc, #52]	; (800d0d8 <std+0x64>)
 800d0a4:	6323      	str	r3, [r4, #48]	; 0x30
 800d0a6:	4b0d      	ldr	r3, [pc, #52]	; (800d0dc <std+0x68>)
 800d0a8:	6224      	str	r4, [r4, #32]
 800d0aa:	429c      	cmp	r4, r3
 800d0ac:	d006      	beq.n	800d0bc <std+0x48>
 800d0ae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800d0b2:	4294      	cmp	r4, r2
 800d0b4:	d002      	beq.n	800d0bc <std+0x48>
 800d0b6:	33d0      	adds	r3, #208	; 0xd0
 800d0b8:	429c      	cmp	r4, r3
 800d0ba:	d105      	bne.n	800d0c8 <std+0x54>
 800d0bc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d0c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d0c4:	f000 b978 	b.w	800d3b8 <__retarget_lock_init_recursive>
 800d0c8:	bd10      	pop	{r4, pc}
 800d0ca:	bf00      	nop
 800d0cc:	0800d21d 	.word	0x0800d21d
 800d0d0:	0800d23f 	.word	0x0800d23f
 800d0d4:	0800d277 	.word	0x0800d277
 800d0d8:	0800d29b 	.word	0x0800d29b
 800d0dc:	20005ec8 	.word	0x20005ec8

0800d0e0 <stdio_exit_handler>:
 800d0e0:	4a02      	ldr	r2, [pc, #8]	; (800d0ec <stdio_exit_handler+0xc>)
 800d0e2:	4903      	ldr	r1, [pc, #12]	; (800d0f0 <stdio_exit_handler+0x10>)
 800d0e4:	4803      	ldr	r0, [pc, #12]	; (800d0f4 <stdio_exit_handler+0x14>)
 800d0e6:	f000 b869 	b.w	800d1bc <_fwalk_sglue>
 800d0ea:	bf00      	nop
 800d0ec:	2000018c 	.word	0x2000018c
 800d0f0:	0800dc81 	.word	0x0800dc81
 800d0f4:	20000198 	.word	0x20000198

0800d0f8 <cleanup_stdio>:
 800d0f8:	6841      	ldr	r1, [r0, #4]
 800d0fa:	4b0c      	ldr	r3, [pc, #48]	; (800d12c <cleanup_stdio+0x34>)
 800d0fc:	4299      	cmp	r1, r3
 800d0fe:	b510      	push	{r4, lr}
 800d100:	4604      	mov	r4, r0
 800d102:	d001      	beq.n	800d108 <cleanup_stdio+0x10>
 800d104:	f000 fdbc 	bl	800dc80 <_fflush_r>
 800d108:	68a1      	ldr	r1, [r4, #8]
 800d10a:	4b09      	ldr	r3, [pc, #36]	; (800d130 <cleanup_stdio+0x38>)
 800d10c:	4299      	cmp	r1, r3
 800d10e:	d002      	beq.n	800d116 <cleanup_stdio+0x1e>
 800d110:	4620      	mov	r0, r4
 800d112:	f000 fdb5 	bl	800dc80 <_fflush_r>
 800d116:	68e1      	ldr	r1, [r4, #12]
 800d118:	4b06      	ldr	r3, [pc, #24]	; (800d134 <cleanup_stdio+0x3c>)
 800d11a:	4299      	cmp	r1, r3
 800d11c:	d004      	beq.n	800d128 <cleanup_stdio+0x30>
 800d11e:	4620      	mov	r0, r4
 800d120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d124:	f000 bdac 	b.w	800dc80 <_fflush_r>
 800d128:	bd10      	pop	{r4, pc}
 800d12a:	bf00      	nop
 800d12c:	20005ec8 	.word	0x20005ec8
 800d130:	20005f30 	.word	0x20005f30
 800d134:	20005f98 	.word	0x20005f98

0800d138 <global_stdio_init.part.0>:
 800d138:	b510      	push	{r4, lr}
 800d13a:	4b0b      	ldr	r3, [pc, #44]	; (800d168 <global_stdio_init.part.0+0x30>)
 800d13c:	4c0b      	ldr	r4, [pc, #44]	; (800d16c <global_stdio_init.part.0+0x34>)
 800d13e:	4a0c      	ldr	r2, [pc, #48]	; (800d170 <global_stdio_init.part.0+0x38>)
 800d140:	601a      	str	r2, [r3, #0]
 800d142:	4620      	mov	r0, r4
 800d144:	2200      	movs	r2, #0
 800d146:	2104      	movs	r1, #4
 800d148:	f7ff ff94 	bl	800d074 <std>
 800d14c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800d150:	2201      	movs	r2, #1
 800d152:	2109      	movs	r1, #9
 800d154:	f7ff ff8e 	bl	800d074 <std>
 800d158:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800d15c:	2202      	movs	r2, #2
 800d15e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d162:	2112      	movs	r1, #18
 800d164:	f7ff bf86 	b.w	800d074 <std>
 800d168:	20006000 	.word	0x20006000
 800d16c:	20005ec8 	.word	0x20005ec8
 800d170:	0800d0e1 	.word	0x0800d0e1

0800d174 <__sfp_lock_acquire>:
 800d174:	4801      	ldr	r0, [pc, #4]	; (800d17c <__sfp_lock_acquire+0x8>)
 800d176:	f000 b920 	b.w	800d3ba <__retarget_lock_acquire_recursive>
 800d17a:	bf00      	nop
 800d17c:	20006009 	.word	0x20006009

0800d180 <__sfp_lock_release>:
 800d180:	4801      	ldr	r0, [pc, #4]	; (800d188 <__sfp_lock_release+0x8>)
 800d182:	f000 b91b 	b.w	800d3bc <__retarget_lock_release_recursive>
 800d186:	bf00      	nop
 800d188:	20006009 	.word	0x20006009

0800d18c <__sinit>:
 800d18c:	b510      	push	{r4, lr}
 800d18e:	4604      	mov	r4, r0
 800d190:	f7ff fff0 	bl	800d174 <__sfp_lock_acquire>
 800d194:	6a23      	ldr	r3, [r4, #32]
 800d196:	b11b      	cbz	r3, 800d1a0 <__sinit+0x14>
 800d198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d19c:	f7ff bff0 	b.w	800d180 <__sfp_lock_release>
 800d1a0:	4b04      	ldr	r3, [pc, #16]	; (800d1b4 <__sinit+0x28>)
 800d1a2:	6223      	str	r3, [r4, #32]
 800d1a4:	4b04      	ldr	r3, [pc, #16]	; (800d1b8 <__sinit+0x2c>)
 800d1a6:	681b      	ldr	r3, [r3, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d1f5      	bne.n	800d198 <__sinit+0xc>
 800d1ac:	f7ff ffc4 	bl	800d138 <global_stdio_init.part.0>
 800d1b0:	e7f2      	b.n	800d198 <__sinit+0xc>
 800d1b2:	bf00      	nop
 800d1b4:	0800d0f9 	.word	0x0800d0f9
 800d1b8:	20006000 	.word	0x20006000

0800d1bc <_fwalk_sglue>:
 800d1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1c0:	4607      	mov	r7, r0
 800d1c2:	4688      	mov	r8, r1
 800d1c4:	4614      	mov	r4, r2
 800d1c6:	2600      	movs	r6, #0
 800d1c8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d1cc:	f1b9 0901 	subs.w	r9, r9, #1
 800d1d0:	d505      	bpl.n	800d1de <_fwalk_sglue+0x22>
 800d1d2:	6824      	ldr	r4, [r4, #0]
 800d1d4:	2c00      	cmp	r4, #0
 800d1d6:	d1f7      	bne.n	800d1c8 <_fwalk_sglue+0xc>
 800d1d8:	4630      	mov	r0, r6
 800d1da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1de:	89ab      	ldrh	r3, [r5, #12]
 800d1e0:	2b01      	cmp	r3, #1
 800d1e2:	d907      	bls.n	800d1f4 <_fwalk_sglue+0x38>
 800d1e4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d1e8:	3301      	adds	r3, #1
 800d1ea:	d003      	beq.n	800d1f4 <_fwalk_sglue+0x38>
 800d1ec:	4629      	mov	r1, r5
 800d1ee:	4638      	mov	r0, r7
 800d1f0:	47c0      	blx	r8
 800d1f2:	4306      	orrs	r6, r0
 800d1f4:	3568      	adds	r5, #104	; 0x68
 800d1f6:	e7e9      	b.n	800d1cc <_fwalk_sglue+0x10>

0800d1f8 <iprintf>:
 800d1f8:	b40f      	push	{r0, r1, r2, r3}
 800d1fa:	b507      	push	{r0, r1, r2, lr}
 800d1fc:	4906      	ldr	r1, [pc, #24]	; (800d218 <iprintf+0x20>)
 800d1fe:	ab04      	add	r3, sp, #16
 800d200:	6808      	ldr	r0, [r1, #0]
 800d202:	f853 2b04 	ldr.w	r2, [r3], #4
 800d206:	6881      	ldr	r1, [r0, #8]
 800d208:	9301      	str	r3, [sp, #4]
 800d20a:	f000 fa09 	bl	800d620 <_vfiprintf_r>
 800d20e:	b003      	add	sp, #12
 800d210:	f85d eb04 	ldr.w	lr, [sp], #4
 800d214:	b004      	add	sp, #16
 800d216:	4770      	bx	lr
 800d218:	200001e4 	.word	0x200001e4

0800d21c <__sread>:
 800d21c:	b510      	push	{r4, lr}
 800d21e:	460c      	mov	r4, r1
 800d220:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d224:	f000 f87a 	bl	800d31c <_read_r>
 800d228:	2800      	cmp	r0, #0
 800d22a:	bfab      	itete	ge
 800d22c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d22e:	89a3      	ldrhlt	r3, [r4, #12]
 800d230:	181b      	addge	r3, r3, r0
 800d232:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d236:	bfac      	ite	ge
 800d238:	6563      	strge	r3, [r4, #84]	; 0x54
 800d23a:	81a3      	strhlt	r3, [r4, #12]
 800d23c:	bd10      	pop	{r4, pc}

0800d23e <__swrite>:
 800d23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d242:	461f      	mov	r7, r3
 800d244:	898b      	ldrh	r3, [r1, #12]
 800d246:	05db      	lsls	r3, r3, #23
 800d248:	4605      	mov	r5, r0
 800d24a:	460c      	mov	r4, r1
 800d24c:	4616      	mov	r6, r2
 800d24e:	d505      	bpl.n	800d25c <__swrite+0x1e>
 800d250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d254:	2302      	movs	r3, #2
 800d256:	2200      	movs	r2, #0
 800d258:	f000 f84e 	bl	800d2f8 <_lseek_r>
 800d25c:	89a3      	ldrh	r3, [r4, #12]
 800d25e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d262:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d266:	81a3      	strh	r3, [r4, #12]
 800d268:	4632      	mov	r2, r6
 800d26a:	463b      	mov	r3, r7
 800d26c:	4628      	mov	r0, r5
 800d26e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d272:	f000 b865 	b.w	800d340 <_write_r>

0800d276 <__sseek>:
 800d276:	b510      	push	{r4, lr}
 800d278:	460c      	mov	r4, r1
 800d27a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d27e:	f000 f83b 	bl	800d2f8 <_lseek_r>
 800d282:	1c43      	adds	r3, r0, #1
 800d284:	89a3      	ldrh	r3, [r4, #12]
 800d286:	bf15      	itete	ne
 800d288:	6560      	strne	r0, [r4, #84]	; 0x54
 800d28a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d28e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d292:	81a3      	strheq	r3, [r4, #12]
 800d294:	bf18      	it	ne
 800d296:	81a3      	strhne	r3, [r4, #12]
 800d298:	bd10      	pop	{r4, pc}

0800d29a <__sclose>:
 800d29a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d29e:	f000 b81b 	b.w	800d2d8 <_close_r>

0800d2a2 <memset>:
 800d2a2:	4402      	add	r2, r0
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d100      	bne.n	800d2ac <memset+0xa>
 800d2aa:	4770      	bx	lr
 800d2ac:	f803 1b01 	strb.w	r1, [r3], #1
 800d2b0:	e7f9      	b.n	800d2a6 <memset+0x4>

0800d2b2 <strncpy>:
 800d2b2:	b510      	push	{r4, lr}
 800d2b4:	3901      	subs	r1, #1
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	b132      	cbz	r2, 800d2c8 <strncpy+0x16>
 800d2ba:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d2be:	f803 4b01 	strb.w	r4, [r3], #1
 800d2c2:	3a01      	subs	r2, #1
 800d2c4:	2c00      	cmp	r4, #0
 800d2c6:	d1f7      	bne.n	800d2b8 <strncpy+0x6>
 800d2c8:	441a      	add	r2, r3
 800d2ca:	2100      	movs	r1, #0
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d100      	bne.n	800d2d2 <strncpy+0x20>
 800d2d0:	bd10      	pop	{r4, pc}
 800d2d2:	f803 1b01 	strb.w	r1, [r3], #1
 800d2d6:	e7f9      	b.n	800d2cc <strncpy+0x1a>

0800d2d8 <_close_r>:
 800d2d8:	b538      	push	{r3, r4, r5, lr}
 800d2da:	4d06      	ldr	r5, [pc, #24]	; (800d2f4 <_close_r+0x1c>)
 800d2dc:	2300      	movs	r3, #0
 800d2de:	4604      	mov	r4, r0
 800d2e0:	4608      	mov	r0, r1
 800d2e2:	602b      	str	r3, [r5, #0]
 800d2e4:	f7f4 fb4b 	bl	800197e <_close>
 800d2e8:	1c43      	adds	r3, r0, #1
 800d2ea:	d102      	bne.n	800d2f2 <_close_r+0x1a>
 800d2ec:	682b      	ldr	r3, [r5, #0]
 800d2ee:	b103      	cbz	r3, 800d2f2 <_close_r+0x1a>
 800d2f0:	6023      	str	r3, [r4, #0]
 800d2f2:	bd38      	pop	{r3, r4, r5, pc}
 800d2f4:	20006004 	.word	0x20006004

0800d2f8 <_lseek_r>:
 800d2f8:	b538      	push	{r3, r4, r5, lr}
 800d2fa:	4d07      	ldr	r5, [pc, #28]	; (800d318 <_lseek_r+0x20>)
 800d2fc:	4604      	mov	r4, r0
 800d2fe:	4608      	mov	r0, r1
 800d300:	4611      	mov	r1, r2
 800d302:	2200      	movs	r2, #0
 800d304:	602a      	str	r2, [r5, #0]
 800d306:	461a      	mov	r2, r3
 800d308:	f7f4 fb60 	bl	80019cc <_lseek>
 800d30c:	1c43      	adds	r3, r0, #1
 800d30e:	d102      	bne.n	800d316 <_lseek_r+0x1e>
 800d310:	682b      	ldr	r3, [r5, #0]
 800d312:	b103      	cbz	r3, 800d316 <_lseek_r+0x1e>
 800d314:	6023      	str	r3, [r4, #0]
 800d316:	bd38      	pop	{r3, r4, r5, pc}
 800d318:	20006004 	.word	0x20006004

0800d31c <_read_r>:
 800d31c:	b538      	push	{r3, r4, r5, lr}
 800d31e:	4d07      	ldr	r5, [pc, #28]	; (800d33c <_read_r+0x20>)
 800d320:	4604      	mov	r4, r0
 800d322:	4608      	mov	r0, r1
 800d324:	4611      	mov	r1, r2
 800d326:	2200      	movs	r2, #0
 800d328:	602a      	str	r2, [r5, #0]
 800d32a:	461a      	mov	r2, r3
 800d32c:	f7f4 faee 	bl	800190c <_read>
 800d330:	1c43      	adds	r3, r0, #1
 800d332:	d102      	bne.n	800d33a <_read_r+0x1e>
 800d334:	682b      	ldr	r3, [r5, #0]
 800d336:	b103      	cbz	r3, 800d33a <_read_r+0x1e>
 800d338:	6023      	str	r3, [r4, #0]
 800d33a:	bd38      	pop	{r3, r4, r5, pc}
 800d33c:	20006004 	.word	0x20006004

0800d340 <_write_r>:
 800d340:	b538      	push	{r3, r4, r5, lr}
 800d342:	4d07      	ldr	r5, [pc, #28]	; (800d360 <_write_r+0x20>)
 800d344:	4604      	mov	r4, r0
 800d346:	4608      	mov	r0, r1
 800d348:	4611      	mov	r1, r2
 800d34a:	2200      	movs	r2, #0
 800d34c:	602a      	str	r2, [r5, #0]
 800d34e:	461a      	mov	r2, r3
 800d350:	f7f4 faf9 	bl	8001946 <_write>
 800d354:	1c43      	adds	r3, r0, #1
 800d356:	d102      	bne.n	800d35e <_write_r+0x1e>
 800d358:	682b      	ldr	r3, [r5, #0]
 800d35a:	b103      	cbz	r3, 800d35e <_write_r+0x1e>
 800d35c:	6023      	str	r3, [r4, #0]
 800d35e:	bd38      	pop	{r3, r4, r5, pc}
 800d360:	20006004 	.word	0x20006004

0800d364 <__errno>:
 800d364:	4b01      	ldr	r3, [pc, #4]	; (800d36c <__errno+0x8>)
 800d366:	6818      	ldr	r0, [r3, #0]
 800d368:	4770      	bx	lr
 800d36a:	bf00      	nop
 800d36c:	200001e4 	.word	0x200001e4

0800d370 <__libc_init_array>:
 800d370:	b570      	push	{r4, r5, r6, lr}
 800d372:	4d0d      	ldr	r5, [pc, #52]	; (800d3a8 <__libc_init_array+0x38>)
 800d374:	4c0d      	ldr	r4, [pc, #52]	; (800d3ac <__libc_init_array+0x3c>)
 800d376:	1b64      	subs	r4, r4, r5
 800d378:	10a4      	asrs	r4, r4, #2
 800d37a:	2600      	movs	r6, #0
 800d37c:	42a6      	cmp	r6, r4
 800d37e:	d109      	bne.n	800d394 <__libc_init_array+0x24>
 800d380:	4d0b      	ldr	r5, [pc, #44]	; (800d3b0 <__libc_init_array+0x40>)
 800d382:	4c0c      	ldr	r4, [pc, #48]	; (800d3b4 <__libc_init_array+0x44>)
 800d384:	f000 fdce 	bl	800df24 <_init>
 800d388:	1b64      	subs	r4, r4, r5
 800d38a:	10a4      	asrs	r4, r4, #2
 800d38c:	2600      	movs	r6, #0
 800d38e:	42a6      	cmp	r6, r4
 800d390:	d105      	bne.n	800d39e <__libc_init_array+0x2e>
 800d392:	bd70      	pop	{r4, r5, r6, pc}
 800d394:	f855 3b04 	ldr.w	r3, [r5], #4
 800d398:	4798      	blx	r3
 800d39a:	3601      	adds	r6, #1
 800d39c:	e7ee      	b.n	800d37c <__libc_init_array+0xc>
 800d39e:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3a2:	4798      	blx	r3
 800d3a4:	3601      	adds	r6, #1
 800d3a6:	e7f2      	b.n	800d38e <__libc_init_array+0x1e>
 800d3a8:	0800e128 	.word	0x0800e128
 800d3ac:	0800e128 	.word	0x0800e128
 800d3b0:	0800e128 	.word	0x0800e128
 800d3b4:	0800e12c 	.word	0x0800e12c

0800d3b8 <__retarget_lock_init_recursive>:
 800d3b8:	4770      	bx	lr

0800d3ba <__retarget_lock_acquire_recursive>:
 800d3ba:	4770      	bx	lr

0800d3bc <__retarget_lock_release_recursive>:
 800d3bc:	4770      	bx	lr

0800d3be <memcpy>:
 800d3be:	440a      	add	r2, r1
 800d3c0:	4291      	cmp	r1, r2
 800d3c2:	f100 33ff 	add.w	r3, r0, #4294967295
 800d3c6:	d100      	bne.n	800d3ca <memcpy+0xc>
 800d3c8:	4770      	bx	lr
 800d3ca:	b510      	push	{r4, lr}
 800d3cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d3d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d3d4:	4291      	cmp	r1, r2
 800d3d6:	d1f9      	bne.n	800d3cc <memcpy+0xe>
 800d3d8:	bd10      	pop	{r4, pc}
	...

0800d3dc <_free_r>:
 800d3dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3de:	2900      	cmp	r1, #0
 800d3e0:	d044      	beq.n	800d46c <_free_r+0x90>
 800d3e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3e6:	9001      	str	r0, [sp, #4]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	f1a1 0404 	sub.w	r4, r1, #4
 800d3ee:	bfb8      	it	lt
 800d3f0:	18e4      	addlt	r4, r4, r3
 800d3f2:	f000 f8df 	bl	800d5b4 <__malloc_lock>
 800d3f6:	4a1e      	ldr	r2, [pc, #120]	; (800d470 <_free_r+0x94>)
 800d3f8:	9801      	ldr	r0, [sp, #4]
 800d3fa:	6813      	ldr	r3, [r2, #0]
 800d3fc:	b933      	cbnz	r3, 800d40c <_free_r+0x30>
 800d3fe:	6063      	str	r3, [r4, #4]
 800d400:	6014      	str	r4, [r2, #0]
 800d402:	b003      	add	sp, #12
 800d404:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d408:	f000 b8da 	b.w	800d5c0 <__malloc_unlock>
 800d40c:	42a3      	cmp	r3, r4
 800d40e:	d908      	bls.n	800d422 <_free_r+0x46>
 800d410:	6825      	ldr	r5, [r4, #0]
 800d412:	1961      	adds	r1, r4, r5
 800d414:	428b      	cmp	r3, r1
 800d416:	bf01      	itttt	eq
 800d418:	6819      	ldreq	r1, [r3, #0]
 800d41a:	685b      	ldreq	r3, [r3, #4]
 800d41c:	1949      	addeq	r1, r1, r5
 800d41e:	6021      	streq	r1, [r4, #0]
 800d420:	e7ed      	b.n	800d3fe <_free_r+0x22>
 800d422:	461a      	mov	r2, r3
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	b10b      	cbz	r3, 800d42c <_free_r+0x50>
 800d428:	42a3      	cmp	r3, r4
 800d42a:	d9fa      	bls.n	800d422 <_free_r+0x46>
 800d42c:	6811      	ldr	r1, [r2, #0]
 800d42e:	1855      	adds	r5, r2, r1
 800d430:	42a5      	cmp	r5, r4
 800d432:	d10b      	bne.n	800d44c <_free_r+0x70>
 800d434:	6824      	ldr	r4, [r4, #0]
 800d436:	4421      	add	r1, r4
 800d438:	1854      	adds	r4, r2, r1
 800d43a:	42a3      	cmp	r3, r4
 800d43c:	6011      	str	r1, [r2, #0]
 800d43e:	d1e0      	bne.n	800d402 <_free_r+0x26>
 800d440:	681c      	ldr	r4, [r3, #0]
 800d442:	685b      	ldr	r3, [r3, #4]
 800d444:	6053      	str	r3, [r2, #4]
 800d446:	440c      	add	r4, r1
 800d448:	6014      	str	r4, [r2, #0]
 800d44a:	e7da      	b.n	800d402 <_free_r+0x26>
 800d44c:	d902      	bls.n	800d454 <_free_r+0x78>
 800d44e:	230c      	movs	r3, #12
 800d450:	6003      	str	r3, [r0, #0]
 800d452:	e7d6      	b.n	800d402 <_free_r+0x26>
 800d454:	6825      	ldr	r5, [r4, #0]
 800d456:	1961      	adds	r1, r4, r5
 800d458:	428b      	cmp	r3, r1
 800d45a:	bf04      	itt	eq
 800d45c:	6819      	ldreq	r1, [r3, #0]
 800d45e:	685b      	ldreq	r3, [r3, #4]
 800d460:	6063      	str	r3, [r4, #4]
 800d462:	bf04      	itt	eq
 800d464:	1949      	addeq	r1, r1, r5
 800d466:	6021      	streq	r1, [r4, #0]
 800d468:	6054      	str	r4, [r2, #4]
 800d46a:	e7ca      	b.n	800d402 <_free_r+0x26>
 800d46c:	b003      	add	sp, #12
 800d46e:	bd30      	pop	{r4, r5, pc}
 800d470:	2000600c 	.word	0x2000600c

0800d474 <sbrk_aligned>:
 800d474:	b570      	push	{r4, r5, r6, lr}
 800d476:	4e0e      	ldr	r6, [pc, #56]	; (800d4b0 <sbrk_aligned+0x3c>)
 800d478:	460c      	mov	r4, r1
 800d47a:	6831      	ldr	r1, [r6, #0]
 800d47c:	4605      	mov	r5, r0
 800d47e:	b911      	cbnz	r1, 800d486 <sbrk_aligned+0x12>
 800d480:	f000 fcbc 	bl	800ddfc <_sbrk_r>
 800d484:	6030      	str	r0, [r6, #0]
 800d486:	4621      	mov	r1, r4
 800d488:	4628      	mov	r0, r5
 800d48a:	f000 fcb7 	bl	800ddfc <_sbrk_r>
 800d48e:	1c43      	adds	r3, r0, #1
 800d490:	d00a      	beq.n	800d4a8 <sbrk_aligned+0x34>
 800d492:	1cc4      	adds	r4, r0, #3
 800d494:	f024 0403 	bic.w	r4, r4, #3
 800d498:	42a0      	cmp	r0, r4
 800d49a:	d007      	beq.n	800d4ac <sbrk_aligned+0x38>
 800d49c:	1a21      	subs	r1, r4, r0
 800d49e:	4628      	mov	r0, r5
 800d4a0:	f000 fcac 	bl	800ddfc <_sbrk_r>
 800d4a4:	3001      	adds	r0, #1
 800d4a6:	d101      	bne.n	800d4ac <sbrk_aligned+0x38>
 800d4a8:	f04f 34ff 	mov.w	r4, #4294967295
 800d4ac:	4620      	mov	r0, r4
 800d4ae:	bd70      	pop	{r4, r5, r6, pc}
 800d4b0:	20006010 	.word	0x20006010

0800d4b4 <_malloc_r>:
 800d4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4b8:	1ccd      	adds	r5, r1, #3
 800d4ba:	f025 0503 	bic.w	r5, r5, #3
 800d4be:	3508      	adds	r5, #8
 800d4c0:	2d0c      	cmp	r5, #12
 800d4c2:	bf38      	it	cc
 800d4c4:	250c      	movcc	r5, #12
 800d4c6:	2d00      	cmp	r5, #0
 800d4c8:	4607      	mov	r7, r0
 800d4ca:	db01      	blt.n	800d4d0 <_malloc_r+0x1c>
 800d4cc:	42a9      	cmp	r1, r5
 800d4ce:	d905      	bls.n	800d4dc <_malloc_r+0x28>
 800d4d0:	230c      	movs	r3, #12
 800d4d2:	603b      	str	r3, [r7, #0]
 800d4d4:	2600      	movs	r6, #0
 800d4d6:	4630      	mov	r0, r6
 800d4d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d4dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d5b0 <_malloc_r+0xfc>
 800d4e0:	f000 f868 	bl	800d5b4 <__malloc_lock>
 800d4e4:	f8d8 3000 	ldr.w	r3, [r8]
 800d4e8:	461c      	mov	r4, r3
 800d4ea:	bb5c      	cbnz	r4, 800d544 <_malloc_r+0x90>
 800d4ec:	4629      	mov	r1, r5
 800d4ee:	4638      	mov	r0, r7
 800d4f0:	f7ff ffc0 	bl	800d474 <sbrk_aligned>
 800d4f4:	1c43      	adds	r3, r0, #1
 800d4f6:	4604      	mov	r4, r0
 800d4f8:	d155      	bne.n	800d5a6 <_malloc_r+0xf2>
 800d4fa:	f8d8 4000 	ldr.w	r4, [r8]
 800d4fe:	4626      	mov	r6, r4
 800d500:	2e00      	cmp	r6, #0
 800d502:	d145      	bne.n	800d590 <_malloc_r+0xdc>
 800d504:	2c00      	cmp	r4, #0
 800d506:	d048      	beq.n	800d59a <_malloc_r+0xe6>
 800d508:	6823      	ldr	r3, [r4, #0]
 800d50a:	4631      	mov	r1, r6
 800d50c:	4638      	mov	r0, r7
 800d50e:	eb04 0903 	add.w	r9, r4, r3
 800d512:	f000 fc73 	bl	800ddfc <_sbrk_r>
 800d516:	4581      	cmp	r9, r0
 800d518:	d13f      	bne.n	800d59a <_malloc_r+0xe6>
 800d51a:	6821      	ldr	r1, [r4, #0]
 800d51c:	1a6d      	subs	r5, r5, r1
 800d51e:	4629      	mov	r1, r5
 800d520:	4638      	mov	r0, r7
 800d522:	f7ff ffa7 	bl	800d474 <sbrk_aligned>
 800d526:	3001      	adds	r0, #1
 800d528:	d037      	beq.n	800d59a <_malloc_r+0xe6>
 800d52a:	6823      	ldr	r3, [r4, #0]
 800d52c:	442b      	add	r3, r5
 800d52e:	6023      	str	r3, [r4, #0]
 800d530:	f8d8 3000 	ldr.w	r3, [r8]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d038      	beq.n	800d5aa <_malloc_r+0xf6>
 800d538:	685a      	ldr	r2, [r3, #4]
 800d53a:	42a2      	cmp	r2, r4
 800d53c:	d12b      	bne.n	800d596 <_malloc_r+0xe2>
 800d53e:	2200      	movs	r2, #0
 800d540:	605a      	str	r2, [r3, #4]
 800d542:	e00f      	b.n	800d564 <_malloc_r+0xb0>
 800d544:	6822      	ldr	r2, [r4, #0]
 800d546:	1b52      	subs	r2, r2, r5
 800d548:	d41f      	bmi.n	800d58a <_malloc_r+0xd6>
 800d54a:	2a0b      	cmp	r2, #11
 800d54c:	d917      	bls.n	800d57e <_malloc_r+0xca>
 800d54e:	1961      	adds	r1, r4, r5
 800d550:	42a3      	cmp	r3, r4
 800d552:	6025      	str	r5, [r4, #0]
 800d554:	bf18      	it	ne
 800d556:	6059      	strne	r1, [r3, #4]
 800d558:	6863      	ldr	r3, [r4, #4]
 800d55a:	bf08      	it	eq
 800d55c:	f8c8 1000 	streq.w	r1, [r8]
 800d560:	5162      	str	r2, [r4, r5]
 800d562:	604b      	str	r3, [r1, #4]
 800d564:	4638      	mov	r0, r7
 800d566:	f104 060b 	add.w	r6, r4, #11
 800d56a:	f000 f829 	bl	800d5c0 <__malloc_unlock>
 800d56e:	f026 0607 	bic.w	r6, r6, #7
 800d572:	1d23      	adds	r3, r4, #4
 800d574:	1af2      	subs	r2, r6, r3
 800d576:	d0ae      	beq.n	800d4d6 <_malloc_r+0x22>
 800d578:	1b9b      	subs	r3, r3, r6
 800d57a:	50a3      	str	r3, [r4, r2]
 800d57c:	e7ab      	b.n	800d4d6 <_malloc_r+0x22>
 800d57e:	42a3      	cmp	r3, r4
 800d580:	6862      	ldr	r2, [r4, #4]
 800d582:	d1dd      	bne.n	800d540 <_malloc_r+0x8c>
 800d584:	f8c8 2000 	str.w	r2, [r8]
 800d588:	e7ec      	b.n	800d564 <_malloc_r+0xb0>
 800d58a:	4623      	mov	r3, r4
 800d58c:	6864      	ldr	r4, [r4, #4]
 800d58e:	e7ac      	b.n	800d4ea <_malloc_r+0x36>
 800d590:	4634      	mov	r4, r6
 800d592:	6876      	ldr	r6, [r6, #4]
 800d594:	e7b4      	b.n	800d500 <_malloc_r+0x4c>
 800d596:	4613      	mov	r3, r2
 800d598:	e7cc      	b.n	800d534 <_malloc_r+0x80>
 800d59a:	230c      	movs	r3, #12
 800d59c:	603b      	str	r3, [r7, #0]
 800d59e:	4638      	mov	r0, r7
 800d5a0:	f000 f80e 	bl	800d5c0 <__malloc_unlock>
 800d5a4:	e797      	b.n	800d4d6 <_malloc_r+0x22>
 800d5a6:	6025      	str	r5, [r4, #0]
 800d5a8:	e7dc      	b.n	800d564 <_malloc_r+0xb0>
 800d5aa:	605b      	str	r3, [r3, #4]
 800d5ac:	deff      	udf	#255	; 0xff
 800d5ae:	bf00      	nop
 800d5b0:	2000600c 	.word	0x2000600c

0800d5b4 <__malloc_lock>:
 800d5b4:	4801      	ldr	r0, [pc, #4]	; (800d5bc <__malloc_lock+0x8>)
 800d5b6:	f7ff bf00 	b.w	800d3ba <__retarget_lock_acquire_recursive>
 800d5ba:	bf00      	nop
 800d5bc:	20006008 	.word	0x20006008

0800d5c0 <__malloc_unlock>:
 800d5c0:	4801      	ldr	r0, [pc, #4]	; (800d5c8 <__malloc_unlock+0x8>)
 800d5c2:	f7ff befb 	b.w	800d3bc <__retarget_lock_release_recursive>
 800d5c6:	bf00      	nop
 800d5c8:	20006008 	.word	0x20006008

0800d5cc <__sfputc_r>:
 800d5cc:	6893      	ldr	r3, [r2, #8]
 800d5ce:	3b01      	subs	r3, #1
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	b410      	push	{r4}
 800d5d4:	6093      	str	r3, [r2, #8]
 800d5d6:	da08      	bge.n	800d5ea <__sfputc_r+0x1e>
 800d5d8:	6994      	ldr	r4, [r2, #24]
 800d5da:	42a3      	cmp	r3, r4
 800d5dc:	db01      	blt.n	800d5e2 <__sfputc_r+0x16>
 800d5de:	290a      	cmp	r1, #10
 800d5e0:	d103      	bne.n	800d5ea <__sfputc_r+0x1e>
 800d5e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5e6:	f000 bb73 	b.w	800dcd0 <__swbuf_r>
 800d5ea:	6813      	ldr	r3, [r2, #0]
 800d5ec:	1c58      	adds	r0, r3, #1
 800d5ee:	6010      	str	r0, [r2, #0]
 800d5f0:	7019      	strb	r1, [r3, #0]
 800d5f2:	4608      	mov	r0, r1
 800d5f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d5f8:	4770      	bx	lr

0800d5fa <__sfputs_r>:
 800d5fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5fc:	4606      	mov	r6, r0
 800d5fe:	460f      	mov	r7, r1
 800d600:	4614      	mov	r4, r2
 800d602:	18d5      	adds	r5, r2, r3
 800d604:	42ac      	cmp	r4, r5
 800d606:	d101      	bne.n	800d60c <__sfputs_r+0x12>
 800d608:	2000      	movs	r0, #0
 800d60a:	e007      	b.n	800d61c <__sfputs_r+0x22>
 800d60c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d610:	463a      	mov	r2, r7
 800d612:	4630      	mov	r0, r6
 800d614:	f7ff ffda 	bl	800d5cc <__sfputc_r>
 800d618:	1c43      	adds	r3, r0, #1
 800d61a:	d1f3      	bne.n	800d604 <__sfputs_r+0xa>
 800d61c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d620 <_vfiprintf_r>:
 800d620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d624:	460d      	mov	r5, r1
 800d626:	b09d      	sub	sp, #116	; 0x74
 800d628:	4614      	mov	r4, r2
 800d62a:	4698      	mov	r8, r3
 800d62c:	4606      	mov	r6, r0
 800d62e:	b118      	cbz	r0, 800d638 <_vfiprintf_r+0x18>
 800d630:	6a03      	ldr	r3, [r0, #32]
 800d632:	b90b      	cbnz	r3, 800d638 <_vfiprintf_r+0x18>
 800d634:	f7ff fdaa 	bl	800d18c <__sinit>
 800d638:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d63a:	07d9      	lsls	r1, r3, #31
 800d63c:	d405      	bmi.n	800d64a <_vfiprintf_r+0x2a>
 800d63e:	89ab      	ldrh	r3, [r5, #12]
 800d640:	059a      	lsls	r2, r3, #22
 800d642:	d402      	bmi.n	800d64a <_vfiprintf_r+0x2a>
 800d644:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d646:	f7ff feb8 	bl	800d3ba <__retarget_lock_acquire_recursive>
 800d64a:	89ab      	ldrh	r3, [r5, #12]
 800d64c:	071b      	lsls	r3, r3, #28
 800d64e:	d501      	bpl.n	800d654 <_vfiprintf_r+0x34>
 800d650:	692b      	ldr	r3, [r5, #16]
 800d652:	b99b      	cbnz	r3, 800d67c <_vfiprintf_r+0x5c>
 800d654:	4629      	mov	r1, r5
 800d656:	4630      	mov	r0, r6
 800d658:	f000 fb78 	bl	800dd4c <__swsetup_r>
 800d65c:	b170      	cbz	r0, 800d67c <_vfiprintf_r+0x5c>
 800d65e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d660:	07dc      	lsls	r4, r3, #31
 800d662:	d504      	bpl.n	800d66e <_vfiprintf_r+0x4e>
 800d664:	f04f 30ff 	mov.w	r0, #4294967295
 800d668:	b01d      	add	sp, #116	; 0x74
 800d66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d66e:	89ab      	ldrh	r3, [r5, #12]
 800d670:	0598      	lsls	r0, r3, #22
 800d672:	d4f7      	bmi.n	800d664 <_vfiprintf_r+0x44>
 800d674:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d676:	f7ff fea1 	bl	800d3bc <__retarget_lock_release_recursive>
 800d67a:	e7f3      	b.n	800d664 <_vfiprintf_r+0x44>
 800d67c:	2300      	movs	r3, #0
 800d67e:	9309      	str	r3, [sp, #36]	; 0x24
 800d680:	2320      	movs	r3, #32
 800d682:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d686:	f8cd 800c 	str.w	r8, [sp, #12]
 800d68a:	2330      	movs	r3, #48	; 0x30
 800d68c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d840 <_vfiprintf_r+0x220>
 800d690:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d694:	f04f 0901 	mov.w	r9, #1
 800d698:	4623      	mov	r3, r4
 800d69a:	469a      	mov	sl, r3
 800d69c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6a0:	b10a      	cbz	r2, 800d6a6 <_vfiprintf_r+0x86>
 800d6a2:	2a25      	cmp	r2, #37	; 0x25
 800d6a4:	d1f9      	bne.n	800d69a <_vfiprintf_r+0x7a>
 800d6a6:	ebba 0b04 	subs.w	fp, sl, r4
 800d6aa:	d00b      	beq.n	800d6c4 <_vfiprintf_r+0xa4>
 800d6ac:	465b      	mov	r3, fp
 800d6ae:	4622      	mov	r2, r4
 800d6b0:	4629      	mov	r1, r5
 800d6b2:	4630      	mov	r0, r6
 800d6b4:	f7ff ffa1 	bl	800d5fa <__sfputs_r>
 800d6b8:	3001      	adds	r0, #1
 800d6ba:	f000 80a9 	beq.w	800d810 <_vfiprintf_r+0x1f0>
 800d6be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6c0:	445a      	add	r2, fp
 800d6c2:	9209      	str	r2, [sp, #36]	; 0x24
 800d6c4:	f89a 3000 	ldrb.w	r3, [sl]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	f000 80a1 	beq.w	800d810 <_vfiprintf_r+0x1f0>
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d6d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6d8:	f10a 0a01 	add.w	sl, sl, #1
 800d6dc:	9304      	str	r3, [sp, #16]
 800d6de:	9307      	str	r3, [sp, #28]
 800d6e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6e4:	931a      	str	r3, [sp, #104]	; 0x68
 800d6e6:	4654      	mov	r4, sl
 800d6e8:	2205      	movs	r2, #5
 800d6ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6ee:	4854      	ldr	r0, [pc, #336]	; (800d840 <_vfiprintf_r+0x220>)
 800d6f0:	f7f2 fda6 	bl	8000240 <memchr>
 800d6f4:	9a04      	ldr	r2, [sp, #16]
 800d6f6:	b9d8      	cbnz	r0, 800d730 <_vfiprintf_r+0x110>
 800d6f8:	06d1      	lsls	r1, r2, #27
 800d6fa:	bf44      	itt	mi
 800d6fc:	2320      	movmi	r3, #32
 800d6fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d702:	0713      	lsls	r3, r2, #28
 800d704:	bf44      	itt	mi
 800d706:	232b      	movmi	r3, #43	; 0x2b
 800d708:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d70c:	f89a 3000 	ldrb.w	r3, [sl]
 800d710:	2b2a      	cmp	r3, #42	; 0x2a
 800d712:	d015      	beq.n	800d740 <_vfiprintf_r+0x120>
 800d714:	9a07      	ldr	r2, [sp, #28]
 800d716:	4654      	mov	r4, sl
 800d718:	2000      	movs	r0, #0
 800d71a:	f04f 0c0a 	mov.w	ip, #10
 800d71e:	4621      	mov	r1, r4
 800d720:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d724:	3b30      	subs	r3, #48	; 0x30
 800d726:	2b09      	cmp	r3, #9
 800d728:	d94d      	bls.n	800d7c6 <_vfiprintf_r+0x1a6>
 800d72a:	b1b0      	cbz	r0, 800d75a <_vfiprintf_r+0x13a>
 800d72c:	9207      	str	r2, [sp, #28]
 800d72e:	e014      	b.n	800d75a <_vfiprintf_r+0x13a>
 800d730:	eba0 0308 	sub.w	r3, r0, r8
 800d734:	fa09 f303 	lsl.w	r3, r9, r3
 800d738:	4313      	orrs	r3, r2
 800d73a:	9304      	str	r3, [sp, #16]
 800d73c:	46a2      	mov	sl, r4
 800d73e:	e7d2      	b.n	800d6e6 <_vfiprintf_r+0xc6>
 800d740:	9b03      	ldr	r3, [sp, #12]
 800d742:	1d19      	adds	r1, r3, #4
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	9103      	str	r1, [sp, #12]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	bfbb      	ittet	lt
 800d74c:	425b      	neglt	r3, r3
 800d74e:	f042 0202 	orrlt.w	r2, r2, #2
 800d752:	9307      	strge	r3, [sp, #28]
 800d754:	9307      	strlt	r3, [sp, #28]
 800d756:	bfb8      	it	lt
 800d758:	9204      	strlt	r2, [sp, #16]
 800d75a:	7823      	ldrb	r3, [r4, #0]
 800d75c:	2b2e      	cmp	r3, #46	; 0x2e
 800d75e:	d10c      	bne.n	800d77a <_vfiprintf_r+0x15a>
 800d760:	7863      	ldrb	r3, [r4, #1]
 800d762:	2b2a      	cmp	r3, #42	; 0x2a
 800d764:	d134      	bne.n	800d7d0 <_vfiprintf_r+0x1b0>
 800d766:	9b03      	ldr	r3, [sp, #12]
 800d768:	1d1a      	adds	r2, r3, #4
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	9203      	str	r2, [sp, #12]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	bfb8      	it	lt
 800d772:	f04f 33ff 	movlt.w	r3, #4294967295
 800d776:	3402      	adds	r4, #2
 800d778:	9305      	str	r3, [sp, #20]
 800d77a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d850 <_vfiprintf_r+0x230>
 800d77e:	7821      	ldrb	r1, [r4, #0]
 800d780:	2203      	movs	r2, #3
 800d782:	4650      	mov	r0, sl
 800d784:	f7f2 fd5c 	bl	8000240 <memchr>
 800d788:	b138      	cbz	r0, 800d79a <_vfiprintf_r+0x17a>
 800d78a:	9b04      	ldr	r3, [sp, #16]
 800d78c:	eba0 000a 	sub.w	r0, r0, sl
 800d790:	2240      	movs	r2, #64	; 0x40
 800d792:	4082      	lsls	r2, r0
 800d794:	4313      	orrs	r3, r2
 800d796:	3401      	adds	r4, #1
 800d798:	9304      	str	r3, [sp, #16]
 800d79a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d79e:	4829      	ldr	r0, [pc, #164]	; (800d844 <_vfiprintf_r+0x224>)
 800d7a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7a4:	2206      	movs	r2, #6
 800d7a6:	f7f2 fd4b 	bl	8000240 <memchr>
 800d7aa:	2800      	cmp	r0, #0
 800d7ac:	d03f      	beq.n	800d82e <_vfiprintf_r+0x20e>
 800d7ae:	4b26      	ldr	r3, [pc, #152]	; (800d848 <_vfiprintf_r+0x228>)
 800d7b0:	bb1b      	cbnz	r3, 800d7fa <_vfiprintf_r+0x1da>
 800d7b2:	9b03      	ldr	r3, [sp, #12]
 800d7b4:	3307      	adds	r3, #7
 800d7b6:	f023 0307 	bic.w	r3, r3, #7
 800d7ba:	3308      	adds	r3, #8
 800d7bc:	9303      	str	r3, [sp, #12]
 800d7be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7c0:	443b      	add	r3, r7
 800d7c2:	9309      	str	r3, [sp, #36]	; 0x24
 800d7c4:	e768      	b.n	800d698 <_vfiprintf_r+0x78>
 800d7c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7ca:	460c      	mov	r4, r1
 800d7cc:	2001      	movs	r0, #1
 800d7ce:	e7a6      	b.n	800d71e <_vfiprintf_r+0xfe>
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	3401      	adds	r4, #1
 800d7d4:	9305      	str	r3, [sp, #20]
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	f04f 0c0a 	mov.w	ip, #10
 800d7dc:	4620      	mov	r0, r4
 800d7de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7e2:	3a30      	subs	r2, #48	; 0x30
 800d7e4:	2a09      	cmp	r2, #9
 800d7e6:	d903      	bls.n	800d7f0 <_vfiprintf_r+0x1d0>
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d0c6      	beq.n	800d77a <_vfiprintf_r+0x15a>
 800d7ec:	9105      	str	r1, [sp, #20]
 800d7ee:	e7c4      	b.n	800d77a <_vfiprintf_r+0x15a>
 800d7f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7f4:	4604      	mov	r4, r0
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	e7f0      	b.n	800d7dc <_vfiprintf_r+0x1bc>
 800d7fa:	ab03      	add	r3, sp, #12
 800d7fc:	9300      	str	r3, [sp, #0]
 800d7fe:	462a      	mov	r2, r5
 800d800:	4b12      	ldr	r3, [pc, #72]	; (800d84c <_vfiprintf_r+0x22c>)
 800d802:	a904      	add	r1, sp, #16
 800d804:	4630      	mov	r0, r6
 800d806:	f3af 8000 	nop.w
 800d80a:	4607      	mov	r7, r0
 800d80c:	1c78      	adds	r0, r7, #1
 800d80e:	d1d6      	bne.n	800d7be <_vfiprintf_r+0x19e>
 800d810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d812:	07d9      	lsls	r1, r3, #31
 800d814:	d405      	bmi.n	800d822 <_vfiprintf_r+0x202>
 800d816:	89ab      	ldrh	r3, [r5, #12]
 800d818:	059a      	lsls	r2, r3, #22
 800d81a:	d402      	bmi.n	800d822 <_vfiprintf_r+0x202>
 800d81c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d81e:	f7ff fdcd 	bl	800d3bc <__retarget_lock_release_recursive>
 800d822:	89ab      	ldrh	r3, [r5, #12]
 800d824:	065b      	lsls	r3, r3, #25
 800d826:	f53f af1d 	bmi.w	800d664 <_vfiprintf_r+0x44>
 800d82a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d82c:	e71c      	b.n	800d668 <_vfiprintf_r+0x48>
 800d82e:	ab03      	add	r3, sp, #12
 800d830:	9300      	str	r3, [sp, #0]
 800d832:	462a      	mov	r2, r5
 800d834:	4b05      	ldr	r3, [pc, #20]	; (800d84c <_vfiprintf_r+0x22c>)
 800d836:	a904      	add	r1, sp, #16
 800d838:	4630      	mov	r0, r6
 800d83a:	f000 f879 	bl	800d930 <_printf_i>
 800d83e:	e7e4      	b.n	800d80a <_vfiprintf_r+0x1ea>
 800d840:	0800e0ed 	.word	0x0800e0ed
 800d844:	0800e0f7 	.word	0x0800e0f7
 800d848:	00000000 	.word	0x00000000
 800d84c:	0800d5fb 	.word	0x0800d5fb
 800d850:	0800e0f3 	.word	0x0800e0f3

0800d854 <_printf_common>:
 800d854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d858:	4616      	mov	r6, r2
 800d85a:	4699      	mov	r9, r3
 800d85c:	688a      	ldr	r2, [r1, #8]
 800d85e:	690b      	ldr	r3, [r1, #16]
 800d860:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d864:	4293      	cmp	r3, r2
 800d866:	bfb8      	it	lt
 800d868:	4613      	movlt	r3, r2
 800d86a:	6033      	str	r3, [r6, #0]
 800d86c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d870:	4607      	mov	r7, r0
 800d872:	460c      	mov	r4, r1
 800d874:	b10a      	cbz	r2, 800d87a <_printf_common+0x26>
 800d876:	3301      	adds	r3, #1
 800d878:	6033      	str	r3, [r6, #0]
 800d87a:	6823      	ldr	r3, [r4, #0]
 800d87c:	0699      	lsls	r1, r3, #26
 800d87e:	bf42      	ittt	mi
 800d880:	6833      	ldrmi	r3, [r6, #0]
 800d882:	3302      	addmi	r3, #2
 800d884:	6033      	strmi	r3, [r6, #0]
 800d886:	6825      	ldr	r5, [r4, #0]
 800d888:	f015 0506 	ands.w	r5, r5, #6
 800d88c:	d106      	bne.n	800d89c <_printf_common+0x48>
 800d88e:	f104 0a19 	add.w	sl, r4, #25
 800d892:	68e3      	ldr	r3, [r4, #12]
 800d894:	6832      	ldr	r2, [r6, #0]
 800d896:	1a9b      	subs	r3, r3, r2
 800d898:	42ab      	cmp	r3, r5
 800d89a:	dc26      	bgt.n	800d8ea <_printf_common+0x96>
 800d89c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d8a0:	1e13      	subs	r3, r2, #0
 800d8a2:	6822      	ldr	r2, [r4, #0]
 800d8a4:	bf18      	it	ne
 800d8a6:	2301      	movne	r3, #1
 800d8a8:	0692      	lsls	r2, r2, #26
 800d8aa:	d42b      	bmi.n	800d904 <_printf_common+0xb0>
 800d8ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d8b0:	4649      	mov	r1, r9
 800d8b2:	4638      	mov	r0, r7
 800d8b4:	47c0      	blx	r8
 800d8b6:	3001      	adds	r0, #1
 800d8b8:	d01e      	beq.n	800d8f8 <_printf_common+0xa4>
 800d8ba:	6823      	ldr	r3, [r4, #0]
 800d8bc:	6922      	ldr	r2, [r4, #16]
 800d8be:	f003 0306 	and.w	r3, r3, #6
 800d8c2:	2b04      	cmp	r3, #4
 800d8c4:	bf02      	ittt	eq
 800d8c6:	68e5      	ldreq	r5, [r4, #12]
 800d8c8:	6833      	ldreq	r3, [r6, #0]
 800d8ca:	1aed      	subeq	r5, r5, r3
 800d8cc:	68a3      	ldr	r3, [r4, #8]
 800d8ce:	bf0c      	ite	eq
 800d8d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d8d4:	2500      	movne	r5, #0
 800d8d6:	4293      	cmp	r3, r2
 800d8d8:	bfc4      	itt	gt
 800d8da:	1a9b      	subgt	r3, r3, r2
 800d8dc:	18ed      	addgt	r5, r5, r3
 800d8de:	2600      	movs	r6, #0
 800d8e0:	341a      	adds	r4, #26
 800d8e2:	42b5      	cmp	r5, r6
 800d8e4:	d11a      	bne.n	800d91c <_printf_common+0xc8>
 800d8e6:	2000      	movs	r0, #0
 800d8e8:	e008      	b.n	800d8fc <_printf_common+0xa8>
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	4652      	mov	r2, sl
 800d8ee:	4649      	mov	r1, r9
 800d8f0:	4638      	mov	r0, r7
 800d8f2:	47c0      	blx	r8
 800d8f4:	3001      	adds	r0, #1
 800d8f6:	d103      	bne.n	800d900 <_printf_common+0xac>
 800d8f8:	f04f 30ff 	mov.w	r0, #4294967295
 800d8fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d900:	3501      	adds	r5, #1
 800d902:	e7c6      	b.n	800d892 <_printf_common+0x3e>
 800d904:	18e1      	adds	r1, r4, r3
 800d906:	1c5a      	adds	r2, r3, #1
 800d908:	2030      	movs	r0, #48	; 0x30
 800d90a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d90e:	4422      	add	r2, r4
 800d910:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d914:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d918:	3302      	adds	r3, #2
 800d91a:	e7c7      	b.n	800d8ac <_printf_common+0x58>
 800d91c:	2301      	movs	r3, #1
 800d91e:	4622      	mov	r2, r4
 800d920:	4649      	mov	r1, r9
 800d922:	4638      	mov	r0, r7
 800d924:	47c0      	blx	r8
 800d926:	3001      	adds	r0, #1
 800d928:	d0e6      	beq.n	800d8f8 <_printf_common+0xa4>
 800d92a:	3601      	adds	r6, #1
 800d92c:	e7d9      	b.n	800d8e2 <_printf_common+0x8e>
	...

0800d930 <_printf_i>:
 800d930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d934:	7e0f      	ldrb	r7, [r1, #24]
 800d936:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d938:	2f78      	cmp	r7, #120	; 0x78
 800d93a:	4691      	mov	r9, r2
 800d93c:	4680      	mov	r8, r0
 800d93e:	460c      	mov	r4, r1
 800d940:	469a      	mov	sl, r3
 800d942:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d946:	d807      	bhi.n	800d958 <_printf_i+0x28>
 800d948:	2f62      	cmp	r7, #98	; 0x62
 800d94a:	d80a      	bhi.n	800d962 <_printf_i+0x32>
 800d94c:	2f00      	cmp	r7, #0
 800d94e:	f000 80d4 	beq.w	800dafa <_printf_i+0x1ca>
 800d952:	2f58      	cmp	r7, #88	; 0x58
 800d954:	f000 80c0 	beq.w	800dad8 <_printf_i+0x1a8>
 800d958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d95c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d960:	e03a      	b.n	800d9d8 <_printf_i+0xa8>
 800d962:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d966:	2b15      	cmp	r3, #21
 800d968:	d8f6      	bhi.n	800d958 <_printf_i+0x28>
 800d96a:	a101      	add	r1, pc, #4	; (adr r1, 800d970 <_printf_i+0x40>)
 800d96c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d970:	0800d9c9 	.word	0x0800d9c9
 800d974:	0800d9dd 	.word	0x0800d9dd
 800d978:	0800d959 	.word	0x0800d959
 800d97c:	0800d959 	.word	0x0800d959
 800d980:	0800d959 	.word	0x0800d959
 800d984:	0800d959 	.word	0x0800d959
 800d988:	0800d9dd 	.word	0x0800d9dd
 800d98c:	0800d959 	.word	0x0800d959
 800d990:	0800d959 	.word	0x0800d959
 800d994:	0800d959 	.word	0x0800d959
 800d998:	0800d959 	.word	0x0800d959
 800d99c:	0800dae1 	.word	0x0800dae1
 800d9a0:	0800da09 	.word	0x0800da09
 800d9a4:	0800da9b 	.word	0x0800da9b
 800d9a8:	0800d959 	.word	0x0800d959
 800d9ac:	0800d959 	.word	0x0800d959
 800d9b0:	0800db03 	.word	0x0800db03
 800d9b4:	0800d959 	.word	0x0800d959
 800d9b8:	0800da09 	.word	0x0800da09
 800d9bc:	0800d959 	.word	0x0800d959
 800d9c0:	0800d959 	.word	0x0800d959
 800d9c4:	0800daa3 	.word	0x0800daa3
 800d9c8:	682b      	ldr	r3, [r5, #0]
 800d9ca:	1d1a      	adds	r2, r3, #4
 800d9cc:	681b      	ldr	r3, [r3, #0]
 800d9ce:	602a      	str	r2, [r5, #0]
 800d9d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d9d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d9d8:	2301      	movs	r3, #1
 800d9da:	e09f      	b.n	800db1c <_printf_i+0x1ec>
 800d9dc:	6820      	ldr	r0, [r4, #0]
 800d9de:	682b      	ldr	r3, [r5, #0]
 800d9e0:	0607      	lsls	r7, r0, #24
 800d9e2:	f103 0104 	add.w	r1, r3, #4
 800d9e6:	6029      	str	r1, [r5, #0]
 800d9e8:	d501      	bpl.n	800d9ee <_printf_i+0xbe>
 800d9ea:	681e      	ldr	r6, [r3, #0]
 800d9ec:	e003      	b.n	800d9f6 <_printf_i+0xc6>
 800d9ee:	0646      	lsls	r6, r0, #25
 800d9f0:	d5fb      	bpl.n	800d9ea <_printf_i+0xba>
 800d9f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d9f6:	2e00      	cmp	r6, #0
 800d9f8:	da03      	bge.n	800da02 <_printf_i+0xd2>
 800d9fa:	232d      	movs	r3, #45	; 0x2d
 800d9fc:	4276      	negs	r6, r6
 800d9fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800da02:	485a      	ldr	r0, [pc, #360]	; (800db6c <_printf_i+0x23c>)
 800da04:	230a      	movs	r3, #10
 800da06:	e012      	b.n	800da2e <_printf_i+0xfe>
 800da08:	682b      	ldr	r3, [r5, #0]
 800da0a:	6820      	ldr	r0, [r4, #0]
 800da0c:	1d19      	adds	r1, r3, #4
 800da0e:	6029      	str	r1, [r5, #0]
 800da10:	0605      	lsls	r5, r0, #24
 800da12:	d501      	bpl.n	800da18 <_printf_i+0xe8>
 800da14:	681e      	ldr	r6, [r3, #0]
 800da16:	e002      	b.n	800da1e <_printf_i+0xee>
 800da18:	0641      	lsls	r1, r0, #25
 800da1a:	d5fb      	bpl.n	800da14 <_printf_i+0xe4>
 800da1c:	881e      	ldrh	r6, [r3, #0]
 800da1e:	4853      	ldr	r0, [pc, #332]	; (800db6c <_printf_i+0x23c>)
 800da20:	2f6f      	cmp	r7, #111	; 0x6f
 800da22:	bf0c      	ite	eq
 800da24:	2308      	moveq	r3, #8
 800da26:	230a      	movne	r3, #10
 800da28:	2100      	movs	r1, #0
 800da2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800da2e:	6865      	ldr	r5, [r4, #4]
 800da30:	60a5      	str	r5, [r4, #8]
 800da32:	2d00      	cmp	r5, #0
 800da34:	bfa2      	ittt	ge
 800da36:	6821      	ldrge	r1, [r4, #0]
 800da38:	f021 0104 	bicge.w	r1, r1, #4
 800da3c:	6021      	strge	r1, [r4, #0]
 800da3e:	b90e      	cbnz	r6, 800da44 <_printf_i+0x114>
 800da40:	2d00      	cmp	r5, #0
 800da42:	d04b      	beq.n	800dadc <_printf_i+0x1ac>
 800da44:	4615      	mov	r5, r2
 800da46:	fbb6 f1f3 	udiv	r1, r6, r3
 800da4a:	fb03 6711 	mls	r7, r3, r1, r6
 800da4e:	5dc7      	ldrb	r7, [r0, r7]
 800da50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800da54:	4637      	mov	r7, r6
 800da56:	42bb      	cmp	r3, r7
 800da58:	460e      	mov	r6, r1
 800da5a:	d9f4      	bls.n	800da46 <_printf_i+0x116>
 800da5c:	2b08      	cmp	r3, #8
 800da5e:	d10b      	bne.n	800da78 <_printf_i+0x148>
 800da60:	6823      	ldr	r3, [r4, #0]
 800da62:	07de      	lsls	r6, r3, #31
 800da64:	d508      	bpl.n	800da78 <_printf_i+0x148>
 800da66:	6923      	ldr	r3, [r4, #16]
 800da68:	6861      	ldr	r1, [r4, #4]
 800da6a:	4299      	cmp	r1, r3
 800da6c:	bfde      	ittt	le
 800da6e:	2330      	movle	r3, #48	; 0x30
 800da70:	f805 3c01 	strble.w	r3, [r5, #-1]
 800da74:	f105 35ff 	addle.w	r5, r5, #4294967295
 800da78:	1b52      	subs	r2, r2, r5
 800da7a:	6122      	str	r2, [r4, #16]
 800da7c:	f8cd a000 	str.w	sl, [sp]
 800da80:	464b      	mov	r3, r9
 800da82:	aa03      	add	r2, sp, #12
 800da84:	4621      	mov	r1, r4
 800da86:	4640      	mov	r0, r8
 800da88:	f7ff fee4 	bl	800d854 <_printf_common>
 800da8c:	3001      	adds	r0, #1
 800da8e:	d14a      	bne.n	800db26 <_printf_i+0x1f6>
 800da90:	f04f 30ff 	mov.w	r0, #4294967295
 800da94:	b004      	add	sp, #16
 800da96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da9a:	6823      	ldr	r3, [r4, #0]
 800da9c:	f043 0320 	orr.w	r3, r3, #32
 800daa0:	6023      	str	r3, [r4, #0]
 800daa2:	4833      	ldr	r0, [pc, #204]	; (800db70 <_printf_i+0x240>)
 800daa4:	2778      	movs	r7, #120	; 0x78
 800daa6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800daaa:	6823      	ldr	r3, [r4, #0]
 800daac:	6829      	ldr	r1, [r5, #0]
 800daae:	061f      	lsls	r7, r3, #24
 800dab0:	f851 6b04 	ldr.w	r6, [r1], #4
 800dab4:	d402      	bmi.n	800dabc <_printf_i+0x18c>
 800dab6:	065f      	lsls	r7, r3, #25
 800dab8:	bf48      	it	mi
 800daba:	b2b6      	uxthmi	r6, r6
 800dabc:	07df      	lsls	r7, r3, #31
 800dabe:	bf48      	it	mi
 800dac0:	f043 0320 	orrmi.w	r3, r3, #32
 800dac4:	6029      	str	r1, [r5, #0]
 800dac6:	bf48      	it	mi
 800dac8:	6023      	strmi	r3, [r4, #0]
 800daca:	b91e      	cbnz	r6, 800dad4 <_printf_i+0x1a4>
 800dacc:	6823      	ldr	r3, [r4, #0]
 800dace:	f023 0320 	bic.w	r3, r3, #32
 800dad2:	6023      	str	r3, [r4, #0]
 800dad4:	2310      	movs	r3, #16
 800dad6:	e7a7      	b.n	800da28 <_printf_i+0xf8>
 800dad8:	4824      	ldr	r0, [pc, #144]	; (800db6c <_printf_i+0x23c>)
 800dada:	e7e4      	b.n	800daa6 <_printf_i+0x176>
 800dadc:	4615      	mov	r5, r2
 800dade:	e7bd      	b.n	800da5c <_printf_i+0x12c>
 800dae0:	682b      	ldr	r3, [r5, #0]
 800dae2:	6826      	ldr	r6, [r4, #0]
 800dae4:	6961      	ldr	r1, [r4, #20]
 800dae6:	1d18      	adds	r0, r3, #4
 800dae8:	6028      	str	r0, [r5, #0]
 800daea:	0635      	lsls	r5, r6, #24
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	d501      	bpl.n	800daf4 <_printf_i+0x1c4>
 800daf0:	6019      	str	r1, [r3, #0]
 800daf2:	e002      	b.n	800dafa <_printf_i+0x1ca>
 800daf4:	0670      	lsls	r0, r6, #25
 800daf6:	d5fb      	bpl.n	800daf0 <_printf_i+0x1c0>
 800daf8:	8019      	strh	r1, [r3, #0]
 800dafa:	2300      	movs	r3, #0
 800dafc:	6123      	str	r3, [r4, #16]
 800dafe:	4615      	mov	r5, r2
 800db00:	e7bc      	b.n	800da7c <_printf_i+0x14c>
 800db02:	682b      	ldr	r3, [r5, #0]
 800db04:	1d1a      	adds	r2, r3, #4
 800db06:	602a      	str	r2, [r5, #0]
 800db08:	681d      	ldr	r5, [r3, #0]
 800db0a:	6862      	ldr	r2, [r4, #4]
 800db0c:	2100      	movs	r1, #0
 800db0e:	4628      	mov	r0, r5
 800db10:	f7f2 fb96 	bl	8000240 <memchr>
 800db14:	b108      	cbz	r0, 800db1a <_printf_i+0x1ea>
 800db16:	1b40      	subs	r0, r0, r5
 800db18:	6060      	str	r0, [r4, #4]
 800db1a:	6863      	ldr	r3, [r4, #4]
 800db1c:	6123      	str	r3, [r4, #16]
 800db1e:	2300      	movs	r3, #0
 800db20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800db24:	e7aa      	b.n	800da7c <_printf_i+0x14c>
 800db26:	6923      	ldr	r3, [r4, #16]
 800db28:	462a      	mov	r2, r5
 800db2a:	4649      	mov	r1, r9
 800db2c:	4640      	mov	r0, r8
 800db2e:	47d0      	blx	sl
 800db30:	3001      	adds	r0, #1
 800db32:	d0ad      	beq.n	800da90 <_printf_i+0x160>
 800db34:	6823      	ldr	r3, [r4, #0]
 800db36:	079b      	lsls	r3, r3, #30
 800db38:	d413      	bmi.n	800db62 <_printf_i+0x232>
 800db3a:	68e0      	ldr	r0, [r4, #12]
 800db3c:	9b03      	ldr	r3, [sp, #12]
 800db3e:	4298      	cmp	r0, r3
 800db40:	bfb8      	it	lt
 800db42:	4618      	movlt	r0, r3
 800db44:	e7a6      	b.n	800da94 <_printf_i+0x164>
 800db46:	2301      	movs	r3, #1
 800db48:	4632      	mov	r2, r6
 800db4a:	4649      	mov	r1, r9
 800db4c:	4640      	mov	r0, r8
 800db4e:	47d0      	blx	sl
 800db50:	3001      	adds	r0, #1
 800db52:	d09d      	beq.n	800da90 <_printf_i+0x160>
 800db54:	3501      	adds	r5, #1
 800db56:	68e3      	ldr	r3, [r4, #12]
 800db58:	9903      	ldr	r1, [sp, #12]
 800db5a:	1a5b      	subs	r3, r3, r1
 800db5c:	42ab      	cmp	r3, r5
 800db5e:	dcf2      	bgt.n	800db46 <_printf_i+0x216>
 800db60:	e7eb      	b.n	800db3a <_printf_i+0x20a>
 800db62:	2500      	movs	r5, #0
 800db64:	f104 0619 	add.w	r6, r4, #25
 800db68:	e7f5      	b.n	800db56 <_printf_i+0x226>
 800db6a:	bf00      	nop
 800db6c:	0800e0fe 	.word	0x0800e0fe
 800db70:	0800e10f 	.word	0x0800e10f

0800db74 <__sflush_r>:
 800db74:	898a      	ldrh	r2, [r1, #12]
 800db76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db7a:	4605      	mov	r5, r0
 800db7c:	0710      	lsls	r0, r2, #28
 800db7e:	460c      	mov	r4, r1
 800db80:	d458      	bmi.n	800dc34 <__sflush_r+0xc0>
 800db82:	684b      	ldr	r3, [r1, #4]
 800db84:	2b00      	cmp	r3, #0
 800db86:	dc05      	bgt.n	800db94 <__sflush_r+0x20>
 800db88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	dc02      	bgt.n	800db94 <__sflush_r+0x20>
 800db8e:	2000      	movs	r0, #0
 800db90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db96:	2e00      	cmp	r6, #0
 800db98:	d0f9      	beq.n	800db8e <__sflush_r+0x1a>
 800db9a:	2300      	movs	r3, #0
 800db9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dba0:	682f      	ldr	r7, [r5, #0]
 800dba2:	6a21      	ldr	r1, [r4, #32]
 800dba4:	602b      	str	r3, [r5, #0]
 800dba6:	d032      	beq.n	800dc0e <__sflush_r+0x9a>
 800dba8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dbaa:	89a3      	ldrh	r3, [r4, #12]
 800dbac:	075a      	lsls	r2, r3, #29
 800dbae:	d505      	bpl.n	800dbbc <__sflush_r+0x48>
 800dbb0:	6863      	ldr	r3, [r4, #4]
 800dbb2:	1ac0      	subs	r0, r0, r3
 800dbb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dbb6:	b10b      	cbz	r3, 800dbbc <__sflush_r+0x48>
 800dbb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dbba:	1ac0      	subs	r0, r0, r3
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dbc2:	6a21      	ldr	r1, [r4, #32]
 800dbc4:	4628      	mov	r0, r5
 800dbc6:	47b0      	blx	r6
 800dbc8:	1c43      	adds	r3, r0, #1
 800dbca:	89a3      	ldrh	r3, [r4, #12]
 800dbcc:	d106      	bne.n	800dbdc <__sflush_r+0x68>
 800dbce:	6829      	ldr	r1, [r5, #0]
 800dbd0:	291d      	cmp	r1, #29
 800dbd2:	d82b      	bhi.n	800dc2c <__sflush_r+0xb8>
 800dbd4:	4a29      	ldr	r2, [pc, #164]	; (800dc7c <__sflush_r+0x108>)
 800dbd6:	410a      	asrs	r2, r1
 800dbd8:	07d6      	lsls	r6, r2, #31
 800dbda:	d427      	bmi.n	800dc2c <__sflush_r+0xb8>
 800dbdc:	2200      	movs	r2, #0
 800dbde:	6062      	str	r2, [r4, #4]
 800dbe0:	04d9      	lsls	r1, r3, #19
 800dbe2:	6922      	ldr	r2, [r4, #16]
 800dbe4:	6022      	str	r2, [r4, #0]
 800dbe6:	d504      	bpl.n	800dbf2 <__sflush_r+0x7e>
 800dbe8:	1c42      	adds	r2, r0, #1
 800dbea:	d101      	bne.n	800dbf0 <__sflush_r+0x7c>
 800dbec:	682b      	ldr	r3, [r5, #0]
 800dbee:	b903      	cbnz	r3, 800dbf2 <__sflush_r+0x7e>
 800dbf0:	6560      	str	r0, [r4, #84]	; 0x54
 800dbf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dbf4:	602f      	str	r7, [r5, #0]
 800dbf6:	2900      	cmp	r1, #0
 800dbf8:	d0c9      	beq.n	800db8e <__sflush_r+0x1a>
 800dbfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dbfe:	4299      	cmp	r1, r3
 800dc00:	d002      	beq.n	800dc08 <__sflush_r+0x94>
 800dc02:	4628      	mov	r0, r5
 800dc04:	f7ff fbea 	bl	800d3dc <_free_r>
 800dc08:	2000      	movs	r0, #0
 800dc0a:	6360      	str	r0, [r4, #52]	; 0x34
 800dc0c:	e7c0      	b.n	800db90 <__sflush_r+0x1c>
 800dc0e:	2301      	movs	r3, #1
 800dc10:	4628      	mov	r0, r5
 800dc12:	47b0      	blx	r6
 800dc14:	1c41      	adds	r1, r0, #1
 800dc16:	d1c8      	bne.n	800dbaa <__sflush_r+0x36>
 800dc18:	682b      	ldr	r3, [r5, #0]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d0c5      	beq.n	800dbaa <__sflush_r+0x36>
 800dc1e:	2b1d      	cmp	r3, #29
 800dc20:	d001      	beq.n	800dc26 <__sflush_r+0xb2>
 800dc22:	2b16      	cmp	r3, #22
 800dc24:	d101      	bne.n	800dc2a <__sflush_r+0xb6>
 800dc26:	602f      	str	r7, [r5, #0]
 800dc28:	e7b1      	b.n	800db8e <__sflush_r+0x1a>
 800dc2a:	89a3      	ldrh	r3, [r4, #12]
 800dc2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc30:	81a3      	strh	r3, [r4, #12]
 800dc32:	e7ad      	b.n	800db90 <__sflush_r+0x1c>
 800dc34:	690f      	ldr	r7, [r1, #16]
 800dc36:	2f00      	cmp	r7, #0
 800dc38:	d0a9      	beq.n	800db8e <__sflush_r+0x1a>
 800dc3a:	0793      	lsls	r3, r2, #30
 800dc3c:	680e      	ldr	r6, [r1, #0]
 800dc3e:	bf08      	it	eq
 800dc40:	694b      	ldreq	r3, [r1, #20]
 800dc42:	600f      	str	r7, [r1, #0]
 800dc44:	bf18      	it	ne
 800dc46:	2300      	movne	r3, #0
 800dc48:	eba6 0807 	sub.w	r8, r6, r7
 800dc4c:	608b      	str	r3, [r1, #8]
 800dc4e:	f1b8 0f00 	cmp.w	r8, #0
 800dc52:	dd9c      	ble.n	800db8e <__sflush_r+0x1a>
 800dc54:	6a21      	ldr	r1, [r4, #32]
 800dc56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dc58:	4643      	mov	r3, r8
 800dc5a:	463a      	mov	r2, r7
 800dc5c:	4628      	mov	r0, r5
 800dc5e:	47b0      	blx	r6
 800dc60:	2800      	cmp	r0, #0
 800dc62:	dc06      	bgt.n	800dc72 <__sflush_r+0xfe>
 800dc64:	89a3      	ldrh	r3, [r4, #12]
 800dc66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc6a:	81a3      	strh	r3, [r4, #12]
 800dc6c:	f04f 30ff 	mov.w	r0, #4294967295
 800dc70:	e78e      	b.n	800db90 <__sflush_r+0x1c>
 800dc72:	4407      	add	r7, r0
 800dc74:	eba8 0800 	sub.w	r8, r8, r0
 800dc78:	e7e9      	b.n	800dc4e <__sflush_r+0xda>
 800dc7a:	bf00      	nop
 800dc7c:	dfbffffe 	.word	0xdfbffffe

0800dc80 <_fflush_r>:
 800dc80:	b538      	push	{r3, r4, r5, lr}
 800dc82:	690b      	ldr	r3, [r1, #16]
 800dc84:	4605      	mov	r5, r0
 800dc86:	460c      	mov	r4, r1
 800dc88:	b913      	cbnz	r3, 800dc90 <_fflush_r+0x10>
 800dc8a:	2500      	movs	r5, #0
 800dc8c:	4628      	mov	r0, r5
 800dc8e:	bd38      	pop	{r3, r4, r5, pc}
 800dc90:	b118      	cbz	r0, 800dc9a <_fflush_r+0x1a>
 800dc92:	6a03      	ldr	r3, [r0, #32]
 800dc94:	b90b      	cbnz	r3, 800dc9a <_fflush_r+0x1a>
 800dc96:	f7ff fa79 	bl	800d18c <__sinit>
 800dc9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d0f3      	beq.n	800dc8a <_fflush_r+0xa>
 800dca2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dca4:	07d0      	lsls	r0, r2, #31
 800dca6:	d404      	bmi.n	800dcb2 <_fflush_r+0x32>
 800dca8:	0599      	lsls	r1, r3, #22
 800dcaa:	d402      	bmi.n	800dcb2 <_fflush_r+0x32>
 800dcac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcae:	f7ff fb84 	bl	800d3ba <__retarget_lock_acquire_recursive>
 800dcb2:	4628      	mov	r0, r5
 800dcb4:	4621      	mov	r1, r4
 800dcb6:	f7ff ff5d 	bl	800db74 <__sflush_r>
 800dcba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dcbc:	07da      	lsls	r2, r3, #31
 800dcbe:	4605      	mov	r5, r0
 800dcc0:	d4e4      	bmi.n	800dc8c <_fflush_r+0xc>
 800dcc2:	89a3      	ldrh	r3, [r4, #12]
 800dcc4:	059b      	lsls	r3, r3, #22
 800dcc6:	d4e1      	bmi.n	800dc8c <_fflush_r+0xc>
 800dcc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dcca:	f7ff fb77 	bl	800d3bc <__retarget_lock_release_recursive>
 800dcce:	e7dd      	b.n	800dc8c <_fflush_r+0xc>

0800dcd0 <__swbuf_r>:
 800dcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dcd2:	460e      	mov	r6, r1
 800dcd4:	4614      	mov	r4, r2
 800dcd6:	4605      	mov	r5, r0
 800dcd8:	b118      	cbz	r0, 800dce2 <__swbuf_r+0x12>
 800dcda:	6a03      	ldr	r3, [r0, #32]
 800dcdc:	b90b      	cbnz	r3, 800dce2 <__swbuf_r+0x12>
 800dcde:	f7ff fa55 	bl	800d18c <__sinit>
 800dce2:	69a3      	ldr	r3, [r4, #24]
 800dce4:	60a3      	str	r3, [r4, #8]
 800dce6:	89a3      	ldrh	r3, [r4, #12]
 800dce8:	071a      	lsls	r2, r3, #28
 800dcea:	d525      	bpl.n	800dd38 <__swbuf_r+0x68>
 800dcec:	6923      	ldr	r3, [r4, #16]
 800dcee:	b31b      	cbz	r3, 800dd38 <__swbuf_r+0x68>
 800dcf0:	6823      	ldr	r3, [r4, #0]
 800dcf2:	6922      	ldr	r2, [r4, #16]
 800dcf4:	1a98      	subs	r0, r3, r2
 800dcf6:	6963      	ldr	r3, [r4, #20]
 800dcf8:	b2f6      	uxtb	r6, r6
 800dcfa:	4283      	cmp	r3, r0
 800dcfc:	4637      	mov	r7, r6
 800dcfe:	dc04      	bgt.n	800dd0a <__swbuf_r+0x3a>
 800dd00:	4621      	mov	r1, r4
 800dd02:	4628      	mov	r0, r5
 800dd04:	f7ff ffbc 	bl	800dc80 <_fflush_r>
 800dd08:	b9e0      	cbnz	r0, 800dd44 <__swbuf_r+0x74>
 800dd0a:	68a3      	ldr	r3, [r4, #8]
 800dd0c:	3b01      	subs	r3, #1
 800dd0e:	60a3      	str	r3, [r4, #8]
 800dd10:	6823      	ldr	r3, [r4, #0]
 800dd12:	1c5a      	adds	r2, r3, #1
 800dd14:	6022      	str	r2, [r4, #0]
 800dd16:	701e      	strb	r6, [r3, #0]
 800dd18:	6962      	ldr	r2, [r4, #20]
 800dd1a:	1c43      	adds	r3, r0, #1
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d004      	beq.n	800dd2a <__swbuf_r+0x5a>
 800dd20:	89a3      	ldrh	r3, [r4, #12]
 800dd22:	07db      	lsls	r3, r3, #31
 800dd24:	d506      	bpl.n	800dd34 <__swbuf_r+0x64>
 800dd26:	2e0a      	cmp	r6, #10
 800dd28:	d104      	bne.n	800dd34 <__swbuf_r+0x64>
 800dd2a:	4621      	mov	r1, r4
 800dd2c:	4628      	mov	r0, r5
 800dd2e:	f7ff ffa7 	bl	800dc80 <_fflush_r>
 800dd32:	b938      	cbnz	r0, 800dd44 <__swbuf_r+0x74>
 800dd34:	4638      	mov	r0, r7
 800dd36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd38:	4621      	mov	r1, r4
 800dd3a:	4628      	mov	r0, r5
 800dd3c:	f000 f806 	bl	800dd4c <__swsetup_r>
 800dd40:	2800      	cmp	r0, #0
 800dd42:	d0d5      	beq.n	800dcf0 <__swbuf_r+0x20>
 800dd44:	f04f 37ff 	mov.w	r7, #4294967295
 800dd48:	e7f4      	b.n	800dd34 <__swbuf_r+0x64>
	...

0800dd4c <__swsetup_r>:
 800dd4c:	b538      	push	{r3, r4, r5, lr}
 800dd4e:	4b2a      	ldr	r3, [pc, #168]	; (800ddf8 <__swsetup_r+0xac>)
 800dd50:	4605      	mov	r5, r0
 800dd52:	6818      	ldr	r0, [r3, #0]
 800dd54:	460c      	mov	r4, r1
 800dd56:	b118      	cbz	r0, 800dd60 <__swsetup_r+0x14>
 800dd58:	6a03      	ldr	r3, [r0, #32]
 800dd5a:	b90b      	cbnz	r3, 800dd60 <__swsetup_r+0x14>
 800dd5c:	f7ff fa16 	bl	800d18c <__sinit>
 800dd60:	89a3      	ldrh	r3, [r4, #12]
 800dd62:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dd66:	0718      	lsls	r0, r3, #28
 800dd68:	d422      	bmi.n	800ddb0 <__swsetup_r+0x64>
 800dd6a:	06d9      	lsls	r1, r3, #27
 800dd6c:	d407      	bmi.n	800dd7e <__swsetup_r+0x32>
 800dd6e:	2309      	movs	r3, #9
 800dd70:	602b      	str	r3, [r5, #0]
 800dd72:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dd76:	81a3      	strh	r3, [r4, #12]
 800dd78:	f04f 30ff 	mov.w	r0, #4294967295
 800dd7c:	e034      	b.n	800dde8 <__swsetup_r+0x9c>
 800dd7e:	0758      	lsls	r0, r3, #29
 800dd80:	d512      	bpl.n	800dda8 <__swsetup_r+0x5c>
 800dd82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd84:	b141      	cbz	r1, 800dd98 <__swsetup_r+0x4c>
 800dd86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dd8a:	4299      	cmp	r1, r3
 800dd8c:	d002      	beq.n	800dd94 <__swsetup_r+0x48>
 800dd8e:	4628      	mov	r0, r5
 800dd90:	f7ff fb24 	bl	800d3dc <_free_r>
 800dd94:	2300      	movs	r3, #0
 800dd96:	6363      	str	r3, [r4, #52]	; 0x34
 800dd98:	89a3      	ldrh	r3, [r4, #12]
 800dd9a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dd9e:	81a3      	strh	r3, [r4, #12]
 800dda0:	2300      	movs	r3, #0
 800dda2:	6063      	str	r3, [r4, #4]
 800dda4:	6923      	ldr	r3, [r4, #16]
 800dda6:	6023      	str	r3, [r4, #0]
 800dda8:	89a3      	ldrh	r3, [r4, #12]
 800ddaa:	f043 0308 	orr.w	r3, r3, #8
 800ddae:	81a3      	strh	r3, [r4, #12]
 800ddb0:	6923      	ldr	r3, [r4, #16]
 800ddb2:	b94b      	cbnz	r3, 800ddc8 <__swsetup_r+0x7c>
 800ddb4:	89a3      	ldrh	r3, [r4, #12]
 800ddb6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ddba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ddbe:	d003      	beq.n	800ddc8 <__swsetup_r+0x7c>
 800ddc0:	4621      	mov	r1, r4
 800ddc2:	4628      	mov	r0, r5
 800ddc4:	f000 f850 	bl	800de68 <__smakebuf_r>
 800ddc8:	89a0      	ldrh	r0, [r4, #12]
 800ddca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ddce:	f010 0301 	ands.w	r3, r0, #1
 800ddd2:	d00a      	beq.n	800ddea <__swsetup_r+0x9e>
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	60a3      	str	r3, [r4, #8]
 800ddd8:	6963      	ldr	r3, [r4, #20]
 800ddda:	425b      	negs	r3, r3
 800dddc:	61a3      	str	r3, [r4, #24]
 800ddde:	6923      	ldr	r3, [r4, #16]
 800dde0:	b943      	cbnz	r3, 800ddf4 <__swsetup_r+0xa8>
 800dde2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dde6:	d1c4      	bne.n	800dd72 <__swsetup_r+0x26>
 800dde8:	bd38      	pop	{r3, r4, r5, pc}
 800ddea:	0781      	lsls	r1, r0, #30
 800ddec:	bf58      	it	pl
 800ddee:	6963      	ldrpl	r3, [r4, #20]
 800ddf0:	60a3      	str	r3, [r4, #8]
 800ddf2:	e7f4      	b.n	800ddde <__swsetup_r+0x92>
 800ddf4:	2000      	movs	r0, #0
 800ddf6:	e7f7      	b.n	800dde8 <__swsetup_r+0x9c>
 800ddf8:	200001e4 	.word	0x200001e4

0800ddfc <_sbrk_r>:
 800ddfc:	b538      	push	{r3, r4, r5, lr}
 800ddfe:	4d06      	ldr	r5, [pc, #24]	; (800de18 <_sbrk_r+0x1c>)
 800de00:	2300      	movs	r3, #0
 800de02:	4604      	mov	r4, r0
 800de04:	4608      	mov	r0, r1
 800de06:	602b      	str	r3, [r5, #0]
 800de08:	f7f3 fdee 	bl	80019e8 <_sbrk>
 800de0c:	1c43      	adds	r3, r0, #1
 800de0e:	d102      	bne.n	800de16 <_sbrk_r+0x1a>
 800de10:	682b      	ldr	r3, [r5, #0]
 800de12:	b103      	cbz	r3, 800de16 <_sbrk_r+0x1a>
 800de14:	6023      	str	r3, [r4, #0]
 800de16:	bd38      	pop	{r3, r4, r5, pc}
 800de18:	20006004 	.word	0x20006004

0800de1c <__swhatbuf_r>:
 800de1c:	b570      	push	{r4, r5, r6, lr}
 800de1e:	460c      	mov	r4, r1
 800de20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800de24:	2900      	cmp	r1, #0
 800de26:	b096      	sub	sp, #88	; 0x58
 800de28:	4615      	mov	r5, r2
 800de2a:	461e      	mov	r6, r3
 800de2c:	da0d      	bge.n	800de4a <__swhatbuf_r+0x2e>
 800de2e:	89a3      	ldrh	r3, [r4, #12]
 800de30:	f013 0f80 	tst.w	r3, #128	; 0x80
 800de34:	f04f 0100 	mov.w	r1, #0
 800de38:	bf0c      	ite	eq
 800de3a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800de3e:	2340      	movne	r3, #64	; 0x40
 800de40:	2000      	movs	r0, #0
 800de42:	6031      	str	r1, [r6, #0]
 800de44:	602b      	str	r3, [r5, #0]
 800de46:	b016      	add	sp, #88	; 0x58
 800de48:	bd70      	pop	{r4, r5, r6, pc}
 800de4a:	466a      	mov	r2, sp
 800de4c:	f000 f848 	bl	800dee0 <_fstat_r>
 800de50:	2800      	cmp	r0, #0
 800de52:	dbec      	blt.n	800de2e <__swhatbuf_r+0x12>
 800de54:	9901      	ldr	r1, [sp, #4]
 800de56:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800de5a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800de5e:	4259      	negs	r1, r3
 800de60:	4159      	adcs	r1, r3
 800de62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800de66:	e7eb      	b.n	800de40 <__swhatbuf_r+0x24>

0800de68 <__smakebuf_r>:
 800de68:	898b      	ldrh	r3, [r1, #12]
 800de6a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800de6c:	079d      	lsls	r5, r3, #30
 800de6e:	4606      	mov	r6, r0
 800de70:	460c      	mov	r4, r1
 800de72:	d507      	bpl.n	800de84 <__smakebuf_r+0x1c>
 800de74:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800de78:	6023      	str	r3, [r4, #0]
 800de7a:	6123      	str	r3, [r4, #16]
 800de7c:	2301      	movs	r3, #1
 800de7e:	6163      	str	r3, [r4, #20]
 800de80:	b002      	add	sp, #8
 800de82:	bd70      	pop	{r4, r5, r6, pc}
 800de84:	ab01      	add	r3, sp, #4
 800de86:	466a      	mov	r2, sp
 800de88:	f7ff ffc8 	bl	800de1c <__swhatbuf_r>
 800de8c:	9900      	ldr	r1, [sp, #0]
 800de8e:	4605      	mov	r5, r0
 800de90:	4630      	mov	r0, r6
 800de92:	f7ff fb0f 	bl	800d4b4 <_malloc_r>
 800de96:	b948      	cbnz	r0, 800deac <__smakebuf_r+0x44>
 800de98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800de9c:	059a      	lsls	r2, r3, #22
 800de9e:	d4ef      	bmi.n	800de80 <__smakebuf_r+0x18>
 800dea0:	f023 0303 	bic.w	r3, r3, #3
 800dea4:	f043 0302 	orr.w	r3, r3, #2
 800dea8:	81a3      	strh	r3, [r4, #12]
 800deaa:	e7e3      	b.n	800de74 <__smakebuf_r+0xc>
 800deac:	89a3      	ldrh	r3, [r4, #12]
 800deae:	6020      	str	r0, [r4, #0]
 800deb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800deb4:	81a3      	strh	r3, [r4, #12]
 800deb6:	9b00      	ldr	r3, [sp, #0]
 800deb8:	6163      	str	r3, [r4, #20]
 800deba:	9b01      	ldr	r3, [sp, #4]
 800debc:	6120      	str	r0, [r4, #16]
 800debe:	b15b      	cbz	r3, 800ded8 <__smakebuf_r+0x70>
 800dec0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dec4:	4630      	mov	r0, r6
 800dec6:	f000 f81d 	bl	800df04 <_isatty_r>
 800deca:	b128      	cbz	r0, 800ded8 <__smakebuf_r+0x70>
 800decc:	89a3      	ldrh	r3, [r4, #12]
 800dece:	f023 0303 	bic.w	r3, r3, #3
 800ded2:	f043 0301 	orr.w	r3, r3, #1
 800ded6:	81a3      	strh	r3, [r4, #12]
 800ded8:	89a3      	ldrh	r3, [r4, #12]
 800deda:	431d      	orrs	r5, r3
 800dedc:	81a5      	strh	r5, [r4, #12]
 800dede:	e7cf      	b.n	800de80 <__smakebuf_r+0x18>

0800dee0 <_fstat_r>:
 800dee0:	b538      	push	{r3, r4, r5, lr}
 800dee2:	4d07      	ldr	r5, [pc, #28]	; (800df00 <_fstat_r+0x20>)
 800dee4:	2300      	movs	r3, #0
 800dee6:	4604      	mov	r4, r0
 800dee8:	4608      	mov	r0, r1
 800deea:	4611      	mov	r1, r2
 800deec:	602b      	str	r3, [r5, #0]
 800deee:	f7f3 fd52 	bl	8001996 <_fstat>
 800def2:	1c43      	adds	r3, r0, #1
 800def4:	d102      	bne.n	800defc <_fstat_r+0x1c>
 800def6:	682b      	ldr	r3, [r5, #0]
 800def8:	b103      	cbz	r3, 800defc <_fstat_r+0x1c>
 800defa:	6023      	str	r3, [r4, #0]
 800defc:	bd38      	pop	{r3, r4, r5, pc}
 800defe:	bf00      	nop
 800df00:	20006004 	.word	0x20006004

0800df04 <_isatty_r>:
 800df04:	b538      	push	{r3, r4, r5, lr}
 800df06:	4d06      	ldr	r5, [pc, #24]	; (800df20 <_isatty_r+0x1c>)
 800df08:	2300      	movs	r3, #0
 800df0a:	4604      	mov	r4, r0
 800df0c:	4608      	mov	r0, r1
 800df0e:	602b      	str	r3, [r5, #0]
 800df10:	f7f3 fd51 	bl	80019b6 <_isatty>
 800df14:	1c43      	adds	r3, r0, #1
 800df16:	d102      	bne.n	800df1e <_isatty_r+0x1a>
 800df18:	682b      	ldr	r3, [r5, #0]
 800df1a:	b103      	cbz	r3, 800df1e <_isatty_r+0x1a>
 800df1c:	6023      	str	r3, [r4, #0]
 800df1e:	bd38      	pop	{r3, r4, r5, pc}
 800df20:	20006004 	.word	0x20006004

0800df24 <_init>:
 800df24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df26:	bf00      	nop
 800df28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df2a:	bc08      	pop	{r3}
 800df2c:	469e      	mov	lr, r3
 800df2e:	4770      	bx	lr

0800df30 <_fini>:
 800df30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df32:	bf00      	nop
 800df34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800df36:	bc08      	pop	{r3}
 800df38:	469e      	mov	lr, r3
 800df3a:	4770      	bx	lr
