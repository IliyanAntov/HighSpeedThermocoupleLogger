
HS_thermocouple_logger_G474.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c46c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800c644  0800c644  0001c644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c6cc  0800c6cc  00020184  2**0
                  CONTENTS
  4 .ARM          00000008  0800c6cc  0800c6cc  0001c6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c6d4  0800c6d4  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c6d4  0800c6d4  0001c6d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c6d8  0800c6d8  0001c6d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800c6dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000043fc  20000184  0800c860  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  20004580  0800c860  00024580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020bc2  00000000  00000000  000201f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004473  00000000  00000000  00040db9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001af8  00000000  00000000  00045230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014cf  00000000  00000000  00046d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b5a5  00000000  00000000  000481f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002161f  00000000  00000000  0007379c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001171df  00000000  00000000  00094dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000733c  00000000  00000000  001abf9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  001b32d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000184 	.word	0x20000184
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800c62c 	.word	0x0800c62c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000188 	.word	0x20000188
 8000214:	0800c62c 	.word	0x0800c62c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	f5ad 5d1c 	sub.w	sp, sp, #9984	; 0x2700
 800051a:	b086      	sub	sp, #24
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fec6 	bl	80012ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f881 	bl	8000628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 fb71 	bl	8000c0c <MX_GPIO_Init>
  MX_DMA_Init();
 800052a:	f000 fb3d 	bl	8000ba8 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 800052e:	f000 fa8d 	bl	8000a4c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000532:	f000 f8c5 	bl	80006c0 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000536:	f000 f947 	bl	80007c8 <MX_ADC2_Init>
  MX_ADC3_Init();
 800053a:	f000 f9a9 	bl	8000890 <MX_ADC3_Init>
  MX_ADC4_Init();
 800053e:	f000 fa1f 	bl	8000980 <MX_ADC4_Init>
  MX_TIM2_Init();
 8000542:	f000 facd 	bl	8000ae0 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8000546:	f00b fb33 	bl	800bbb0 <MX_USB_Device_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800054a:	4833      	ldr	r0, [pc, #204]	; (8000618 <main+0x104>)
 800054c:	f005 fea4 	bl	8006298 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000550:	217f      	movs	r1, #127	; 0x7f
 8000552:	4832      	ldr	r0, [pc, #200]	; (800061c <main+0x108>)
 8000554:	f002 fa20 	bl	8002998 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE);
 8000558:	f241 3288 	movw	r2, #5000	; 0x1388
 800055c:	4930      	ldr	r1, [pc, #192]	; (8000620 <main+0x10c>)
 800055e:	482f      	ldr	r0, [pc, #188]	; (800061c <main+0x108>)
 8000560:	f001 fb16 	bl	8001b90 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(adc_conv_complete){
 8000564:	4b2f      	ldr	r3, [pc, #188]	; (8000624 <main+0x110>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d0fb      	beq.n	8000564 <main+0x50>
		for(int i = 0; i < ADC_BUFFER_SIZE; i++){
 800056c:	2300      	movs	r3, #0
 800056e:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 8000572:	f102 0214 	add.w	r2, r2, #20
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	e035      	b.n	80005e6 <main+0xd2>
			transmit_buffer[(i*2)+1] = (uint8_t)(adc_buffer[i] & 0x00FF);
 800057a:	4a29      	ldr	r2, [pc, #164]	; (8000620 <main+0x10c>)
 800057c:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 8000580:	f103 0314 	add.w	r3, r3, #20
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800058a:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 800058e:	f103 0314 	add.w	r3, r3, #20
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	005b      	lsls	r3, r3, #1
 8000596:	3301      	adds	r3, #1
 8000598:	b2d1      	uxtb	r1, r2
 800059a:	f507 62e3 	add.w	r2, r7, #1816	; 0x718
 800059e:	f2a2 7214 	subw	r2, r2, #1812	; 0x714
 80005a2:	54d1      	strb	r1, [r2, r3]
			transmit_buffer[i*2] = (uint8_t)((adc_buffer[i] >> 8) & 0x00FF);
 80005a4:	4a1e      	ldr	r2, [pc, #120]	; (8000620 <main+0x10c>)
 80005a6:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 80005aa:	f103 0314 	add.w	r3, r3, #20
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005b4:	0a1b      	lsrs	r3, r3, #8
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 80005bc:	f103 0314 	add.w	r3, r3, #20
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	b2d1      	uxtb	r1, r2
 80005c6:	f507 62e3 	add.w	r2, r7, #1816	; 0x718
 80005ca:	f2a2 7214 	subw	r2, r2, #1812	; 0x714
 80005ce:	54d1      	strb	r1, [r2, r3]
		for(int i = 0; i < ADC_BUFFER_SIZE; i++){
 80005d0:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 80005d4:	f103 0314 	add.w	r3, r3, #20
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	3301      	adds	r3, #1
 80005dc:	f507 521c 	add.w	r2, r7, #9984	; 0x2700
 80005e0:	f102 0214 	add.w	r2, r2, #20
 80005e4:	6013      	str	r3, [r2, #0]
 80005e6:	f507 531c 	add.w	r3, r7, #9984	; 0x2700
 80005ea:	f103 0314 	add.w	r3, r3, #20
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f241 3287 	movw	r2, #4999	; 0x1387
 80005f4:	4293      	cmp	r3, r2
 80005f6:	ddc0      	ble.n	800057a <main+0x66>
		}

		while(CDC_Transmit_FS(transmit_buffer, USB_BUFFER_SIZE) != USBD_OK);
 80005f8:	bf00      	nop
 80005fa:	f107 0318 	add.w	r3, r7, #24
 80005fe:	3b14      	subs	r3, #20
 8000600:	f242 7110 	movw	r1, #10000	; 0x2710
 8000604:	4618      	mov	r0, r3
 8000606:	f00b fb91 	bl	800bd2c <CDC_Transmit_FS>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d1f4      	bne.n	80005fa <main+0xe6>
		adc_conv_complete = 0;
 8000610:	4b04      	ldr	r3, [pc, #16]	; (8000624 <main+0x110>)
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
	if(adc_conv_complete){
 8000616:	e7a5      	b.n	8000564 <main+0x50>
 8000618:	20000444 	.word	0x20000444
 800061c:	200001a0 	.word	0x200001a0
 8000620:	20000490 	.word	0x20000490
 8000624:	20002ba0 	.word	0x20002ba0

08000628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b094      	sub	sp, #80	; 0x50
 800062c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062e:	f107 0318 	add.w	r3, r7, #24
 8000632:	2238      	movs	r2, #56	; 0x38
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f00b ffcc 	bl	800c5d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800064a:	2000      	movs	r0, #0
 800064c:	f004 fd9c 	bl	8005188 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000650:	2321      	movs	r3, #33	; 0x21
 8000652:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000654:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000658:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800065a:	2301      	movs	r3, #1
 800065c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065e:	2302      	movs	r3, #2
 8000660:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000662:	2303      	movs	r3, #3
 8000664:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000666:	2306      	movs	r3, #6
 8000668:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 78;
 800066a:	234e      	movs	r3, #78	; 0x4e
 800066c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 800066e:	2306      	movs	r3, #6
 8000670:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000676:	2302      	movs	r3, #2
 8000678:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067a:	f107 0318 	add.w	r3, r7, #24
 800067e:	4618      	mov	r0, r3
 8000680:	f004 fe36 	bl	80052f0 <HAL_RCC_OscConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800068a:	f000 fb61 	bl	8000d50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068e:	230f      	movs	r3, #15
 8000690:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2303      	movs	r3, #3
 8000694:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	2300      	movs	r3, #0
 80006a0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006a2:	1d3b      	adds	r3, r7, #4
 80006a4:	2104      	movs	r1, #4
 80006a6:	4618      	mov	r0, r3
 80006a8:	f005 f934 	bl	8005914 <HAL_RCC_ClockConfig>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80006b2:	f000 fb4d 	bl	8000d50 <Error_Handler>
  }
}
 80006b6:	bf00      	nop
 80006b8:	3750      	adds	r7, #80	; 0x50
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
	...

080006c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b08c      	sub	sp, #48	; 0x30
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80006c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	605a      	str	r2, [r3, #4]
 80006d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	2220      	movs	r2, #32
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f00b ff7b 	bl	800c5d4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80006de:	4b38      	ldr	r3, [pc, #224]	; (80007c0 <MX_ADC1_Init+0x100>)
 80006e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80006e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80006e6:	4b36      	ldr	r3, [pc, #216]	; (80007c0 <MX_ADC1_Init+0x100>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006ec:	4b34      	ldr	r3, [pc, #208]	; (80007c0 <MX_ADC1_Init+0x100>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006f2:	4b33      	ldr	r3, [pc, #204]	; (80007c0 <MX_ADC1_Init+0x100>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80006f8:	4b31      	ldr	r3, [pc, #196]	; (80007c0 <MX_ADC1_Init+0x100>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80006fe:	4b30      	ldr	r3, [pc, #192]	; (80007c0 <MX_ADC1_Init+0x100>)
 8000700:	2200      	movs	r2, #0
 8000702:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000704:	4b2e      	ldr	r3, [pc, #184]	; (80007c0 <MX_ADC1_Init+0x100>)
 8000706:	2204      	movs	r2, #4
 8000708:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800070a:	4b2d      	ldr	r3, [pc, #180]	; (80007c0 <MX_ADC1_Init+0x100>)
 800070c:	2200      	movs	r2, #0
 800070e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000710:	4b2b      	ldr	r3, [pc, #172]	; (80007c0 <MX_ADC1_Init+0x100>)
 8000712:	2200      	movs	r2, #0
 8000714:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000716:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <MX_ADC1_Init+0x100>)
 8000718:	2201      	movs	r2, #1
 800071a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800071c:	4b28      	ldr	r3, [pc, #160]	; (80007c0 <MX_ADC1_Init+0x100>)
 800071e:	2200      	movs	r2, #0
 8000720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000724:	4b26      	ldr	r3, [pc, #152]	; (80007c0 <MX_ADC1_Init+0x100>)
 8000726:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 800072a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800072c:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <MX_ADC1_Init+0x100>)
 800072e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000732:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000734:	4b22      	ldr	r3, [pc, #136]	; (80007c0 <MX_ADC1_Init+0x100>)
 8000736:	2201      	movs	r2, #1
 8000738:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800073c:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <MX_ADC1_Init+0x100>)
 800073e:	2200      	movs	r2, #0
 8000740:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000742:	4b1f      	ldr	r3, [pc, #124]	; (80007c0 <MX_ADC1_Init+0x100>)
 8000744:	2201      	movs	r2, #1
 8000746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 800074a:	4b1d      	ldr	r3, [pc, #116]	; (80007c0 <MX_ADC1_Init+0x100>)
 800074c:	2210      	movs	r2, #16
 800074e:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8000750:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_ADC1_Init+0x100>)
 8000752:	2220      	movs	r2, #32
 8000754:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000756:	4b1a      	ldr	r3, [pc, #104]	; (80007c0 <MX_ADC1_Init+0x100>)
 8000758:	2200      	movs	r2, #0
 800075a:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_ADC1_Init+0x100>)
 800075e:	2201      	movs	r2, #1
 8000760:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000762:	4817      	ldr	r0, [pc, #92]	; (80007c0 <MX_ADC1_Init+0x100>)
 8000764:	f001 f858 	bl	8001818 <HAL_ADC_Init>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800076e:	f000 faef 	bl	8000d50 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000772:	2300      	movs	r3, #0
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000776:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077a:	4619      	mov	r1, r3
 800077c:	4810      	ldr	r0, [pc, #64]	; (80007c0 <MX_ADC1_Init+0x100>)
 800077e:	f002 f96d 	bl	8002a5c <HAL_ADCEx_MultiModeConfigChannel>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d001      	beq.n	800078c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000788:	f000 fae2 	bl	8000d50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800078c:	4b0d      	ldr	r3, [pc, #52]	; (80007c4 <MX_ADC1_Init+0x104>)
 800078e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000790:	2306      	movs	r3, #6
 8000792:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000794:	2300      	movs	r3, #0
 8000796:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000798:	237f      	movs	r3, #127	; 0x7f
 800079a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800079c:	2304      	movs	r3, #4
 800079e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80007a0:	2300      	movs	r3, #0
 80007a2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	4619      	mov	r1, r3
 80007a8:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_ADC1_Init+0x100>)
 80007aa:	f001 fad9 	bl	8001d60 <HAL_ADC_ConfigChannel>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80007b4:	f000 facc 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007b8:	bf00      	nop
 80007ba:	3730      	adds	r7, #48	; 0x30
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	200001a0 	.word	0x200001a0
 80007c4:	04300002 	.word	0x04300002

080007c8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b088      	sub	sp, #32
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007ce:	463b      	mov	r3, r7
 80007d0:	2220      	movs	r2, #32
 80007d2:	2100      	movs	r1, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f00b fefd 	bl	800c5d4 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80007da:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <MX_ADC2_Init+0xbc>)
 80007dc:	4a2a      	ldr	r2, [pc, #168]	; (8000888 <MX_ADC2_Init+0xc0>)
 80007de:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80007e0:	4b28      	ldr	r3, [pc, #160]	; (8000884 <MX_ADC2_Init+0xbc>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80007e6:	4b27      	ldr	r3, [pc, #156]	; (8000884 <MX_ADC2_Init+0xbc>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007ec:	4b25      	ldr	r3, [pc, #148]	; (8000884 <MX_ADC2_Init+0xbc>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80007f2:	4b24      	ldr	r3, [pc, #144]	; (8000884 <MX_ADC2_Init+0xbc>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007f8:	4b22      	ldr	r3, [pc, #136]	; (8000884 <MX_ADC2_Init+0xbc>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007fe:	4b21      	ldr	r3, [pc, #132]	; (8000884 <MX_ADC2_Init+0xbc>)
 8000800:	2204      	movs	r2, #4
 8000802:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_ADC2_Init+0xbc>)
 8000806:	2200      	movs	r2, #0
 8000808:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800080a:	4b1e      	ldr	r3, [pc, #120]	; (8000884 <MX_ADC2_Init+0xbc>)
 800080c:	2200      	movs	r2, #0
 800080e:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000810:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_ADC2_Init+0xbc>)
 8000812:	2201      	movs	r2, #1
 8000814:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000816:	4b1b      	ldr	r3, [pc, #108]	; (8000884 <MX_ADC2_Init+0xbc>)
 8000818:	2200      	movs	r2, #0
 800081a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800081e:	4b19      	ldr	r3, [pc, #100]	; (8000884 <MX_ADC2_Init+0xbc>)
 8000820:	2200      	movs	r2, #0
 8000822:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_ADC2_Init+0xbc>)
 8000826:	2200      	movs	r2, #0
 8000828:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800082a:	4b16      	ldr	r3, [pc, #88]	; (8000884 <MX_ADC2_Init+0xbc>)
 800082c:	2200      	movs	r2, #0
 800082e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000832:	4b14      	ldr	r3, [pc, #80]	; (8000884 <MX_ADC2_Init+0xbc>)
 8000834:	2200      	movs	r2, #0
 8000836:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_ADC2_Init+0xbc>)
 800083a:	2200      	movs	r2, #0
 800083c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000840:	4810      	ldr	r0, [pc, #64]	; (8000884 <MX_ADC2_Init+0xbc>)
 8000842:	f000 ffe9 	bl	8001818 <HAL_ADC_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 800084c:	f000 fa80 	bl	8000d50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_ADC2_Init+0xc4>)
 8000852:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000854:	2306      	movs	r3, #6
 8000856:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000858:	2300      	movs	r3, #0
 800085a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800085c:	237f      	movs	r3, #127	; 0x7f
 800085e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000860:	2304      	movs	r3, #4
 8000862:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000868:	463b      	mov	r3, r7
 800086a:	4619      	mov	r1, r3
 800086c:	4805      	ldr	r0, [pc, #20]	; (8000884 <MX_ADC2_Init+0xbc>)
 800086e:	f001 fa77 	bl	8001d60 <HAL_ADC_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 8000878:	f000 fa6a 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800087c:	bf00      	nop
 800087e:	3720      	adds	r7, #32
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	2000020c 	.word	0x2000020c
 8000888:	50000100 	.word	0x50000100
 800088c:	0c900008 	.word	0x0c900008

08000890 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b08c      	sub	sp, #48	; 0x30
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800089a:	2200      	movs	r2, #0
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	605a      	str	r2, [r3, #4]
 80008a0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80008a2:	1d3b      	adds	r3, r7, #4
 80008a4:	2220      	movs	r2, #32
 80008a6:	2100      	movs	r1, #0
 80008a8:	4618      	mov	r0, r3
 80008aa:	f00b fe93 	bl	800c5d4 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80008ae:	4b31      	ldr	r3, [pc, #196]	; (8000974 <MX_ADC3_Init+0xe4>)
 80008b0:	4a31      	ldr	r2, [pc, #196]	; (8000978 <MX_ADC3_Init+0xe8>)
 80008b2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80008b4:	4b2f      	ldr	r3, [pc, #188]	; (8000974 <MX_ADC3_Init+0xe4>)
 80008b6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80008ba:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80008bc:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <MX_ADC3_Init+0xe4>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008c2:	4b2c      	ldr	r3, [pc, #176]	; (8000974 <MX_ADC3_Init+0xe4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 80008c8:	4b2a      	ldr	r3, [pc, #168]	; (8000974 <MX_ADC3_Init+0xe4>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008ce:	4b29      	ldr	r3, [pc, #164]	; (8000974 <MX_ADC3_Init+0xe4>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008d4:	4b27      	ldr	r3, [pc, #156]	; (8000974 <MX_ADC3_Init+0xe4>)
 80008d6:	2204      	movs	r2, #4
 80008d8:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80008da:	4b26      	ldr	r3, [pc, #152]	; (8000974 <MX_ADC3_Init+0xe4>)
 80008dc:	2200      	movs	r2, #0
 80008de:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80008e0:	4b24      	ldr	r3, [pc, #144]	; (8000974 <MX_ADC3_Init+0xe4>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 80008e6:	4b23      	ldr	r3, [pc, #140]	; (8000974 <MX_ADC3_Init+0xe4>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80008ec:	4b21      	ldr	r3, [pc, #132]	; (8000974 <MX_ADC3_Init+0xe4>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008f4:	4b1f      	ldr	r3, [pc, #124]	; (8000974 <MX_ADC3_Init+0xe4>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008fa:	4b1e      	ldr	r3, [pc, #120]	; (8000974 <MX_ADC3_Init+0xe4>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000900:	4b1c      	ldr	r3, [pc, #112]	; (8000974 <MX_ADC3_Init+0xe4>)
 8000902:	2200      	movs	r2, #0
 8000904:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000908:	4b1a      	ldr	r3, [pc, #104]	; (8000974 <MX_ADC3_Init+0xe4>)
 800090a:	2200      	movs	r2, #0
 800090c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = DISABLE;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <MX_ADC3_Init+0xe4>)
 8000910:	2200      	movs	r2, #0
 8000912:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000916:	4817      	ldr	r0, [pc, #92]	; (8000974 <MX_ADC3_Init+0xe4>)
 8000918:	f000 ff7e 	bl	8001818 <HAL_ADC_Init>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <MX_ADC3_Init+0x96>
  {
    Error_Handler();
 8000922:	f000 fa15 	bl	8000d50 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 800092a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092e:	4619      	mov	r1, r3
 8000930:	4810      	ldr	r0, [pc, #64]	; (8000974 <MX_ADC3_Init+0xe4>)
 8000932:	f002 f893 	bl	8002a5c <HAL_ADCEx_MultiModeConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 800093c:	f000 fa08 	bl	8000d50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <MX_ADC3_Init+0xec>)
 8000942:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000944:	2306      	movs	r3, #6
 8000946:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000948:	2300      	movs	r3, #0
 800094a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800094c:	237f      	movs	r3, #127	; 0x7f
 800094e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000950:	2304      	movs	r3, #4
 8000952:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000958:	1d3b      	adds	r3, r7, #4
 800095a:	4619      	mov	r1, r3
 800095c:	4805      	ldr	r0, [pc, #20]	; (8000974 <MX_ADC3_Init+0xe4>)
 800095e:	f001 f9ff 	bl	8001d60 <HAL_ADC_ConfigChannel>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_ADC3_Init+0xdc>
  {
    Error_Handler();
 8000968:	f000 f9f2 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800096c:	bf00      	nop
 800096e:	3730      	adds	r7, #48	; 0x30
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000278 	.word	0x20000278
 8000978:	50000400 	.word	0x50000400
 800097c:	32601000 	.word	0x32601000

08000980 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000986:	463b      	mov	r3, r7
 8000988:	2220      	movs	r2, #32
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f00b fe21 	bl	800c5d4 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8000992:	4b2b      	ldr	r3, [pc, #172]	; (8000a40 <MX_ADC4_Init+0xc0>)
 8000994:	4a2b      	ldr	r2, [pc, #172]	; (8000a44 <MX_ADC4_Init+0xc4>)
 8000996:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000998:	4b29      	ldr	r3, [pc, #164]	; (8000a40 <MX_ADC4_Init+0xc0>)
 800099a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800099e:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 80009a0:	4b27      	ldr	r3, [pc, #156]	; (8000a40 <MX_ADC4_Init+0xc0>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009a6:	4b26      	ldr	r3, [pc, #152]	; (8000a40 <MX_ADC4_Init+0xc0>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 80009ac:	4b24      	ldr	r3, [pc, #144]	; (8000a40 <MX_ADC4_Init+0xc0>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80009b2:	4b23      	ldr	r3, [pc, #140]	; (8000a40 <MX_ADC4_Init+0xc0>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009b8:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <MX_ADC4_Init+0xc0>)
 80009ba:	2204      	movs	r2, #4
 80009bc:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 80009be:	4b20      	ldr	r3, [pc, #128]	; (8000a40 <MX_ADC4_Init+0xc0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 80009c4:	4b1e      	ldr	r3, [pc, #120]	; (8000a40 <MX_ADC4_Init+0xc0>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 80009ca:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <MX_ADC4_Init+0xc0>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 80009d0:	4b1b      	ldr	r3, [pc, #108]	; (8000a40 <MX_ADC4_Init+0xc0>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009d8:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <MX_ADC4_Init+0xc0>)
 80009da:	2200      	movs	r2, #0
 80009dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009de:	4b18      	ldr	r3, [pc, #96]	; (8000a40 <MX_ADC4_Init+0xc0>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 80009e4:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <MX_ADC4_Init+0xc0>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_ADC4_Init+0xc0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <MX_ADC4_Init+0xc0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 80009fa:	4811      	ldr	r0, [pc, #68]	; (8000a40 <MX_ADC4_Init+0xc0>)
 80009fc:	f000 ff0c 	bl	8001818 <HAL_ADC_Init>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_ADC4_Init+0x8a>
  {
    Error_Handler();
 8000a06:	f000 f9a3 	bl	8000d50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <MX_ADC4_Init+0xc8>)
 8000a0c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a0e:	2306      	movs	r3, #6
 8000a10:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a16:	237f      	movs	r3, #127	; 0x7f
 8000a18:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a1a:	2304      	movs	r3, #4
 8000a1c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 8000a22:	463b      	mov	r3, r7
 8000a24:	4619      	mov	r1, r3
 8000a26:	4806      	ldr	r0, [pc, #24]	; (8000a40 <MX_ADC4_Init+0xc0>)
 8000a28:	f001 f99a 	bl	8001d60 <HAL_ADC_ConfigChannel>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <MX_ADC4_Init+0xb6>
  {
    Error_Handler();
 8000a32:	f000 f98d 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 8000a36:	bf00      	nop
 8000a38:	3720      	adds	r7, #32
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	200002e4 	.word	0x200002e4
 8000a44:	50000500 	.word	0x50000500
 8000a48:	14f00020 	.word	0x14f00020

08000a4c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000a50:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000a52:	4a22      	ldr	r2, [pc, #136]	; (8000adc <MX_LPUART1_UART_Init+0x90>)
 8000a54:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000a56:	4b20      	ldr	r3, [pc, #128]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b1e      	ldr	r3, [pc, #120]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b1b      	ldr	r3, [pc, #108]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b18      	ldr	r3, [pc, #96]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a82:	4b15      	ldr	r3, [pc, #84]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000a8e:	4812      	ldr	r0, [pc, #72]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000a90:	f006 fa60 	bl	8006f54 <HAL_UART_Init>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000a9a:	f000 f959 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000aa2:	f006 fffb 	bl	8007a9c <HAL_UARTEx_SetTxFifoThreshold>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000aac:	f000 f950 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4809      	ldr	r0, [pc, #36]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000ab4:	f007 f830 	bl	8007b18 <HAL_UARTEx_SetRxFifoThreshold>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000abe:	f000 f947 	bl	8000d50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_LPUART1_UART_Init+0x8c>)
 8000ac4:	f006 ffb1 	bl	8007a2a <HAL_UARTEx_DisableFifoMode>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000ace:	f000 f93f 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	200003b0 	.word	0x200003b0
 8000adc:	40008000 	.word	0x40008000

08000ae0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08c      	sub	sp, #48	; 0x30
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae6:	f107 0320 	add.w	r3, r7, #32
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b04:	463b      	mov	r3, r7
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
 8000b0a:	605a      	str	r2, [r3, #4]
 8000b0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b0e:	4b25      	ldr	r3, [pc, #148]	; (8000ba4 <MX_TIM2_Init+0xc4>)
 8000b10:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b14:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 156 - 1;
 8000b16:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <MX_TIM2_Init+0xc4>)
 8000b18:	229b      	movs	r2, #155	; 0x9b
 8000b1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1c:	4b21      	ldr	r3, [pc, #132]	; (8000ba4 <MX_TIM2_Init+0xc4>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <MX_TIM2_Init+0xc4>)
 8000b24:	2209      	movs	r2, #9
 8000b26:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <MX_TIM2_Init+0xc4>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <MX_TIM2_Init+0xc4>)
 8000b30:	2280      	movs	r2, #128	; 0x80
 8000b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b34:	481b      	ldr	r0, [pc, #108]	; (8000ba4 <MX_TIM2_Init+0xc4>)
 8000b36:	f005 fb57 	bl	80061e8 <HAL_TIM_Base_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000b40:	f000 f906 	bl	8000d50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b48:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b4a:	f107 0320 	add.w	r3, r7, #32
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4814      	ldr	r0, [pc, #80]	; (8000ba4 <MX_TIM2_Init+0xc4>)
 8000b52:	f005 fd69 	bl	8006628 <HAL_TIM_ConfigClockSource>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000b5c:	f000 f8f8 	bl	8000d50 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	480d      	ldr	r0, [pc, #52]	; (8000ba4 <MX_TIM2_Init+0xc4>)
 8000b70:	f005 fe70 	bl	8006854 <HAL_TIM_SlaveConfigSynchro>
 8000b74:	4603      	mov	r3, r0
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000b7a:	f000 f8e9 	bl	8000d50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000b7e:	2320      	movs	r3, #32
 8000b80:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b86:	463b      	mov	r3, r7
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <MX_TIM2_Init+0xc4>)
 8000b8c:	f006 f906 	bl	8006d9c <HAL_TIMEx_MasterConfigSynchronization>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d001      	beq.n	8000b9a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000b96:	f000 f8db 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b9a:	bf00      	nop
 8000b9c:	3730      	adds	r7, #48	; 0x30
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000444 	.word	0x20000444

08000ba8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000bae:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_DMA_Init+0x60>)
 8000bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bb2:	4a15      	ldr	r2, [pc, #84]	; (8000c08 <MX_DMA_Init+0x60>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	6493      	str	r3, [r2, #72]	; 0x48
 8000bba:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <MX_DMA_Init+0x60>)
 8000bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <MX_DMA_Init+0x60>)
 8000bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bca:	4a0f      	ldr	r2, [pc, #60]	; (8000c08 <MX_DMA_Init+0x60>)
 8000bcc:	f043 0301 	orr.w	r3, r3, #1
 8000bd0:	6493      	str	r3, [r2, #72]	; 0x48
 8000bd2:	4b0d      	ldr	r3, [pc, #52]	; (8000c08 <MX_DMA_Init+0x60>)
 8000bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bd6:	f003 0301 	and.w	r3, r3, #1
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2100      	movs	r1, #0
 8000be2:	200b      	movs	r0, #11
 8000be4:	f002 f91d 	bl	8002e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000be8:	200b      	movs	r0, #11
 8000bea:	f002 f934 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* DMAMUX_OVR_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMAMUX_OVR_IRQn, 0, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	205e      	movs	r0, #94	; 0x5e
 8000bf4:	f002 f915 	bl	8002e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMAMUX_OVR_IRQn);
 8000bf8:	205e      	movs	r0, #94	; 0x5e
 8000bfa:	f002 f92c 	bl	8002e56 <HAL_NVIC_EnableIRQ>

}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000

08000c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b08a      	sub	sp, #40	; 0x28
 8000c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c12:	f107 0314 	add.w	r3, r7, #20
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c22:	4b40      	ldr	r3, [pc, #256]	; (8000d24 <MX_GPIO_Init+0x118>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	4a3f      	ldr	r2, [pc, #252]	; (8000d24 <MX_GPIO_Init+0x118>)
 8000c28:	f043 0304 	orr.w	r3, r3, #4
 8000c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2e:	4b3d      	ldr	r3, [pc, #244]	; (8000d24 <MX_GPIO_Init+0x118>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	613b      	str	r3, [r7, #16]
 8000c38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c3a:	4b3a      	ldr	r3, [pc, #232]	; (8000d24 <MX_GPIO_Init+0x118>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	4a39      	ldr	r2, [pc, #228]	; (8000d24 <MX_GPIO_Init+0x118>)
 8000c40:	f043 0320 	orr.w	r3, r3, #32
 8000c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c46:	4b37      	ldr	r3, [pc, #220]	; (8000d24 <MX_GPIO_Init+0x118>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	f003 0320 	and.w	r3, r3, #32
 8000c4e:	60fb      	str	r3, [r7, #12]
 8000c50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c52:	4b34      	ldr	r3, [pc, #208]	; (8000d24 <MX_GPIO_Init+0x118>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	4a33      	ldr	r2, [pc, #204]	; (8000d24 <MX_GPIO_Init+0x118>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5e:	4b31      	ldr	r3, [pc, #196]	; (8000d24 <MX_GPIO_Init+0x118>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
 8000c68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6a:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <MX_GPIO_Init+0x118>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	4a2d      	ldr	r2, [pc, #180]	; (8000d24 <MX_GPIO_Init+0x118>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c76:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <MX_GPIO_Init+0x118>)
 8000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2101      	movs	r1, #1
 8000c86:	4828      	ldr	r0, [pc, #160]	; (8000d28 <MX_GPIO_Init+0x11c>)
 8000c88:	f002 fcf4 	bl	8003674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TEST_OUT_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	2122      	movs	r1, #34	; 0x22
 8000c90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c94:	f002 fcee 	bl	8003674 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c9e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	481e      	ldr	r0, [pc, #120]	; (8000d28 <MX_GPIO_Init+0x11c>)
 8000cb0:	f002 fb5e 	bl	8003370 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_EN_Pin */
  GPIO_InitStruct.Pin = USB_EN_Pin;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb8:	2301      	movs	r3, #1
 8000cba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_EN_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	f107 0314 	add.w	r3, r7, #20
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4817      	ldr	r0, [pc, #92]	; (8000d28 <MX_GPIO_Init+0x11c>)
 8000ccc:	f002 fb50 	bl	8003370 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUT_Pin */
  GPIO_InitStruct.Pin = TEST_OUT_Pin;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cdc:	2303      	movs	r3, #3
 8000cde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(TEST_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cea:	f002 fb41 	bl	8003370 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000cee:	2320      	movs	r3, #32
 8000cf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d08:	f002 fb32 	bl	8003370 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2100      	movs	r1, #0
 8000d10:	2028      	movs	r0, #40	; 0x28
 8000d12:	f002 f886 	bl	8002e22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000d16:	2028      	movs	r0, #40	; 0x28
 8000d18:	f002 f89d 	bl	8002e56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d1c:	bf00      	nop
 8000d1e:	3728      	adds	r7, #40	; 0x28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40021000 	.word	0x40021000
 8000d28:	48000800 	.word	0x48000800

08000d2c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(TEST_OUT_GPIO_Port, TEST_OUT_Pin);
 8000d34:	2102      	movs	r1, #2
 8000d36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d3a:	f002 fcb3 	bl	80036a4 <HAL_GPIO_TogglePin>

    adc_conv_complete = 1;
 8000d3e:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <HAL_ADC_ConvCpltCallback+0x20>)
 8000d40:	2201      	movs	r2, #1
 8000d42:	601a      	str	r2, [r3, #0]
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20002ba0 	.word	0x20002ba0

08000d50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d54:	b672      	cpsid	i
}
 8000d56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <Error_Handler+0x8>
	...

08000d5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <HAL_MspInit+0x44>)
 8000d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d66:	4a0e      	ldr	r2, [pc, #56]	; (8000da0 <HAL_MspInit+0x44>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d6e:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <HAL_MspInit+0x44>)
 8000d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	607b      	str	r3, [r7, #4]
 8000d78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7a:	4b09      	ldr	r3, [pc, #36]	; (8000da0 <HAL_MspInit+0x44>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7e:	4a08      	ldr	r2, [pc, #32]	; (8000da0 <HAL_MspInit+0x44>)
 8000d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d84:	6593      	str	r3, [r2, #88]	; 0x58
 8000d86:	4b06      	ldr	r3, [pc, #24]	; (8000da0 <HAL_MspInit+0x44>)
 8000d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	603b      	str	r3, [r7, #0]
 8000d90:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d92:	f004 fa9d 	bl	80052d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d96:	bf00      	nop
 8000d98:	3708      	adds	r7, #8
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40021000 	.word	0x40021000

08000da4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b0a4      	sub	sp, #144	; 0x90
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dac:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000db0:	2200      	movs	r2, #0
 8000db2:	601a      	str	r2, [r3, #0]
 8000db4:	605a      	str	r2, [r3, #4]
 8000db6:	609a      	str	r2, [r3, #8]
 8000db8:	60da      	str	r2, [r3, #12]
 8000dba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dc0:	2254      	movs	r2, #84	; 0x54
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f00b fc05 	bl	800c5d4 <memset>
  if(hadc->Instance==ADC1)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000dd2:	d16c      	bne.n	8000eae <HAL_ADC_MspInit+0x10a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000dd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000dd8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000dda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dde:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de4:	4618      	mov	r0, r3
 8000de6:	f004 ffb1 	bl	8005d4c <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000df0:	f7ff ffae 	bl	8000d50 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000df4:	4b98      	ldr	r3, [pc, #608]	; (8001058 <HAL_ADC_MspInit+0x2b4>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	4a97      	ldr	r2, [pc, #604]	; (8001058 <HAL_ADC_MspInit+0x2b4>)
 8000dfc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000dfe:	4b96      	ldr	r3, [pc, #600]	; (8001058 <HAL_ADC_MspInit+0x2b4>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d10b      	bne.n	8000e1e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000e06:	4b95      	ldr	r3, [pc, #596]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 8000e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0a:	4a94      	ldr	r2, [pc, #592]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 8000e0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e12:	4b92      	ldr	r3, [pc, #584]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e1a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	4b8f      	ldr	r3, [pc, #572]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	4a8e      	ldr	r2, [pc, #568]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 8000e24:	f043 0301 	orr.w	r3, r3, #1
 8000e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2a:	4b8c      	ldr	r3, [pc, #560]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	f003 0301 	and.w	r3, r3, #1
 8000e32:	623b      	str	r3, [r7, #32]
 8000e34:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e36:	2301      	movs	r3, #1
 8000e38:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e3a:	2303      	movs	r3, #3
 8000e3c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e50:	f002 fa8e 	bl	8003370 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e54:	4b82      	ldr	r3, [pc, #520]	; (8001060 <HAL_ADC_MspInit+0x2bc>)
 8000e56:	4a83      	ldr	r2, [pc, #524]	; (8001064 <HAL_ADC_MspInit+0x2c0>)
 8000e58:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e5a:	4b81      	ldr	r3, [pc, #516]	; (8001060 <HAL_ADC_MspInit+0x2bc>)
 8000e5c:	2205      	movs	r2, #5
 8000e5e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e60:	4b7f      	ldr	r3, [pc, #508]	; (8001060 <HAL_ADC_MspInit+0x2bc>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e66:	4b7e      	ldr	r3, [pc, #504]	; (8001060 <HAL_ADC_MspInit+0x2bc>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e6c:	4b7c      	ldr	r3, [pc, #496]	; (8001060 <HAL_ADC_MspInit+0x2bc>)
 8000e6e:	2280      	movs	r2, #128	; 0x80
 8000e70:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e72:	4b7b      	ldr	r3, [pc, #492]	; (8001060 <HAL_ADC_MspInit+0x2bc>)
 8000e74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e78:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e7a:	4b79      	ldr	r3, [pc, #484]	; (8001060 <HAL_ADC_MspInit+0x2bc>)
 8000e7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e80:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e82:	4b77      	ldr	r3, [pc, #476]	; (8001060 <HAL_ADC_MspInit+0x2bc>)
 8000e84:	2220      	movs	r2, #32
 8000e86:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_HIGH;
 8000e88:	4b75      	ldr	r3, [pc, #468]	; (8001060 <HAL_ADC_MspInit+0x2bc>)
 8000e8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e8e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e90:	4873      	ldr	r0, [pc, #460]	; (8001060 <HAL_ADC_MspInit+0x2bc>)
 8000e92:	f001 fffb 	bl	8002e8c <HAL_DMA_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_ADC_MspInit+0xfc>
    {
      Error_Handler();
 8000e9c:	f7ff ff58 	bl	8000d50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4a6f      	ldr	r2, [pc, #444]	; (8001060 <HAL_ADC_MspInit+0x2bc>)
 8000ea4:	655a      	str	r2, [r3, #84]	; 0x54
 8000ea6:	4a6e      	ldr	r2, [pc, #440]	; (8001060 <HAL_ADC_MspInit+0x2bc>)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8000eac:	e0cf      	b.n	800104e <HAL_ADC_MspInit+0x2aa>
  else if(hadc->Instance==ADC2)
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4a6d      	ldr	r2, [pc, #436]	; (8001068 <HAL_ADC_MspInit+0x2c4>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d140      	bne.n	8000f3a <HAL_ADC_MspInit+0x196>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000eb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000ebe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ec2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ec4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f004 ff3f 	bl	8005d4c <HAL_RCCEx_PeriphCLKConfig>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <HAL_ADC_MspInit+0x134>
      Error_Handler();
 8000ed4:	f7ff ff3c 	bl	8000d50 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000ed8:	4b5f      	ldr	r3, [pc, #380]	; (8001058 <HAL_ADC_MspInit+0x2b4>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	4a5e      	ldr	r2, [pc, #376]	; (8001058 <HAL_ADC_MspInit+0x2b4>)
 8000ee0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ee2:	4b5d      	ldr	r3, [pc, #372]	; (8001058 <HAL_ADC_MspInit+0x2b4>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d10b      	bne.n	8000f02 <HAL_ADC_MspInit+0x15e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000eea:	4b5c      	ldr	r3, [pc, #368]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	4a5b      	ldr	r2, [pc, #364]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 8000ef0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef6:	4b59      	ldr	r3, [pc, #356]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000efe:	61fb      	str	r3, [r7, #28]
 8000f00:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	4b56      	ldr	r3, [pc, #344]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 8000f04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f06:	4a55      	ldr	r2, [pc, #340]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 8000f08:	f043 0301 	orr.w	r3, r3, #1
 8000f0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0e:	4b53      	ldr	r3, [pc, #332]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 8000f10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	61bb      	str	r3, [r7, #24]
 8000f18:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f1a:	2340      	movs	r3, #64	; 0x40
 8000f1c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f34:	f002 fa1c 	bl	8003370 <HAL_GPIO_Init>
}
 8000f38:	e089      	b.n	800104e <HAL_ADC_MspInit+0x2aa>
  else if(hadc->Instance==ADC3)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a4b      	ldr	r2, [pc, #300]	; (800106c <HAL_ADC_MspInit+0x2c8>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d13f      	bne.n	8000fc4 <HAL_ADC_MspInit+0x220>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000f44:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f48:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8000f4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f4e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f50:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f54:	4618      	mov	r0, r3
 8000f56:	f004 fef9 	bl	8005d4c <HAL_RCCEx_PeriphCLKConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_ADC_MspInit+0x1c0>
      Error_Handler();
 8000f60:	f7ff fef6 	bl	8000d50 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000f64:	4b42      	ldr	r3, [pc, #264]	; (8001070 <HAL_ADC_MspInit+0x2cc>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	4a41      	ldr	r2, [pc, #260]	; (8001070 <HAL_ADC_MspInit+0x2cc>)
 8000f6c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000f6e:	4b40      	ldr	r3, [pc, #256]	; (8001070 <HAL_ADC_MspInit+0x2cc>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d10b      	bne.n	8000f8e <HAL_ADC_MspInit+0x1ea>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000f76:	4b39      	ldr	r3, [pc, #228]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a38      	ldr	r2, [pc, #224]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b36      	ldr	r3, [pc, #216]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8e:	4b33      	ldr	r3, [pc, #204]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 8000f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f92:	4a32      	ldr	r2, [pc, #200]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f9a:	4b30      	ldr	r3, [pc, #192]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 8000f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000faa:	2303      	movs	r3, #3
 8000fac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000fba:	4619      	mov	r1, r3
 8000fbc:	482d      	ldr	r0, [pc, #180]	; (8001074 <HAL_ADC_MspInit+0x2d0>)
 8000fbe:	f002 f9d7 	bl	8003370 <HAL_GPIO_Init>
}
 8000fc2:	e044      	b.n	800104e <HAL_ADC_MspInit+0x2aa>
  else if(hadc->Instance==ADC4)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a2b      	ldr	r2, [pc, #172]	; (8001078 <HAL_ADC_MspInit+0x2d4>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d13f      	bne.n	800104e <HAL_ADC_MspInit+0x2aa>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000fce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8000fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fd8:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f004 feb4 	bl	8005d4c <HAL_RCCEx_PeriphCLKConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <HAL_ADC_MspInit+0x24a>
      Error_Handler();
 8000fea:	f7ff feb1 	bl	8000d50 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000fee:	4b20      	ldr	r3, [pc, #128]	; (8001070 <HAL_ADC_MspInit+0x2cc>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	4a1e      	ldr	r2, [pc, #120]	; (8001070 <HAL_ADC_MspInit+0x2cc>)
 8000ff6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <HAL_ADC_MspInit+0x2cc>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d10b      	bne.n	8001018 <HAL_ADC_MspInit+0x274>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 8001002:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001004:	4a15      	ldr	r2, [pc, #84]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 8001006:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800100a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100c:	4b13      	ldr	r3, [pc, #76]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 800100e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001018:	4b10      	ldr	r3, [pc, #64]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 800101a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101c:	4a0f      	ldr	r2, [pc, #60]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 800101e:	f043 0302 	orr.w	r3, r3, #2
 8001022:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <HAL_ADC_MspInit+0x2b8>)
 8001026:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001030:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001034:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001036:	2303      	movs	r3, #3
 8001038:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001046:	4619      	mov	r1, r3
 8001048:	480a      	ldr	r0, [pc, #40]	; (8001074 <HAL_ADC_MspInit+0x2d0>)
 800104a:	f002 f991 	bl	8003370 <HAL_GPIO_Init>
}
 800104e:	bf00      	nop
 8001050:	3790      	adds	r7, #144	; 0x90
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20002ba4 	.word	0x20002ba4
 800105c:	40021000 	.word	0x40021000
 8001060:	20000350 	.word	0x20000350
 8001064:	40020008 	.word	0x40020008
 8001068:	50000100 	.word	0x50000100
 800106c:	50000400 	.word	0x50000400
 8001070:	20002ba8 	.word	0x20002ba8
 8001074:	48000400 	.word	0x48000400
 8001078:	50000500 	.word	0x50000500

0800107c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b09e      	sub	sp, #120	; 0x78
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	2254      	movs	r2, #84	; 0x54
 800109a:	2100      	movs	r1, #0
 800109c:	4618      	mov	r0, r3
 800109e:	f00b fa99 	bl	800c5d4 <memset>
  if(huart->Instance==LPUART1)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a1f      	ldr	r2, [pc, #124]	; (8001124 <HAL_UART_MspInit+0xa8>)
 80010a8:	4293      	cmp	r3, r2
 80010aa:	d136      	bne.n	800111a <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80010ac:	2320      	movs	r3, #32
 80010ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b4:	f107 0310 	add.w	r3, r7, #16
 80010b8:	4618      	mov	r0, r3
 80010ba:	f004 fe47 	bl	8005d4c <HAL_RCCEx_PeriphCLKConfig>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010c4:	f7ff fe44 	bl	8000d50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <HAL_UART_MspInit+0xac>)
 80010ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010cc:	4a16      	ldr	r2, [pc, #88]	; (8001128 <HAL_UART_MspInit+0xac>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HAL_UART_MspInit+0xac>)
 80010d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <HAL_UART_MspInit+0xac>)
 80010e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e4:	4a10      	ldr	r2, [pc, #64]	; (8001128 <HAL_UART_MspInit+0xac>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <HAL_UART_MspInit+0xac>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80010f8:	230c      	movs	r3, #12
 80010fa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8001108:	230c      	movs	r3, #12
 800110a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001110:	4619      	mov	r1, r3
 8001112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001116:	f002 f92b 	bl	8003370 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800111a:	bf00      	nop
 800111c:	3778      	adds	r7, #120	; 0x78
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40008000 	.word	0x40008000
 8001128:	40021000 	.word	0x40021000

0800112c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b084      	sub	sp, #16
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800113c:	d113      	bne.n	8001166 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800113e:	4b0c      	ldr	r3, [pc, #48]	; (8001170 <HAL_TIM_Base_MspInit+0x44>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	4a0b      	ldr	r2, [pc, #44]	; (8001170 <HAL_TIM_Base_MspInit+0x44>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6593      	str	r3, [r2, #88]	; 0x58
 800114a:	4b09      	ldr	r3, [pc, #36]	; (8001170 <HAL_TIM_Base_MspInit+0x44>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	60fb      	str	r3, [r7, #12]
 8001154:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	201c      	movs	r0, #28
 800115c:	f001 fe61 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001160:	201c      	movs	r0, #28
 8001162:	f001 fe78 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001166:	bf00      	nop
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40021000 	.word	0x40021000

08001174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001178:	e7fe      	b.n	8001178 <NMI_Handler+0x4>

0800117a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <HardFault_Handler+0x4>

08001180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <MemManage_Handler+0x4>

08001186 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <BusFault_Handler+0x4>

0800118c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <UsageFault_Handler+0x4>

08001192 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c0:	f000 f8c8 	bl	8001354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <DMA1_Channel1_IRQHandler+0x10>)
 80011ce:	f001 ff80 	bl	80030d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000350 	.word	0x20000350

080011dc <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <USB_HP_IRQHandler+0x10>)
 80011e2:	f002 fb8c 	bl	80038fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20004084 	.word	0x20004084

080011f0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <USB_LP_IRQHandler+0x10>)
 80011f6:	f002 fb82 	bl	80038fe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20004084 	.word	0x20004084

08001204 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <TIM2_IRQHandler+0x10>)
 800120a:	f005 f8bd 	bl	8006388 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000444 	.word	0x20000444

08001218 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800121c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001220:	f002 fa5a 	bl	80036d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001224:	bf00      	nop
 8001226:	bd80      	pop	{r7, pc}

08001228 <DMAMUX_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX overrun interrupt.
  */
void DMAMUX_OVR_IRQHandler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE END DMAMUX_OVR_IRQn 0 */

  /* USER CODE BEGIN DMAMUX_OVR_IRQn 1 */

  /* USER CODE END DMAMUX_OVR_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800123c:	4b06      	ldr	r3, [pc, #24]	; (8001258 <SystemInit+0x20>)
 800123e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001242:	4a05      	ldr	r2, [pc, #20]	; (8001258 <SystemInit+0x20>)
 8001244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800125e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001260:	f7ff ffea 	bl	8001238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001264:	480c      	ldr	r0, [pc, #48]	; (8001298 <LoopForever+0x6>)
  ldr r1, =_edata
 8001266:	490d      	ldr	r1, [pc, #52]	; (800129c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <LoopForever+0xe>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800126c:	e002      	b.n	8001274 <LoopCopyDataInit>

0800126e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001272:	3304      	adds	r3, #4

08001274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001278:	d3f9      	bcc.n	800126e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127a:	4a0a      	ldr	r2, [pc, #40]	; (80012a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800127c:	4c0a      	ldr	r4, [pc, #40]	; (80012a8 <LoopForever+0x16>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001280:	e001      	b.n	8001286 <LoopFillZerobss>

08001282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001284:	3204      	adds	r2, #4

08001286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001288:	d3fb      	bcc.n	8001282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128a:	f00b f9ab 	bl	800c5e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800128e:	f7ff f941 	bl	8000514 <main>

08001292 <LoopForever>:

LoopForever:
    b LoopForever
 8001292:	e7fe      	b.n	8001292 <LoopForever>
  ldr   r0, =_estack
 8001294:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800129c:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80012a0:	0800c6dc 	.word	0x0800c6dc
  ldr r2, =_sbss
 80012a4:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80012a8:	20004580 	.word	0x20004580

080012ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012ac:	e7fe      	b.n	80012ac <ADC1_2_IRQHandler>

080012ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012b4:	2300      	movs	r3, #0
 80012b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b8:	2003      	movs	r0, #3
 80012ba:	f001 fda7 	bl	8002e0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012be:	2000      	movs	r0, #0
 80012c0:	f000 f80e 	bl	80012e0 <HAL_InitTick>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d002      	beq.n	80012d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	71fb      	strb	r3, [r7, #7]
 80012ce:	e001      	b.n	80012d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012d0:	f7ff fd44 	bl	8000d5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012d4:	79fb      	ldrb	r3, [r7, #7]

}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <HAL_InitTick+0x68>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d022      	beq.n	800133a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <HAL_InitTick+0x6c>)
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <HAL_InitTick+0x68>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001300:	fbb1 f3f3 	udiv	r3, r1, r3
 8001304:	fbb2 f3f3 	udiv	r3, r2, r3
 8001308:	4618      	mov	r0, r3
 800130a:	f001 fdb2 	bl	8002e72 <HAL_SYSTICK_Config>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d10f      	bne.n	8001334 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b0f      	cmp	r3, #15
 8001318:	d809      	bhi.n	800132e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800131a:	2200      	movs	r2, #0
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	f04f 30ff 	mov.w	r0, #4294967295
 8001322:	f001 fd7e 	bl	8002e22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001326:	4a0a      	ldr	r2, [pc, #40]	; (8001350 <HAL_InitTick+0x70>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	e007      	b.n	800133e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	73fb      	strb	r3, [r7, #15]
 8001332:	e004      	b.n	800133e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	e001      	b.n	800133e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800133e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3710      	adds	r7, #16
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000008 	.word	0x20000008
 800134c:	20000000 	.word	0x20000000
 8001350:	20000004 	.word	0x20000004

08001354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001358:	4b05      	ldr	r3, [pc, #20]	; (8001370 <HAL_IncTick+0x1c>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_IncTick+0x20>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4413      	add	r3, r2
 8001362:	4a03      	ldr	r2, [pc, #12]	; (8001370 <HAL_IncTick+0x1c>)
 8001364:	6013      	str	r3, [r2, #0]
}
 8001366:	bf00      	nop
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	20002bac 	.word	0x20002bac
 8001374:	20000008 	.word	0x20000008

08001378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <HAL_GetTick+0x14>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	20002bac 	.word	0x20002bac

08001390 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	609a      	str	r2, [r3, #8]
}
 80013aa:	bf00      	nop
 80013ac:	370c      	adds	r7, #12
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr

080013b6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80013b6:	b480      	push	{r7}
 80013b8:	b083      	sub	sp, #12
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	431a      	orrs	r2, r3
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	609a      	str	r2, [r3, #8]
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b087      	sub	sp, #28
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
 8001404:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	3360      	adds	r3, #96	; 0x60
 800140a:	461a      	mov	r2, r3
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <LL_ADC_SetOffset+0x44>)
 800141a:	4013      	ands	r3, r2
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001422:	683a      	ldr	r2, [r7, #0]
 8001424:	430a      	orrs	r2, r1
 8001426:	4313      	orrs	r3, r2
 8001428:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001430:	bf00      	nop
 8001432:	371c      	adds	r7, #28
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr
 800143c:	03fff000 	.word	0x03fff000

08001440 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	3360      	adds	r3, #96	; 0x60
 800144e:	461a      	mov	r2, r3
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001460:	4618      	mov	r0, r3
 8001462:	3714      	adds	r7, #20
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800146c:	b480      	push	{r7}
 800146e:	b087      	sub	sp, #28
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3360      	adds	r3, #96	; 0x60
 800147c:	461a      	mov	r2, r3
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	4413      	add	r3, r2
 8001484:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	431a      	orrs	r2, r3
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001496:	bf00      	nop
 8001498:	371c      	adds	r7, #28
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr

080014a2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80014a2:	b480      	push	{r7}
 80014a4:	b087      	sub	sp, #28
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	60f8      	str	r0, [r7, #12]
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	3360      	adds	r3, #96	; 0x60
 80014b2:	461a      	mov	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	431a      	orrs	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80014cc:	bf00      	nop
 80014ce:	371c      	adds	r7, #28
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80014d8:	b480      	push	{r7}
 80014da:	b087      	sub	sp, #28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3360      	adds	r3, #96	; 0x60
 80014e8:	461a      	mov	r2, r3
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	009b      	lsls	r3, r3, #2
 80014ee:	4413      	add	r3, r2
 80014f0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	431a      	orrs	r2, r3
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001502:	bf00      	nop
 8001504:	371c      	adds	r7, #28
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	695b      	ldr	r3, [r3, #20]
 800151c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	615a      	str	r2, [r3, #20]
}
 8001528:	bf00      	nop
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	68db      	ldr	r3, [r3, #12]
 8001540:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800155a:	b480      	push	{r7}
 800155c:	b087      	sub	sp, #28
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	3330      	adds	r3, #48	; 0x30
 800156a:	461a      	mov	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	0a1b      	lsrs	r3, r3, #8
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	4413      	add	r3, r2
 8001578:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	68bb      	ldr	r3, [r7, #8]
 8001580:	f003 031f 	and.w	r3, r3, #31
 8001584:	211f      	movs	r1, #31
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	401a      	ands	r2, r3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	0e9b      	lsrs	r3, r3, #26
 8001592:	f003 011f 	and.w	r1, r3, #31
 8001596:	68bb      	ldr	r3, [r7, #8]
 8001598:	f003 031f 	and.w	r3, r3, #31
 800159c:	fa01 f303 	lsl.w	r3, r1, r3
 80015a0:	431a      	orrs	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80015a6:	bf00      	nop
 80015a8:	371c      	adds	r7, #28
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr

080015b2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b087      	sub	sp, #28
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	60f8      	str	r0, [r7, #12]
 80015ba:	60b9      	str	r1, [r7, #8]
 80015bc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	3314      	adds	r3, #20
 80015c2:	461a      	mov	r2, r3
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	0e5b      	lsrs	r3, r3, #25
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	f003 0304 	and.w	r3, r3, #4
 80015ce:	4413      	add	r3, r2
 80015d0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	0d1b      	lsrs	r3, r3, #20
 80015da:	f003 031f 	and.w	r3, r3, #31
 80015de:	2107      	movs	r1, #7
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	43db      	mvns	r3, r3
 80015e6:	401a      	ands	r2, r3
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	0d1b      	lsrs	r3, r3, #20
 80015ec:	f003 031f 	and.w	r3, r3, #31
 80015f0:	6879      	ldr	r1, [r7, #4]
 80015f2:	fa01 f303 	lsl.w	r3, r1, r3
 80015f6:	431a      	orrs	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80015fc:	bf00      	nop
 80015fe:	371c      	adds	r7, #28
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001620:	43db      	mvns	r3, r3
 8001622:	401a      	ands	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f003 0318 	and.w	r3, r3, #24
 800162a:	4908      	ldr	r1, [pc, #32]	; (800164c <LL_ADC_SetChannelSingleDiff+0x44>)
 800162c:	40d9      	lsrs	r1, r3
 800162e:	68bb      	ldr	r3, [r7, #8]
 8001630:	400b      	ands	r3, r1
 8001632:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001636:	431a      	orrs	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800163e:	bf00      	nop
 8001640:	3714      	adds	r7, #20
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	0007ffff 	.word	0x0007ffff

08001650 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f003 031f 	and.w	r3, r3, #31
}
 8001660:	4618      	mov	r0, r3
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800167c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001680:	687a      	ldr	r2, [r7, #4]
 8001682:	6093      	str	r3, [r2, #8]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016a4:	d101      	bne.n	80016aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80016a6:	2301      	movs	r3, #1
 80016a8:	e000      	b.n	80016ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80016c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80016f4:	d101      	bne.n	80016fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80016f6:	2301      	movs	r3, #1
 80016f8:	e000      	b.n	80016fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	370c      	adds	r7, #12
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr

08001708 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001718:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800171c:	f043 0201 	orr.w	r2, r3, #1
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001724:	bf00      	nop
 8001726:	370c      	adds	r7, #12
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001740:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001744:	f043 0202 	orr.w	r2, r3, #2
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800174c:	bf00      	nop
 800174e:	370c      	adds	r7, #12
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b01      	cmp	r3, #1
 800176a:	d101      	bne.n	8001770 <LL_ADC_IsEnabled+0x18>
 800176c:	2301      	movs	r3, #1
 800176e:	e000      	b.n	8001772 <LL_ADC_IsEnabled+0x1a>
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b02      	cmp	r3, #2
 8001790:	d101      	bne.n	8001796 <LL_ADC_IsDisableOngoing+0x18>
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <LL_ADC_IsDisableOngoing+0x1a>
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017b8:	f043 0204 	orr.w	r2, r3, #4
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr

080017cc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d101      	bne.n	80017e4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80017e0:	2301      	movs	r3, #1
 80017e2:	e000      	b.n	80017e6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80017e4:	2300      	movs	r3, #0
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	f003 0308 	and.w	r3, r3, #8
 8001802:	2b08      	cmp	r3, #8
 8001804:	d101      	bne.n	800180a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001806:	2301      	movs	r3, #1
 8001808:	e000      	b.n	800180c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800180a:	2300      	movs	r3, #0
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001818:	b590      	push	{r4, r7, lr}
 800181a:	b089      	sub	sp, #36	; 0x24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d101      	bne.n	8001832 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e1a9      	b.n	8001b86 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183c:	2b00      	cmp	r3, #0
 800183e:	d109      	bne.n	8001854 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff faaf 	bl	8000da4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2200      	movs	r2, #0
 800184a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2200      	movs	r2, #0
 8001850:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff19 	bl	8001690 <LL_ADC_IsDeepPowerDownEnabled>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d004      	beq.n	800186e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff feff 	bl	800166c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff ff34 	bl	80016e0 <LL_ADC_IsInternalRegulatorEnabled>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d115      	bne.n	80018aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff ff18 	bl	80016b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001888:	4b9c      	ldr	r3, [pc, #624]	; (8001afc <HAL_ADC_Init+0x2e4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	099b      	lsrs	r3, r3, #6
 800188e:	4a9c      	ldr	r2, [pc, #624]	; (8001b00 <HAL_ADC_Init+0x2e8>)
 8001890:	fba2 2303 	umull	r2, r3, r2, r3
 8001894:	099b      	lsrs	r3, r3, #6
 8001896:	3301      	adds	r3, #1
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800189c:	e002      	b.n	80018a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f9      	bne.n	800189e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7ff ff16 	bl	80016e0 <LL_ADC_IsInternalRegulatorEnabled>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d10d      	bne.n	80018d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018be:	f043 0210 	orr.w	r2, r3, #16
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ca:	f043 0201 	orr.w	r2, r3, #1
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ff76 	bl	80017cc <LL_ADC_REG_IsConversionOngoing>
 80018e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f040 8142 	bne.w	8001b74 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f040 813e 	bne.w	8001b74 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001900:	f043 0202 	orr.w	r2, r3, #2
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff ff23 	bl	8001758 <LL_ADC_IsEnabled>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d141      	bne.n	800199c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001920:	d004      	beq.n	800192c <HAL_ADC_Init+0x114>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a77      	ldr	r2, [pc, #476]	; (8001b04 <HAL_ADC_Init+0x2ec>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d10f      	bne.n	800194c <HAL_ADC_Init+0x134>
 800192c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001930:	f7ff ff12 	bl	8001758 <LL_ADC_IsEnabled>
 8001934:	4604      	mov	r4, r0
 8001936:	4873      	ldr	r0, [pc, #460]	; (8001b04 <HAL_ADC_Init+0x2ec>)
 8001938:	f7ff ff0e 	bl	8001758 <LL_ADC_IsEnabled>
 800193c:	4603      	mov	r3, r0
 800193e:	4323      	orrs	r3, r4
 8001940:	2b00      	cmp	r3, #0
 8001942:	bf0c      	ite	eq
 8001944:	2301      	moveq	r3, #1
 8001946:	2300      	movne	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	e012      	b.n	8001972 <HAL_ADC_Init+0x15a>
 800194c:	486e      	ldr	r0, [pc, #440]	; (8001b08 <HAL_ADC_Init+0x2f0>)
 800194e:	f7ff ff03 	bl	8001758 <LL_ADC_IsEnabled>
 8001952:	4604      	mov	r4, r0
 8001954:	486d      	ldr	r0, [pc, #436]	; (8001b0c <HAL_ADC_Init+0x2f4>)
 8001956:	f7ff feff 	bl	8001758 <LL_ADC_IsEnabled>
 800195a:	4603      	mov	r3, r0
 800195c:	431c      	orrs	r4, r3
 800195e:	486c      	ldr	r0, [pc, #432]	; (8001b10 <HAL_ADC_Init+0x2f8>)
 8001960:	f7ff fefa 	bl	8001758 <LL_ADC_IsEnabled>
 8001964:	4603      	mov	r3, r0
 8001966:	4323      	orrs	r3, r4
 8001968:	2b00      	cmp	r3, #0
 800196a:	bf0c      	ite	eq
 800196c:	2301      	moveq	r3, #1
 800196e:	2300      	movne	r3, #0
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d012      	beq.n	800199c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800197e:	d004      	beq.n	800198a <HAL_ADC_Init+0x172>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a5f      	ldr	r2, [pc, #380]	; (8001b04 <HAL_ADC_Init+0x2ec>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d101      	bne.n	800198e <HAL_ADC_Init+0x176>
 800198a:	4a62      	ldr	r2, [pc, #392]	; (8001b14 <HAL_ADC_Init+0x2fc>)
 800198c:	e000      	b.n	8001990 <HAL_ADC_Init+0x178>
 800198e:	4a62      	ldr	r2, [pc, #392]	; (8001b18 <HAL_ADC_Init+0x300>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	4619      	mov	r1, r3
 8001996:	4610      	mov	r0, r2
 8001998:	f7ff fcfa 	bl	8001390 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	7f5b      	ldrb	r3, [r3, #29]
 80019a0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019a6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80019ac:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80019b2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019ba:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d106      	bne.n	80019d8 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ce:	3b01      	subs	r3, #1
 80019d0:	045b      	lsls	r3, r3, #17
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d009      	beq.n	80019f4 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	4b48      	ldr	r3, [pc, #288]	; (8001b1c <HAL_ADC_Init+0x304>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6812      	ldr	r2, [r2, #0]
 8001a02:	69b9      	ldr	r1, [r7, #24]
 8001a04:	430b      	orrs	r3, r1
 8001a06:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4618      	mov	r0, r3
 8001a24:	f7ff fee5 	bl	80017f2 <LL_ADC_INJ_IsConversionOngoing>
 8001a28:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d17f      	bne.n	8001b30 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d17c      	bne.n	8001b30 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a3a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a42:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a44:	4313      	orrs	r3, r2
 8001a46:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a52:	f023 0302 	bic.w	r3, r3, #2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6812      	ldr	r2, [r2, #0]
 8001a5a:	69b9      	ldr	r1, [r7, #24]
 8001a5c:	430b      	orrs	r3, r1
 8001a5e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691b      	ldr	r3, [r3, #16]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d017      	beq.n	8001a98 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001a76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001a80:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001a84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6911      	ldr	r1, [r2, #16]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6812      	ldr	r2, [r2, #0]
 8001a90:	430b      	orrs	r3, r1
 8001a92:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001a96:	e013      	b.n	8001ac0 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	691a      	ldr	r2, [r3, #16]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001aa6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	6812      	ldr	r2, [r2, #0]
 8001ab4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ab8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001abc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d12a      	bne.n	8001b20 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ad4:	f023 0304 	bic.w	r3, r3, #4
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ae0:	4311      	orrs	r1, r2
 8001ae2:	687a      	ldr	r2, [r7, #4]
 8001ae4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ae6:	4311      	orrs	r1, r2
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001aec:	430a      	orrs	r2, r1
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 0201 	orr.w	r2, r2, #1
 8001af8:	611a      	str	r2, [r3, #16]
 8001afa:	e019      	b.n	8001b30 <HAL_ADC_Init+0x318>
 8001afc:	20000000 	.word	0x20000000
 8001b00:	053e2d63 	.word	0x053e2d63
 8001b04:	50000100 	.word	0x50000100
 8001b08:	50000400 	.word	0x50000400
 8001b0c:	50000500 	.word	0x50000500
 8001b10:	50000600 	.word	0x50000600
 8001b14:	50000300 	.word	0x50000300
 8001b18:	50000700 	.word	0x50000700
 8001b1c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691a      	ldr	r2, [r3, #16]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f022 0201 	bic.w	r2, r2, #1
 8001b2e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d10c      	bne.n	8001b52 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f023 010f 	bic.w	r1, r3, #15
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	1e5a      	subs	r2, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	631a      	str	r2, [r3, #48]	; 0x30
 8001b50:	e007      	b.n	8001b62 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 020f 	bic.w	r2, r2, #15
 8001b60:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b66:	f023 0303 	bic.w	r3, r3, #3
 8001b6a:	f043 0201 	orr.w	r2, r3, #1
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b72:	e007      	b.n	8001b84 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b78:	f043 0210 	orr.w	r2, r3, #16
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b84:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3724      	adds	r7, #36	; 0x24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd90      	pop	{r4, r7, pc}
 8001b8e:	bf00      	nop

08001b90 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	60f8      	str	r0, [r7, #12]
 8001b98:	60b9      	str	r1, [r7, #8]
 8001b9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ba4:	d004      	beq.n	8001bb0 <HAL_ADC_Start_DMA+0x20>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a5a      	ldr	r2, [pc, #360]	; (8001d14 <HAL_ADC_Start_DMA+0x184>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d101      	bne.n	8001bb4 <HAL_ADC_Start_DMA+0x24>
 8001bb0:	4b59      	ldr	r3, [pc, #356]	; (8001d18 <HAL_ADC_Start_DMA+0x188>)
 8001bb2:	e000      	b.n	8001bb6 <HAL_ADC_Start_DMA+0x26>
 8001bb4:	4b59      	ldr	r3, [pc, #356]	; (8001d1c <HAL_ADC_Start_DMA+0x18c>)
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fd4a 	bl	8001650 <LL_ADC_GetMultimode>
 8001bbc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7ff fe02 	bl	80017cc <LL_ADC_REG_IsConversionOngoing>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f040 809b 	bne.w	8001d06 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d101      	bne.n	8001bde <HAL_ADC_Start_DMA+0x4e>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e096      	b.n	8001d0c <HAL_ADC_Start_DMA+0x17c>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2201      	movs	r2, #1
 8001be2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a4d      	ldr	r2, [pc, #308]	; (8001d20 <HAL_ADC_Start_DMA+0x190>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d008      	beq.n	8001c02 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d005      	beq.n	8001c02 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	2b05      	cmp	r3, #5
 8001bfa:	d002      	beq.n	8001c02 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	2b09      	cmp	r3, #9
 8001c00:	d17a      	bne.n	8001cf8 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 fcec 	bl	80025e0 <ADC_Enable>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001c0c:	7dfb      	ldrb	r3, [r7, #23]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d16d      	bne.n	8001cee <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c16:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001c1a:	f023 0301 	bic.w	r3, r3, #1
 8001c1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a3a      	ldr	r2, [pc, #232]	; (8001d14 <HAL_ADC_Start_DMA+0x184>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d009      	beq.n	8001c44 <HAL_ADC_Start_DMA+0xb4>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a3b      	ldr	r2, [pc, #236]	; (8001d24 <HAL_ADC_Start_DMA+0x194>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d002      	beq.n	8001c40 <HAL_ADC_Start_DMA+0xb0>
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	e003      	b.n	8001c48 <HAL_ADC_Start_DMA+0xb8>
 8001c40:	4b39      	ldr	r3, [pc, #228]	; (8001d28 <HAL_ADC_Start_DMA+0x198>)
 8001c42:	e001      	b.n	8001c48 <HAL_ADC_Start_DMA+0xb8>
 8001c44:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	6812      	ldr	r2, [r2, #0]
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d002      	beq.n	8001c56 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d105      	bne.n	8001c62 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c5a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d006      	beq.n	8001c7c <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c72:	f023 0206 	bic.w	r2, r3, #6
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	661a      	str	r2, [r3, #96]	; 0x60
 8001c7a:	e002      	b.n	8001c82 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c86:	4a29      	ldr	r2, [pc, #164]	; (8001d2c <HAL_ADC_Start_DMA+0x19c>)
 8001c88:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8e:	4a28      	ldr	r2, [pc, #160]	; (8001d30 <HAL_ADC_Start_DMA+0x1a0>)
 8001c90:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c96:	4a27      	ldr	r2, [pc, #156]	; (8001d34 <HAL_ADC_Start_DMA+0x1a4>)
 8001c98:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	221c      	movs	r2, #28
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f042 0210 	orr.w	r2, r2, #16
 8001cb8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68da      	ldr	r2, [r3, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f042 0201 	orr.w	r2, r2, #1
 8001cc8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	3340      	adds	r3, #64	; 0x40
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f001 f97f 	bl	8002fdc <HAL_DMA_Start_IT>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f7ff fd5c 	bl	80017a4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001cec:	e00d      	b.n	8001d0a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001cf6:	e008      	b.n	8001d0a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001d04:	e001      	b.n	8001d0a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d06:	2302      	movs	r3, #2
 8001d08:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3718      	adds	r7, #24
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	50000100 	.word	0x50000100
 8001d18:	50000300 	.word	0x50000300
 8001d1c:	50000700 	.word	0x50000700
 8001d20:	50000600 	.word	0x50000600
 8001d24:	50000500 	.word	0x50000500
 8001d28:	50000400 	.word	0x50000400
 8001d2c:	080027cb 	.word	0x080027cb
 8001d30:	080028a3 	.word	0x080028a3
 8001d34:	080028bf 	.word	0x080028bf

08001d38 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b0b6      	sub	sp, #216	; 0xd8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d102      	bne.n	8001d84 <HAL_ADC_ConfigChannel+0x24>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	f000 bc13 	b.w	80025aa <HAL_ADC_ConfigChannel+0x84a>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff fd1b 	bl	80017cc <LL_ADC_REG_IsConversionOngoing>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f040 83f3 	bne.w	8002584 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6818      	ldr	r0, [r3, #0]
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	6859      	ldr	r1, [r3, #4]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	f7ff fbd5 	bl	800155a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fd09 	bl	80017cc <LL_ADC_REG_IsConversionOngoing>
 8001dba:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fd15 	bl	80017f2 <LL_ADC_INJ_IsConversionOngoing>
 8001dc8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dcc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f040 81d9 	bne.w	8002188 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001dd6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f040 81d4 	bne.w	8002188 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001de8:	d10f      	bne.n	8001e0a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2200      	movs	r2, #0
 8001df4:	4619      	mov	r1, r3
 8001df6:	f7ff fbdc 	bl	80015b2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fb83 	bl	800150e <LL_ADC_SetSamplingTimeCommonConfig>
 8001e08:	e00e      	b.n	8001e28 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6818      	ldr	r0, [r3, #0]
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	6819      	ldr	r1, [r3, #0]
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	461a      	mov	r2, r3
 8001e18:	f7ff fbcb 	bl	80015b2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fb73 	bl	800150e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	695a      	ldr	r2, [r3, #20]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	08db      	lsrs	r3, r3, #3
 8001e34:	f003 0303 	and.w	r3, r3, #3
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d022      	beq.n	8001e90 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	6919      	ldr	r1, [r3, #16]
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e5a:	f7ff facd 	bl	80013f8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6818      	ldr	r0, [r3, #0]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	6919      	ldr	r1, [r3, #16]
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	699b      	ldr	r3, [r3, #24]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f7ff fb19 	bl	80014a2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d102      	bne.n	8001e86 <HAL_ADC_ConfigChannel+0x126>
 8001e80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e84:	e000      	b.n	8001e88 <HAL_ADC_ConfigChannel+0x128>
 8001e86:	2300      	movs	r3, #0
 8001e88:	461a      	mov	r2, r3
 8001e8a:	f7ff fb25 	bl	80014d8 <LL_ADC_SetOffsetSaturation>
 8001e8e:	e17b      	b.n	8002188 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff fad2 	bl	8001440 <LL_ADC_GetOffsetChannel>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d10a      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x15c>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fac7 	bl	8001440 <LL_ADC_GetOffsetChannel>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	0e9b      	lsrs	r3, r3, #26
 8001eb6:	f003 021f 	and.w	r2, r3, #31
 8001eba:	e01e      	b.n	8001efa <HAL_ADC_ConfigChannel+0x19a>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7ff fabc 	bl	8001440 <LL_ADC_GetOffsetChannel>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ece:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ed2:	fa93 f3a3 	rbit	r3, r3
 8001ed6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001eda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ede:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ee2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001eea:	2320      	movs	r3, #32
 8001eec:	e004      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001eee:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001ef2:	fab3 f383 	clz	r3, r3
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d105      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x1b2>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	0e9b      	lsrs	r3, r3, #26
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	e018      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x1e4>
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f1a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f1e:	fa93 f3a3 	rbit	r3, r3
 8001f22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001f26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001f2e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001f36:	2320      	movs	r3, #32
 8001f38:	e004      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001f3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f3e:	fab3 f383 	clz	r3, r3
 8001f42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d106      	bne.n	8001f56 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff fa8b 	bl	800146c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff fa6f 	bl	8001440 <LL_ADC_GetOffsetChannel>
 8001f62:	4603      	mov	r3, r0
 8001f64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10a      	bne.n	8001f82 <HAL_ADC_ConfigChannel+0x222>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2101      	movs	r1, #1
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7ff fa64 	bl	8001440 <LL_ADC_GetOffsetChannel>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	0e9b      	lsrs	r3, r3, #26
 8001f7c:	f003 021f 	and.w	r2, r3, #31
 8001f80:	e01e      	b.n	8001fc0 <HAL_ADC_ConfigChannel+0x260>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2101      	movs	r1, #1
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff fa59 	bl	8001440 <LL_ADC_GetOffsetChannel>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f94:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f98:	fa93 f3a3 	rbit	r3, r3
 8001f9c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001fa0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001fa8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001fb0:	2320      	movs	r3, #32
 8001fb2:	e004      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001fb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d105      	bne.n	8001fd8 <HAL_ADC_ConfigChannel+0x278>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	0e9b      	lsrs	r3, r3, #26
 8001fd2:	f003 031f 	and.w	r3, r3, #31
 8001fd6:	e018      	b.n	800200a <HAL_ADC_ConfigChannel+0x2aa>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001fe4:	fa93 f3a3 	rbit	r3, r3
 8001fe8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001fec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ff0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001ff4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001ffc:	2320      	movs	r3, #32
 8001ffe:	e004      	b.n	800200a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002000:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002004:	fab3 f383 	clz	r3, r3
 8002008:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800200a:	429a      	cmp	r2, r3
 800200c:	d106      	bne.n	800201c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2200      	movs	r2, #0
 8002014:	2101      	movs	r1, #1
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fa28 	bl	800146c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2102      	movs	r1, #2
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fa0c 	bl	8001440 <LL_ADC_GetOffsetChannel>
 8002028:	4603      	mov	r3, r0
 800202a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800202e:	2b00      	cmp	r3, #0
 8002030:	d10a      	bne.n	8002048 <HAL_ADC_ConfigChannel+0x2e8>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	2102      	movs	r1, #2
 8002038:	4618      	mov	r0, r3
 800203a:	f7ff fa01 	bl	8001440 <LL_ADC_GetOffsetChannel>
 800203e:	4603      	mov	r3, r0
 8002040:	0e9b      	lsrs	r3, r3, #26
 8002042:	f003 021f 	and.w	r2, r3, #31
 8002046:	e01e      	b.n	8002086 <HAL_ADC_ConfigChannel+0x326>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2102      	movs	r1, #2
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff f9f6 	bl	8001440 <LL_ADC_GetOffsetChannel>
 8002054:	4603      	mov	r3, r0
 8002056:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800205e:	fa93 f3a3 	rbit	r3, r3
 8002062:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002066:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800206a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800206e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002072:	2b00      	cmp	r3, #0
 8002074:	d101      	bne.n	800207a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002076:	2320      	movs	r3, #32
 8002078:	e004      	b.n	8002084 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800207a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800207e:	fab3 f383 	clz	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800208e:	2b00      	cmp	r3, #0
 8002090:	d105      	bne.n	800209e <HAL_ADC_ConfigChannel+0x33e>
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	0e9b      	lsrs	r3, r3, #26
 8002098:	f003 031f 	and.w	r3, r3, #31
 800209c:	e016      	b.n	80020cc <HAL_ADC_ConfigChannel+0x36c>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020aa:	fa93 f3a3 	rbit	r3, r3
 80020ae:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80020b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80020b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d101      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80020be:	2320      	movs	r3, #32
 80020c0:	e004      	b.n	80020cc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80020c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d106      	bne.n	80020de <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2200      	movs	r2, #0
 80020d6:	2102      	movs	r1, #2
 80020d8:	4618      	mov	r0, r3
 80020da:	f7ff f9c7 	bl	800146c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2103      	movs	r1, #3
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7ff f9ab 	bl	8001440 <LL_ADC_GetOffsetChannel>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10a      	bne.n	800210a <HAL_ADC_ConfigChannel+0x3aa>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2103      	movs	r1, #3
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff f9a0 	bl	8001440 <LL_ADC_GetOffsetChannel>
 8002100:	4603      	mov	r3, r0
 8002102:	0e9b      	lsrs	r3, r3, #26
 8002104:	f003 021f 	and.w	r2, r3, #31
 8002108:	e017      	b.n	800213a <HAL_ADC_ConfigChannel+0x3da>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2103      	movs	r1, #3
 8002110:	4618      	mov	r0, r3
 8002112:	f7ff f995 	bl	8001440 <LL_ADC_GetOffsetChannel>
 8002116:	4603      	mov	r3, r0
 8002118:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800211c:	fa93 f3a3 	rbit	r3, r3
 8002120:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002122:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002124:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002126:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800212c:	2320      	movs	r3, #32
 800212e:	e003      	b.n	8002138 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002130:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	b2db      	uxtb	r3, r3
 8002138:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002142:	2b00      	cmp	r3, #0
 8002144:	d105      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x3f2>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	0e9b      	lsrs	r3, r3, #26
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	e011      	b.n	8002176 <HAL_ADC_ConfigChannel+0x416>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002158:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002162:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800216a:	2320      	movs	r3, #32
 800216c:	e003      	b.n	8002176 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800216e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002170:	fab3 f383 	clz	r3, r3
 8002174:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002176:	429a      	cmp	r2, r3
 8002178:	d106      	bne.n	8002188 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	2200      	movs	r2, #0
 8002180:	2103      	movs	r1, #3
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff f972 	bl	800146c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff fae3 	bl	8001758 <LL_ADC_IsEnabled>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	f040 813d 	bne.w	8002414 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6818      	ldr	r0, [r3, #0]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	6819      	ldr	r1, [r3, #0]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	461a      	mov	r2, r3
 80021a8:	f7ff fa2e 	bl	8001608 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	4aa2      	ldr	r2, [pc, #648]	; (800243c <HAL_ADC_ConfigChannel+0x6dc>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	f040 812e 	bne.w	8002414 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10b      	bne.n	80021e0 <HAL_ADC_ConfigChannel+0x480>
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	0e9b      	lsrs	r3, r3, #26
 80021ce:	3301      	adds	r3, #1
 80021d0:	f003 031f 	and.w	r3, r3, #31
 80021d4:	2b09      	cmp	r3, #9
 80021d6:	bf94      	ite	ls
 80021d8:	2301      	movls	r3, #1
 80021da:	2300      	movhi	r3, #0
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	e019      	b.n	8002214 <HAL_ADC_ConfigChannel+0x4b4>
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80021ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80021f0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80021f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80021f8:	2320      	movs	r3, #32
 80021fa:	e003      	b.n	8002204 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80021fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	3301      	adds	r3, #1
 8002206:	f003 031f 	and.w	r3, r3, #31
 800220a:	2b09      	cmp	r3, #9
 800220c:	bf94      	ite	ls
 800220e:	2301      	movls	r3, #1
 8002210:	2300      	movhi	r3, #0
 8002212:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002214:	2b00      	cmp	r3, #0
 8002216:	d079      	beq.n	800230c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002220:	2b00      	cmp	r3, #0
 8002222:	d107      	bne.n	8002234 <HAL_ADC_ConfigChannel+0x4d4>
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	0e9b      	lsrs	r3, r3, #26
 800222a:	3301      	adds	r3, #1
 800222c:	069b      	lsls	r3, r3, #26
 800222e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002232:	e015      	b.n	8002260 <HAL_ADC_ConfigChannel+0x500>
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800223c:	fa93 f3a3 	rbit	r3, r3
 8002240:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002244:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002248:	2b00      	cmp	r3, #0
 800224a:	d101      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800224c:	2320      	movs	r3, #32
 800224e:	e003      	b.n	8002258 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002250:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002252:	fab3 f383 	clz	r3, r3
 8002256:	b2db      	uxtb	r3, r3
 8002258:	3301      	adds	r3, #1
 800225a:	069b      	lsls	r3, r3, #26
 800225c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002268:	2b00      	cmp	r3, #0
 800226a:	d109      	bne.n	8002280 <HAL_ADC_ConfigChannel+0x520>
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	0e9b      	lsrs	r3, r3, #26
 8002272:	3301      	adds	r3, #1
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	2101      	movs	r1, #1
 800227a:	fa01 f303 	lsl.w	r3, r1, r3
 800227e:	e017      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x550>
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800228e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002290:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002292:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002298:	2320      	movs	r3, #32
 800229a:	e003      	b.n	80022a4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 800229c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	3301      	adds	r3, #1
 80022a6:	f003 031f 	and.w	r3, r3, #31
 80022aa:	2101      	movs	r1, #1
 80022ac:	fa01 f303 	lsl.w	r3, r1, r3
 80022b0:	ea42 0103 	orr.w	r1, r2, r3
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d10a      	bne.n	80022d6 <HAL_ADC_ConfigChannel+0x576>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	0e9b      	lsrs	r3, r3, #26
 80022c6:	3301      	adds	r3, #1
 80022c8:	f003 021f 	and.w	r2, r3, #31
 80022cc:	4613      	mov	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	051b      	lsls	r3, r3, #20
 80022d4:	e018      	b.n	8002308 <HAL_ADC_ConfigChannel+0x5a8>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022de:	fa93 f3a3 	rbit	r3, r3
 80022e2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80022e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80022e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d101      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80022ee:	2320      	movs	r3, #32
 80022f0:	e003      	b.n	80022fa <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80022f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022f4:	fab3 f383 	clz	r3, r3
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	3301      	adds	r3, #1
 80022fc:	f003 021f 	and.w	r2, r3, #31
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002308:	430b      	orrs	r3, r1
 800230a:	e07e      	b.n	800240a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002314:	2b00      	cmp	r3, #0
 8002316:	d107      	bne.n	8002328 <HAL_ADC_ConfigChannel+0x5c8>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	0e9b      	lsrs	r3, r3, #26
 800231e:	3301      	adds	r3, #1
 8002320:	069b      	lsls	r3, r3, #26
 8002322:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002326:	e015      	b.n	8002354 <HAL_ADC_ConfigChannel+0x5f4>
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002330:	fa93 f3a3 	rbit	r3, r3
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002338:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800233a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002340:	2320      	movs	r3, #32
 8002342:	e003      	b.n	800234c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002346:	fab3 f383 	clz	r3, r3
 800234a:	b2db      	uxtb	r3, r3
 800234c:	3301      	adds	r3, #1
 800234e:	069b      	lsls	r3, r3, #26
 8002350:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235c:	2b00      	cmp	r3, #0
 800235e:	d109      	bne.n	8002374 <HAL_ADC_ConfigChannel+0x614>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	0e9b      	lsrs	r3, r3, #26
 8002366:	3301      	adds	r3, #1
 8002368:	f003 031f 	and.w	r3, r3, #31
 800236c:	2101      	movs	r1, #1
 800236e:	fa01 f303 	lsl.w	r3, r1, r3
 8002372:	e017      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x644>
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	6a3b      	ldr	r3, [r7, #32]
 800237c:	fa93 f3a3 	rbit	r3, r3
 8002380:	61fb      	str	r3, [r7, #28]
  return result;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002388:	2b00      	cmp	r3, #0
 800238a:	d101      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 800238c:	2320      	movs	r3, #32
 800238e:	e003      	b.n	8002398 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	fab3 f383 	clz	r3, r3
 8002396:	b2db      	uxtb	r3, r3
 8002398:	3301      	adds	r3, #1
 800239a:	f003 031f 	and.w	r3, r3, #31
 800239e:	2101      	movs	r1, #1
 80023a0:	fa01 f303 	lsl.w	r3, r1, r3
 80023a4:	ea42 0103 	orr.w	r1, r2, r3
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d10d      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x670>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	0e9b      	lsrs	r3, r3, #26
 80023ba:	3301      	adds	r3, #1
 80023bc:	f003 021f 	and.w	r2, r3, #31
 80023c0:	4613      	mov	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	4413      	add	r3, r2
 80023c6:	3b1e      	subs	r3, #30
 80023c8:	051b      	lsls	r3, r3, #20
 80023ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023ce:	e01b      	b.n	8002408 <HAL_ADC_ConfigChannel+0x6a8>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	fa93 f3a3 	rbit	r3, r3
 80023dc:	613b      	str	r3, [r7, #16]
  return result;
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80023e2:	69bb      	ldr	r3, [r7, #24]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80023e8:	2320      	movs	r3, #32
 80023ea:	e003      	b.n	80023f4 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	fab3 f383 	clz	r3, r3
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	3301      	adds	r3, #1
 80023f6:	f003 021f 	and.w	r2, r3, #31
 80023fa:	4613      	mov	r3, r2
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	4413      	add	r3, r2
 8002400:	3b1e      	subs	r3, #30
 8002402:	051b      	lsls	r3, r3, #20
 8002404:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002408:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800240a:	683a      	ldr	r2, [r7, #0]
 800240c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800240e:	4619      	mov	r1, r3
 8002410:	f7ff f8cf 	bl	80015b2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_ADC_ConfigChannel+0x6e0>)
 800241a:	4013      	ands	r3, r2
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80be 	beq.w	800259e <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800242a:	d004      	beq.n	8002436 <HAL_ADC_ConfigChannel+0x6d6>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a04      	ldr	r2, [pc, #16]	; (8002444 <HAL_ADC_ConfigChannel+0x6e4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d10a      	bne.n	800244c <HAL_ADC_ConfigChannel+0x6ec>
 8002436:	4b04      	ldr	r3, [pc, #16]	; (8002448 <HAL_ADC_ConfigChannel+0x6e8>)
 8002438:	e009      	b.n	800244e <HAL_ADC_ConfigChannel+0x6ee>
 800243a:	bf00      	nop
 800243c:	407f0000 	.word	0x407f0000
 8002440:	80080000 	.word	0x80080000
 8002444:	50000100 	.word	0x50000100
 8002448:	50000300 	.word	0x50000300
 800244c:	4b59      	ldr	r3, [pc, #356]	; (80025b4 <HAL_ADC_ConfigChannel+0x854>)
 800244e:	4618      	mov	r0, r3
 8002450:	f7fe ffc4 	bl	80013dc <LL_ADC_GetCommonPathInternalCh>
 8002454:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a56      	ldr	r2, [pc, #344]	; (80025b8 <HAL_ADC_ConfigChannel+0x858>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d004      	beq.n	800246c <HAL_ADC_ConfigChannel+0x70c>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a55      	ldr	r2, [pc, #340]	; (80025bc <HAL_ADC_ConfigChannel+0x85c>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d13a      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800246c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002470:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002474:	2b00      	cmp	r3, #0
 8002476:	d134      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002480:	d005      	beq.n	800248e <HAL_ADC_ConfigChannel+0x72e>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a4e      	ldr	r2, [pc, #312]	; (80025c0 <HAL_ADC_ConfigChannel+0x860>)
 8002488:	4293      	cmp	r3, r2
 800248a:	f040 8085 	bne.w	8002598 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002496:	d004      	beq.n	80024a2 <HAL_ADC_ConfigChannel+0x742>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a49      	ldr	r2, [pc, #292]	; (80025c4 <HAL_ADC_ConfigChannel+0x864>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d101      	bne.n	80024a6 <HAL_ADC_ConfigChannel+0x746>
 80024a2:	4a49      	ldr	r2, [pc, #292]	; (80025c8 <HAL_ADC_ConfigChannel+0x868>)
 80024a4:	e000      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x748>
 80024a6:	4a43      	ldr	r2, [pc, #268]	; (80025b4 <HAL_ADC_ConfigChannel+0x854>)
 80024a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024b0:	4619      	mov	r1, r3
 80024b2:	4610      	mov	r0, r2
 80024b4:	f7fe ff7f 	bl	80013b6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024b8:	4b44      	ldr	r3, [pc, #272]	; (80025cc <HAL_ADC_ConfigChannel+0x86c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	099b      	lsrs	r3, r3, #6
 80024be:	4a44      	ldr	r2, [pc, #272]	; (80025d0 <HAL_ADC_ConfigChannel+0x870>)
 80024c0:	fba2 2303 	umull	r2, r3, r2, r3
 80024c4:	099b      	lsrs	r3, r3, #6
 80024c6:	1c5a      	adds	r2, r3, #1
 80024c8:	4613      	mov	r3, r2
 80024ca:	005b      	lsls	r3, r3, #1
 80024cc:	4413      	add	r3, r2
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024d2:	e002      	b.n	80024da <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1f9      	bne.n	80024d4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024e0:	e05a      	b.n	8002598 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a3b      	ldr	r2, [pc, #236]	; (80025d4 <HAL_ADC_ConfigChannel+0x874>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d125      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d11f      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a31      	ldr	r2, [pc, #196]	; (80025c4 <HAL_ADC_ConfigChannel+0x864>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d104      	bne.n	800250c <HAL_ADC_ConfigChannel+0x7ac>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a34      	ldr	r2, [pc, #208]	; (80025d8 <HAL_ADC_ConfigChannel+0x878>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d047      	beq.n	800259c <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002514:	d004      	beq.n	8002520 <HAL_ADC_ConfigChannel+0x7c0>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a2a      	ldr	r2, [pc, #168]	; (80025c4 <HAL_ADC_ConfigChannel+0x864>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d101      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x7c4>
 8002520:	4a29      	ldr	r2, [pc, #164]	; (80025c8 <HAL_ADC_ConfigChannel+0x868>)
 8002522:	e000      	b.n	8002526 <HAL_ADC_ConfigChannel+0x7c6>
 8002524:	4a23      	ldr	r2, [pc, #140]	; (80025b4 <HAL_ADC_ConfigChannel+0x854>)
 8002526:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800252a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800252e:	4619      	mov	r1, r3
 8002530:	4610      	mov	r0, r2
 8002532:	f7fe ff40 	bl	80013b6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002536:	e031      	b.n	800259c <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a27      	ldr	r2, [pc, #156]	; (80025dc <HAL_ADC_ConfigChannel+0x87c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d12d      	bne.n	800259e <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002542:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d127      	bne.n	800259e <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1c      	ldr	r2, [pc, #112]	; (80025c4 <HAL_ADC_ConfigChannel+0x864>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d022      	beq.n	800259e <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002560:	d004      	beq.n	800256c <HAL_ADC_ConfigChannel+0x80c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a17      	ldr	r2, [pc, #92]	; (80025c4 <HAL_ADC_ConfigChannel+0x864>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d101      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x810>
 800256c:	4a16      	ldr	r2, [pc, #88]	; (80025c8 <HAL_ADC_ConfigChannel+0x868>)
 800256e:	e000      	b.n	8002572 <HAL_ADC_ConfigChannel+0x812>
 8002570:	4a10      	ldr	r2, [pc, #64]	; (80025b4 <HAL_ADC_ConfigChannel+0x854>)
 8002572:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002576:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800257a:	4619      	mov	r1, r3
 800257c:	4610      	mov	r0, r2
 800257e:	f7fe ff1a 	bl	80013b6 <LL_ADC_SetCommonPathInternalCh>
 8002582:	e00c      	b.n	800259e <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002588:	f043 0220 	orr.w	r2, r3, #32
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002596:	e002      	b.n	800259e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002598:	bf00      	nop
 800259a:	e000      	b.n	800259e <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800259c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80025a6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	37d8      	adds	r7, #216	; 0xd8
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}
 80025b2:	bf00      	nop
 80025b4:	50000700 	.word	0x50000700
 80025b8:	c3210000 	.word	0xc3210000
 80025bc:	90c00010 	.word	0x90c00010
 80025c0:	50000600 	.word	0x50000600
 80025c4:	50000100 	.word	0x50000100
 80025c8:	50000300 	.word	0x50000300
 80025cc:	20000000 	.word	0x20000000
 80025d0:	053e2d63 	.word	0x053e2d63
 80025d4:	c7520000 	.word	0xc7520000
 80025d8:	50000500 	.word	0x50000500
 80025dc:	cb840000 	.word	0xcb840000

080025e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff f8b1 	bl	8001758 <LL_ADC_IsEnabled>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d176      	bne.n	80026ea <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	4b3c      	ldr	r3, [pc, #240]	; (80026f4 <ADC_Enable+0x114>)
 8002604:	4013      	ands	r3, r2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00d      	beq.n	8002626 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260e:	f043 0210 	orr.w	r2, r3, #16
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800261a:	f043 0201 	orr.w	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e062      	b.n	80026ec <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff f86c 	bl	8001708 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002638:	d004      	beq.n	8002644 <ADC_Enable+0x64>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a2e      	ldr	r2, [pc, #184]	; (80026f8 <ADC_Enable+0x118>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d101      	bne.n	8002648 <ADC_Enable+0x68>
 8002644:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <ADC_Enable+0x11c>)
 8002646:	e000      	b.n	800264a <ADC_Enable+0x6a>
 8002648:	4b2d      	ldr	r3, [pc, #180]	; (8002700 <ADC_Enable+0x120>)
 800264a:	4618      	mov	r0, r3
 800264c:	f7fe fec6 	bl	80013dc <LL_ADC_GetCommonPathInternalCh>
 8002650:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002652:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002656:	2b00      	cmp	r3, #0
 8002658:	d013      	beq.n	8002682 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800265a:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <ADC_Enable+0x124>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	099b      	lsrs	r3, r3, #6
 8002660:	4a29      	ldr	r2, [pc, #164]	; (8002708 <ADC_Enable+0x128>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	099b      	lsrs	r3, r3, #6
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	4613      	mov	r3, r2
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002674:	e002      	b.n	800267c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	3b01      	subs	r3, #1
 800267a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f9      	bne.n	8002676 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002682:	f7fe fe79 	bl	8001378 <HAL_GetTick>
 8002686:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002688:	e028      	b.n	80026dc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff f862 	bl	8001758 <LL_ADC_IsEnabled>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d104      	bne.n	80026a4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff f832 	bl	8001708 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80026a4:	f7fe fe68 	bl	8001378 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d914      	bls.n	80026dc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d00d      	beq.n	80026dc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c4:	f043 0210 	orr.w	r2, r3, #16
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026d0:	f043 0201 	orr.w	r2, r3, #1
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e007      	b.n	80026ec <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d1cf      	bne.n	800268a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	8000003f 	.word	0x8000003f
 80026f8:	50000100 	.word	0x50000100
 80026fc:	50000300 	.word	0x50000300
 8002700:	50000700 	.word	0x50000700
 8002704:	20000000 	.word	0x20000000
 8002708:	053e2d63 	.word	0x053e2d63

0800270c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff f830 	bl	800177e <LL_ADC_IsDisableOngoing>
 800271e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff f817 	bl	8001758 <LL_ADC_IsEnabled>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d047      	beq.n	80027c0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d144      	bne.n	80027c0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 030d 	and.w	r3, r3, #13
 8002740:	2b01      	cmp	r3, #1
 8002742:	d10c      	bne.n	800275e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7fe fff1 	bl	8001730 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2203      	movs	r2, #3
 8002754:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002756:	f7fe fe0f 	bl	8001378 <HAL_GetTick>
 800275a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800275c:	e029      	b.n	80027b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002762:	f043 0210 	orr.w	r2, r3, #16
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276e:	f043 0201 	orr.w	r2, r3, #1
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e023      	b.n	80027c2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800277a:	f7fe fdfd 	bl	8001378 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d914      	bls.n	80027b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00d      	beq.n	80027b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800279a:	f043 0210 	orr.w	r2, r3, #16
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027a6:	f043 0201 	orr.w	r2, r3, #1
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e007      	b.n	80027c2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1dc      	bne.n	800277a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b084      	sub	sp, #16
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d14b      	bne.n	800287c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d021      	beq.n	8002842 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f7fe fe96 	bl	8001534 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d032      	beq.n	8002874 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d12b      	bne.n	8002874 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002820:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800282c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d11f      	bne.n	8002874 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002838:	f043 0201 	orr.w	r2, r3, #1
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002840:	e018      	b.n	8002874 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d111      	bne.n	8002874 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002854:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d105      	bne.n	8002874 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800286c:	f043 0201 	orr.w	r2, r3, #1
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002874:	68f8      	ldr	r0, [r7, #12]
 8002876:	f7fe fa59 	bl	8000d2c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800287a:	e00e      	b.n	800289a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002880:	f003 0310 	and.w	r3, r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f7ff fa5f 	bl	8001d4c <HAL_ADC_ErrorCallback>
}
 800288e:	e004      	b.n	800289a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	4798      	blx	r3
}
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ae:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80028b0:	68f8      	ldr	r0, [r7, #12]
 80028b2:	f7ff fa41 	bl	8001d38 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028b6:	bf00      	nop
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}

080028be <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b084      	sub	sp, #16
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ca:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028dc:	f043 0204 	orr.w	r2, r3, #4
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f7ff fa31 	bl	8001d4c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028ea:	bf00      	nop
 80028ec:	3710      	adds	r7, #16
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}

080028f2 <LL_ADC_IsEnabled>:
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 0301 	and.w	r3, r3, #1
 8002902:	2b01      	cmp	r3, #1
 8002904:	d101      	bne.n	800290a <LL_ADC_IsEnabled+0x18>
 8002906:	2301      	movs	r3, #1
 8002908:	e000      	b.n	800290c <LL_ADC_IsEnabled+0x1a>
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr

08002918 <LL_ADC_StartCalibration>:
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800292a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002934:	4313      	orrs	r3, r2
 8002936:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	609a      	str	r2, [r3, #8]
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <LL_ADC_IsCalibrationOnGoing>:
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	689b      	ldr	r3, [r3, #8]
 8002956:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800295a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800295e:	d101      	bne.n	8002964 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002960:	2301      	movs	r3, #1
 8002962:	e000      	b.n	8002966 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002964:	2300      	movs	r3, #0
}
 8002966:	4618      	mov	r0, r3
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <LL_ADC_REG_IsConversionOngoing>:
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 0304 	and.w	r3, r3, #4
 8002982:	2b04      	cmp	r3, #4
 8002984:	d101      	bne.n	800298a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d101      	bne.n	80029b4 <HAL_ADCEx_Calibration_Start+0x1c>
 80029b0:	2302      	movs	r3, #2
 80029b2:	e04d      	b.n	8002a50 <HAL_ADCEx_Calibration_Start+0xb8>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7ff fea5 	bl	800270c <ADC_Disable>
 80029c2:	4603      	mov	r3, r0
 80029c4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80029c6:	7bfb      	ldrb	r3, [r7, #15]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d136      	bne.n	8002a3a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029d4:	f023 0302 	bic.w	r3, r3, #2
 80029d8:	f043 0202 	orr.w	r2, r3, #2
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6839      	ldr	r1, [r7, #0]
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7ff ff96 	bl	8002918 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80029ec:	e014      	b.n	8002a18 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	3301      	adds	r3, #1
 80029f2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	4a18      	ldr	r2, [pc, #96]	; (8002a58 <HAL_ADCEx_Calibration_Start+0xc0>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d90d      	bls.n	8002a18 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a00:	f023 0312 	bic.w	r3, r3, #18
 8002a04:	f043 0210 	orr.w	r2, r3, #16
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e01b      	b.n	8002a50 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff ff94 	bl	800294a <LL_ADC_IsCalibrationOnGoing>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1e2      	bne.n	80029ee <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2c:	f023 0303 	bic.w	r3, r3, #3
 8002a30:	f043 0201 	orr.w	r2, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	65da      	str	r2, [r3, #92]	; 0x5c
 8002a38:	e005      	b.n	8002a46 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a3e:	f043 0210 	orr.w	r2, r3, #16
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	0004de01 	.word	0x0004de01

08002a5c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002a5c:	b590      	push	{r4, r7, lr}
 8002a5e:	b0a1      	sub	sp, #132	; 0x84
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e0e7      	b.n	8002c4a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002a82:	2300      	movs	r3, #0
 8002a84:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002a86:	2300      	movs	r3, #0
 8002a88:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a92:	d102      	bne.n	8002a9a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002a94:	4b6f      	ldr	r3, [pc, #444]	; (8002c54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a96:	60bb      	str	r3, [r7, #8]
 8002a98:	e009      	b.n	8002aae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a6e      	ldr	r2, [pc, #440]	; (8002c58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d102      	bne.n	8002aaa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002aa4:	4b6d      	ldr	r3, [pc, #436]	; (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002aa6:	60bb      	str	r3, [r7, #8]
 8002aa8:	e001      	b.n	8002aae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10b      	bne.n	8002acc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab8:	f043 0220 	orr.w	r2, r3, #32
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0be      	b.n	8002c4a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f7ff ff4f 	bl	8002972 <LL_ADC_REG_IsConversionOngoing>
 8002ad4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7ff ff49 	bl	8002972 <LL_ADC_REG_IsConversionOngoing>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f040 80a0 	bne.w	8002c28 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002ae8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	f040 809c 	bne.w	8002c28 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002af8:	d004      	beq.n	8002b04 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a55      	ldr	r2, [pc, #340]	; (8002c54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d101      	bne.n	8002b08 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002b04:	4b56      	ldr	r3, [pc, #344]	; (8002c60 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002b06:	e000      	b.n	8002b0a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002b08:	4b56      	ldr	r3, [pc, #344]	; (8002c64 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002b0a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d04b      	beq.n	8002bac <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b26:	035b      	lsls	r3, r3, #13
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b2e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b38:	d004      	beq.n	8002b44 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a45      	ldr	r2, [pc, #276]	; (8002c54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d10f      	bne.n	8002b64 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002b44:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002b48:	f7ff fed3 	bl	80028f2 <LL_ADC_IsEnabled>
 8002b4c:	4604      	mov	r4, r0
 8002b4e:	4841      	ldr	r0, [pc, #260]	; (8002c54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b50:	f7ff fecf 	bl	80028f2 <LL_ADC_IsEnabled>
 8002b54:	4603      	mov	r3, r0
 8002b56:	4323      	orrs	r3, r4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf0c      	ite	eq
 8002b5c:	2301      	moveq	r3, #1
 8002b5e:	2300      	movne	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	e012      	b.n	8002b8a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002b64:	483c      	ldr	r0, [pc, #240]	; (8002c58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002b66:	f7ff fec4 	bl	80028f2 <LL_ADC_IsEnabled>
 8002b6a:	4604      	mov	r4, r0
 8002b6c:	483b      	ldr	r0, [pc, #236]	; (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002b6e:	f7ff fec0 	bl	80028f2 <LL_ADC_IsEnabled>
 8002b72:	4603      	mov	r3, r0
 8002b74:	431c      	orrs	r4, r3
 8002b76:	483c      	ldr	r0, [pc, #240]	; (8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002b78:	f7ff febb 	bl	80028f2 <LL_ADC_IsEnabled>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	4323      	orrs	r3, r4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	bf0c      	ite	eq
 8002b84:	2301      	moveq	r3, #1
 8002b86:	2300      	movne	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d056      	beq.n	8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002b8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b96:	f023 030f 	bic.w	r3, r3, #15
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	6811      	ldr	r1, [r2, #0]
 8002b9e:	683a      	ldr	r2, [r7, #0]
 8002ba0:	6892      	ldr	r2, [r2, #8]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002baa:	e047      	b.n	8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bb6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002bc0:	d004      	beq.n	8002bcc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a23      	ldr	r2, [pc, #140]	; (8002c54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d10f      	bne.n	8002bec <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002bcc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002bd0:	f7ff fe8f 	bl	80028f2 <LL_ADC_IsEnabled>
 8002bd4:	4604      	mov	r4, r0
 8002bd6:	481f      	ldr	r0, [pc, #124]	; (8002c54 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002bd8:	f7ff fe8b 	bl	80028f2 <LL_ADC_IsEnabled>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	4323      	orrs	r3, r4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	bf0c      	ite	eq
 8002be4:	2301      	moveq	r3, #1
 8002be6:	2300      	movne	r3, #0
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	e012      	b.n	8002c12 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002bec:	481a      	ldr	r0, [pc, #104]	; (8002c58 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002bee:	f7ff fe80 	bl	80028f2 <LL_ADC_IsEnabled>
 8002bf2:	4604      	mov	r4, r0
 8002bf4:	4819      	ldr	r0, [pc, #100]	; (8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002bf6:	f7ff fe7c 	bl	80028f2 <LL_ADC_IsEnabled>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	431c      	orrs	r4, r3
 8002bfe:	481a      	ldr	r0, [pc, #104]	; (8002c68 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002c00:	f7ff fe77 	bl	80028f2 <LL_ADC_IsEnabled>
 8002c04:	4603      	mov	r3, r0
 8002c06:	4323      	orrs	r3, r4
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	bf0c      	ite	eq
 8002c0c:	2301      	moveq	r3, #1
 8002c0e:	2300      	movne	r3, #0
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d012      	beq.n	8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c1e:	f023 030f 	bic.w	r3, r3, #15
 8002c22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c24:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c26:	e009      	b.n	8002c3c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2c:	f043 0220 	orr.w	r2, r3, #32
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002c3a:	e000      	b.n	8002c3e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c46:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3784      	adds	r7, #132	; 0x84
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd90      	pop	{r4, r7, pc}
 8002c52:	bf00      	nop
 8002c54:	50000100 	.word	0x50000100
 8002c58:	50000400 	.word	0x50000400
 8002c5c:	50000500 	.word	0x50000500
 8002c60:	50000300 	.word	0x50000300
 8002c64:	50000700 	.word	0x50000700
 8002c68:	50000600 	.word	0x50000600

08002c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c88:	4013      	ands	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c9e:	4a04      	ldr	r2, [pc, #16]	; (8002cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	60d3      	str	r3, [r2, #12]
}
 8002ca4:	bf00      	nop
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb8:	4b04      	ldr	r3, [pc, #16]	; (8002ccc <__NVIC_GetPriorityGrouping+0x18>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	0a1b      	lsrs	r3, r3, #8
 8002cbe:	f003 0307 	and.w	r3, r3, #7
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	db0b      	blt.n	8002cfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ce2:	79fb      	ldrb	r3, [r7, #7]
 8002ce4:	f003 021f 	and.w	r2, r3, #31
 8002ce8:	4907      	ldr	r1, [pc, #28]	; (8002d08 <__NVIC_EnableIRQ+0x38>)
 8002cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cee:	095b      	lsrs	r3, r3, #5
 8002cf0:	2001      	movs	r0, #1
 8002cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8002cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002cfa:	bf00      	nop
 8002cfc:	370c      	adds	r7, #12
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop
 8002d08:	e000e100 	.word	0xe000e100

08002d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	6039      	str	r1, [r7, #0]
 8002d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	db0a      	blt.n	8002d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	490c      	ldr	r1, [pc, #48]	; (8002d58 <__NVIC_SetPriority+0x4c>)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	0112      	lsls	r2, r2, #4
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	440b      	add	r3, r1
 8002d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d34:	e00a      	b.n	8002d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	4908      	ldr	r1, [pc, #32]	; (8002d5c <__NVIC_SetPriority+0x50>)
 8002d3c:	79fb      	ldrb	r3, [r7, #7]
 8002d3e:	f003 030f 	and.w	r3, r3, #15
 8002d42:	3b04      	subs	r3, #4
 8002d44:	0112      	lsls	r2, r2, #4
 8002d46:	b2d2      	uxtb	r2, r2
 8002d48:	440b      	add	r3, r1
 8002d4a:	761a      	strb	r2, [r3, #24]
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000e100 	.word	0xe000e100
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b089      	sub	sp, #36	; 0x24
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	60b9      	str	r1, [r7, #8]
 8002d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	f1c3 0307 	rsb	r3, r3, #7
 8002d7a:	2b04      	cmp	r3, #4
 8002d7c:	bf28      	it	cs
 8002d7e:	2304      	movcs	r3, #4
 8002d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	3304      	adds	r3, #4
 8002d86:	2b06      	cmp	r3, #6
 8002d88:	d902      	bls.n	8002d90 <NVIC_EncodePriority+0x30>
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	3b03      	subs	r3, #3
 8002d8e:	e000      	b.n	8002d92 <NVIC_EncodePriority+0x32>
 8002d90:	2300      	movs	r3, #0
 8002d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d94:	f04f 32ff 	mov.w	r2, #4294967295
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43da      	mvns	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	401a      	ands	r2, r3
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002da8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	fa01 f303 	lsl.w	r3, r1, r3
 8002db2:	43d9      	mvns	r1, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002db8:	4313      	orrs	r3, r2
         );
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	3724      	adds	r7, #36	; 0x24
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
	...

08002dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dd8:	d301      	bcc.n	8002dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e00f      	b.n	8002dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dde:	4a0a      	ldr	r2, [pc, #40]	; (8002e08 <SysTick_Config+0x40>)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3b01      	subs	r3, #1
 8002de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002de6:	210f      	movs	r1, #15
 8002de8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dec:	f7ff ff8e 	bl	8002d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002df0:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <SysTick_Config+0x40>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002df6:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <SysTick_Config+0x40>)
 8002df8:	2207      	movs	r2, #7
 8002dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	e000e010 	.word	0xe000e010

08002e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff ff29 	bl	8002c6c <__NVIC_SetPriorityGrouping>
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b086      	sub	sp, #24
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	4603      	mov	r3, r0
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e30:	f7ff ff40 	bl	8002cb4 <__NVIC_GetPriorityGrouping>
 8002e34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	6978      	ldr	r0, [r7, #20]
 8002e3c:	f7ff ff90 	bl	8002d60 <NVIC_EncodePriority>
 8002e40:	4602      	mov	r2, r0
 8002e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f7ff ff5f 	bl	8002d0c <__NVIC_SetPriority>
}
 8002e4e:	bf00      	nop
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b082      	sub	sp, #8
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff ff33 	bl	8002cd0 <__NVIC_EnableIRQ>
}
 8002e6a:	bf00      	nop
 8002e6c:	3708      	adds	r7, #8
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f7ff ffa4 	bl	8002dc8 <SysTick_Config>
 8002e80:	4603      	mov	r3, r0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e08d      	b.n	8002fba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	4b47      	ldr	r3, [pc, #284]	; (8002fc4 <HAL_DMA_Init+0x138>)
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d80f      	bhi.n	8002eca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	4b45      	ldr	r3, [pc, #276]	; (8002fc8 <HAL_DMA_Init+0x13c>)
 8002eb2:	4413      	add	r3, r2
 8002eb4:	4a45      	ldr	r2, [pc, #276]	; (8002fcc <HAL_DMA_Init+0x140>)
 8002eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eba:	091b      	lsrs	r3, r3, #4
 8002ebc:	009a      	lsls	r2, r3, #2
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a42      	ldr	r2, [pc, #264]	; (8002fd0 <HAL_DMA_Init+0x144>)
 8002ec6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ec8:	e00e      	b.n	8002ee8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	4b40      	ldr	r3, [pc, #256]	; (8002fd4 <HAL_DMA_Init+0x148>)
 8002ed2:	4413      	add	r3, r2
 8002ed4:	4a3d      	ldr	r2, [pc, #244]	; (8002fcc <HAL_DMA_Init+0x140>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	091b      	lsrs	r3, r3, #4
 8002edc:	009a      	lsls	r2, r3, #2
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a3c      	ldr	r2, [pc, #240]	; (8002fd8 <HAL_DMA_Init+0x14c>)
 8002ee6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f9b6 	bl	80032ac <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	689b      	ldr	r3, [r3, #8]
 8002f44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f48:	d102      	bne.n	8002f50 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f58:	b2d2      	uxtb	r2, r2
 8002f5a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002f64:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d010      	beq.n	8002f90 <HAL_DMA_Init+0x104>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	d80c      	bhi.n	8002f90 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f9d6 	bl	8003328 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f80:	2200      	movs	r2, #0
 8002f82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	e008      	b.n	8002fa2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3710      	adds	r7, #16
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40020407 	.word	0x40020407
 8002fc8:	bffdfff8 	.word	0xbffdfff8
 8002fcc:	cccccccd 	.word	0xcccccccd
 8002fd0:	40020000 	.word	0x40020000
 8002fd4:	bffdfbf8 	.word	0xbffdfbf8
 8002fd8:	40020400 	.word	0x40020400

08002fdc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_DMA_Start_IT+0x20>
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	e066      	b.n	80030ca <HAL_DMA_Start_IT+0xee>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2201      	movs	r2, #1
 8003000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b01      	cmp	r3, #1
 800300e:	d155      	bne.n	80030bc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2202      	movs	r2, #2
 8003014:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681a      	ldr	r2, [r3, #0]
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 0201 	bic.w	r2, r2, #1
 800302c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	68b9      	ldr	r1, [r7, #8]
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 f8fb 	bl	8003230 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f042 020e 	orr.w	r2, r2, #14
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	e00f      	b.n	8003074 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f022 0204 	bic.w	r2, r2, #4
 8003062:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f042 020a 	orr.w	r2, r2, #10
 8003072:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003090:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003096:	2b00      	cmp	r3, #0
 8003098:	d007      	beq.n	80030aa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0201 	orr.w	r2, r2, #1
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	e005      	b.n	80030c8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80030c4:	2302      	movs	r3, #2
 80030c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80030c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b084      	sub	sp, #16
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	2204      	movs	r2, #4
 80030f4:	409a      	lsls	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4013      	ands	r3, r2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d026      	beq.n	800314c <HAL_DMA_IRQHandler+0x7a>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	d021      	beq.n	800314c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b00      	cmp	r3, #0
 8003114:	d107      	bne.n	8003126 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0204 	bic.w	r2, r2, #4
 8003124:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312a:	f003 021f 	and.w	r2, r3, #31
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003132:	2104      	movs	r1, #4
 8003134:	fa01 f202 	lsl.w	r2, r1, r2
 8003138:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313e:	2b00      	cmp	r3, #0
 8003140:	d071      	beq.n	8003226 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800314a:	e06c      	b.n	8003226 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003150:	f003 031f 	and.w	r3, r3, #31
 8003154:	2202      	movs	r2, #2
 8003156:	409a      	lsls	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4013      	ands	r3, r2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d02e      	beq.n	80031be <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d029      	beq.n	80031be <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0320 	and.w	r3, r3, #32
 8003174:	2b00      	cmp	r3, #0
 8003176:	d10b      	bne.n	8003190 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 020a 	bic.w	r2, r2, #10
 8003186:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003194:	f003 021f 	and.w	r2, r3, #31
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319c:	2102      	movs	r1, #2
 800319e:	fa01 f202 	lsl.w	r2, r1, r2
 80031a2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d038      	beq.n	8003226 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80031bc:	e033      	b.n	8003226 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	f003 031f 	and.w	r3, r3, #31
 80031c6:	2208      	movs	r2, #8
 80031c8:	409a      	lsls	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d02a      	beq.n	8003228 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	f003 0308 	and.w	r3, r3, #8
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d025      	beq.n	8003228 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f022 020e 	bic.w	r2, r2, #14
 80031ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f0:	f003 021f 	and.w	r2, r3, #31
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f8:	2101      	movs	r1, #1
 80031fa:	fa01 f202 	lsl.w	r2, r1, r2
 80031fe:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2201      	movs	r2, #1
 8003204:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800321a:	2b00      	cmp	r3, #0
 800321c:	d004      	beq.n	8003228 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003226:	bf00      	nop
 8003228:	bf00      	nop
}
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	60f8      	str	r0, [r7, #12]
 8003238:	60b9      	str	r1, [r7, #8]
 800323a:	607a      	str	r2, [r7, #4]
 800323c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003242:	68fa      	ldr	r2, [r7, #12]
 8003244:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003246:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324c:	2b00      	cmp	r3, #0
 800324e:	d004      	beq.n	800325a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003254:	68fa      	ldr	r2, [r7, #12]
 8003256:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003258:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800325e:	f003 021f 	and.w	r2, r3, #31
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003266:	2101      	movs	r1, #1
 8003268:	fa01 f202 	lsl.w	r2, r1, r2
 800326c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	2b10      	cmp	r3, #16
 800327c:	d108      	bne.n	8003290 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800328e:	e007      	b.n	80032a0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	60da      	str	r2, [r3, #12]
}
 80032a0:	bf00      	nop
 80032a2:	3714      	adds	r7, #20
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b087      	sub	sp, #28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	461a      	mov	r2, r3
 80032ba:	4b16      	ldr	r3, [pc, #88]	; (8003314 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80032bc:	429a      	cmp	r2, r3
 80032be:	d802      	bhi.n	80032c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80032c0:	4b15      	ldr	r3, [pc, #84]	; (8003318 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	e001      	b.n	80032ca <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80032c6:	4b15      	ldr	r3, [pc, #84]	; (800331c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80032c8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	3b08      	subs	r3, #8
 80032d6:	4a12      	ldr	r2, [pc, #72]	; (8003320 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	091b      	lsrs	r3, r3, #4
 80032de:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e4:	089b      	lsrs	r3, r3, #2
 80032e6:	009a      	lsls	r2, r3, #2
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	4413      	add	r3, r2
 80032ec:	461a      	mov	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a0b      	ldr	r2, [pc, #44]	; (8003324 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80032f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	2201      	movs	r2, #1
 8003300:	409a      	lsls	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003306:	bf00      	nop
 8003308:	371c      	adds	r7, #28
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
 8003312:	bf00      	nop
 8003314:	40020407 	.word	0x40020407
 8003318:	40020800 	.word	0x40020800
 800331c:	40020820 	.word	0x40020820
 8003320:	cccccccd 	.word	0xcccccccd
 8003324:	40020880 	.word	0x40020880

08003328 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003328:	b480      	push	{r7}
 800332a:	b085      	sub	sp, #20
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	461a      	mov	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	4a08      	ldr	r2, [pc, #32]	; (800336c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800334a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	3b01      	subs	r3, #1
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	2201      	movs	r2, #1
 8003356:	409a      	lsls	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800335c:	bf00      	nop
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	1000823f 	.word	0x1000823f
 800336c:	40020940 	.word	0x40020940

08003370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800337e:	e15a      	b.n	8003636 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	2101      	movs	r1, #1
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	fa01 f303 	lsl.w	r3, r1, r3
 800338c:	4013      	ands	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	f000 814c 	beq.w	8003630 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d005      	beq.n	80033b0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d130      	bne.n	8003412 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	2203      	movs	r2, #3
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	43db      	mvns	r3, r3
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	4013      	ands	r3, r2
 80033c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	693a      	ldr	r2, [r7, #16]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	693a      	ldr	r2, [r7, #16]
 80033de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033e6:	2201      	movs	r2, #1
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	fa02 f303 	lsl.w	r3, r2, r3
 80033ee:	43db      	mvns	r3, r3
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	4013      	ands	r3, r2
 80033f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	091b      	lsrs	r3, r3, #4
 80033fc:	f003 0201 	and.w	r2, r3, #1
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	4313      	orrs	r3, r2
 800340a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	693a      	ldr	r2, [r7, #16]
 8003410:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 0303 	and.w	r3, r3, #3
 800341a:	2b03      	cmp	r3, #3
 800341c:	d017      	beq.n	800344e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	005b      	lsls	r3, r3, #1
 8003428:	2203      	movs	r2, #3
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43db      	mvns	r3, r3
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4013      	ands	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	689a      	ldr	r2, [r3, #8]
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	693a      	ldr	r2, [r7, #16]
 8003444:	4313      	orrs	r3, r2
 8003446:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	693a      	ldr	r2, [r7, #16]
 800344c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d123      	bne.n	80034a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	08da      	lsrs	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3208      	adds	r2, #8
 8003462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003466:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	220f      	movs	r2, #15
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43db      	mvns	r3, r3
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	4013      	ands	r3, r2
 800347c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	691a      	ldr	r2, [r3, #16]
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	f003 0307 	and.w	r3, r3, #7
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	fa02 f303 	lsl.w	r3, r2, r3
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	08da      	lsrs	r2, r3, #3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	3208      	adds	r2, #8
 800349c:	6939      	ldr	r1, [r7, #16]
 800349e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	2203      	movs	r2, #3
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	43db      	mvns	r3, r3
 80034b4:	693a      	ldr	r2, [r7, #16]
 80034b6:	4013      	ands	r3, r2
 80034b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f003 0203 	and.w	r2, r3, #3
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 80a6 	beq.w	8003630 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034e4:	4b5b      	ldr	r3, [pc, #364]	; (8003654 <HAL_GPIO_Init+0x2e4>)
 80034e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e8:	4a5a      	ldr	r2, [pc, #360]	; (8003654 <HAL_GPIO_Init+0x2e4>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	6613      	str	r3, [r2, #96]	; 0x60
 80034f0:	4b58      	ldr	r3, [pc, #352]	; (8003654 <HAL_GPIO_Init+0x2e4>)
 80034f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034f4:	f003 0301 	and.w	r3, r3, #1
 80034f8:	60bb      	str	r3, [r7, #8]
 80034fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034fc:	4a56      	ldr	r2, [pc, #344]	; (8003658 <HAL_GPIO_Init+0x2e8>)
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	089b      	lsrs	r3, r3, #2
 8003502:	3302      	adds	r3, #2
 8003504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003508:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f003 0303 	and.w	r3, r3, #3
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	220f      	movs	r2, #15
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	693a      	ldr	r2, [r7, #16]
 800351c:	4013      	ands	r3, r2
 800351e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003526:	d01f      	beq.n	8003568 <HAL_GPIO_Init+0x1f8>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a4c      	ldr	r2, [pc, #304]	; (800365c <HAL_GPIO_Init+0x2ec>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d019      	beq.n	8003564 <HAL_GPIO_Init+0x1f4>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a4b      	ldr	r2, [pc, #300]	; (8003660 <HAL_GPIO_Init+0x2f0>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d013      	beq.n	8003560 <HAL_GPIO_Init+0x1f0>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a4a      	ldr	r2, [pc, #296]	; (8003664 <HAL_GPIO_Init+0x2f4>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d00d      	beq.n	800355c <HAL_GPIO_Init+0x1ec>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a49      	ldr	r2, [pc, #292]	; (8003668 <HAL_GPIO_Init+0x2f8>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d007      	beq.n	8003558 <HAL_GPIO_Init+0x1e8>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a48      	ldr	r2, [pc, #288]	; (800366c <HAL_GPIO_Init+0x2fc>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d101      	bne.n	8003554 <HAL_GPIO_Init+0x1e4>
 8003550:	2305      	movs	r3, #5
 8003552:	e00a      	b.n	800356a <HAL_GPIO_Init+0x1fa>
 8003554:	2306      	movs	r3, #6
 8003556:	e008      	b.n	800356a <HAL_GPIO_Init+0x1fa>
 8003558:	2304      	movs	r3, #4
 800355a:	e006      	b.n	800356a <HAL_GPIO_Init+0x1fa>
 800355c:	2303      	movs	r3, #3
 800355e:	e004      	b.n	800356a <HAL_GPIO_Init+0x1fa>
 8003560:	2302      	movs	r3, #2
 8003562:	e002      	b.n	800356a <HAL_GPIO_Init+0x1fa>
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <HAL_GPIO_Init+0x1fa>
 8003568:	2300      	movs	r3, #0
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	f002 0203 	and.w	r2, r2, #3
 8003570:	0092      	lsls	r2, r2, #2
 8003572:	4093      	lsls	r3, r2
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800357a:	4937      	ldr	r1, [pc, #220]	; (8003658 <HAL_GPIO_Init+0x2e8>)
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	089b      	lsrs	r3, r3, #2
 8003580:	3302      	adds	r3, #2
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003588:	4b39      	ldr	r3, [pc, #228]	; (8003670 <HAL_GPIO_Init+0x300>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	43db      	mvns	r3, r3
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4013      	ands	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035ac:	4a30      	ldr	r2, [pc, #192]	; (8003670 <HAL_GPIO_Init+0x300>)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035b2:	4b2f      	ldr	r3, [pc, #188]	; (8003670 <HAL_GPIO_Init+0x300>)
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	43db      	mvns	r3, r3
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4013      	ands	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035d6:	4a26      	ldr	r2, [pc, #152]	; (8003670 <HAL_GPIO_Init+0x300>)
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80035dc:	4b24      	ldr	r3, [pc, #144]	; (8003670 <HAL_GPIO_Init+0x300>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	43db      	mvns	r3, r3
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4013      	ands	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003600:	4a1b      	ldr	r2, [pc, #108]	; (8003670 <HAL_GPIO_Init+0x300>)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003606:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <HAL_GPIO_Init+0x300>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	43db      	mvns	r3, r3
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4013      	ands	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800362a:	4a11      	ldr	r2, [pc, #68]	; (8003670 <HAL_GPIO_Init+0x300>)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	3301      	adds	r3, #1
 8003634:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	fa22 f303 	lsr.w	r3, r2, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	f47f ae9d 	bne.w	8003380 <HAL_GPIO_Init+0x10>
  }
}
 8003646:	bf00      	nop
 8003648:	bf00      	nop
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	40021000 	.word	0x40021000
 8003658:	40010000 	.word	0x40010000
 800365c:	48000400 	.word	0x48000400
 8003660:	48000800 	.word	0x48000800
 8003664:	48000c00 	.word	0x48000c00
 8003668:	48001000 	.word	0x48001000
 800366c:	48001400 	.word	0x48001400
 8003670:	40010400 	.word	0x40010400

08003674 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	460b      	mov	r3, r1
 800367e:	807b      	strh	r3, [r7, #2]
 8003680:	4613      	mov	r3, r2
 8003682:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003684:	787b      	ldrb	r3, [r7, #1]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800368a:	887a      	ldrh	r2, [r7, #2]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003690:	e002      	b.n	8003698 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003692:	887a      	ldrh	r2, [r7, #2]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b085      	sub	sp, #20
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	695b      	ldr	r3, [r3, #20]
 80036b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80036b6:	887a      	ldrh	r2, [r7, #2]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	4013      	ands	r3, r2
 80036bc:	041a      	lsls	r2, r3, #16
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	43d9      	mvns	r1, r3
 80036c2:	887b      	ldrh	r3, [r7, #2]
 80036c4:	400b      	ands	r3, r1
 80036c6:	431a      	orrs	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	619a      	str	r2, [r3, #24]
}
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr

080036d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80036e2:	4b08      	ldr	r3, [pc, #32]	; (8003704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036e4:	695a      	ldr	r2, [r3, #20]
 80036e6:	88fb      	ldrh	r3, [r7, #6]
 80036e8:	4013      	ands	r3, r2
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d006      	beq.n	80036fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036ee:	4a05      	ldr	r2, [pc, #20]	; (8003704 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036f0:	88fb      	ldrh	r3, [r7, #6]
 80036f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036f4:	88fb      	ldrh	r3, [r7, #6]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f000 f806 	bl	8003708 <HAL_GPIO_EXTI_Callback>
  }
}
 80036fc:	bf00      	nop
 80036fe:	3708      	adds	r7, #8
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}
 8003704:	40010400 	.word	0x40010400

08003708 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr

0800371e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b084      	sub	sp, #16
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e0c0      	b.n	80038b2 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d106      	bne.n	800374a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f008 fc39 	bl	800bfbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2203      	movs	r2, #3
 800374e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f004 fa81 	bl	8007c5e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800375c:	2300      	movs	r3, #0
 800375e:	73fb      	strb	r3, [r7, #15]
 8003760:	e03e      	b.n	80037e0 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003762:	7bfa      	ldrb	r2, [r7, #15]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4413      	add	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	440b      	add	r3, r1
 8003770:	3311      	adds	r3, #17
 8003772:	2201      	movs	r2, #1
 8003774:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003776:	7bfa      	ldrb	r2, [r7, #15]
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	440b      	add	r3, r1
 8003784:	3310      	adds	r3, #16
 8003786:	7bfa      	ldrb	r2, [r7, #15]
 8003788:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800378a:	7bfa      	ldrb	r2, [r7, #15]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	440b      	add	r3, r1
 8003798:	3313      	adds	r3, #19
 800379a:	2200      	movs	r2, #0
 800379c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800379e:	7bfa      	ldrb	r2, [r7, #15]
 80037a0:	6879      	ldr	r1, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	440b      	add	r3, r1
 80037ac:	3320      	adds	r3, #32
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80037b2:	7bfa      	ldrb	r2, [r7, #15]
 80037b4:	6879      	ldr	r1, [r7, #4]
 80037b6:	4613      	mov	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	00db      	lsls	r3, r3, #3
 80037be:	440b      	add	r3, r1
 80037c0:	3324      	adds	r3, #36	; 0x24
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80037c6:	7bfb      	ldrb	r3, [r7, #15]
 80037c8:	6879      	ldr	r1, [r7, #4]
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	4613      	mov	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	4413      	add	r3, r2
 80037d2:	00db      	lsls	r3, r3, #3
 80037d4:	440b      	add	r3, r1
 80037d6:	2200      	movs	r2, #0
 80037d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037da:	7bfb      	ldrb	r3, [r7, #15]
 80037dc:	3301      	adds	r3, #1
 80037de:	73fb      	strb	r3, [r7, #15]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	791b      	ldrb	r3, [r3, #4]
 80037e4:	7bfa      	ldrb	r2, [r7, #15]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d3bb      	bcc.n	8003762 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ea:	2300      	movs	r3, #0
 80037ec:	73fb      	strb	r3, [r7, #15]
 80037ee:	e044      	b.n	800387a <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80037f0:	7bfa      	ldrb	r2, [r7, #15]
 80037f2:	6879      	ldr	r1, [r7, #4]
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	00db      	lsls	r3, r3, #3
 80037fc:	440b      	add	r3, r1
 80037fe:	f203 1351 	addw	r3, r3, #337	; 0x151
 8003802:	2200      	movs	r2, #0
 8003804:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003806:	7bfa      	ldrb	r2, [r7, #15]
 8003808:	6879      	ldr	r1, [r7, #4]
 800380a:	4613      	mov	r3, r2
 800380c:	009b      	lsls	r3, r3, #2
 800380e:	4413      	add	r3, r2
 8003810:	00db      	lsls	r3, r3, #3
 8003812:	440b      	add	r3, r1
 8003814:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003818:	7bfa      	ldrb	r2, [r7, #15]
 800381a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800381c:	7bfa      	ldrb	r2, [r7, #15]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	4413      	add	r3, r2
 8003826:	00db      	lsls	r3, r3, #3
 8003828:	440b      	add	r3, r1
 800382a:	f203 1353 	addw	r3, r3, #339	; 0x153
 800382e:	2200      	movs	r2, #0
 8003830:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003832:	7bfa      	ldrb	r2, [r7, #15]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	440b      	add	r3, r1
 8003840:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003848:	7bfa      	ldrb	r2, [r7, #15]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	00db      	lsls	r3, r3, #3
 8003854:	440b      	add	r3, r1
 8003856:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800385e:	7bfa      	ldrb	r2, [r7, #15]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4413      	add	r3, r2
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	440b      	add	r3, r1
 800386c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003870:	2200      	movs	r2, #0
 8003872:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003874:	7bfb      	ldrb	r3, [r7, #15]
 8003876:	3301      	adds	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	791b      	ldrb	r3, [r3, #4]
 800387e:	7bfa      	ldrb	r2, [r7, #15]
 8003880:	429a      	cmp	r2, r3
 8003882:	d3b5      	bcc.n	80037f0 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6818      	ldr	r0, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3304      	adds	r3, #4
 800388c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003890:	f004 fa00 	bl	8007c94 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2200      	movs	r2, #0
 8003898:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	7a9b      	ldrb	r3, [r3, #10]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d102      	bne.n	80038b0 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f001 fc41 	bl	8005132 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3710      	adds	r7, #16
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b082      	sub	sp, #8
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d101      	bne.n	80038d0 <HAL_PCD_Start+0x16>
 80038cc:	2302      	movs	r3, #2
 80038ce:	e012      	b.n	80038f6 <HAL_PCD_Start+0x3c>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f004 f9a7 	bl	8007c30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f006 fc67 	bl	800a1ba <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	b084      	sub	sp, #16
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f006 fc6c 	bl	800a1e8 <USB_ReadInterrupts>
 8003910:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d003      	beq.n	8003924 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f000 fb04 	bl	8003f2a <PCD_EP_ISR_Handler>

    return;
 8003922:	e110      	b.n	8003b46 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800392a:	2b00      	cmp	r3, #0
 800392c:	d013      	beq.n	8003956 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003936:	b29a      	uxth	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003940:	b292      	uxth	r2, r2
 8003942:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f008 fbd1 	bl	800c0ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800394c:	2100      	movs	r1, #0
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f8fc 	bl	8003b4c <HAL_PCD_SetAddress>

    return;
 8003954:	e0f7      	b.n	8003b46 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00c      	beq.n	800397a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003968:	b29a      	uxth	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003972:	b292      	uxth	r2, r2
 8003974:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003978:	e0e5      	b.n	8003b46 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00c      	beq.n	800399e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800398c:	b29a      	uxth	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003996:	b292      	uxth	r2, r2
 8003998:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800399c:	e0d3      	b.n	8003b46 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d034      	beq.n	8003a12 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0204 	bic.w	r2, r2, #4
 80039ba:	b292      	uxth	r2, r2
 80039bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0208 	bic.w	r2, r2, #8
 80039d2:	b292      	uxth	r2, r2
 80039d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80039de:	2b01      	cmp	r3, #1
 80039e0:	d107      	bne.n	80039f2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80039ea:	2100      	movs	r1, #0
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f008 fd71 	bl	800c4d4 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f008 fbb4 	bl	800c160 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a00:	b29a      	uxth	r2, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a0a:	b292      	uxth	r2, r2
 8003a0c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003a10:	e099      	b.n	8003b46 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d027      	beq.n	8003a6c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a24:	b29a      	uxth	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f042 0208 	orr.w	r2, r2, #8
 8003a2e:	b292      	uxth	r2, r2
 8003a30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a46:	b292      	uxth	r2, r2
 8003a48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0204 	orr.w	r2, r2, #4
 8003a5e:	b292      	uxth	r2, r2
 8003a60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f008 fb61 	bl	800c12c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003a6a:	e06c      	b.n	8003b46 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d040      	beq.n	8003af8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a7e:	b29a      	uxth	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a88:	b292      	uxth	r2, r2
 8003a8a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d12b      	bne.n	8003af0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0204 	orr.w	r2, r2, #4
 8003aaa:	b292      	uxth	r2, r2
 8003aac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0208 	orr.w	r2, r2, #8
 8003ac2:	b292      	uxth	r2, r2
 8003ac4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	089b      	lsrs	r3, r3, #2
 8003adc:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f008 fcf3 	bl	800c4d4 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8003aee:	e02a      	b.n	8003b46 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f008 fb1b 	bl	800c12c <HAL_PCD_SuspendCallback>
    return;
 8003af6:	e026      	b.n	8003b46 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00f      	beq.n	8003b22 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b14:	b292      	uxth	r2, r2
 8003b16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f008 fad9 	bl	800c0d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8003b20:	e011      	b.n	8003b46 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00c      	beq.n	8003b46 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b3e:	b292      	uxth	r2, r2
 8003b40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8003b44:	bf00      	nop
  }
}
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	460b      	mov	r3, r1
 8003b56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d101      	bne.n	8003b66 <HAL_PCD_SetAddress+0x1a>
 8003b62:	2302      	movs	r3, #2
 8003b64:	e012      	b.n	8003b8c <HAL_PCD_SetAddress+0x40>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	78fa      	ldrb	r2, [r7, #3]
 8003b72:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	78fa      	ldrb	r2, [r7, #3]
 8003b7a:	4611      	mov	r1, r2
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f006 fb08 	bl	800a192 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	4608      	mov	r0, r1
 8003b9e:	4611      	mov	r1, r2
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	70fb      	strb	r3, [r7, #3]
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	803b      	strh	r3, [r7, #0]
 8003baa:	4613      	mov	r3, r2
 8003bac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003bb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	da0e      	bge.n	8003bd8 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bba:	78fb      	ldrb	r3, [r7, #3]
 8003bbc:	f003 0207 	and.w	r2, r3, #7
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	4413      	add	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	3310      	adds	r3, #16
 8003bca:	687a      	ldr	r2, [r7, #4]
 8003bcc:	4413      	add	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	705a      	strb	r2, [r3, #1]
 8003bd6:	e00e      	b.n	8003bf6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003bd8:	78fb      	ldrb	r3, [r7, #3]
 8003bda:	f003 0207 	and.w	r2, r3, #7
 8003bde:	4613      	mov	r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	4413      	add	r3, r2
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	f003 0307 	and.w	r3, r3, #7
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003c02:	883a      	ldrh	r2, [r7, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	78ba      	ldrb	r2, [r7, #2]
 8003c0c:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003c0e:	78bb      	ldrb	r3, [r7, #2]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d102      	bne.n	8003c1a <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d101      	bne.n	8003c28 <HAL_PCD_EP_Open+0x94>
 8003c24:	2302      	movs	r3, #2
 8003c26:	e00e      	b.n	8003c46 <HAL_PCD_EP_Open+0xb2>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68f9      	ldr	r1, [r7, #12]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f004 f84a 	bl	8007cd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8003c44:	7afb      	ldrb	r3, [r7, #11]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
 8003c56:	460b      	mov	r3, r1
 8003c58:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	da0e      	bge.n	8003c80 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c62:	78fb      	ldrb	r3, [r7, #3]
 8003c64:	f003 0207 	and.w	r2, r3, #7
 8003c68:	4613      	mov	r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	4413      	add	r3, r2
 8003c6e:	00db      	lsls	r3, r3, #3
 8003c70:	3310      	adds	r3, #16
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	705a      	strb	r2, [r3, #1]
 8003c7e:	e00e      	b.n	8003c9e <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c80:	78fb      	ldrb	r3, [r7, #3]
 8003c82:	f003 0207 	and.w	r2, r3, #7
 8003c86:	4613      	mov	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4413      	add	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	4413      	add	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c9e:	78fb      	ldrb	r3, [r7, #3]
 8003ca0:	f003 0307 	and.w	r3, r3, #7
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d101      	bne.n	8003cb8 <HAL_PCD_EP_Close+0x6a>
 8003cb4:	2302      	movs	r3, #2
 8003cb6:	e00e      	b.n	8003cd6 <HAL_PCD_EP_Close+0x88>
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68f9      	ldr	r1, [r7, #12]
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f004 fbc6 	bl	8008458 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	60f8      	str	r0, [r7, #12]
 8003ce6:	607a      	str	r2, [r7, #4]
 8003ce8:	603b      	str	r3, [r7, #0]
 8003cea:	460b      	mov	r3, r1
 8003cec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cee:	7afb      	ldrb	r3, [r7, #11]
 8003cf0:	f003 0207 	and.w	r2, r3, #7
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	4413      	add	r3, r2
 8003cfa:	00db      	lsls	r3, r3, #3
 8003cfc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4413      	add	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2200      	movs	r2, #0
 8003d16:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d1e:	7afb      	ldrb	r3, [r7, #11]
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	6979      	ldr	r1, [r7, #20]
 8003d30:	4618      	mov	r0, r3
 8003d32:	f004 fd7e 	bl	8008832 <USB_EPStartXfer>

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3718      	adds	r7, #24
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	460b      	mov	r3, r1
 8003d4a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	f003 0207 	and.w	r2, r3, #7
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	440b      	add	r3, r1
 8003d5e:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8003d62:	681b      	ldr	r3, [r3, #0]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	607a      	str	r2, [r7, #4]
 8003d7a:	603b      	str	r3, [r7, #0]
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d80:	7afb      	ldrb	r3, [r7, #11]
 8003d82:	f003 0207 	and.w	r2, r3, #7
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	3310      	adds	r3, #16
 8003d90:	68fa      	ldr	r2, [r7, #12]
 8003d92:	4413      	add	r3, r2
 8003d94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2201      	movs	r2, #1
 8003da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	2200      	movs	r2, #0
 8003db4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2201      	movs	r2, #1
 8003dba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003dbc:	7afb      	ldrb	r3, [r7, #11]
 8003dbe:	f003 0307 	and.w	r3, r3, #7
 8003dc2:	b2da      	uxtb	r2, r3
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6979      	ldr	r1, [r7, #20]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f004 fd2f 	bl	8008832 <USB_EPStartXfer>

  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	460b      	mov	r3, r1
 8003de8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003dea:	78fb      	ldrb	r3, [r7, #3]
 8003dec:	f003 0307 	and.w	r3, r3, #7
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	7912      	ldrb	r2, [r2, #4]
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d901      	bls.n	8003dfc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e03e      	b.n	8003e7a <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003dfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	da0e      	bge.n	8003e22 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e04:	78fb      	ldrb	r3, [r7, #3]
 8003e06:	f003 0207 	and.w	r2, r3, #7
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	00db      	lsls	r3, r3, #3
 8003e12:	3310      	adds	r3, #16
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	4413      	add	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	705a      	strb	r2, [r3, #1]
 8003e20:	e00c      	b.n	8003e3c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	4613      	mov	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	4413      	add	r3, r2
 8003e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_PCD_EP_SetStall+0x7e>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e00e      	b.n	8003e7a <HAL_PCD_EP_SetStall+0x9c>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68f9      	ldr	r1, [r7, #12]
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f006 f892 	bl	8009f94 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3710      	adds	r7, #16
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}

08003e82 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	b084      	sub	sp, #16
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6078      	str	r0, [r7, #4]
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003e8e:	78fb      	ldrb	r3, [r7, #3]
 8003e90:	f003 030f 	and.w	r3, r3, #15
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	7912      	ldrb	r2, [r2, #4]
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e040      	b.n	8003f22 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003ea0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	da0e      	bge.n	8003ec6 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ea8:	78fb      	ldrb	r3, [r7, #3]
 8003eaa:	f003 0207 	and.w	r2, r3, #7
 8003eae:	4613      	mov	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	4413      	add	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	3310      	adds	r3, #16
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	4413      	add	r3, r2
 8003ebc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	705a      	strb	r2, [r3, #1]
 8003ec4:	e00e      	b.n	8003ee4 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ec6:	78fb      	ldrb	r3, [r7, #3]
 8003ec8:	f003 0207 	and.w	r2, r3, #7
 8003ecc:	4613      	mov	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	4413      	add	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	4413      	add	r3, r2
 8003edc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003eea:	78fb      	ldrb	r3, [r7, #3]
 8003eec:	f003 0307 	and.w	r3, r3, #7
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d101      	bne.n	8003f04 <HAL_PCD_EP_ClrStall+0x82>
 8003f00:	2302      	movs	r3, #2
 8003f02:	e00e      	b.n	8003f22 <HAL_PCD_EP_ClrStall+0xa0>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68f9      	ldr	r1, [r7, #12]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f006 f88f 	bl	800a036 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b096      	sub	sp, #88	; 0x58
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8003f32:	e3ae      	b.n	8004692 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003f3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8003f40:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8003f4e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f040 8170 	bne.w	8004238 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8003f58:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d14d      	bne.n	8004000 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8003f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f74:	81fb      	strh	r3, [r7, #14]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	89fb      	ldrh	r3, [r7, #14]
 8003f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	3310      	adds	r3, #16
 8003f8c:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	461a      	mov	r2, r3
 8003f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	4413      	add	r3, r2
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6812      	ldr	r2, [r2, #0]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8003fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb8:	695a      	ldr	r2, [r3, #20]
 8003fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	441a      	add	r2, r3
 8003fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fc2:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8003fc4:	2100      	movs	r1, #0
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f008 f869 	bl	800c09e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	7b1b      	ldrb	r3, [r3, #12]
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 835d 	beq.w	8004692 <PCD_EP_ISR_Handler+0x768>
 8003fd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fda:	699b      	ldr	r3, [r3, #24]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f040 8358 	bne.w	8004692 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	7b1b      	ldrb	r3, [r3, #12]
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	b292      	uxth	r2, r2
 8003ff4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	731a      	strb	r2, [r3, #12]
 8003ffe:	e348      	b.n	8004692 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004006:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004012:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800401a:	2b00      	cmp	r3, #0
 800401c:	d032      	beq.n	8004084 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004026:	b29b      	uxth	r3, r3
 8004028:	461a      	mov	r2, r3
 800402a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4413      	add	r3, r2
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6812      	ldr	r2, [r2, #0]
 8004036:	4413      	add	r3, r2
 8004038:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004044:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8004050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004052:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8004054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004056:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8004058:	b29b      	uxth	r3, r3
 800405a:	f006 f917 	bl	800a28c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	881b      	ldrh	r3, [r3, #0]
 8004064:	b29a      	uxth	r2, r3
 8004066:	f640 738f 	movw	r3, #3983	; 0xf8f
 800406a:	4013      	ands	r3, r2
 800406c:	823b      	strh	r3, [r7, #16]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	8a3a      	ldrh	r2, [r7, #16]
 8004074:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004078:	b292      	uxth	r2, r2
 800407a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f007 ffe1 	bl	800c044 <HAL_PCD_SetupStageCallback>
 8004082:	e306      	b.n	8004692 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004084:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004088:	2b00      	cmp	r3, #0
 800408a:	f280 8302 	bge.w	8004692 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	b29a      	uxth	r2, r3
 8004096:	f640 738f 	movw	r3, #3983	; 0xf8f
 800409a:	4013      	ands	r3, r2
 800409c:	83fb      	strh	r3, [r7, #30]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	8bfa      	ldrh	r2, [r7, #30]
 80040a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80040a8:	b292      	uxth	r2, r2
 80040aa:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	461a      	mov	r2, r3
 80040b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	4413      	add	r3, r2
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6812      	ldr	r2, [r2, #0]
 80040c4:	4413      	add	r3, r2
 80040c6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80040d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d2:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80040d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040d6:	69db      	ldr	r3, [r3, #28]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d019      	beq.n	8004110 <PCD_EP_ISR_Handler+0x1e6>
 80040dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d015      	beq.n	8004110 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ea:	6959      	ldr	r1, [r3, #20]
 80040ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ee:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80040f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040f2:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	f006 f8c9 	bl	800a28c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80040fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040fc:	695a      	ldr	r2, [r3, #20]
 80040fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	441a      	add	r2, r3
 8004104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004106:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8004108:	2100      	movs	r1, #0
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f007 ffac 	bl	800c068 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800411a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800411e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004122:	2b00      	cmp	r3, #0
 8004124:	f040 82b5 	bne.w	8004692 <PCD_EP_ISR_Handler+0x768>
 8004128:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800412c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004130:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004134:	f000 82ad 	beq.w	8004692 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004146:	b29b      	uxth	r3, r3
 8004148:	461a      	mov	r2, r3
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	4413      	add	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004156:	617b      	str	r3, [r7, #20]
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	881b      	ldrh	r3, [r3, #0]
 800415c:	b29b      	uxth	r3, r3
 800415e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004162:	b29a      	uxth	r2, r3
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	801a      	strh	r2, [r3, #0]
 8004168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	2b3e      	cmp	r3, #62	; 0x3e
 800416e:	d91d      	bls.n	80041ac <PCD_EP_ISR_Handler+0x282>
 8004170:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	647b      	str	r3, [r7, #68]	; 0x44
 8004178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	f003 031f 	and.w	r3, r3, #31
 8004180:	2b00      	cmp	r3, #0
 8004182:	d102      	bne.n	800418a <PCD_EP_ISR_Handler+0x260>
 8004184:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004186:	3b01      	subs	r3, #1
 8004188:	647b      	str	r3, [r7, #68]	; 0x44
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	b29a      	uxth	r2, r3
 8004190:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004192:	b29b      	uxth	r3, r3
 8004194:	029b      	lsls	r3, r3, #10
 8004196:	b29b      	uxth	r3, r3
 8004198:	4313      	orrs	r3, r2
 800419a:	b29b      	uxth	r3, r3
 800419c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041a4:	b29a      	uxth	r2, r3
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	801a      	strh	r2, [r3, #0]
 80041aa:	e026      	b.n	80041fa <PCD_EP_ISR_Handler+0x2d0>
 80041ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d10a      	bne.n	80041ca <PCD_EP_ISR_Handler+0x2a0>
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	881b      	ldrh	r3, [r3, #0]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80041be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	801a      	strh	r2, [r3, #0]
 80041c8:	e017      	b.n	80041fa <PCD_EP_ISR_Handler+0x2d0>
 80041ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	085b      	lsrs	r3, r3, #1
 80041d0:	647b      	str	r3, [r7, #68]	; 0x44
 80041d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d4:	691b      	ldr	r3, [r3, #16]
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d002      	beq.n	80041e4 <PCD_EP_ISR_Handler+0x2ba>
 80041de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041e0:	3301      	adds	r3, #1
 80041e2:	647b      	str	r3, [r7, #68]	; 0x44
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	881b      	ldrh	r3, [r3, #0]
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	029b      	lsls	r3, r3, #10
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	4313      	orrs	r3, r2
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	881b      	ldrh	r3, [r3, #0]
 8004200:	b29b      	uxth	r3, r3
 8004202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800420a:	827b      	strh	r3, [r7, #18]
 800420c:	8a7b      	ldrh	r3, [r7, #18]
 800420e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004212:	827b      	strh	r3, [r7, #18]
 8004214:	8a7b      	ldrh	r3, [r7, #18]
 8004216:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800421a:	827b      	strh	r3, [r7, #18]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	8a7b      	ldrh	r3, [r7, #18]
 8004222:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004226:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800422a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004232:	b29b      	uxth	r3, r3
 8004234:	8013      	strh	r3, [r2, #0]
 8004236:	e22c      	b.n	8004692 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	461a      	mov	r2, r3
 800423e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	4413      	add	r3, r2
 8004246:	881b      	ldrh	r3, [r3, #0]
 8004248:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800424c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004250:	2b00      	cmp	r3, #0
 8004252:	f280 80f6 	bge.w	8004442 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	881b      	ldrh	r3, [r3, #0]
 8004266:	b29a      	uxth	r2, r3
 8004268:	f640 738f 	movw	r3, #3983	; 0xf8f
 800426c:	4013      	ands	r3, r2
 800426e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004284:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004288:	b292      	uxth	r2, r2
 800428a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800428c:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004290:	4613      	mov	r3, r2
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	4413      	add	r3, r2
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	4413      	add	r3, r2
 80042a0:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80042a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a4:	7b1b      	ldrb	r3, [r3, #12]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d123      	bne.n	80042f2 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	461a      	mov	r2, r3
 80042b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4413      	add	r3, r2
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	6812      	ldr	r2, [r2, #0]
 80042c2:	4413      	add	r3, r2
 80042c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80042c8:	881b      	ldrh	r3, [r3, #0]
 80042ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042ce:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 80042d2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f000 808e 	beq.w	80043f8 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6818      	ldr	r0, [r3, #0]
 80042e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e2:	6959      	ldr	r1, [r3, #20]
 80042e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042e6:	88da      	ldrh	r2, [r3, #6]
 80042e8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80042ec:	f005 ffce 	bl	800a28c <USB_ReadPMA>
 80042f0:	e082      	b.n	80043f8 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80042f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042f4:	78db      	ldrb	r3, [r3, #3]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d10a      	bne.n	8004310 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80042fa:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80042fe:	461a      	mov	r2, r3
 8004300:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 f9d3 	bl	80046ae <HAL_PCD_EP_DB_Receive>
 8004308:	4603      	mov	r3, r0
 800430a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800430e:	e073      	b.n	80043f8 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	461a      	mov	r2, r3
 8004316:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	009b      	lsls	r3, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	881b      	ldrh	r3, [r3, #0]
 8004320:	b29b      	uxth	r3, r3
 8004322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	441a      	add	r2, r3
 800433c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800434c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004350:	b29b      	uxth	r3, r3
 8004352:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4413      	add	r3, r2
 8004362:	881b      	ldrh	r3, [r3, #0]
 8004364:	b29b      	uxth	r3, r3
 8004366:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d022      	beq.n	80043b4 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004376:	b29b      	uxth	r3, r3
 8004378:	461a      	mov	r2, r3
 800437a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	4413      	add	r3, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6812      	ldr	r2, [r2, #0]
 8004386:	4413      	add	r3, r2
 8004388:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004392:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004396:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800439a:	2b00      	cmp	r3, #0
 800439c:	d02c      	beq.n	80043f8 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6818      	ldr	r0, [r3, #0]
 80043a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043a4:	6959      	ldr	r1, [r3, #20]
 80043a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043a8:	891a      	ldrh	r2, [r3, #8]
 80043aa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80043ae:	f005 ff6d 	bl	800a28c <USB_ReadPMA>
 80043b2:	e021      	b.n	80043f8 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043bc:	b29b      	uxth	r3, r3
 80043be:	461a      	mov	r2, r3
 80043c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	00db      	lsls	r3, r3, #3
 80043c6:	4413      	add	r3, r2
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6812      	ldr	r2, [r2, #0]
 80043cc:	4413      	add	r3, r2
 80043ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80043d2:	881b      	ldrh	r3, [r3, #0]
 80043d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043d8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 80043dc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d009      	beq.n	80043f8 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6818      	ldr	r0, [r3, #0]
 80043e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ea:	6959      	ldr	r1, [r3, #20]
 80043ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043ee:	895a      	ldrh	r2, [r3, #10]
 80043f0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80043f4:	f005 ff4a 	bl	800a28c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80043f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043fa:	69da      	ldr	r2, [r3, #28]
 80043fc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004400:	441a      	add	r2, r3
 8004402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004404:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004406:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004408:	695a      	ldr	r2, [r3, #20]
 800440a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800440e:	441a      	add	r2, r3
 8004410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004412:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004414:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d005      	beq.n	8004428 <PCD_EP_ISR_Handler+0x4fe>
 800441c:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	429a      	cmp	r2, r3
 8004426:	d206      	bcs.n	8004436 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004428:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	4619      	mov	r1, r3
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f007 fe1a 	bl	800c068 <HAL_PCD_DataOutStageCallback>
 8004434:	e005      	b.n	8004442 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800443c:	4618      	mov	r0, r3
 800443e:	f004 f9f8 	bl	8008832 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004442:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004446:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444a:	2b00      	cmp	r3, #0
 800444c:	f000 8121 	beq.w	8004692 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8004450:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004454:	4613      	mov	r3, r2
 8004456:	009b      	lsls	r3, r3, #2
 8004458:	4413      	add	r3, r2
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	3310      	adds	r3, #16
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	4413      	add	r3, r2
 8004462:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4413      	add	r3, r2
 8004472:	881b      	ldrh	r3, [r3, #0]
 8004474:	b29b      	uxth	r3, r3
 8004476:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800447a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	461a      	mov	r2, r3
 8004488:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800448c:	009b      	lsls	r3, r3, #2
 800448e:	441a      	add	r2, r3
 8004490:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004494:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004498:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800449c:	b29b      	uxth	r3, r3
 800449e:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 80044a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044a2:	78db      	ldrb	r3, [r3, #3]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	f040 80a2 	bne.w	80045ee <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 80044aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044ac:	2200      	movs	r2, #0
 80044ae:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80044b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044b2:	7b1b      	ldrb	r3, [r3, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	f000 8093 	beq.w	80045e0 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80044ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80044be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d046      	beq.n	8004554 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80044c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044c8:	785b      	ldrb	r3, [r3, #1]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d126      	bne.n	800451c <PCD_EP_ISR_Handler+0x5f2>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80044dc:	b29b      	uxth	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e2:	4413      	add	r3, r2
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
 80044e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	00da      	lsls	r2, r3, #3
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	4413      	add	r3, r2
 80044f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80044f4:	623b      	str	r3, [r7, #32]
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	881b      	ldrh	r3, [r3, #0]
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004500:	b29a      	uxth	r2, r3
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	801a      	strh	r2, [r3, #0]
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	b29b      	uxth	r3, r3
 800450c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004514:	b29a      	uxth	r2, r3
 8004516:	6a3b      	ldr	r3, [r7, #32]
 8004518:	801a      	strh	r2, [r3, #0]
 800451a:	e061      	b.n	80045e0 <PCD_EP_ISR_Handler+0x6b6>
 800451c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800451e:	785b      	ldrb	r3, [r3, #1]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d15d      	bne.n	80045e0 <PCD_EP_ISR_Handler+0x6b6>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	62fb      	str	r3, [r7, #44]	; 0x2c
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004532:	b29b      	uxth	r3, r3
 8004534:	461a      	mov	r2, r3
 8004536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004538:	4413      	add	r3, r2
 800453a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800453c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	00da      	lsls	r2, r3, #3
 8004542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004544:	4413      	add	r3, r2
 8004546:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800454a:	62bb      	str	r3, [r7, #40]	; 0x28
 800454c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454e:	2200      	movs	r2, #0
 8004550:	801a      	strh	r2, [r3, #0]
 8004552:	e045      	b.n	80045e0 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	63fb      	str	r3, [r7, #60]	; 0x3c
 800455a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800455c:	785b      	ldrb	r3, [r3, #1]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d126      	bne.n	80045b0 <PCD_EP_ISR_Handler+0x686>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	637b      	str	r3, [r7, #52]	; 0x34
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004570:	b29b      	uxth	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004576:	4413      	add	r3, r2
 8004578:	637b      	str	r3, [r7, #52]	; 0x34
 800457a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	00da      	lsls	r2, r3, #3
 8004580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004582:	4413      	add	r3, r2
 8004584:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004588:	633b      	str	r3, [r7, #48]	; 0x30
 800458a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458c:	881b      	ldrh	r3, [r3, #0]
 800458e:	b29b      	uxth	r3, r3
 8004590:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004594:	b29a      	uxth	r2, r3
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	801a      	strh	r2, [r3, #0]
 800459a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800459c:	881b      	ldrh	r3, [r3, #0]
 800459e:	b29b      	uxth	r3, r3
 80045a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045a8:	b29a      	uxth	r2, r3
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	801a      	strh	r2, [r3, #0]
 80045ae:	e017      	b.n	80045e0 <PCD_EP_ISR_Handler+0x6b6>
 80045b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045b2:	785b      	ldrb	r3, [r3, #1]
 80045b4:	2b01      	cmp	r3, #1
 80045b6:	d113      	bne.n	80045e0 <PCD_EP_ISR_Handler+0x6b6>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	461a      	mov	r2, r3
 80045c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c6:	4413      	add	r3, r2
 80045c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	00da      	lsls	r2, r3, #3
 80045d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d2:	4413      	add	r3, r2
 80045d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80045d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80045da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045dc:	2200      	movs	r2, #0
 80045de:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80045e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	4619      	mov	r1, r3
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f007 fd59 	bl	800c09e <HAL_PCD_DataInStageCallback>
 80045ec:	e051      	b.n	8004692 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80045ee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80045f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d144      	bne.n	8004684 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004602:	b29b      	uxth	r3, r3
 8004604:	461a      	mov	r2, r3
 8004606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	4413      	add	r3, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6812      	ldr	r2, [r2, #0]
 8004612:	4413      	add	r3, r2
 8004614:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800461e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004622:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004624:	699a      	ldr	r2, [r3, #24]
 8004626:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800462a:	429a      	cmp	r2, r3
 800462c:	d907      	bls.n	800463e <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 800462e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004630:	699a      	ldr	r2, [r3, #24]
 8004632:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004636:	1ad2      	subs	r2, r2, r3
 8004638:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800463a:	619a      	str	r2, [r3, #24]
 800463c:	e002      	b.n	8004644 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 800463e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004640:	2200      	movs	r2, #0
 8004642:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	2b00      	cmp	r3, #0
 800464a:	d106      	bne.n	800465a <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800464c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800464e:	781b      	ldrb	r3, [r3, #0]
 8004650:	4619      	mov	r1, r3
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f007 fd23 	bl	800c09e <HAL_PCD_DataInStageCallback>
 8004658:	e01b      	b.n	8004692 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800465a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800465c:	695a      	ldr	r2, [r3, #20]
 800465e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004662:	441a      	add	r2, r3
 8004664:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004666:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004668:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800466a:	69da      	ldr	r2, [r3, #28]
 800466c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004670:	441a      	add	r2, r3
 8004672:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004674:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800467c:	4618      	mov	r0, r3
 800467e:	f004 f8d8 	bl	8008832 <USB_EPStartXfer>
 8004682:	e006      	b.n	8004692 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004684:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004688:	461a      	mov	r2, r3
 800468a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f917 	bl	80048c0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800469a:	b29b      	uxth	r3, r3
 800469c:	b21b      	sxth	r3, r3
 800469e:	2b00      	cmp	r3, #0
 80046a0:	f6ff ac48 	blt.w	8003f34 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3758      	adds	r7, #88	; 0x58
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b088      	sub	sp, #32
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	4613      	mov	r3, r2
 80046ba:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80046bc:	88fb      	ldrh	r3, [r7, #6]
 80046be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d07c      	beq.n	80047c0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	461a      	mov	r2, r3
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	4413      	add	r3, r2
 80046da:	68fa      	ldr	r2, [r7, #12]
 80046dc:	6812      	ldr	r2, [r2, #0]
 80046de:	4413      	add	r3, r2
 80046e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80046e4:	881b      	ldrh	r3, [r3, #0]
 80046e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80046ea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	699a      	ldr	r2, [r3, #24]
 80046f0:	8b7b      	ldrh	r3, [r7, #26]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d306      	bcc.n	8004704 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	699a      	ldr	r2, [r3, #24]
 80046fa:	8b7b      	ldrh	r3, [r7, #26]
 80046fc:	1ad2      	subs	r2, r2, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	619a      	str	r2, [r3, #24]
 8004702:	e002      	b.n	800470a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2200      	movs	r2, #0
 8004708:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d123      	bne.n	800475a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	461a      	mov	r2, r3
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b29b      	uxth	r3, r3
 8004724:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472c:	833b      	strh	r3, [r7, #24]
 800472e:	8b3b      	ldrh	r3, [r7, #24]
 8004730:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004734:	833b      	strh	r3, [r7, #24]
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	461a      	mov	r2, r3
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	441a      	add	r2, r3
 8004744:	8b3b      	ldrh	r3, [r7, #24]
 8004746:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800474a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800474e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004752:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004756:	b29b      	uxth	r3, r3
 8004758:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800475a:	88fb      	ldrh	r3, [r7, #6]
 800475c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004760:	2b00      	cmp	r3, #0
 8004762:	d01f      	beq.n	80047a4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	461a      	mov	r2, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	b29b      	uxth	r3, r3
 8004776:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800477a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800477e:	82fb      	strh	r3, [r7, #22]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	461a      	mov	r2, r3
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	441a      	add	r2, r3
 800478e:	8afb      	ldrh	r3, [r7, #22]
 8004790:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004794:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004798:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800479c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80047a4:	8b7b      	ldrh	r3, [r7, #26]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 8085 	beq.w	80048b6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6818      	ldr	r0, [r3, #0]
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	6959      	ldr	r1, [r3, #20]
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	891a      	ldrh	r2, [r3, #8]
 80047b8:	8b7b      	ldrh	r3, [r7, #26]
 80047ba:	f005 fd67 	bl	800a28c <USB_ReadPMA>
 80047be:	e07a      	b.n	80048b6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	461a      	mov	r2, r3
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	781b      	ldrb	r3, [r3, #0]
 80047d0:	00db      	lsls	r3, r3, #3
 80047d2:	4413      	add	r3, r2
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	6812      	ldr	r2, [r2, #0]
 80047d8:	4413      	add	r3, r2
 80047da:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80047de:	881b      	ldrh	r3, [r3, #0]
 80047e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80047e4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	699a      	ldr	r2, [r3, #24]
 80047ea:	8b7b      	ldrh	r3, [r7, #26]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d306      	bcc.n	80047fe <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	699a      	ldr	r2, [r3, #24]
 80047f4:	8b7b      	ldrh	r3, [r7, #26]
 80047f6:	1ad2      	subs	r2, r2, r3
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	619a      	str	r2, [r3, #24]
 80047fc:	e002      	b.n	8004804 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	2200      	movs	r2, #0
 8004802:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d123      	bne.n	8004854 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	461a      	mov	r2, r3
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	b29b      	uxth	r3, r3
 800481e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004826:	83fb      	strh	r3, [r7, #30]
 8004828:	8bfb      	ldrh	r3, [r7, #30]
 800482a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800482e:	83fb      	strh	r3, [r7, #30]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	461a      	mov	r2, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	781b      	ldrb	r3, [r3, #0]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	441a      	add	r2, r3
 800483e:	8bfb      	ldrh	r3, [r7, #30]
 8004840:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004844:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004848:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800484c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004850:	b29b      	uxth	r3, r3
 8004852:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8004854:	88fb      	ldrh	r3, [r7, #6]
 8004856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485a:	2b00      	cmp	r3, #0
 800485c:	d11f      	bne.n	800489e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	461a      	mov	r2, r3
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	781b      	ldrb	r3, [r3, #0]
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	4413      	add	r3, r2
 800486c:	881b      	ldrh	r3, [r3, #0]
 800486e:	b29b      	uxth	r3, r3
 8004870:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004874:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004878:	83bb      	strh	r3, [r7, #28]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	441a      	add	r2, r3
 8004888:	8bbb      	ldrh	r3, [r7, #28]
 800488a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800488e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004892:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004896:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800489a:	b29b      	uxth	r3, r3
 800489c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800489e:	8b7b      	ldrh	r3, [r7, #26]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d008      	beq.n	80048b6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6818      	ldr	r0, [r3, #0]
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	6959      	ldr	r1, [r3, #20]
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	895a      	ldrh	r2, [r3, #10]
 80048b0:	8b7b      	ldrh	r3, [r7, #26]
 80048b2:	f005 fceb 	bl	800a28c <USB_ReadPMA>
    }
  }

  return count;
 80048b6:	8b7b      	ldrh	r3, [r7, #26]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3720      	adds	r7, #32
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b0a4      	sub	sp, #144	; 0x90
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	4613      	mov	r3, r2
 80048cc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 81db 	beq.w	8004c90 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048e2:	b29b      	uxth	r3, r3
 80048e4:	461a      	mov	r2, r3
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	00db      	lsls	r3, r3, #3
 80048ec:	4413      	add	r3, r2
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	6812      	ldr	r2, [r2, #0]
 80048f2:	4413      	add	r3, r2
 80048f4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80048f8:	881b      	ldrh	r3, [r3, #0]
 80048fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80048fe:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	699a      	ldr	r2, [r3, #24]
 8004906:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800490a:	429a      	cmp	r2, r3
 800490c:	d907      	bls.n	800491e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	699a      	ldr	r2, [r3, #24]
 8004912:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004916:	1ad2      	subs	r2, r2, r3
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	619a      	str	r2, [r3, #24]
 800491c:	e002      	b.n	8004924 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2200      	movs	r2, #0
 8004922:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	2b00      	cmp	r3, #0
 800492a:	f040 80b9 	bne.w	8004aa0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	785b      	ldrb	r3, [r3, #1]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d126      	bne.n	8004984 <HAL_PCD_EP_DB_Transmit+0xc4>
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004944:	b29b      	uxth	r3, r3
 8004946:	461a      	mov	r2, r3
 8004948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800494a:	4413      	add	r3, r2
 800494c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	00da      	lsls	r2, r3, #3
 8004954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004956:	4413      	add	r3, r2
 8004958:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800495c:	62bb      	str	r3, [r7, #40]	; 0x28
 800495e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	b29b      	uxth	r3, r3
 8004964:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004968:	b29a      	uxth	r2, r3
 800496a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496c:	801a      	strh	r2, [r3, #0]
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	881b      	ldrh	r3, [r3, #0]
 8004972:	b29b      	uxth	r3, r3
 8004974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800497c:	b29a      	uxth	r2, r3
 800497e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004980:	801a      	strh	r2, [r3, #0]
 8004982:	e01a      	b.n	80049ba <HAL_PCD_EP_DB_Transmit+0xfa>
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	785b      	ldrb	r3, [r3, #1]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d116      	bne.n	80049ba <HAL_PCD_EP_DB_Transmit+0xfa>
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	637b      	str	r3, [r7, #52]	; 0x34
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800499a:	b29b      	uxth	r3, r3
 800499c:	461a      	mov	r2, r3
 800499e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a0:	4413      	add	r3, r2
 80049a2:	637b      	str	r3, [r7, #52]	; 0x34
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	00da      	lsls	r2, r3, #3
 80049aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ac:	4413      	add	r3, r2
 80049ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80049b2:	633b      	str	r3, [r7, #48]	; 0x30
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b6:	2200      	movs	r2, #0
 80049b8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	785b      	ldrb	r3, [r3, #1]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d126      	bne.n	8004a16 <HAL_PCD_EP_DB_Transmit+0x156>
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	61fb      	str	r3, [r7, #28]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	461a      	mov	r2, r3
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	4413      	add	r3, r2
 80049de:	61fb      	str	r3, [r7, #28]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	00da      	lsls	r2, r3, #3
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	4413      	add	r3, r2
 80049ea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	881b      	ldrh	r3, [r3, #0]
 80049f4:	b29b      	uxth	r3, r3
 80049f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	801a      	strh	r2, [r3, #0]
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	801a      	strh	r2, [r3, #0]
 8004a14:	e017      	b.n	8004a46 <HAL_PCD_EP_DB_Transmit+0x186>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	785b      	ldrb	r3, [r3, #1]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d113      	bne.n	8004a46 <HAL_PCD_EP_DB_Transmit+0x186>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	461a      	mov	r2, r3
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	4413      	add	r3, r2
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	00da      	lsls	r2, r3, #3
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	4413      	add	r3, r2
 8004a3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004a3e:	623b      	str	r3, [r7, #32]
 8004a40:	6a3b      	ldr	r3, [r7, #32]
 8004a42:	2200      	movs	r2, #0
 8004a44:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f007 fb26 	bl	800c09e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004a52:	88fb      	ldrh	r3, [r7, #6]
 8004a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 82fa 	beq.w	8005052 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	461a      	mov	r2, r3
 8004a64:	68bb      	ldr	r3, [r7, #8]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a78:	82fb      	strh	r3, [r7, #22]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	441a      	add	r2, r3
 8004a88:	8afb      	ldrh	r3, [r7, #22]
 8004a8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	8013      	strh	r3, [r2, #0]
 8004a9e:	e2d8      	b.n	8005052 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004aa0:	88fb      	ldrh	r3, [r7, #6]
 8004aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d021      	beq.n	8004aee <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	461a      	mov	r2, r3
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	4413      	add	r3, r2
 8004ab8:	881b      	ldrh	r3, [r3, #0]
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	461a      	mov	r2, r3
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	441a      	add	r2, r3
 8004ad6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004ada:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ade:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ae2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	f040 82ac 	bne.w	8005052 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	695a      	ldr	r2, [r3, #20]
 8004afe:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b02:	441a      	add	r2, r3
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	69da      	ldr	r2, [r3, #28]
 8004b0c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b10:	441a      	add	r2, r3
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	6a1a      	ldr	r2, [r3, #32]
 8004b1a:	68bb      	ldr	r3, [r7, #8]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d30b      	bcc.n	8004b3a <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	6a1a      	ldr	r2, [r3, #32]
 8004b2e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b32:	1ad2      	subs	r2, r2, r3
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	621a      	str	r2, [r3, #32]
 8004b38:	e017      	b.n	8004b6a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d108      	bne.n	8004b54 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8004b42:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004b46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004b52:	e00a      	b.n	8004b6a <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	6a1b      	ldr	r3, [r3, #32]
 8004b60:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	2200      	movs	r2, #0
 8004b68:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	785b      	ldrb	r3, [r3, #1]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d165      	bne.n	8004c3e <HAL_PCD_EP_DB_Transmit+0x37e>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	461a      	mov	r2, r3
 8004b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b86:	4413      	add	r3, r2
 8004b88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	00da      	lsls	r2, r3, #3
 8004b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b92:	4413      	add	r3, r2
 8004b94:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004b98:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b9c:	881b      	ldrh	r3, [r3, #0]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004ba4:	b29a      	uxth	r2, r3
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba8:	801a      	strh	r2, [r3, #0]
 8004baa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bae:	2b3e      	cmp	r3, #62	; 0x3e
 8004bb0:	d91d      	bls.n	8004bee <HAL_PCD_EP_DB_Transmit+0x32e>
 8004bb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bbe:	f003 031f 	and.w	r3, r3, #31
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d102      	bne.n	8004bcc <HAL_PCD_EP_DB_Transmit+0x30c>
 8004bc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc8:	3b01      	subs	r3, #1
 8004bca:	64bb      	str	r3, [r7, #72]	; 0x48
 8004bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bce:	881b      	ldrh	r3, [r3, #0]
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	029b      	lsls	r3, r3, #10
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bea:	801a      	strh	r2, [r3, #0]
 8004bec:	e044      	b.n	8004c78 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004bee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d10a      	bne.n	8004c0c <HAL_PCD_EP_DB_Transmit+0x34c>
 8004bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf8:	881b      	ldrh	r3, [r3, #0]
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c08:	801a      	strh	r2, [r3, #0]
 8004c0a:	e035      	b.n	8004c78 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004c0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c10:	085b      	lsrs	r3, r3, #1
 8004c12:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c18:	f003 0301 	and.w	r3, r3, #1
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d002      	beq.n	8004c26 <HAL_PCD_EP_DB_Transmit+0x366>
 8004c20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c22:	3301      	adds	r3, #1
 8004c24:	64bb      	str	r3, [r7, #72]	; 0x48
 8004c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	029b      	lsls	r3, r3, #10
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	4313      	orrs	r3, r2
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3a:	801a      	strh	r2, [r3, #0]
 8004c3c:	e01c      	b.n	8004c78 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	785b      	ldrb	r3, [r3, #1]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d118      	bne.n	8004c78 <HAL_PCD_EP_DB_Transmit+0x3b8>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	461a      	mov	r2, r3
 8004c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c5a:	4413      	add	r3, r2
 8004c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	00da      	lsls	r2, r3, #3
 8004c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c66:	4413      	add	r3, r2
 8004c68:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004c6c:	643b      	str	r3, [r7, #64]	; 0x40
 8004c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c76:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6818      	ldr	r0, [r3, #0]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	6959      	ldr	r1, [r3, #20]
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	891a      	ldrh	r2, [r3, #8]
 8004c84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	f005 fabd 	bl	800a208 <USB_WritePMA>
 8004c8e:	e1e0      	b.n	8005052 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	4413      	add	r3, r2
 8004ca4:	68fa      	ldr	r2, [r7, #12]
 8004ca6:	6812      	ldr	r2, [r2, #0]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004cae:	881b      	ldrh	r3, [r3, #0]
 8004cb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cb4:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	699a      	ldr	r2, [r3, #24]
 8004cbc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d307      	bcc.n	8004cd4 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	699a      	ldr	r2, [r3, #24]
 8004cc8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004ccc:	1ad2      	subs	r2, r2, r3
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	619a      	str	r2, [r3, #24]
 8004cd2:	e002      	b.n	8004cda <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	699b      	ldr	r3, [r3, #24]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	f040 80c0 	bne.w	8004e64 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	785b      	ldrb	r3, [r3, #1]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d126      	bne.n	8004d3a <HAL_PCD_EP_DB_Transmit+0x47a>
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004cfa:	b29b      	uxth	r3, r3
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d00:	4413      	add	r3, r2
 8004d02:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	00da      	lsls	r2, r3, #3
 8004d0a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004d0c:	4413      	add	r3, r2
 8004d0e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d12:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d16:	881b      	ldrh	r3, [r3, #0]
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d22:	801a      	strh	r2, [r3, #0]
 8004d24:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d26:	881b      	ldrh	r3, [r3, #0]
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d36:	801a      	strh	r2, [r3, #0]
 8004d38:	e01a      	b.n	8004d70 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	785b      	ldrb	r3, [r3, #1]
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d116      	bne.n	8004d70 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	667b      	str	r3, [r7, #100]	; 0x64
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	461a      	mov	r2, r3
 8004d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d56:	4413      	add	r3, r2
 8004d58:	667b      	str	r3, [r7, #100]	; 0x64
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	00da      	lsls	r2, r3, #3
 8004d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d62:	4413      	add	r3, r2
 8004d64:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d68:	663b      	str	r3, [r7, #96]	; 0x60
 8004d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	677b      	str	r3, [r7, #116]	; 0x74
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	785b      	ldrb	r3, [r3, #1]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d12b      	bne.n	8004dd6 <HAL_PCD_EP_DB_Transmit+0x516>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	461a      	mov	r2, r3
 8004d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d92:	4413      	add	r3, r2
 8004d94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	00da      	lsls	r2, r3, #3
 8004d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d9e:	4413      	add	r3, r2
 8004da0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004da4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004da8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004db4:	b29a      	uxth	r2, r3
 8004db6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dba:	801a      	strh	r2, [r3, #0]
 8004dbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dc0:	881b      	ldrh	r3, [r3, #0]
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dc8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dcc:	b29a      	uxth	r2, r3
 8004dce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004dd2:	801a      	strh	r2, [r3, #0]
 8004dd4:	e017      	b.n	8004e06 <HAL_PCD_EP_DB_Transmit+0x546>
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	785b      	ldrb	r3, [r3, #1]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d113      	bne.n	8004e06 <HAL_PCD_EP_DB_Transmit+0x546>
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	461a      	mov	r2, r3
 8004dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004dec:	4413      	add	r3, r2
 8004dee:	677b      	str	r3, [r7, #116]	; 0x74
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	00da      	lsls	r2, r3, #3
 8004df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004df8:	4413      	add	r3, r2
 8004dfa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004dfe:	673b      	str	r3, [r7, #112]	; 0x70
 8004e00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e02:	2200      	movs	r2, #0
 8004e04:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	4619      	mov	r1, r3
 8004e0c:	68f8      	ldr	r0, [r7, #12]
 8004e0e:	f007 f946 	bl	800c09e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004e12:	88fb      	ldrh	r3, [r7, #6]
 8004e14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f040 811a 	bne.w	8005052 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	881b      	ldrh	r3, [r3, #0]
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e38:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	441a      	add	r2, r3
 8004e4a:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8004e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	8013      	strh	r3, [r2, #0]
 8004e62:	e0f6      	b.n	8005052 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8004e64:	88fb      	ldrh	r3, [r7, #6]
 8004e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d121      	bne.n	8004eb2 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	461a      	mov	r2, r3
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	781b      	ldrb	r3, [r3, #0]
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	881b      	ldrh	r3, [r3, #0]
 8004e7e:	b29b      	uxth	r3, r3
 8004e80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e88:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	461a      	mov	r2, r3
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	781b      	ldrb	r3, [r3, #0]
 8004e96:	009b      	lsls	r3, r3, #2
 8004e98:	441a      	add	r2, r3
 8004e9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8004e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ea6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	f040 80ca 	bne.w	8005052 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	695a      	ldr	r2, [r3, #20]
 8004ec2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004ec6:	441a      	add	r2, r3
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	69da      	ldr	r2, [r3, #28]
 8004ed0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004ed4:	441a      	add	r2, r3
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	6a1a      	ldr	r2, [r3, #32]
 8004ede:	68bb      	ldr	r3, [r7, #8]
 8004ee0:	691b      	ldr	r3, [r3, #16]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d30b      	bcc.n	8004efe <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	6a1a      	ldr	r2, [r3, #32]
 8004ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ef6:	1ad2      	subs	r2, r2, r3
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	621a      	str	r2, [r3, #32]
 8004efc:	e017      	b.n	8004f2e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d108      	bne.n	8004f18 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8004f06:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8004f0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8004f16:	e00a      	b.n	8004f2e <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8004f18:	68bb      	ldr	r3, [r7, #8]
 8004f1a:	6a1b      	ldr	r3, [r3, #32]
 8004f1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	2200      	movs	r2, #0
 8004f24:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8004f26:	68bb      	ldr	r3, [r7, #8]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	657b      	str	r3, [r7, #84]	; 0x54
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	785b      	ldrb	r3, [r3, #1]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d165      	bne.n	8005008 <HAL_PCD_EP_DB_Transmit+0x748>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f50:	4413      	add	r3, r2
 8004f52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	781b      	ldrb	r3, [r3, #0]
 8004f58:	00da      	lsls	r2, r3, #3
 8004f5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004f62:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f66:	881b      	ldrh	r3, [r3, #0]
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f6e:	b29a      	uxth	r2, r3
 8004f70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f72:	801a      	strh	r2, [r3, #0]
 8004f74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f78:	2b3e      	cmp	r3, #62	; 0x3e
 8004f7a:	d91d      	bls.n	8004fb8 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8004f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f80:	095b      	lsrs	r3, r3, #5
 8004f82:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f88:	f003 031f 	and.w	r3, r3, #31
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d102      	bne.n	8004f96 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8004f90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f92:	3b01      	subs	r3, #1
 8004f94:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f96:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f98:	881b      	ldrh	r3, [r3, #0]
 8004f9a:	b29a      	uxth	r2, r3
 8004f9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	029b      	lsls	r3, r3, #10
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fb0:	b29a      	uxth	r2, r3
 8004fb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fb4:	801a      	strh	r2, [r3, #0]
 8004fb6:	e041      	b.n	800503c <HAL_PCD_EP_DB_Transmit+0x77c>
 8004fb8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10a      	bne.n	8004fd6 <HAL_PCD_EP_DB_Transmit+0x716>
 8004fc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fc2:	881b      	ldrh	r3, [r3, #0]
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fce:	b29a      	uxth	r2, r3
 8004fd0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004fd2:	801a      	strh	r2, [r3, #0]
 8004fd4:	e032      	b.n	800503c <HAL_PCD_EP_DB_Transmit+0x77c>
 8004fd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fda:	085b      	lsrs	r3, r3, #1
 8004fdc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <HAL_PCD_EP_DB_Transmit+0x730>
 8004fea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fec:	3301      	adds	r3, #1
 8004fee:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ff0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ff8:	b29b      	uxth	r3, r3
 8004ffa:	029b      	lsls	r3, r3, #10
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	4313      	orrs	r3, r2
 8005000:	b29a      	uxth	r2, r3
 8005002:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005004:	801a      	strh	r2, [r3, #0]
 8005006:	e019      	b.n	800503c <HAL_PCD_EP_DB_Transmit+0x77c>
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	785b      	ldrb	r3, [r3, #1]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d115      	bne.n	800503c <HAL_PCD_EP_DB_Transmit+0x77c>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005018:	b29b      	uxth	r3, r3
 800501a:	461a      	mov	r2, r3
 800501c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800501e:	4413      	add	r3, r2
 8005020:	657b      	str	r3, [r7, #84]	; 0x54
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	00da      	lsls	r2, r3, #3
 8005028:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800502a:	4413      	add	r3, r2
 800502c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005030:	653b      	str	r3, [r7, #80]	; 0x50
 8005032:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005036:	b29a      	uxth	r2, r3
 8005038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800503a:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6818      	ldr	r0, [r3, #0]
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	6959      	ldr	r1, [r3, #20]
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	895a      	ldrh	r2, [r3, #10]
 8005048:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800504c:	b29b      	uxth	r3, r3
 800504e:	f005 f8db 	bl	800a208 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	461a      	mov	r2, r3
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	881b      	ldrh	r3, [r3, #0]
 8005062:	b29b      	uxth	r3, r3
 8005064:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800506c:	82bb      	strh	r3, [r7, #20]
 800506e:	8abb      	ldrh	r3, [r7, #20]
 8005070:	f083 0310 	eor.w	r3, r3, #16
 8005074:	82bb      	strh	r3, [r7, #20]
 8005076:	8abb      	ldrh	r3, [r7, #20]
 8005078:	f083 0320 	eor.w	r3, r3, #32
 800507c:	82bb      	strh	r3, [r7, #20]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	461a      	mov	r2, r3
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	441a      	add	r2, r3
 800508c:	8abb      	ldrh	r3, [r7, #20]
 800508e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800509a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800509e:	b29b      	uxth	r3, r3
 80050a0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
}
 80050a4:	4618      	mov	r0, r3
 80050a6:	3790      	adds	r7, #144	; 0x90
 80050a8:	46bd      	mov	sp, r7
 80050aa:	bd80      	pop	{r7, pc}

080050ac <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b087      	sub	sp, #28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	607b      	str	r3, [r7, #4]
 80050b6:	460b      	mov	r3, r1
 80050b8:	817b      	strh	r3, [r7, #10]
 80050ba:	4613      	mov	r3, r2
 80050bc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80050be:	897b      	ldrh	r3, [r7, #10]
 80050c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00b      	beq.n	80050e2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80050ca:	897b      	ldrh	r3, [r7, #10]
 80050cc:	f003 0207 	and.w	r2, r3, #7
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	3310      	adds	r3, #16
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	4413      	add	r3, r2
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	e009      	b.n	80050f6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80050e2:	897a      	ldrh	r2, [r7, #10]
 80050e4:	4613      	mov	r3, r2
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	4413      	add	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80050f6:	893b      	ldrh	r3, [r7, #8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d107      	bne.n	800510c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	2200      	movs	r2, #0
 8005100:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	b29a      	uxth	r2, r3
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	80da      	strh	r2, [r3, #6]
 800510a:	e00b      	b.n	8005124 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2201      	movs	r2, #1
 8005110:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	b29a      	uxth	r2, r3
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	0c1b      	lsrs	r3, r3, #16
 800511e:	b29a      	uxth	r2, r3
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	371c      	adds	r7, #28
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8005156:	b29b      	uxth	r3, r3
 8005158:	f043 0301 	orr.w	r3, r3, #1
 800515c:	b29a      	uxth	r2, r3
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800516a:	b29b      	uxth	r3, r3
 800516c:	f043 0302 	orr.w	r3, r3, #2
 8005170:	b29a      	uxth	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
	...

08005188 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d141      	bne.n	800521a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005196:	4b4b      	ldr	r3, [pc, #300]	; (80052c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800519e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051a2:	d131      	bne.n	8005208 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051a4:	4b47      	ldr	r3, [pc, #284]	; (80052c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80051aa:	4a46      	ldr	r2, [pc, #280]	; (80052c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051b4:	4b43      	ldr	r3, [pc, #268]	; (80052c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051bc:	4a41      	ldr	r2, [pc, #260]	; (80052c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051c4:	4b40      	ldr	r3, [pc, #256]	; (80052c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2232      	movs	r2, #50	; 0x32
 80051ca:	fb02 f303 	mul.w	r3, r2, r3
 80051ce:	4a3f      	ldr	r2, [pc, #252]	; (80052cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051d0:	fba2 2303 	umull	r2, r3, r2, r3
 80051d4:	0c9b      	lsrs	r3, r3, #18
 80051d6:	3301      	adds	r3, #1
 80051d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051da:	e002      	b.n	80051e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	3b01      	subs	r3, #1
 80051e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051e2:	4b38      	ldr	r3, [pc, #224]	; (80052c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ee:	d102      	bne.n	80051f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d1f2      	bne.n	80051dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051f6:	4b33      	ldr	r3, [pc, #204]	; (80052c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005202:	d158      	bne.n	80052b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e057      	b.n	80052b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005208:	4b2e      	ldr	r3, [pc, #184]	; (80052c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800520a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800520e:	4a2d      	ldr	r2, [pc, #180]	; (80052c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005214:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005218:	e04d      	b.n	80052b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005220:	d141      	bne.n	80052a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005222:	4b28      	ldr	r3, [pc, #160]	; (80052c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800522a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800522e:	d131      	bne.n	8005294 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005230:	4b24      	ldr	r3, [pc, #144]	; (80052c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005236:	4a23      	ldr	r2, [pc, #140]	; (80052c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800523c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005240:	4b20      	ldr	r3, [pc, #128]	; (80052c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005248:	4a1e      	ldr	r2, [pc, #120]	; (80052c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800524a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800524e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005250:	4b1d      	ldr	r3, [pc, #116]	; (80052c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	2232      	movs	r2, #50	; 0x32
 8005256:	fb02 f303 	mul.w	r3, r2, r3
 800525a:	4a1c      	ldr	r2, [pc, #112]	; (80052cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800525c:	fba2 2303 	umull	r2, r3, r2, r3
 8005260:	0c9b      	lsrs	r3, r3, #18
 8005262:	3301      	adds	r3, #1
 8005264:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005266:	e002      	b.n	800526e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3b01      	subs	r3, #1
 800526c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800526e:	4b15      	ldr	r3, [pc, #84]	; (80052c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005270:	695b      	ldr	r3, [r3, #20]
 8005272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800527a:	d102      	bne.n	8005282 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1f2      	bne.n	8005268 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005282:	4b10      	ldr	r3, [pc, #64]	; (80052c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005284:	695b      	ldr	r3, [r3, #20]
 8005286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800528a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800528e:	d112      	bne.n	80052b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005290:	2303      	movs	r3, #3
 8005292:	e011      	b.n	80052b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005294:	4b0b      	ldr	r3, [pc, #44]	; (80052c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800529a:	4a0a      	ldr	r2, [pc, #40]	; (80052c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800529c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80052a4:	e007      	b.n	80052b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80052a6:	4b07      	ldr	r3, [pc, #28]	; (80052c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052ae:	4a05      	ldr	r2, [pc, #20]	; (80052c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80052b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	40007000 	.word	0x40007000
 80052c8:	20000000 	.word	0x20000000
 80052cc:	431bde83 	.word	0x431bde83

080052d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80052d0:	b480      	push	{r7}
 80052d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80052d4:	4b05      	ldr	r3, [pc, #20]	; (80052ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	4a04      	ldr	r2, [pc, #16]	; (80052ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80052da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052de:	6093      	str	r3, [r2, #8]
}
 80052e0:	bf00      	nop
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	40007000 	.word	0x40007000

080052f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d101      	bne.n	8005302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e2fe      	b.n	8005900 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 0301 	and.w	r3, r3, #1
 800530a:	2b00      	cmp	r3, #0
 800530c:	d075      	beq.n	80053fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800530e:	4b97      	ldr	r3, [pc, #604]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 030c 	and.w	r3, r3, #12
 8005316:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005318:	4b94      	ldr	r3, [pc, #592]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	f003 0303 	and.w	r3, r3, #3
 8005320:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	2b0c      	cmp	r3, #12
 8005326:	d102      	bne.n	800532e <HAL_RCC_OscConfig+0x3e>
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	2b03      	cmp	r3, #3
 800532c:	d002      	beq.n	8005334 <HAL_RCC_OscConfig+0x44>
 800532e:	69bb      	ldr	r3, [r7, #24]
 8005330:	2b08      	cmp	r3, #8
 8005332:	d10b      	bne.n	800534c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005334:	4b8d      	ldr	r3, [pc, #564]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d05b      	beq.n	80053f8 <HAL_RCC_OscConfig+0x108>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d157      	bne.n	80053f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e2d9      	b.n	8005900 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005354:	d106      	bne.n	8005364 <HAL_RCC_OscConfig+0x74>
 8005356:	4b85      	ldr	r3, [pc, #532]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a84      	ldr	r2, [pc, #528]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 800535c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	e01d      	b.n	80053a0 <HAL_RCC_OscConfig+0xb0>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800536c:	d10c      	bne.n	8005388 <HAL_RCC_OscConfig+0x98>
 800536e:	4b7f      	ldr	r3, [pc, #508]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a7e      	ldr	r2, [pc, #504]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 8005374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	4b7c      	ldr	r3, [pc, #496]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a7b      	ldr	r2, [pc, #492]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 8005380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005384:	6013      	str	r3, [r2, #0]
 8005386:	e00b      	b.n	80053a0 <HAL_RCC_OscConfig+0xb0>
 8005388:	4b78      	ldr	r3, [pc, #480]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a77      	ldr	r2, [pc, #476]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 800538e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005392:	6013      	str	r3, [r2, #0]
 8005394:	4b75      	ldr	r3, [pc, #468]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a74      	ldr	r2, [pc, #464]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 800539a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800539e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d013      	beq.n	80053d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a8:	f7fb ffe6 	bl	8001378 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053b0:	f7fb ffe2 	bl	8001378 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b64      	cmp	r3, #100	; 0x64
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e29e      	b.n	8005900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053c2:	4b6a      	ldr	r3, [pc, #424]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d0f0      	beq.n	80053b0 <HAL_RCC_OscConfig+0xc0>
 80053ce:	e014      	b.n	80053fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053d0:	f7fb ffd2 	bl	8001378 <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053d6:	e008      	b.n	80053ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053d8:	f7fb ffce 	bl	8001378 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b64      	cmp	r3, #100	; 0x64
 80053e4:	d901      	bls.n	80053ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e28a      	b.n	8005900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053ea:	4b60      	ldr	r3, [pc, #384]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1f0      	bne.n	80053d8 <HAL_RCC_OscConfig+0xe8>
 80053f6:	e000      	b.n	80053fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d075      	beq.n	80054f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005406:	4b59      	ldr	r3, [pc, #356]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 030c 	and.w	r3, r3, #12
 800540e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005410:	4b56      	ldr	r3, [pc, #344]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	f003 0303 	and.w	r3, r3, #3
 8005418:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	2b0c      	cmp	r3, #12
 800541e:	d102      	bne.n	8005426 <HAL_RCC_OscConfig+0x136>
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	2b02      	cmp	r3, #2
 8005424:	d002      	beq.n	800542c <HAL_RCC_OscConfig+0x13c>
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	2b04      	cmp	r3, #4
 800542a:	d11f      	bne.n	800546c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800542c:	4b4f      	ldr	r3, [pc, #316]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005434:	2b00      	cmp	r3, #0
 8005436:	d005      	beq.n	8005444 <HAL_RCC_OscConfig+0x154>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d101      	bne.n	8005444 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005440:	2301      	movs	r3, #1
 8005442:	e25d      	b.n	8005900 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005444:	4b49      	ldr	r3, [pc, #292]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	061b      	lsls	r3, r3, #24
 8005452:	4946      	ldr	r1, [pc, #280]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 8005454:	4313      	orrs	r3, r2
 8005456:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005458:	4b45      	ldr	r3, [pc, #276]	; (8005570 <HAL_RCC_OscConfig+0x280>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4618      	mov	r0, r3
 800545e:	f7fb ff3f 	bl	80012e0 <HAL_InitTick>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d043      	beq.n	80054f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e249      	b.n	8005900 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d023      	beq.n	80054bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005474:	4b3d      	ldr	r3, [pc, #244]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a3c      	ldr	r2, [pc, #240]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 800547a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800547e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005480:	f7fb ff7a 	bl	8001378 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005486:	e008      	b.n	800549a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005488:	f7fb ff76 	bl	8001378 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	2b02      	cmp	r3, #2
 8005494:	d901      	bls.n	800549a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005496:	2303      	movs	r3, #3
 8005498:	e232      	b.n	8005900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800549a:	4b34      	ldr	r3, [pc, #208]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d0f0      	beq.n	8005488 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a6:	4b31      	ldr	r3, [pc, #196]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	691b      	ldr	r3, [r3, #16]
 80054b2:	061b      	lsls	r3, r3, #24
 80054b4:	492d      	ldr	r1, [pc, #180]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	604b      	str	r3, [r1, #4]
 80054ba:	e01a      	b.n	80054f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80054bc:	4b2b      	ldr	r3, [pc, #172]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a2a      	ldr	r2, [pc, #168]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 80054c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054c8:	f7fb ff56 	bl	8001378 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054d0:	f7fb ff52 	bl	8001378 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e20e      	b.n	8005900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054e2:	4b22      	ldr	r3, [pc, #136]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1f0      	bne.n	80054d0 <HAL_RCC_OscConfig+0x1e0>
 80054ee:	e000      	b.n	80054f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0308 	and.w	r3, r3, #8
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d041      	beq.n	8005582 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d01c      	beq.n	8005540 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005506:	4b19      	ldr	r3, [pc, #100]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 8005508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800550c:	4a17      	ldr	r2, [pc, #92]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 800550e:	f043 0301 	orr.w	r3, r3, #1
 8005512:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005516:	f7fb ff2f 	bl	8001378 <HAL_GetTick>
 800551a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800551c:	e008      	b.n	8005530 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800551e:	f7fb ff2b 	bl	8001378 <HAL_GetTick>
 8005522:	4602      	mov	r2, r0
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	1ad3      	subs	r3, r2, r3
 8005528:	2b02      	cmp	r3, #2
 800552a:	d901      	bls.n	8005530 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800552c:	2303      	movs	r3, #3
 800552e:	e1e7      	b.n	8005900 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005530:	4b0e      	ldr	r3, [pc, #56]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 8005532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d0ef      	beq.n	800551e <HAL_RCC_OscConfig+0x22e>
 800553e:	e020      	b.n	8005582 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005540:	4b0a      	ldr	r3, [pc, #40]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 8005542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005546:	4a09      	ldr	r2, [pc, #36]	; (800556c <HAL_RCC_OscConfig+0x27c>)
 8005548:	f023 0301 	bic.w	r3, r3, #1
 800554c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005550:	f7fb ff12 	bl	8001378 <HAL_GetTick>
 8005554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005556:	e00d      	b.n	8005574 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005558:	f7fb ff0e 	bl	8001378 <HAL_GetTick>
 800555c:	4602      	mov	r2, r0
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	1ad3      	subs	r3, r2, r3
 8005562:	2b02      	cmp	r3, #2
 8005564:	d906      	bls.n	8005574 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e1ca      	b.n	8005900 <HAL_RCC_OscConfig+0x610>
 800556a:	bf00      	nop
 800556c:	40021000 	.word	0x40021000
 8005570:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005574:	4b8c      	ldr	r3, [pc, #560]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 8005576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1ea      	bne.n	8005558 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0304 	and.w	r3, r3, #4
 800558a:	2b00      	cmp	r3, #0
 800558c:	f000 80a6 	beq.w	80056dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005590:	2300      	movs	r3, #0
 8005592:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005594:	4b84      	ldr	r3, [pc, #528]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 8005596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <HAL_RCC_OscConfig+0x2b4>
 80055a0:	2301      	movs	r3, #1
 80055a2:	e000      	b.n	80055a6 <HAL_RCC_OscConfig+0x2b6>
 80055a4:	2300      	movs	r3, #0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00d      	beq.n	80055c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055aa:	4b7f      	ldr	r3, [pc, #508]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 80055ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ae:	4a7e      	ldr	r2, [pc, #504]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 80055b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055b4:	6593      	str	r3, [r2, #88]	; 0x58
 80055b6:	4b7c      	ldr	r3, [pc, #496]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 80055b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80055c2:	2301      	movs	r3, #1
 80055c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055c6:	4b79      	ldr	r3, [pc, #484]	; (80057ac <HAL_RCC_OscConfig+0x4bc>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d118      	bne.n	8005604 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055d2:	4b76      	ldr	r3, [pc, #472]	; (80057ac <HAL_RCC_OscConfig+0x4bc>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a75      	ldr	r2, [pc, #468]	; (80057ac <HAL_RCC_OscConfig+0x4bc>)
 80055d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055de:	f7fb fecb 	bl	8001378 <HAL_GetTick>
 80055e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055e4:	e008      	b.n	80055f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055e6:	f7fb fec7 	bl	8001378 <HAL_GetTick>
 80055ea:	4602      	mov	r2, r0
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	1ad3      	subs	r3, r2, r3
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d901      	bls.n	80055f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e183      	b.n	8005900 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055f8:	4b6c      	ldr	r3, [pc, #432]	; (80057ac <HAL_RCC_OscConfig+0x4bc>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0f0      	beq.n	80055e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d108      	bne.n	800561e <HAL_RCC_OscConfig+0x32e>
 800560c:	4b66      	ldr	r3, [pc, #408]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 800560e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005612:	4a65      	ldr	r2, [pc, #404]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 8005614:	f043 0301 	orr.w	r3, r3, #1
 8005618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800561c:	e024      	b.n	8005668 <HAL_RCC_OscConfig+0x378>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	2b05      	cmp	r3, #5
 8005624:	d110      	bne.n	8005648 <HAL_RCC_OscConfig+0x358>
 8005626:	4b60      	ldr	r3, [pc, #384]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 8005628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562c:	4a5e      	ldr	r2, [pc, #376]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 800562e:	f043 0304 	orr.w	r3, r3, #4
 8005632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005636:	4b5c      	ldr	r3, [pc, #368]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 8005638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800563c:	4a5a      	ldr	r2, [pc, #360]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 800563e:	f043 0301 	orr.w	r3, r3, #1
 8005642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005646:	e00f      	b.n	8005668 <HAL_RCC_OscConfig+0x378>
 8005648:	4b57      	ldr	r3, [pc, #348]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 800564a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800564e:	4a56      	ldr	r2, [pc, #344]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 8005650:	f023 0301 	bic.w	r3, r3, #1
 8005654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005658:	4b53      	ldr	r3, [pc, #332]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 800565a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565e:	4a52      	ldr	r2, [pc, #328]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 8005660:	f023 0304 	bic.w	r3, r3, #4
 8005664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d016      	beq.n	800569e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005670:	f7fb fe82 	bl	8001378 <HAL_GetTick>
 8005674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005676:	e00a      	b.n	800568e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005678:	f7fb fe7e 	bl	8001378 <HAL_GetTick>
 800567c:	4602      	mov	r2, r0
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	1ad3      	subs	r3, r2, r3
 8005682:	f241 3288 	movw	r2, #5000	; 0x1388
 8005686:	4293      	cmp	r3, r2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e138      	b.n	8005900 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800568e:	4b46      	ldr	r3, [pc, #280]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 8005690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005694:	f003 0302 	and.w	r3, r3, #2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0ed      	beq.n	8005678 <HAL_RCC_OscConfig+0x388>
 800569c:	e015      	b.n	80056ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569e:	f7fb fe6b 	bl	8001378 <HAL_GetTick>
 80056a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056a4:	e00a      	b.n	80056bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056a6:	f7fb fe67 	bl	8001378 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d901      	bls.n	80056bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80056b8:	2303      	movs	r3, #3
 80056ba:	e121      	b.n	8005900 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80056bc:	4b3a      	ldr	r3, [pc, #232]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 80056be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1ed      	bne.n	80056a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056ca:	7ffb      	ldrb	r3, [r7, #31]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d105      	bne.n	80056dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056d0:	4b35      	ldr	r3, [pc, #212]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 80056d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d4:	4a34      	ldr	r2, [pc, #208]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 80056d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 0320 	and.w	r3, r3, #32
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d03c      	beq.n	8005762 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d01c      	beq.n	800572a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056f0:	4b2d      	ldr	r3, [pc, #180]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 80056f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80056f6:	4a2c      	ldr	r2, [pc, #176]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 80056f8:	f043 0301 	orr.w	r3, r3, #1
 80056fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005700:	f7fb fe3a 	bl	8001378 <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005706:	e008      	b.n	800571a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005708:	f7fb fe36 	bl	8001378 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	2b02      	cmp	r3, #2
 8005714:	d901      	bls.n	800571a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e0f2      	b.n	8005900 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800571a:	4b23      	ldr	r3, [pc, #140]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 800571c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005720:	f003 0302 	and.w	r3, r3, #2
 8005724:	2b00      	cmp	r3, #0
 8005726:	d0ef      	beq.n	8005708 <HAL_RCC_OscConfig+0x418>
 8005728:	e01b      	b.n	8005762 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800572a:	4b1f      	ldr	r3, [pc, #124]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 800572c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005730:	4a1d      	ldr	r2, [pc, #116]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 8005732:	f023 0301 	bic.w	r3, r3, #1
 8005736:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800573a:	f7fb fe1d 	bl	8001378 <HAL_GetTick>
 800573e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005740:	e008      	b.n	8005754 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005742:	f7fb fe19 	bl	8001378 <HAL_GetTick>
 8005746:	4602      	mov	r2, r0
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	1ad3      	subs	r3, r2, r3
 800574c:	2b02      	cmp	r3, #2
 800574e:	d901      	bls.n	8005754 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005750:	2303      	movs	r3, #3
 8005752:	e0d5      	b.n	8005900 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005754:	4b14      	ldr	r3, [pc, #80]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 8005756:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800575a:	f003 0302 	and.w	r3, r3, #2
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1ef      	bne.n	8005742 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	69db      	ldr	r3, [r3, #28]
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 80c9 	beq.w	80058fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800576c:	4b0e      	ldr	r3, [pc, #56]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f003 030c 	and.w	r3, r3, #12
 8005774:	2b0c      	cmp	r3, #12
 8005776:	f000 8083 	beq.w	8005880 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	69db      	ldr	r3, [r3, #28]
 800577e:	2b02      	cmp	r3, #2
 8005780:	d15e      	bne.n	8005840 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005782:	4b09      	ldr	r3, [pc, #36]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a08      	ldr	r2, [pc, #32]	; (80057a8 <HAL_RCC_OscConfig+0x4b8>)
 8005788:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800578c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800578e:	f7fb fdf3 	bl	8001378 <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005794:	e00c      	b.n	80057b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005796:	f7fb fdef 	bl	8001378 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d905      	bls.n	80057b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e0ab      	b.n	8005900 <HAL_RCC_OscConfig+0x610>
 80057a8:	40021000 	.word	0x40021000
 80057ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057b0:	4b55      	ldr	r3, [pc, #340]	; (8005908 <HAL_RCC_OscConfig+0x618>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1ec      	bne.n	8005796 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057bc:	4b52      	ldr	r3, [pc, #328]	; (8005908 <HAL_RCC_OscConfig+0x618>)
 80057be:	68da      	ldr	r2, [r3, #12]
 80057c0:	4b52      	ldr	r3, [pc, #328]	; (800590c <HAL_RCC_OscConfig+0x61c>)
 80057c2:	4013      	ands	r3, r2
 80057c4:	687a      	ldr	r2, [r7, #4]
 80057c6:	6a11      	ldr	r1, [r2, #32]
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057cc:	3a01      	subs	r2, #1
 80057ce:	0112      	lsls	r2, r2, #4
 80057d0:	4311      	orrs	r1, r2
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80057d6:	0212      	lsls	r2, r2, #8
 80057d8:	4311      	orrs	r1, r2
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80057de:	0852      	lsrs	r2, r2, #1
 80057e0:	3a01      	subs	r2, #1
 80057e2:	0552      	lsls	r2, r2, #21
 80057e4:	4311      	orrs	r1, r2
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80057ea:	0852      	lsrs	r2, r2, #1
 80057ec:	3a01      	subs	r2, #1
 80057ee:	0652      	lsls	r2, r2, #25
 80057f0:	4311      	orrs	r1, r2
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80057f6:	06d2      	lsls	r2, r2, #27
 80057f8:	430a      	orrs	r2, r1
 80057fa:	4943      	ldr	r1, [pc, #268]	; (8005908 <HAL_RCC_OscConfig+0x618>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005800:	4b41      	ldr	r3, [pc, #260]	; (8005908 <HAL_RCC_OscConfig+0x618>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a40      	ldr	r2, [pc, #256]	; (8005908 <HAL_RCC_OscConfig+0x618>)
 8005806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800580a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800580c:	4b3e      	ldr	r3, [pc, #248]	; (8005908 <HAL_RCC_OscConfig+0x618>)
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	4a3d      	ldr	r2, [pc, #244]	; (8005908 <HAL_RCC_OscConfig+0x618>)
 8005812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005816:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005818:	f7fb fdae 	bl	8001378 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005820:	f7fb fdaa 	bl	8001378 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b02      	cmp	r3, #2
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e066      	b.n	8005900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005832:	4b35      	ldr	r3, [pc, #212]	; (8005908 <HAL_RCC_OscConfig+0x618>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0f0      	beq.n	8005820 <HAL_RCC_OscConfig+0x530>
 800583e:	e05e      	b.n	80058fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005840:	4b31      	ldr	r3, [pc, #196]	; (8005908 <HAL_RCC_OscConfig+0x618>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a30      	ldr	r2, [pc, #192]	; (8005908 <HAL_RCC_OscConfig+0x618>)
 8005846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800584a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584c:	f7fb fd94 	bl	8001378 <HAL_GetTick>
 8005850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005852:	e008      	b.n	8005866 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005854:	f7fb fd90 	bl	8001378 <HAL_GetTick>
 8005858:	4602      	mov	r2, r0
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	1ad3      	subs	r3, r2, r3
 800585e:	2b02      	cmp	r3, #2
 8005860:	d901      	bls.n	8005866 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005862:	2303      	movs	r3, #3
 8005864:	e04c      	b.n	8005900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005866:	4b28      	ldr	r3, [pc, #160]	; (8005908 <HAL_RCC_OscConfig+0x618>)
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1f0      	bne.n	8005854 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005872:	4b25      	ldr	r3, [pc, #148]	; (8005908 <HAL_RCC_OscConfig+0x618>)
 8005874:	68da      	ldr	r2, [r3, #12]
 8005876:	4924      	ldr	r1, [pc, #144]	; (8005908 <HAL_RCC_OscConfig+0x618>)
 8005878:	4b25      	ldr	r3, [pc, #148]	; (8005910 <HAL_RCC_OscConfig+0x620>)
 800587a:	4013      	ands	r3, r2
 800587c:	60cb      	str	r3, [r1, #12]
 800587e:	e03e      	b.n	80058fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	69db      	ldr	r3, [r3, #28]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d101      	bne.n	800588c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e039      	b.n	8005900 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800588c:	4b1e      	ldr	r3, [pc, #120]	; (8005908 <HAL_RCC_OscConfig+0x618>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f003 0203 	and.w	r2, r3, #3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a1b      	ldr	r3, [r3, #32]
 800589c:	429a      	cmp	r2, r3
 800589e:	d12c      	bne.n	80058fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	3b01      	subs	r3, #1
 80058ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d123      	bne.n	80058fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058be:	429a      	cmp	r2, r3
 80058c0:	d11b      	bne.n	80058fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d113      	bne.n	80058fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058dc:	085b      	lsrs	r3, r3, #1
 80058de:	3b01      	subs	r3, #1
 80058e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d109      	bne.n	80058fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f0:	085b      	lsrs	r3, r3, #1
 80058f2:	3b01      	subs	r3, #1
 80058f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d001      	beq.n	80058fe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e000      	b.n	8005900 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80058fe:	2300      	movs	r3, #0
}
 8005900:	4618      	mov	r0, r3
 8005902:	3720      	adds	r7, #32
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40021000 	.word	0x40021000
 800590c:	019f800c 	.word	0x019f800c
 8005910:	feeefffc 	.word	0xfeeefffc

08005914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b086      	sub	sp, #24
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800591e:	2300      	movs	r3, #0
 8005920:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d101      	bne.n	800592c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e11e      	b.n	8005b6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800592c:	4b91      	ldr	r3, [pc, #580]	; (8005b74 <HAL_RCC_ClockConfig+0x260>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 030f 	and.w	r3, r3, #15
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	429a      	cmp	r2, r3
 8005938:	d910      	bls.n	800595c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800593a:	4b8e      	ldr	r3, [pc, #568]	; (8005b74 <HAL_RCC_ClockConfig+0x260>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f023 020f 	bic.w	r2, r3, #15
 8005942:	498c      	ldr	r1, [pc, #560]	; (8005b74 <HAL_RCC_ClockConfig+0x260>)
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	4313      	orrs	r3, r2
 8005948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800594a:	4b8a      	ldr	r3, [pc, #552]	; (8005b74 <HAL_RCC_ClockConfig+0x260>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	429a      	cmp	r2, r3
 8005956:	d001      	beq.n	800595c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e106      	b.n	8005b6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	2b00      	cmp	r3, #0
 8005966:	d073      	beq.n	8005a50 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	2b03      	cmp	r3, #3
 800596e:	d129      	bne.n	80059c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005970:	4b81      	ldr	r3, [pc, #516]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800597c:	2301      	movs	r3, #1
 800597e:	e0f4      	b.n	8005b6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005980:	f000 f99e 	bl	8005cc0 <RCC_GetSysClockFreqFromPLLSource>
 8005984:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	4a7c      	ldr	r2, [pc, #496]	; (8005b7c <HAL_RCC_ClockConfig+0x268>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d93f      	bls.n	8005a0e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800598e:	4b7a      	ldr	r3, [pc, #488]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d009      	beq.n	80059ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d033      	beq.n	8005a0e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d12f      	bne.n	8005a0e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80059ae:	4b72      	ldr	r3, [pc, #456]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059b6:	4a70      	ldr	r2, [pc, #448]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 80059b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80059be:	2380      	movs	r3, #128	; 0x80
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	e024      	b.n	8005a0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	685b      	ldr	r3, [r3, #4]
 80059c8:	2b02      	cmp	r3, #2
 80059ca:	d107      	bne.n	80059dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059cc:	4b6a      	ldr	r3, [pc, #424]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d109      	bne.n	80059ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e0c6      	b.n	8005b6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059dc:	4b66      	ldr	r3, [pc, #408]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e0be      	b.n	8005b6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80059ec:	f000 f8ce 	bl	8005b8c <HAL_RCC_GetSysClockFreq>
 80059f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	4a61      	ldr	r2, [pc, #388]	; (8005b7c <HAL_RCC_ClockConfig+0x268>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d909      	bls.n	8005a0e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80059fa:	4b5f      	ldr	r3, [pc, #380]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a02:	4a5d      	ldr	r2, [pc, #372]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 8005a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005a0a:	2380      	movs	r3, #128	; 0x80
 8005a0c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a0e:	4b5a      	ldr	r3, [pc, #360]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f023 0203 	bic.w	r2, r3, #3
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	4957      	ldr	r1, [pc, #348]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a20:	f7fb fcaa 	bl	8001378 <HAL_GetTick>
 8005a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a26:	e00a      	b.n	8005a3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a28:	f7fb fca6 	bl	8001378 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d901      	bls.n	8005a3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	e095      	b.n	8005b6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a3e:	4b4e      	ldr	r3, [pc, #312]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	f003 020c 	and.w	r2, r3, #12
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	009b      	lsls	r3, r3, #2
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d1eb      	bne.n	8005a28 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d023      	beq.n	8005aa4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d005      	beq.n	8005a74 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a68:	4b43      	ldr	r3, [pc, #268]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 8005a6a:	689b      	ldr	r3, [r3, #8]
 8005a6c:	4a42      	ldr	r2, [pc, #264]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 8005a6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005a72:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005a80:	4b3d      	ldr	r3, [pc, #244]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005a88:	4a3b      	ldr	r2, [pc, #236]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 8005a8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005a8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a90:	4b39      	ldr	r3, [pc, #228]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	4936      	ldr	r1, [pc, #216]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	608b      	str	r3, [r1, #8]
 8005aa2:	e008      	b.n	8005ab6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	2b80      	cmp	r3, #128	; 0x80
 8005aa8:	d105      	bne.n	8005ab6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005aaa:	4b33      	ldr	r3, [pc, #204]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	4a32      	ldr	r2, [pc, #200]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 8005ab0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ab4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ab6:	4b2f      	ldr	r3, [pc, #188]	; (8005b74 <HAL_RCC_ClockConfig+0x260>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d21d      	bcs.n	8005b00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ac4:	4b2b      	ldr	r3, [pc, #172]	; (8005b74 <HAL_RCC_ClockConfig+0x260>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f023 020f 	bic.w	r2, r3, #15
 8005acc:	4929      	ldr	r1, [pc, #164]	; (8005b74 <HAL_RCC_ClockConfig+0x260>)
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005ad4:	f7fb fc50 	bl	8001378 <HAL_GetTick>
 8005ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ada:	e00a      	b.n	8005af2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005adc:	f7fb fc4c 	bl	8001378 <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d901      	bls.n	8005af2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	e03b      	b.n	8005b6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005af2:	4b20      	ldr	r3, [pc, #128]	; (8005b74 <HAL_RCC_ClockConfig+0x260>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 030f 	and.w	r3, r3, #15
 8005afa:	683a      	ldr	r2, [r7, #0]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d1ed      	bne.n	8005adc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0304 	and.w	r3, r3, #4
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d008      	beq.n	8005b1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b0c:	4b1a      	ldr	r3, [pc, #104]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	4917      	ldr	r1, [pc, #92]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d009      	beq.n	8005b3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b2a:	4b13      	ldr	r3, [pc, #76]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	00db      	lsls	r3, r3, #3
 8005b38:	490f      	ldr	r1, [pc, #60]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b3e:	f000 f825 	bl	8005b8c <HAL_RCC_GetSysClockFreq>
 8005b42:	4602      	mov	r2, r0
 8005b44:	4b0c      	ldr	r3, [pc, #48]	; (8005b78 <HAL_RCC_ClockConfig+0x264>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	091b      	lsrs	r3, r3, #4
 8005b4a:	f003 030f 	and.w	r3, r3, #15
 8005b4e:	490c      	ldr	r1, [pc, #48]	; (8005b80 <HAL_RCC_ClockConfig+0x26c>)
 8005b50:	5ccb      	ldrb	r3, [r1, r3]
 8005b52:	f003 031f 	and.w	r3, r3, #31
 8005b56:	fa22 f303 	lsr.w	r3, r2, r3
 8005b5a:	4a0a      	ldr	r2, [pc, #40]	; (8005b84 <HAL_RCC_ClockConfig+0x270>)
 8005b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b5e:	4b0a      	ldr	r3, [pc, #40]	; (8005b88 <HAL_RCC_ClockConfig+0x274>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f7fb fbbc 	bl	80012e0 <HAL_InitTick>
 8005b68:	4603      	mov	r3, r0
}
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	3718      	adds	r7, #24
 8005b6e:	46bd      	mov	sp, r7
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	40022000 	.word	0x40022000
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	04c4b400 	.word	0x04c4b400
 8005b80:	0800c68c 	.word	0x0800c68c
 8005b84:	20000000 	.word	0x20000000
 8005b88:	20000004 	.word	0x20000004

08005b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b8c:	b480      	push	{r7}
 8005b8e:	b087      	sub	sp, #28
 8005b90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005b92:	4b2c      	ldr	r3, [pc, #176]	; (8005c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	f003 030c 	and.w	r3, r3, #12
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d102      	bne.n	8005ba4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b9e:	4b2a      	ldr	r3, [pc, #168]	; (8005c48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ba0:	613b      	str	r3, [r7, #16]
 8005ba2:	e047      	b.n	8005c34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005ba4:	4b27      	ldr	r3, [pc, #156]	; (8005c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	f003 030c 	and.w	r3, r3, #12
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	d102      	bne.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005bb0:	4b26      	ldr	r3, [pc, #152]	; (8005c4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005bb2:	613b      	str	r3, [r7, #16]
 8005bb4:	e03e      	b.n	8005c34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005bb6:	4b23      	ldr	r3, [pc, #140]	; (8005c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bb8:	689b      	ldr	r3, [r3, #8]
 8005bba:	f003 030c 	and.w	r3, r3, #12
 8005bbe:	2b0c      	cmp	r3, #12
 8005bc0:	d136      	bne.n	8005c30 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005bc2:	4b20      	ldr	r3, [pc, #128]	; (8005c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	f003 0303 	and.w	r3, r3, #3
 8005bca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bcc:	4b1d      	ldr	r3, [pc, #116]	; (8005c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	091b      	lsrs	r3, r3, #4
 8005bd2:	f003 030f 	and.w	r3, r3, #15
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	d10c      	bne.n	8005bfa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005be0:	4a1a      	ldr	r2, [pc, #104]	; (8005c4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be8:	4a16      	ldr	r2, [pc, #88]	; (8005c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bea:	68d2      	ldr	r2, [r2, #12]
 8005bec:	0a12      	lsrs	r2, r2, #8
 8005bee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005bf2:	fb02 f303 	mul.w	r3, r2, r3
 8005bf6:	617b      	str	r3, [r7, #20]
      break;
 8005bf8:	e00c      	b.n	8005c14 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bfa:	4a13      	ldr	r2, [pc, #76]	; (8005c48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c02:	4a10      	ldr	r2, [pc, #64]	; (8005c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c04:	68d2      	ldr	r2, [r2, #12]
 8005c06:	0a12      	lsrs	r2, r2, #8
 8005c08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c0c:	fb02 f303 	mul.w	r3, r2, r3
 8005c10:	617b      	str	r3, [r7, #20]
      break;
 8005c12:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c14:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	0e5b      	lsrs	r3, r3, #25
 8005c1a:	f003 0303 	and.w	r3, r3, #3
 8005c1e:	3301      	adds	r3, #1
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005c24:	697a      	ldr	r2, [r7, #20]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2c:	613b      	str	r3, [r7, #16]
 8005c2e:	e001      	b.n	8005c34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005c34:	693b      	ldr	r3, [r7, #16]
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	40021000 	.word	0x40021000
 8005c48:	00f42400 	.word	0x00f42400
 8005c4c:	016e3600 	.word	0x016e3600

08005c50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c54:	4b03      	ldr	r3, [pc, #12]	; (8005c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c56:	681b      	ldr	r3, [r3, #0]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	20000000 	.word	0x20000000

08005c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c6c:	f7ff fff0 	bl	8005c50 <HAL_RCC_GetHCLKFreq>
 8005c70:	4602      	mov	r2, r0
 8005c72:	4b06      	ldr	r3, [pc, #24]	; (8005c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	0a1b      	lsrs	r3, r3, #8
 8005c78:	f003 0307 	and.w	r3, r3, #7
 8005c7c:	4904      	ldr	r1, [pc, #16]	; (8005c90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c7e:	5ccb      	ldrb	r3, [r1, r3]
 8005c80:	f003 031f 	and.w	r3, r3, #31
 8005c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40021000 	.word	0x40021000
 8005c90:	0800c69c 	.word	0x0800c69c

08005c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c98:	f7ff ffda 	bl	8005c50 <HAL_RCC_GetHCLKFreq>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	4b06      	ldr	r3, [pc, #24]	; (8005cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	0adb      	lsrs	r3, r3, #11
 8005ca4:	f003 0307 	and.w	r3, r3, #7
 8005ca8:	4904      	ldr	r1, [pc, #16]	; (8005cbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8005caa:	5ccb      	ldrb	r3, [r1, r3]
 8005cac:	f003 031f 	and.w	r3, r3, #31
 8005cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	bd80      	pop	{r7, pc}
 8005cb8:	40021000 	.word	0x40021000
 8005cbc:	0800c69c 	.word	0x0800c69c

08005cc0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b087      	sub	sp, #28
 8005cc4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cc6:	4b1e      	ldr	r3, [pc, #120]	; (8005d40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	f003 0303 	and.w	r3, r3, #3
 8005cce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005cd0:	4b1b      	ldr	r3, [pc, #108]	; (8005d40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	091b      	lsrs	r3, r3, #4
 8005cd6:	f003 030f 	and.w	r3, r3, #15
 8005cda:	3301      	adds	r3, #1
 8005cdc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d10c      	bne.n	8005cfe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ce4:	4a17      	ldr	r2, [pc, #92]	; (8005d44 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cec:	4a14      	ldr	r2, [pc, #80]	; (8005d40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cee:	68d2      	ldr	r2, [r2, #12]
 8005cf0:	0a12      	lsrs	r2, r2, #8
 8005cf2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005cf6:	fb02 f303 	mul.w	r3, r2, r3
 8005cfa:	617b      	str	r3, [r7, #20]
    break;
 8005cfc:	e00c      	b.n	8005d18 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cfe:	4a12      	ldr	r2, [pc, #72]	; (8005d48 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d06:	4a0e      	ldr	r2, [pc, #56]	; (8005d40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d08:	68d2      	ldr	r2, [r2, #12]
 8005d0a:	0a12      	lsrs	r2, r2, #8
 8005d0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d10:	fb02 f303 	mul.w	r3, r2, r3
 8005d14:	617b      	str	r3, [r7, #20]
    break;
 8005d16:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d18:	4b09      	ldr	r3, [pc, #36]	; (8005d40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	0e5b      	lsrs	r3, r3, #25
 8005d1e:	f003 0303 	and.w	r3, r3, #3
 8005d22:	3301      	adds	r3, #1
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d30:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005d32:	687b      	ldr	r3, [r7, #4]
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	371c      	adds	r7, #28
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	40021000 	.word	0x40021000
 8005d44:	016e3600 	.word	0x016e3600
 8005d48:	00f42400 	.word	0x00f42400

08005d4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b086      	sub	sp, #24
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d54:	2300      	movs	r3, #0
 8005d56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d58:	2300      	movs	r3, #0
 8005d5a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f000 8098 	beq.w	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d6e:	4b43      	ldr	r3, [pc, #268]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10d      	bne.n	8005d96 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d7a:	4b40      	ldr	r3, [pc, #256]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7e:	4a3f      	ldr	r2, [pc, #252]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d84:	6593      	str	r3, [r2, #88]	; 0x58
 8005d86:	4b3d      	ldr	r3, [pc, #244]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d8e:	60bb      	str	r3, [r7, #8]
 8005d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d92:	2301      	movs	r3, #1
 8005d94:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d96:	4b3a      	ldr	r3, [pc, #232]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a39      	ldr	r2, [pc, #228]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005da0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005da2:	f7fb fae9 	bl	8001378 <HAL_GetTick>
 8005da6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005da8:	e009      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005daa:	f7fb fae5 	bl	8001378 <HAL_GetTick>
 8005dae:	4602      	mov	r2, r0
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	1ad3      	subs	r3, r2, r3
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d902      	bls.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	74fb      	strb	r3, [r7, #19]
        break;
 8005dbc:	e005      	b.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dbe:	4b30      	ldr	r3, [pc, #192]	; (8005e80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d0ef      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005dca:	7cfb      	ldrb	r3, [r7, #19]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d159      	bne.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005dd0:	4b2a      	ldr	r3, [pc, #168]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dda:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d01e      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d019      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005dec:	4b23      	ldr	r3, [pc, #140]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005df6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005df8:	4b20      	ldr	r3, [pc, #128]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dfe:	4a1f      	ldr	r2, [pc, #124]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e08:	4b1c      	ldr	r3, [pc, #112]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e0e:	4a1b      	ldr	r2, [pc, #108]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e18:	4a18      	ldr	r2, [pc, #96]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d016      	beq.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e2a:	f7fb faa5 	bl	8001378 <HAL_GetTick>
 8005e2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e30:	e00b      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e32:	f7fb faa1 	bl	8001378 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d902      	bls.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	74fb      	strb	r3, [r7, #19]
            break;
 8005e48:	e006      	b.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e4a:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0ec      	beq.n	8005e32 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005e58:	7cfb      	ldrb	r3, [r7, #19]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10b      	bne.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e5e:	4b07      	ldr	r3, [pc, #28]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e6c:	4903      	ldr	r1, [pc, #12]	; (8005e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005e74:	e008      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e76:	7cfb      	ldrb	r3, [r7, #19]
 8005e78:	74bb      	strb	r3, [r7, #18]
 8005e7a:	e005      	b.n	8005e88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005e7c:	40021000 	.word	0x40021000
 8005e80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e84:	7cfb      	ldrb	r3, [r7, #19]
 8005e86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e88:	7c7b      	ldrb	r3, [r7, #17]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d105      	bne.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e8e:	4ba7      	ldr	r3, [pc, #668]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e92:	4aa6      	ldr	r2, [pc, #664]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00a      	beq.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ea6:	4ba1      	ldr	r3, [pc, #644]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eac:	f023 0203 	bic.w	r2, r3, #3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	499d      	ldr	r1, [pc, #628]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0302 	and.w	r3, r3, #2
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00a      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ec8:	4b98      	ldr	r3, [pc, #608]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ece:	f023 020c 	bic.w	r2, r3, #12
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	4995      	ldr	r1, [pc, #596]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0304 	and.w	r3, r3, #4
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d00a      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005eea:	4b90      	ldr	r3, [pc, #576]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ef0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	498c      	ldr	r1, [pc, #560]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 0308 	and.w	r3, r3, #8
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f0c:	4b87      	ldr	r3, [pc, #540]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	4984      	ldr	r1, [pc, #528]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 0310 	and.w	r3, r3, #16
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f2e:	4b7f      	ldr	r3, [pc, #508]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	695b      	ldr	r3, [r3, #20]
 8005f3c:	497b      	ldr	r1, [pc, #492]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 0320 	and.w	r3, r3, #32
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00a      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f50:	4b76      	ldr	r3, [pc, #472]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	4973      	ldr	r1, [pc, #460]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00a      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f72:	4b6e      	ldr	r3, [pc, #440]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	69db      	ldr	r3, [r3, #28]
 8005f80:	496a      	ldr	r1, [pc, #424]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00a      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f94:	4b65      	ldr	r3, [pc, #404]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	4962      	ldr	r1, [pc, #392]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00a      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005fb6:	4b5d      	ldr	r3, [pc, #372]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc4:	4959      	ldr	r1, [pc, #356]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00a      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005fd8:	4b54      	ldr	r3, [pc, #336]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fde:	f023 0203 	bic.w	r2, r3, #3
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe6:	4951      	ldr	r1, [pc, #324]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ffa:	4b4c      	ldr	r3, [pc, #304]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006000:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	4948      	ldr	r1, [pc, #288]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800600a:	4313      	orrs	r3, r2
 800600c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006018:	2b00      	cmp	r3, #0
 800601a:	d015      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800601c:	4b43      	ldr	r3, [pc, #268]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800601e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006022:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800602a:	4940      	ldr	r1, [pc, #256]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800602c:	4313      	orrs	r3, r2
 800602e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800603a:	d105      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800603c:	4b3b      	ldr	r3, [pc, #236]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	4a3a      	ldr	r2, [pc, #232]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006046:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006050:	2b00      	cmp	r3, #0
 8006052:	d015      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006054:	4b35      	ldr	r3, [pc, #212]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006062:	4932      	ldr	r1, [pc, #200]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006064:	4313      	orrs	r3, r2
 8006066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800606e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006072:	d105      	bne.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006074:	4b2d      	ldr	r3, [pc, #180]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	4a2c      	ldr	r2, [pc, #176]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800607a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800607e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d015      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800608c:	4b27      	ldr	r3, [pc, #156]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800608e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006092:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609a:	4924      	ldr	r1, [pc, #144]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800609c:	4313      	orrs	r3, r2
 800609e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060aa:	d105      	bne.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060ac:	4b1f      	ldr	r3, [pc, #124]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	4a1e      	ldr	r2, [pc, #120]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d015      	beq.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060c4:	4b19      	ldr	r3, [pc, #100]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d2:	4916      	ldr	r1, [pc, #88]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060d4:	4313      	orrs	r3, r2
 80060d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060e2:	d105      	bne.n	80060f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060e4:	4b11      	ldr	r3, [pc, #68]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	4a10      	ldr	r2, [pc, #64]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d019      	beq.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060fc:	4b0b      	ldr	r3, [pc, #44]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006102:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	4908      	ldr	r1, [pc, #32]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800610c:	4313      	orrs	r3, r2
 800610e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800611a:	d109      	bne.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800611c:	4b03      	ldr	r3, [pc, #12]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	4a02      	ldr	r2, [pc, #8]	; (800612c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006126:	60d3      	str	r3, [r2, #12]
 8006128:	e002      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800612a:	bf00      	nop
 800612c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006138:	2b00      	cmp	r3, #0
 800613a:	d015      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800613c:	4b29      	ldr	r3, [pc, #164]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800613e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006142:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800614a:	4926      	ldr	r1, [pc, #152]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800614c:	4313      	orrs	r3, r2
 800614e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800615a:	d105      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800615c:	4b21      	ldr	r3, [pc, #132]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	4a20      	ldr	r2, [pc, #128]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006166:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d015      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006174:	4b1b      	ldr	r3, [pc, #108]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006182:	4918      	ldr	r1, [pc, #96]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006184:	4313      	orrs	r3, r2
 8006186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800618e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006192:	d105      	bne.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006194:	4b13      	ldr	r3, [pc, #76]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	4a12      	ldr	r2, [pc, #72]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800619a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800619e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d015      	beq.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80061ac:	4b0d      	ldr	r3, [pc, #52]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061ba:	490a      	ldr	r1, [pc, #40]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80061ca:	d105      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061cc:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	4a04      	ldr	r2, [pc, #16]	; (80061e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80061d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80061da:	4618      	mov	r0, r3
 80061dc:	3718      	adds	r7, #24
 80061de:	46bd      	mov	sp, r7
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	bf00      	nop
 80061e4:	40021000 	.word	0x40021000

080061e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d101      	bne.n	80061fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
 80061f8:	e049      	b.n	800628e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b00      	cmp	r3, #0
 8006204:	d106      	bne.n	8006214 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f7fa ff8c 	bl	800112c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681a      	ldr	r2, [r3, #0]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	3304      	adds	r3, #4
 8006224:	4619      	mov	r1, r3
 8006226:	4610      	mov	r0, r2
 8006228:	f000 fb88 	bl	800693c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	2201      	movs	r2, #1
 8006280:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
	...

08006298 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b01      	cmp	r3, #1
 80062aa:	d001      	beq.n	80062b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	e054      	b.n	800635a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2202      	movs	r2, #2
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68da      	ldr	r2, [r3, #12]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f042 0201 	orr.w	r2, r2, #1
 80062c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a26      	ldr	r2, [pc, #152]	; (8006368 <HAL_TIM_Base_Start_IT+0xd0>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d022      	beq.n	8006318 <HAL_TIM_Base_Start_IT+0x80>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062da:	d01d      	beq.n	8006318 <HAL_TIM_Base_Start_IT+0x80>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a22      	ldr	r2, [pc, #136]	; (800636c <HAL_TIM_Base_Start_IT+0xd4>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d018      	beq.n	8006318 <HAL_TIM_Base_Start_IT+0x80>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a21      	ldr	r2, [pc, #132]	; (8006370 <HAL_TIM_Base_Start_IT+0xd8>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d013      	beq.n	8006318 <HAL_TIM_Base_Start_IT+0x80>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a1f      	ldr	r2, [pc, #124]	; (8006374 <HAL_TIM_Base_Start_IT+0xdc>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d00e      	beq.n	8006318 <HAL_TIM_Base_Start_IT+0x80>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a1e      	ldr	r2, [pc, #120]	; (8006378 <HAL_TIM_Base_Start_IT+0xe0>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d009      	beq.n	8006318 <HAL_TIM_Base_Start_IT+0x80>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a1c      	ldr	r2, [pc, #112]	; (800637c <HAL_TIM_Base_Start_IT+0xe4>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d004      	beq.n	8006318 <HAL_TIM_Base_Start_IT+0x80>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a1b      	ldr	r2, [pc, #108]	; (8006380 <HAL_TIM_Base_Start_IT+0xe8>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d115      	bne.n	8006344 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	4b19      	ldr	r3, [pc, #100]	; (8006384 <HAL_TIM_Base_Start_IT+0xec>)
 8006320:	4013      	ands	r3, r2
 8006322:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2b06      	cmp	r3, #6
 8006328:	d015      	beq.n	8006356 <HAL_TIM_Base_Start_IT+0xbe>
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006330:	d011      	beq.n	8006356 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0201 	orr.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006342:	e008      	b.n	8006356 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0201 	orr.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	e000      	b.n	8006358 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006356:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	40012c00 	.word	0x40012c00
 800636c:	40000400 	.word	0x40000400
 8006370:	40000800 	.word	0x40000800
 8006374:	40000c00 	.word	0x40000c00
 8006378:	40013400 	.word	0x40013400
 800637c:	40014000 	.word	0x40014000
 8006380:	40015000 	.word	0x40015000
 8006384:	00010007 	.word	0x00010007

08006388 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	691b      	ldr	r3, [r3, #16]
 800639e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	f003 0302 	and.w	r3, r3, #2
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d020      	beq.n	80063ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f003 0302 	and.w	r3, r3, #2
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d01b      	beq.n	80063ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f06f 0202 	mvn.w	r2, #2
 80063bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2201      	movs	r2, #1
 80063c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	699b      	ldr	r3, [r3, #24]
 80063ca:	f003 0303 	and.w	r3, r3, #3
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d003      	beq.n	80063da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fa94 	bl	8006900 <HAL_TIM_IC_CaptureCallback>
 80063d8:	e005      	b.n	80063e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fa86 	bl	80068ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fa97 	bl	8006914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f003 0304 	and.w	r3, r3, #4
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d020      	beq.n	8006438 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	f003 0304 	and.w	r3, r3, #4
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d01b      	beq.n	8006438 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f06f 0204 	mvn.w	r2, #4
 8006408:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2202      	movs	r2, #2
 800640e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	699b      	ldr	r3, [r3, #24]
 8006416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fa6e 	bl	8006900 <HAL_TIM_IC_CaptureCallback>
 8006424:	e005      	b.n	8006432 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fa60 	bl	80068ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fa71 	bl	8006914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2200      	movs	r2, #0
 8006436:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f003 0308 	and.w	r3, r3, #8
 800643e:	2b00      	cmp	r3, #0
 8006440:	d020      	beq.n	8006484 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f003 0308 	and.w	r3, r3, #8
 8006448:	2b00      	cmp	r3, #0
 800644a:	d01b      	beq.n	8006484 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f06f 0208 	mvn.w	r2, #8
 8006454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2204      	movs	r2, #4
 800645a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	f003 0303 	and.w	r3, r3, #3
 8006466:	2b00      	cmp	r3, #0
 8006468:	d003      	beq.n	8006472 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f000 fa48 	bl	8006900 <HAL_TIM_IC_CaptureCallback>
 8006470:	e005      	b.n	800647e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fa3a 	bl	80068ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fa4b 	bl	8006914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2200      	movs	r2, #0
 8006482:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f003 0310 	and.w	r3, r3, #16
 800648a:	2b00      	cmp	r3, #0
 800648c:	d020      	beq.n	80064d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f003 0310 	and.w	r3, r3, #16
 8006494:	2b00      	cmp	r3, #0
 8006496:	d01b      	beq.n	80064d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	f06f 0210 	mvn.w	r2, #16
 80064a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2208      	movs	r2, #8
 80064a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d003      	beq.n	80064be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fa22 	bl	8006900 <HAL_TIM_IC_CaptureCallback>
 80064bc:	e005      	b.n	80064ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	f000 fa14 	bl	80068ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fa25 	bl	8006914 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	f003 0301 	and.w	r3, r3, #1
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00c      	beq.n	80064f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d007      	beq.n	80064f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f06f 0201 	mvn.w	r2, #1
 80064ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f9f2 	bl	80068d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d104      	bne.n	8006508 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006504:	2b00      	cmp	r3, #0
 8006506:	d00c      	beq.n	8006522 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800650e:	2b00      	cmp	r3, #0
 8006510:	d007      	beq.n	8006522 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800651a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 fcdd 	bl	8006edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00c      	beq.n	8006546 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006532:	2b00      	cmp	r3, #0
 8006534:	d007      	beq.n	8006546 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800653e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f000 fcd5 	bl	8006ef0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00c      	beq.n	800656a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006556:	2b00      	cmp	r3, #0
 8006558:	d007      	beq.n	800656a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006562:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006564:	6878      	ldr	r0, [r7, #4]
 8006566:	f000 f9df 	bl	8006928 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b00      	cmp	r3, #0
 8006572:	d00c      	beq.n	800658e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f003 0320 	and.w	r3, r3, #32
 800657a:	2b00      	cmp	r3, #0
 800657c:	d007      	beq.n	800658e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f06f 0220 	mvn.w	r2, #32
 8006586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fc9d 	bl	8006ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00c      	beq.n	80065b2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d007      	beq.n	80065b2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80065aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f000 fca9 	bl	8006f04 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d00c      	beq.n	80065d6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d007      	beq.n	80065d6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80065ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f000 fca1 	bl	8006f18 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00c      	beq.n	80065fa <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d007      	beq.n	80065fa <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80065f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fc99 	bl	8006f2c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00c      	beq.n	800661e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800660a:	2b00      	cmp	r3, #0
 800660c:	d007      	beq.n	800661e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006616:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f000 fc91 	bl	8006f40 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800661e:	bf00      	nop
 8006620:	3710      	adds	r7, #16
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}
	...

08006628 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006632:	2300      	movs	r3, #0
 8006634:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800663c:	2b01      	cmp	r3, #1
 800663e:	d101      	bne.n	8006644 <HAL_TIM_ConfigClockSource+0x1c>
 8006640:	2302      	movs	r3, #2
 8006642:	e0f6      	b.n	8006832 <HAL_TIM_ConfigClockSource+0x20a>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2202      	movs	r2, #2
 8006650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006662:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006666:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800666e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68ba      	ldr	r2, [r7, #8]
 8006676:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a6f      	ldr	r2, [pc, #444]	; (800683c <HAL_TIM_ConfigClockSource+0x214>)
 800667e:	4293      	cmp	r3, r2
 8006680:	f000 80c1 	beq.w	8006806 <HAL_TIM_ConfigClockSource+0x1de>
 8006684:	4a6d      	ldr	r2, [pc, #436]	; (800683c <HAL_TIM_ConfigClockSource+0x214>)
 8006686:	4293      	cmp	r3, r2
 8006688:	f200 80c6 	bhi.w	8006818 <HAL_TIM_ConfigClockSource+0x1f0>
 800668c:	4a6c      	ldr	r2, [pc, #432]	; (8006840 <HAL_TIM_ConfigClockSource+0x218>)
 800668e:	4293      	cmp	r3, r2
 8006690:	f000 80b9 	beq.w	8006806 <HAL_TIM_ConfigClockSource+0x1de>
 8006694:	4a6a      	ldr	r2, [pc, #424]	; (8006840 <HAL_TIM_ConfigClockSource+0x218>)
 8006696:	4293      	cmp	r3, r2
 8006698:	f200 80be 	bhi.w	8006818 <HAL_TIM_ConfigClockSource+0x1f0>
 800669c:	4a69      	ldr	r2, [pc, #420]	; (8006844 <HAL_TIM_ConfigClockSource+0x21c>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	f000 80b1 	beq.w	8006806 <HAL_TIM_ConfigClockSource+0x1de>
 80066a4:	4a67      	ldr	r2, [pc, #412]	; (8006844 <HAL_TIM_ConfigClockSource+0x21c>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	f200 80b6 	bhi.w	8006818 <HAL_TIM_ConfigClockSource+0x1f0>
 80066ac:	4a66      	ldr	r2, [pc, #408]	; (8006848 <HAL_TIM_ConfigClockSource+0x220>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	f000 80a9 	beq.w	8006806 <HAL_TIM_ConfigClockSource+0x1de>
 80066b4:	4a64      	ldr	r2, [pc, #400]	; (8006848 <HAL_TIM_ConfigClockSource+0x220>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	f200 80ae 	bhi.w	8006818 <HAL_TIM_ConfigClockSource+0x1f0>
 80066bc:	4a63      	ldr	r2, [pc, #396]	; (800684c <HAL_TIM_ConfigClockSource+0x224>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	f000 80a1 	beq.w	8006806 <HAL_TIM_ConfigClockSource+0x1de>
 80066c4:	4a61      	ldr	r2, [pc, #388]	; (800684c <HAL_TIM_ConfigClockSource+0x224>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	f200 80a6 	bhi.w	8006818 <HAL_TIM_ConfigClockSource+0x1f0>
 80066cc:	4a60      	ldr	r2, [pc, #384]	; (8006850 <HAL_TIM_ConfigClockSource+0x228>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	f000 8099 	beq.w	8006806 <HAL_TIM_ConfigClockSource+0x1de>
 80066d4:	4a5e      	ldr	r2, [pc, #376]	; (8006850 <HAL_TIM_ConfigClockSource+0x228>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	f200 809e 	bhi.w	8006818 <HAL_TIM_ConfigClockSource+0x1f0>
 80066dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80066e0:	f000 8091 	beq.w	8006806 <HAL_TIM_ConfigClockSource+0x1de>
 80066e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80066e8:	f200 8096 	bhi.w	8006818 <HAL_TIM_ConfigClockSource+0x1f0>
 80066ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066f0:	f000 8089 	beq.w	8006806 <HAL_TIM_ConfigClockSource+0x1de>
 80066f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066f8:	f200 808e 	bhi.w	8006818 <HAL_TIM_ConfigClockSource+0x1f0>
 80066fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006700:	d03e      	beq.n	8006780 <HAL_TIM_ConfigClockSource+0x158>
 8006702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006706:	f200 8087 	bhi.w	8006818 <HAL_TIM_ConfigClockSource+0x1f0>
 800670a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800670e:	f000 8086 	beq.w	800681e <HAL_TIM_ConfigClockSource+0x1f6>
 8006712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006716:	d87f      	bhi.n	8006818 <HAL_TIM_ConfigClockSource+0x1f0>
 8006718:	2b70      	cmp	r3, #112	; 0x70
 800671a:	d01a      	beq.n	8006752 <HAL_TIM_ConfigClockSource+0x12a>
 800671c:	2b70      	cmp	r3, #112	; 0x70
 800671e:	d87b      	bhi.n	8006818 <HAL_TIM_ConfigClockSource+0x1f0>
 8006720:	2b60      	cmp	r3, #96	; 0x60
 8006722:	d050      	beq.n	80067c6 <HAL_TIM_ConfigClockSource+0x19e>
 8006724:	2b60      	cmp	r3, #96	; 0x60
 8006726:	d877      	bhi.n	8006818 <HAL_TIM_ConfigClockSource+0x1f0>
 8006728:	2b50      	cmp	r3, #80	; 0x50
 800672a:	d03c      	beq.n	80067a6 <HAL_TIM_ConfigClockSource+0x17e>
 800672c:	2b50      	cmp	r3, #80	; 0x50
 800672e:	d873      	bhi.n	8006818 <HAL_TIM_ConfigClockSource+0x1f0>
 8006730:	2b40      	cmp	r3, #64	; 0x40
 8006732:	d058      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0x1be>
 8006734:	2b40      	cmp	r3, #64	; 0x40
 8006736:	d86f      	bhi.n	8006818 <HAL_TIM_ConfigClockSource+0x1f0>
 8006738:	2b30      	cmp	r3, #48	; 0x30
 800673a:	d064      	beq.n	8006806 <HAL_TIM_ConfigClockSource+0x1de>
 800673c:	2b30      	cmp	r3, #48	; 0x30
 800673e:	d86b      	bhi.n	8006818 <HAL_TIM_ConfigClockSource+0x1f0>
 8006740:	2b20      	cmp	r3, #32
 8006742:	d060      	beq.n	8006806 <HAL_TIM_ConfigClockSource+0x1de>
 8006744:	2b20      	cmp	r3, #32
 8006746:	d867      	bhi.n	8006818 <HAL_TIM_ConfigClockSource+0x1f0>
 8006748:	2b00      	cmp	r3, #0
 800674a:	d05c      	beq.n	8006806 <HAL_TIM_ConfigClockSource+0x1de>
 800674c:	2b10      	cmp	r3, #16
 800674e:	d05a      	beq.n	8006806 <HAL_TIM_ConfigClockSource+0x1de>
 8006750:	e062      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006762:	f000 fafb 	bl	8006d5c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	689b      	ldr	r3, [r3, #8]
 800676c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006774:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	68ba      	ldr	r2, [r7, #8]
 800677c:	609a      	str	r2, [r3, #8]
      break;
 800677e:	e04f      	b.n	8006820 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006790:	f000 fae4 	bl	8006d5c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689a      	ldr	r2, [r3, #8]
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067a2:	609a      	str	r2, [r3, #8]
      break;
 80067a4:	e03c      	b.n	8006820 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067b2:	461a      	mov	r2, r3
 80067b4:	f000 fa56 	bl	8006c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2150      	movs	r1, #80	; 0x50
 80067be:	4618      	mov	r0, r3
 80067c0:	f000 faaf 	bl	8006d22 <TIM_ITRx_SetConfig>
      break;
 80067c4:	e02c      	b.n	8006820 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067d2:	461a      	mov	r2, r3
 80067d4:	f000 fa75 	bl	8006cc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2160      	movs	r1, #96	; 0x60
 80067de:	4618      	mov	r0, r3
 80067e0:	f000 fa9f 	bl	8006d22 <TIM_ITRx_SetConfig>
      break;
 80067e4:	e01c      	b.n	8006820 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067f2:	461a      	mov	r2, r3
 80067f4:	f000 fa36 	bl	8006c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2140      	movs	r1, #64	; 0x40
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 fa8f 	bl	8006d22 <TIM_ITRx_SetConfig>
      break;
 8006804:	e00c      	b.n	8006820 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4619      	mov	r1, r3
 8006810:	4610      	mov	r0, r2
 8006812:	f000 fa86 	bl	8006d22 <TIM_ITRx_SetConfig>
      break;
 8006816:	e003      	b.n	8006820 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	73fb      	strb	r3, [r7, #15]
      break;
 800681c:	e000      	b.n	8006820 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800681e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006830:	7bfb      	ldrb	r3, [r7, #15]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	00100070 	.word	0x00100070
 8006840:	00100060 	.word	0x00100060
 8006844:	00100050 	.word	0x00100050
 8006848:	00100040 	.word	0x00100040
 800684c:	00100030 	.word	0x00100030
 8006850:	00100020 	.word	0x00100020

08006854 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b082      	sub	sp, #8
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006864:	2b01      	cmp	r3, #1
 8006866:	d101      	bne.n	800686c <HAL_TIM_SlaveConfigSynchro+0x18>
 8006868:	2302      	movs	r3, #2
 800686a:	e031      	b.n	80068d0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	2201      	movs	r2, #1
 8006870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2202      	movs	r2, #2
 8006878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800687c:	6839      	ldr	r1, [r7, #0]
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 f910 	bl	8006aa4 <TIM_SlaveTimer_SetConfig>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d009      	beq.n	800689e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	e018      	b.n	80068d0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68da      	ldr	r2, [r3, #12]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068ac:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	68da      	ldr	r2, [r3, #12]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068bc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3708      	adds	r7, #8
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800691c:	bf00      	nop
 800691e:	370c      	adds	r7, #12
 8006920:	46bd      	mov	sp, r7
 8006922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006926:	4770      	bx	lr

08006928 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006930:	bf00      	nop
 8006932:	370c      	adds	r7, #12
 8006934:	46bd      	mov	sp, r7
 8006936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693a:	4770      	bx	lr

0800693c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800693c:	b480      	push	{r7}
 800693e:	b085      	sub	sp, #20
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	4a4c      	ldr	r2, [pc, #304]	; (8006a80 <TIM_Base_SetConfig+0x144>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d017      	beq.n	8006984 <TIM_Base_SetConfig+0x48>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695a:	d013      	beq.n	8006984 <TIM_Base_SetConfig+0x48>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	4a49      	ldr	r2, [pc, #292]	; (8006a84 <TIM_Base_SetConfig+0x148>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d00f      	beq.n	8006984 <TIM_Base_SetConfig+0x48>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a48      	ldr	r2, [pc, #288]	; (8006a88 <TIM_Base_SetConfig+0x14c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d00b      	beq.n	8006984 <TIM_Base_SetConfig+0x48>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a47      	ldr	r2, [pc, #284]	; (8006a8c <TIM_Base_SetConfig+0x150>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d007      	beq.n	8006984 <TIM_Base_SetConfig+0x48>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a46      	ldr	r2, [pc, #280]	; (8006a90 <TIM_Base_SetConfig+0x154>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d003      	beq.n	8006984 <TIM_Base_SetConfig+0x48>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a45      	ldr	r2, [pc, #276]	; (8006a94 <TIM_Base_SetConfig+0x158>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d108      	bne.n	8006996 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800698a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	4313      	orrs	r3, r2
 8006994:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a39      	ldr	r2, [pc, #228]	; (8006a80 <TIM_Base_SetConfig+0x144>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d023      	beq.n	80069e6 <TIM_Base_SetConfig+0xaa>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069a4:	d01f      	beq.n	80069e6 <TIM_Base_SetConfig+0xaa>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a36      	ldr	r2, [pc, #216]	; (8006a84 <TIM_Base_SetConfig+0x148>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d01b      	beq.n	80069e6 <TIM_Base_SetConfig+0xaa>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a35      	ldr	r2, [pc, #212]	; (8006a88 <TIM_Base_SetConfig+0x14c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d017      	beq.n	80069e6 <TIM_Base_SetConfig+0xaa>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	4a34      	ldr	r2, [pc, #208]	; (8006a8c <TIM_Base_SetConfig+0x150>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d013      	beq.n	80069e6 <TIM_Base_SetConfig+0xaa>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a33      	ldr	r2, [pc, #204]	; (8006a90 <TIM_Base_SetConfig+0x154>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d00f      	beq.n	80069e6 <TIM_Base_SetConfig+0xaa>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a33      	ldr	r2, [pc, #204]	; (8006a98 <TIM_Base_SetConfig+0x15c>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d00b      	beq.n	80069e6 <TIM_Base_SetConfig+0xaa>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a32      	ldr	r2, [pc, #200]	; (8006a9c <TIM_Base_SetConfig+0x160>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d007      	beq.n	80069e6 <TIM_Base_SetConfig+0xaa>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a31      	ldr	r2, [pc, #196]	; (8006aa0 <TIM_Base_SetConfig+0x164>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d003      	beq.n	80069e6 <TIM_Base_SetConfig+0xaa>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a2c      	ldr	r2, [pc, #176]	; (8006a94 <TIM_Base_SetConfig+0x158>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d108      	bne.n	80069f8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	68db      	ldr	r3, [r3, #12]
 80069f2:	68fa      	ldr	r2, [r7, #12]
 80069f4:	4313      	orrs	r3, r2
 80069f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	695b      	ldr	r3, [r3, #20]
 8006a02:	4313      	orrs	r3, r2
 8006a04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68fa      	ldr	r2, [r7, #12]
 8006a0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	689a      	ldr	r2, [r3, #8]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	4a18      	ldr	r2, [pc, #96]	; (8006a80 <TIM_Base_SetConfig+0x144>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d013      	beq.n	8006a4c <TIM_Base_SetConfig+0x110>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4a1a      	ldr	r2, [pc, #104]	; (8006a90 <TIM_Base_SetConfig+0x154>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d00f      	beq.n	8006a4c <TIM_Base_SetConfig+0x110>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a1a      	ldr	r2, [pc, #104]	; (8006a98 <TIM_Base_SetConfig+0x15c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d00b      	beq.n	8006a4c <TIM_Base_SetConfig+0x110>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a19      	ldr	r2, [pc, #100]	; (8006a9c <TIM_Base_SetConfig+0x160>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d007      	beq.n	8006a4c <TIM_Base_SetConfig+0x110>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	4a18      	ldr	r2, [pc, #96]	; (8006aa0 <TIM_Base_SetConfig+0x164>)
 8006a40:	4293      	cmp	r3, r2
 8006a42:	d003      	beq.n	8006a4c <TIM_Base_SetConfig+0x110>
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a13      	ldr	r2, [pc, #76]	; (8006a94 <TIM_Base_SetConfig+0x158>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d103      	bne.n	8006a54 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	691a      	ldr	r2, [r3, #16]
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2201      	movs	r2, #1
 8006a58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	691b      	ldr	r3, [r3, #16]
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d105      	bne.n	8006a72 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f023 0201 	bic.w	r2, r3, #1
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	611a      	str	r2, [r3, #16]
  }
}
 8006a72:	bf00      	nop
 8006a74:	3714      	adds	r7, #20
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
 8006a7e:	bf00      	nop
 8006a80:	40012c00 	.word	0x40012c00
 8006a84:	40000400 	.word	0x40000400
 8006a88:	40000800 	.word	0x40000800
 8006a8c:	40000c00 	.word	0x40000c00
 8006a90:	40013400 	.word	0x40013400
 8006a94:	40015000 	.word	0x40015000
 8006a98:	40014000 	.word	0x40014000
 8006a9c:	40014400 	.word	0x40014400
 8006aa0:	40014800 	.word	0x40014800

08006aa4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b086      	sub	sp, #24
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
 8006aac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ac4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ad6:	f023 0307 	bic.w	r3, r3, #7
 8006ada:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	693a      	ldr	r2, [r7, #16]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	685b      	ldr	r3, [r3, #4]
 8006af2:	4a56      	ldr	r2, [pc, #344]	; (8006c4c <TIM_SlaveTimer_SetConfig+0x1a8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	f000 80a2 	beq.w	8006c3e <TIM_SlaveTimer_SetConfig+0x19a>
 8006afa:	4a54      	ldr	r2, [pc, #336]	; (8006c4c <TIM_SlaveTimer_SetConfig+0x1a8>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	f200 809b 	bhi.w	8006c38 <TIM_SlaveTimer_SetConfig+0x194>
 8006b02:	4a53      	ldr	r2, [pc, #332]	; (8006c50 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	f000 809a 	beq.w	8006c3e <TIM_SlaveTimer_SetConfig+0x19a>
 8006b0a:	4a51      	ldr	r2, [pc, #324]	; (8006c50 <TIM_SlaveTimer_SetConfig+0x1ac>)
 8006b0c:	4293      	cmp	r3, r2
 8006b0e:	f200 8093 	bhi.w	8006c38 <TIM_SlaveTimer_SetConfig+0x194>
 8006b12:	4a50      	ldr	r2, [pc, #320]	; (8006c54 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8006b14:	4293      	cmp	r3, r2
 8006b16:	f000 8092 	beq.w	8006c3e <TIM_SlaveTimer_SetConfig+0x19a>
 8006b1a:	4a4e      	ldr	r2, [pc, #312]	; (8006c54 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	f200 808b 	bhi.w	8006c38 <TIM_SlaveTimer_SetConfig+0x194>
 8006b22:	4a4d      	ldr	r2, [pc, #308]	; (8006c58 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	f000 808a 	beq.w	8006c3e <TIM_SlaveTimer_SetConfig+0x19a>
 8006b2a:	4a4b      	ldr	r2, [pc, #300]	; (8006c58 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	f200 8083 	bhi.w	8006c38 <TIM_SlaveTimer_SetConfig+0x194>
 8006b32:	4a4a      	ldr	r2, [pc, #296]	; (8006c5c <TIM_SlaveTimer_SetConfig+0x1b8>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	f000 8082 	beq.w	8006c3e <TIM_SlaveTimer_SetConfig+0x19a>
 8006b3a:	4a48      	ldr	r2, [pc, #288]	; (8006c5c <TIM_SlaveTimer_SetConfig+0x1b8>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d87b      	bhi.n	8006c38 <TIM_SlaveTimer_SetConfig+0x194>
 8006b40:	4a47      	ldr	r2, [pc, #284]	; (8006c60 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d07b      	beq.n	8006c3e <TIM_SlaveTimer_SetConfig+0x19a>
 8006b46:	4a46      	ldr	r2, [pc, #280]	; (8006c60 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d875      	bhi.n	8006c38 <TIM_SlaveTimer_SetConfig+0x194>
 8006b4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006b50:	d075      	beq.n	8006c3e <TIM_SlaveTimer_SetConfig+0x19a>
 8006b52:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006b56:	d86f      	bhi.n	8006c38 <TIM_SlaveTimer_SetConfig+0x194>
 8006b58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b5c:	d06f      	beq.n	8006c3e <TIM_SlaveTimer_SetConfig+0x19a>
 8006b5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b62:	d869      	bhi.n	8006c38 <TIM_SlaveTimer_SetConfig+0x194>
 8006b64:	2b70      	cmp	r3, #112	; 0x70
 8006b66:	d01a      	beq.n	8006b9e <TIM_SlaveTimer_SetConfig+0xfa>
 8006b68:	2b70      	cmp	r3, #112	; 0x70
 8006b6a:	d865      	bhi.n	8006c38 <TIM_SlaveTimer_SetConfig+0x194>
 8006b6c:	2b60      	cmp	r3, #96	; 0x60
 8006b6e:	d059      	beq.n	8006c24 <TIM_SlaveTimer_SetConfig+0x180>
 8006b70:	2b60      	cmp	r3, #96	; 0x60
 8006b72:	d861      	bhi.n	8006c38 <TIM_SlaveTimer_SetConfig+0x194>
 8006b74:	2b50      	cmp	r3, #80	; 0x50
 8006b76:	d04b      	beq.n	8006c10 <TIM_SlaveTimer_SetConfig+0x16c>
 8006b78:	2b50      	cmp	r3, #80	; 0x50
 8006b7a:	d85d      	bhi.n	8006c38 <TIM_SlaveTimer_SetConfig+0x194>
 8006b7c:	2b40      	cmp	r3, #64	; 0x40
 8006b7e:	d019      	beq.n	8006bb4 <TIM_SlaveTimer_SetConfig+0x110>
 8006b80:	2b40      	cmp	r3, #64	; 0x40
 8006b82:	d859      	bhi.n	8006c38 <TIM_SlaveTimer_SetConfig+0x194>
 8006b84:	2b30      	cmp	r3, #48	; 0x30
 8006b86:	d05a      	beq.n	8006c3e <TIM_SlaveTimer_SetConfig+0x19a>
 8006b88:	2b30      	cmp	r3, #48	; 0x30
 8006b8a:	d855      	bhi.n	8006c38 <TIM_SlaveTimer_SetConfig+0x194>
 8006b8c:	2b20      	cmp	r3, #32
 8006b8e:	d056      	beq.n	8006c3e <TIM_SlaveTimer_SetConfig+0x19a>
 8006b90:	2b20      	cmp	r3, #32
 8006b92:	d851      	bhi.n	8006c38 <TIM_SlaveTimer_SetConfig+0x194>
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d052      	beq.n	8006c3e <TIM_SlaveTimer_SetConfig+0x19a>
 8006b98:	2b10      	cmp	r3, #16
 8006b9a:	d050      	beq.n	8006c3e <TIM_SlaveTimer_SetConfig+0x19a>
 8006b9c:	e04c      	b.n	8006c38 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006bae:	f000 f8d5 	bl	8006d5c <TIM_ETR_SetConfig>
      break;
 8006bb2:	e045      	b.n	8006c40 <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b05      	cmp	r3, #5
 8006bba:	d004      	beq.n	8006bc6 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 8006bc0:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8006bc4:	d101      	bne.n	8006bca <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e03b      	b.n	8006c42 <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6a1b      	ldr	r3, [r3, #32]
 8006bd0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	6a1a      	ldr	r2, [r3, #32]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f022 0201 	bic.w	r2, r2, #1
 8006be0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	699b      	ldr	r3, [r3, #24]
 8006be8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bf0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	011b      	lsls	r3, r3, #4
 8006bf8:	68ba      	ldr	r2, [r7, #8]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68ba      	ldr	r2, [r7, #8]
 8006c04:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	621a      	str	r2, [r3, #32]
      break;
 8006c0e:	e017      	b.n	8006c40 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	f000 f821 	bl	8006c64 <TIM_TI1_ConfigInputStage>
      break;
 8006c22:	e00d      	b.n	8006c40 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c30:	461a      	mov	r2, r3
 8006c32:	f000 f846 	bl	8006cc2 <TIM_TI2_ConfigInputStage>
      break;
 8006c36:	e003      	b.n	8006c40 <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c3c:	e000      	b.n	8006c40 <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 8006c3e:	bf00      	nop
  }

  return status;
 8006c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3718      	adds	r7, #24
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	00100070 	.word	0x00100070
 8006c50:	00100060 	.word	0x00100060
 8006c54:	00100050 	.word	0x00100050
 8006c58:	00100040 	.word	0x00100040
 8006c5c:	00100030 	.word	0x00100030
 8006c60:	00100020 	.word	0x00100020

08006c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
 8006c7a:	f023 0201 	bic.w	r2, r3, #1
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	011b      	lsls	r3, r3, #4
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	4313      	orrs	r3, r2
 8006c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	f023 030a 	bic.w	r3, r3, #10
 8006ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	697a      	ldr	r2, [r7, #20]
 8006cb4:	621a      	str	r2, [r3, #32]
}
 8006cb6:	bf00      	nop
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cc2:	b480      	push	{r7}
 8006cc4:	b087      	sub	sp, #28
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	60f8      	str	r0, [r7, #12]
 8006cca:	60b9      	str	r1, [r7, #8]
 8006ccc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a1b      	ldr	r3, [r3, #32]
 8006cd8:	f023 0210 	bic.w	r2, r3, #16
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	031b      	lsls	r3, r3, #12
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006cfe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d00:	68bb      	ldr	r3, [r7, #8]
 8006d02:	011b      	lsls	r3, r3, #4
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	4313      	orrs	r3, r2
 8006d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	621a      	str	r2, [r3, #32]
}
 8006d16:	bf00      	nop
 8006d18:	371c      	adds	r7, #28
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d20:	4770      	bx	lr

08006d22 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d22:	b480      	push	{r7}
 8006d24:	b085      	sub	sp, #20
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
 8006d2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006d38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d3e:	683a      	ldr	r2, [r7, #0]
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	f043 0307 	orr.w	r3, r3, #7
 8006d48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	68fa      	ldr	r2, [r7, #12]
 8006d4e:	609a      	str	r2, [r3, #8]
}
 8006d50:	bf00      	nop
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b087      	sub	sp, #28
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	60f8      	str	r0, [r7, #12]
 8006d64:	60b9      	str	r1, [r7, #8]
 8006d66:	607a      	str	r2, [r7, #4]
 8006d68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	021a      	lsls	r2, r3, #8
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	431a      	orrs	r2, r3
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	697a      	ldr	r2, [r7, #20]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	609a      	str	r2, [r3, #8]
}
 8006d90:	bf00      	nop
 8006d92:	371c      	adds	r7, #28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b085      	sub	sp, #20
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d101      	bne.n	8006db4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006db0:	2302      	movs	r3, #2
 8006db2:	e074      	b.n	8006e9e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2202      	movs	r2, #2
 8006dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	689b      	ldr	r3, [r3, #8]
 8006dd2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a34      	ldr	r2, [pc, #208]	; (8006eac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d009      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a33      	ldr	r2, [pc, #204]	; (8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d004      	beq.n	8006df2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a31      	ldr	r2, [pc, #196]	; (8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d108      	bne.n	8006e04 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006df8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	685b      	ldr	r3, [r3, #4]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a21      	ldr	r2, [pc, #132]	; (8006eac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d022      	beq.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e34:	d01d      	beq.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a1f      	ldr	r2, [pc, #124]	; (8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d018      	beq.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a1d      	ldr	r2, [pc, #116]	; (8006ebc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d013      	beq.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a1c      	ldr	r2, [pc, #112]	; (8006ec0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d00e      	beq.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a15      	ldr	r2, [pc, #84]	; (8006eb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d009      	beq.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a18      	ldr	r2, [pc, #96]	; (8006ec4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d004      	beq.n	8006e72 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a11      	ldr	r2, [pc, #68]	; (8006eb4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d10c      	bne.n	8006e8c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2200      	movs	r2, #0
 8006e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006e9c:	2300      	movs	r3, #0
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3714      	adds	r7, #20
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop
 8006eac:	40012c00 	.word	0x40012c00
 8006eb0:	40013400 	.word	0x40013400
 8006eb4:	40015000 	.word	0x40015000
 8006eb8:	40000400 	.word	0x40000400
 8006ebc:	40000800 	.word	0x40000800
 8006ec0:	40000c00 	.word	0x40000c00
 8006ec4:	40014000 	.word	0x40014000

08006ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b083      	sub	sp, #12
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ed0:	bf00      	nop
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b083      	sub	sp, #12
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ee4:	bf00      	nop
 8006ee6:	370c      	adds	r7, #12
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b083      	sub	sp, #12
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ef8:	bf00      	nop
 8006efa:	370c      	adds	r7, #12
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b082      	sub	sp, #8
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e042      	b.n	8006fec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d106      	bne.n	8006f7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2200      	movs	r2, #0
 8006f74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7fa f87f 	bl	800107c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2224      	movs	r2, #36	; 0x24
 8006f82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681a      	ldr	r2, [r3, #0]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f022 0201 	bic.w	r2, r2, #1
 8006f94:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fb24 	bl	80075ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 f825 	bl	8006ff4 <UART_SetConfig>
 8006faa:	4603      	mov	r3, r0
 8006fac:	2b01      	cmp	r3, #1
 8006fae:	d101      	bne.n	8006fb4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006fb0:	2301      	movs	r3, #1
 8006fb2:	e01b      	b.n	8006fec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685a      	ldr	r2, [r3, #4]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006fc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	689a      	ldr	r2, [r3, #8]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f042 0201 	orr.w	r2, r2, #1
 8006fe2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fba3 	bl	8007730 <UART_CheckIdleState>
 8006fea:	4603      	mov	r3, r0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ff8:	b08c      	sub	sp, #48	; 0x30
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007004:	697b      	ldr	r3, [r7, #20]
 8007006:	689a      	ldr	r2, [r3, #8]
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	431a      	orrs	r2, r3
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	431a      	orrs	r2, r3
 8007014:	697b      	ldr	r3, [r7, #20]
 8007016:	69db      	ldr	r3, [r3, #28]
 8007018:	4313      	orrs	r3, r2
 800701a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	4baa      	ldr	r3, [pc, #680]	; (80072cc <UART_SetConfig+0x2d8>)
 8007024:	4013      	ands	r3, r2
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	6812      	ldr	r2, [r2, #0]
 800702a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800702c:	430b      	orrs	r3, r1
 800702e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800703a:	697b      	ldr	r3, [r7, #20]
 800703c:	68da      	ldr	r2, [r3, #12]
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	430a      	orrs	r2, r1
 8007044:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	699b      	ldr	r3, [r3, #24]
 800704a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a9f      	ldr	r2, [pc, #636]	; (80072d0 <UART_SetConfig+0x2dc>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d004      	beq.n	8007060 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	6a1b      	ldr	r3, [r3, #32]
 800705a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800705c:	4313      	orrs	r3, r2
 800705e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	689b      	ldr	r3, [r3, #8]
 8007066:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800706a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800706e:	697a      	ldr	r2, [r7, #20]
 8007070:	6812      	ldr	r2, [r2, #0]
 8007072:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007074:	430b      	orrs	r3, r1
 8007076:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800707e:	f023 010f 	bic.w	r1, r3, #15
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	430a      	orrs	r2, r1
 800708c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a90      	ldr	r2, [pc, #576]	; (80072d4 <UART_SetConfig+0x2e0>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d125      	bne.n	80070e4 <UART_SetConfig+0xf0>
 8007098:	4b8f      	ldr	r3, [pc, #572]	; (80072d8 <UART_SetConfig+0x2e4>)
 800709a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800709e:	f003 0303 	and.w	r3, r3, #3
 80070a2:	2b03      	cmp	r3, #3
 80070a4:	d81a      	bhi.n	80070dc <UART_SetConfig+0xe8>
 80070a6:	a201      	add	r2, pc, #4	; (adr r2, 80070ac <UART_SetConfig+0xb8>)
 80070a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ac:	080070bd 	.word	0x080070bd
 80070b0:	080070cd 	.word	0x080070cd
 80070b4:	080070c5 	.word	0x080070c5
 80070b8:	080070d5 	.word	0x080070d5
 80070bc:	2301      	movs	r3, #1
 80070be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070c2:	e116      	b.n	80072f2 <UART_SetConfig+0x2fe>
 80070c4:	2302      	movs	r3, #2
 80070c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ca:	e112      	b.n	80072f2 <UART_SetConfig+0x2fe>
 80070cc:	2304      	movs	r3, #4
 80070ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070d2:	e10e      	b.n	80072f2 <UART_SetConfig+0x2fe>
 80070d4:	2308      	movs	r3, #8
 80070d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070da:	e10a      	b.n	80072f2 <UART_SetConfig+0x2fe>
 80070dc:	2310      	movs	r3, #16
 80070de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070e2:	e106      	b.n	80072f2 <UART_SetConfig+0x2fe>
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a7c      	ldr	r2, [pc, #496]	; (80072dc <UART_SetConfig+0x2e8>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d138      	bne.n	8007160 <UART_SetConfig+0x16c>
 80070ee:	4b7a      	ldr	r3, [pc, #488]	; (80072d8 <UART_SetConfig+0x2e4>)
 80070f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f4:	f003 030c 	and.w	r3, r3, #12
 80070f8:	2b0c      	cmp	r3, #12
 80070fa:	d82d      	bhi.n	8007158 <UART_SetConfig+0x164>
 80070fc:	a201      	add	r2, pc, #4	; (adr r2, 8007104 <UART_SetConfig+0x110>)
 80070fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007102:	bf00      	nop
 8007104:	08007139 	.word	0x08007139
 8007108:	08007159 	.word	0x08007159
 800710c:	08007159 	.word	0x08007159
 8007110:	08007159 	.word	0x08007159
 8007114:	08007149 	.word	0x08007149
 8007118:	08007159 	.word	0x08007159
 800711c:	08007159 	.word	0x08007159
 8007120:	08007159 	.word	0x08007159
 8007124:	08007141 	.word	0x08007141
 8007128:	08007159 	.word	0x08007159
 800712c:	08007159 	.word	0x08007159
 8007130:	08007159 	.word	0x08007159
 8007134:	08007151 	.word	0x08007151
 8007138:	2300      	movs	r3, #0
 800713a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800713e:	e0d8      	b.n	80072f2 <UART_SetConfig+0x2fe>
 8007140:	2302      	movs	r3, #2
 8007142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007146:	e0d4      	b.n	80072f2 <UART_SetConfig+0x2fe>
 8007148:	2304      	movs	r3, #4
 800714a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800714e:	e0d0      	b.n	80072f2 <UART_SetConfig+0x2fe>
 8007150:	2308      	movs	r3, #8
 8007152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007156:	e0cc      	b.n	80072f2 <UART_SetConfig+0x2fe>
 8007158:	2310      	movs	r3, #16
 800715a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800715e:	e0c8      	b.n	80072f2 <UART_SetConfig+0x2fe>
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a5e      	ldr	r2, [pc, #376]	; (80072e0 <UART_SetConfig+0x2ec>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d125      	bne.n	80071b6 <UART_SetConfig+0x1c2>
 800716a:	4b5b      	ldr	r3, [pc, #364]	; (80072d8 <UART_SetConfig+0x2e4>)
 800716c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007170:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007174:	2b30      	cmp	r3, #48	; 0x30
 8007176:	d016      	beq.n	80071a6 <UART_SetConfig+0x1b2>
 8007178:	2b30      	cmp	r3, #48	; 0x30
 800717a:	d818      	bhi.n	80071ae <UART_SetConfig+0x1ba>
 800717c:	2b20      	cmp	r3, #32
 800717e:	d00a      	beq.n	8007196 <UART_SetConfig+0x1a2>
 8007180:	2b20      	cmp	r3, #32
 8007182:	d814      	bhi.n	80071ae <UART_SetConfig+0x1ba>
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <UART_SetConfig+0x19a>
 8007188:	2b10      	cmp	r3, #16
 800718a:	d008      	beq.n	800719e <UART_SetConfig+0x1aa>
 800718c:	e00f      	b.n	80071ae <UART_SetConfig+0x1ba>
 800718e:	2300      	movs	r3, #0
 8007190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007194:	e0ad      	b.n	80072f2 <UART_SetConfig+0x2fe>
 8007196:	2302      	movs	r3, #2
 8007198:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800719c:	e0a9      	b.n	80072f2 <UART_SetConfig+0x2fe>
 800719e:	2304      	movs	r3, #4
 80071a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071a4:	e0a5      	b.n	80072f2 <UART_SetConfig+0x2fe>
 80071a6:	2308      	movs	r3, #8
 80071a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ac:	e0a1      	b.n	80072f2 <UART_SetConfig+0x2fe>
 80071ae:	2310      	movs	r3, #16
 80071b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071b4:	e09d      	b.n	80072f2 <UART_SetConfig+0x2fe>
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a4a      	ldr	r2, [pc, #296]	; (80072e4 <UART_SetConfig+0x2f0>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d125      	bne.n	800720c <UART_SetConfig+0x218>
 80071c0:	4b45      	ldr	r3, [pc, #276]	; (80072d8 <UART_SetConfig+0x2e4>)
 80071c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80071ca:	2bc0      	cmp	r3, #192	; 0xc0
 80071cc:	d016      	beq.n	80071fc <UART_SetConfig+0x208>
 80071ce:	2bc0      	cmp	r3, #192	; 0xc0
 80071d0:	d818      	bhi.n	8007204 <UART_SetConfig+0x210>
 80071d2:	2b80      	cmp	r3, #128	; 0x80
 80071d4:	d00a      	beq.n	80071ec <UART_SetConfig+0x1f8>
 80071d6:	2b80      	cmp	r3, #128	; 0x80
 80071d8:	d814      	bhi.n	8007204 <UART_SetConfig+0x210>
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d002      	beq.n	80071e4 <UART_SetConfig+0x1f0>
 80071de:	2b40      	cmp	r3, #64	; 0x40
 80071e0:	d008      	beq.n	80071f4 <UART_SetConfig+0x200>
 80071e2:	e00f      	b.n	8007204 <UART_SetConfig+0x210>
 80071e4:	2300      	movs	r3, #0
 80071e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071ea:	e082      	b.n	80072f2 <UART_SetConfig+0x2fe>
 80071ec:	2302      	movs	r3, #2
 80071ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071f2:	e07e      	b.n	80072f2 <UART_SetConfig+0x2fe>
 80071f4:	2304      	movs	r3, #4
 80071f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80071fa:	e07a      	b.n	80072f2 <UART_SetConfig+0x2fe>
 80071fc:	2308      	movs	r3, #8
 80071fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007202:	e076      	b.n	80072f2 <UART_SetConfig+0x2fe>
 8007204:	2310      	movs	r3, #16
 8007206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800720a:	e072      	b.n	80072f2 <UART_SetConfig+0x2fe>
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a35      	ldr	r2, [pc, #212]	; (80072e8 <UART_SetConfig+0x2f4>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d12a      	bne.n	800726c <UART_SetConfig+0x278>
 8007216:	4b30      	ldr	r3, [pc, #192]	; (80072d8 <UART_SetConfig+0x2e4>)
 8007218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800721c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007220:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007224:	d01a      	beq.n	800725c <UART_SetConfig+0x268>
 8007226:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800722a:	d81b      	bhi.n	8007264 <UART_SetConfig+0x270>
 800722c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007230:	d00c      	beq.n	800724c <UART_SetConfig+0x258>
 8007232:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007236:	d815      	bhi.n	8007264 <UART_SetConfig+0x270>
 8007238:	2b00      	cmp	r3, #0
 800723a:	d003      	beq.n	8007244 <UART_SetConfig+0x250>
 800723c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007240:	d008      	beq.n	8007254 <UART_SetConfig+0x260>
 8007242:	e00f      	b.n	8007264 <UART_SetConfig+0x270>
 8007244:	2300      	movs	r3, #0
 8007246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800724a:	e052      	b.n	80072f2 <UART_SetConfig+0x2fe>
 800724c:	2302      	movs	r3, #2
 800724e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007252:	e04e      	b.n	80072f2 <UART_SetConfig+0x2fe>
 8007254:	2304      	movs	r3, #4
 8007256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800725a:	e04a      	b.n	80072f2 <UART_SetConfig+0x2fe>
 800725c:	2308      	movs	r3, #8
 800725e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007262:	e046      	b.n	80072f2 <UART_SetConfig+0x2fe>
 8007264:	2310      	movs	r3, #16
 8007266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800726a:	e042      	b.n	80072f2 <UART_SetConfig+0x2fe>
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a17      	ldr	r2, [pc, #92]	; (80072d0 <UART_SetConfig+0x2dc>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d13a      	bne.n	80072ec <UART_SetConfig+0x2f8>
 8007276:	4b18      	ldr	r3, [pc, #96]	; (80072d8 <UART_SetConfig+0x2e4>)
 8007278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800727c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007280:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007284:	d01a      	beq.n	80072bc <UART_SetConfig+0x2c8>
 8007286:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800728a:	d81b      	bhi.n	80072c4 <UART_SetConfig+0x2d0>
 800728c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007290:	d00c      	beq.n	80072ac <UART_SetConfig+0x2b8>
 8007292:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007296:	d815      	bhi.n	80072c4 <UART_SetConfig+0x2d0>
 8007298:	2b00      	cmp	r3, #0
 800729a:	d003      	beq.n	80072a4 <UART_SetConfig+0x2b0>
 800729c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072a0:	d008      	beq.n	80072b4 <UART_SetConfig+0x2c0>
 80072a2:	e00f      	b.n	80072c4 <UART_SetConfig+0x2d0>
 80072a4:	2300      	movs	r3, #0
 80072a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072aa:	e022      	b.n	80072f2 <UART_SetConfig+0x2fe>
 80072ac:	2302      	movs	r3, #2
 80072ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072b2:	e01e      	b.n	80072f2 <UART_SetConfig+0x2fe>
 80072b4:	2304      	movs	r3, #4
 80072b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ba:	e01a      	b.n	80072f2 <UART_SetConfig+0x2fe>
 80072bc:	2308      	movs	r3, #8
 80072be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072c2:	e016      	b.n	80072f2 <UART_SetConfig+0x2fe>
 80072c4:	2310      	movs	r3, #16
 80072c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80072ca:	e012      	b.n	80072f2 <UART_SetConfig+0x2fe>
 80072cc:	cfff69f3 	.word	0xcfff69f3
 80072d0:	40008000 	.word	0x40008000
 80072d4:	40013800 	.word	0x40013800
 80072d8:	40021000 	.word	0x40021000
 80072dc:	40004400 	.word	0x40004400
 80072e0:	40004800 	.word	0x40004800
 80072e4:	40004c00 	.word	0x40004c00
 80072e8:	40005000 	.word	0x40005000
 80072ec:	2310      	movs	r3, #16
 80072ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4aae      	ldr	r2, [pc, #696]	; (80075b0 <UART_SetConfig+0x5bc>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	f040 8097 	bne.w	800742c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80072fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007302:	2b08      	cmp	r3, #8
 8007304:	d823      	bhi.n	800734e <UART_SetConfig+0x35a>
 8007306:	a201      	add	r2, pc, #4	; (adr r2, 800730c <UART_SetConfig+0x318>)
 8007308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730c:	08007331 	.word	0x08007331
 8007310:	0800734f 	.word	0x0800734f
 8007314:	08007339 	.word	0x08007339
 8007318:	0800734f 	.word	0x0800734f
 800731c:	0800733f 	.word	0x0800733f
 8007320:	0800734f 	.word	0x0800734f
 8007324:	0800734f 	.word	0x0800734f
 8007328:	0800734f 	.word	0x0800734f
 800732c:	08007347 	.word	0x08007347
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007330:	f7fe fc9a 	bl	8005c68 <HAL_RCC_GetPCLK1Freq>
 8007334:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007336:	e010      	b.n	800735a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007338:	4b9e      	ldr	r3, [pc, #632]	; (80075b4 <UART_SetConfig+0x5c0>)
 800733a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800733c:	e00d      	b.n	800735a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800733e:	f7fe fc25 	bl	8005b8c <HAL_RCC_GetSysClockFreq>
 8007342:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007344:	e009      	b.n	800735a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007346:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800734a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800734c:	e005      	b.n	800735a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800734e:	2300      	movs	r3, #0
 8007350:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007358:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 8130 	beq.w	80075c2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007366:	4a94      	ldr	r2, [pc, #592]	; (80075b8 <UART_SetConfig+0x5c4>)
 8007368:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800736c:	461a      	mov	r2, r3
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	fbb3 f3f2 	udiv	r3, r3, r2
 8007374:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007376:	697b      	ldr	r3, [r7, #20]
 8007378:	685a      	ldr	r2, [r3, #4]
 800737a:	4613      	mov	r3, r2
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	4413      	add	r3, r2
 8007380:	69ba      	ldr	r2, [r7, #24]
 8007382:	429a      	cmp	r2, r3
 8007384:	d305      	bcc.n	8007392 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007386:	697b      	ldr	r3, [r7, #20]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800738c:	69ba      	ldr	r2, [r7, #24]
 800738e:	429a      	cmp	r2, r3
 8007390:	d903      	bls.n	800739a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8007392:	2301      	movs	r3, #1
 8007394:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007398:	e113      	b.n	80075c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800739a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800739c:	2200      	movs	r2, #0
 800739e:	60bb      	str	r3, [r7, #8]
 80073a0:	60fa      	str	r2, [r7, #12]
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	4a84      	ldr	r2, [pc, #528]	; (80075b8 <UART_SetConfig+0x5c4>)
 80073a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	2200      	movs	r2, #0
 80073b0:	603b      	str	r3, [r7, #0]
 80073b2:	607a      	str	r2, [r7, #4]
 80073b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073b8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80073bc:	f7f8 ff2c 	bl	8000218 <__aeabi_uldivmod>
 80073c0:	4602      	mov	r2, r0
 80073c2:	460b      	mov	r3, r1
 80073c4:	4610      	mov	r0, r2
 80073c6:	4619      	mov	r1, r3
 80073c8:	f04f 0200 	mov.w	r2, #0
 80073cc:	f04f 0300 	mov.w	r3, #0
 80073d0:	020b      	lsls	r3, r1, #8
 80073d2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80073d6:	0202      	lsls	r2, r0, #8
 80073d8:	6979      	ldr	r1, [r7, #20]
 80073da:	6849      	ldr	r1, [r1, #4]
 80073dc:	0849      	lsrs	r1, r1, #1
 80073de:	2000      	movs	r0, #0
 80073e0:	460c      	mov	r4, r1
 80073e2:	4605      	mov	r5, r0
 80073e4:	eb12 0804 	adds.w	r8, r2, r4
 80073e8:	eb43 0905 	adc.w	r9, r3, r5
 80073ec:	697b      	ldr	r3, [r7, #20]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	469a      	mov	sl, r3
 80073f4:	4693      	mov	fp, r2
 80073f6:	4652      	mov	r2, sl
 80073f8:	465b      	mov	r3, fp
 80073fa:	4640      	mov	r0, r8
 80073fc:	4649      	mov	r1, r9
 80073fe:	f7f8 ff0b 	bl	8000218 <__aeabi_uldivmod>
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	4613      	mov	r3, r2
 8007408:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800740a:	6a3b      	ldr	r3, [r7, #32]
 800740c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007410:	d308      	bcc.n	8007424 <UART_SetConfig+0x430>
 8007412:	6a3b      	ldr	r3, [r7, #32]
 8007414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007418:	d204      	bcs.n	8007424 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	6a3a      	ldr	r2, [r7, #32]
 8007420:	60da      	str	r2, [r3, #12]
 8007422:	e0ce      	b.n	80075c2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007424:	2301      	movs	r3, #1
 8007426:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800742a:	e0ca      	b.n	80075c2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800742c:	697b      	ldr	r3, [r7, #20]
 800742e:	69db      	ldr	r3, [r3, #28]
 8007430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007434:	d166      	bne.n	8007504 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007436:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800743a:	2b08      	cmp	r3, #8
 800743c:	d827      	bhi.n	800748e <UART_SetConfig+0x49a>
 800743e:	a201      	add	r2, pc, #4	; (adr r2, 8007444 <UART_SetConfig+0x450>)
 8007440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007444:	08007469 	.word	0x08007469
 8007448:	08007471 	.word	0x08007471
 800744c:	08007479 	.word	0x08007479
 8007450:	0800748f 	.word	0x0800748f
 8007454:	0800747f 	.word	0x0800747f
 8007458:	0800748f 	.word	0x0800748f
 800745c:	0800748f 	.word	0x0800748f
 8007460:	0800748f 	.word	0x0800748f
 8007464:	08007487 	.word	0x08007487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007468:	f7fe fbfe 	bl	8005c68 <HAL_RCC_GetPCLK1Freq>
 800746c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800746e:	e014      	b.n	800749a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007470:	f7fe fc10 	bl	8005c94 <HAL_RCC_GetPCLK2Freq>
 8007474:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007476:	e010      	b.n	800749a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007478:	4b4e      	ldr	r3, [pc, #312]	; (80075b4 <UART_SetConfig+0x5c0>)
 800747a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800747c:	e00d      	b.n	800749a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800747e:	f7fe fb85 	bl	8005b8c <HAL_RCC_GetSysClockFreq>
 8007482:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007484:	e009      	b.n	800749a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800748a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800748c:	e005      	b.n	800749a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800748e:	2300      	movs	r3, #0
 8007490:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007498:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800749a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 8090 	beq.w	80075c2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	4a44      	ldr	r2, [pc, #272]	; (80075b8 <UART_SetConfig+0x5c4>)
 80074a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074ac:	461a      	mov	r2, r3
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80074b4:	005a      	lsls	r2, r3, #1
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	085b      	lsrs	r3, r3, #1
 80074bc:	441a      	add	r2, r3
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80074c8:	6a3b      	ldr	r3, [r7, #32]
 80074ca:	2b0f      	cmp	r3, #15
 80074cc:	d916      	bls.n	80074fc <UART_SetConfig+0x508>
 80074ce:	6a3b      	ldr	r3, [r7, #32]
 80074d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074d4:	d212      	bcs.n	80074fc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80074d6:	6a3b      	ldr	r3, [r7, #32]
 80074d8:	b29b      	uxth	r3, r3
 80074da:	f023 030f 	bic.w	r3, r3, #15
 80074de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	085b      	lsrs	r3, r3, #1
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	f003 0307 	and.w	r3, r3, #7
 80074ea:	b29a      	uxth	r2, r3
 80074ec:	8bfb      	ldrh	r3, [r7, #30]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80074f2:	697b      	ldr	r3, [r7, #20]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	8bfa      	ldrh	r2, [r7, #30]
 80074f8:	60da      	str	r2, [r3, #12]
 80074fa:	e062      	b.n	80075c2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80074fc:	2301      	movs	r3, #1
 80074fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007502:	e05e      	b.n	80075c2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007504:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007508:	2b08      	cmp	r3, #8
 800750a:	d828      	bhi.n	800755e <UART_SetConfig+0x56a>
 800750c:	a201      	add	r2, pc, #4	; (adr r2, 8007514 <UART_SetConfig+0x520>)
 800750e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007512:	bf00      	nop
 8007514:	08007539 	.word	0x08007539
 8007518:	08007541 	.word	0x08007541
 800751c:	08007549 	.word	0x08007549
 8007520:	0800755f 	.word	0x0800755f
 8007524:	0800754f 	.word	0x0800754f
 8007528:	0800755f 	.word	0x0800755f
 800752c:	0800755f 	.word	0x0800755f
 8007530:	0800755f 	.word	0x0800755f
 8007534:	08007557 	.word	0x08007557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007538:	f7fe fb96 	bl	8005c68 <HAL_RCC_GetPCLK1Freq>
 800753c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800753e:	e014      	b.n	800756a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007540:	f7fe fba8 	bl	8005c94 <HAL_RCC_GetPCLK2Freq>
 8007544:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007546:	e010      	b.n	800756a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007548:	4b1a      	ldr	r3, [pc, #104]	; (80075b4 <UART_SetConfig+0x5c0>)
 800754a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800754c:	e00d      	b.n	800756a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800754e:	f7fe fb1d 	bl	8005b8c <HAL_RCC_GetSysClockFreq>
 8007552:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007554:	e009      	b.n	800756a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800755a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800755c:	e005      	b.n	800756a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800755e:	2300      	movs	r3, #0
 8007560:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007568:	bf00      	nop
    }

    if (pclk != 0U)
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	2b00      	cmp	r3, #0
 800756e:	d028      	beq.n	80075c2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007574:	4a10      	ldr	r2, [pc, #64]	; (80075b8 <UART_SetConfig+0x5c4>)
 8007576:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800757a:	461a      	mov	r2, r3
 800757c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800757e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	085b      	lsrs	r3, r3, #1
 8007588:	441a      	add	r2, r3
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007592:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007594:	6a3b      	ldr	r3, [r7, #32]
 8007596:	2b0f      	cmp	r3, #15
 8007598:	d910      	bls.n	80075bc <UART_SetConfig+0x5c8>
 800759a:	6a3b      	ldr	r3, [r7, #32]
 800759c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075a0:	d20c      	bcs.n	80075bc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80075a2:	6a3b      	ldr	r3, [r7, #32]
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	60da      	str	r2, [r3, #12]
 80075ac:	e009      	b.n	80075c2 <UART_SetConfig+0x5ce>
 80075ae:	bf00      	nop
 80075b0:	40008000 	.word	0x40008000
 80075b4:	00f42400 	.word	0x00f42400
 80075b8:	0800c6a4 	.word	0x0800c6a4
      }
      else
      {
        ret = HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	2200      	movs	r2, #0
 80075d6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80075d8:	697b      	ldr	r3, [r7, #20]
 80075da:	2200      	movs	r2, #0
 80075dc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80075de:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3730      	adds	r7, #48	; 0x30
 80075e6:	46bd      	mov	sp, r7
 80075e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080075ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f8:	f003 0308 	and.w	r3, r3, #8
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00a      	beq.n	8007616 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	430a      	orrs	r2, r1
 8007614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00a      	beq.n	8007638 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	430a      	orrs	r2, r1
 8007636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763c:	f003 0302 	and.w	r3, r3, #2
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00a      	beq.n	800765a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	430a      	orrs	r2, r1
 8007658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765e:	f003 0304 	and.w	r3, r3, #4
 8007662:	2b00      	cmp	r3, #0
 8007664:	d00a      	beq.n	800767c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	430a      	orrs	r2, r1
 800767a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007680:	f003 0310 	and.w	r3, r3, #16
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00a      	beq.n	800769e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	430a      	orrs	r2, r1
 800769c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a2:	f003 0320 	and.w	r3, r3, #32
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d00a      	beq.n	80076c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	430a      	orrs	r2, r1
 80076be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d01a      	beq.n	8007702 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	685b      	ldr	r3, [r3, #4]
 80076d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	430a      	orrs	r2, r1
 80076e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076ea:	d10a      	bne.n	8007702 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	430a      	orrs	r2, r1
 8007700:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800770a:	2b00      	cmp	r3, #0
 800770c:	d00a      	beq.n	8007724 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	430a      	orrs	r2, r1
 8007722:	605a      	str	r2, [r3, #4]
  }
}
 8007724:	bf00      	nop
 8007726:	370c      	adds	r7, #12
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr

08007730 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b098      	sub	sp, #96	; 0x60
 8007734:	af02      	add	r7, sp, #8
 8007736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007740:	f7f9 fe1a 	bl	8001378 <HAL_GetTick>
 8007744:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	f003 0308 	and.w	r3, r3, #8
 8007750:	2b08      	cmp	r3, #8
 8007752:	d12f      	bne.n	80077b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007754:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800775c:	2200      	movs	r2, #0
 800775e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 f88e 	bl	8007884 <UART_WaitOnFlagUntilTimeout>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d022      	beq.n	80077b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007776:	e853 3f00 	ldrex	r3, [r3]
 800777a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800777c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800777e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007782:	653b      	str	r3, [r7, #80]	; 0x50
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	461a      	mov	r2, r3
 800778a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800778c:	647b      	str	r3, [r7, #68]	; 0x44
 800778e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007790:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007792:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007794:	e841 2300 	strex	r3, r2, [r1]
 8007798:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800779a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800779c:	2b00      	cmp	r3, #0
 800779e:	d1e6      	bne.n	800776e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2220      	movs	r2, #32
 80077a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077b0:	2303      	movs	r3, #3
 80077b2:	e063      	b.n	800787c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0304 	and.w	r3, r3, #4
 80077be:	2b04      	cmp	r3, #4
 80077c0:	d149      	bne.n	8007856 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077c2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077c6:	9300      	str	r3, [sp, #0]
 80077c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077ca:	2200      	movs	r2, #0
 80077cc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 f857 	bl	8007884 <UART_WaitOnFlagUntilTimeout>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d03c      	beq.n	8007856 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e4:	e853 3f00 	ldrex	r3, [r3]
 80077e8:	623b      	str	r3, [r7, #32]
   return(result);
 80077ea:	6a3b      	ldr	r3, [r7, #32]
 80077ec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	461a      	mov	r2, r3
 80077f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077fa:	633b      	str	r3, [r7, #48]	; 0x30
 80077fc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007802:	e841 2300 	strex	r3, r2, [r1]
 8007806:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1e6      	bne.n	80077dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	3308      	adds	r3, #8
 8007814:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	e853 3f00 	ldrex	r3, [r3]
 800781c:	60fb      	str	r3, [r7, #12]
   return(result);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f023 0301 	bic.w	r3, r3, #1
 8007824:	64bb      	str	r3, [r7, #72]	; 0x48
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	3308      	adds	r3, #8
 800782c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800782e:	61fa      	str	r2, [r7, #28]
 8007830:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007832:	69b9      	ldr	r1, [r7, #24]
 8007834:	69fa      	ldr	r2, [r7, #28]
 8007836:	e841 2300 	strex	r3, r2, [r1]
 800783a:	617b      	str	r3, [r7, #20]
   return(result);
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1e5      	bne.n	800780e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2220      	movs	r2, #32
 8007846:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007852:	2303      	movs	r3, #3
 8007854:	e012      	b.n	800787c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2220      	movs	r2, #32
 800785a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2220      	movs	r2, #32
 8007862:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	2200      	movs	r2, #0
 8007876:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800787a:	2300      	movs	r3, #0
}
 800787c:	4618      	mov	r0, r3
 800787e:	3758      	adds	r7, #88	; 0x58
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	603b      	str	r3, [r7, #0]
 8007890:	4613      	mov	r3, r2
 8007892:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007894:	e04f      	b.n	8007936 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007896:	69bb      	ldr	r3, [r7, #24]
 8007898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800789c:	d04b      	beq.n	8007936 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800789e:	f7f9 fd6b 	bl	8001378 <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d302      	bcc.n	80078b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d101      	bne.n	80078b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078b4:	2303      	movs	r3, #3
 80078b6:	e04e      	b.n	8007956 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 0304 	and.w	r3, r3, #4
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d037      	beq.n	8007936 <UART_WaitOnFlagUntilTimeout+0xb2>
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	2b80      	cmp	r3, #128	; 0x80
 80078ca:	d034      	beq.n	8007936 <UART_WaitOnFlagUntilTimeout+0xb2>
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2b40      	cmp	r3, #64	; 0x40
 80078d0:	d031      	beq.n	8007936 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	69db      	ldr	r3, [r3, #28]
 80078d8:	f003 0308 	and.w	r3, r3, #8
 80078dc:	2b08      	cmp	r3, #8
 80078de:	d110      	bne.n	8007902 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2208      	movs	r2, #8
 80078e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f000 f838 	bl	800795e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2208      	movs	r2, #8
 80078f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80078fe:	2301      	movs	r3, #1
 8007900:	e029      	b.n	8007956 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	69db      	ldr	r3, [r3, #28]
 8007908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800790c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007910:	d111      	bne.n	8007936 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800791a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 f81e 	bl	800795e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2220      	movs	r2, #32
 8007926:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	2200      	movs	r2, #0
 800792e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e00f      	b.n	8007956 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	69da      	ldr	r2, [r3, #28]
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	4013      	ands	r3, r2
 8007940:	68ba      	ldr	r2, [r7, #8]
 8007942:	429a      	cmp	r2, r3
 8007944:	bf0c      	ite	eq
 8007946:	2301      	moveq	r3, #1
 8007948:	2300      	movne	r3, #0
 800794a:	b2db      	uxtb	r3, r3
 800794c:	461a      	mov	r2, r3
 800794e:	79fb      	ldrb	r3, [r7, #7]
 8007950:	429a      	cmp	r2, r3
 8007952:	d0a0      	beq.n	8007896 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800795e:	b480      	push	{r7}
 8007960:	b095      	sub	sp, #84	; 0x54
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800796e:	e853 3f00 	ldrex	r3, [r3]
 8007972:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800797a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	461a      	mov	r2, r3
 8007982:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007984:	643b      	str	r3, [r7, #64]	; 0x40
 8007986:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007988:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800798a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800798c:	e841 2300 	strex	r3, r2, [r1]
 8007990:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007994:	2b00      	cmp	r3, #0
 8007996:	d1e6      	bne.n	8007966 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	3308      	adds	r3, #8
 800799e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a0:	6a3b      	ldr	r3, [r7, #32]
 80079a2:	e853 3f00 	ldrex	r3, [r3]
 80079a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079ae:	f023 0301 	bic.w	r3, r3, #1
 80079b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	3308      	adds	r3, #8
 80079ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079c4:	e841 2300 	strex	r3, r2, [r1]
 80079c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1e3      	bne.n	8007998 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d118      	bne.n	8007a0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	e853 3f00 	ldrex	r3, [r3]
 80079e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f023 0310 	bic.w	r3, r3, #16
 80079ec:	647b      	str	r3, [r7, #68]	; 0x44
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	461a      	mov	r2, r3
 80079f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079f6:	61bb      	str	r3, [r7, #24]
 80079f8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	6979      	ldr	r1, [r7, #20]
 80079fc:	69ba      	ldr	r2, [r7, #24]
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	613b      	str	r3, [r7, #16]
   return(result);
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e6      	bne.n	80079d8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007a1e:	bf00      	nop
 8007a20:	3754      	adds	r7, #84	; 0x54
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b085      	sub	sp, #20
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d101      	bne.n	8007a40 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	e027      	b.n	8007a90 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2224      	movs	r2, #36	; 0x24
 8007a4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681a      	ldr	r2, [r3, #0]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f022 0201 	bic.w	r2, r2, #1
 8007a66:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a6e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68fa      	ldr	r2, [r7, #12]
 8007a7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2220      	movs	r2, #32
 8007a82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3714      	adds	r7, #20
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d101      	bne.n	8007ab4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ab0:	2302      	movs	r3, #2
 8007ab2:	e02d      	b.n	8007b10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2224      	movs	r2, #36	; 0x24
 8007ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f022 0201 	bic.w	r2, r2, #1
 8007ada:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	689b      	ldr	r3, [r3, #8]
 8007ae2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	683a      	ldr	r2, [r7, #0]
 8007aec:	430a      	orrs	r2, r1
 8007aee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 f84f 	bl	8007b94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68fa      	ldr	r2, [r7, #12]
 8007afc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2220      	movs	r2, #32
 8007b02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d101      	bne.n	8007b30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	e02d      	b.n	8007b8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2224      	movs	r2, #36	; 0x24
 8007b3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681a      	ldr	r2, [r3, #0]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f022 0201 	bic.w	r2, r2, #1
 8007b56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	683a      	ldr	r2, [r7, #0]
 8007b68:	430a      	orrs	r2, r1
 8007b6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f811 	bl	8007b94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2220      	movs	r2, #32
 8007b7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2200      	movs	r2, #0
 8007b86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b8a:	2300      	movs	r3, #0
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d108      	bne.n	8007bb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007bb4:	e031      	b.n	8007c1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007bb6:	2308      	movs	r3, #8
 8007bb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007bba:	2308      	movs	r3, #8
 8007bbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	689b      	ldr	r3, [r3, #8]
 8007bc4:	0e5b      	lsrs	r3, r3, #25
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	f003 0307 	and.w	r3, r3, #7
 8007bcc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	0f5b      	lsrs	r3, r3, #29
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	f003 0307 	and.w	r3, r3, #7
 8007bdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bde:	7bbb      	ldrb	r3, [r7, #14]
 8007be0:	7b3a      	ldrb	r2, [r7, #12]
 8007be2:	4911      	ldr	r1, [pc, #68]	; (8007c28 <UARTEx_SetNbDataToProcess+0x94>)
 8007be4:	5c8a      	ldrb	r2, [r1, r2]
 8007be6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007bea:	7b3a      	ldrb	r2, [r7, #12]
 8007bec:	490f      	ldr	r1, [pc, #60]	; (8007c2c <UARTEx_SetNbDataToProcess+0x98>)
 8007bee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bf0:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bfc:	7bfb      	ldrb	r3, [r7, #15]
 8007bfe:	7b7a      	ldrb	r2, [r7, #13]
 8007c00:	4909      	ldr	r1, [pc, #36]	; (8007c28 <UARTEx_SetNbDataToProcess+0x94>)
 8007c02:	5c8a      	ldrb	r2, [r1, r2]
 8007c04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c08:	7b7a      	ldrb	r2, [r7, #13]
 8007c0a:	4908      	ldr	r1, [pc, #32]	; (8007c2c <UARTEx_SetNbDataToProcess+0x98>)
 8007c0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c12:	b29a      	uxth	r2, r3
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c1a:	bf00      	nop
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	0800c6bc 	.word	0x0800c6bc
 8007c2c:	0800c6c4 	.word	0x0800c6c4

08007c30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b085      	sub	sp, #20
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007c40:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007c44:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b085      	sub	sp, #20
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007c66:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007c6a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007c72:	b29a      	uxth	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	b29b      	uxth	r3, r3
 8007c78:	43db      	mvns	r3, r3
 8007c7a:	b29b      	uxth	r3, r3
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3714      	adds	r7, #20
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr

08007c94 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	1d3b      	adds	r3, r7, #4
 8007c9e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2201      	movs	r2, #1
 8007ca6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	2200      	movs	r2, #0
 8007cae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b09d      	sub	sp, #116	; 0x74
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	781b      	ldrb	r3, [r3, #0]
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	881b      	ldrh	r3, [r3, #0]
 8007cec:	b29b      	uxth	r3, r3
 8007cee:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cf6:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	78db      	ldrb	r3, [r3, #3]
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d81f      	bhi.n	8007d42 <USB_ActivateEndpoint+0x72>
 8007d02:	a201      	add	r2, pc, #4	; (adr r2, 8007d08 <USB_ActivateEndpoint+0x38>)
 8007d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d08:	08007d19 	.word	0x08007d19
 8007d0c:	08007d35 	.word	0x08007d35
 8007d10:	08007d4b 	.word	0x08007d4b
 8007d14:	08007d27 	.word	0x08007d27
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007d18:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d20:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007d24:	e012      	b.n	8007d4c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007d26:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d2a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8007d2e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007d32:	e00b      	b.n	8007d4c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007d34:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d38:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007d3c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007d40:	e004      	b.n	8007d4c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007d42:	2301      	movs	r3, #1
 8007d44:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007d48:	e000      	b.n	8007d4c <USB_ActivateEndpoint+0x7c>
      break;
 8007d4a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8007d4c:	687a      	ldr	r2, [r7, #4]
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	781b      	ldrb	r3, [r3, #0]
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	441a      	add	r2, r3
 8007d56:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007d5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d6a:	b29b      	uxth	r3, r3
 8007d6c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	781b      	ldrb	r3, [r3, #0]
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4413      	add	r3, r2
 8007d78:	881b      	ldrh	r3, [r3, #0]
 8007d7a:	b29b      	uxth	r3, r3
 8007d7c:	b21b      	sxth	r3, r3
 8007d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d86:	b21a      	sxth	r2, r3
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	b21b      	sxth	r3, r3
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	b21b      	sxth	r3, r3
 8007d92:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	009b      	lsls	r3, r3, #2
 8007d9e:	441a      	add	r2, r3
 8007da0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8007da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007db4:	b29b      	uxth	r3, r3
 8007db6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	7b1b      	ldrb	r3, [r3, #12]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f040 8178 	bne.w	80080b2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8007dc2:	683b      	ldr	r3, [r7, #0]
 8007dc4:	785b      	ldrb	r3, [r3, #1]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 8084 	beq.w	8007ed4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	61bb      	str	r3, [r7, #24]
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	461a      	mov	r2, r3
 8007dda:	69bb      	ldr	r3, [r7, #24]
 8007ddc:	4413      	add	r3, r2
 8007dde:	61bb      	str	r3, [r7, #24]
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	00da      	lsls	r2, r3, #3
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	4413      	add	r3, r2
 8007dea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007dee:	617b      	str	r3, [r7, #20]
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	88db      	ldrh	r3, [r3, #6]
 8007df4:	085b      	lsrs	r3, r3, #1
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	005b      	lsls	r3, r3, #1
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	4413      	add	r3, r2
 8007e0a:	881b      	ldrh	r3, [r3, #0]
 8007e0c:	827b      	strh	r3, [r7, #18]
 8007e0e:	8a7b      	ldrh	r3, [r7, #18]
 8007e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d01b      	beq.n	8007e50 <USB_ActivateEndpoint+0x180>
 8007e18:	687a      	ldr	r2, [r7, #4]
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	009b      	lsls	r3, r3, #2
 8007e20:	4413      	add	r3, r2
 8007e22:	881b      	ldrh	r3, [r3, #0]
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e2e:	823b      	strh	r3, [r7, #16]
 8007e30:	687a      	ldr	r2, [r7, #4]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	441a      	add	r2, r3
 8007e3a:	8a3b      	ldrh	r3, [r7, #16]
 8007e3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	78db      	ldrb	r3, [r3, #3]
 8007e54:	2b01      	cmp	r3, #1
 8007e56:	d020      	beq.n	8007e9a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	781b      	ldrb	r3, [r3, #0]
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4413      	add	r3, r2
 8007e62:	881b      	ldrh	r3, [r3, #0]
 8007e64:	b29b      	uxth	r3, r3
 8007e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e6e:	81bb      	strh	r3, [r7, #12]
 8007e70:	89bb      	ldrh	r3, [r7, #12]
 8007e72:	f083 0320 	eor.w	r3, r3, #32
 8007e76:	81bb      	strh	r3, [r7, #12]
 8007e78:	687a      	ldr	r2, [r7, #4]
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	781b      	ldrb	r3, [r3, #0]
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	441a      	add	r2, r3
 8007e82:	89bb      	ldrh	r3, [r7, #12]
 8007e84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	8013      	strh	r3, [r2, #0]
 8007e98:	e2d5      	b.n	8008446 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4413      	add	r3, r2
 8007ea4:	881b      	ldrh	r3, [r3, #0]
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eb0:	81fb      	strh	r3, [r7, #14]
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	009b      	lsls	r3, r3, #2
 8007eba:	441a      	add	r2, r3
 8007ebc:	89fb      	ldrh	r3, [r7, #14]
 8007ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ece:	b29b      	uxth	r3, r3
 8007ed0:	8013      	strh	r3, [r2, #0]
 8007ed2:	e2b8      	b.n	8008446 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	633b      	str	r3, [r7, #48]	; 0x30
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007ede:	b29b      	uxth	r3, r3
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee4:	4413      	add	r3, r2
 8007ee6:	633b      	str	r3, [r7, #48]	; 0x30
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	00da      	lsls	r2, r3, #3
 8007eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	88db      	ldrh	r3, [r3, #6]
 8007efc:	085b      	lsrs	r3, r3, #1
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	005b      	lsls	r3, r3, #1
 8007f02:	b29a      	uxth	r2, r3
 8007f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f06:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007f12:	b29b      	uxth	r3, r3
 8007f14:	461a      	mov	r2, r3
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	4413      	add	r3, r2
 8007f1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	00da      	lsls	r2, r3, #3
 8007f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f24:	4413      	add	r3, r2
 8007f26:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007f2a:	627b      	str	r3, [r7, #36]	; 0x24
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	881b      	ldrh	r3, [r3, #0]
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	801a      	strh	r2, [r3, #0]
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	691b      	ldr	r3, [r3, #16]
 8007f40:	2b3e      	cmp	r3, #62	; 0x3e
 8007f42:	d91d      	bls.n	8007f80 <USB_ActivateEndpoint+0x2b0>
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	095b      	lsrs	r3, r3, #5
 8007f4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	691b      	ldr	r3, [r3, #16]
 8007f50:	f003 031f 	and.w	r3, r3, #31
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d102      	bne.n	8007f5e <USB_ActivateEndpoint+0x28e>
 8007f58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f5a:	3b01      	subs	r3, #1
 8007f5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	881b      	ldrh	r3, [r3, #0]
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	029b      	lsls	r3, r3, #10
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f74:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	801a      	strh	r2, [r3, #0]
 8007f7e:	e026      	b.n	8007fce <USB_ActivateEndpoint+0x2fe>
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10a      	bne.n	8007f9e <USB_ActivateEndpoint+0x2ce>
 8007f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f8a:	881b      	ldrh	r3, [r3, #0]
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	801a      	strh	r2, [r3, #0]
 8007f9c:	e017      	b.n	8007fce <USB_ActivateEndpoint+0x2fe>
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	691b      	ldr	r3, [r3, #16]
 8007fa2:	085b      	lsrs	r3, r3, #1
 8007fa4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	f003 0301 	and.w	r3, r3, #1
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d002      	beq.n	8007fb8 <USB_ActivateEndpoint+0x2e8>
 8007fb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fba:	881b      	ldrh	r3, [r3, #0]
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fc0:	b29b      	uxth	r3, r3
 8007fc2:	029b      	lsls	r3, r3, #10
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	b29a      	uxth	r2, r3
 8007fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fcc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	4413      	add	r3, r2
 8007fd8:	881b      	ldrh	r3, [r3, #0]
 8007fda:	847b      	strh	r3, [r7, #34]	; 0x22
 8007fdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d01b      	beq.n	800801e <USB_ActivateEndpoint+0x34e>
 8007fe6:	687a      	ldr	r2, [r7, #4]
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	009b      	lsls	r3, r3, #2
 8007fee:	4413      	add	r3, r2
 8007ff0:	881b      	ldrh	r3, [r3, #0]
 8007ff2:	b29b      	uxth	r3, r3
 8007ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ff8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ffc:	843b      	strh	r3, [r7, #32]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	441a      	add	r2, r3
 8008008:	8c3b      	ldrh	r3, [r7, #32]
 800800a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800800e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008012:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008016:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800801a:	b29b      	uxth	r3, r3
 800801c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 800801e:	683b      	ldr	r3, [r7, #0]
 8008020:	781b      	ldrb	r3, [r3, #0]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d124      	bne.n	8008070 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8008026:	687a      	ldr	r2, [r7, #4]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	781b      	ldrb	r3, [r3, #0]
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	4413      	add	r3, r2
 8008030:	881b      	ldrh	r3, [r3, #0]
 8008032:	b29b      	uxth	r3, r3
 8008034:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008038:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800803c:	83bb      	strh	r3, [r7, #28]
 800803e:	8bbb      	ldrh	r3, [r7, #28]
 8008040:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008044:	83bb      	strh	r3, [r7, #28]
 8008046:	8bbb      	ldrh	r3, [r7, #28]
 8008048:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800804c:	83bb      	strh	r3, [r7, #28]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	441a      	add	r2, r3
 8008058:	8bbb      	ldrh	r3, [r7, #28]
 800805a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800805e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800806a:	b29b      	uxth	r3, r3
 800806c:	8013      	strh	r3, [r2, #0]
 800806e:	e1ea      	b.n	8008446 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	781b      	ldrb	r3, [r3, #0]
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	881b      	ldrh	r3, [r3, #0]
 800807c:	b29b      	uxth	r3, r3
 800807e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008086:	83fb      	strh	r3, [r7, #30]
 8008088:	8bfb      	ldrh	r3, [r7, #30]
 800808a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800808e:	83fb      	strh	r3, [r7, #30]
 8008090:	687a      	ldr	r2, [r7, #4]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	441a      	add	r2, r3
 800809a:	8bfb      	ldrh	r3, [r7, #30]
 800809c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80080a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080ac:	b29b      	uxth	r3, r3
 80080ae:	8013      	strh	r3, [r2, #0]
 80080b0:	e1c9      	b.n	8008446 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	78db      	ldrb	r3, [r3, #3]
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d11e      	bne.n	80080f8 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80080ba:	687a      	ldr	r2, [r7, #4]
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	009b      	lsls	r3, r3, #2
 80080c2:	4413      	add	r3, r2
 80080c4:	881b      	ldrh	r3, [r3, #0]
 80080c6:	b29b      	uxth	r3, r3
 80080c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080d0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80080d4:	687a      	ldr	r2, [r7, #4]
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	441a      	add	r2, r3
 80080de:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80080e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080ea:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80080ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	8013      	strh	r3, [r2, #0]
 80080f6:	e01d      	b.n	8008134 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	881b      	ldrh	r3, [r3, #0]
 8008104:	b29b      	uxth	r3, r3
 8008106:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800810a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800810e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	441a      	add	r2, r3
 800811c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8008120:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008124:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008128:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800812c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008130:	b29b      	uxth	r3, r3
 8008132:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800813e:	b29b      	uxth	r3, r3
 8008140:	461a      	mov	r2, r3
 8008142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008144:	4413      	add	r3, r2
 8008146:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	00da      	lsls	r2, r3, #3
 800814e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008150:	4413      	add	r3, r2
 8008152:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008156:	65bb      	str	r3, [r7, #88]	; 0x58
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	891b      	ldrh	r3, [r3, #8]
 800815c:	085b      	lsrs	r3, r3, #1
 800815e:	b29b      	uxth	r3, r3
 8008160:	005b      	lsls	r3, r3, #1
 8008162:	b29a      	uxth	r2, r3
 8008164:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008166:	801a      	strh	r2, [r3, #0]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	657b      	str	r3, [r7, #84]	; 0x54
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008172:	b29b      	uxth	r3, r3
 8008174:	461a      	mov	r2, r3
 8008176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008178:	4413      	add	r3, r2
 800817a:	657b      	str	r3, [r7, #84]	; 0x54
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	00da      	lsls	r2, r3, #3
 8008182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008184:	4413      	add	r3, r2
 8008186:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800818a:	653b      	str	r3, [r7, #80]	; 0x50
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	895b      	ldrh	r3, [r3, #10]
 8008190:	085b      	lsrs	r3, r3, #1
 8008192:	b29b      	uxth	r3, r3
 8008194:	005b      	lsls	r3, r3, #1
 8008196:	b29a      	uxth	r2, r3
 8008198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800819a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800819c:	683b      	ldr	r3, [r7, #0]
 800819e:	785b      	ldrb	r3, [r3, #1]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	f040 8093 	bne.w	80082cc <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	009b      	lsls	r3, r3, #2
 80081ae:	4413      	add	r3, r2
 80081b0:	881b      	ldrh	r3, [r3, #0]
 80081b2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80081b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80081ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d01b      	beq.n	80081fa <USB_ActivateEndpoint+0x52a>
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	4413      	add	r3, r2
 80081cc:	881b      	ldrh	r3, [r3, #0]
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	441a      	add	r2, r3
 80081e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80081e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80081f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	4413      	add	r3, r2
 8008204:	881b      	ldrh	r3, [r3, #0]
 8008206:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8008208:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800820a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800820e:	2b00      	cmp	r3, #0
 8008210:	d01b      	beq.n	800824a <USB_ActivateEndpoint+0x57a>
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	009b      	lsls	r3, r3, #2
 800821a:	4413      	add	r3, r2
 800821c:	881b      	ldrh	r3, [r3, #0]
 800821e:	b29b      	uxth	r3, r3
 8008220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008228:	877b      	strh	r3, [r7, #58]	; 0x3a
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	441a      	add	r2, r3
 8008234:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8008236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800823a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800823e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008242:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008246:	b29b      	uxth	r3, r3
 8008248:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	4413      	add	r3, r2
 8008254:	881b      	ldrh	r3, [r3, #0]
 8008256:	b29b      	uxth	r3, r3
 8008258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800825c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008260:	873b      	strh	r3, [r7, #56]	; 0x38
 8008262:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008264:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8008268:	873b      	strh	r3, [r7, #56]	; 0x38
 800826a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800826c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8008270:	873b      	strh	r3, [r7, #56]	; 0x38
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	441a      	add	r2, r3
 800827c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800827e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008282:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008286:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800828a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800828e:	b29b      	uxth	r3, r3
 8008290:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	4413      	add	r3, r2
 800829c:	881b      	ldrh	r3, [r3, #0]
 800829e:	b29b      	uxth	r3, r3
 80082a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082a8:	86fb      	strh	r3, [r7, #54]	; 0x36
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	781b      	ldrb	r3, [r3, #0]
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	441a      	add	r2, r3
 80082b4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80082b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80082c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082c6:	b29b      	uxth	r3, r3
 80082c8:	8013      	strh	r3, [r2, #0]
 80082ca:	e0bc      	b.n	8008446 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80082cc:	687a      	ldr	r2, [r7, #4]
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	4413      	add	r3, r2
 80082d6:	881b      	ldrh	r3, [r3, #0]
 80082d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80082dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80082e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d01d      	beq.n	8008324 <USB_ActivateEndpoint+0x654>
 80082e8:	687a      	ldr	r2, [r7, #4]
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	4413      	add	r3, r2
 80082f2:	881b      	ldrh	r3, [r3, #0]
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082fe:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8008302:	687a      	ldr	r2, [r7, #4]
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	781b      	ldrb	r3, [r3, #0]
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	441a      	add	r2, r3
 800830c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008310:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008314:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008318:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800831c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008320:	b29b      	uxth	r3, r3
 8008322:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4413      	add	r3, r2
 800832e:	881b      	ldrh	r3, [r3, #0]
 8008330:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008334:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833c:	2b00      	cmp	r3, #0
 800833e:	d01d      	beq.n	800837c <USB_ActivateEndpoint+0x6ac>
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	683b      	ldr	r3, [r7, #0]
 8008344:	781b      	ldrb	r3, [r3, #0]
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	4413      	add	r3, r2
 800834a:	881b      	ldrh	r3, [r3, #0]
 800834c:	b29b      	uxth	r3, r3
 800834e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008356:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	781b      	ldrb	r3, [r3, #0]
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	441a      	add	r2, r3
 8008364:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8008368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800836c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008374:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008378:	b29b      	uxth	r3, r3
 800837a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	78db      	ldrb	r3, [r3, #3]
 8008380:	2b01      	cmp	r3, #1
 8008382:	d024      	beq.n	80083ce <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	009b      	lsls	r3, r3, #2
 800838c:	4413      	add	r3, r2
 800838e:	881b      	ldrh	r3, [r3, #0]
 8008390:	b29b      	uxth	r3, r3
 8008392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008396:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800839a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800839e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80083a2:	f083 0320 	eor.w	r3, r3, #32
 80083a6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	009b      	lsls	r3, r3, #2
 80083b2:	441a      	add	r2, r3
 80083b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80083b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80083c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083c8:	b29b      	uxth	r3, r3
 80083ca:	8013      	strh	r3, [r2, #0]
 80083cc:	e01d      	b.n	800840a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80083ce:	687a      	ldr	r2, [r7, #4]
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	881b      	ldrh	r3, [r3, #0]
 80083da:	b29b      	uxth	r3, r3
 80083dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	781b      	ldrb	r3, [r3, #0]
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	441a      	add	r2, r3
 80083f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80083f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80083fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80083fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008402:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008406:	b29b      	uxth	r3, r3
 8008408:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800840a:	687a      	ldr	r2, [r7, #4]
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	009b      	lsls	r3, r3, #2
 8008412:	4413      	add	r3, r2
 8008414:	881b      	ldrh	r3, [r3, #0]
 8008416:	b29b      	uxth	r3, r3
 8008418:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800841c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008420:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	009b      	lsls	r3, r3, #2
 800842c:	441a      	add	r2, r3
 800842e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008432:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008436:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800843a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800843e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008442:	b29b      	uxth	r3, r3
 8008444:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8008446:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800844a:	4618      	mov	r0, r3
 800844c:	3774      	adds	r7, #116	; 0x74
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop

08008458 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008458:	b480      	push	{r7}
 800845a:	b08d      	sub	sp, #52	; 0x34
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	7b1b      	ldrb	r3, [r3, #12]
 8008466:	2b00      	cmp	r3, #0
 8008468:	f040 808e 	bne.w	8008588 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	785b      	ldrb	r3, [r3, #1]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d044      	beq.n	80084fe <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	009b      	lsls	r3, r3, #2
 800847c:	4413      	add	r3, r2
 800847e:	881b      	ldrh	r3, [r3, #0]
 8008480:	81bb      	strh	r3, [r7, #12]
 8008482:	89bb      	ldrh	r3, [r7, #12]
 8008484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008488:	2b00      	cmp	r3, #0
 800848a:	d01b      	beq.n	80084c4 <USB_DeactivateEndpoint+0x6c>
 800848c:	687a      	ldr	r2, [r7, #4]
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	009b      	lsls	r3, r3, #2
 8008494:	4413      	add	r3, r2
 8008496:	881b      	ldrh	r3, [r3, #0]
 8008498:	b29b      	uxth	r3, r3
 800849a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800849e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084a2:	817b      	strh	r3, [r7, #10]
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	441a      	add	r2, r3
 80084ae:	897b      	ldrh	r3, [r7, #10]
 80084b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80084c0:	b29b      	uxth	r3, r3
 80084c2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	881b      	ldrh	r3, [r3, #0]
 80084d0:	b29b      	uxth	r3, r3
 80084d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80084d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084da:	813b      	strh	r3, [r7, #8]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	441a      	add	r2, r3
 80084e6:	893b      	ldrh	r3, [r7, #8]
 80084e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80084f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	8013      	strh	r3, [r2, #0]
 80084fc:	e192      	b.n	8008824 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	009b      	lsls	r3, r3, #2
 8008506:	4413      	add	r3, r2
 8008508:	881b      	ldrh	r3, [r3, #0]
 800850a:	827b      	strh	r3, [r7, #18]
 800850c:	8a7b      	ldrh	r3, [r7, #18]
 800850e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008512:	2b00      	cmp	r3, #0
 8008514:	d01b      	beq.n	800854e <USB_DeactivateEndpoint+0xf6>
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	009b      	lsls	r3, r3, #2
 800851e:	4413      	add	r3, r2
 8008520:	881b      	ldrh	r3, [r3, #0]
 8008522:	b29b      	uxth	r3, r3
 8008524:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800852c:	823b      	strh	r3, [r7, #16]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	441a      	add	r2, r3
 8008538:	8a3b      	ldrh	r3, [r7, #16]
 800853a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800853e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008542:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008546:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800854a:	b29b      	uxth	r3, r3
 800854c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	009b      	lsls	r3, r3, #2
 8008556:	4413      	add	r3, r2
 8008558:	881b      	ldrh	r3, [r3, #0]
 800855a:	b29b      	uxth	r3, r3
 800855c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008560:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008564:	81fb      	strh	r3, [r7, #14]
 8008566:	687a      	ldr	r2, [r7, #4]
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	441a      	add	r2, r3
 8008570:	89fb      	ldrh	r3, [r7, #14]
 8008572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800857a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800857e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008582:	b29b      	uxth	r3, r3
 8008584:	8013      	strh	r3, [r2, #0]
 8008586:	e14d      	b.n	8008824 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	785b      	ldrb	r3, [r3, #1]
 800858c:	2b00      	cmp	r3, #0
 800858e:	f040 80a5 	bne.w	80086dc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8008592:	687a      	ldr	r2, [r7, #4]
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4413      	add	r3, r2
 800859c:	881b      	ldrh	r3, [r3, #0]
 800859e:	843b      	strh	r3, [r7, #32]
 80085a0:	8c3b      	ldrh	r3, [r7, #32]
 80085a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d01b      	beq.n	80085e2 <USB_DeactivateEndpoint+0x18a>
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	881b      	ldrh	r3, [r3, #0]
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085c0:	83fb      	strh	r3, [r7, #30]
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	781b      	ldrb	r3, [r3, #0]
 80085c8:	009b      	lsls	r3, r3, #2
 80085ca:	441a      	add	r2, r3
 80085cc:	8bfb      	ldrh	r3, [r7, #30]
 80085ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80085d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80085d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80085da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085de:	b29b      	uxth	r3, r3
 80085e0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80085e2:	687a      	ldr	r2, [r7, #4]
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	009b      	lsls	r3, r3, #2
 80085ea:	4413      	add	r3, r2
 80085ec:	881b      	ldrh	r3, [r3, #0]
 80085ee:	83bb      	strh	r3, [r7, #28]
 80085f0:	8bbb      	ldrh	r3, [r7, #28]
 80085f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d01b      	beq.n	8008632 <USB_DeactivateEndpoint+0x1da>
 80085fa:	687a      	ldr	r2, [r7, #4]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	781b      	ldrb	r3, [r3, #0]
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	4413      	add	r3, r2
 8008604:	881b      	ldrh	r3, [r3, #0]
 8008606:	b29b      	uxth	r3, r3
 8008608:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800860c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008610:	837b      	strh	r3, [r7, #26]
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	683b      	ldr	r3, [r7, #0]
 8008616:	781b      	ldrb	r3, [r3, #0]
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	441a      	add	r2, r3
 800861c:	8b7b      	ldrh	r3, [r7, #26]
 800861e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008622:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800862a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800862e:	b29b      	uxth	r3, r3
 8008630:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008632:	687a      	ldr	r2, [r7, #4]
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	781b      	ldrb	r3, [r3, #0]
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4413      	add	r3, r2
 800863c:	881b      	ldrh	r3, [r3, #0]
 800863e:	b29b      	uxth	r3, r3
 8008640:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008644:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008648:	833b      	strh	r3, [r7, #24]
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	781b      	ldrb	r3, [r3, #0]
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	441a      	add	r2, r3
 8008654:	8b3b      	ldrh	r3, [r7, #24]
 8008656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800865a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800865e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008662:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008666:	b29b      	uxth	r3, r3
 8008668:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	683b      	ldr	r3, [r7, #0]
 800866e:	781b      	ldrb	r3, [r3, #0]
 8008670:	009b      	lsls	r3, r3, #2
 8008672:	4413      	add	r3, r2
 8008674:	881b      	ldrh	r3, [r3, #0]
 8008676:	b29b      	uxth	r3, r3
 8008678:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800867c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008680:	82fb      	strh	r3, [r7, #22]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	441a      	add	r2, r3
 800868c:	8afb      	ldrh	r3, [r7, #22]
 800868e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800869a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800869e:	b29b      	uxth	r3, r3
 80086a0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	009b      	lsls	r3, r3, #2
 80086aa:	4413      	add	r3, r2
 80086ac:	881b      	ldrh	r3, [r3, #0]
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80086b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80086b8:	82bb      	strh	r3, [r7, #20]
 80086ba:	687a      	ldr	r2, [r7, #4]
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	441a      	add	r2, r3
 80086c4:	8abb      	ldrh	r3, [r7, #20]
 80086c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80086ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80086ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80086d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	8013      	strh	r3, [r2, #0]
 80086da:	e0a3      	b.n	8008824 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80086dc:	687a      	ldr	r2, [r7, #4]
 80086de:	683b      	ldr	r3, [r7, #0]
 80086e0:	781b      	ldrb	r3, [r3, #0]
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	4413      	add	r3, r2
 80086e6:	881b      	ldrh	r3, [r3, #0]
 80086e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80086ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80086ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d01b      	beq.n	800872c <USB_DeactivateEndpoint+0x2d4>
 80086f4:	687a      	ldr	r2, [r7, #4]
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	781b      	ldrb	r3, [r3, #0]
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	881b      	ldrh	r3, [r3, #0]
 8008700:	b29b      	uxth	r3, r3
 8008702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800870a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	009b      	lsls	r3, r3, #2
 8008714:	441a      	add	r2, r3
 8008716:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008718:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800871c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008720:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008728:	b29b      	uxth	r3, r3
 800872a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	009b      	lsls	r3, r3, #2
 8008734:	4413      	add	r3, r2
 8008736:	881b      	ldrh	r3, [r3, #0]
 8008738:	857b      	strh	r3, [r7, #42]	; 0x2a
 800873a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800873c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008740:	2b00      	cmp	r3, #0
 8008742:	d01b      	beq.n	800877c <USB_DeactivateEndpoint+0x324>
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	009b      	lsls	r3, r3, #2
 800874c:	4413      	add	r3, r2
 800874e:	881b      	ldrh	r3, [r3, #0]
 8008750:	b29b      	uxth	r3, r3
 8008752:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008756:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800875a:	853b      	strh	r3, [r7, #40]	; 0x28
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	781b      	ldrb	r3, [r3, #0]
 8008762:	009b      	lsls	r3, r3, #2
 8008764:	441a      	add	r2, r3
 8008766:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008768:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800876c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008774:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008778:	b29b      	uxth	r3, r3
 800877a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	683b      	ldr	r3, [r7, #0]
 8008780:	781b      	ldrb	r3, [r3, #0]
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4413      	add	r3, r2
 8008786:	881b      	ldrh	r3, [r3, #0]
 8008788:	b29b      	uxth	r3, r3
 800878a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800878e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008792:	84fb      	strh	r3, [r7, #38]	; 0x26
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	009b      	lsls	r3, r3, #2
 800879c:	441a      	add	r2, r3
 800879e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80087a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087a8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80087ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087b0:	b29b      	uxth	r3, r3
 80087b2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80087b4:	687a      	ldr	r2, [r7, #4]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	881b      	ldrh	r3, [r3, #0]
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087ca:	84bb      	strh	r3, [r7, #36]	; 0x24
 80087cc:	687a      	ldr	r2, [r7, #4]
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	781b      	ldrb	r3, [r3, #0]
 80087d2:	009b      	lsls	r3, r3, #2
 80087d4:	441a      	add	r2, r3
 80087d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80087dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80087e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80087ec:	687a      	ldr	r2, [r7, #4]
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	781b      	ldrb	r3, [r3, #0]
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	4413      	add	r3, r2
 80087f6:	881b      	ldrh	r3, [r3, #0]
 80087f8:	b29b      	uxth	r3, r3
 80087fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80087fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008802:	847b      	strh	r3, [r7, #34]	; 0x22
 8008804:	687a      	ldr	r2, [r7, #4]
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	781b      	ldrb	r3, [r3, #0]
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	441a      	add	r2, r3
 800880e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800881c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008820:	b29b      	uxth	r3, r3
 8008822:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008824:	2300      	movs	r3, #0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3734      	adds	r7, #52	; 0x34
 800882a:	46bd      	mov	sp, r7
 800882c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008830:	4770      	bx	lr

08008832 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b0c2      	sub	sp, #264	; 0x108
 8008836:	af00      	add	r7, sp, #0
 8008838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800883c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008840:	6018      	str	r0, [r3, #0]
 8008842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800884a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800884c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008850:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	785b      	ldrb	r3, [r3, #1]
 8008858:	2b01      	cmp	r3, #1
 800885a:	f040 86b7 	bne.w	80095cc <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800885e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008862:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	699a      	ldr	r2, [r3, #24]
 800886a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800886e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	429a      	cmp	r2, r3
 8008878:	d908      	bls.n	800888c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800887a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800887e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800888a:	e007      	b.n	800889c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800888c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008890:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800889c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	7b1b      	ldrb	r3, [r3, #12]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d13a      	bne.n	8008922 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80088ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	6959      	ldr	r1, [r3, #20]
 80088b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	88da      	ldrh	r2, [r3, #6]
 80088c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80088ce:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80088d2:	6800      	ldr	r0, [r0, #0]
 80088d4:	f001 fc98 	bl	800a208 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80088d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	613b      	str	r3, [r7, #16]
 80088e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	461a      	mov	r2, r3
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	4413      	add	r3, r2
 80088fa:	613b      	str	r3, [r7, #16]
 80088fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008900:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	781b      	ldrb	r3, [r3, #0]
 8008908:	00da      	lsls	r2, r3, #3
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	4413      	add	r3, r2
 800890e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008912:	60fb      	str	r3, [r7, #12]
 8008914:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008918:	b29a      	uxth	r2, r3
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	801a      	strh	r2, [r3, #0]
 800891e:	f000 be1f 	b.w	8009560 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008922:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008926:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	78db      	ldrb	r3, [r3, #3]
 800892e:	2b02      	cmp	r3, #2
 8008930:	f040 8462 	bne.w	80091f8 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008934:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008938:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	6a1a      	ldr	r2, [r3, #32]
 8008940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	691b      	ldr	r3, [r3, #16]
 800894c:	429a      	cmp	r2, r3
 800894e:	f240 83df 	bls.w	8009110 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008952:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008956:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800895a:	681a      	ldr	r2, [r3, #0]
 800895c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008960:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	781b      	ldrb	r3, [r3, #0]
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	881b      	ldrh	r3, [r3, #0]
 800896e:	b29b      	uxth	r3, r3
 8008970:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008978:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800897c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008980:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008984:	681a      	ldr	r2, [r3, #0]
 8008986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800898a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	441a      	add	r2, r3
 8008996:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800899a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800899e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80089a2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80089a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80089ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6a1a      	ldr	r2, [r3, #32]
 80089ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089be:	1ad2      	subs	r2, r2, r3
 80089c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80089cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	881b      	ldrh	r3, [r3, #0]
 80089e8:	b29b      	uxth	r3, r3
 80089ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	f000 81c7 	beq.w	8008d82 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80089f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089f8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	633b      	str	r3, [r7, #48]	; 0x30
 8008a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	785b      	ldrb	r3, [r3, #1]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d177      	bne.n	8008b00 <USB_EPStartXfer+0x2ce>
 8008a10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a20:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008a2a:	b29b      	uxth	r3, r3
 8008a2c:	461a      	mov	r2, r3
 8008a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a30:	4413      	add	r3, r2
 8008a32:	62bb      	str	r3, [r7, #40]	; 0x28
 8008a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a38:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	00da      	lsls	r2, r3, #3
 8008a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a44:	4413      	add	r3, r2
 8008a46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4e:	881b      	ldrh	r3, [r3, #0]
 8008a50:	b29b      	uxth	r3, r3
 8008a52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a56:	b29a      	uxth	r2, r3
 8008a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a5a:	801a      	strh	r2, [r3, #0]
 8008a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a60:	2b3e      	cmp	r3, #62	; 0x3e
 8008a62:	d921      	bls.n	8008aa8 <USB_EPStartXfer+0x276>
 8008a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a68:	095b      	lsrs	r3, r3, #5
 8008a6a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008a6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a72:	f003 031f 	and.w	r3, r3, #31
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d104      	bne.n	8008a84 <USB_EPStartXfer+0x252>
 8008a7a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a7e:	3b01      	subs	r3, #1
 8008a80:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a86:	881b      	ldrh	r3, [r3, #0]
 8008a88:	b29a      	uxth	r2, r3
 8008a8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	029b      	lsls	r3, r3, #10
 8008a92:	b29b      	uxth	r3, r3
 8008a94:	4313      	orrs	r3, r2
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008a9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa4:	801a      	strh	r2, [r3, #0]
 8008aa6:	e050      	b.n	8008b4a <USB_EPStartXfer+0x318>
 8008aa8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d10a      	bne.n	8008ac6 <USB_EPStartXfer+0x294>
 8008ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab2:	881b      	ldrh	r3, [r3, #0]
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008aba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008abe:	b29a      	uxth	r2, r3
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	801a      	strh	r2, [r3, #0]
 8008ac4:	e041      	b.n	8008b4a <USB_EPStartXfer+0x318>
 8008ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008aca:	085b      	lsrs	r3, r3, #1
 8008acc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ad4:	f003 0301 	and.w	r3, r3, #1
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d004      	beq.n	8008ae6 <USB_EPStartXfer+0x2b4>
 8008adc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae8:	881b      	ldrh	r3, [r3, #0]
 8008aea:	b29a      	uxth	r2, r3
 8008aec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	029b      	lsls	r3, r3, #10
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	4313      	orrs	r3, r2
 8008af8:	b29a      	uxth	r2, r3
 8008afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008afc:	801a      	strh	r2, [r3, #0]
 8008afe:	e024      	b.n	8008b4a <USB_EPStartXfer+0x318>
 8008b00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	785b      	ldrb	r3, [r3, #1]
 8008b0c:	2b01      	cmp	r3, #1
 8008b0e:	d11c      	bne.n	8008b4a <USB_EPStartXfer+0x318>
 8008b10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b14:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008b1e:	b29b      	uxth	r3, r3
 8008b20:	461a      	mov	r2, r3
 8008b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b24:	4413      	add	r3, r2
 8008b26:	633b      	str	r3, [r7, #48]	; 0x30
 8008b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	781b      	ldrb	r3, [r3, #0]
 8008b34:	00da      	lsls	r2, r3, #3
 8008b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b38:	4413      	add	r3, r2
 8008b3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008b40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008b4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	895b      	ldrh	r3, [r3, #10]
 8008b56:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008b5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b5e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6959      	ldr	r1, [r3, #20]
 8008b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b6a:	b29b      	uxth	r3, r3
 8008b6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008b70:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008b74:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008b78:	6800      	ldr	r0, [r0, #0]
 8008b7a:	f001 fb45 	bl	800a208 <USB_WritePMA>
            ep->xfer_buff += len;
 8008b7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	695a      	ldr	r2, [r3, #20]
 8008b8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b8e:	441a      	add	r2, r3
 8008b90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008b94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008b9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	6a1a      	ldr	r2, [r3, #32]
 8008ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	691b      	ldr	r3, [r3, #16]
 8008bb4:	429a      	cmp	r2, r3
 8008bb6:	d90f      	bls.n	8008bd8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8008bb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	6a1a      	ldr	r2, [r3, #32]
 8008bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bc8:	1ad2      	subs	r2, r2, r3
 8008bca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	621a      	str	r2, [r3, #32]
 8008bd6:	e00e      	b.n	8008bf6 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8008bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	6a1b      	ldr	r3, [r3, #32]
 8008be4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008be8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008bf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	785b      	ldrb	r3, [r3, #1]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d177      	bne.n	8008cf6 <USB_EPStartXfer+0x4c4>
 8008c06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	61bb      	str	r3, [r7, #24]
 8008c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008c20:	b29b      	uxth	r3, r3
 8008c22:	461a      	mov	r2, r3
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	4413      	add	r3, r2
 8008c28:	61bb      	str	r3, [r7, #24]
 8008c2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	781b      	ldrb	r3, [r3, #0]
 8008c36:	00da      	lsls	r2, r3, #3
 8008c38:	69bb      	ldr	r3, [r7, #24]
 8008c3a:	4413      	add	r3, r2
 8008c3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008c40:	617b      	str	r3, [r7, #20]
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	881b      	ldrh	r3, [r3, #0]
 8008c46:	b29b      	uxth	r3, r3
 8008c48:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008c4c:	b29a      	uxth	r2, r3
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	801a      	strh	r2, [r3, #0]
 8008c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c56:	2b3e      	cmp	r3, #62	; 0x3e
 8008c58:	d921      	bls.n	8008c9e <USB_EPStartXfer+0x46c>
 8008c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c5e:	095b      	lsrs	r3, r3, #5
 8008c60:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c68:	f003 031f 	and.w	r3, r3, #31
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d104      	bne.n	8008c7a <USB_EPStartXfer+0x448>
 8008c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c74:	3b01      	subs	r3, #1
 8008c76:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	881b      	ldrh	r3, [r3, #0]
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c84:	b29b      	uxth	r3, r3
 8008c86:	029b      	lsls	r3, r3, #10
 8008c88:	b29b      	uxth	r3, r3
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008c96:	b29a      	uxth	r2, r3
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	801a      	strh	r2, [r3, #0]
 8008c9c:	e056      	b.n	8008d4c <USB_EPStartXfer+0x51a>
 8008c9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d10a      	bne.n	8008cbc <USB_EPStartXfer+0x48a>
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	881b      	ldrh	r3, [r3, #0]
 8008caa:	b29b      	uxth	r3, r3
 8008cac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008cb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008cb4:	b29a      	uxth	r2, r3
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	801a      	strh	r2, [r3, #0]
 8008cba:	e047      	b.n	8008d4c <USB_EPStartXfer+0x51a>
 8008cbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cc0:	085b      	lsrs	r3, r3, #1
 8008cc2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008cc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cca:	f003 0301 	and.w	r3, r3, #1
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d004      	beq.n	8008cdc <USB_EPStartXfer+0x4aa>
 8008cd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	881b      	ldrh	r3, [r3, #0]
 8008ce0:	b29a      	uxth	r2, r3
 8008ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	029b      	lsls	r3, r3, #10
 8008cea:	b29b      	uxth	r3, r3
 8008cec:	4313      	orrs	r3, r2
 8008cee:	b29a      	uxth	r2, r3
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	801a      	strh	r2, [r3, #0]
 8008cf4:	e02a      	b.n	8008d4c <USB_EPStartXfer+0x51a>
 8008cf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	785b      	ldrb	r3, [r3, #1]
 8008d02:	2b01      	cmp	r3, #1
 8008d04:	d122      	bne.n	8008d4c <USB_EPStartXfer+0x51a>
 8008d06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	623b      	str	r3, [r7, #32]
 8008d12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d16:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	461a      	mov	r2, r3
 8008d24:	6a3b      	ldr	r3, [r7, #32]
 8008d26:	4413      	add	r3, r2
 8008d28:	623b      	str	r3, [r7, #32]
 8008d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	781b      	ldrb	r3, [r3, #0]
 8008d36:	00da      	lsls	r2, r3, #3
 8008d38:	6a3b      	ldr	r3, [r7, #32]
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008d40:	61fb      	str	r3, [r7, #28]
 8008d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d46:	b29a      	uxth	r2, r3
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d50:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	891b      	ldrh	r3, [r3, #8]
 8008d58:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008d5c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d60:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	6959      	ldr	r1, [r3, #20]
 8008d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008d72:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008d76:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008d7a:	6800      	ldr	r0, [r0, #0]
 8008d7c:	f001 fa44 	bl	800a208 <USB_WritePMA>
 8008d80:	e3ee      	b.n	8009560 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008d82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	785b      	ldrb	r3, [r3, #1]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d177      	bne.n	8008e82 <USB_EPStartXfer+0x650>
 8008d92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008da2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008dac:	b29b      	uxth	r3, r3
 8008dae:	461a      	mov	r2, r3
 8008db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008db2:	4413      	add	r3, r2
 8008db4:	64bb      	str	r3, [r7, #72]	; 0x48
 8008db6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008dba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	00da      	lsls	r2, r3, #3
 8008dc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dc6:	4413      	add	r3, r2
 8008dc8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008dcc:	647b      	str	r3, [r7, #68]	; 0x44
 8008dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008dd0:	881b      	ldrh	r3, [r3, #0]
 8008dd2:	b29b      	uxth	r3, r3
 8008dd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008dd8:	b29a      	uxth	r2, r3
 8008dda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ddc:	801a      	strh	r2, [r3, #0]
 8008dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008de2:	2b3e      	cmp	r3, #62	; 0x3e
 8008de4:	d921      	bls.n	8008e2a <USB_EPStartXfer+0x5f8>
 8008de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dea:	095b      	lsrs	r3, r3, #5
 8008dec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008df4:	f003 031f 	and.w	r3, r3, #31
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d104      	bne.n	8008e06 <USB_EPStartXfer+0x5d4>
 8008dfc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e00:	3b01      	subs	r3, #1
 8008e02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e08:	881b      	ldrh	r3, [r3, #0]
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	029b      	lsls	r3, r3, #10
 8008e14:	b29b      	uxth	r3, r3
 8008e16:	4313      	orrs	r3, r2
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e1e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e22:	b29a      	uxth	r2, r3
 8008e24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e26:	801a      	strh	r2, [r3, #0]
 8008e28:	e056      	b.n	8008ed8 <USB_EPStartXfer+0x6a6>
 8008e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d10a      	bne.n	8008e48 <USB_EPStartXfer+0x616>
 8008e32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e34:	881b      	ldrh	r3, [r3, #0]
 8008e36:	b29b      	uxth	r3, r3
 8008e38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e40:	b29a      	uxth	r2, r3
 8008e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e44:	801a      	strh	r2, [r3, #0]
 8008e46:	e047      	b.n	8008ed8 <USB_EPStartXfer+0x6a6>
 8008e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e4c:	085b      	lsrs	r3, r3, #1
 8008e4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d004      	beq.n	8008e68 <USB_EPStartXfer+0x636>
 8008e5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e62:	3301      	adds	r3, #1
 8008e64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e6a:	881b      	ldrh	r3, [r3, #0]
 8008e6c:	b29a      	uxth	r2, r3
 8008e6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008e72:	b29b      	uxth	r3, r3
 8008e74:	029b      	lsls	r3, r3, #10
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	4313      	orrs	r3, r2
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008e7e:	801a      	strh	r2, [r3, #0]
 8008e80:	e02a      	b.n	8008ed8 <USB_EPStartXfer+0x6a6>
 8008e82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e86:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	785b      	ldrb	r3, [r3, #1]
 8008e8e:	2b01      	cmp	r3, #1
 8008e90:	d122      	bne.n	8008ed8 <USB_EPStartXfer+0x6a6>
 8008e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	653b      	str	r3, [r7, #80]	; 0x50
 8008e9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ea2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	461a      	mov	r2, r3
 8008eb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008eb2:	4413      	add	r3, r2
 8008eb4:	653b      	str	r3, [r7, #80]	; 0x50
 8008eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	781b      	ldrb	r3, [r3, #0]
 8008ec2:	00da      	lsls	r2, r3, #3
 8008ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ec6:	4413      	add	r3, r2
 8008ec8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008ecc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ece:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ed6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8008ed8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008edc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	891b      	ldrh	r3, [r3, #8]
 8008ee4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ee8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	6959      	ldr	r1, [r3, #20]
 8008ef4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ef8:	b29b      	uxth	r3, r3
 8008efa:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008efe:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008f02:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008f06:	6800      	ldr	r0, [r0, #0]
 8008f08:	f001 f97e 	bl	800a208 <USB_WritePMA>
            ep->xfer_buff += len;
 8008f0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f10:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	695a      	ldr	r2, [r3, #20]
 8008f18:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f1c:	441a      	add	r2, r3
 8008f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008f2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6a1a      	ldr	r2, [r3, #32]
 8008f36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d90f      	bls.n	8008f66 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008f46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	6a1a      	ldr	r2, [r3, #32]
 8008f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f56:	1ad2      	subs	r2, r2, r3
 8008f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f5c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	621a      	str	r2, [r3, #32]
 8008f64:	e00e      	b.n	8008f84 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008f66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	6a1b      	ldr	r3, [r3, #32]
 8008f72:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008f76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2200      	movs	r2, #0
 8008f82:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008f84:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f88:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	643b      	str	r3, [r7, #64]	; 0x40
 8008f90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f94:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	785b      	ldrb	r3, [r3, #1]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d177      	bne.n	8009090 <USB_EPStartXfer+0x85e>
 8008fa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fb0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	461a      	mov	r2, r3
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc0:	4413      	add	r3, r2
 8008fc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	00da      	lsls	r2, r3, #3
 8008fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008fda:	637b      	str	r3, [r7, #52]	; 0x34
 8008fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fde:	881b      	ldrh	r3, [r3, #0]
 8008fe0:	b29b      	uxth	r3, r3
 8008fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008fe6:	b29a      	uxth	r2, r3
 8008fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fea:	801a      	strh	r2, [r3, #0]
 8008fec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ff0:	2b3e      	cmp	r3, #62	; 0x3e
 8008ff2:	d921      	bls.n	8009038 <USB_EPStartXfer+0x806>
 8008ff4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ff8:	095b      	lsrs	r3, r3, #5
 8008ffa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008ffe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009002:	f003 031f 	and.w	r3, r3, #31
 8009006:	2b00      	cmp	r3, #0
 8009008:	d104      	bne.n	8009014 <USB_EPStartXfer+0x7e2>
 800900a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800900e:	3b01      	subs	r3, #1
 8009010:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009016:	881b      	ldrh	r3, [r3, #0]
 8009018:	b29a      	uxth	r2, r3
 800901a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800901e:	b29b      	uxth	r3, r3
 8009020:	029b      	lsls	r3, r3, #10
 8009022:	b29b      	uxth	r3, r3
 8009024:	4313      	orrs	r3, r2
 8009026:	b29b      	uxth	r3, r3
 8009028:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800902c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009030:	b29a      	uxth	r2, r3
 8009032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009034:	801a      	strh	r2, [r3, #0]
 8009036:	e050      	b.n	80090da <USB_EPStartXfer+0x8a8>
 8009038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800903c:	2b00      	cmp	r3, #0
 800903e:	d10a      	bne.n	8009056 <USB_EPStartXfer+0x824>
 8009040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009042:	881b      	ldrh	r3, [r3, #0]
 8009044:	b29b      	uxth	r3, r3
 8009046:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800904a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800904e:	b29a      	uxth	r2, r3
 8009050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009052:	801a      	strh	r2, [r3, #0]
 8009054:	e041      	b.n	80090da <USB_EPStartXfer+0x8a8>
 8009056:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800905a:	085b      	lsrs	r3, r3, #1
 800905c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009060:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009064:	f003 0301 	and.w	r3, r3, #1
 8009068:	2b00      	cmp	r3, #0
 800906a:	d004      	beq.n	8009076 <USB_EPStartXfer+0x844>
 800906c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009070:	3301      	adds	r3, #1
 8009072:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009078:	881b      	ldrh	r3, [r3, #0]
 800907a:	b29a      	uxth	r2, r3
 800907c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009080:	b29b      	uxth	r3, r3
 8009082:	029b      	lsls	r3, r3, #10
 8009084:	b29b      	uxth	r3, r3
 8009086:	4313      	orrs	r3, r2
 8009088:	b29a      	uxth	r2, r3
 800908a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800908c:	801a      	strh	r2, [r3, #0]
 800908e:	e024      	b.n	80090da <USB_EPStartXfer+0x8a8>
 8009090:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009094:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	785b      	ldrb	r3, [r3, #1]
 800909c:	2b01      	cmp	r3, #1
 800909e:	d11c      	bne.n	80090da <USB_EPStartXfer+0x8a8>
 80090a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80090ae:	b29b      	uxth	r3, r3
 80090b0:	461a      	mov	r2, r3
 80090b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090b4:	4413      	add	r3, r2
 80090b6:	643b      	str	r3, [r7, #64]	; 0x40
 80090b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	781b      	ldrb	r3, [r3, #0]
 80090c4:	00da      	lsls	r2, r3, #3
 80090c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090c8:	4413      	add	r3, r2
 80090ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80090ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090d4:	b29a      	uxth	r2, r3
 80090d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80090da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	895b      	ldrh	r3, [r3, #10]
 80090e6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80090ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	6959      	ldr	r1, [r3, #20]
 80090f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009100:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009104:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8009108:	6800      	ldr	r0, [r0, #0]
 800910a:	f001 f87d 	bl	800a208 <USB_WritePMA>
 800910e:	e227      	b.n	8009560 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8009110:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009114:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	6a1b      	ldr	r3, [r3, #32]
 800911c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8009120:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009124:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800912e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	781b      	ldrb	r3, [r3, #0]
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	4413      	add	r3, r2
 800913a:	881b      	ldrh	r3, [r3, #0]
 800913c:	b29b      	uxth	r3, r3
 800913e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009146:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800914a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800914e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	009b      	lsls	r3, r3, #2
 8009162:	441a      	add	r2, r3
 8009164:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009168:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800916c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009170:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009178:	b29b      	uxth	r3, r3
 800917a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800917c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009180:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009188:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800918c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009196:	b29b      	uxth	r3, r3
 8009198:	461a      	mov	r2, r3
 800919a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800919c:	4413      	add	r3, r2
 800919e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80091a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091a4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	781b      	ldrb	r3, [r3, #0]
 80091ac:	00da      	lsls	r2, r3, #3
 80091ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80091b0:	4413      	add	r3, r2
 80091b2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80091b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80091b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091bc:	b29a      	uxth	r2, r3
 80091be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80091c0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80091c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	891b      	ldrh	r3, [r3, #8]
 80091ce:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80091d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	6959      	ldr	r1, [r3, #20]
 80091de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091e2:	b29b      	uxth	r3, r3
 80091e4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80091e8:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80091ec:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80091f0:	6800      	ldr	r0, [r0, #0]
 80091f2:	f001 f809 	bl	800a208 <USB_WritePMA>
 80091f6:	e1b3      	b.n	8009560 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 80091f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80091fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	6a1a      	ldr	r2, [r3, #32]
 8009204:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009208:	1ad2      	subs	r2, r2, r3
 800920a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800920e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8009216:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800921a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009224:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4413      	add	r3, r2
 8009230:	881b      	ldrh	r3, [r3, #0]
 8009232:	b29b      	uxth	r3, r3
 8009234:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009238:	2b00      	cmp	r3, #0
 800923a:	f000 80c6 	beq.w	80093ca <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800923e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009242:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	673b      	str	r3, [r7, #112]	; 0x70
 800924a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800924e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	785b      	ldrb	r3, [r3, #1]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d177      	bne.n	800934a <USB_EPStartXfer+0xb18>
 800925a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800925e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	66bb      	str	r3, [r7, #104]	; 0x68
 8009266:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800926a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009274:	b29b      	uxth	r3, r3
 8009276:	461a      	mov	r2, r3
 8009278:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800927a:	4413      	add	r3, r2
 800927c:	66bb      	str	r3, [r7, #104]	; 0x68
 800927e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	781b      	ldrb	r3, [r3, #0]
 800928a:	00da      	lsls	r2, r3, #3
 800928c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800928e:	4413      	add	r3, r2
 8009290:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009294:	667b      	str	r3, [r7, #100]	; 0x64
 8009296:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009298:	881b      	ldrh	r3, [r3, #0]
 800929a:	b29b      	uxth	r3, r3
 800929c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092a4:	801a      	strh	r2, [r3, #0]
 80092a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092aa:	2b3e      	cmp	r3, #62	; 0x3e
 80092ac:	d921      	bls.n	80092f2 <USB_EPStartXfer+0xac0>
 80092ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092b2:	095b      	lsrs	r3, r3, #5
 80092b4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80092b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092bc:	f003 031f 	and.w	r3, r3, #31
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d104      	bne.n	80092ce <USB_EPStartXfer+0xa9c>
 80092c4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80092c8:	3b01      	subs	r3, #1
 80092ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80092ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092d0:	881b      	ldrh	r3, [r3, #0]
 80092d2:	b29a      	uxth	r2, r3
 80092d4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80092d8:	b29b      	uxth	r3, r3
 80092da:	029b      	lsls	r3, r3, #10
 80092dc:	b29b      	uxth	r3, r3
 80092de:	4313      	orrs	r3, r2
 80092e0:	b29b      	uxth	r3, r3
 80092e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80092e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092ee:	801a      	strh	r2, [r3, #0]
 80092f0:	e050      	b.n	8009394 <USB_EPStartXfer+0xb62>
 80092f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10a      	bne.n	8009310 <USB_EPStartXfer+0xade>
 80092fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092fc:	881b      	ldrh	r3, [r3, #0]
 80092fe:	b29b      	uxth	r3, r3
 8009300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009308:	b29a      	uxth	r2, r3
 800930a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800930c:	801a      	strh	r2, [r3, #0]
 800930e:	e041      	b.n	8009394 <USB_EPStartXfer+0xb62>
 8009310:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009314:	085b      	lsrs	r3, r3, #1
 8009316:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800931a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	2b00      	cmp	r3, #0
 8009324:	d004      	beq.n	8009330 <USB_EPStartXfer+0xafe>
 8009326:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800932a:	3301      	adds	r3, #1
 800932c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009330:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009332:	881b      	ldrh	r3, [r3, #0]
 8009334:	b29a      	uxth	r2, r3
 8009336:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800933a:	b29b      	uxth	r3, r3
 800933c:	029b      	lsls	r3, r3, #10
 800933e:	b29b      	uxth	r3, r3
 8009340:	4313      	orrs	r3, r2
 8009342:	b29a      	uxth	r2, r3
 8009344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009346:	801a      	strh	r2, [r3, #0]
 8009348:	e024      	b.n	8009394 <USB_EPStartXfer+0xb62>
 800934a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800934e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	785b      	ldrb	r3, [r3, #1]
 8009356:	2b01      	cmp	r3, #1
 8009358:	d11c      	bne.n	8009394 <USB_EPStartXfer+0xb62>
 800935a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800935e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009368:	b29b      	uxth	r3, r3
 800936a:	461a      	mov	r2, r3
 800936c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800936e:	4413      	add	r3, r2
 8009370:	673b      	str	r3, [r7, #112]	; 0x70
 8009372:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009376:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	00da      	lsls	r2, r3, #3
 8009380:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009382:	4413      	add	r3, r2
 8009384:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009388:	66fb      	str	r3, [r7, #108]	; 0x6c
 800938a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800938e:	b29a      	uxth	r2, r3
 8009390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009392:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8009394:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	895b      	ldrh	r3, [r3, #10]
 80093a0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80093a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	6959      	ldr	r1, [r3, #20]
 80093b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80093ba:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80093be:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80093c2:	6800      	ldr	r0, [r0, #0]
 80093c4:	f000 ff20 	bl	800a208 <USB_WritePMA>
 80093c8:	e0ca      	b.n	8009560 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80093ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	785b      	ldrb	r3, [r3, #1]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d177      	bne.n	80094ca <USB_EPStartXfer+0xc98>
 80093da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80093e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	461a      	mov	r2, r3
 80093f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80093fa:	4413      	add	r3, r2
 80093fc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80093fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009402:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	00da      	lsls	r2, r3, #3
 800940c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800940e:	4413      	add	r3, r2
 8009410:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009414:	67bb      	str	r3, [r7, #120]	; 0x78
 8009416:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009418:	881b      	ldrh	r3, [r3, #0]
 800941a:	b29b      	uxth	r3, r3
 800941c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009420:	b29a      	uxth	r2, r3
 8009422:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009424:	801a      	strh	r2, [r3, #0]
 8009426:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800942a:	2b3e      	cmp	r3, #62	; 0x3e
 800942c:	d921      	bls.n	8009472 <USB_EPStartXfer+0xc40>
 800942e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009432:	095b      	lsrs	r3, r3, #5
 8009434:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009438:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800943c:	f003 031f 	and.w	r3, r3, #31
 8009440:	2b00      	cmp	r3, #0
 8009442:	d104      	bne.n	800944e <USB_EPStartXfer+0xc1c>
 8009444:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009448:	3b01      	subs	r3, #1
 800944a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800944e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009450:	881b      	ldrh	r3, [r3, #0]
 8009452:	b29a      	uxth	r2, r3
 8009454:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8009458:	b29b      	uxth	r3, r3
 800945a:	029b      	lsls	r3, r3, #10
 800945c:	b29b      	uxth	r3, r3
 800945e:	4313      	orrs	r3, r2
 8009460:	b29b      	uxth	r3, r3
 8009462:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009466:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800946a:	b29a      	uxth	r2, r3
 800946c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800946e:	801a      	strh	r2, [r3, #0]
 8009470:	e05c      	b.n	800952c <USB_EPStartXfer+0xcfa>
 8009472:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10a      	bne.n	8009490 <USB_EPStartXfer+0xc5e>
 800947a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800947c:	881b      	ldrh	r3, [r3, #0]
 800947e:	b29b      	uxth	r3, r3
 8009480:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009484:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009488:	b29a      	uxth	r2, r3
 800948a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800948c:	801a      	strh	r2, [r3, #0]
 800948e:	e04d      	b.n	800952c <USB_EPStartXfer+0xcfa>
 8009490:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009494:	085b      	lsrs	r3, r3, #1
 8009496:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800949a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800949e:	f003 0301 	and.w	r3, r3, #1
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d004      	beq.n	80094b0 <USB_EPStartXfer+0xc7e>
 80094a6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80094aa:	3301      	adds	r3, #1
 80094ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80094b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094b2:	881b      	ldrh	r3, [r3, #0]
 80094b4:	b29a      	uxth	r2, r3
 80094b6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80094ba:	b29b      	uxth	r3, r3
 80094bc:	029b      	lsls	r3, r3, #10
 80094be:	b29b      	uxth	r3, r3
 80094c0:	4313      	orrs	r3, r2
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80094c6:	801a      	strh	r2, [r3, #0]
 80094c8:	e030      	b.n	800952c <USB_EPStartXfer+0xcfa>
 80094ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	785b      	ldrb	r3, [r3, #1]
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d128      	bne.n	800952c <USB_EPStartXfer+0xcfa>
 80094da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80094e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80094f6:	b29b      	uxth	r3, r3
 80094f8:	461a      	mov	r2, r3
 80094fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80094fe:	4413      	add	r3, r2
 8009500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	781b      	ldrb	r3, [r3, #0]
 8009510:	00da      	lsls	r2, r3, #3
 8009512:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009516:	4413      	add	r3, r2
 8009518:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800951c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009520:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009524:	b29a      	uxth	r2, r3
 8009526:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800952a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800952c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009530:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	891b      	ldrh	r3, [r3, #8]
 8009538:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800953c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	6959      	ldr	r1, [r3, #20]
 8009548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800954c:	b29b      	uxth	r3, r3
 800954e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009552:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009556:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800955a:	6800      	ldr	r0, [r0, #0]
 800955c:	f000 fe54 	bl	800a208 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009564:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009568:	681a      	ldr	r2, [r3, #0]
 800956a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800956e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	4413      	add	r3, r2
 800957a:	881b      	ldrh	r3, [r3, #0]
 800957c:	b29b      	uxth	r3, r3
 800957e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009582:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009586:	817b      	strh	r3, [r7, #10]
 8009588:	897b      	ldrh	r3, [r7, #10]
 800958a:	f083 0310 	eor.w	r3, r3, #16
 800958e:	817b      	strh	r3, [r7, #10]
 8009590:	897b      	ldrh	r3, [r7, #10]
 8009592:	f083 0320 	eor.w	r3, r3, #32
 8009596:	817b      	strh	r3, [r7, #10]
 8009598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800959c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	781b      	ldrb	r3, [r3, #0]
 80095ae:	009b      	lsls	r3, r3, #2
 80095b0:	441a      	add	r2, r3
 80095b2:	897b      	ldrh	r3, [r7, #10]
 80095b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095c4:	b29b      	uxth	r3, r3
 80095c6:	8013      	strh	r3, [r2, #0]
 80095c8:	f000 bcde 	b.w	8009f88 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80095cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	7b1b      	ldrb	r3, [r3, #12]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	f040 80bb 	bne.w	8009754 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80095de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	699a      	ldr	r2, [r3, #24]
 80095ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	691b      	ldr	r3, [r3, #16]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d917      	bls.n	800962a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 80095fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	691b      	ldr	r3, [r3, #16]
 8009606:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800960a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800960e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	699a      	ldr	r2, [r3, #24]
 8009616:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800961a:	1ad2      	subs	r2, r2, r3
 800961c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009620:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	619a      	str	r2, [r3, #24]
 8009628:	e00e      	b.n	8009648 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800962a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800962e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	699b      	ldr	r3, [r3, #24]
 8009636:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800963a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800963e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	2200      	movs	r2, #0
 8009646:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800964c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009656:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800965a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009664:	b29b      	uxth	r3, r3
 8009666:	461a      	mov	r2, r3
 8009668:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800966c:	4413      	add	r3, r2
 800966e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009672:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009676:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	781b      	ldrb	r3, [r3, #0]
 800967e:	00da      	lsls	r2, r3, #3
 8009680:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009684:	4413      	add	r3, r2
 8009686:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800968a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800968e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009692:	881b      	ldrh	r3, [r3, #0]
 8009694:	b29b      	uxth	r3, r3
 8009696:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800969a:	b29a      	uxth	r2, r3
 800969c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096a0:	801a      	strh	r2, [r3, #0]
 80096a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096a6:	2b3e      	cmp	r3, #62	; 0x3e
 80096a8:	d924      	bls.n	80096f4 <USB_EPStartXfer+0xec2>
 80096aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096ae:	095b      	lsrs	r3, r3, #5
 80096b0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80096b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096b8:	f003 031f 	and.w	r3, r3, #31
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d104      	bne.n	80096ca <USB_EPStartXfer+0xe98>
 80096c0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096c4:	3b01      	subs	r3, #1
 80096c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80096ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096ce:	881b      	ldrh	r3, [r3, #0]
 80096d0:	b29a      	uxth	r2, r3
 80096d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80096d6:	b29b      	uxth	r3, r3
 80096d8:	029b      	lsls	r3, r3, #10
 80096da:	b29b      	uxth	r3, r3
 80096dc:	4313      	orrs	r3, r2
 80096de:	b29b      	uxth	r3, r3
 80096e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096e8:	b29a      	uxth	r2, r3
 80096ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80096ee:	801a      	strh	r2, [r3, #0]
 80096f0:	f000 bc10 	b.w	8009f14 <USB_EPStartXfer+0x16e2>
 80096f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d10c      	bne.n	8009716 <USB_EPStartXfer+0xee4>
 80096fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009700:	881b      	ldrh	r3, [r3, #0]
 8009702:	b29b      	uxth	r3, r3
 8009704:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009708:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800970c:	b29a      	uxth	r2, r3
 800970e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009712:	801a      	strh	r2, [r3, #0]
 8009714:	e3fe      	b.n	8009f14 <USB_EPStartXfer+0x16e2>
 8009716:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800971a:	085b      	lsrs	r3, r3, #1
 800971c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009720:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009724:	f003 0301 	and.w	r3, r3, #1
 8009728:	2b00      	cmp	r3, #0
 800972a:	d004      	beq.n	8009736 <USB_EPStartXfer+0xf04>
 800972c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009730:	3301      	adds	r3, #1
 8009732:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009736:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800973a:	881b      	ldrh	r3, [r3, #0]
 800973c:	b29a      	uxth	r2, r3
 800973e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009742:	b29b      	uxth	r3, r3
 8009744:	029b      	lsls	r3, r3, #10
 8009746:	b29b      	uxth	r3, r3
 8009748:	4313      	orrs	r3, r2
 800974a:	b29a      	uxth	r2, r3
 800974c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009750:	801a      	strh	r2, [r3, #0]
 8009752:	e3df      	b.n	8009f14 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009754:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009758:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	78db      	ldrb	r3, [r3, #3]
 8009760:	2b02      	cmp	r3, #2
 8009762:	f040 8218 	bne.w	8009b96 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009766:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800976a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	785b      	ldrb	r3, [r3, #1]
 8009772:	2b00      	cmp	r3, #0
 8009774:	f040 809d 	bne.w	80098b2 <USB_EPStartXfer+0x1080>
 8009778:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800977c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009786:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800978a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009794:	b29b      	uxth	r3, r3
 8009796:	461a      	mov	r2, r3
 8009798:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800979c:	4413      	add	r3, r2
 800979e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80097a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	781b      	ldrb	r3, [r3, #0]
 80097ae:	00da      	lsls	r2, r3, #3
 80097b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80097b4:	4413      	add	r3, r2
 80097b6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80097ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80097be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80097c2:	881b      	ldrh	r3, [r3, #0]
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80097ca:	b29a      	uxth	r2, r3
 80097cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80097d0:	801a      	strh	r2, [r3, #0]
 80097d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	2b3e      	cmp	r3, #62	; 0x3e
 80097e0:	d92b      	bls.n	800983a <USB_EPStartXfer+0x1008>
 80097e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	095b      	lsrs	r3, r3, #5
 80097f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80097f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80097f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	691b      	ldr	r3, [r3, #16]
 8009800:	f003 031f 	and.w	r3, r3, #31
 8009804:	2b00      	cmp	r3, #0
 8009806:	d104      	bne.n	8009812 <USB_EPStartXfer+0xfe0>
 8009808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800980c:	3b01      	subs	r3, #1
 800980e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009812:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009816:	881b      	ldrh	r3, [r3, #0]
 8009818:	b29a      	uxth	r2, r3
 800981a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800981e:	b29b      	uxth	r3, r3
 8009820:	029b      	lsls	r3, r3, #10
 8009822:	b29b      	uxth	r3, r3
 8009824:	4313      	orrs	r3, r2
 8009826:	b29b      	uxth	r3, r3
 8009828:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800982c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009830:	b29a      	uxth	r2, r3
 8009832:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009836:	801a      	strh	r2, [r3, #0]
 8009838:	e070      	b.n	800991c <USB_EPStartXfer+0x10ea>
 800983a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800983e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d10c      	bne.n	8009864 <USB_EPStartXfer+0x1032>
 800984a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800984e:	881b      	ldrh	r3, [r3, #0]
 8009850:	b29b      	uxth	r3, r3
 8009852:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009856:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800985a:	b29a      	uxth	r2, r3
 800985c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009860:	801a      	strh	r2, [r3, #0]
 8009862:	e05b      	b.n	800991c <USB_EPStartXfer+0x10ea>
 8009864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	691b      	ldr	r3, [r3, #16]
 8009870:	085b      	lsrs	r3, r3, #1
 8009872:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800987a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	691b      	ldr	r3, [r3, #16]
 8009882:	f003 0301 	and.w	r3, r3, #1
 8009886:	2b00      	cmp	r3, #0
 8009888:	d004      	beq.n	8009894 <USB_EPStartXfer+0x1062>
 800988a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800988e:	3301      	adds	r3, #1
 8009890:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009894:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009898:	881b      	ldrh	r3, [r3, #0]
 800989a:	b29a      	uxth	r2, r3
 800989c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098a0:	b29b      	uxth	r3, r3
 80098a2:	029b      	lsls	r3, r3, #10
 80098a4:	b29b      	uxth	r3, r3
 80098a6:	4313      	orrs	r3, r2
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80098ae:	801a      	strh	r2, [r3, #0]
 80098b0:	e034      	b.n	800991c <USB_EPStartXfer+0x10ea>
 80098b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	785b      	ldrb	r3, [r3, #1]
 80098be:	2b01      	cmp	r3, #1
 80098c0:	d12c      	bne.n	800991c <USB_EPStartXfer+0x10ea>
 80098c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098de:	b29b      	uxth	r3, r3
 80098e0:	461a      	mov	r2, r3
 80098e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80098e6:	4413      	add	r3, r2
 80098e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	00da      	lsls	r2, r3, #3
 80098fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80098fe:	4413      	add	r3, r2
 8009900:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009904:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009908:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800990c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	b29a      	uxth	r2, r3
 8009916:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800991a:	801a      	strh	r2, [r3, #0]
 800991c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009920:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800992a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800992e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	785b      	ldrb	r3, [r3, #1]
 8009936:	2b00      	cmp	r3, #0
 8009938:	f040 809d 	bne.w	8009a76 <USB_EPStartXfer+0x1244>
 800993c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009940:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800994a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800994e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009958:	b29b      	uxth	r3, r3
 800995a:	461a      	mov	r2, r3
 800995c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009960:	4413      	add	r3, r2
 8009962:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009966:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800996a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	00da      	lsls	r2, r3, #3
 8009974:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009978:	4413      	add	r3, r2
 800997a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800997e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009982:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009986:	881b      	ldrh	r3, [r3, #0]
 8009988:	b29b      	uxth	r3, r3
 800998a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800998e:	b29a      	uxth	r2, r3
 8009990:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009994:	801a      	strh	r2, [r3, #0]
 8009996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800999a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	691b      	ldr	r3, [r3, #16]
 80099a2:	2b3e      	cmp	r3, #62	; 0x3e
 80099a4:	d92b      	bls.n	80099fe <USB_EPStartXfer+0x11cc>
 80099a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	095b      	lsrs	r3, r3, #5
 80099b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80099b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	691b      	ldr	r3, [r3, #16]
 80099c4:	f003 031f 	and.w	r3, r3, #31
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d104      	bne.n	80099d6 <USB_EPStartXfer+0x11a4>
 80099cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099d0:	3b01      	subs	r3, #1
 80099d2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80099d6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099da:	881b      	ldrh	r3, [r3, #0]
 80099dc:	b29a      	uxth	r2, r3
 80099de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099e2:	b29b      	uxth	r3, r3
 80099e4:	029b      	lsls	r3, r3, #10
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	4313      	orrs	r3, r2
 80099ea:	b29b      	uxth	r3, r3
 80099ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80099f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80099f4:	b29a      	uxth	r2, r3
 80099f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099fa:	801a      	strh	r2, [r3, #0]
 80099fc:	e069      	b.n	8009ad2 <USB_EPStartXfer+0x12a0>
 80099fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	691b      	ldr	r3, [r3, #16]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10c      	bne.n	8009a28 <USB_EPStartXfer+0x11f6>
 8009a0e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a12:	881b      	ldrh	r3, [r3, #0]
 8009a14:	b29b      	uxth	r3, r3
 8009a16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009a1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009a1e:	b29a      	uxth	r2, r3
 8009a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a24:	801a      	strh	r2, [r3, #0]
 8009a26:	e054      	b.n	8009ad2 <USB_EPStartXfer+0x12a0>
 8009a28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	085b      	lsrs	r3, r3, #1
 8009a36:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a3a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a3e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	691b      	ldr	r3, [r3, #16]
 8009a46:	f003 0301 	and.w	r3, r3, #1
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d004      	beq.n	8009a58 <USB_EPStartXfer+0x1226>
 8009a4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a52:	3301      	adds	r3, #1
 8009a54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009a58:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a5c:	881b      	ldrh	r3, [r3, #0]
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	029b      	lsls	r3, r3, #10
 8009a68:	b29b      	uxth	r3, r3
 8009a6a:	4313      	orrs	r3, r2
 8009a6c:	b29a      	uxth	r2, r3
 8009a6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009a72:	801a      	strh	r2, [r3, #0]
 8009a74:	e02d      	b.n	8009ad2 <USB_EPStartXfer+0x12a0>
 8009a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	785b      	ldrb	r3, [r3, #1]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d125      	bne.n	8009ad2 <USB_EPStartXfer+0x12a0>
 8009a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a94:	b29b      	uxth	r3, r3
 8009a96:	461a      	mov	r2, r3
 8009a98:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009a9c:	4413      	add	r3, r2
 8009a9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009aa2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009aa6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	00da      	lsls	r2, r3, #3
 8009ab0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009aba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009abe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ac2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	b29a      	uxth	r2, r3
 8009acc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009ad0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8009ad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	69db      	ldr	r3, [r3, #28]
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	f000 8218 	beq.w	8009f14 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ae8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	4413      	add	r3, r2
 8009afe:	881b      	ldrh	r3, [r3, #0]
 8009b00:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009b04:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d005      	beq.n	8009b1c <USB_EPStartXfer+0x12ea>
 8009b10:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d10d      	bne.n	8009b38 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009b1c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009b20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	f040 81f5 	bne.w	8009f14 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8009b2a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f040 81ee 	bne.w	8009f14 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009b38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b40:	681a      	ldr	r2, [r3, #0]
 8009b42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	881b      	ldrh	r3, [r3, #0]
 8009b54:	b29b      	uxth	r3, r3
 8009b56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b5e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009b62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009b6a:	681a      	ldr	r2, [r3, #0]
 8009b6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	441a      	add	r2, r3
 8009b7c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 8009b80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	8013      	strh	r3, [r2, #0]
 8009b94:	e1be      	b.n	8009f14 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8009b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009b9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	78db      	ldrb	r3, [r3, #3]
 8009ba2:	2b01      	cmp	r3, #1
 8009ba4:	f040 81b4 	bne.w	8009f10 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8009ba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	699a      	ldr	r2, [r3, #24]
 8009bb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	691b      	ldr	r3, [r3, #16]
 8009bc0:	429a      	cmp	r2, r3
 8009bc2:	d917      	bls.n	8009bf4 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8009bc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 8009bd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	699a      	ldr	r2, [r3, #24]
 8009be0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009be4:	1ad2      	subs	r2, r2, r3
 8009be6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	619a      	str	r2, [r3, #24]
 8009bf2:	e00e      	b.n	8009c12 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009bf4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009bf8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	699b      	ldr	r3, [r3, #24]
 8009c00:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009c04:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c08:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	2200      	movs	r2, #0
 8009c10:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009c12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	785b      	ldrb	r3, [r3, #1]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	f040 8085 	bne.w	8009d2e <USB_EPStartXfer+0x14fc>
 8009c24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c28:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c32:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c36:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009c40:	b29b      	uxth	r3, r3
 8009c42:	461a      	mov	r2, r3
 8009c44:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c48:	4413      	add	r3, r2
 8009c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009c52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	781b      	ldrb	r3, [r3, #0]
 8009c5a:	00da      	lsls	r2, r3, #3
 8009c5c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009c60:	4413      	add	r3, r2
 8009c62:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009c66:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009c6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c6e:	881b      	ldrh	r3, [r3, #0]
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009c7c:	801a      	strh	r2, [r3, #0]
 8009c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c82:	2b3e      	cmp	r3, #62	; 0x3e
 8009c84:	d923      	bls.n	8009cce <USB_EPStartXfer+0x149c>
 8009c86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c8a:	095b      	lsrs	r3, r3, #5
 8009c8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009c90:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009c94:	f003 031f 	and.w	r3, r3, #31
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d104      	bne.n	8009ca6 <USB_EPStartXfer+0x1474>
 8009c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009ca6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009caa:	881b      	ldrh	r3, [r3, #0]
 8009cac:	b29a      	uxth	r2, r3
 8009cae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009cb2:	b29b      	uxth	r3, r3
 8009cb4:	029b      	lsls	r3, r3, #10
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cc0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cc4:	b29a      	uxth	r2, r3
 8009cc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cca:	801a      	strh	r2, [r3, #0]
 8009ccc:	e060      	b.n	8009d90 <USB_EPStartXfer+0x155e>
 8009cce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d10c      	bne.n	8009cf0 <USB_EPStartXfer+0x14be>
 8009cd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cda:	881b      	ldrh	r3, [r3, #0]
 8009cdc:	b29b      	uxth	r3, r3
 8009cde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009ce2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009cec:	801a      	strh	r2, [r3, #0]
 8009cee:	e04f      	b.n	8009d90 <USB_EPStartXfer+0x155e>
 8009cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cf4:	085b      	lsrs	r3, r3, #1
 8009cf6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009cfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009cfe:	f003 0301 	and.w	r3, r3, #1
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d004      	beq.n	8009d10 <USB_EPStartXfer+0x14de>
 8009d06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009d10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d14:	881b      	ldrh	r3, [r3, #0]
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	029b      	lsls	r3, r3, #10
 8009d20:	b29b      	uxth	r3, r3
 8009d22:	4313      	orrs	r3, r2
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d2a:	801a      	strh	r2, [r3, #0]
 8009d2c:	e030      	b.n	8009d90 <USB_EPStartXfer+0x155e>
 8009d2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	785b      	ldrb	r3, [r3, #1]
 8009d3a:	2b01      	cmp	r3, #1
 8009d3c:	d128      	bne.n	8009d90 <USB_EPStartXfer+0x155e>
 8009d3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d42:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009d4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d62:	4413      	add	r3, r2
 8009d64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009d68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	00da      	lsls	r2, r3, #3
 8009d76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009d7a:	4413      	add	r3, r2
 8009d7c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009d80:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009d88:	b29a      	uxth	r2, r3
 8009d8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8009d8e:	801a      	strh	r2, [r3, #0]
 8009d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009d94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	785b      	ldrb	r3, [r3, #1]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f040 8085 	bne.w	8009eba <USB_EPStartXfer+0x1688>
 8009db0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009db4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009dbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dc2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dcc:	b29b      	uxth	r3, r3
 8009dce:	461a      	mov	r2, r3
 8009dd0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009dd4:	4413      	add	r3, r2
 8009dd6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8009dda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009dde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	00da      	lsls	r2, r3, #3
 8009de8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8009dec:	4413      	add	r3, r2
 8009dee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009df2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009df6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009dfa:	881b      	ldrh	r3, [r3, #0]
 8009dfc:	b29b      	uxth	r3, r3
 8009dfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009e02:	b29a      	uxth	r2, r3
 8009e04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e08:	801a      	strh	r2, [r3, #0]
 8009e0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e0e:	2b3e      	cmp	r3, #62	; 0x3e
 8009e10:	d923      	bls.n	8009e5a <USB_EPStartXfer+0x1628>
 8009e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e16:	095b      	lsrs	r3, r3, #5
 8009e18:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e20:	f003 031f 	and.w	r3, r3, #31
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d104      	bne.n	8009e32 <USB_EPStartXfer+0x1600>
 8009e28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e36:	881b      	ldrh	r3, [r3, #0]
 8009e38:	b29a      	uxth	r2, r3
 8009e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	029b      	lsls	r3, r3, #10
 8009e42:	b29b      	uxth	r3, r3
 8009e44:	4313      	orrs	r3, r2
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e50:	b29a      	uxth	r2, r3
 8009e52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e56:	801a      	strh	r2, [r3, #0]
 8009e58:	e05c      	b.n	8009f14 <USB_EPStartXfer+0x16e2>
 8009e5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10c      	bne.n	8009e7c <USB_EPStartXfer+0x164a>
 8009e62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e66:	881b      	ldrh	r3, [r3, #0]
 8009e68:	b29b      	uxth	r3, r3
 8009e6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009e6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009e72:	b29a      	uxth	r2, r3
 8009e74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009e78:	801a      	strh	r2, [r3, #0]
 8009e7a:	e04b      	b.n	8009f14 <USB_EPStartXfer+0x16e2>
 8009e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e80:	085b      	lsrs	r3, r3, #1
 8009e82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009e8a:	f003 0301 	and.w	r3, r3, #1
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d004      	beq.n	8009e9c <USB_EPStartXfer+0x166a>
 8009e92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e96:	3301      	adds	r3, #1
 8009e98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009e9c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ea0:	881b      	ldrh	r3, [r3, #0]
 8009ea2:	b29a      	uxth	r2, r3
 8009ea4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009ea8:	b29b      	uxth	r3, r3
 8009eaa:	029b      	lsls	r3, r3, #10
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009eb6:	801a      	strh	r2, [r3, #0]
 8009eb8:	e02c      	b.n	8009f14 <USB_EPStartXfer+0x16e2>
 8009eba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ebe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	785b      	ldrb	r3, [r3, #1]
 8009ec6:	2b01      	cmp	r3, #1
 8009ec8:	d124      	bne.n	8009f14 <USB_EPStartXfer+0x16e2>
 8009eca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009ece:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ed8:	b29b      	uxth	r3, r3
 8009eda:	461a      	mov	r2, r3
 8009edc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009ee0:	4413      	add	r3, r2
 8009ee2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009ee6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009eea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	781b      	ldrb	r3, [r3, #0]
 8009ef2:	00da      	lsls	r2, r3, #3
 8009ef4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009ef8:	4413      	add	r3, r2
 8009efa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009efe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009f06:	b29a      	uxth	r2, r3
 8009f08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009f0c:	801a      	strh	r2, [r3, #0]
 8009f0e:	e001      	b.n	8009f14 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009f10:	2301      	movs	r3, #1
 8009f12:	e03a      	b.n	8009f8a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009f14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	781b      	ldrb	r3, [r3, #0]
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4413      	add	r3, r2
 8009f2e:	881b      	ldrh	r3, [r3, #0]
 8009f30:	b29b      	uxth	r3, r3
 8009f32:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f3a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009f3e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009f42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009f46:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009f4a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009f4e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009f52:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009f56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009f64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	009b      	lsls	r3, r3, #2
 8009f6e:	441a      	add	r2, r3
 8009f70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	785b      	ldrb	r3, [r3, #1]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d020      	beq.n	8009fe8 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	781b      	ldrb	r3, [r3, #0]
 8009fac:	009b      	lsls	r3, r3, #2
 8009fae:	4413      	add	r3, r2
 8009fb0:	881b      	ldrh	r3, [r3, #0]
 8009fb2:	b29b      	uxth	r3, r3
 8009fb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fbc:	81bb      	strh	r3, [r7, #12]
 8009fbe:	89bb      	ldrh	r3, [r7, #12]
 8009fc0:	f083 0310 	eor.w	r3, r3, #16
 8009fc4:	81bb      	strh	r3, [r7, #12]
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	441a      	add	r2, r3
 8009fd0:	89bb      	ldrh	r3, [r7, #12]
 8009fd2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fd6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fe2:	b29b      	uxth	r3, r3
 8009fe4:	8013      	strh	r3, [r2, #0]
 8009fe6:	e01f      	b.n	800a028 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	781b      	ldrb	r3, [r3, #0]
 8009fee:	009b      	lsls	r3, r3, #2
 8009ff0:	4413      	add	r3, r2
 8009ff2:	881b      	ldrh	r3, [r3, #0]
 8009ff4:	b29b      	uxth	r3, r3
 8009ff6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ffe:	81fb      	strh	r3, [r7, #14]
 800a000:	89fb      	ldrh	r3, [r7, #14]
 800a002:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a006:	81fb      	strh	r3, [r7, #14]
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	683b      	ldr	r3, [r7, #0]
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	009b      	lsls	r3, r3, #2
 800a010:	441a      	add	r2, r3
 800a012:	89fb      	ldrh	r3, [r7, #14]
 800a014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a01c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a024:	b29b      	uxth	r3, r3
 800a026:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3714      	adds	r7, #20
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a036:	b480      	push	{r7}
 800a038:	b087      	sub	sp, #28
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	7b1b      	ldrb	r3, [r3, #12]
 800a044:	2b00      	cmp	r3, #0
 800a046:	f040 809d 	bne.w	800a184 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	785b      	ldrb	r3, [r3, #1]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d04c      	beq.n	800a0ec <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a052:	687a      	ldr	r2, [r7, #4]
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	4413      	add	r3, r2
 800a05c:	881b      	ldrh	r3, [r3, #0]
 800a05e:	823b      	strh	r3, [r7, #16]
 800a060:	8a3b      	ldrh	r3, [r7, #16]
 800a062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a066:	2b00      	cmp	r3, #0
 800a068:	d01b      	beq.n	800a0a2 <USB_EPClearStall+0x6c>
 800a06a:	687a      	ldr	r2, [r7, #4]
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	881b      	ldrh	r3, [r3, #0]
 800a076:	b29b      	uxth	r3, r3
 800a078:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a07c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a080:	81fb      	strh	r3, [r7, #14]
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	781b      	ldrb	r3, [r3, #0]
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	441a      	add	r2, r3
 800a08c:	89fb      	ldrh	r3, [r7, #14]
 800a08e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a092:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a096:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a09a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a09e:	b29b      	uxth	r3, r3
 800a0a0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	78db      	ldrb	r3, [r3, #3]
 800a0a6:	2b01      	cmp	r3, #1
 800a0a8:	d06c      	beq.n	800a184 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a0aa:	687a      	ldr	r2, [r7, #4]
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	781b      	ldrb	r3, [r3, #0]
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	4413      	add	r3, r2
 800a0b4:	881b      	ldrh	r3, [r3, #0]
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0c0:	81bb      	strh	r3, [r7, #12]
 800a0c2:	89bb      	ldrh	r3, [r7, #12]
 800a0c4:	f083 0320 	eor.w	r3, r3, #32
 800a0c8:	81bb      	strh	r3, [r7, #12]
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	781b      	ldrb	r3, [r3, #0]
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	441a      	add	r2, r3
 800a0d4:	89bb      	ldrh	r3, [r7, #12]
 800a0d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	8013      	strh	r3, [r2, #0]
 800a0ea:	e04b      	b.n	800a184 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a0ec:	687a      	ldr	r2, [r7, #4]
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	781b      	ldrb	r3, [r3, #0]
 800a0f2:	009b      	lsls	r3, r3, #2
 800a0f4:	4413      	add	r3, r2
 800a0f6:	881b      	ldrh	r3, [r3, #0]
 800a0f8:	82fb      	strh	r3, [r7, #22]
 800a0fa:	8afb      	ldrh	r3, [r7, #22]
 800a0fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a100:	2b00      	cmp	r3, #0
 800a102:	d01b      	beq.n	800a13c <USB_EPClearStall+0x106>
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4413      	add	r3, r2
 800a10e:	881b      	ldrh	r3, [r3, #0]
 800a110:	b29b      	uxth	r3, r3
 800a112:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a11a:	82bb      	strh	r3, [r7, #20]
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	441a      	add	r2, r3
 800a126:	8abb      	ldrh	r3, [r7, #20]
 800a128:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a12c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a130:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a138:	b29b      	uxth	r3, r3
 800a13a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	781b      	ldrb	r3, [r3, #0]
 800a142:	009b      	lsls	r3, r3, #2
 800a144:	4413      	add	r3, r2
 800a146:	881b      	ldrh	r3, [r3, #0]
 800a148:	b29b      	uxth	r3, r3
 800a14a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a14e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a152:	827b      	strh	r3, [r7, #18]
 800a154:	8a7b      	ldrh	r3, [r7, #18]
 800a156:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800a15a:	827b      	strh	r3, [r7, #18]
 800a15c:	8a7b      	ldrh	r3, [r7, #18]
 800a15e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800a162:	827b      	strh	r3, [r7, #18]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	441a      	add	r2, r3
 800a16e:	8a7b      	ldrh	r3, [r7, #18]
 800a170:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a174:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a178:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a17c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a180:	b29b      	uxth	r3, r3
 800a182:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800a184:	2300      	movs	r3, #0
}
 800a186:	4618      	mov	r0, r3
 800a188:	371c      	adds	r7, #28
 800a18a:	46bd      	mov	sp, r7
 800a18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a190:	4770      	bx	lr

0800a192 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800a192:	b480      	push	{r7}
 800a194:	b083      	sub	sp, #12
 800a196:	af00      	add	r7, sp, #0
 800a198:	6078      	str	r0, [r7, #4]
 800a19a:	460b      	mov	r3, r1
 800a19c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800a19e:	78fb      	ldrb	r3, [r7, #3]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d103      	bne.n	800a1ac <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	2280      	movs	r2, #128	; 0x80
 800a1a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	370c      	adds	r7, #12
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr

0800a1ba <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800a1ba:	b480      	push	{r7}
 800a1bc:	b083      	sub	sp, #12
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a1c8:	b29b      	uxth	r3, r3
 800a1ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1d2:	b29a      	uxth	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800a1da:	2300      	movs	r3, #0
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	370c      	adds	r7, #12
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a208:	b480      	push	{r7}
 800a20a:	b08b      	sub	sp, #44	; 0x2c
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	60f8      	str	r0, [r7, #12]
 800a210:	60b9      	str	r1, [r7, #8]
 800a212:	4611      	mov	r1, r2
 800a214:	461a      	mov	r2, r3
 800a216:	460b      	mov	r3, r1
 800a218:	80fb      	strh	r3, [r7, #6]
 800a21a:	4613      	mov	r3, r2
 800a21c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800a21e:	88bb      	ldrh	r3, [r7, #4]
 800a220:	3301      	adds	r3, #1
 800a222:	085b      	lsrs	r3, r3, #1
 800a224:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a22e:	88fa      	ldrh	r2, [r7, #6]
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	4413      	add	r3, r2
 800a234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a238:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a23a:	69bb      	ldr	r3, [r7, #24]
 800a23c:	627b      	str	r3, [r7, #36]	; 0x24
 800a23e:	e01b      	b.n	800a278 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800a240:	69fb      	ldr	r3, [r7, #28]
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	3301      	adds	r3, #1
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	021b      	lsls	r3, r3, #8
 800a24e:	b21a      	sxth	r2, r3
 800a250:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a254:	4313      	orrs	r3, r2
 800a256:	b21b      	sxth	r3, r3
 800a258:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800a25a:	6a3b      	ldr	r3, [r7, #32]
 800a25c:	8a7a      	ldrh	r2, [r7, #18]
 800a25e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800a260:	6a3b      	ldr	r3, [r7, #32]
 800a262:	3302      	adds	r3, #2
 800a264:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800a266:	69fb      	ldr	r3, [r7, #28]
 800a268:	3301      	adds	r3, #1
 800a26a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800a26c:	69fb      	ldr	r3, [r7, #28]
 800a26e:	3301      	adds	r3, #1
 800a270:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a274:	3b01      	subs	r3, #1
 800a276:	627b      	str	r3, [r7, #36]	; 0x24
 800a278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d1e0      	bne.n	800a240 <USB_WritePMA+0x38>
  }
}
 800a27e:	bf00      	nop
 800a280:	bf00      	nop
 800a282:	372c      	adds	r7, #44	; 0x2c
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b08b      	sub	sp, #44	; 0x2c
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	4611      	mov	r1, r2
 800a298:	461a      	mov	r2, r3
 800a29a:	460b      	mov	r3, r1
 800a29c:	80fb      	strh	r3, [r7, #6]
 800a29e:	4613      	mov	r3, r2
 800a2a0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800a2a2:	88bb      	ldrh	r3, [r7, #4]
 800a2a4:	085b      	lsrs	r3, r3, #1
 800a2a6:	b29b      	uxth	r3, r3
 800a2a8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800a2b2:	88fa      	ldrh	r2, [r7, #6]
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	4413      	add	r3, r2
 800a2b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800a2bc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800a2be:	69bb      	ldr	r3, [r7, #24]
 800a2c0:	627b      	str	r3, [r7, #36]	; 0x24
 800a2c2:	e018      	b.n	800a2f6 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800a2c4:	6a3b      	ldr	r3, [r7, #32]
 800a2c6:	881b      	ldrh	r3, [r3, #0]
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800a2cc:	6a3b      	ldr	r3, [r7, #32]
 800a2ce:	3302      	adds	r3, #2
 800a2d0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	b2da      	uxtb	r2, r3
 800a2d6:	69fb      	ldr	r3, [r7, #28]
 800a2d8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a2da:	69fb      	ldr	r3, [r7, #28]
 800a2dc:	3301      	adds	r3, #1
 800a2de:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	0a1b      	lsrs	r3, r3, #8
 800a2e4:	b2da      	uxtb	r2, r3
 800a2e6:	69fb      	ldr	r3, [r7, #28]
 800a2e8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800a2ea:	69fb      	ldr	r3, [r7, #28]
 800a2ec:	3301      	adds	r3, #1
 800a2ee:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800a2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f2:	3b01      	subs	r3, #1
 800a2f4:	627b      	str	r3, [r7, #36]	; 0x24
 800a2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d1e3      	bne.n	800a2c4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800a2fc:	88bb      	ldrh	r3, [r7, #4]
 800a2fe:	f003 0301 	and.w	r3, r3, #1
 800a302:	b29b      	uxth	r3, r3
 800a304:	2b00      	cmp	r3, #0
 800a306:	d007      	beq.n	800a318 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800a308:	6a3b      	ldr	r3, [r7, #32]
 800a30a:	881b      	ldrh	r3, [r3, #0]
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	b2da      	uxtb	r2, r3
 800a314:	69fb      	ldr	r3, [r7, #28]
 800a316:	701a      	strb	r2, [r3, #0]
  }
}
 800a318:	bf00      	nop
 800a31a:	372c      	adds	r7, #44	; 0x2c
 800a31c:	46bd      	mov	sp, r7
 800a31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a322:	4770      	bx	lr

0800a324 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	460b      	mov	r3, r1
 800a32e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a330:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a334:	f002 f904 	bl	800c540 <USBD_static_malloc>
 800a338:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d105      	bne.n	800a34c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2200      	movs	r2, #0
 800a344:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800a348:	2302      	movs	r3, #2
 800a34a:	e066      	b.n	800a41a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	68fa      	ldr	r2, [r7, #12]
 800a350:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	7c1b      	ldrb	r3, [r3, #16]
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d119      	bne.n	800a390 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a35c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a360:	2202      	movs	r2, #2
 800a362:	2181      	movs	r1, #129	; 0x81
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	f001 ff92 	bl	800c28e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2201      	movs	r2, #1
 800a36e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a370:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a374:	2202      	movs	r2, #2
 800a376:	2101      	movs	r1, #1
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f001 ff88 	bl	800c28e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2201      	movs	r2, #1
 800a382:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2210      	movs	r2, #16
 800a38a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800a38e:	e016      	b.n	800a3be <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800a390:	2340      	movs	r3, #64	; 0x40
 800a392:	2202      	movs	r2, #2
 800a394:	2181      	movs	r1, #129	; 0x81
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f001 ff79 	bl	800c28e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2201      	movs	r2, #1
 800a3a0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800a3a2:	2340      	movs	r3, #64	; 0x40
 800a3a4:	2202      	movs	r2, #2
 800a3a6:	2101      	movs	r1, #1
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f001 ff70 	bl	800c28e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2210      	movs	r2, #16
 800a3ba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a3be:	2308      	movs	r3, #8
 800a3c0:	2203      	movs	r2, #3
 800a3c2:	2182      	movs	r1, #130	; 0x82
 800a3c4:	6878      	ldr	r0, [r7, #4]
 800a3c6:	f001 ff62 	bl	800c28e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	2200      	movs	r2, #0
 800a3e8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	7c1b      	ldrb	r3, [r3, #16]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d109      	bne.n	800a408 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a3fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a3fe:	2101      	movs	r1, #1
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f002 f833 	bl	800c46c <USBD_LL_PrepareReceive>
 800a406:	e007      	b.n	800a418 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a40e:	2340      	movs	r3, #64	; 0x40
 800a410:	2101      	movs	r1, #1
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f002 f82a 	bl	800c46c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a418:	2300      	movs	r3, #0
}
 800a41a:	4618      	mov	r0, r3
 800a41c:	3710      	adds	r7, #16
 800a41e:	46bd      	mov	sp, r7
 800a420:	bd80      	pop	{r7, pc}

0800a422 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a422:	b580      	push	{r7, lr}
 800a424:	b082      	sub	sp, #8
 800a426:	af00      	add	r7, sp, #0
 800a428:	6078      	str	r0, [r7, #4]
 800a42a:	460b      	mov	r3, r1
 800a42c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800a42e:	2181      	movs	r1, #129	; 0x81
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f001 ff52 	bl	800c2da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2200      	movs	r2, #0
 800a43a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800a43c:	2101      	movs	r1, #1
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	f001 ff4b 	bl	800c2da <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800a44c:	2182      	movs	r1, #130	; 0x82
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f001 ff43 	bl	800c2da <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	2200      	movs	r2, #0
 800a460:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d00e      	beq.n	800a48c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a474:	685b      	ldr	r3, [r3, #4]
 800a476:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a47e:	4618      	mov	r0, r3
 800a480:	f002 f86c 	bl	800c55c <USBD_static_free>
    pdev->pClassData = NULL;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2200      	movs	r2, #0
 800a488:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a48c:	2300      	movs	r3, #0
}
 800a48e:	4618      	mov	r0, r3
 800a490:	3708      	adds	r7, #8
 800a492:	46bd      	mov	sp, r7
 800a494:	bd80      	pop	{r7, pc}
	...

0800a498 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b086      	sub	sp, #24
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a4a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d101      	bne.n	800a4c0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800a4bc:	2303      	movs	r3, #3
 800a4be:	e0af      	b.n	800a620 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	781b      	ldrb	r3, [r3, #0]
 800a4c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d03f      	beq.n	800a54c <USBD_CDC_Setup+0xb4>
 800a4cc:	2b20      	cmp	r3, #32
 800a4ce:	f040 809f 	bne.w	800a610 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a4d2:	683b      	ldr	r3, [r7, #0]
 800a4d4:	88db      	ldrh	r3, [r3, #6]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d02e      	beq.n	800a538 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	781b      	ldrb	r3, [r3, #0]
 800a4de:	b25b      	sxtb	r3, r3
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	da16      	bge.n	800a512 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a4ea:	689b      	ldr	r3, [r3, #8]
 800a4ec:	683a      	ldr	r2, [r7, #0]
 800a4ee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a4f0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a4f2:	683a      	ldr	r2, [r7, #0]
 800a4f4:	88d2      	ldrh	r2, [r2, #6]
 800a4f6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	88db      	ldrh	r3, [r3, #6]
 800a4fc:	2b07      	cmp	r3, #7
 800a4fe:	bf28      	it	cs
 800a500:	2307      	movcs	r3, #7
 800a502:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	89fa      	ldrh	r2, [r7, #14]
 800a508:	4619      	mov	r1, r3
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f001 facf 	bl	800baae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a510:	e085      	b.n	800a61e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	785a      	ldrb	r2, [r3, #1]
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	88db      	ldrh	r3, [r3, #6]
 800a520:	b2da      	uxtb	r2, r3
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a528:	6939      	ldr	r1, [r7, #16]
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	88db      	ldrh	r3, [r3, #6]
 800a52e:	461a      	mov	r2, r3
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f001 fae8 	bl	800bb06 <USBD_CtlPrepareRx>
      break;
 800a536:	e072      	b.n	800a61e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a53e:	689b      	ldr	r3, [r3, #8]
 800a540:	683a      	ldr	r2, [r7, #0]
 800a542:	7850      	ldrb	r0, [r2, #1]
 800a544:	2200      	movs	r2, #0
 800a546:	6839      	ldr	r1, [r7, #0]
 800a548:	4798      	blx	r3
      break;
 800a54a:	e068      	b.n	800a61e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a54c:	683b      	ldr	r3, [r7, #0]
 800a54e:	785b      	ldrb	r3, [r3, #1]
 800a550:	2b0b      	cmp	r3, #11
 800a552:	d852      	bhi.n	800a5fa <USBD_CDC_Setup+0x162>
 800a554:	a201      	add	r2, pc, #4	; (adr r2, 800a55c <USBD_CDC_Setup+0xc4>)
 800a556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a55a:	bf00      	nop
 800a55c:	0800a58d 	.word	0x0800a58d
 800a560:	0800a609 	.word	0x0800a609
 800a564:	0800a5fb 	.word	0x0800a5fb
 800a568:	0800a5fb 	.word	0x0800a5fb
 800a56c:	0800a5fb 	.word	0x0800a5fb
 800a570:	0800a5fb 	.word	0x0800a5fb
 800a574:	0800a5fb 	.word	0x0800a5fb
 800a578:	0800a5fb 	.word	0x0800a5fb
 800a57c:	0800a5fb 	.word	0x0800a5fb
 800a580:	0800a5fb 	.word	0x0800a5fb
 800a584:	0800a5b7 	.word	0x0800a5b7
 800a588:	0800a5e1 	.word	0x0800a5e1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a592:	b2db      	uxtb	r3, r3
 800a594:	2b03      	cmp	r3, #3
 800a596:	d107      	bne.n	800a5a8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a598:	f107 030a 	add.w	r3, r7, #10
 800a59c:	2202      	movs	r2, #2
 800a59e:	4619      	mov	r1, r3
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f001 fa84 	bl	800baae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a5a6:	e032      	b.n	800a60e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a5a8:	6839      	ldr	r1, [r7, #0]
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f001 fa0e 	bl	800b9cc <USBD_CtlError>
            ret = USBD_FAIL;
 800a5b0:	2303      	movs	r3, #3
 800a5b2:	75fb      	strb	r3, [r7, #23]
          break;
 800a5b4:	e02b      	b.n	800a60e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5bc:	b2db      	uxtb	r3, r3
 800a5be:	2b03      	cmp	r3, #3
 800a5c0:	d107      	bne.n	800a5d2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a5c2:	f107 030d 	add.w	r3, r7, #13
 800a5c6:	2201      	movs	r2, #1
 800a5c8:	4619      	mov	r1, r3
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f001 fa6f 	bl	800baae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a5d0:	e01d      	b.n	800a60e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a5d2:	6839      	ldr	r1, [r7, #0]
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f001 f9f9 	bl	800b9cc <USBD_CtlError>
            ret = USBD_FAIL;
 800a5da:	2303      	movs	r3, #3
 800a5dc:	75fb      	strb	r3, [r7, #23]
          break;
 800a5de:	e016      	b.n	800a60e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	2b03      	cmp	r3, #3
 800a5ea:	d00f      	beq.n	800a60c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a5ec:	6839      	ldr	r1, [r7, #0]
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f001 f9ec 	bl	800b9cc <USBD_CtlError>
            ret = USBD_FAIL;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a5f8:	e008      	b.n	800a60c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a5fa:	6839      	ldr	r1, [r7, #0]
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f001 f9e5 	bl	800b9cc <USBD_CtlError>
          ret = USBD_FAIL;
 800a602:	2303      	movs	r3, #3
 800a604:	75fb      	strb	r3, [r7, #23]
          break;
 800a606:	e002      	b.n	800a60e <USBD_CDC_Setup+0x176>
          break;
 800a608:	bf00      	nop
 800a60a:	e008      	b.n	800a61e <USBD_CDC_Setup+0x186>
          break;
 800a60c:	bf00      	nop
      }
      break;
 800a60e:	e006      	b.n	800a61e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a610:	6839      	ldr	r1, [r7, #0]
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f001 f9da 	bl	800b9cc <USBD_CtlError>
      ret = USBD_FAIL;
 800a618:	2303      	movs	r3, #3
 800a61a:	75fb      	strb	r3, [r7, #23]
      break;
 800a61c:	bf00      	nop
  }

  return (uint8_t)ret;
 800a61e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a620:	4618      	mov	r0, r3
 800a622:	3718      	adds	r7, #24
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b084      	sub	sp, #16
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	460b      	mov	r3, r1
 800a632:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a63a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a642:	2b00      	cmp	r3, #0
 800a644:	d101      	bne.n	800a64a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a646:	2303      	movs	r3, #3
 800a648:	e04f      	b.n	800a6ea <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a650:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a652:	78fa      	ldrb	r2, [r7, #3]
 800a654:	6879      	ldr	r1, [r7, #4]
 800a656:	4613      	mov	r3, r2
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	4413      	add	r3, r2
 800a65c:	009b      	lsls	r3, r3, #2
 800a65e:	440b      	add	r3, r1
 800a660:	3318      	adds	r3, #24
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d029      	beq.n	800a6bc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a668:	78fa      	ldrb	r2, [r7, #3]
 800a66a:	6879      	ldr	r1, [r7, #4]
 800a66c:	4613      	mov	r3, r2
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	4413      	add	r3, r2
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	440b      	add	r3, r1
 800a676:	3318      	adds	r3, #24
 800a678:	681a      	ldr	r2, [r3, #0]
 800a67a:	78f9      	ldrb	r1, [r7, #3]
 800a67c:	68f8      	ldr	r0, [r7, #12]
 800a67e:	460b      	mov	r3, r1
 800a680:	009b      	lsls	r3, r3, #2
 800a682:	440b      	add	r3, r1
 800a684:	00db      	lsls	r3, r3, #3
 800a686:	4403      	add	r3, r0
 800a688:	3320      	adds	r3, #32
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	fbb2 f1f3 	udiv	r1, r2, r3
 800a690:	fb01 f303 	mul.w	r3, r1, r3
 800a694:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a696:	2b00      	cmp	r3, #0
 800a698:	d110      	bne.n	800a6bc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a69a:	78fa      	ldrb	r2, [r7, #3]
 800a69c:	6879      	ldr	r1, [r7, #4]
 800a69e:	4613      	mov	r3, r2
 800a6a0:	009b      	lsls	r3, r3, #2
 800a6a2:	4413      	add	r3, r2
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	440b      	add	r3, r1
 800a6a8:	3318      	adds	r3, #24
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a6ae:	78f9      	ldrb	r1, [r7, #3]
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	6878      	ldr	r0, [r7, #4]
 800a6b6:	f001 feb8 	bl	800c42a <USBD_LL_Transmit>
 800a6ba:	e015      	b.n	800a6e8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00b      	beq.n	800a6e8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a6d6:	691b      	ldr	r3, [r3, #16]
 800a6d8:	68ba      	ldr	r2, [r7, #8]
 800a6da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a6e4:	78fa      	ldrb	r2, [r7, #3]
 800a6e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a6e8:	2300      	movs	r3, #0
}
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}

0800a6f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a6f2:	b580      	push	{r7, lr}
 800a6f4:	b084      	sub	sp, #16
 800a6f6:	af00      	add	r7, sp, #0
 800a6f8:	6078      	str	r0, [r7, #4]
 800a6fa:	460b      	mov	r3, r1
 800a6fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a704:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d101      	bne.n	800a714 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a710:	2303      	movs	r3, #3
 800a712:	e015      	b.n	800a740 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a714:	78fb      	ldrb	r3, [r7, #3]
 800a716:	4619      	mov	r1, r3
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f001 fec8 	bl	800c4ae <USBD_LL_GetRxDataSize>
 800a71e:	4602      	mov	r2, r0
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a72c:	68db      	ldr	r3, [r3, #12]
 800a72e:	68fa      	ldr	r2, [r7, #12]
 800a730:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a734:	68fa      	ldr	r2, [r7, #12]
 800a736:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a73a:	4611      	mov	r1, r2
 800a73c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a73e:	2300      	movs	r3, #0
}
 800a740:	4618      	mov	r0, r3
 800a742:	3710      	adds	r7, #16
 800a744:	46bd      	mov	sp, r7
 800a746:	bd80      	pop	{r7, pc}

0800a748 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b084      	sub	sp, #16
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a756:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d101      	bne.n	800a762 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a75e:	2303      	movs	r3, #3
 800a760:	e01b      	b.n	800a79a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d015      	beq.n	800a798 <USBD_CDC_EP0_RxReady+0x50>
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a772:	2bff      	cmp	r3, #255	; 0xff
 800a774:	d010      	beq.n	800a798 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	68fa      	ldr	r2, [r7, #12]
 800a780:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a784:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a78c:	b292      	uxth	r2, r2
 800a78e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	22ff      	movs	r2, #255	; 0xff
 800a794:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
	...

0800a7a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a7a4:	b480      	push	{r7}
 800a7a6:	b083      	sub	sp, #12
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2243      	movs	r2, #67	; 0x43
 800a7b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a7b2:	4b03      	ldr	r3, [pc, #12]	; (800a7c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	370c      	adds	r7, #12
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr
 800a7c0:	20000094 	.word	0x20000094

0800a7c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b083      	sub	sp, #12
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2243      	movs	r2, #67	; 0x43
 800a7d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a7d2:	4b03      	ldr	r3, [pc, #12]	; (800a7e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	370c      	adds	r7, #12
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr
 800a7e0:	20000050 	.word	0x20000050

0800a7e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b083      	sub	sp, #12
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2243      	movs	r2, #67	; 0x43
 800a7f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a7f2:	4b03      	ldr	r3, [pc, #12]	; (800a800 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	370c      	adds	r7, #12
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr
 800a800:	200000d8 	.word	0x200000d8

0800a804 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	220a      	movs	r2, #10
 800a810:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a812:	4b03      	ldr	r3, [pc, #12]	; (800a820 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a814:	4618      	mov	r0, r3
 800a816:	370c      	adds	r7, #12
 800a818:	46bd      	mov	sp, r7
 800a81a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81e:	4770      	bx	lr
 800a820:	2000000c 	.word	0x2000000c

0800a824 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d101      	bne.n	800a838 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a834:	2303      	movs	r3, #3
 800a836:	e004      	b.n	800a842 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	683a      	ldr	r2, [r7, #0]
 800a83c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a840:	2300      	movs	r3, #0
}
 800a842:	4618      	mov	r0, r3
 800a844:	370c      	adds	r7, #12
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr

0800a84e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a84e:	b480      	push	{r7}
 800a850:	b087      	sub	sp, #28
 800a852:	af00      	add	r7, sp, #0
 800a854:	60f8      	str	r0, [r7, #12]
 800a856:	60b9      	str	r1, [r7, #8]
 800a858:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a860:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d101      	bne.n	800a86c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a868:	2303      	movs	r3, #3
 800a86a:	e008      	b.n	800a87e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a874:	697b      	ldr	r3, [r7, #20]
 800a876:	687a      	ldr	r2, [r7, #4]
 800a878:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a87c:	2300      	movs	r3, #0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	371c      	adds	r7, #28
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr

0800a88a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a88a:	b480      	push	{r7}
 800a88c:	b085      	sub	sp, #20
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
 800a892:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a89a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d101      	bne.n	800a8a6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a8a2:	2303      	movs	r3, #3
 800a8a4:	e004      	b.n	800a8b0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	683a      	ldr	r2, [r7, #0]
 800a8aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3714      	adds	r7, #20
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b084      	sub	sp, #16
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8ca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d101      	bne.n	800a8de <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a8da:	2303      	movs	r3, #3
 800a8dc:	e01a      	b.n	800a914 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800a8de:	68bb      	ldr	r3, [r7, #8]
 800a8e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d114      	bne.n	800a912 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	2201      	movs	r2, #1
 800a8ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800a8fa:	68bb      	ldr	r3, [r7, #8]
 800a8fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800a906:	2181      	movs	r1, #129	; 0x81
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f001 fd8e 	bl	800c42a <USBD_LL_Transmit>

    ret = USBD_OK;
 800a90e:	2300      	movs	r3, #0
 800a910:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a912:	7bfb      	ldrb	r3, [r7, #15]
}
 800a914:	4618      	mov	r0, r3
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b084      	sub	sp, #16
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a92a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a932:	2b00      	cmp	r3, #0
 800a934:	d101      	bne.n	800a93a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a936:	2303      	movs	r3, #3
 800a938:	e016      	b.n	800a968 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	7c1b      	ldrb	r3, [r3, #16]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d109      	bne.n	800a956 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a948:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a94c:	2101      	movs	r1, #1
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f001 fd8c 	bl	800c46c <USBD_LL_PrepareReceive>
 800a954:	e007      	b.n	800a966 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a95c:	2340      	movs	r3, #64	; 0x40
 800a95e:	2101      	movs	r1, #1
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	f001 fd83 	bl	800c46c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a966:	2300      	movs	r3, #0
}
 800a968:	4618      	mov	r0, r3
 800a96a:	3710      	adds	r7, #16
 800a96c:	46bd      	mov	sp, r7
 800a96e:	bd80      	pop	{r7, pc}

0800a970 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	4613      	mov	r3, r2
 800a97c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	2b00      	cmp	r3, #0
 800a982:	d101      	bne.n	800a988 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a984:	2303      	movs	r3, #3
 800a986:	e01f      	b.n	800a9c8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2200      	movs	r2, #0
 800a994:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	2200      	movs	r2, #0
 800a99c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d003      	beq.n	800a9ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	68ba      	ldr	r2, [r7, #8]
 800a9aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	79fa      	ldrb	r2, [r7, #7]
 800a9ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a9bc:	68f8      	ldr	r0, [r7, #12]
 800a9be:	f001 fbeb 	bl	800c198 <USBD_LL_Init>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a9c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	3718      	adds	r7, #24
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	bd80      	pop	{r7, pc}

0800a9d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	b084      	sub	sp, #16
 800a9d4:	af00      	add	r7, sp, #0
 800a9d6:	6078      	str	r0, [r7, #4]
 800a9d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a9da:	2300      	movs	r3, #0
 800a9dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d101      	bne.n	800a9e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a9e4:	2303      	movs	r3, #3
 800a9e6:	e016      	b.n	800aa16 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	683a      	ldr	r2, [r7, #0]
 800a9ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d00b      	beq.n	800aa14 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa04:	f107 020e 	add.w	r2, r7, #14
 800aa08:	4610      	mov	r0, r2
 800aa0a:	4798      	blx	r3
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}

0800aa1e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800aa1e:	b580      	push	{r7, lr}
 800aa20:	b082      	sub	sp, #8
 800aa22:	af00      	add	r7, sp, #0
 800aa24:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f001 fc16 	bl	800c258 <USBD_LL_Start>
 800aa2c:	4603      	mov	r3, r0
}
 800aa2e:	4618      	mov	r0, r3
 800aa30:	3708      	adds	r7, #8
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800aa36:	b480      	push	{r7}
 800aa38:	b083      	sub	sp, #12
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa3e:	2300      	movs	r3, #0
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	370c      	adds	r7, #12
 800aa44:	46bd      	mov	sp, r7
 800aa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4a:	4770      	bx	lr

0800aa4c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b084      	sub	sp, #16
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
 800aa54:	460b      	mov	r3, r1
 800aa56:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800aa58:	2303      	movs	r3, #3
 800aa5a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d009      	beq.n	800aa7a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	78fa      	ldrb	r2, [r7, #3]
 800aa70:	4611      	mov	r1, r2
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	4798      	blx	r3
 800aa76:	4603      	mov	r3, r0
 800aa78:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800aa7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa7c:	4618      	mov	r0, r3
 800aa7e:	3710      	adds	r7, #16
 800aa80:	46bd      	mov	sp, r7
 800aa82:	bd80      	pop	{r7, pc}

0800aa84 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b082      	sub	sp, #8
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	460b      	mov	r3, r1
 800aa8e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d007      	beq.n	800aaaa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	78fa      	ldrb	r2, [r7, #3]
 800aaa4:	4611      	mov	r1, r2
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	4798      	blx	r3
  }

  return USBD_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3708      	adds	r7, #8
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800aac4:	6839      	ldr	r1, [r7, #0]
 800aac6:	4618      	mov	r0, r3
 800aac8:	f000 ff46 	bl	800b958 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800aada:	461a      	mov	r2, r3
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aae8:	f003 031f 	and.w	r3, r3, #31
 800aaec:	2b02      	cmp	r3, #2
 800aaee:	d01a      	beq.n	800ab26 <USBD_LL_SetupStage+0x72>
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	d822      	bhi.n	800ab3a <USBD_LL_SetupStage+0x86>
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d002      	beq.n	800aafe <USBD_LL_SetupStage+0x4a>
 800aaf8:	2b01      	cmp	r3, #1
 800aafa:	d00a      	beq.n	800ab12 <USBD_LL_SetupStage+0x5e>
 800aafc:	e01d      	b.n	800ab3a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab04:	4619      	mov	r1, r3
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f000 f9ee 	bl	800aee8 <USBD_StdDevReq>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	73fb      	strb	r3, [r7, #15]
      break;
 800ab10:	e020      	b.n	800ab54 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab18:	4619      	mov	r1, r3
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 fa52 	bl	800afc4 <USBD_StdItfReq>
 800ab20:	4603      	mov	r3, r0
 800ab22:	73fb      	strb	r3, [r7, #15]
      break;
 800ab24:	e016      	b.n	800ab54 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	f000 fa91 	bl	800b056 <USBD_StdEPReq>
 800ab34:	4603      	mov	r3, r0
 800ab36:	73fb      	strb	r3, [r7, #15]
      break;
 800ab38:	e00c      	b.n	800ab54 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ab40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	4619      	mov	r1, r3
 800ab48:	6878      	ldr	r0, [r7, #4]
 800ab4a:	f001 fbe5 	bl	800c318 <USBD_LL_StallEP>
 800ab4e:	4603      	mov	r3, r0
 800ab50:	73fb      	strb	r3, [r7, #15]
      break;
 800ab52:	bf00      	nop
  }

  return ret;
 800ab54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab56:	4618      	mov	r0, r3
 800ab58:	3710      	adds	r7, #16
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}

0800ab5e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ab5e:	b580      	push	{r7, lr}
 800ab60:	b086      	sub	sp, #24
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	60f8      	str	r0, [r7, #12]
 800ab66:	460b      	mov	r3, r1
 800ab68:	607a      	str	r2, [r7, #4]
 800ab6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ab6c:	7afb      	ldrb	r3, [r7, #11]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d138      	bne.n	800abe4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ab78:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab80:	2b03      	cmp	r3, #3
 800ab82:	d14a      	bne.n	800ac1a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	689a      	ldr	r2, [r3, #8]
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	68db      	ldr	r3, [r3, #12]
 800ab8c:	429a      	cmp	r2, r3
 800ab8e:	d913      	bls.n	800abb8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	689a      	ldr	r2, [r3, #8]
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	68db      	ldr	r3, [r3, #12]
 800ab98:	1ad2      	subs	r2, r2, r3
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	68da      	ldr	r2, [r3, #12]
 800aba2:	693b      	ldr	r3, [r7, #16]
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	4293      	cmp	r3, r2
 800aba8:	bf28      	it	cs
 800abaa:	4613      	movcs	r3, r2
 800abac:	461a      	mov	r2, r3
 800abae:	6879      	ldr	r1, [r7, #4]
 800abb0:	68f8      	ldr	r0, [r7, #12]
 800abb2:	f000 ffc5 	bl	800bb40 <USBD_CtlContinueRx>
 800abb6:	e030      	b.n	800ac1a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	2b03      	cmp	r3, #3
 800abc2:	d10b      	bne.n	800abdc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abca:	691b      	ldr	r3, [r3, #16]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d005      	beq.n	800abdc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abd6:	691b      	ldr	r3, [r3, #16]
 800abd8:	68f8      	ldr	r0, [r7, #12]
 800abda:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f000 ffc0 	bl	800bb62 <USBD_CtlSendStatus>
 800abe2:	e01a      	b.n	800ac1a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abea:	b2db      	uxtb	r3, r3
 800abec:	2b03      	cmp	r3, #3
 800abee:	d114      	bne.n	800ac1a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abf6:	699b      	ldr	r3, [r3, #24]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00e      	beq.n	800ac1a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	7afa      	ldrb	r2, [r7, #11]
 800ac06:	4611      	mov	r1, r2
 800ac08:	68f8      	ldr	r0, [r7, #12]
 800ac0a:	4798      	blx	r3
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ac10:	7dfb      	ldrb	r3, [r7, #23]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d001      	beq.n	800ac1a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ac16:	7dfb      	ldrb	r3, [r7, #23]
 800ac18:	e000      	b.n	800ac1c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ac1a:	2300      	movs	r3, #0
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3718      	adds	r7, #24
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b086      	sub	sp, #24
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	60f8      	str	r0, [r7, #12]
 800ac2c:	460b      	mov	r3, r1
 800ac2e:	607a      	str	r2, [r7, #4]
 800ac30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ac32:	7afb      	ldrb	r3, [r7, #11]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d16b      	bne.n	800ad10 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	3314      	adds	r3, #20
 800ac3c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ac44:	2b02      	cmp	r3, #2
 800ac46:	d156      	bne.n	800acf6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	689a      	ldr	r2, [r3, #8]
 800ac4c:	693b      	ldr	r3, [r7, #16]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d914      	bls.n	800ac7e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ac54:	693b      	ldr	r3, [r7, #16]
 800ac56:	689a      	ldr	r2, [r3, #8]
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	1ad2      	subs	r2, r2, r3
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	461a      	mov	r2, r3
 800ac68:	6879      	ldr	r1, [r7, #4]
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f000 ff3a 	bl	800bae4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ac70:	2300      	movs	r3, #0
 800ac72:	2200      	movs	r2, #0
 800ac74:	2100      	movs	r1, #0
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f001 fbf8 	bl	800c46c <USBD_LL_PrepareReceive>
 800ac7c:	e03b      	b.n	800acf6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ac7e:	693b      	ldr	r3, [r7, #16]
 800ac80:	68da      	ldr	r2, [r3, #12]
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	689b      	ldr	r3, [r3, #8]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d11c      	bne.n	800acc4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	685a      	ldr	r2, [r3, #4]
 800ac8e:	693b      	ldr	r3, [r7, #16]
 800ac90:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ac92:	429a      	cmp	r2, r3
 800ac94:	d316      	bcc.n	800acc4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	685a      	ldr	r2, [r3, #4]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800aca0:	429a      	cmp	r2, r3
 800aca2:	d20f      	bcs.n	800acc4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800aca4:	2200      	movs	r2, #0
 800aca6:	2100      	movs	r1, #0
 800aca8:	68f8      	ldr	r0, [r7, #12]
 800acaa:	f000 ff1b 	bl	800bae4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	2200      	movs	r2, #0
 800acb2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800acb6:	2300      	movs	r3, #0
 800acb8:	2200      	movs	r2, #0
 800acba:	2100      	movs	r1, #0
 800acbc:	68f8      	ldr	r0, [r7, #12]
 800acbe:	f001 fbd5 	bl	800c46c <USBD_LL_PrepareReceive>
 800acc2:	e018      	b.n	800acf6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acca:	b2db      	uxtb	r3, r3
 800accc:	2b03      	cmp	r3, #3
 800acce:	d10b      	bne.n	800ace8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acd6:	68db      	ldr	r3, [r3, #12]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d005      	beq.n	800ace8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	68f8      	ldr	r0, [r7, #12]
 800ace6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ace8:	2180      	movs	r1, #128	; 0x80
 800acea:	68f8      	ldr	r0, [r7, #12]
 800acec:	f001 fb14 	bl	800c318 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800acf0:	68f8      	ldr	r0, [r7, #12]
 800acf2:	f000 ff49 	bl	800bb88 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d122      	bne.n	800ad46 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800ad00:	68f8      	ldr	r0, [r7, #12]
 800ad02:	f7ff fe98 	bl	800aa36 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2200      	movs	r2, #0
 800ad0a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ad0e:	e01a      	b.n	800ad46 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	2b03      	cmp	r3, #3
 800ad1a:	d114      	bne.n	800ad46 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad22:	695b      	ldr	r3, [r3, #20]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00e      	beq.n	800ad46 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad2e:	695b      	ldr	r3, [r3, #20]
 800ad30:	7afa      	ldrb	r2, [r7, #11]
 800ad32:	4611      	mov	r1, r2
 800ad34:	68f8      	ldr	r0, [r7, #12]
 800ad36:	4798      	blx	r3
 800ad38:	4603      	mov	r3, r0
 800ad3a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ad3c:	7dfb      	ldrb	r3, [r7, #23]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d001      	beq.n	800ad46 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800ad42:	7dfb      	ldrb	r3, [r7, #23]
 800ad44:	e000      	b.n	800ad48 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3718      	adds	r7, #24
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b082      	sub	sp, #8
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2201      	movs	r2, #1
 800ad5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2200      	movs	r2, #0
 800ad64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d101      	bne.n	800ad84 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ad80:	2303      	movs	r3, #3
 800ad82:	e02f      	b.n	800ade4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d00f      	beq.n	800adae <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad94:	685b      	ldr	r3, [r3, #4]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d009      	beq.n	800adae <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	6852      	ldr	r2, [r2, #4]
 800ada6:	b2d2      	uxtb	r2, r2
 800ada8:	4611      	mov	r1, r2
 800adaa:	6878      	ldr	r0, [r7, #4]
 800adac:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800adae:	2340      	movs	r3, #64	; 0x40
 800adb0:	2200      	movs	r2, #0
 800adb2:	2100      	movs	r1, #0
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f001 fa6a 	bl	800c28e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2201      	movs	r2, #1
 800adbe:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	2240      	movs	r2, #64	; 0x40
 800adc6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800adca:	2340      	movs	r3, #64	; 0x40
 800adcc:	2200      	movs	r2, #0
 800adce:	2180      	movs	r1, #128	; 0x80
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f001 fa5c 	bl	800c28e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2201      	movs	r2, #1
 800adda:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2240      	movs	r2, #64	; 0x40
 800ade0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ade2:	2300      	movs	r3, #0
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3708      	adds	r7, #8
 800ade8:	46bd      	mov	sp, r7
 800adea:	bd80      	pop	{r7, pc}

0800adec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800adec:	b480      	push	{r7}
 800adee:	b083      	sub	sp, #12
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
 800adf4:	460b      	mov	r3, r1
 800adf6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	78fa      	ldrb	r2, [r7, #3]
 800adfc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800adfe:	2300      	movs	r3, #0
}
 800ae00:	4618      	mov	r0, r3
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr

0800ae0c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ae0c:	b480      	push	{r7}
 800ae0e:	b083      	sub	sp, #12
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae1a:	b2da      	uxtb	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2204      	movs	r2, #4
 800ae26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ae2a:	2300      	movs	r3, #0
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	370c      	adds	r7, #12
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr

0800ae38 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ae38:	b480      	push	{r7}
 800ae3a:	b083      	sub	sp, #12
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae46:	b2db      	uxtb	r3, r3
 800ae48:	2b04      	cmp	r3, #4
 800ae4a:	d106      	bne.n	800ae5a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ae52:	b2da      	uxtb	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ae5a:	2300      	movs	r3, #0
}
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	370c      	adds	r7, #12
 800ae60:	46bd      	mov	sp, r7
 800ae62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae66:	4770      	bx	lr

0800ae68 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d101      	bne.n	800ae7e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ae7a:	2303      	movs	r3, #3
 800ae7c:	e012      	b.n	800aea4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b03      	cmp	r3, #3
 800ae88:	d10b      	bne.n	800aea2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae90:	69db      	ldr	r3, [r3, #28]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d005      	beq.n	800aea2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae9c:	69db      	ldr	r3, [r3, #28]
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800aeac:	b480      	push	{r7}
 800aeae:	b087      	sub	sp, #28
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800aebe:	697b      	ldr	r3, [r7, #20]
 800aec0:	3301      	adds	r3, #1
 800aec2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	781b      	ldrb	r3, [r3, #0]
 800aec8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800aeca:	8a3b      	ldrh	r3, [r7, #16]
 800aecc:	021b      	lsls	r3, r3, #8
 800aece:	b21a      	sxth	r2, r3
 800aed0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aed4:	4313      	orrs	r3, r2
 800aed6:	b21b      	sxth	r3, r3
 800aed8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aeda:	89fb      	ldrh	r3, [r7, #14]
}
 800aedc:	4618      	mov	r0, r3
 800aede:	371c      	adds	r7, #28
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr

0800aee8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aef2:	2300      	movs	r3, #0
 800aef4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aefe:	2b40      	cmp	r3, #64	; 0x40
 800af00:	d005      	beq.n	800af0e <USBD_StdDevReq+0x26>
 800af02:	2b40      	cmp	r3, #64	; 0x40
 800af04:	d853      	bhi.n	800afae <USBD_StdDevReq+0xc6>
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00b      	beq.n	800af22 <USBD_StdDevReq+0x3a>
 800af0a:	2b20      	cmp	r3, #32
 800af0c:	d14f      	bne.n	800afae <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af14:	689b      	ldr	r3, [r3, #8]
 800af16:	6839      	ldr	r1, [r7, #0]
 800af18:	6878      	ldr	r0, [r7, #4]
 800af1a:	4798      	blx	r3
 800af1c:	4603      	mov	r3, r0
 800af1e:	73fb      	strb	r3, [r7, #15]
      break;
 800af20:	e04a      	b.n	800afb8 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	785b      	ldrb	r3, [r3, #1]
 800af26:	2b09      	cmp	r3, #9
 800af28:	d83b      	bhi.n	800afa2 <USBD_StdDevReq+0xba>
 800af2a:	a201      	add	r2, pc, #4	; (adr r2, 800af30 <USBD_StdDevReq+0x48>)
 800af2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af30:	0800af85 	.word	0x0800af85
 800af34:	0800af99 	.word	0x0800af99
 800af38:	0800afa3 	.word	0x0800afa3
 800af3c:	0800af8f 	.word	0x0800af8f
 800af40:	0800afa3 	.word	0x0800afa3
 800af44:	0800af63 	.word	0x0800af63
 800af48:	0800af59 	.word	0x0800af59
 800af4c:	0800afa3 	.word	0x0800afa3
 800af50:	0800af7b 	.word	0x0800af7b
 800af54:	0800af6d 	.word	0x0800af6d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800af58:	6839      	ldr	r1, [r7, #0]
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 f9de 	bl	800b31c <USBD_GetDescriptor>
          break;
 800af60:	e024      	b.n	800afac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800af62:	6839      	ldr	r1, [r7, #0]
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 fb6d 	bl	800b644 <USBD_SetAddress>
          break;
 800af6a:	e01f      	b.n	800afac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800af6c:	6839      	ldr	r1, [r7, #0]
 800af6e:	6878      	ldr	r0, [r7, #4]
 800af70:	f000 fbac 	bl	800b6cc <USBD_SetConfig>
 800af74:	4603      	mov	r3, r0
 800af76:	73fb      	strb	r3, [r7, #15]
          break;
 800af78:	e018      	b.n	800afac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800af7a:	6839      	ldr	r1, [r7, #0]
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 fc4b 	bl	800b818 <USBD_GetConfig>
          break;
 800af82:	e013      	b.n	800afac <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800af84:	6839      	ldr	r1, [r7, #0]
 800af86:	6878      	ldr	r0, [r7, #4]
 800af88:	f000 fc7c 	bl	800b884 <USBD_GetStatus>
          break;
 800af8c:	e00e      	b.n	800afac <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800af8e:	6839      	ldr	r1, [r7, #0]
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 fcab 	bl	800b8ec <USBD_SetFeature>
          break;
 800af96:	e009      	b.n	800afac <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 fcba 	bl	800b914 <USBD_ClrFeature>
          break;
 800afa0:	e004      	b.n	800afac <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800afa2:	6839      	ldr	r1, [r7, #0]
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 fd11 	bl	800b9cc <USBD_CtlError>
          break;
 800afaa:	bf00      	nop
      }
      break;
 800afac:	e004      	b.n	800afb8 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800afae:	6839      	ldr	r1, [r7, #0]
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 fd0b 	bl	800b9cc <USBD_CtlError>
      break;
 800afb6:	bf00      	nop
  }

  return ret;
 800afb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3710      	adds	r7, #16
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop

0800afc4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800afce:	2300      	movs	r3, #0
 800afd0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800afda:	2b40      	cmp	r3, #64	; 0x40
 800afdc:	d005      	beq.n	800afea <USBD_StdItfReq+0x26>
 800afde:	2b40      	cmp	r3, #64	; 0x40
 800afe0:	d82f      	bhi.n	800b042 <USBD_StdItfReq+0x7e>
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d001      	beq.n	800afea <USBD_StdItfReq+0x26>
 800afe6:	2b20      	cmp	r3, #32
 800afe8:	d12b      	bne.n	800b042 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aff0:	b2db      	uxtb	r3, r3
 800aff2:	3b01      	subs	r3, #1
 800aff4:	2b02      	cmp	r3, #2
 800aff6:	d81d      	bhi.n	800b034 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	889b      	ldrh	r3, [r3, #4]
 800affc:	b2db      	uxtb	r3, r3
 800affe:	2b01      	cmp	r3, #1
 800b000:	d813      	bhi.n	800b02a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	6839      	ldr	r1, [r7, #0]
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	4798      	blx	r3
 800b010:	4603      	mov	r3, r0
 800b012:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b014:	683b      	ldr	r3, [r7, #0]
 800b016:	88db      	ldrh	r3, [r3, #6]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d110      	bne.n	800b03e <USBD_StdItfReq+0x7a>
 800b01c:	7bfb      	ldrb	r3, [r7, #15]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d10d      	bne.n	800b03e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 fd9d 	bl	800bb62 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b028:	e009      	b.n	800b03e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800b02a:	6839      	ldr	r1, [r7, #0]
 800b02c:	6878      	ldr	r0, [r7, #4]
 800b02e:	f000 fccd 	bl	800b9cc <USBD_CtlError>
          break;
 800b032:	e004      	b.n	800b03e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800b034:	6839      	ldr	r1, [r7, #0]
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fcc8 	bl	800b9cc <USBD_CtlError>
          break;
 800b03c:	e000      	b.n	800b040 <USBD_StdItfReq+0x7c>
          break;
 800b03e:	bf00      	nop
      }
      break;
 800b040:	e004      	b.n	800b04c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800b042:	6839      	ldr	r1, [r7, #0]
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 fcc1 	bl	800b9cc <USBD_CtlError>
      break;
 800b04a:	bf00      	nop
  }

  return ret;
 800b04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3710      	adds	r7, #16
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b084      	sub	sp, #16
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	6078      	str	r0, [r7, #4]
 800b05e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800b060:	2300      	movs	r3, #0
 800b062:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	889b      	ldrh	r3, [r3, #4]
 800b068:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	781b      	ldrb	r3, [r3, #0]
 800b06e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b072:	2b40      	cmp	r3, #64	; 0x40
 800b074:	d007      	beq.n	800b086 <USBD_StdEPReq+0x30>
 800b076:	2b40      	cmp	r3, #64	; 0x40
 800b078:	f200 8145 	bhi.w	800b306 <USBD_StdEPReq+0x2b0>
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00c      	beq.n	800b09a <USBD_StdEPReq+0x44>
 800b080:	2b20      	cmp	r3, #32
 800b082:	f040 8140 	bne.w	800b306 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	6839      	ldr	r1, [r7, #0]
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	4798      	blx	r3
 800b094:	4603      	mov	r3, r0
 800b096:	73fb      	strb	r3, [r7, #15]
      break;
 800b098:	e13a      	b.n	800b310 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	785b      	ldrb	r3, [r3, #1]
 800b09e:	2b03      	cmp	r3, #3
 800b0a0:	d007      	beq.n	800b0b2 <USBD_StdEPReq+0x5c>
 800b0a2:	2b03      	cmp	r3, #3
 800b0a4:	f300 8129 	bgt.w	800b2fa <USBD_StdEPReq+0x2a4>
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d07f      	beq.n	800b1ac <USBD_StdEPReq+0x156>
 800b0ac:	2b01      	cmp	r3, #1
 800b0ae:	d03c      	beq.n	800b12a <USBD_StdEPReq+0xd4>
 800b0b0:	e123      	b.n	800b2fa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0b8:	b2db      	uxtb	r3, r3
 800b0ba:	2b02      	cmp	r3, #2
 800b0bc:	d002      	beq.n	800b0c4 <USBD_StdEPReq+0x6e>
 800b0be:	2b03      	cmp	r3, #3
 800b0c0:	d016      	beq.n	800b0f0 <USBD_StdEPReq+0x9a>
 800b0c2:	e02c      	b.n	800b11e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0c4:	7bbb      	ldrb	r3, [r7, #14]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00d      	beq.n	800b0e6 <USBD_StdEPReq+0x90>
 800b0ca:	7bbb      	ldrb	r3, [r7, #14]
 800b0cc:	2b80      	cmp	r3, #128	; 0x80
 800b0ce:	d00a      	beq.n	800b0e6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b0d0:	7bbb      	ldrb	r3, [r7, #14]
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f001 f91f 	bl	800c318 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0da:	2180      	movs	r1, #128	; 0x80
 800b0dc:	6878      	ldr	r0, [r7, #4]
 800b0de:	f001 f91b 	bl	800c318 <USBD_LL_StallEP>
 800b0e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b0e4:	e020      	b.n	800b128 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800b0e6:	6839      	ldr	r1, [r7, #0]
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f000 fc6f 	bl	800b9cc <USBD_CtlError>
              break;
 800b0ee:	e01b      	b.n	800b128 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b0f0:	683b      	ldr	r3, [r7, #0]
 800b0f2:	885b      	ldrh	r3, [r3, #2]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d10e      	bne.n	800b116 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b0f8:	7bbb      	ldrb	r3, [r7, #14]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d00b      	beq.n	800b116 <USBD_StdEPReq+0xc0>
 800b0fe:	7bbb      	ldrb	r3, [r7, #14]
 800b100:	2b80      	cmp	r3, #128	; 0x80
 800b102:	d008      	beq.n	800b116 <USBD_StdEPReq+0xc0>
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	88db      	ldrh	r3, [r3, #6]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d104      	bne.n	800b116 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b10c:	7bbb      	ldrb	r3, [r7, #14]
 800b10e:	4619      	mov	r1, r3
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f001 f901 	bl	800c318 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b116:	6878      	ldr	r0, [r7, #4]
 800b118:	f000 fd23 	bl	800bb62 <USBD_CtlSendStatus>

              break;
 800b11c:	e004      	b.n	800b128 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800b11e:	6839      	ldr	r1, [r7, #0]
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 fc53 	bl	800b9cc <USBD_CtlError>
              break;
 800b126:	bf00      	nop
          }
          break;
 800b128:	e0ec      	b.n	800b304 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b130:	b2db      	uxtb	r3, r3
 800b132:	2b02      	cmp	r3, #2
 800b134:	d002      	beq.n	800b13c <USBD_StdEPReq+0xe6>
 800b136:	2b03      	cmp	r3, #3
 800b138:	d016      	beq.n	800b168 <USBD_StdEPReq+0x112>
 800b13a:	e030      	b.n	800b19e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b13c:	7bbb      	ldrb	r3, [r7, #14]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d00d      	beq.n	800b15e <USBD_StdEPReq+0x108>
 800b142:	7bbb      	ldrb	r3, [r7, #14]
 800b144:	2b80      	cmp	r3, #128	; 0x80
 800b146:	d00a      	beq.n	800b15e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b148:	7bbb      	ldrb	r3, [r7, #14]
 800b14a:	4619      	mov	r1, r3
 800b14c:	6878      	ldr	r0, [r7, #4]
 800b14e:	f001 f8e3 	bl	800c318 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b152:	2180      	movs	r1, #128	; 0x80
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f001 f8df 	bl	800c318 <USBD_LL_StallEP>
 800b15a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b15c:	e025      	b.n	800b1aa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800b15e:	6839      	ldr	r1, [r7, #0]
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f000 fc33 	bl	800b9cc <USBD_CtlError>
              break;
 800b166:	e020      	b.n	800b1aa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	885b      	ldrh	r3, [r3, #2]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d11b      	bne.n	800b1a8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b170:	7bbb      	ldrb	r3, [r7, #14]
 800b172:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b176:	2b00      	cmp	r3, #0
 800b178:	d004      	beq.n	800b184 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b17a:	7bbb      	ldrb	r3, [r7, #14]
 800b17c:	4619      	mov	r1, r3
 800b17e:	6878      	ldr	r0, [r7, #4]
 800b180:	f001 f8e9 	bl	800c356 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f000 fcec 	bl	800bb62 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b190:	689b      	ldr	r3, [r3, #8]
 800b192:	6839      	ldr	r1, [r7, #0]
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	4798      	blx	r3
 800b198:	4603      	mov	r3, r0
 800b19a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800b19c:	e004      	b.n	800b1a8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800b19e:	6839      	ldr	r1, [r7, #0]
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 fc13 	bl	800b9cc <USBD_CtlError>
              break;
 800b1a6:	e000      	b.n	800b1aa <USBD_StdEPReq+0x154>
              break;
 800b1a8:	bf00      	nop
          }
          break;
 800b1aa:	e0ab      	b.n	800b304 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	2b02      	cmp	r3, #2
 800b1b6:	d002      	beq.n	800b1be <USBD_StdEPReq+0x168>
 800b1b8:	2b03      	cmp	r3, #3
 800b1ba:	d032      	beq.n	800b222 <USBD_StdEPReq+0x1cc>
 800b1bc:	e097      	b.n	800b2ee <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b1be:	7bbb      	ldrb	r3, [r7, #14]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d007      	beq.n	800b1d4 <USBD_StdEPReq+0x17e>
 800b1c4:	7bbb      	ldrb	r3, [r7, #14]
 800b1c6:	2b80      	cmp	r3, #128	; 0x80
 800b1c8:	d004      	beq.n	800b1d4 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800b1ca:	6839      	ldr	r1, [r7, #0]
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f000 fbfd 	bl	800b9cc <USBD_CtlError>
                break;
 800b1d2:	e091      	b.n	800b2f8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	da0b      	bge.n	800b1f4 <USBD_StdEPReq+0x19e>
 800b1dc:	7bbb      	ldrb	r3, [r7, #14]
 800b1de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1e2:	4613      	mov	r3, r2
 800b1e4:	009b      	lsls	r3, r3, #2
 800b1e6:	4413      	add	r3, r2
 800b1e8:	009b      	lsls	r3, r3, #2
 800b1ea:	3310      	adds	r3, #16
 800b1ec:	687a      	ldr	r2, [r7, #4]
 800b1ee:	4413      	add	r3, r2
 800b1f0:	3304      	adds	r3, #4
 800b1f2:	e00b      	b.n	800b20c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1f4:	7bbb      	ldrb	r3, [r7, #14]
 800b1f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1fa:	4613      	mov	r3, r2
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	4413      	add	r3, r2
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	4413      	add	r3, r2
 800b20a:	3304      	adds	r3, #4
 800b20c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	2200      	movs	r2, #0
 800b212:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	2202      	movs	r2, #2
 800b218:	4619      	mov	r1, r3
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 fc47 	bl	800baae <USBD_CtlSendData>
              break;
 800b220:	e06a      	b.n	800b2f8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b222:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b226:	2b00      	cmp	r3, #0
 800b228:	da11      	bge.n	800b24e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b22a:	7bbb      	ldrb	r3, [r7, #14]
 800b22c:	f003 020f 	and.w	r2, r3, #15
 800b230:	6879      	ldr	r1, [r7, #4]
 800b232:	4613      	mov	r3, r2
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	4413      	add	r3, r2
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	440b      	add	r3, r1
 800b23c:	3324      	adds	r3, #36	; 0x24
 800b23e:	881b      	ldrh	r3, [r3, #0]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d117      	bne.n	800b274 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b244:	6839      	ldr	r1, [r7, #0]
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 fbc0 	bl	800b9cc <USBD_CtlError>
                  break;
 800b24c:	e054      	b.n	800b2f8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b24e:	7bbb      	ldrb	r3, [r7, #14]
 800b250:	f003 020f 	and.w	r2, r3, #15
 800b254:	6879      	ldr	r1, [r7, #4]
 800b256:	4613      	mov	r3, r2
 800b258:	009b      	lsls	r3, r3, #2
 800b25a:	4413      	add	r3, r2
 800b25c:	009b      	lsls	r3, r3, #2
 800b25e:	440b      	add	r3, r1
 800b260:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b264:	881b      	ldrh	r3, [r3, #0]
 800b266:	2b00      	cmp	r3, #0
 800b268:	d104      	bne.n	800b274 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800b26a:	6839      	ldr	r1, [r7, #0]
 800b26c:	6878      	ldr	r0, [r7, #4]
 800b26e:	f000 fbad 	bl	800b9cc <USBD_CtlError>
                  break;
 800b272:	e041      	b.n	800b2f8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b274:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	da0b      	bge.n	800b294 <USBD_StdEPReq+0x23e>
 800b27c:	7bbb      	ldrb	r3, [r7, #14]
 800b27e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b282:	4613      	mov	r3, r2
 800b284:	009b      	lsls	r3, r3, #2
 800b286:	4413      	add	r3, r2
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	3310      	adds	r3, #16
 800b28c:	687a      	ldr	r2, [r7, #4]
 800b28e:	4413      	add	r3, r2
 800b290:	3304      	adds	r3, #4
 800b292:	e00b      	b.n	800b2ac <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b294:	7bbb      	ldrb	r3, [r7, #14]
 800b296:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b29a:	4613      	mov	r3, r2
 800b29c:	009b      	lsls	r3, r3, #2
 800b29e:	4413      	add	r3, r2
 800b2a0:	009b      	lsls	r3, r3, #2
 800b2a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b2a6:	687a      	ldr	r2, [r7, #4]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	3304      	adds	r3, #4
 800b2ac:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b2ae:	7bbb      	ldrb	r3, [r7, #14]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d002      	beq.n	800b2ba <USBD_StdEPReq+0x264>
 800b2b4:	7bbb      	ldrb	r3, [r7, #14]
 800b2b6:	2b80      	cmp	r3, #128	; 0x80
 800b2b8:	d103      	bne.n	800b2c2 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	601a      	str	r2, [r3, #0]
 800b2c0:	e00e      	b.n	800b2e0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b2c2:	7bbb      	ldrb	r3, [r7, #14]
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f001 f864 	bl	800c394 <USBD_LL_IsStallEP>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d003      	beq.n	800b2da <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	601a      	str	r2, [r3, #0]
 800b2d8:	e002      	b.n	800b2e0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	2200      	movs	r2, #0
 800b2de:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	2202      	movs	r2, #2
 800b2e4:	4619      	mov	r1, r3
 800b2e6:	6878      	ldr	r0, [r7, #4]
 800b2e8:	f000 fbe1 	bl	800baae <USBD_CtlSendData>
              break;
 800b2ec:	e004      	b.n	800b2f8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800b2ee:	6839      	ldr	r1, [r7, #0]
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 fb6b 	bl	800b9cc <USBD_CtlError>
              break;
 800b2f6:	bf00      	nop
          }
          break;
 800b2f8:	e004      	b.n	800b304 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800b2fa:	6839      	ldr	r1, [r7, #0]
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f000 fb65 	bl	800b9cc <USBD_CtlError>
          break;
 800b302:	bf00      	nop
      }
      break;
 800b304:	e004      	b.n	800b310 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800b306:	6839      	ldr	r1, [r7, #0]
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 fb5f 	bl	800b9cc <USBD_CtlError>
      break;
 800b30e:	bf00      	nop
  }

  return ret;
 800b310:	7bfb      	ldrb	r3, [r7, #15]
}
 800b312:	4618      	mov	r0, r3
 800b314:	3710      	adds	r7, #16
 800b316:	46bd      	mov	sp, r7
 800b318:	bd80      	pop	{r7, pc}
	...

0800b31c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b31c:	b580      	push	{r7, lr}
 800b31e:	b084      	sub	sp, #16
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b326:	2300      	movs	r3, #0
 800b328:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b32a:	2300      	movs	r3, #0
 800b32c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b32e:	2300      	movs	r3, #0
 800b330:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	885b      	ldrh	r3, [r3, #2]
 800b336:	0a1b      	lsrs	r3, r3, #8
 800b338:	b29b      	uxth	r3, r3
 800b33a:	3b01      	subs	r3, #1
 800b33c:	2b0e      	cmp	r3, #14
 800b33e:	f200 8152 	bhi.w	800b5e6 <USBD_GetDescriptor+0x2ca>
 800b342:	a201      	add	r2, pc, #4	; (adr r2, 800b348 <USBD_GetDescriptor+0x2c>)
 800b344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b348:	0800b3b9 	.word	0x0800b3b9
 800b34c:	0800b3d1 	.word	0x0800b3d1
 800b350:	0800b411 	.word	0x0800b411
 800b354:	0800b5e7 	.word	0x0800b5e7
 800b358:	0800b5e7 	.word	0x0800b5e7
 800b35c:	0800b587 	.word	0x0800b587
 800b360:	0800b5b3 	.word	0x0800b5b3
 800b364:	0800b5e7 	.word	0x0800b5e7
 800b368:	0800b5e7 	.word	0x0800b5e7
 800b36c:	0800b5e7 	.word	0x0800b5e7
 800b370:	0800b5e7 	.word	0x0800b5e7
 800b374:	0800b5e7 	.word	0x0800b5e7
 800b378:	0800b5e7 	.word	0x0800b5e7
 800b37c:	0800b5e7 	.word	0x0800b5e7
 800b380:	0800b385 	.word	0x0800b385
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b38a:	69db      	ldr	r3, [r3, #28]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00b      	beq.n	800b3a8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b396:	69db      	ldr	r3, [r3, #28]
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	7c12      	ldrb	r2, [r2, #16]
 800b39c:	f107 0108 	add.w	r1, r7, #8
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	4798      	blx	r3
 800b3a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b3a6:	e126      	b.n	800b5f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b3a8:	6839      	ldr	r1, [r7, #0]
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 fb0e 	bl	800b9cc <USBD_CtlError>
        err++;
 800b3b0:	7afb      	ldrb	r3, [r7, #11]
 800b3b2:	3301      	adds	r3, #1
 800b3b4:	72fb      	strb	r3, [r7, #11]
      break;
 800b3b6:	e11e      	b.n	800b5f6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	7c12      	ldrb	r2, [r2, #16]
 800b3c4:	f107 0108 	add.w	r1, r7, #8
 800b3c8:	4610      	mov	r0, r2
 800b3ca:	4798      	blx	r3
 800b3cc:	60f8      	str	r0, [r7, #12]
      break;
 800b3ce:	e112      	b.n	800b5f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	7c1b      	ldrb	r3, [r3, #16]
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d10d      	bne.n	800b3f4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3e0:	f107 0208 	add.w	r2, r7, #8
 800b3e4:	4610      	mov	r0, r2
 800b3e6:	4798      	blx	r3
 800b3e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	3301      	adds	r3, #1
 800b3ee:	2202      	movs	r2, #2
 800b3f0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b3f2:	e100      	b.n	800b5f6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3fc:	f107 0208 	add.w	r2, r7, #8
 800b400:	4610      	mov	r0, r2
 800b402:	4798      	blx	r3
 800b404:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	3301      	adds	r3, #1
 800b40a:	2202      	movs	r2, #2
 800b40c:	701a      	strb	r2, [r3, #0]
      break;
 800b40e:	e0f2      	b.n	800b5f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	885b      	ldrh	r3, [r3, #2]
 800b414:	b2db      	uxtb	r3, r3
 800b416:	2b05      	cmp	r3, #5
 800b418:	f200 80ac 	bhi.w	800b574 <USBD_GetDescriptor+0x258>
 800b41c:	a201      	add	r2, pc, #4	; (adr r2, 800b424 <USBD_GetDescriptor+0x108>)
 800b41e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b422:	bf00      	nop
 800b424:	0800b43d 	.word	0x0800b43d
 800b428:	0800b471 	.word	0x0800b471
 800b42c:	0800b4a5 	.word	0x0800b4a5
 800b430:	0800b4d9 	.word	0x0800b4d9
 800b434:	0800b50d 	.word	0x0800b50d
 800b438:	0800b541 	.word	0x0800b541
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b442:	685b      	ldr	r3, [r3, #4]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d00b      	beq.n	800b460 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	687a      	ldr	r2, [r7, #4]
 800b452:	7c12      	ldrb	r2, [r2, #16]
 800b454:	f107 0108 	add.w	r1, r7, #8
 800b458:	4610      	mov	r0, r2
 800b45a:	4798      	blx	r3
 800b45c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b45e:	e091      	b.n	800b584 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b460:	6839      	ldr	r1, [r7, #0]
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f000 fab2 	bl	800b9cc <USBD_CtlError>
            err++;
 800b468:	7afb      	ldrb	r3, [r7, #11]
 800b46a:	3301      	adds	r3, #1
 800b46c:	72fb      	strb	r3, [r7, #11]
          break;
 800b46e:	e089      	b.n	800b584 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d00b      	beq.n	800b494 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b482:	689b      	ldr	r3, [r3, #8]
 800b484:	687a      	ldr	r2, [r7, #4]
 800b486:	7c12      	ldrb	r2, [r2, #16]
 800b488:	f107 0108 	add.w	r1, r7, #8
 800b48c:	4610      	mov	r0, r2
 800b48e:	4798      	blx	r3
 800b490:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b492:	e077      	b.n	800b584 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b494:	6839      	ldr	r1, [r7, #0]
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 fa98 	bl	800b9cc <USBD_CtlError>
            err++;
 800b49c:	7afb      	ldrb	r3, [r7, #11]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	72fb      	strb	r3, [r7, #11]
          break;
 800b4a2:	e06f      	b.n	800b584 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4aa:	68db      	ldr	r3, [r3, #12]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00b      	beq.n	800b4c8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4b6:	68db      	ldr	r3, [r3, #12]
 800b4b8:	687a      	ldr	r2, [r7, #4]
 800b4ba:	7c12      	ldrb	r2, [r2, #16]
 800b4bc:	f107 0108 	add.w	r1, r7, #8
 800b4c0:	4610      	mov	r0, r2
 800b4c2:	4798      	blx	r3
 800b4c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4c6:	e05d      	b.n	800b584 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4c8:	6839      	ldr	r1, [r7, #0]
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f000 fa7e 	bl	800b9cc <USBD_CtlError>
            err++;
 800b4d0:	7afb      	ldrb	r3, [r7, #11]
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	72fb      	strb	r3, [r7, #11]
          break;
 800b4d6:	e055      	b.n	800b584 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4de:	691b      	ldr	r3, [r3, #16]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d00b      	beq.n	800b4fc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b4ea:	691b      	ldr	r3, [r3, #16]
 800b4ec:	687a      	ldr	r2, [r7, #4]
 800b4ee:	7c12      	ldrb	r2, [r2, #16]
 800b4f0:	f107 0108 	add.w	r1, r7, #8
 800b4f4:	4610      	mov	r0, r2
 800b4f6:	4798      	blx	r3
 800b4f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b4fa:	e043      	b.n	800b584 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b4fc:	6839      	ldr	r1, [r7, #0]
 800b4fe:	6878      	ldr	r0, [r7, #4]
 800b500:	f000 fa64 	bl	800b9cc <USBD_CtlError>
            err++;
 800b504:	7afb      	ldrb	r3, [r7, #11]
 800b506:	3301      	adds	r3, #1
 800b508:	72fb      	strb	r3, [r7, #11]
          break;
 800b50a:	e03b      	b.n	800b584 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b512:	695b      	ldr	r3, [r3, #20]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d00b      	beq.n	800b530 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b51e:	695b      	ldr	r3, [r3, #20]
 800b520:	687a      	ldr	r2, [r7, #4]
 800b522:	7c12      	ldrb	r2, [r2, #16]
 800b524:	f107 0108 	add.w	r1, r7, #8
 800b528:	4610      	mov	r0, r2
 800b52a:	4798      	blx	r3
 800b52c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b52e:	e029      	b.n	800b584 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b530:	6839      	ldr	r1, [r7, #0]
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 fa4a 	bl	800b9cc <USBD_CtlError>
            err++;
 800b538:	7afb      	ldrb	r3, [r7, #11]
 800b53a:	3301      	adds	r3, #1
 800b53c:	72fb      	strb	r3, [r7, #11]
          break;
 800b53e:	e021      	b.n	800b584 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b546:	699b      	ldr	r3, [r3, #24]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d00b      	beq.n	800b564 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b552:	699b      	ldr	r3, [r3, #24]
 800b554:	687a      	ldr	r2, [r7, #4]
 800b556:	7c12      	ldrb	r2, [r2, #16]
 800b558:	f107 0108 	add.w	r1, r7, #8
 800b55c:	4610      	mov	r0, r2
 800b55e:	4798      	blx	r3
 800b560:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b562:	e00f      	b.n	800b584 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b564:	6839      	ldr	r1, [r7, #0]
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f000 fa30 	bl	800b9cc <USBD_CtlError>
            err++;
 800b56c:	7afb      	ldrb	r3, [r7, #11]
 800b56e:	3301      	adds	r3, #1
 800b570:	72fb      	strb	r3, [r7, #11]
          break;
 800b572:	e007      	b.n	800b584 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b574:	6839      	ldr	r1, [r7, #0]
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 fa28 	bl	800b9cc <USBD_CtlError>
          err++;
 800b57c:	7afb      	ldrb	r3, [r7, #11]
 800b57e:	3301      	adds	r3, #1
 800b580:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b582:	bf00      	nop
      }
      break;
 800b584:	e037      	b.n	800b5f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	7c1b      	ldrb	r3, [r3, #16]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d109      	bne.n	800b5a2 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b596:	f107 0208 	add.w	r2, r7, #8
 800b59a:	4610      	mov	r0, r2
 800b59c:	4798      	blx	r3
 800b59e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5a0:	e029      	b.n	800b5f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b5a2:	6839      	ldr	r1, [r7, #0]
 800b5a4:	6878      	ldr	r0, [r7, #4]
 800b5a6:	f000 fa11 	bl	800b9cc <USBD_CtlError>
        err++;
 800b5aa:	7afb      	ldrb	r3, [r7, #11]
 800b5ac:	3301      	adds	r3, #1
 800b5ae:	72fb      	strb	r3, [r7, #11]
      break;
 800b5b0:	e021      	b.n	800b5f6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	7c1b      	ldrb	r3, [r3, #16]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d10d      	bne.n	800b5d6 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5c2:	f107 0208 	add.w	r2, r7, #8
 800b5c6:	4610      	mov	r0, r2
 800b5c8:	4798      	blx	r3
 800b5ca:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	2207      	movs	r2, #7
 800b5d2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b5d4:	e00f      	b.n	800b5f6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b5d6:	6839      	ldr	r1, [r7, #0]
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f000 f9f7 	bl	800b9cc <USBD_CtlError>
        err++;
 800b5de:	7afb      	ldrb	r3, [r7, #11]
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	72fb      	strb	r3, [r7, #11]
      break;
 800b5e4:	e007      	b.n	800b5f6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b5e6:	6839      	ldr	r1, [r7, #0]
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f000 f9ef 	bl	800b9cc <USBD_CtlError>
      err++;
 800b5ee:	7afb      	ldrb	r3, [r7, #11]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	72fb      	strb	r3, [r7, #11]
      break;
 800b5f4:	bf00      	nop
  }

  if (err != 0U)
 800b5f6:	7afb      	ldrb	r3, [r7, #11]
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d11e      	bne.n	800b63a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	88db      	ldrh	r3, [r3, #6]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d016      	beq.n	800b632 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b604:	893b      	ldrh	r3, [r7, #8]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d00e      	beq.n	800b628 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	88da      	ldrh	r2, [r3, #6]
 800b60e:	893b      	ldrh	r3, [r7, #8]
 800b610:	4293      	cmp	r3, r2
 800b612:	bf28      	it	cs
 800b614:	4613      	movcs	r3, r2
 800b616:	b29b      	uxth	r3, r3
 800b618:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b61a:	893b      	ldrh	r3, [r7, #8]
 800b61c:	461a      	mov	r2, r3
 800b61e:	68f9      	ldr	r1, [r7, #12]
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 fa44 	bl	800baae <USBD_CtlSendData>
 800b626:	e009      	b.n	800b63c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b628:	6839      	ldr	r1, [r7, #0]
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f000 f9ce 	bl	800b9cc <USBD_CtlError>
 800b630:	e004      	b.n	800b63c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b632:	6878      	ldr	r0, [r7, #4]
 800b634:	f000 fa95 	bl	800bb62 <USBD_CtlSendStatus>
 800b638:	e000      	b.n	800b63c <USBD_GetDescriptor+0x320>
    return;
 800b63a:	bf00      	nop
  }
}
 800b63c:	3710      	adds	r7, #16
 800b63e:	46bd      	mov	sp, r7
 800b640:	bd80      	pop	{r7, pc}
 800b642:	bf00      	nop

0800b644 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	889b      	ldrh	r3, [r3, #4]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d131      	bne.n	800b6ba <USBD_SetAddress+0x76>
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	88db      	ldrh	r3, [r3, #6]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d12d      	bne.n	800b6ba <USBD_SetAddress+0x76>
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	885b      	ldrh	r3, [r3, #2]
 800b662:	2b7f      	cmp	r3, #127	; 0x7f
 800b664:	d829      	bhi.n	800b6ba <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b666:	683b      	ldr	r3, [r7, #0]
 800b668:	885b      	ldrh	r3, [r3, #2]
 800b66a:	b2db      	uxtb	r3, r3
 800b66c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b670:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b678:	b2db      	uxtb	r3, r3
 800b67a:	2b03      	cmp	r3, #3
 800b67c:	d104      	bne.n	800b688 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b67e:	6839      	ldr	r1, [r7, #0]
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 f9a3 	bl	800b9cc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b686:	e01d      	b.n	800b6c4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	7bfa      	ldrb	r2, [r7, #15]
 800b68c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b690:	7bfb      	ldrb	r3, [r7, #15]
 800b692:	4619      	mov	r1, r3
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 fea9 	bl	800c3ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 fa61 	bl	800bb62 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b6a0:	7bfb      	ldrb	r3, [r7, #15]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d004      	beq.n	800b6b0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2202      	movs	r2, #2
 800b6aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ae:	e009      	b.n	800b6c4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6b8:	e004      	b.n	800b6c4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b6ba:	6839      	ldr	r1, [r7, #0]
 800b6bc:	6878      	ldr	r0, [r7, #4]
 800b6be:	f000 f985 	bl	800b9cc <USBD_CtlError>
  }
}
 800b6c2:	bf00      	nop
 800b6c4:	bf00      	nop
 800b6c6:	3710      	adds	r7, #16
 800b6c8:	46bd      	mov	sp, r7
 800b6ca:	bd80      	pop	{r7, pc}

0800b6cc <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
 800b6d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b6da:	683b      	ldr	r3, [r7, #0]
 800b6dc:	885b      	ldrh	r3, [r3, #2]
 800b6de:	b2da      	uxtb	r2, r3
 800b6e0:	4b4c      	ldr	r3, [pc, #304]	; (800b814 <USBD_SetConfig+0x148>)
 800b6e2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b6e4:	4b4b      	ldr	r3, [pc, #300]	; (800b814 <USBD_SetConfig+0x148>)
 800b6e6:	781b      	ldrb	r3, [r3, #0]
 800b6e8:	2b01      	cmp	r3, #1
 800b6ea:	d905      	bls.n	800b6f8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b6ec:	6839      	ldr	r1, [r7, #0]
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 f96c 	bl	800b9cc <USBD_CtlError>
    return USBD_FAIL;
 800b6f4:	2303      	movs	r3, #3
 800b6f6:	e088      	b.n	800b80a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6fe:	b2db      	uxtb	r3, r3
 800b700:	2b02      	cmp	r3, #2
 800b702:	d002      	beq.n	800b70a <USBD_SetConfig+0x3e>
 800b704:	2b03      	cmp	r3, #3
 800b706:	d025      	beq.n	800b754 <USBD_SetConfig+0x88>
 800b708:	e071      	b.n	800b7ee <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b70a:	4b42      	ldr	r3, [pc, #264]	; (800b814 <USBD_SetConfig+0x148>)
 800b70c:	781b      	ldrb	r3, [r3, #0]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d01c      	beq.n	800b74c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b712:	4b40      	ldr	r3, [pc, #256]	; (800b814 <USBD_SetConfig+0x148>)
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	461a      	mov	r2, r3
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b71c:	4b3d      	ldr	r3, [pc, #244]	; (800b814 <USBD_SetConfig+0x148>)
 800b71e:	781b      	ldrb	r3, [r3, #0]
 800b720:	4619      	mov	r1, r3
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	f7ff f992 	bl	800aa4c <USBD_SetClassConfig>
 800b728:	4603      	mov	r3, r0
 800b72a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b72c:	7bfb      	ldrb	r3, [r7, #15]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d004      	beq.n	800b73c <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b732:	6839      	ldr	r1, [r7, #0]
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 f949 	bl	800b9cc <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b73a:	e065      	b.n	800b808 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 fa10 	bl	800bb62 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	2203      	movs	r2, #3
 800b746:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b74a:	e05d      	b.n	800b808 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b74c:	6878      	ldr	r0, [r7, #4]
 800b74e:	f000 fa08 	bl	800bb62 <USBD_CtlSendStatus>
      break;
 800b752:	e059      	b.n	800b808 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b754:	4b2f      	ldr	r3, [pc, #188]	; (800b814 <USBD_SetConfig+0x148>)
 800b756:	781b      	ldrb	r3, [r3, #0]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d112      	bne.n	800b782 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2202      	movs	r2, #2
 800b760:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b764:	4b2b      	ldr	r3, [pc, #172]	; (800b814 <USBD_SetConfig+0x148>)
 800b766:	781b      	ldrb	r3, [r3, #0]
 800b768:	461a      	mov	r2, r3
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b76e:	4b29      	ldr	r3, [pc, #164]	; (800b814 <USBD_SetConfig+0x148>)
 800b770:	781b      	ldrb	r3, [r3, #0]
 800b772:	4619      	mov	r1, r3
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	f7ff f985 	bl	800aa84 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 f9f1 	bl	800bb62 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b780:	e042      	b.n	800b808 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b782:	4b24      	ldr	r3, [pc, #144]	; (800b814 <USBD_SetConfig+0x148>)
 800b784:	781b      	ldrb	r3, [r3, #0]
 800b786:	461a      	mov	r2, r3
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	685b      	ldr	r3, [r3, #4]
 800b78c:	429a      	cmp	r2, r3
 800b78e:	d02a      	beq.n	800b7e6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	b2db      	uxtb	r3, r3
 800b796:	4619      	mov	r1, r3
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f7ff f973 	bl	800aa84 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b79e:	4b1d      	ldr	r3, [pc, #116]	; (800b814 <USBD_SetConfig+0x148>)
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b7a8:	4b1a      	ldr	r3, [pc, #104]	; (800b814 <USBD_SetConfig+0x148>)
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	4619      	mov	r1, r3
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	f7ff f94c 	bl	800aa4c <USBD_SetClassConfig>
 800b7b4:	4603      	mov	r3, r0
 800b7b6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b7b8:	7bfb      	ldrb	r3, [r7, #15]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d00f      	beq.n	800b7de <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b7be:	6839      	ldr	r1, [r7, #0]
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 f903 	bl	800b9cc <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	4619      	mov	r1, r3
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f7ff f958 	bl	800aa84 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2202      	movs	r2, #2
 800b7d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b7dc:	e014      	b.n	800b808 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 f9bf 	bl	800bb62 <USBD_CtlSendStatus>
      break;
 800b7e4:	e010      	b.n	800b808 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	f000 f9bb 	bl	800bb62 <USBD_CtlSendStatus>
      break;
 800b7ec:	e00c      	b.n	800b808 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b7ee:	6839      	ldr	r1, [r7, #0]
 800b7f0:	6878      	ldr	r0, [r7, #4]
 800b7f2:	f000 f8eb 	bl	800b9cc <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b7f6:	4b07      	ldr	r3, [pc, #28]	; (800b814 <USBD_SetConfig+0x148>)
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	4619      	mov	r1, r3
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f7ff f941 	bl	800aa84 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b802:	2303      	movs	r3, #3
 800b804:	73fb      	strb	r3, [r7, #15]
      break;
 800b806:	bf00      	nop
  }

  return ret;
 800b808:	7bfb      	ldrb	r3, [r7, #15]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3710      	adds	r7, #16
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	20002bb0 	.word	0x20002bb0

0800b818 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b822:	683b      	ldr	r3, [r7, #0]
 800b824:	88db      	ldrh	r3, [r3, #6]
 800b826:	2b01      	cmp	r3, #1
 800b828:	d004      	beq.n	800b834 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b82a:	6839      	ldr	r1, [r7, #0]
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 f8cd 	bl	800b9cc <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b832:	e023      	b.n	800b87c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b83a:	b2db      	uxtb	r3, r3
 800b83c:	2b02      	cmp	r3, #2
 800b83e:	dc02      	bgt.n	800b846 <USBD_GetConfig+0x2e>
 800b840:	2b00      	cmp	r3, #0
 800b842:	dc03      	bgt.n	800b84c <USBD_GetConfig+0x34>
 800b844:	e015      	b.n	800b872 <USBD_GetConfig+0x5a>
 800b846:	2b03      	cmp	r3, #3
 800b848:	d00b      	beq.n	800b862 <USBD_GetConfig+0x4a>
 800b84a:	e012      	b.n	800b872 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2200      	movs	r2, #0
 800b850:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	3308      	adds	r3, #8
 800b856:	2201      	movs	r2, #1
 800b858:	4619      	mov	r1, r3
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f000 f927 	bl	800baae <USBD_CtlSendData>
        break;
 800b860:	e00c      	b.n	800b87c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	3304      	adds	r3, #4
 800b866:	2201      	movs	r2, #1
 800b868:	4619      	mov	r1, r3
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 f91f 	bl	800baae <USBD_CtlSendData>
        break;
 800b870:	e004      	b.n	800b87c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b872:	6839      	ldr	r1, [r7, #0]
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 f8a9 	bl	800b9cc <USBD_CtlError>
        break;
 800b87a:	bf00      	nop
}
 800b87c:	bf00      	nop
 800b87e:	3708      	adds	r7, #8
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b082      	sub	sp, #8
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b894:	b2db      	uxtb	r3, r3
 800b896:	3b01      	subs	r3, #1
 800b898:	2b02      	cmp	r3, #2
 800b89a:	d81e      	bhi.n	800b8da <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	88db      	ldrh	r3, [r3, #6]
 800b8a0:	2b02      	cmp	r3, #2
 800b8a2:	d004      	beq.n	800b8ae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b8a4:	6839      	ldr	r1, [r7, #0]
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f000 f890 	bl	800b9cc <USBD_CtlError>
        break;
 800b8ac:	e01a      	b.n	800b8e4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d005      	beq.n	800b8ca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	f043 0202 	orr.w	r2, r3, #2
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	330c      	adds	r3, #12
 800b8ce:	2202      	movs	r2, #2
 800b8d0:	4619      	mov	r1, r3
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f000 f8eb 	bl	800baae <USBD_CtlSendData>
      break;
 800b8d8:	e004      	b.n	800b8e4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b8da:	6839      	ldr	r1, [r7, #0]
 800b8dc:	6878      	ldr	r0, [r7, #4]
 800b8de:	f000 f875 	bl	800b9cc <USBD_CtlError>
      break;
 800b8e2:	bf00      	nop
  }
}
 800b8e4:	bf00      	nop
 800b8e6:	3708      	adds	r7, #8
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	bd80      	pop	{r7, pc}

0800b8ec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8ec:	b580      	push	{r7, lr}
 800b8ee:	b082      	sub	sp, #8
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
 800b8f4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	885b      	ldrh	r3, [r3, #2]
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d106      	bne.n	800b90c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2201      	movs	r2, #1
 800b902:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 f92b 	bl	800bb62 <USBD_CtlSendStatus>
  }
}
 800b90c:	bf00      	nop
 800b90e:	3708      	adds	r7, #8
 800b910:	46bd      	mov	sp, r7
 800b912:	bd80      	pop	{r7, pc}

0800b914 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b082      	sub	sp, #8
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b924:	b2db      	uxtb	r3, r3
 800b926:	3b01      	subs	r3, #1
 800b928:	2b02      	cmp	r3, #2
 800b92a:	d80b      	bhi.n	800b944 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	885b      	ldrh	r3, [r3, #2]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d10c      	bne.n	800b94e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	2200      	movs	r2, #0
 800b938:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 f910 	bl	800bb62 <USBD_CtlSendStatus>
      }
      break;
 800b942:	e004      	b.n	800b94e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b944:	6839      	ldr	r1, [r7, #0]
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 f840 	bl	800b9cc <USBD_CtlError>
      break;
 800b94c:	e000      	b.n	800b950 <USBD_ClrFeature+0x3c>
      break;
 800b94e:	bf00      	nop
  }
}
 800b950:	bf00      	nop
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	781a      	ldrb	r2, [r3, #0]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	3301      	adds	r3, #1
 800b972:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	781a      	ldrb	r2, [r3, #0]
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	3301      	adds	r3, #1
 800b980:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f7ff fa92 	bl	800aeac <SWAPBYTE>
 800b988:	4603      	mov	r3, r0
 800b98a:	461a      	mov	r2, r3
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	3301      	adds	r3, #1
 800b994:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	3301      	adds	r3, #1
 800b99a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b99c:	68f8      	ldr	r0, [r7, #12]
 800b99e:	f7ff fa85 	bl	800aeac <SWAPBYTE>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	461a      	mov	r2, r3
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b9b6:	68f8      	ldr	r0, [r7, #12]
 800b9b8:	f7ff fa78 	bl	800aeac <SWAPBYTE>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	461a      	mov	r2, r3
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	80da      	strh	r2, [r3, #6]
}
 800b9c4:	bf00      	nop
 800b9c6:	3710      	adds	r7, #16
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b082      	sub	sp, #8
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
 800b9d4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9d6:	2180      	movs	r1, #128	; 0x80
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	f000 fc9d 	bl	800c318 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b9de:	2100      	movs	r1, #0
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	f000 fc99 	bl	800c318 <USBD_LL_StallEP>
}
 800b9e6:	bf00      	nop
 800b9e8:	3708      	adds	r7, #8
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	bd80      	pop	{r7, pc}

0800b9ee <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b9ee:	b580      	push	{r7, lr}
 800b9f0:	b086      	sub	sp, #24
 800b9f2:	af00      	add	r7, sp, #0
 800b9f4:	60f8      	str	r0, [r7, #12]
 800b9f6:	60b9      	str	r1, [r7, #8]
 800b9f8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d036      	beq.n	800ba72 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ba08:	6938      	ldr	r0, [r7, #16]
 800ba0a:	f000 f836 	bl	800ba7a <USBD_GetLen>
 800ba0e:	4603      	mov	r3, r0
 800ba10:	3301      	adds	r3, #1
 800ba12:	b29b      	uxth	r3, r3
 800ba14:	005b      	lsls	r3, r3, #1
 800ba16:	b29a      	uxth	r2, r3
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ba1c:	7dfb      	ldrb	r3, [r7, #23]
 800ba1e:	68ba      	ldr	r2, [r7, #8]
 800ba20:	4413      	add	r3, r2
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	7812      	ldrb	r2, [r2, #0]
 800ba26:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba28:	7dfb      	ldrb	r3, [r7, #23]
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ba2e:	7dfb      	ldrb	r3, [r7, #23]
 800ba30:	68ba      	ldr	r2, [r7, #8]
 800ba32:	4413      	add	r3, r2
 800ba34:	2203      	movs	r2, #3
 800ba36:	701a      	strb	r2, [r3, #0]
  idx++;
 800ba38:	7dfb      	ldrb	r3, [r7, #23]
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ba3e:	e013      	b.n	800ba68 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ba40:	7dfb      	ldrb	r3, [r7, #23]
 800ba42:	68ba      	ldr	r2, [r7, #8]
 800ba44:	4413      	add	r3, r2
 800ba46:	693a      	ldr	r2, [r7, #16]
 800ba48:	7812      	ldrb	r2, [r2, #0]
 800ba4a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	3301      	adds	r3, #1
 800ba50:	613b      	str	r3, [r7, #16]
    idx++;
 800ba52:	7dfb      	ldrb	r3, [r7, #23]
 800ba54:	3301      	adds	r3, #1
 800ba56:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ba58:	7dfb      	ldrb	r3, [r7, #23]
 800ba5a:	68ba      	ldr	r2, [r7, #8]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	2200      	movs	r2, #0
 800ba60:	701a      	strb	r2, [r3, #0]
    idx++;
 800ba62:	7dfb      	ldrb	r3, [r7, #23]
 800ba64:	3301      	adds	r3, #1
 800ba66:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	781b      	ldrb	r3, [r3, #0]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d1e7      	bne.n	800ba40 <USBD_GetString+0x52>
 800ba70:	e000      	b.n	800ba74 <USBD_GetString+0x86>
    return;
 800ba72:	bf00      	nop
  }
}
 800ba74:	3718      	adds	r7, #24
 800ba76:	46bd      	mov	sp, r7
 800ba78:	bd80      	pop	{r7, pc}

0800ba7a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ba7a:	b480      	push	{r7}
 800ba7c:	b085      	sub	sp, #20
 800ba7e:	af00      	add	r7, sp, #0
 800ba80:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ba82:	2300      	movs	r3, #0
 800ba84:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ba8a:	e005      	b.n	800ba98 <USBD_GetLen+0x1e>
  {
    len++;
 800ba8c:	7bfb      	ldrb	r3, [r7, #15]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	3301      	adds	r3, #1
 800ba96:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d1f5      	bne.n	800ba8c <USBD_GetLen+0x12>
  }

  return len;
 800baa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa2:	4618      	mov	r0, r3
 800baa4:	3714      	adds	r7, #20
 800baa6:	46bd      	mov	sp, r7
 800baa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baac:	4770      	bx	lr

0800baae <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800baae:	b580      	push	{r7, lr}
 800bab0:	b084      	sub	sp, #16
 800bab2:	af00      	add	r7, sp, #0
 800bab4:	60f8      	str	r0, [r7, #12]
 800bab6:	60b9      	str	r1, [r7, #8]
 800bab8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	2202      	movs	r2, #2
 800babe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	687a      	ldr	r2, [r7, #4]
 800bac6:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	68ba      	ldr	r2, [r7, #8]
 800bad2:	2100      	movs	r1, #0
 800bad4:	68f8      	ldr	r0, [r7, #12]
 800bad6:	f000 fca8 	bl	800c42a <USBD_LL_Transmit>

  return USBD_OK;
 800bada:	2300      	movs	r3, #0
}
 800badc:	4618      	mov	r0, r3
 800bade:	3710      	adds	r7, #16
 800bae0:	46bd      	mov	sp, r7
 800bae2:	bd80      	pop	{r7, pc}

0800bae4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b084      	sub	sp, #16
 800bae8:	af00      	add	r7, sp, #0
 800baea:	60f8      	str	r0, [r7, #12]
 800baec:	60b9      	str	r1, [r7, #8]
 800baee:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	68ba      	ldr	r2, [r7, #8]
 800baf4:	2100      	movs	r1, #0
 800baf6:	68f8      	ldr	r0, [r7, #12]
 800baf8:	f000 fc97 	bl	800c42a <USBD_LL_Transmit>

  return USBD_OK;
 800bafc:	2300      	movs	r3, #0
}
 800bafe:	4618      	mov	r0, r3
 800bb00:	3710      	adds	r7, #16
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}

0800bb06 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bb06:	b580      	push	{r7, lr}
 800bb08:	b084      	sub	sp, #16
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	60f8      	str	r0, [r7, #12]
 800bb0e:	60b9      	str	r1, [r7, #8]
 800bb10:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	2203      	movs	r2, #3
 800bb16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	687a      	ldr	r2, [r7, #4]
 800bb1e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	68ba      	ldr	r2, [r7, #8]
 800bb2e:	2100      	movs	r1, #0
 800bb30:	68f8      	ldr	r0, [r7, #12]
 800bb32:	f000 fc9b 	bl	800c46c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb36:	2300      	movs	r3, #0
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3710      	adds	r7, #16
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	60b9      	str	r1, [r7, #8]
 800bb4a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	2100      	movs	r1, #0
 800bb52:	68f8      	ldr	r0, [r7, #12]
 800bb54:	f000 fc8a 	bl	800c46c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bb58:	2300      	movs	r3, #0
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3710      	adds	r7, #16
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b082      	sub	sp, #8
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2204      	movs	r2, #4
 800bb6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bb72:	2300      	movs	r3, #0
 800bb74:	2200      	movs	r2, #0
 800bb76:	2100      	movs	r1, #0
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 fc56 	bl	800c42a <USBD_LL_Transmit>

  return USBD_OK;
 800bb7e:	2300      	movs	r3, #0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3708      	adds	r7, #8
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}

0800bb88 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2205      	movs	r2, #5
 800bb94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bb98:	2300      	movs	r3, #0
 800bb9a:	2200      	movs	r2, #0
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fc64 	bl	800c46c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	4618      	mov	r0, r3
 800bba8:	3708      	adds	r7, #8
 800bbaa:	46bd      	mov	sp, r7
 800bbac:	bd80      	pop	{r7, pc}
	...

0800bbb0 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	4912      	ldr	r1, [pc, #72]	; (800bc00 <MX_USB_Device_Init+0x50>)
 800bbb8:	4812      	ldr	r0, [pc, #72]	; (800bc04 <MX_USB_Device_Init+0x54>)
 800bbba:	f7fe fed9 	bl	800a970 <USBD_Init>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d001      	beq.n	800bbc8 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800bbc4:	f7f5 f8c4 	bl	8000d50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800bbc8:	490f      	ldr	r1, [pc, #60]	; (800bc08 <MX_USB_Device_Init+0x58>)
 800bbca:	480e      	ldr	r0, [pc, #56]	; (800bc04 <MX_USB_Device_Init+0x54>)
 800bbcc:	f7fe ff00 	bl	800a9d0 <USBD_RegisterClass>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d001      	beq.n	800bbda <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800bbd6:	f7f5 f8bb 	bl	8000d50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800bbda:	490c      	ldr	r1, [pc, #48]	; (800bc0c <MX_USB_Device_Init+0x5c>)
 800bbdc:	4809      	ldr	r0, [pc, #36]	; (800bc04 <MX_USB_Device_Init+0x54>)
 800bbde:	f7fe fe21 	bl	800a824 <USBD_CDC_RegisterInterface>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d001      	beq.n	800bbec <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800bbe8:	f7f5 f8b2 	bl	8000d50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800bbec:	4805      	ldr	r0, [pc, #20]	; (800bc04 <MX_USB_Device_Init+0x54>)
 800bbee:	f7fe ff16 	bl	800aa1e <USBD_Start>
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d001      	beq.n	800bbfc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800bbf8:	f7f5 f8aa 	bl	8000d50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800bbfc:	bf00      	nop
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	20000130 	.word	0x20000130
 800bc04:	20002bb4 	.word	0x20002bb4
 800bc08:	20000018 	.word	0x20000018
 800bc0c:	2000011c 	.word	0x2000011c

0800bc10 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800bc14:	2200      	movs	r2, #0
 800bc16:	4905      	ldr	r1, [pc, #20]	; (800bc2c <CDC_Init_FS+0x1c>)
 800bc18:	4805      	ldr	r0, [pc, #20]	; (800bc30 <CDC_Init_FS+0x20>)
 800bc1a:	f7fe fe18 	bl	800a84e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800bc1e:	4905      	ldr	r1, [pc, #20]	; (800bc34 <CDC_Init_FS+0x24>)
 800bc20:	4803      	ldr	r0, [pc, #12]	; (800bc30 <CDC_Init_FS+0x20>)
 800bc22:	f7fe fe32 	bl	800a88a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bc26:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800bc28:	4618      	mov	r0, r3
 800bc2a:	bd80      	pop	{r7, pc}
 800bc2c:	20003684 	.word	0x20003684
 800bc30:	20002bb4 	.word	0x20002bb4
 800bc34:	20002e84 	.word	0x20002e84

0800bc38 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800bc38:	b480      	push	{r7}
 800bc3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800bc3c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b083      	sub	sp, #12
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	4603      	mov	r3, r0
 800bc50:	6039      	str	r1, [r7, #0]
 800bc52:	71fb      	strb	r3, [r7, #7]
 800bc54:	4613      	mov	r3, r2
 800bc56:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800bc58:	79fb      	ldrb	r3, [r7, #7]
 800bc5a:	2b23      	cmp	r3, #35	; 0x23
 800bc5c:	d84a      	bhi.n	800bcf4 <CDC_Control_FS+0xac>
 800bc5e:	a201      	add	r2, pc, #4	; (adr r2, 800bc64 <CDC_Control_FS+0x1c>)
 800bc60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc64:	0800bcf5 	.word	0x0800bcf5
 800bc68:	0800bcf5 	.word	0x0800bcf5
 800bc6c:	0800bcf5 	.word	0x0800bcf5
 800bc70:	0800bcf5 	.word	0x0800bcf5
 800bc74:	0800bcf5 	.word	0x0800bcf5
 800bc78:	0800bcf5 	.word	0x0800bcf5
 800bc7c:	0800bcf5 	.word	0x0800bcf5
 800bc80:	0800bcf5 	.word	0x0800bcf5
 800bc84:	0800bcf5 	.word	0x0800bcf5
 800bc88:	0800bcf5 	.word	0x0800bcf5
 800bc8c:	0800bcf5 	.word	0x0800bcf5
 800bc90:	0800bcf5 	.word	0x0800bcf5
 800bc94:	0800bcf5 	.word	0x0800bcf5
 800bc98:	0800bcf5 	.word	0x0800bcf5
 800bc9c:	0800bcf5 	.word	0x0800bcf5
 800bca0:	0800bcf5 	.word	0x0800bcf5
 800bca4:	0800bcf5 	.word	0x0800bcf5
 800bca8:	0800bcf5 	.word	0x0800bcf5
 800bcac:	0800bcf5 	.word	0x0800bcf5
 800bcb0:	0800bcf5 	.word	0x0800bcf5
 800bcb4:	0800bcf5 	.word	0x0800bcf5
 800bcb8:	0800bcf5 	.word	0x0800bcf5
 800bcbc:	0800bcf5 	.word	0x0800bcf5
 800bcc0:	0800bcf5 	.word	0x0800bcf5
 800bcc4:	0800bcf5 	.word	0x0800bcf5
 800bcc8:	0800bcf5 	.word	0x0800bcf5
 800bccc:	0800bcf5 	.word	0x0800bcf5
 800bcd0:	0800bcf5 	.word	0x0800bcf5
 800bcd4:	0800bcf5 	.word	0x0800bcf5
 800bcd8:	0800bcf5 	.word	0x0800bcf5
 800bcdc:	0800bcf5 	.word	0x0800bcf5
 800bce0:	0800bcf5 	.word	0x0800bcf5
 800bce4:	0800bcf5 	.word	0x0800bcf5
 800bce8:	0800bcf5 	.word	0x0800bcf5
 800bcec:	0800bcf5 	.word	0x0800bcf5
 800bcf0:	0800bcf5 	.word	0x0800bcf5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bcf4:	bf00      	nop
  }

  return (USBD_OK);
 800bcf6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	370c      	adds	r7, #12
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd02:	4770      	bx	lr

0800bd04 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b082      	sub	sp, #8
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
 800bd0c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800bd0e:	6879      	ldr	r1, [r7, #4]
 800bd10:	4805      	ldr	r0, [pc, #20]	; (800bd28 <CDC_Receive_FS+0x24>)
 800bd12:	f7fe fdba 	bl	800a88a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800bd16:	4804      	ldr	r0, [pc, #16]	; (800bd28 <CDC_Receive_FS+0x24>)
 800bd18:	f7fe fe00 	bl	800a91c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bd1c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3708      	adds	r7, #8
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	20002bb4 	.word	0x20002bb4

0800bd2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b084      	sub	sp, #16
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
 800bd34:	460b      	mov	r3, r1
 800bd36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800bd3c:	4b0d      	ldr	r3, [pc, #52]	; (800bd74 <CDC_Transmit_FS+0x48>)
 800bd3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d001      	beq.n	800bd52 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	e00b      	b.n	800bd6a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800bd52:	887b      	ldrh	r3, [r7, #2]
 800bd54:	461a      	mov	r2, r3
 800bd56:	6879      	ldr	r1, [r7, #4]
 800bd58:	4806      	ldr	r0, [pc, #24]	; (800bd74 <CDC_Transmit_FS+0x48>)
 800bd5a:	f7fe fd78 	bl	800a84e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800bd5e:	4805      	ldr	r0, [pc, #20]	; (800bd74 <CDC_Transmit_FS+0x48>)
 800bd60:	f7fe fdac 	bl	800a8bc <USBD_CDC_TransmitPacket>
 800bd64:	4603      	mov	r3, r0
 800bd66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800bd68:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3710      	adds	r7, #16
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	20002bb4 	.word	0x20002bb4

0800bd78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bd78:	b480      	push	{r7}
 800bd7a:	b087      	sub	sp, #28
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	4613      	mov	r3, r2
 800bd84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bd86:	2300      	movs	r3, #0
 800bd88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bd8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	371c      	adds	r7, #28
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr
	...

0800bd9c <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	4603      	mov	r3, r0
 800bda4:	6039      	str	r1, [r7, #0]
 800bda6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	2212      	movs	r2, #18
 800bdac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800bdae:	4b03      	ldr	r3, [pc, #12]	; (800bdbc <USBD_CDC_DeviceDescriptor+0x20>)
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	370c      	adds	r7, #12
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdba:	4770      	bx	lr
 800bdbc:	20000150 	.word	0x20000150

0800bdc0 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b083      	sub	sp, #12
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	6039      	str	r1, [r7, #0]
 800bdca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bdcc:	683b      	ldr	r3, [r7, #0]
 800bdce:	2204      	movs	r2, #4
 800bdd0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bdd2:	4b03      	ldr	r3, [pc, #12]	; (800bde0 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	370c      	adds	r7, #12
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr
 800bde0:	20000164 	.word	0x20000164

0800bde4 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b082      	sub	sp, #8
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	4603      	mov	r3, r0
 800bdec:	6039      	str	r1, [r7, #0]
 800bdee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bdf0:	79fb      	ldrb	r3, [r7, #7]
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d105      	bne.n	800be02 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800bdf6:	683a      	ldr	r2, [r7, #0]
 800bdf8:	4907      	ldr	r1, [pc, #28]	; (800be18 <USBD_CDC_ProductStrDescriptor+0x34>)
 800bdfa:	4808      	ldr	r0, [pc, #32]	; (800be1c <USBD_CDC_ProductStrDescriptor+0x38>)
 800bdfc:	f7ff fdf7 	bl	800b9ee <USBD_GetString>
 800be00:	e004      	b.n	800be0c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800be02:	683a      	ldr	r2, [r7, #0]
 800be04:	4904      	ldr	r1, [pc, #16]	; (800be18 <USBD_CDC_ProductStrDescriptor+0x34>)
 800be06:	4805      	ldr	r0, [pc, #20]	; (800be1c <USBD_CDC_ProductStrDescriptor+0x38>)
 800be08:	f7ff fdf1 	bl	800b9ee <USBD_GetString>
  }
  return USBD_StrDesc;
 800be0c:	4b02      	ldr	r3, [pc, #8]	; (800be18 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3708      	adds	r7, #8
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}
 800be16:	bf00      	nop
 800be18:	20003e84 	.word	0x20003e84
 800be1c:	0800c644 	.word	0x0800c644

0800be20 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
 800be26:	4603      	mov	r3, r0
 800be28:	6039      	str	r1, [r7, #0]
 800be2a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be2c:	683a      	ldr	r2, [r7, #0]
 800be2e:	4904      	ldr	r1, [pc, #16]	; (800be40 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800be30:	4804      	ldr	r0, [pc, #16]	; (800be44 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800be32:	f7ff fddc 	bl	800b9ee <USBD_GetString>
  return USBD_StrDesc;
 800be36:	4b02      	ldr	r3, [pc, #8]	; (800be40 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3708      	adds	r7, #8
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	20003e84 	.word	0x20003e84
 800be44:	0800c65c 	.word	0x0800c65c

0800be48 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	4603      	mov	r3, r0
 800be50:	6039      	str	r1, [r7, #0]
 800be52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	221a      	movs	r2, #26
 800be58:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be5a:	f000 f843 	bl	800bee4 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800be5e:	4b02      	ldr	r3, [pc, #8]	; (800be68 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800be60:	4618      	mov	r0, r3
 800be62:	3708      	adds	r7, #8
 800be64:	46bd      	mov	sp, r7
 800be66:	bd80      	pop	{r7, pc}
 800be68:	20000168 	.word	0x20000168

0800be6c <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
 800be72:	4603      	mov	r3, r0
 800be74:	6039      	str	r1, [r7, #0]
 800be76:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800be78:	79fb      	ldrb	r3, [r7, #7]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d105      	bne.n	800be8a <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800be7e:	683a      	ldr	r2, [r7, #0]
 800be80:	4907      	ldr	r1, [pc, #28]	; (800bea0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800be82:	4808      	ldr	r0, [pc, #32]	; (800bea4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800be84:	f7ff fdb3 	bl	800b9ee <USBD_GetString>
 800be88:	e004      	b.n	800be94 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800be8a:	683a      	ldr	r2, [r7, #0]
 800be8c:	4904      	ldr	r1, [pc, #16]	; (800bea0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800be8e:	4805      	ldr	r0, [pc, #20]	; (800bea4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800be90:	f7ff fdad 	bl	800b9ee <USBD_GetString>
  }
  return USBD_StrDesc;
 800be94:	4b02      	ldr	r3, [pc, #8]	; (800bea0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800be96:	4618      	mov	r0, r3
 800be98:	3708      	adds	r7, #8
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	20003e84 	.word	0x20003e84
 800bea4:	0800c670 	.word	0x0800c670

0800bea8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b082      	sub	sp, #8
 800beac:	af00      	add	r7, sp, #0
 800beae:	4603      	mov	r3, r0
 800beb0:	6039      	str	r1, [r7, #0]
 800beb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800beb4:	79fb      	ldrb	r3, [r7, #7]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d105      	bne.n	800bec6 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	4907      	ldr	r1, [pc, #28]	; (800bedc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800bebe:	4808      	ldr	r0, [pc, #32]	; (800bee0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800bec0:	f7ff fd95 	bl	800b9ee <USBD_GetString>
 800bec4:	e004      	b.n	800bed0 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800bec6:	683a      	ldr	r2, [r7, #0]
 800bec8:	4904      	ldr	r1, [pc, #16]	; (800bedc <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800beca:	4805      	ldr	r0, [pc, #20]	; (800bee0 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800becc:	f7ff fd8f 	bl	800b9ee <USBD_GetString>
  }
  return USBD_StrDesc;
 800bed0:	4b02      	ldr	r3, [pc, #8]	; (800bedc <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3708      	adds	r7, #8
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	20003e84 	.word	0x20003e84
 800bee0:	0800c67c 	.word	0x0800c67c

0800bee4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b084      	sub	sp, #16
 800bee8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800beea:	4b0f      	ldr	r3, [pc, #60]	; (800bf28 <Get_SerialNum+0x44>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bef0:	4b0e      	ldr	r3, [pc, #56]	; (800bf2c <Get_SerialNum+0x48>)
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bef6:	4b0e      	ldr	r3, [pc, #56]	; (800bf30 <Get_SerialNum+0x4c>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800befc:	68fa      	ldr	r2, [r7, #12]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	4413      	add	r3, r2
 800bf02:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d009      	beq.n	800bf1e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf0a:	2208      	movs	r2, #8
 800bf0c:	4909      	ldr	r1, [pc, #36]	; (800bf34 <Get_SerialNum+0x50>)
 800bf0e:	68f8      	ldr	r0, [r7, #12]
 800bf10:	f000 f814 	bl	800bf3c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf14:	2204      	movs	r2, #4
 800bf16:	4908      	ldr	r1, [pc, #32]	; (800bf38 <Get_SerialNum+0x54>)
 800bf18:	68b8      	ldr	r0, [r7, #8]
 800bf1a:	f000 f80f 	bl	800bf3c <IntToUnicode>
  }
}
 800bf1e:	bf00      	nop
 800bf20:	3710      	adds	r7, #16
 800bf22:	46bd      	mov	sp, r7
 800bf24:	bd80      	pop	{r7, pc}
 800bf26:	bf00      	nop
 800bf28:	1fff7590 	.word	0x1fff7590
 800bf2c:	1fff7594 	.word	0x1fff7594
 800bf30:	1fff7598 	.word	0x1fff7598
 800bf34:	2000016a 	.word	0x2000016a
 800bf38:	2000017a 	.word	0x2000017a

0800bf3c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bf3c:	b480      	push	{r7}
 800bf3e:	b087      	sub	sp, #28
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60f8      	str	r0, [r7, #12]
 800bf44:	60b9      	str	r1, [r7, #8]
 800bf46:	4613      	mov	r3, r2
 800bf48:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bf4a:	2300      	movs	r3, #0
 800bf4c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bf4e:	2300      	movs	r3, #0
 800bf50:	75fb      	strb	r3, [r7, #23]
 800bf52:	e027      	b.n	800bfa4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	0f1b      	lsrs	r3, r3, #28
 800bf58:	2b09      	cmp	r3, #9
 800bf5a:	d80b      	bhi.n	800bf74 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	0f1b      	lsrs	r3, r3, #28
 800bf60:	b2da      	uxtb	r2, r3
 800bf62:	7dfb      	ldrb	r3, [r7, #23]
 800bf64:	005b      	lsls	r3, r3, #1
 800bf66:	4619      	mov	r1, r3
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	440b      	add	r3, r1
 800bf6c:	3230      	adds	r2, #48	; 0x30
 800bf6e:	b2d2      	uxtb	r2, r2
 800bf70:	701a      	strb	r2, [r3, #0]
 800bf72:	e00a      	b.n	800bf8a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	0f1b      	lsrs	r3, r3, #28
 800bf78:	b2da      	uxtb	r2, r3
 800bf7a:	7dfb      	ldrb	r3, [r7, #23]
 800bf7c:	005b      	lsls	r3, r3, #1
 800bf7e:	4619      	mov	r1, r3
 800bf80:	68bb      	ldr	r3, [r7, #8]
 800bf82:	440b      	add	r3, r1
 800bf84:	3237      	adds	r2, #55	; 0x37
 800bf86:	b2d2      	uxtb	r2, r2
 800bf88:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	011b      	lsls	r3, r3, #4
 800bf8e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bf90:	7dfb      	ldrb	r3, [r7, #23]
 800bf92:	005b      	lsls	r3, r3, #1
 800bf94:	3301      	adds	r3, #1
 800bf96:	68ba      	ldr	r2, [r7, #8]
 800bf98:	4413      	add	r3, r2
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bf9e:	7dfb      	ldrb	r3, [r7, #23]
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	75fb      	strb	r3, [r7, #23]
 800bfa4:	7dfa      	ldrb	r2, [r7, #23]
 800bfa6:	79fb      	ldrb	r3, [r7, #7]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d3d3      	bcc.n	800bf54 <IntToUnicode+0x18>
  }
}
 800bfac:	bf00      	nop
 800bfae:	bf00      	nop
 800bfb0:	371c      	adds	r7, #28
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr
	...

0800bfbc <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b098      	sub	sp, #96	; 0x60
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bfc4:	f107 030c 	add.w	r3, r7, #12
 800bfc8:	2254      	movs	r2, #84	; 0x54
 800bfca:	2100      	movs	r1, #0
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f000 fb01 	bl	800c5d4 <memset>
  if(pcdHandle->Instance==USB)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	4a19      	ldr	r2, [pc, #100]	; (800c03c <HAL_PCD_MspInit+0x80>)
 800bfd8:	4293      	cmp	r3, r2
 800bfda:	d12a      	bne.n	800c032 <HAL_PCD_MspInit+0x76>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800bfdc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bfe0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800bfe2:	2300      	movs	r3, #0
 800bfe4:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bfe6:	f107 030c 	add.w	r3, r7, #12
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7f9 feae 	bl	8005d4c <HAL_RCCEx_PeriphCLKConfig>
 800bff0:	4603      	mov	r3, r0
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d001      	beq.n	800bffa <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800bff6:	f7f4 feab 	bl	8000d50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800bffa:	4b11      	ldr	r3, [pc, #68]	; (800c040 <HAL_PCD_MspInit+0x84>)
 800bffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bffe:	4a10      	ldr	r2, [pc, #64]	; (800c040 <HAL_PCD_MspInit+0x84>)
 800c000:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c004:	6593      	str	r3, [r2, #88]	; 0x58
 800c006:	4b0e      	ldr	r3, [pc, #56]	; (800c040 <HAL_PCD_MspInit+0x84>)
 800c008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c00a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c00e:	60bb      	str	r3, [r7, #8]
 800c010:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800c012:	2200      	movs	r2, #0
 800c014:	2100      	movs	r1, #0
 800c016:	2013      	movs	r0, #19
 800c018:	f7f6 ff03 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800c01c:	2013      	movs	r0, #19
 800c01e:	f7f6 ff1a 	bl	8002e56 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800c022:	2200      	movs	r2, #0
 800c024:	2100      	movs	r1, #0
 800c026:	2014      	movs	r0, #20
 800c028:	f7f6 fefb 	bl	8002e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800c02c:	2014      	movs	r0, #20
 800c02e:	f7f6 ff12 	bl	8002e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800c032:	bf00      	nop
 800c034:	3760      	adds	r7, #96	; 0x60
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}
 800c03a:	bf00      	nop
 800c03c:	40005c00 	.word	0x40005c00
 800c040:	40021000 	.word	0x40021000

0800c044 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b082      	sub	sp, #8
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800c058:	4619      	mov	r1, r3
 800c05a:	4610      	mov	r0, r2
 800c05c:	f7fe fd2a 	bl	800aab4 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800c060:	bf00      	nop
 800c062:	3708      	adds	r7, #8
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}

0800c068 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c068:	b580      	push	{r7, lr}
 800c06a:	b082      	sub	sp, #8
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	460b      	mov	r3, r1
 800c072:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800c07a:	78fa      	ldrb	r2, [r7, #3]
 800c07c:	6879      	ldr	r1, [r7, #4]
 800c07e:	4613      	mov	r3, r2
 800c080:	009b      	lsls	r3, r3, #2
 800c082:	4413      	add	r3, r2
 800c084:	00db      	lsls	r3, r3, #3
 800c086:	440b      	add	r3, r1
 800c088:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c08c:	681a      	ldr	r2, [r3, #0]
 800c08e:	78fb      	ldrb	r3, [r7, #3]
 800c090:	4619      	mov	r1, r3
 800c092:	f7fe fd64 	bl	800ab5e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800c096:	bf00      	nop
 800c098:	3708      	adds	r7, #8
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}

0800c09e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c09e:	b580      	push	{r7, lr}
 800c0a0:	b082      	sub	sp, #8
 800c0a2:	af00      	add	r7, sp, #0
 800c0a4:	6078      	str	r0, [r7, #4]
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800c0b0:	78fa      	ldrb	r2, [r7, #3]
 800c0b2:	6879      	ldr	r1, [r7, #4]
 800c0b4:	4613      	mov	r3, r2
 800c0b6:	009b      	lsls	r3, r3, #2
 800c0b8:	4413      	add	r3, r2
 800c0ba:	00db      	lsls	r3, r3, #3
 800c0bc:	440b      	add	r3, r1
 800c0be:	3324      	adds	r3, #36	; 0x24
 800c0c0:	681a      	ldr	r2, [r3, #0]
 800c0c2:	78fb      	ldrb	r3, [r7, #3]
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	f7fe fdad 	bl	800ac24 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800c0ca:	bf00      	nop
 800c0cc:	3708      	adds	r7, #8
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}

0800c0d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0d2:	b580      	push	{r7, lr}
 800c0d4:	b082      	sub	sp, #8
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	f7fe fec1 	bl	800ae68 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800c0e6:	bf00      	nop
 800c0e8:	3708      	adds	r7, #8
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}

0800c0ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0ee:	b580      	push	{r7, lr}
 800c0f0:	b084      	sub	sp, #16
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	795b      	ldrb	r3, [r3, #5]
 800c0fe:	2b02      	cmp	r3, #2
 800c100:	d001      	beq.n	800c106 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c102:	f7f4 fe25 	bl	8000d50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c10c:	7bfa      	ldrb	r2, [r7, #15]
 800c10e:	4611      	mov	r1, r2
 800c110:	4618      	mov	r0, r3
 800c112:	f7fe fe6b 	bl	800adec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c11c:	4618      	mov	r0, r3
 800c11e:	f7fe fe17 	bl	800ad50 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800c122:	bf00      	nop
 800c124:	3710      	adds	r7, #16
 800c126:	46bd      	mov	sp, r7
 800c128:	bd80      	pop	{r7, pc}
	...

0800c12c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b082      	sub	sp, #8
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c13a:	4618      	mov	r0, r3
 800c13c:	f7fe fe66 	bl	800ae0c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	7a5b      	ldrb	r3, [r3, #9]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d005      	beq.n	800c154 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c148:	4b04      	ldr	r3, [pc, #16]	; (800c15c <HAL_PCD_SuspendCallback+0x30>)
 800c14a:	691b      	ldr	r3, [r3, #16]
 800c14c:	4a03      	ldr	r2, [pc, #12]	; (800c15c <HAL_PCD_SuspendCallback+0x30>)
 800c14e:	f043 0306 	orr.w	r3, r3, #6
 800c152:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800c154:	bf00      	nop
 800c156:	3708      	adds	r7, #8
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	e000ed00 	.word	0xe000ed00

0800c160 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	7a5b      	ldrb	r3, [r3, #9]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d007      	beq.n	800c180 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c170:	4b08      	ldr	r3, [pc, #32]	; (800c194 <HAL_PCD_ResumeCallback+0x34>)
 800c172:	691b      	ldr	r3, [r3, #16]
 800c174:	4a07      	ldr	r2, [pc, #28]	; (800c194 <HAL_PCD_ResumeCallback+0x34>)
 800c176:	f023 0306 	bic.w	r3, r3, #6
 800c17a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800c17c:	f000 f9f8 	bl	800c570 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c186:	4618      	mov	r0, r3
 800c188:	f7fe fe56 	bl	800ae38 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800c18c:	bf00      	nop
 800c18e:	3708      	adds	r7, #8
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	e000ed00 	.word	0xe000ed00

0800c198 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800c1a0:	4a2b      	ldr	r2, [pc, #172]	; (800c250 <USBD_LL_Init+0xb8>)
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	4a29      	ldr	r2, [pc, #164]	; (800c250 <USBD_LL_Init+0xb8>)
 800c1ac:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800c1b0:	4b27      	ldr	r3, [pc, #156]	; (800c250 <USBD_LL_Init+0xb8>)
 800c1b2:	4a28      	ldr	r2, [pc, #160]	; (800c254 <USBD_LL_Init+0xbc>)
 800c1b4:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800c1b6:	4b26      	ldr	r3, [pc, #152]	; (800c250 <USBD_LL_Init+0xb8>)
 800c1b8:	2208      	movs	r2, #8
 800c1ba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800c1bc:	4b24      	ldr	r3, [pc, #144]	; (800c250 <USBD_LL_Init+0xb8>)
 800c1be:	2202      	movs	r2, #2
 800c1c0:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c1c2:	4b23      	ldr	r3, [pc, #140]	; (800c250 <USBD_LL_Init+0xb8>)
 800c1c4:	2202      	movs	r2, #2
 800c1c6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800c1c8:	4b21      	ldr	r3, [pc, #132]	; (800c250 <USBD_LL_Init+0xb8>)
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800c1ce:	4b20      	ldr	r3, [pc, #128]	; (800c250 <USBD_LL_Init+0xb8>)
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800c1d4:	4b1e      	ldr	r3, [pc, #120]	; (800c250 <USBD_LL_Init+0xb8>)
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800c1da:	4b1d      	ldr	r3, [pc, #116]	; (800c250 <USBD_LL_Init+0xb8>)
 800c1dc:	2200      	movs	r2, #0
 800c1de:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800c1e0:	481b      	ldr	r0, [pc, #108]	; (800c250 <USBD_LL_Init+0xb8>)
 800c1e2:	f7f7 fa9c 	bl	800371e <HAL_PCD_Init>
 800c1e6:	4603      	mov	r3, r0
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d001      	beq.n	800c1f0 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800c1ec:	f7f4 fdb0 	bl	8000d50 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c1f6:	2318      	movs	r3, #24
 800c1f8:	2200      	movs	r2, #0
 800c1fa:	2100      	movs	r1, #0
 800c1fc:	f7f8 ff56 	bl	80050ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c206:	2358      	movs	r3, #88	; 0x58
 800c208:	2200      	movs	r2, #0
 800c20a:	2180      	movs	r1, #128	; 0x80
 800c20c:	f7f8 ff4e 	bl	80050ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c216:	23c0      	movs	r3, #192	; 0xc0
 800c218:	2200      	movs	r2, #0
 800c21a:	2181      	movs	r1, #129	; 0x81
 800c21c:	f7f8 ff46 	bl	80050ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c226:	f44f 7388 	mov.w	r3, #272	; 0x110
 800c22a:	2200      	movs	r2, #0
 800c22c:	2101      	movs	r1, #1
 800c22e:	f7f8 ff3d 	bl	80050ac <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c238:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c23c:	2200      	movs	r2, #0
 800c23e:	2182      	movs	r1, #130	; 0x82
 800c240:	f7f8 ff34 	bl	80050ac <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800c244:	2300      	movs	r3, #0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3708      	adds	r7, #8
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	20004084 	.word	0x20004084
 800c254:	40005c00 	.word	0x40005c00

0800c258 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c260:	2300      	movs	r3, #0
 800c262:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c264:	2300      	movs	r3, #0
 800c266:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c26e:	4618      	mov	r0, r3
 800c270:	f7f7 fb23 	bl	80038ba <HAL_PCD_Start>
 800c274:	4603      	mov	r3, r0
 800c276:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c278:	7bfb      	ldrb	r3, [r7, #15]
 800c27a:	4618      	mov	r0, r3
 800c27c:	f000 f97e 	bl	800c57c <USBD_Get_USB_Status>
 800c280:	4603      	mov	r3, r0
 800c282:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c284:	7bbb      	ldrb	r3, [r7, #14]
}
 800c286:	4618      	mov	r0, r3
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b084      	sub	sp, #16
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
 800c296:	4608      	mov	r0, r1
 800c298:	4611      	mov	r1, r2
 800c29a:	461a      	mov	r2, r3
 800c29c:	4603      	mov	r3, r0
 800c29e:	70fb      	strb	r3, [r7, #3]
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	70bb      	strb	r3, [r7, #2]
 800c2a4:	4613      	mov	r3, r2
 800c2a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c2b6:	78bb      	ldrb	r3, [r7, #2]
 800c2b8:	883a      	ldrh	r2, [r7, #0]
 800c2ba:	78f9      	ldrb	r1, [r7, #3]
 800c2bc:	f7f7 fc6a 	bl	8003b94 <HAL_PCD_EP_Open>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2c4:	7bfb      	ldrb	r3, [r7, #15]
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	f000 f958 	bl	800c57c <USBD_Get_USB_Status>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3710      	adds	r7, #16
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b084      	sub	sp, #16
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
 800c2e2:	460b      	mov	r3, r1
 800c2e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c2f4:	78fa      	ldrb	r2, [r7, #3]
 800c2f6:	4611      	mov	r1, r2
 800c2f8:	4618      	mov	r0, r3
 800c2fa:	f7f7 fca8 	bl	8003c4e <HAL_PCD_EP_Close>
 800c2fe:	4603      	mov	r3, r0
 800c300:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c302:	7bfb      	ldrb	r3, [r7, #15]
 800c304:	4618      	mov	r0, r3
 800c306:	f000 f939 	bl	800c57c <USBD_Get_USB_Status>
 800c30a:	4603      	mov	r3, r0
 800c30c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c30e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c310:	4618      	mov	r0, r3
 800c312:	3710      	adds	r7, #16
 800c314:	46bd      	mov	sp, r7
 800c316:	bd80      	pop	{r7, pc}

0800c318 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
 800c320:	460b      	mov	r3, r1
 800c322:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c324:	2300      	movs	r3, #0
 800c326:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c328:	2300      	movs	r3, #0
 800c32a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c332:	78fa      	ldrb	r2, [r7, #3]
 800c334:	4611      	mov	r1, r2
 800c336:	4618      	mov	r0, r3
 800c338:	f7f7 fd51 	bl	8003dde <HAL_PCD_EP_SetStall>
 800c33c:	4603      	mov	r3, r0
 800c33e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c340:	7bfb      	ldrb	r3, [r7, #15]
 800c342:	4618      	mov	r0, r3
 800c344:	f000 f91a 	bl	800c57c <USBD_Get_USB_Status>
 800c348:	4603      	mov	r3, r0
 800c34a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c34c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b084      	sub	sp, #16
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
 800c35e:	460b      	mov	r3, r1
 800c360:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c362:	2300      	movs	r3, #0
 800c364:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c366:	2300      	movs	r3, #0
 800c368:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c370:	78fa      	ldrb	r2, [r7, #3]
 800c372:	4611      	mov	r1, r2
 800c374:	4618      	mov	r0, r3
 800c376:	f7f7 fd84 	bl	8003e82 <HAL_PCD_EP_ClrStall>
 800c37a:	4603      	mov	r3, r0
 800c37c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c37e:	7bfb      	ldrb	r3, [r7, #15]
 800c380:	4618      	mov	r0, r3
 800c382:	f000 f8fb 	bl	800c57c <USBD_Get_USB_Status>
 800c386:	4603      	mov	r3, r0
 800c388:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c38a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c38c:	4618      	mov	r0, r3
 800c38e:	3710      	adds	r7, #16
 800c390:	46bd      	mov	sp, r7
 800c392:	bd80      	pop	{r7, pc}

0800c394 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c394:	b480      	push	{r7}
 800c396:	b085      	sub	sp, #20
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
 800c39c:	460b      	mov	r3, r1
 800c39e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c3a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c3a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	da0b      	bge.n	800c3c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c3b0:	78fb      	ldrb	r3, [r7, #3]
 800c3b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3b6:	68f9      	ldr	r1, [r7, #12]
 800c3b8:	4613      	mov	r3, r2
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	4413      	add	r3, r2
 800c3be:	00db      	lsls	r3, r3, #3
 800c3c0:	440b      	add	r3, r1
 800c3c2:	3312      	adds	r3, #18
 800c3c4:	781b      	ldrb	r3, [r3, #0]
 800c3c6:	e00b      	b.n	800c3e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c3c8:	78fb      	ldrb	r3, [r7, #3]
 800c3ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3ce:	68f9      	ldr	r1, [r7, #12]
 800c3d0:	4613      	mov	r3, r2
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	4413      	add	r3, r2
 800c3d6:	00db      	lsls	r3, r3, #3
 800c3d8:	440b      	add	r3, r1
 800c3da:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800c3de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3714      	adds	r7, #20
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ea:	4770      	bx	lr

0800c3ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3f8:	2300      	movs	r3, #0
 800c3fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c406:	78fa      	ldrb	r2, [r7, #3]
 800c408:	4611      	mov	r1, r2
 800c40a:	4618      	mov	r0, r3
 800c40c:	f7f7 fb9e 	bl	8003b4c <HAL_PCD_SetAddress>
 800c410:	4603      	mov	r3, r0
 800c412:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c414:	7bfb      	ldrb	r3, [r7, #15]
 800c416:	4618      	mov	r0, r3
 800c418:	f000 f8b0 	bl	800c57c <USBD_Get_USB_Status>
 800c41c:	4603      	mov	r3, r0
 800c41e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c420:	7bbb      	ldrb	r3, [r7, #14]
}
 800c422:	4618      	mov	r0, r3
 800c424:	3710      	adds	r7, #16
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}

0800c42a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b086      	sub	sp, #24
 800c42e:	af00      	add	r7, sp, #0
 800c430:	60f8      	str	r0, [r7, #12]
 800c432:	607a      	str	r2, [r7, #4]
 800c434:	603b      	str	r3, [r7, #0]
 800c436:	460b      	mov	r3, r1
 800c438:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c43a:	2300      	movs	r3, #0
 800c43c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c43e:	2300      	movs	r3, #0
 800c440:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c448:	7af9      	ldrb	r1, [r7, #11]
 800c44a:	683b      	ldr	r3, [r7, #0]
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	f7f7 fc8f 	bl	8003d70 <HAL_PCD_EP_Transmit>
 800c452:	4603      	mov	r3, r0
 800c454:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c456:	7dfb      	ldrb	r3, [r7, #23]
 800c458:	4618      	mov	r0, r3
 800c45a:	f000 f88f 	bl	800c57c <USBD_Get_USB_Status>
 800c45e:	4603      	mov	r3, r0
 800c460:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c462:	7dbb      	ldrb	r3, [r7, #22]
}
 800c464:	4618      	mov	r0, r3
 800c466:	3718      	adds	r7, #24
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b086      	sub	sp, #24
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	607a      	str	r2, [r7, #4]
 800c476:	603b      	str	r3, [r7, #0]
 800c478:	460b      	mov	r3, r1
 800c47a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c47c:	2300      	movs	r3, #0
 800c47e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c480:	2300      	movs	r3, #0
 800c482:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c484:	68fb      	ldr	r3, [r7, #12]
 800c486:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800c48a:	7af9      	ldrb	r1, [r7, #11]
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	f7f7 fc25 	bl	8003cde <HAL_PCD_EP_Receive>
 800c494:	4603      	mov	r3, r0
 800c496:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c498:	7dfb      	ldrb	r3, [r7, #23]
 800c49a:	4618      	mov	r0, r3
 800c49c:	f000 f86e 	bl	800c57c <USBD_Get_USB_Status>
 800c4a0:	4603      	mov	r3, r0
 800c4a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c4a4:	7dbb      	ldrb	r3, [r7, #22]
}
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	3718      	adds	r7, #24
 800c4aa:	46bd      	mov	sp, r7
 800c4ac:	bd80      	pop	{r7, pc}

0800c4ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c4ae:	b580      	push	{r7, lr}
 800c4b0:	b082      	sub	sp, #8
 800c4b2:	af00      	add	r7, sp, #0
 800c4b4:	6078      	str	r0, [r7, #4]
 800c4b6:	460b      	mov	r3, r1
 800c4b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c4c0:	78fa      	ldrb	r2, [r7, #3]
 800c4c2:	4611      	mov	r1, r2
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f7f7 fc3b 	bl	8003d40 <HAL_PCD_EP_GetRxCount>
 800c4ca:	4603      	mov	r3, r0
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	3708      	adds	r7, #8
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b082      	sub	sp, #8
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
 800c4dc:	460b      	mov	r3, r1
 800c4de:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800c4e0:	78fb      	ldrb	r3, [r7, #3]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d002      	beq.n	800c4ec <HAL_PCDEx_LPM_Callback+0x18>
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d013      	beq.n	800c512 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800c4ea:	e023      	b.n	800c534 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	7a5b      	ldrb	r3, [r3, #9]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d007      	beq.n	800c504 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c4f4:	f000 f83c 	bl	800c570 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c4f8:	4b10      	ldr	r3, [pc, #64]	; (800c53c <HAL_PCDEx_LPM_Callback+0x68>)
 800c4fa:	691b      	ldr	r3, [r3, #16]
 800c4fc:	4a0f      	ldr	r2, [pc, #60]	; (800c53c <HAL_PCDEx_LPM_Callback+0x68>)
 800c4fe:	f023 0306 	bic.w	r3, r3, #6
 800c502:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c50a:	4618      	mov	r0, r3
 800c50c:	f7fe fc94 	bl	800ae38 <USBD_LL_Resume>
    break;
 800c510:	e010      	b.n	800c534 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c518:	4618      	mov	r0, r3
 800c51a:	f7fe fc77 	bl	800ae0c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	7a5b      	ldrb	r3, [r3, #9]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d005      	beq.n	800c532 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c526:	4b05      	ldr	r3, [pc, #20]	; (800c53c <HAL_PCDEx_LPM_Callback+0x68>)
 800c528:	691b      	ldr	r3, [r3, #16]
 800c52a:	4a04      	ldr	r2, [pc, #16]	; (800c53c <HAL_PCDEx_LPM_Callback+0x68>)
 800c52c:	f043 0306 	orr.w	r3, r3, #6
 800c530:	6113      	str	r3, [r2, #16]
    break;
 800c532:	bf00      	nop
}
 800c534:	bf00      	nop
 800c536:	3708      	adds	r7, #8
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}
 800c53c:	e000ed00 	.word	0xe000ed00

0800c540 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c540:	b480      	push	{r7}
 800c542:	b083      	sub	sp, #12
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c548:	4b03      	ldr	r3, [pc, #12]	; (800c558 <USBD_static_malloc+0x18>)
}
 800c54a:	4618      	mov	r0, r3
 800c54c:	370c      	adds	r7, #12
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr
 800c556:	bf00      	nop
 800c558:	20004360 	.word	0x20004360

0800c55c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c55c:	b480      	push	{r7}
 800c55e:	b083      	sub	sp, #12
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]

}
 800c564:	bf00      	nop
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c570:	b580      	push	{r7, lr}
 800c572:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c574:	f7f4 f858 	bl	8000628 <SystemClock_Config>
}
 800c578:	bf00      	nop
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c57c:	b480      	push	{r7}
 800c57e:	b085      	sub	sp, #20
 800c580:	af00      	add	r7, sp, #0
 800c582:	4603      	mov	r3, r0
 800c584:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c586:	2300      	movs	r3, #0
 800c588:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c58a:	79fb      	ldrb	r3, [r7, #7]
 800c58c:	2b03      	cmp	r3, #3
 800c58e:	d817      	bhi.n	800c5c0 <USBD_Get_USB_Status+0x44>
 800c590:	a201      	add	r2, pc, #4	; (adr r2, 800c598 <USBD_Get_USB_Status+0x1c>)
 800c592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c596:	bf00      	nop
 800c598:	0800c5a9 	.word	0x0800c5a9
 800c59c:	0800c5af 	.word	0x0800c5af
 800c5a0:	0800c5b5 	.word	0x0800c5b5
 800c5a4:	0800c5bb 	.word	0x0800c5bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c5a8:	2300      	movs	r3, #0
 800c5aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c5ac:	e00b      	b.n	800c5c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c5ae:	2303      	movs	r3, #3
 800c5b0:	73fb      	strb	r3, [r7, #15]
    break;
 800c5b2:	e008      	b.n	800c5c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	73fb      	strb	r3, [r7, #15]
    break;
 800c5b8:	e005      	b.n	800c5c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5ba:	2303      	movs	r3, #3
 800c5bc:	73fb      	strb	r3, [r7, #15]
    break;
 800c5be:	e002      	b.n	800c5c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c5c0:	2303      	movs	r3, #3
 800c5c2:	73fb      	strb	r3, [r7, #15]
    break;
 800c5c4:	bf00      	nop
  }
  return usb_status;
 800c5c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	3714      	adds	r7, #20
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr

0800c5d4 <memset>:
 800c5d4:	4402      	add	r2, r0
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d100      	bne.n	800c5de <memset+0xa>
 800c5dc:	4770      	bx	lr
 800c5de:	f803 1b01 	strb.w	r1, [r3], #1
 800c5e2:	e7f9      	b.n	800c5d8 <memset+0x4>

0800c5e4 <__libc_init_array>:
 800c5e4:	b570      	push	{r4, r5, r6, lr}
 800c5e6:	4d0d      	ldr	r5, [pc, #52]	; (800c61c <__libc_init_array+0x38>)
 800c5e8:	4c0d      	ldr	r4, [pc, #52]	; (800c620 <__libc_init_array+0x3c>)
 800c5ea:	1b64      	subs	r4, r4, r5
 800c5ec:	10a4      	asrs	r4, r4, #2
 800c5ee:	2600      	movs	r6, #0
 800c5f0:	42a6      	cmp	r6, r4
 800c5f2:	d109      	bne.n	800c608 <__libc_init_array+0x24>
 800c5f4:	4d0b      	ldr	r5, [pc, #44]	; (800c624 <__libc_init_array+0x40>)
 800c5f6:	4c0c      	ldr	r4, [pc, #48]	; (800c628 <__libc_init_array+0x44>)
 800c5f8:	f000 f818 	bl	800c62c <_init>
 800c5fc:	1b64      	subs	r4, r4, r5
 800c5fe:	10a4      	asrs	r4, r4, #2
 800c600:	2600      	movs	r6, #0
 800c602:	42a6      	cmp	r6, r4
 800c604:	d105      	bne.n	800c612 <__libc_init_array+0x2e>
 800c606:	bd70      	pop	{r4, r5, r6, pc}
 800c608:	f855 3b04 	ldr.w	r3, [r5], #4
 800c60c:	4798      	blx	r3
 800c60e:	3601      	adds	r6, #1
 800c610:	e7ee      	b.n	800c5f0 <__libc_init_array+0xc>
 800c612:	f855 3b04 	ldr.w	r3, [r5], #4
 800c616:	4798      	blx	r3
 800c618:	3601      	adds	r6, #1
 800c61a:	e7f2      	b.n	800c602 <__libc_init_array+0x1e>
 800c61c:	0800c6d4 	.word	0x0800c6d4
 800c620:	0800c6d4 	.word	0x0800c6d4
 800c624:	0800c6d4 	.word	0x0800c6d4
 800c628:	0800c6d8 	.word	0x0800c6d8

0800c62c <_init>:
 800c62c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c62e:	bf00      	nop
 800c630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c632:	bc08      	pop	{r3}
 800c634:	469e      	mov	lr, r3
 800c636:	4770      	bx	lr

0800c638 <_fini>:
 800c638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c63a:	bf00      	nop
 800c63c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c63e:	bc08      	pop	{r3}
 800c640:	469e      	mov	lr, r3
 800c642:	4770      	bx	lr
