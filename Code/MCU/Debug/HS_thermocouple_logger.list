
HS_thermocouple_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccf0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  0800ced0  0800ced0  0001ced0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf68  0800cf68  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800cf68  0800cf68  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800cf68  0800cf68  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf68  0800cf68  0001cf68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf6c  0800cf6c  0001cf6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800cf70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005dfc  200001e0  0800d150  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  20005fdc  0800d150  00025fdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fbe9  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000477c  00000000  00000000  0003fe3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ca0  00000000  00000000  000445b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015f0  00000000  00000000  00046258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002ca43  00000000  00000000  00047848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023352  00000000  00000000  0007428b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00118cca  00000000  00000000  000975dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008108  00000000  00000000  001b02a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001b83b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ceb8 	.word	0x0800ceb8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	0800ceb8 	.word	0x0800ceb8

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c4:	f001 f8f9 	bl	80014ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002c8:	f000 f866 	bl	8000398 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002cc:	f000 fc0e 	bl	8000aec <MX_GPIO_Init>
  MX_DMA_Init();
 80002d0:	f000 fbca 	bl	8000a68 <MX_DMA_Init>
  MX_ADC1_Init();
 80002d4:	f000 f8ac 	bl	8000430 <MX_ADC1_Init>
  MX_ADC2_Init();
 80002d8:	f000 f92e 	bl	8000538 <MX_ADC2_Init>
  MX_ADC3_Init();
 80002dc:	f000 f990 	bl	8000600 <MX_ADC3_Init>
  MX_ADC4_Init();
 80002e0:	f000 fa14 	bl	800070c <MX_ADC4_Init>
  MX_TIM2_Init();
 80002e4:	f000 fb5c 	bl	80009a0 <MX_TIM2_Init>
  MX_USB_Device_Init();
 80002e8:	f00b f9c2 	bl	800b670 <MX_USB_Device_Init>
  MX_I2C3_Init();
 80002ec:	f000 faac 	bl	8000848 <MX_I2C3_Init>
  MX_DAC1_Init();
 80002f0:	f000 fa70 	bl	80007d4 <MX_DAC1_Init>
  MX_TIM1_Init();
 80002f4:	f000 fae8 	bl	80008c8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start_IT(&htim1); // Measurement duration timer;
 80002f8:	481b      	ldr	r0, [pc, #108]	; (8000368 <main+0xa8>)
 80002fa:	f006 fbcb 	bl	8006a94 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2); // Measurement step timer;
 80002fe:	481b      	ldr	r0, [pc, #108]	; (800036c <main+0xac>)
 8000300:	f006 fbc8 	bl	8006a94 <HAL_TIM_Base_Start_IT>
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000304:	217f      	movs	r1, #127	; 0x7f
 8000306:	481a      	ldr	r0, [pc, #104]	; (8000370 <main+0xb0>)
 8000308:	f002 fca2 	bl	8002c50 <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffers[0], ADC_BUFFER_SIZE);
 800030c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000310:	4918      	ldr	r1, [pc, #96]	; (8000374 <main+0xb4>)
 8000312:	4817      	ldr	r0, [pc, #92]	; (8000370 <main+0xb0>)
 8000314:	f001 fd8e 	bl	8001e34 <HAL_ADC_Start_DMA>
  if(MAX_CHANNEL_COUNT > 1){
	  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000318:	217f      	movs	r1, #127	; 0x7f
 800031a:	4817      	ldr	r0, [pc, #92]	; (8000378 <main+0xb8>)
 800031c:	f002 fc98 	bl	8002c50 <HAL_ADCEx_Calibration_Start>
	  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buffers[1], ADC_BUFFER_SIZE);
 8000320:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000324:	4915      	ldr	r1, [pc, #84]	; (800037c <main+0xbc>)
 8000326:	4814      	ldr	r0, [pc, #80]	; (8000378 <main+0xb8>)
 8000328:	f001 fd84 	bl	8001e34 <HAL_ADC_Start_DMA>
  }
  if(MAX_CHANNEL_COUNT > 2){
	  HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 800032c:	217f      	movs	r1, #127	; 0x7f
 800032e:	4814      	ldr	r0, [pc, #80]	; (8000380 <main+0xc0>)
 8000330:	f002 fc8e 	bl	8002c50 <HAL_ADCEx_Calibration_Start>
	  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc_buffers[2], ADC_BUFFER_SIZE);
 8000334:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000338:	4912      	ldr	r1, [pc, #72]	; (8000384 <main+0xc4>)
 800033a:	4811      	ldr	r0, [pc, #68]	; (8000380 <main+0xc0>)
 800033c:	f001 fd7a 	bl	8001e34 <HAL_ADC_Start_DMA>
  }
  if(MAX_CHANNEL_COUNT > 3){
 	  HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8000340:	217f      	movs	r1, #127	; 0x7f
 8000342:	4811      	ldr	r0, [pc, #68]	; (8000388 <main+0xc8>)
 8000344:	f002 fc84 	bl	8002c50 <HAL_ADCEx_Calibration_Start>
 	  HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc_buffers[3], ADC_BUFFER_SIZE);
 8000348:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800034c:	490f      	ldr	r1, [pc, #60]	; (800038c <main+0xcc>)
 800034e:	480e      	ldr	r0, [pc, #56]	; (8000388 <main+0xc8>)
 8000350:	f001 fd70 	bl	8001e34 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (conv_state != IDLE){
 8000354:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <main+0xd0>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	b2db      	uxtb	r3, r3
 800035a:	2b00      	cmp	r3, #0
 800035c:	d0fa      	beq.n	8000354 <main+0x94>
		  printf("asdf");
 800035e:	480d      	ldr	r0, [pc, #52]	; (8000394 <main+0xd4>)
 8000360:	f00b ff34 	bl	800c1cc <iprintf>
	  if (conv_state != IDLE){
 8000364:	e7f6      	b.n	8000354 <main+0x94>
 8000366:	bf00      	nop
 8000368:	20000594 	.word	0x20000594
 800036c:	200005e0 	.word	0x200005e0
 8000370:	200001fc 	.word	0x200001fc
 8000374:	2000062c 	.word	0x2000062c
 8000378:	20000268 	.word	0x20000268
 800037c:	200015cc 	.word	0x200015cc
 8000380:	200002d4 	.word	0x200002d4
 8000384:	2000256c 	.word	0x2000256c
 8000388:	20000340 	.word	0x20000340
 800038c:	2000350c 	.word	0x2000350c
 8000390:	200044ac 	.word	0x200044ac
 8000394:	0800ced0 	.word	0x0800ced0

08000398 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b094      	sub	sp, #80	; 0x50
 800039c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800039e:	f107 0318 	add.w	r3, r7, #24
 80003a2:	2238      	movs	r2, #56	; 0x38
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f00b ff65 	bl	800c276 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003ac:	1d3b      	adds	r3, r7, #4
 80003ae:	2200      	movs	r2, #0
 80003b0:	601a      	str	r2, [r3, #0]
 80003b2:	605a      	str	r2, [r3, #4]
 80003b4:	609a      	str	r2, [r3, #8]
 80003b6:	60da      	str	r2, [r3, #12]
 80003b8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80003ba:	2000      	movs	r0, #0
 80003bc:	f005 fb0e 	bl	80059dc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80003c0:	2321      	movs	r3, #33	; 0x21
 80003c2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80003c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80003c8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80003ca:	2301      	movs	r3, #1
 80003cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003ce:	2302      	movs	r3, #2
 80003d0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80003d2:	2303      	movs	r3, #3
 80003d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80003d6:	2302      	movs	r3, #2
 80003d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 78;
 80003da:	234e      	movs	r3, #78	; 0x4e
 80003dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80003de:	2306      	movs	r3, #6
 80003e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003e2:	2302      	movs	r3, #2
 80003e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003e6:	2302      	movs	r3, #2
 80003e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003ea:	f107 0318 	add.w	r3, r7, #24
 80003ee:	4618      	mov	r0, r3
 80003f0:	f005 fba8 	bl	8005b44 <HAL_RCC_OscConfig>
 80003f4:	4603      	mov	r3, r0
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	d001      	beq.n	80003fe <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003fa:	f000 fc0f 	bl	8000c1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003fe:	230f      	movs	r3, #15
 8000400:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000402:	2303      	movs	r3, #3
 8000404:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000406:	2300      	movs	r3, #0
 8000408:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800040a:	2300      	movs	r3, #0
 800040c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	2104      	movs	r1, #4
 8000416:	4618      	mov	r0, r3
 8000418:	f005 fea6 	bl	8006168 <HAL_RCC_ClockConfig>
 800041c:	4603      	mov	r3, r0
 800041e:	2b00      	cmp	r3, #0
 8000420:	d001      	beq.n	8000426 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000422:	f000 fbfb 	bl	8000c1c <Error_Handler>
  }
}
 8000426:	bf00      	nop
 8000428:	3750      	adds	r7, #80	; 0x50
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b08c      	sub	sp, #48	; 0x30
 8000434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000436:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
 800043e:	605a      	str	r2, [r3, #4]
 8000440:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000442:	1d3b      	adds	r3, r7, #4
 8000444:	2220      	movs	r2, #32
 8000446:	2100      	movs	r1, #0
 8000448:	4618      	mov	r0, r3
 800044a:	f00b ff14 	bl	800c276 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800044e:	4b38      	ldr	r3, [pc, #224]	; (8000530 <MX_ADC1_Init+0x100>)
 8000450:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000454:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000456:	4b36      	ldr	r3, [pc, #216]	; (8000530 <MX_ADC1_Init+0x100>)
 8000458:	2200      	movs	r2, #0
 800045a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800045c:	4b34      	ldr	r3, [pc, #208]	; (8000530 <MX_ADC1_Init+0x100>)
 800045e:	2200      	movs	r2, #0
 8000460:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000462:	4b33      	ldr	r3, [pc, #204]	; (8000530 <MX_ADC1_Init+0x100>)
 8000464:	2200      	movs	r2, #0
 8000466:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000468:	4b31      	ldr	r3, [pc, #196]	; (8000530 <MX_ADC1_Init+0x100>)
 800046a:	2200      	movs	r2, #0
 800046c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800046e:	4b30      	ldr	r3, [pc, #192]	; (8000530 <MX_ADC1_Init+0x100>)
 8000470:	2200      	movs	r2, #0
 8000472:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000474:	4b2e      	ldr	r3, [pc, #184]	; (8000530 <MX_ADC1_Init+0x100>)
 8000476:	2204      	movs	r2, #4
 8000478:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800047a:	4b2d      	ldr	r3, [pc, #180]	; (8000530 <MX_ADC1_Init+0x100>)
 800047c:	2200      	movs	r2, #0
 800047e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000480:	4b2b      	ldr	r3, [pc, #172]	; (8000530 <MX_ADC1_Init+0x100>)
 8000482:	2200      	movs	r2, #0
 8000484:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000486:	4b2a      	ldr	r3, [pc, #168]	; (8000530 <MX_ADC1_Init+0x100>)
 8000488:	2201      	movs	r2, #1
 800048a:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800048c:	4b28      	ldr	r3, [pc, #160]	; (8000530 <MX_ADC1_Init+0x100>)
 800048e:	2200      	movs	r2, #0
 8000490:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000494:	4b26      	ldr	r3, [pc, #152]	; (8000530 <MX_ADC1_Init+0x100>)
 8000496:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 800049a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800049c:	4b24      	ldr	r3, [pc, #144]	; (8000530 <MX_ADC1_Init+0x100>)
 800049e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80004a2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80004a4:	4b22      	ldr	r3, [pc, #136]	; (8000530 <MX_ADC1_Init+0x100>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004ac:	4b20      	ldr	r3, [pc, #128]	; (8000530 <MX_ADC1_Init+0x100>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 80004b2:	4b1f      	ldr	r3, [pc, #124]	; (8000530 <MX_ADC1_Init+0x100>)
 80004b4:	2201      	movs	r2, #1
 80004b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 80004ba:	4b1d      	ldr	r3, [pc, #116]	; (8000530 <MX_ADC1_Init+0x100>)
 80004bc:	2210      	movs	r2, #16
 80004be:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 80004c0:	4b1b      	ldr	r3, [pc, #108]	; (8000530 <MX_ADC1_Init+0x100>)
 80004c2:	2220      	movs	r2, #32
 80004c4:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80004c6:	4b1a      	ldr	r3, [pc, #104]	; (8000530 <MX_ADC1_Init+0x100>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 80004cc:	4b18      	ldr	r3, [pc, #96]	; (8000530 <MX_ADC1_Init+0x100>)
 80004ce:	2201      	movs	r2, #1
 80004d0:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004d2:	4817      	ldr	r0, [pc, #92]	; (8000530 <MX_ADC1_Init+0x100>)
 80004d4:	f001 faf2 	bl	8001abc <HAL_ADC_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80004de:	f000 fb9d 	bl	8000c1c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80004e2:	2300      	movs	r3, #0
 80004e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80004e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004ea:	4619      	mov	r1, r3
 80004ec:	4810      	ldr	r0, [pc, #64]	; (8000530 <MX_ADC1_Init+0x100>)
 80004ee:	f002 fc11 	bl	8002d14 <HAL_ADCEx_MultiModeConfigChannel>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80004f8:	f000 fb90 	bl	8000c1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004fc:	4b0d      	ldr	r3, [pc, #52]	; (8000534 <MX_ADC1_Init+0x104>)
 80004fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000500:	2306      	movs	r3, #6
 8000502:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000504:	2300      	movs	r3, #0
 8000506:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000508:	237f      	movs	r3, #127	; 0x7f
 800050a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800050c:	2304      	movs	r3, #4
 800050e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000510:	2300      	movs	r3, #0
 8000512:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	4619      	mov	r1, r3
 8000518:	4805      	ldr	r0, [pc, #20]	; (8000530 <MX_ADC1_Init+0x100>)
 800051a:	f001 fd7d 	bl	8002018 <HAL_ADC_ConfigChannel>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d001      	beq.n	8000528 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000524:	f000 fb7a 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000528:	bf00      	nop
 800052a:	3730      	adds	r7, #48	; 0x30
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	200001fc 	.word	0x200001fc
 8000534:	04300002 	.word	0x04300002

08000538 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800053e:	463b      	mov	r3, r7
 8000540:	2220      	movs	r2, #32
 8000542:	2100      	movs	r1, #0
 8000544:	4618      	mov	r0, r3
 8000546:	f00b fe96 	bl	800c276 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800054a:	4b2a      	ldr	r3, [pc, #168]	; (80005f4 <MX_ADC2_Init+0xbc>)
 800054c:	4a2a      	ldr	r2, [pc, #168]	; (80005f8 <MX_ADC2_Init+0xc0>)
 800054e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000550:	4b28      	ldr	r3, [pc, #160]	; (80005f4 <MX_ADC2_Init+0xbc>)
 8000552:	2200      	movs	r2, #0
 8000554:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000556:	4b27      	ldr	r3, [pc, #156]	; (80005f4 <MX_ADC2_Init+0xbc>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800055c:	4b25      	ldr	r3, [pc, #148]	; (80005f4 <MX_ADC2_Init+0xbc>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000562:	4b24      	ldr	r3, [pc, #144]	; (80005f4 <MX_ADC2_Init+0xbc>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000568:	4b22      	ldr	r3, [pc, #136]	; (80005f4 <MX_ADC2_Init+0xbc>)
 800056a:	2200      	movs	r2, #0
 800056c:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800056e:	4b21      	ldr	r3, [pc, #132]	; (80005f4 <MX_ADC2_Init+0xbc>)
 8000570:	2204      	movs	r2, #4
 8000572:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000574:	4b1f      	ldr	r3, [pc, #124]	; (80005f4 <MX_ADC2_Init+0xbc>)
 8000576:	2200      	movs	r2, #0
 8000578:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800057a:	4b1e      	ldr	r3, [pc, #120]	; (80005f4 <MX_ADC2_Init+0xbc>)
 800057c:	2200      	movs	r2, #0
 800057e:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000580:	4b1c      	ldr	r3, [pc, #112]	; (80005f4 <MX_ADC2_Init+0xbc>)
 8000582:	2201      	movs	r2, #1
 8000584:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000586:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <MX_ADC2_Init+0xbc>)
 8000588:	2200      	movs	r2, #0
 800058a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800058e:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <MX_ADC2_Init+0xbc>)
 8000590:	2200      	movs	r2, #0
 8000592:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000594:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <MX_ADC2_Init+0xbc>)
 8000596:	2200      	movs	r2, #0
 8000598:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800059a:	4b16      	ldr	r3, [pc, #88]	; (80005f4 <MX_ADC2_Init+0xbc>)
 800059c:	2200      	movs	r2, #0
 800059e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005a2:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <MX_ADC2_Init+0xbc>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80005a8:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <MX_ADC2_Init+0xbc>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80005b0:	4810      	ldr	r0, [pc, #64]	; (80005f4 <MX_ADC2_Init+0xbc>)
 80005b2:	f001 fa83 	bl	8001abc <HAL_ADC_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC2_Init+0x88>
  {
    Error_Handler();
 80005bc:	f000 fb2e 	bl	8000c1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <MX_ADC2_Init+0xc4>)
 80005c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005c4:	2306      	movs	r3, #6
 80005c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005cc:	237f      	movs	r3, #127	; 0x7f
 80005ce:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005d0:	2304      	movs	r3, #4
 80005d2:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005d8:	463b      	mov	r3, r7
 80005da:	4619      	mov	r1, r3
 80005dc:	4805      	ldr	r0, [pc, #20]	; (80005f4 <MX_ADC2_Init+0xbc>)
 80005de:	f001 fd1b 	bl	8002018 <HAL_ADC_ConfigChannel>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_ADC2_Init+0xb4>
  {
    Error_Handler();
 80005e8:	f000 fb18 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80005ec:	bf00      	nop
 80005ee:	3720      	adds	r7, #32
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	20000268 	.word	0x20000268
 80005f8:	50000100 	.word	0x50000100
 80005fc:	0c900008 	.word	0x0c900008

08000600 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b08c      	sub	sp, #48	; 0x30
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2220      	movs	r2, #32
 8000616:	2100      	movs	r1, #0
 8000618:	4618      	mov	r0, r3
 800061a:	f00b fe2c 	bl	800c276 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 800061e:	4b38      	ldr	r3, [pc, #224]	; (8000700 <MX_ADC3_Init+0x100>)
 8000620:	4a38      	ldr	r2, [pc, #224]	; (8000704 <MX_ADC3_Init+0x104>)
 8000622:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000624:	4b36      	ldr	r3, [pc, #216]	; (8000700 <MX_ADC3_Init+0x100>)
 8000626:	2200      	movs	r2, #0
 8000628:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800062a:	4b35      	ldr	r3, [pc, #212]	; (8000700 <MX_ADC3_Init+0x100>)
 800062c:	2200      	movs	r2, #0
 800062e:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000630:	4b33      	ldr	r3, [pc, #204]	; (8000700 <MX_ADC3_Init+0x100>)
 8000632:	2200      	movs	r2, #0
 8000634:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 8000636:	4b32      	ldr	r3, [pc, #200]	; (8000700 <MX_ADC3_Init+0x100>)
 8000638:	2200      	movs	r2, #0
 800063a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800063c:	4b30      	ldr	r3, [pc, #192]	; (8000700 <MX_ADC3_Init+0x100>)
 800063e:	2200      	movs	r2, #0
 8000640:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000642:	4b2f      	ldr	r3, [pc, #188]	; (8000700 <MX_ADC3_Init+0x100>)
 8000644:	2204      	movs	r2, #4
 8000646:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000648:	4b2d      	ldr	r3, [pc, #180]	; (8000700 <MX_ADC3_Init+0x100>)
 800064a:	2200      	movs	r2, #0
 800064c:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800064e:	4b2c      	ldr	r3, [pc, #176]	; (8000700 <MX_ADC3_Init+0x100>)
 8000650:	2200      	movs	r2, #0
 8000652:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8000654:	4b2a      	ldr	r3, [pc, #168]	; (8000700 <MX_ADC3_Init+0x100>)
 8000656:	2201      	movs	r2, #1
 8000658:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800065a:	4b29      	ldr	r3, [pc, #164]	; (8000700 <MX_ADC3_Init+0x100>)
 800065c:	2200      	movs	r2, #0
 800065e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000662:	4b27      	ldr	r3, [pc, #156]	; (8000700 <MX_ADC3_Init+0x100>)
 8000664:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000668:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800066a:	4b25      	ldr	r3, [pc, #148]	; (8000700 <MX_ADC3_Init+0x100>)
 800066c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000670:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8000672:	4b23      	ldr	r3, [pc, #140]	; (8000700 <MX_ADC3_Init+0x100>)
 8000674:	2201      	movs	r2, #1
 8000676:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800067a:	4b21      	ldr	r3, [pc, #132]	; (8000700 <MX_ADC3_Init+0x100>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 8000680:	4b1f      	ldr	r3, [pc, #124]	; (8000700 <MX_ADC3_Init+0x100>)
 8000682:	2201      	movs	r2, #1
 8000684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8000688:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <MX_ADC3_Init+0x100>)
 800068a:	2210      	movs	r2, #16
 800068c:	645a      	str	r2, [r3, #68]	; 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 800068e:	4b1c      	ldr	r3, [pc, #112]	; (8000700 <MX_ADC3_Init+0x100>)
 8000690:	2220      	movs	r2, #32
 8000692:	649a      	str	r2, [r3, #72]	; 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000694:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <MX_ADC3_Init+0x100>)
 8000696:	2200      	movs	r2, #0
 8000698:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800069a:	4b19      	ldr	r3, [pc, #100]	; (8000700 <MX_ADC3_Init+0x100>)
 800069c:	2201      	movs	r2, #1
 800069e:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80006a0:	4817      	ldr	r0, [pc, #92]	; (8000700 <MX_ADC3_Init+0x100>)
 80006a2:	f001 fa0b 	bl	8001abc <HAL_ADC_Init>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80006ac:	f000 fab6 	bl	8000c1c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006b0:	2300      	movs	r3, #0
 80006b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80006b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b8:	4619      	mov	r1, r3
 80006ba:	4811      	ldr	r0, [pc, #68]	; (8000700 <MX_ADC3_Init+0x100>)
 80006bc:	f002 fb2a 	bl	8002d14 <HAL_ADCEx_MultiModeConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC3_Init+0xca>
  {
    Error_Handler();
 80006c6:	f000 faa9 	bl	8000c1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_ADC3_Init+0x108>)
 80006cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006ce:	2306      	movs	r3, #6
 80006d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006d6:	237f      	movs	r3, #127	; 0x7f
 80006d8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006da:	2304      	movs	r3, #4
 80006dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80006e2:	1d3b      	adds	r3, r7, #4
 80006e4:	4619      	mov	r1, r3
 80006e6:	4806      	ldr	r0, [pc, #24]	; (8000700 <MX_ADC3_Init+0x100>)
 80006e8:	f001 fc96 	bl	8002018 <HAL_ADC_ConfigChannel>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d001      	beq.n	80006f6 <MX_ADC3_Init+0xf6>
  {
    Error_Handler();
 80006f2:	f000 fa93 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80006f6:	bf00      	nop
 80006f8:	3730      	adds	r7, #48	; 0x30
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200002d4 	.word	0x200002d4
 8000704:	50000400 	.word	0x50000400
 8000708:	04300002 	.word	0x04300002

0800070c <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000712:	463b      	mov	r3, r7
 8000714:	2220      	movs	r2, #32
 8000716:	2100      	movs	r1, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f00b fdac 	bl	800c276 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 800071e:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <MX_ADC4_Init+0xbc>)
 8000720:	4a2a      	ldr	r2, [pc, #168]	; (80007cc <MX_ADC4_Init+0xc0>)
 8000722:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000724:	4b28      	ldr	r3, [pc, #160]	; (80007c8 <MX_ADC4_Init+0xbc>)
 8000726:	2200      	movs	r2, #0
 8000728:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800072a:	4b27      	ldr	r3, [pc, #156]	; (80007c8 <MX_ADC4_Init+0xbc>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <MX_ADC4_Init+0xbc>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 8000736:	4b24      	ldr	r3, [pc, #144]	; (80007c8 <MX_ADC4_Init+0xbc>)
 8000738:	2200      	movs	r2, #0
 800073a:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800073c:	4b22      	ldr	r3, [pc, #136]	; (80007c8 <MX_ADC4_Init+0xbc>)
 800073e:	2200      	movs	r2, #0
 8000740:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000742:	4b21      	ldr	r3, [pc, #132]	; (80007c8 <MX_ADC4_Init+0xbc>)
 8000744:	2204      	movs	r2, #4
 8000746:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 8000748:	4b1f      	ldr	r3, [pc, #124]	; (80007c8 <MX_ADC4_Init+0xbc>)
 800074a:	2200      	movs	r2, #0
 800074c:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 800074e:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <MX_ADC4_Init+0xbc>)
 8000750:	2200      	movs	r2, #0
 8000752:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8000754:	4b1c      	ldr	r3, [pc, #112]	; (80007c8 <MX_ADC4_Init+0xbc>)
 8000756:	2201      	movs	r2, #1
 8000758:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800075a:	4b1b      	ldr	r3, [pc, #108]	; (80007c8 <MX_ADC4_Init+0xbc>)
 800075c:	2200      	movs	r2, #0
 800075e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000762:	4b19      	ldr	r3, [pc, #100]	; (80007c8 <MX_ADC4_Init+0xbc>)
 8000764:	2200      	movs	r2, #0
 8000766:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000768:	4b17      	ldr	r3, [pc, #92]	; (80007c8 <MX_ADC4_Init+0xbc>)
 800076a:	2200      	movs	r2, #0
 800076c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = DISABLE;
 800076e:	4b16      	ldr	r3, [pc, #88]	; (80007c8 <MX_ADC4_Init+0xbc>)
 8000770:	2200      	movs	r2, #0
 8000772:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000776:	4b14      	ldr	r3, [pc, #80]	; (80007c8 <MX_ADC4_Init+0xbc>)
 8000778:	2200      	movs	r2, #0
 800077a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = DISABLE;
 800077c:	4b12      	ldr	r3, [pc, #72]	; (80007c8 <MX_ADC4_Init+0xbc>)
 800077e:	2200      	movs	r2, #0
 8000780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8000784:	4810      	ldr	r0, [pc, #64]	; (80007c8 <MX_ADC4_Init+0xbc>)
 8000786:	f001 f999 	bl	8001abc <HAL_ADC_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_ADC4_Init+0x88>
  {
    Error_Handler();
 8000790:	f000 fa44 	bl	8000c1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000794:	4b0e      	ldr	r3, [pc, #56]	; (80007d0 <MX_ADC4_Init+0xc4>)
 8000796:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000798:	2306      	movs	r3, #6
 800079a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800079c:	2300      	movs	r3, #0
 800079e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80007a0:	237f      	movs	r3, #127	; 0x7f
 80007a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80007a4:	2304      	movs	r3, #4
 80007a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80007ac:	463b      	mov	r3, r7
 80007ae:	4619      	mov	r1, r3
 80007b0:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_ADC4_Init+0xbc>)
 80007b2:	f001 fc31 	bl	8002018 <HAL_ADC_ConfigChannel>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_ADC4_Init+0xb4>
  {
    Error_Handler();
 80007bc:	f000 fa2e 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80007c0:	bf00      	nop
 80007c2:	3720      	adds	r7, #32
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000340 	.word	0x20000340
 80007cc:	50000500 	.word	0x50000500
 80007d0:	14f00020 	.word	0x14f00020

080007d4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b08c      	sub	sp, #48	; 0x30
 80007d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007da:	463b      	mov	r3, r7
 80007dc:	2230      	movs	r2, #48	; 0x30
 80007de:	2100      	movs	r1, #0
 80007e0:	4618      	mov	r0, r3
 80007e2:	f00b fd48 	bl	800c276 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80007e6:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_DAC1_Init+0x6c>)
 80007e8:	4a16      	ldr	r2, [pc, #88]	; (8000844 <MX_DAC1_Init+0x70>)
 80007ea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80007ec:	4814      	ldr	r0, [pc, #80]	; (8000840 <MX_DAC1_Init+0x6c>)
 80007ee:	f002 fca8 	bl	8003142 <HAL_DAC_Init>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80007f8:	f000 fa10 	bl	8000c1c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80007fc:	2302      	movs	r3, #2
 80007fe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000800:	2300      	movs	r3, #0
 8000802:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000804:	2300      	movs	r3, #0
 8000806:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800080c:	2300      	movs	r3, #0
 800080e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000810:	2300      	movs	r3, #0
 8000812:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000818:	2301      	movs	r3, #1
 800081a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000820:	463b      	mov	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	4619      	mov	r1, r3
 8000826:	4806      	ldr	r0, [pc, #24]	; (8000840 <MX_DAC1_Init+0x6c>)
 8000828:	f002 fcae 	bl	8003188 <HAL_DAC_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000832:	f000 f9f3 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	3730      	adds	r7, #48	; 0x30
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000052c 	.word	0x2000052c
 8000844:	50000800 	.word	0x50000800

08000848 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800084c:	4b1b      	ldr	r3, [pc, #108]	; (80008bc <MX_I2C3_Init+0x74>)
 800084e:	4a1c      	ldr	r2, [pc, #112]	; (80008c0 <MX_I2C3_Init+0x78>)
 8000850:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x40707EB4;
 8000852:	4b1a      	ldr	r3, [pc, #104]	; (80008bc <MX_I2C3_Init+0x74>)
 8000854:	4a1b      	ldr	r2, [pc, #108]	; (80008c4 <MX_I2C3_Init+0x7c>)
 8000856:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000858:	4b18      	ldr	r3, [pc, #96]	; (80008bc <MX_I2C3_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800085e:	4b17      	ldr	r3, [pc, #92]	; (80008bc <MX_I2C3_Init+0x74>)
 8000860:	2201      	movs	r2, #1
 8000862:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000864:	4b15      	ldr	r3, [pc, #84]	; (80008bc <MX_I2C3_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800086a:	4b14      	ldr	r3, [pc, #80]	; (80008bc <MX_I2C3_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000870:	4b12      	ldr	r3, [pc, #72]	; (80008bc <MX_I2C3_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000876:	4b11      	ldr	r3, [pc, #68]	; (80008bc <MX_I2C3_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <MX_I2C3_Init+0x74>)
 800087e:	2200      	movs	r2, #0
 8000880:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000882:	480e      	ldr	r0, [pc, #56]	; (80008bc <MX_I2C3_Init+0x74>)
 8000884:	f003 fa44 	bl	8003d10 <HAL_I2C_Init>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800088e:	f000 f9c5 	bl	8000c1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000892:	2100      	movs	r1, #0
 8000894:	4809      	ldr	r0, [pc, #36]	; (80008bc <MX_I2C3_Init+0x74>)
 8000896:	f003 fad6 	bl	8003e46 <HAL_I2CEx_ConfigAnalogFilter>
 800089a:	4603      	mov	r3, r0
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80008a0:	f000 f9bc 	bl	8000c1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008a4:	2100      	movs	r1, #0
 80008a6:	4805      	ldr	r0, [pc, #20]	; (80008bc <MX_I2C3_Init+0x74>)
 80008a8:	f003 fb18 	bl	8003edc <HAL_I2CEx_ConfigDigitalFilter>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80008b2:	f000 f9b3 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000540 	.word	0x20000540
 80008c0:	40007800 	.word	0x40007800
 80008c4:	40707eb4 	.word	0x40707eb4

080008c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08c      	sub	sp, #48	; 0x30
 80008cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ce:	f107 0320 	add.w	r3, r7, #32
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ec:	463b      	mov	r3, r7
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008f6:	4b28      	ldr	r3, [pc, #160]	; (8000998 <MX_TIM1_Init+0xd0>)
 80008f8:	4a28      	ldr	r2, [pc, #160]	; (800099c <MX_TIM1_Init+0xd4>)
 80008fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15600 - 1;
 80008fc:	4b26      	ldr	r3, [pc, #152]	; (8000998 <MX_TIM1_Init+0xd0>)
 80008fe:	f643 42ef 	movw	r2, #15599	; 0x3cef
 8000902:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000904:	4b24      	ldr	r3, [pc, #144]	; (8000998 <MX_TIM1_Init+0xd0>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800090a:	4b23      	ldr	r3, [pc, #140]	; (8000998 <MX_TIM1_Init+0xd0>)
 800090c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000910:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000912:	4b21      	ldr	r3, [pc, #132]	; (8000998 <MX_TIM1_Init+0xd0>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000918:	4b1f      	ldr	r3, [pc, #124]	; (8000998 <MX_TIM1_Init+0xd0>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091e:	4b1e      	ldr	r3, [pc, #120]	; (8000998 <MX_TIM1_Init+0xd0>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000924:	481c      	ldr	r0, [pc, #112]	; (8000998 <MX_TIM1_Init+0xd0>)
 8000926:	f006 f85d 	bl	80069e4 <HAL_TIM_Base_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000930:	f000 f974 	bl	8000c1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000934:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000938:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800093a:	f107 0320 	add.w	r3, r7, #32
 800093e:	4619      	mov	r1, r3
 8000940:	4815      	ldr	r0, [pc, #84]	; (8000998 <MX_TIM1_Init+0xd0>)
 8000942:	f006 fa6f 	bl	8006e24 <HAL_TIM_ConfigClockSource>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 800094c:	f000 f966 	bl	8000c1c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000950:	2300      	movs	r3, #0
 8000952:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000954:	2300      	movs	r3, #0
 8000956:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	4619      	mov	r1, r3
 800095e:	480e      	ldr	r0, [pc, #56]	; (8000998 <MX_TIM1_Init+0xd0>)
 8000960:	f006 fb76 	bl	8007050 <HAL_TIM_SlaveConfigSynchro>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800096a:	f000 f957 	bl	8000c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000976:	2300      	movs	r3, #0
 8000978:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800097a:	463b      	mov	r3, r7
 800097c:	4619      	mov	r1, r3
 800097e:	4806      	ldr	r0, [pc, #24]	; (8000998 <MX_TIM1_Init+0xd0>)
 8000980:	f006 fe0a 	bl	8007598 <HAL_TIMEx_MasterConfigSynchronization>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 800098a:	f000 f947 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	3730      	adds	r7, #48	; 0x30
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	20000594 	.word	0x20000594
 800099c:	40012c00 	.word	0x40012c00

080009a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08c      	sub	sp, #48	; 0x30
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009a6:	f107 0320 	add.w	r3, r7, #32
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009b4:	f107 030c 	add.w	r3, r7, #12
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c4:	463b      	mov	r3, r7
 80009c6:	2200      	movs	r2, #0
 80009c8:	601a      	str	r2, [r3, #0]
 80009ca:	605a      	str	r2, [r3, #4]
 80009cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ce:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <MX_TIM2_Init+0xc4>)
 80009d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 156 - 1;
 80009d6:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <MX_TIM2_Init+0xc4>)
 80009d8:	229b      	movs	r2, #155	; 0x9b
 80009da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009dc:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <MX_TIM2_Init+0xc4>)
 80009de:	2200      	movs	r2, #0
 80009e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80009e2:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <MX_TIM2_Init+0xc4>)
 80009e4:	2209      	movs	r2, #9
 80009e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009e8:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MX_TIM2_Init+0xc4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ee:	4b1d      	ldr	r3, [pc, #116]	; (8000a64 <MX_TIM2_Init+0xc4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009f4:	481b      	ldr	r0, [pc, #108]	; (8000a64 <MX_TIM2_Init+0xc4>)
 80009f6:	f005 fff5 	bl	80069e4 <HAL_TIM_Base_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000a00:	f000 f90c 	bl	8000c1c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a08:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a0a:	f107 0320 	add.w	r3, r7, #32
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4814      	ldr	r0, [pc, #80]	; (8000a64 <MX_TIM2_Init+0xc4>)
 8000a12:	f006 fa07 	bl	8006e24 <HAL_TIM_ConfigClockSource>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000a1c:	f000 f8fe 	bl	8000c1c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000a20:	2300      	movs	r3, #0
 8000a22:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000a24:	2310      	movs	r3, #16
 8000a26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	480d      	ldr	r0, [pc, #52]	; (8000a64 <MX_TIM2_Init+0xc4>)
 8000a30:	f006 fb0e 	bl	8007050 <HAL_TIM_SlaveConfigSynchro>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000a3a:	f000 f8ef 	bl	8000c1c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000a3e:	2320      	movs	r3, #32
 8000a40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a42:	2300      	movs	r3, #0
 8000a44:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a46:	463b      	mov	r3, r7
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4806      	ldr	r0, [pc, #24]	; (8000a64 <MX_TIM2_Init+0xc4>)
 8000a4c:	f006 fda4 	bl	8007598 <HAL_TIMEx_MasterConfigSynchronization>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000a56:	f000 f8e1 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	3730      	adds	r7, #48	; 0x30
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200005e0 	.word	0x200005e0

08000a68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <MX_DMA_Init+0x80>)
 8000a70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a72:	4a1d      	ldr	r2, [pc, #116]	; (8000ae8 <MX_DMA_Init+0x80>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	6493      	str	r3, [r2, #72]	; 0x48
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <MX_DMA_Init+0x80>)
 8000a7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	607b      	str	r3, [r7, #4]
 8000a84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a86:	4b18      	ldr	r3, [pc, #96]	; (8000ae8 <MX_DMA_Init+0x80>)
 8000a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a8a:	4a17      	ldr	r2, [pc, #92]	; (8000ae8 <MX_DMA_Init+0x80>)
 8000a8c:	f043 0301 	orr.w	r3, r3, #1
 8000a90:	6493      	str	r3, [r2, #72]	; 0x48
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <MX_DMA_Init+0x80>)
 8000a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a96:	f003 0301 	and.w	r3, r3, #1
 8000a9a:	603b      	str	r3, [r7, #0]
 8000a9c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	200b      	movs	r0, #11
 8000aa4:	f002 fb19 	bl	80030da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000aa8:	200b      	movs	r0, #11
 8000aaa:	f002 fb30 	bl	800310e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000aae:	2200      	movs	r2, #0
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	200c      	movs	r0, #12
 8000ab4:	f002 fb11 	bl	80030da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ab8:	200c      	movs	r0, #12
 8000aba:	f002 fb28 	bl	800310e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	200d      	movs	r0, #13
 8000ac4:	f002 fb09 	bl	80030da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000ac8:	200d      	movs	r0, #13
 8000aca:	f002 fb20 	bl	800310e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	200e      	movs	r0, #14
 8000ad4:	f002 fb01 	bl	80030da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000ad8:	200e      	movs	r0, #14
 8000ada:	f002 fb18 	bl	800310e <HAL_NVIC_EnableIRQ>

}
 8000ade:	bf00      	nop
 8000ae0:	3708      	adds	r7, #8
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40021000 	.word	0x40021000

08000aec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	; 0x28
 8000af0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	2200      	movs	r2, #0
 8000af8:	601a      	str	r2, [r3, #0]
 8000afa:	605a      	str	r2, [r3, #4]
 8000afc:	609a      	str	r2, [r3, #8]
 8000afe:	60da      	str	r2, [r3, #12]
 8000b00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b02:	4b43      	ldr	r3, [pc, #268]	; (8000c10 <MX_GPIO_Init+0x124>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b06:	4a42      	ldr	r2, [pc, #264]	; (8000c10 <MX_GPIO_Init+0x124>)
 8000b08:	f043 0320 	orr.w	r3, r3, #32
 8000b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0e:	4b40      	ldr	r3, [pc, #256]	; (8000c10 <MX_GPIO_Init+0x124>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b12:	f003 0320 	and.w	r3, r3, #32
 8000b16:	613b      	str	r3, [r7, #16]
 8000b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b1a:	4b3d      	ldr	r3, [pc, #244]	; (8000c10 <MX_GPIO_Init+0x124>)
 8000b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1e:	4a3c      	ldr	r2, [pc, #240]	; (8000c10 <MX_GPIO_Init+0x124>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b26:	4b3a      	ldr	r3, [pc, #232]	; (8000c10 <MX_GPIO_Init+0x124>)
 8000b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b32:	4b37      	ldr	r3, [pc, #220]	; (8000c10 <MX_GPIO_Init+0x124>)
 8000b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b36:	4a36      	ldr	r2, [pc, #216]	; (8000c10 <MX_GPIO_Init+0x124>)
 8000b38:	f043 0302 	orr.w	r3, r3, #2
 8000b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b3e:	4b34      	ldr	r3, [pc, #208]	; (8000c10 <MX_GPIO_Init+0x124>)
 8000b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b42:	f003 0302 	and.w	r3, r3, #2
 8000b46:	60bb      	str	r3, [r7, #8]
 8000b48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4a:	4b31      	ldr	r3, [pc, #196]	; (8000c10 <MX_GPIO_Init+0x124>)
 8000b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b4e:	4a30      	ldr	r2, [pc, #192]	; (8000c10 <MX_GPIO_Init+0x124>)
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b56:	4b2e      	ldr	r3, [pc, #184]	; (8000c10 <MX_GPIO_Init+0x124>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	f003 0304 	and.w	r3, r3, #4
 8000b5e:	607b      	str	r3, [r7, #4]
 8000b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ERRATA_FIX1_Pin|ERRATA_FIX2_Pin|ERRATA_FIX3_Pin|ERRATA_FIX4_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 41d8 	mov.w	r1, #27648	; 0x6c00
 8000b68:	482a      	ldr	r0, [pc, #168]	; (8000c14 <MX_GPIO_Init+0x128>)
 8000b6a:	f003 f8b9 	bl	8003ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IND_LED_R_Pin|IND_LED_G_Pin|IND_LED_B_Pin, GPIO_PIN_SET);
 8000b6e:	2201      	movs	r2, #1
 8000b70:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000b74:	4828      	ldr	r0, [pc, #160]	; (8000c18 <MX_GPIO_Init+0x12c>)
 8000b76:	f003 f8b3 	bl	8003ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ERRATA_FIX1_Pin ERRATA_FIX2_Pin ERRATA_FIX3_Pin ERRATA_FIX4_Pin */
  GPIO_InitStruct.Pin = ERRATA_FIX1_Pin|ERRATA_FIX2_Pin|ERRATA_FIX3_Pin|ERRATA_FIX4_Pin;
 8000b7a:	f44f 43d8 	mov.w	r3, #27648	; 0x6c00
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b80:	2301      	movs	r3, #1
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4619      	mov	r1, r3
 8000b92:	4820      	ldr	r0, [pc, #128]	; (8000c14 <MX_GPIO_Init+0x128>)
 8000b94:	f002 ff22 	bl	80039dc <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_ALERT_Pin */
  GPIO_InitStruct.Pin = TEMP_ALERT_Pin;
 8000b98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_ALERT_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb0:	f002 ff14 	bl	80039dc <HAL_GPIO_Init>

  /*Configure GPIO pins : IND_LED_R_Pin IND_LED_G_Pin IND_LED_B_Pin */
  GPIO_InitStruct.Pin = IND_LED_R_Pin|IND_LED_G_Pin|IND_LED_B_Pin;
 8000bb4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000bb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4812      	ldr	r0, [pc, #72]	; (8000c18 <MX_GPIO_Init+0x12c>)
 8000bce:	f002 ff05 	bl	80039dc <HAL_GPIO_Init>

  /*Configure GPIO pins : TRIG_SHORT_Pin TRIG_EXT_2_Pin */
  GPIO_InitStruct.Pin = TRIG_SHORT_Pin|TRIG_EXT_2_Pin;
 8000bd2:	2360      	movs	r3, #96	; 0x60
 8000bd4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bd6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	480b      	ldr	r0, [pc, #44]	; (8000c14 <MX_GPIO_Init+0x128>)
 8000be8:	f002 fef8 	bl	80039dc <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_EXT_1_Pin */
  GPIO_InitStruct.Pin = TRIG_EXT_1_Pin;
 8000bec:	2380      	movs	r3, #128	; 0x80
 8000bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bf0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_EXT_1_GPIO_Port, &GPIO_InitStruct);
 8000bfa:	f107 0314 	add.w	r3, r7, #20
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4804      	ldr	r0, [pc, #16]	; (8000c14 <MX_GPIO_Init+0x128>)
 8000c02:	f002 feeb 	bl	80039dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c06:	bf00      	nop
 8000c08:	3728      	adds	r7, #40	; 0x28
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000
 8000c14:	48000400 	.word	0x48000400
 8000c18:	48000800 	.word	0x48000800

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c24:	e7fe      	b.n	8000c24 <Error_Handler+0x8>
	...

08000c28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c2e:	4b13      	ldr	r3, [pc, #76]	; (8000c7c <HAL_MspInit+0x54>)
 8000c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <HAL_MspInit+0x54>)
 8000c34:	f043 0301 	orr.w	r3, r3, #1
 8000c38:	6613      	str	r3, [r2, #96]	; 0x60
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <HAL_MspInit+0x54>)
 8000c3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	607b      	str	r3, [r7, #4]
 8000c44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c46:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <HAL_MspInit+0x54>)
 8000c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4a:	4a0c      	ldr	r2, [pc, #48]	; (8000c7c <HAL_MspInit+0x54>)
 8000c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c50:	6593      	str	r3, [r2, #88]	; 0x58
 8000c52:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <HAL_MspInit+0x54>)
 8000c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c5a:	603b      	str	r3, [r7, #0]
 8000c5c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0);
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 fc9c 	bl	800159c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8000c64:	f000 fcc2 	bl	80015ec <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f000 fcab 	bl	80015c4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c6e:	f004 ff59 	bl	8005b24 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000

08000c80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0a4      	sub	sp, #144	; 0x90
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c9c:	2254      	movs	r2, #84	; 0x54
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f00b fae8 	bl	800c276 <memset>
  if(hadc->Instance==ADC1)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cae:	d16b      	bne.n	8000d88 <HAL_ADC_MspInit+0x108>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000cb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000cb6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cba:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f005 fc41 	bl	8006548 <HAL_RCCEx_PeriphCLKConfig>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000ccc:	f7ff ffa6 	bl	8000c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000cd0:	4b9e      	ldr	r3, [pc, #632]	; (8000f4c <HAL_ADC_MspInit+0x2cc>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	4a9d      	ldr	r2, [pc, #628]	; (8000f4c <HAL_ADC_MspInit+0x2cc>)
 8000cd8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000cda:	4b9c      	ldr	r3, [pc, #624]	; (8000f4c <HAL_ADC_MspInit+0x2cc>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d10b      	bne.n	8000cfa <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ce2:	4b9b      	ldr	r3, [pc, #620]	; (8000f50 <HAL_ADC_MspInit+0x2d0>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	4a9a      	ldr	r2, [pc, #616]	; (8000f50 <HAL_ADC_MspInit+0x2d0>)
 8000ce8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cee:	4b98      	ldr	r3, [pc, #608]	; (8000f50 <HAL_ADC_MspInit+0x2d0>)
 8000cf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	4b95      	ldr	r3, [pc, #596]	; (8000f50 <HAL_ADC_MspInit+0x2d0>)
 8000cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfe:	4a94      	ldr	r2, [pc, #592]	; (8000f50 <HAL_ADC_MspInit+0x2d0>)
 8000d00:	f043 0301 	orr.w	r3, r3, #1
 8000d04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d06:	4b92      	ldr	r3, [pc, #584]	; (8000f50 <HAL_ADC_MspInit+0x2d0>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	f003 0301 	and.w	r3, r3, #1
 8000d0e:	623b      	str	r3, [r7, #32]
 8000d10:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d12:	2301      	movs	r3, #1
 8000d14:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d16:	2303      	movs	r3, #3
 8000d18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d22:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000d26:	4619      	mov	r1, r3
 8000d28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d2c:	f002 fe56 	bl	80039dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d30:	4b88      	ldr	r3, [pc, #544]	; (8000f54 <HAL_ADC_MspInit+0x2d4>)
 8000d32:	4a89      	ldr	r2, [pc, #548]	; (8000f58 <HAL_ADC_MspInit+0x2d8>)
 8000d34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000d36:	4b87      	ldr	r3, [pc, #540]	; (8000f54 <HAL_ADC_MspInit+0x2d4>)
 8000d38:	2205      	movs	r2, #5
 8000d3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d3c:	4b85      	ldr	r3, [pc, #532]	; (8000f54 <HAL_ADC_MspInit+0x2d4>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d42:	4b84      	ldr	r3, [pc, #528]	; (8000f54 <HAL_ADC_MspInit+0x2d4>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d48:	4b82      	ldr	r3, [pc, #520]	; (8000f54 <HAL_ADC_MspInit+0x2d4>)
 8000d4a:	2280      	movs	r2, #128	; 0x80
 8000d4c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d4e:	4b81      	ldr	r3, [pc, #516]	; (8000f54 <HAL_ADC_MspInit+0x2d4>)
 8000d50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d54:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d56:	4b7f      	ldr	r3, [pc, #508]	; (8000f54 <HAL_ADC_MspInit+0x2d4>)
 8000d58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d5c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d5e:	4b7d      	ldr	r3, [pc, #500]	; (8000f54 <HAL_ADC_MspInit+0x2d4>)
 8000d60:	2220      	movs	r2, #32
 8000d62:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d64:	4b7b      	ldr	r3, [pc, #492]	; (8000f54 <HAL_ADC_MspInit+0x2d4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d6a:	487a      	ldr	r0, [pc, #488]	; (8000f54 <HAL_ADC_MspInit+0x2d4>)
 8000d6c:	f002 fbc4 	bl	80034f8 <HAL_DMA_Init>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000d76:	f7ff ff51 	bl	8000c1c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a75      	ldr	r2, [pc, #468]	; (8000f54 <HAL_ADC_MspInit+0x2d4>)
 8000d7e:	655a      	str	r2, [r3, #84]	; 0x54
 8000d80:	4a74      	ldr	r2, [pc, #464]	; (8000f54 <HAL_ADC_MspInit+0x2d4>)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8000d86:	e169      	b.n	800105c <HAL_ADC_MspInit+0x3dc>
  else if(hadc->Instance==ADC2)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a73      	ldr	r2, [pc, #460]	; (8000f5c <HAL_ADC_MspInit+0x2dc>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d16b      	bne.n	8000e6a <HAL_ADC_MspInit+0x1ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8000d98:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000da2:	4618      	mov	r0, r3
 8000da4:	f005 fbd0 	bl	8006548 <HAL_RCCEx_PeriphCLKConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_ADC_MspInit+0x132>
      Error_Handler();
 8000dae:	f7ff ff35 	bl	8000c1c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000db2:	4b66      	ldr	r3, [pc, #408]	; (8000f4c <HAL_ADC_MspInit+0x2cc>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	3301      	adds	r3, #1
 8000db8:	4a64      	ldr	r2, [pc, #400]	; (8000f4c <HAL_ADC_MspInit+0x2cc>)
 8000dba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000dbc:	4b63      	ldr	r3, [pc, #396]	; (8000f4c <HAL_ADC_MspInit+0x2cc>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d10b      	bne.n	8000ddc <HAL_ADC_MspInit+0x15c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000dc4:	4b62      	ldr	r3, [pc, #392]	; (8000f50 <HAL_ADC_MspInit+0x2d0>)
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc8:	4a61      	ldr	r2, [pc, #388]	; (8000f50 <HAL_ADC_MspInit+0x2d0>)
 8000dca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd0:	4b5f      	ldr	r3, [pc, #380]	; (8000f50 <HAL_ADC_MspInit+0x2d0>)
 8000dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dd8:	61fb      	str	r3, [r7, #28]
 8000dda:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ddc:	4b5c      	ldr	r3, [pc, #368]	; (8000f50 <HAL_ADC_MspInit+0x2d0>)
 8000dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de0:	4a5b      	ldr	r2, [pc, #364]	; (8000f50 <HAL_ADC_MspInit+0x2d0>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de8:	4b59      	ldr	r3, [pc, #356]	; (8000f50 <HAL_ADC_MspInit+0x2d0>)
 8000dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	61bb      	str	r3, [r7, #24]
 8000df2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000df4:	2340      	movs	r3, #64	; 0x40
 8000df6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0e:	f002 fde5 	bl	80039dc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000e12:	4b53      	ldr	r3, [pc, #332]	; (8000f60 <HAL_ADC_MspInit+0x2e0>)
 8000e14:	4a53      	ldr	r2, [pc, #332]	; (8000f64 <HAL_ADC_MspInit+0x2e4>)
 8000e16:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000e18:	4b51      	ldr	r3, [pc, #324]	; (8000f60 <HAL_ADC_MspInit+0x2e0>)
 8000e1a:	2224      	movs	r2, #36	; 0x24
 8000e1c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e1e:	4b50      	ldr	r3, [pc, #320]	; (8000f60 <HAL_ADC_MspInit+0x2e0>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e24:	4b4e      	ldr	r3, [pc, #312]	; (8000f60 <HAL_ADC_MspInit+0x2e0>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000e2a:	4b4d      	ldr	r3, [pc, #308]	; (8000f60 <HAL_ADC_MspInit+0x2e0>)
 8000e2c:	2280      	movs	r2, #128	; 0x80
 8000e2e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e30:	4b4b      	ldr	r3, [pc, #300]	; (8000f60 <HAL_ADC_MspInit+0x2e0>)
 8000e32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e36:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e38:	4b49      	ldr	r3, [pc, #292]	; (8000f60 <HAL_ADC_MspInit+0x2e0>)
 8000e3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e3e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000e40:	4b47      	ldr	r3, [pc, #284]	; (8000f60 <HAL_ADC_MspInit+0x2e0>)
 8000e42:	2220      	movs	r2, #32
 8000e44:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000e46:	4b46      	ldr	r3, [pc, #280]	; (8000f60 <HAL_ADC_MspInit+0x2e0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000e4c:	4844      	ldr	r0, [pc, #272]	; (8000f60 <HAL_ADC_MspInit+0x2e0>)
 8000e4e:	f002 fb53 	bl	80034f8 <HAL_DMA_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_ADC_MspInit+0x1dc>
      Error_Handler();
 8000e58:	f7ff fee0 	bl	8000c1c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a40      	ldr	r2, [pc, #256]	; (8000f60 <HAL_ADC_MspInit+0x2e0>)
 8000e60:	655a      	str	r2, [r3, #84]	; 0x54
 8000e62:	4a3f      	ldr	r2, [pc, #252]	; (8000f60 <HAL_ADC_MspInit+0x2e0>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000e68:	e0f8      	b.n	800105c <HAL_ADC_MspInit+0x3dc>
  else if(hadc->Instance==ADC3)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a3e      	ldr	r2, [pc, #248]	; (8000f68 <HAL_ADC_MspInit+0x2e8>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	f040 8083 	bne.w	8000f7c <HAL_ADC_MspInit+0x2fc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000e76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e7a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8000e7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e80:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e86:	4618      	mov	r0, r3
 8000e88:	f005 fb5e 	bl	8006548 <HAL_RCCEx_PeriphCLKConfig>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_ADC_MspInit+0x216>
      Error_Handler();
 8000e92:	f7ff fec3 	bl	8000c1c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000e96:	4b35      	ldr	r3, [pc, #212]	; (8000f6c <HAL_ADC_MspInit+0x2ec>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	3301      	adds	r3, #1
 8000e9c:	4a33      	ldr	r2, [pc, #204]	; (8000f6c <HAL_ADC_MspInit+0x2ec>)
 8000e9e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000ea0:	4b32      	ldr	r3, [pc, #200]	; (8000f6c <HAL_ADC_MspInit+0x2ec>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d10b      	bne.n	8000ec0 <HAL_ADC_MspInit+0x240>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000ea8:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <HAL_ADC_MspInit+0x2d0>)
 8000eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eac:	4a28      	ldr	r2, [pc, #160]	; (8000f50 <HAL_ADC_MspInit+0x2d0>)
 8000eae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb4:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <HAL_ADC_MspInit+0x2d0>)
 8000eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ebc:	617b      	str	r3, [r7, #20]
 8000ebe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec0:	4b23      	ldr	r3, [pc, #140]	; (8000f50 <HAL_ADC_MspInit+0x2d0>)
 8000ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec4:	4a22      	ldr	r2, [pc, #136]	; (8000f50 <HAL_ADC_MspInit+0x2d0>)
 8000ec6:	f043 0302 	orr.w	r3, r3, #2
 8000eca:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ecc:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <HAL_ADC_MspInit+0x2d0>)
 8000ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed0:	f003 0302 	and.w	r3, r3, #2
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ed8:	2302      	movs	r3, #2
 8000eda:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000edc:	2303      	movs	r3, #3
 8000ede:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000eec:	4619      	mov	r1, r3
 8000eee:	4820      	ldr	r0, [pc, #128]	; (8000f70 <HAL_ADC_MspInit+0x2f0>)
 8000ef0:	f002 fd74 	bl	80039dc <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <HAL_ADC_MspInit+0x2f4>)
 8000ef6:	4a20      	ldr	r2, [pc, #128]	; (8000f78 <HAL_ADC_MspInit+0x2f8>)
 8000ef8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <HAL_ADC_MspInit+0x2f4>)
 8000efc:	2225      	movs	r2, #37	; 0x25
 8000efe:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <HAL_ADC_MspInit+0x2f4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f06:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <HAL_ADC_MspInit+0x2f4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <HAL_ADC_MspInit+0x2f4>)
 8000f0e:	2280      	movs	r2, #128	; 0x80
 8000f10:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <HAL_ADC_MspInit+0x2f4>)
 8000f14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f18:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <HAL_ADC_MspInit+0x2f4>)
 8000f1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f20:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <HAL_ADC_MspInit+0x2f4>)
 8000f24:	2220      	movs	r2, #32
 8000f26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <HAL_ADC_MspInit+0x2f4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000f2e:	4811      	ldr	r0, [pc, #68]	; (8000f74 <HAL_ADC_MspInit+0x2f4>)
 8000f30:	f002 fae2 	bl	80034f8 <HAL_DMA_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_ADC_MspInit+0x2be>
      Error_Handler();
 8000f3a:	f7ff fe6f 	bl	8000c1c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a0c      	ldr	r2, [pc, #48]	; (8000f74 <HAL_ADC_MspInit+0x2f4>)
 8000f42:	655a      	str	r2, [r3, #84]	; 0x54
 8000f44:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <HAL_ADC_MspInit+0x2f4>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000f4a:	e087      	b.n	800105c <HAL_ADC_MspInit+0x3dc>
 8000f4c:	200044b0 	.word	0x200044b0
 8000f50:	40021000 	.word	0x40021000
 8000f54:	200003ac 	.word	0x200003ac
 8000f58:	40020008 	.word	0x40020008
 8000f5c:	50000100 	.word	0x50000100
 8000f60:	2000040c 	.word	0x2000040c
 8000f64:	4002001c 	.word	0x4002001c
 8000f68:	50000400 	.word	0x50000400
 8000f6c:	200044b4 	.word	0x200044b4
 8000f70:	48000400 	.word	0x48000400
 8000f74:	2000046c 	.word	0x2000046c
 8000f78:	40020030 	.word	0x40020030
  else if(hadc->Instance==ADC4)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a38      	ldr	r2, [pc, #224]	; (8001064 <HAL_ADC_MspInit+0x3e4>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d16a      	bne.n	800105c <HAL_ADC_MspInit+0x3dc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8000f86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8000f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f90:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f96:	4618      	mov	r0, r3
 8000f98:	f005 fad6 	bl	8006548 <HAL_RCCEx_PeriphCLKConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <HAL_ADC_MspInit+0x326>
      Error_Handler();
 8000fa2:	f7ff fe3b 	bl	8000c1c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8000fa6:	4b30      	ldr	r3, [pc, #192]	; (8001068 <HAL_ADC_MspInit+0x3e8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	3301      	adds	r3, #1
 8000fac:	4a2e      	ldr	r2, [pc, #184]	; (8001068 <HAL_ADC_MspInit+0x3e8>)
 8000fae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8000fb0:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <HAL_ADC_MspInit+0x3e8>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d10b      	bne.n	8000fd0 <HAL_ADC_MspInit+0x350>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8000fb8:	4b2c      	ldr	r3, [pc, #176]	; (800106c <HAL_ADC_MspInit+0x3ec>)
 8000fba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbc:	4a2b      	ldr	r2, [pc, #172]	; (800106c <HAL_ADC_MspInit+0x3ec>)
 8000fbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fc4:	4b29      	ldr	r3, [pc, #164]	; (800106c <HAL_ADC_MspInit+0x3ec>)
 8000fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd0:	4b26      	ldr	r3, [pc, #152]	; (800106c <HAL_ADC_MspInit+0x3ec>)
 8000fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd4:	4a25      	ldr	r2, [pc, #148]	; (800106c <HAL_ADC_MspInit+0x3ec>)
 8000fd6:	f043 0302 	orr.w	r3, r3, #2
 8000fda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fdc:	4b23      	ldr	r3, [pc, #140]	; (800106c <HAL_ADC_MspInit+0x3ec>)
 8000fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000fe8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fec:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ffe:	4619      	mov	r1, r3
 8001000:	481b      	ldr	r0, [pc, #108]	; (8001070 <HAL_ADC_MspInit+0x3f0>)
 8001002:	f002 fceb 	bl	80039dc <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8001006:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <HAL_ADC_MspInit+0x3f4>)
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <HAL_ADC_MspInit+0x3f8>)
 800100a:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <HAL_ADC_MspInit+0x3f4>)
 800100e:	2226      	movs	r2, #38	; 0x26
 8001010:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <HAL_ADC_MspInit+0x3f4>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001018:	4b16      	ldr	r3, [pc, #88]	; (8001074 <HAL_ADC_MspInit+0x3f4>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <HAL_ADC_MspInit+0x3f4>)
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001024:	4b13      	ldr	r3, [pc, #76]	; (8001074 <HAL_ADC_MspInit+0x3f4>)
 8001026:	f44f 7280 	mov.w	r2, #256	; 0x100
 800102a:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800102c:	4b11      	ldr	r3, [pc, #68]	; (8001074 <HAL_ADC_MspInit+0x3f4>)
 800102e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001032:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <HAL_ADC_MspInit+0x3f4>)
 8001036:	2220      	movs	r2, #32
 8001038:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 800103a:	4b0e      	ldr	r3, [pc, #56]	; (8001074 <HAL_ADC_MspInit+0x3f4>)
 800103c:	2200      	movs	r2, #0
 800103e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8001040:	480c      	ldr	r0, [pc, #48]	; (8001074 <HAL_ADC_MspInit+0x3f4>)
 8001042:	f002 fa59 	bl	80034f8 <HAL_DMA_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <HAL_ADC_MspInit+0x3d0>
      Error_Handler();
 800104c:	f7ff fde6 	bl	8000c1c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	4a08      	ldr	r2, [pc, #32]	; (8001074 <HAL_ADC_MspInit+0x3f4>)
 8001054:	655a      	str	r2, [r3, #84]	; 0x54
 8001056:	4a07      	ldr	r2, [pc, #28]	; (8001074 <HAL_ADC_MspInit+0x3f4>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800105c:	bf00      	nop
 800105e:	3790      	adds	r7, #144	; 0x90
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	50000500 	.word	0x50000500
 8001068:	200044b4 	.word	0x200044b4
 800106c:	40021000 	.word	0x40021000
 8001070:	48000400 	.word	0x48000400
 8001074:	200004cc 	.word	0x200004cc
 8001078:	40020044 	.word	0x40020044

0800107c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a15      	ldr	r2, [pc, #84]	; (80010f0 <HAL_DAC_MspInit+0x74>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d124      	bne.n	80010e8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <HAL_DAC_MspInit+0x78>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <HAL_DAC_MspInit+0x78>)
 80010a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <HAL_DAC_MspInit+0x78>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <HAL_DAC_MspInit+0x78>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	4a0e      	ldr	r2, [pc, #56]	; (80010f4 <HAL_DAC_MspInit+0x78>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <HAL_DAC_MspInit+0x78>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	60fb      	str	r3, [r7, #12]
 80010cc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80010ce:	2310      	movs	r3, #16
 80010d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010d2:	2303      	movs	r3, #3
 80010d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e4:	f002 fc7a 	bl	80039dc <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	; 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	50000800 	.word	0x50000800
 80010f4:	40021000 	.word	0x40021000

080010f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b09e      	sub	sp, #120	; 0x78
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	2254      	movs	r2, #84	; 0x54
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f00b f8ac 	bl	800c276 <memset>
  if(hi2c->Instance==I2C3)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4a1f      	ldr	r2, [pc, #124]	; (80011a0 <HAL_I2C_MspInit+0xa8>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d137      	bne.n	8001198 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800112c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800112e:	2300      	movs	r3, #0
 8001130:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001132:	f107 0310 	add.w	r3, r7, #16
 8001136:	4618      	mov	r0, r3
 8001138:	f005 fa06 	bl	8006548 <HAL_RCCEx_PeriphCLKConfig>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001142:	f7ff fd6b 	bl	8000c1c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <HAL_I2C_MspInit+0xac>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	4a16      	ldr	r2, [pc, #88]	; (80011a4 <HAL_I2C_MspInit+0xac>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <HAL_I2C_MspInit+0xac>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = TEMP_SCL_Pin|TEMP_SDA_Pin;
 800115e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001162:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001164:	2312      	movs	r3, #18
 8001166:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8001170:	2308      	movs	r3, #8
 8001172:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001174:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001178:	4619      	mov	r1, r3
 800117a:	480b      	ldr	r0, [pc, #44]	; (80011a8 <HAL_I2C_MspInit+0xb0>)
 800117c:	f002 fc2e 	bl	80039dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <HAL_I2C_MspInit+0xac>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001184:	4a07      	ldr	r2, [pc, #28]	; (80011a4 <HAL_I2C_MspInit+0xac>)
 8001186:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800118a:	6593      	str	r3, [r2, #88]	; 0x58
 800118c:	4b05      	ldr	r3, [pc, #20]	; (80011a4 <HAL_I2C_MspInit+0xac>)
 800118e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001190:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001198:	bf00      	nop
 800119a:	3778      	adds	r7, #120	; 0x78
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	40007800 	.word	0x40007800
 80011a4:	40021000 	.word	0x40021000
 80011a8:	48000800 	.word	0x48000800

080011ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a16      	ldr	r2, [pc, #88]	; (8001214 <HAL_TIM_Base_MspInit+0x68>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d114      	bne.n	80011e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011be:	4b16      	ldr	r3, [pc, #88]	; (8001218 <HAL_TIM_Base_MspInit+0x6c>)
 80011c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c2:	4a15      	ldr	r2, [pc, #84]	; (8001218 <HAL_TIM_Base_MspInit+0x6c>)
 80011c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011c8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <HAL_TIM_Base_MspInit+0x6c>)
 80011cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	201b      	movs	r0, #27
 80011dc:	f001 ff7d 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80011e0:	201b      	movs	r0, #27
 80011e2:	f001 ff94 	bl	800310e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011e6:	e010      	b.n	800120a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011f0:	d10b      	bne.n	800120a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_TIM_Base_MspInit+0x6c>)
 80011f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011f6:	4a08      	ldr	r2, [pc, #32]	; (8001218 <HAL_TIM_Base_MspInit+0x6c>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6593      	str	r3, [r2, #88]	; 0x58
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <HAL_TIM_Base_MspInit+0x6c>)
 8001200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
}
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40012c00 	.word	0x40012c00
 8001218:	40021000 	.word	0x40021000

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001220:	e7fe      	b.n	8001220 <NMI_Handler+0x4>

08001222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <MemManage_Handler+0x4>

0800122e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <UsageFault_Handler+0x4>

0800123a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001256:	b480      	push	{r7}
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001268:	f000 f97a 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}

08001270 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001274:	4802      	ldr	r0, [pc, #8]	; (8001280 <DMA1_Channel1_IRQHandler+0x10>)
 8001276:	f002 fa62 	bl	800373e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800127a:	bf00      	nop
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	200003ac 	.word	0x200003ac

08001284 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001288:	4802      	ldr	r0, [pc, #8]	; (8001294 <DMA1_Channel2_IRQHandler+0x10>)
 800128a:	f002 fa58 	bl	800373e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000040c 	.word	0x2000040c

08001298 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800129c:	4802      	ldr	r0, [pc, #8]	; (80012a8 <DMA1_Channel3_IRQHandler+0x10>)
 800129e:	f002 fa4e 	bl	800373e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	2000046c 	.word	0x2000046c

080012ac <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 80012b0:	4802      	ldr	r0, [pc, #8]	; (80012bc <DMA1_Channel4_IRQHandler+0x10>)
 80012b2:	f002 fa44 	bl	800373e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200004cc 	.word	0x200004cc

080012c0 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <USB_HP_IRQHandler+0x10>)
 80012c6:	f002 ff45 	bl	8004154 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20005994 	.word	0x20005994

080012d4 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <USB_LP_IRQHandler+0x10>)
 80012da:	f002 ff3b 	bl	8004154 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20005994 	.word	0x20005994

080012e8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <TIM1_CC_IRQHandler+0x10>)
 80012ee:	f005 fc49 	bl	8006b84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000594 	.word	0x20000594

080012fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b086      	sub	sp, #24
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
 800130c:	e00a      	b.n	8001324 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800130e:	f3af 8000 	nop.w
 8001312:	4601      	mov	r1, r0
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	1c5a      	adds	r2, r3, #1
 8001318:	60ba      	str	r2, [r7, #8]
 800131a:	b2ca      	uxtb	r2, r1
 800131c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3301      	adds	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697a      	ldr	r2, [r7, #20]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	429a      	cmp	r2, r3
 800132a:	dbf0      	blt.n	800130e <_read+0x12>
  }

  return len;
 800132c:	687b      	ldr	r3, [r7, #4]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b086      	sub	sp, #24
 800133a:	af00      	add	r7, sp, #0
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	e009      	b.n	800135c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	60ba      	str	r2, [r7, #8]
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	3301      	adds	r3, #1
 800135a:	617b      	str	r3, [r7, #20]
 800135c:	697a      	ldr	r2, [r7, #20]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	429a      	cmp	r2, r3
 8001362:	dbf1      	blt.n	8001348 <_write+0x12>
  }
  return len;
 8001364:	687b      	ldr	r3, [r7, #4]
}
 8001366:	4618      	mov	r0, r3
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <_close>:

int _close(int file)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
}
 800137a:	4618      	mov	r0, r3
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001386:	b480      	push	{r7}
 8001388:	b083      	sub	sp, #12
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001396:	605a      	str	r2, [r3, #4]
  return 0;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <_isatty>:

int _isatty(int file)
{
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013bc:	b480      	push	{r7}
 80013be:	b085      	sub	sp, #20
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e0:	4a14      	ldr	r2, [pc, #80]	; (8001434 <_sbrk+0x5c>)
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <_sbrk+0x60>)
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013ec:	4b13      	ldr	r3, [pc, #76]	; (800143c <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f4:	4b11      	ldr	r3, [pc, #68]	; (800143c <_sbrk+0x64>)
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <_sbrk+0x68>)
 80013f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	429a      	cmp	r2, r3
 8001406:	d207      	bcs.n	8001418 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001408:	f00a ff84 	bl	800c314 <__errno>
 800140c:	4603      	mov	r3, r0
 800140e:	220c      	movs	r2, #12
 8001410:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001412:	f04f 33ff 	mov.w	r3, #4294967295
 8001416:	e009      	b.n	800142c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001418:	4b08      	ldr	r3, [pc, #32]	; (800143c <_sbrk+0x64>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800141e:	4b07      	ldr	r3, [pc, #28]	; (800143c <_sbrk+0x64>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4413      	add	r3, r2
 8001426:	4a05      	ldr	r2, [pc, #20]	; (800143c <_sbrk+0x64>)
 8001428:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142a:	68fb      	ldr	r3, [r7, #12]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20020000 	.word	0x20020000
 8001438:	00001000 	.word	0x00001000
 800143c:	200044b8 	.word	0x200044b8
 8001440:	20005fe0 	.word	0x20005fe0

08001444 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <SystemInit+0x20>)
 800144a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800144e:	4a05      	ldr	r2, [pc, #20]	; (8001464 <SystemInit+0x20>)
 8001450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001468:	480d      	ldr	r0, [pc, #52]	; (80014a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800146a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 800146c:	f7ff ffea 	bl	8001444 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001472:	490d      	ldr	r1, [pc, #52]	; (80014a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001474:	4a0d      	ldr	r2, [pc, #52]	; (80014ac <LoopForever+0xe>)
  movs r3, #0
 8001476:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001478:	e002      	b.n	8001480 <LoopCopyDataInit>

0800147a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800147a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800147c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800147e:	3304      	adds	r3, #4

08001480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001484:	d3f9      	bcc.n	800147a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001488:	4c0a      	ldr	r4, [pc, #40]	; (80014b4 <LoopForever+0x16>)
  movs r3, #0
 800148a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800148c:	e001      	b.n	8001492 <LoopFillZerobss>

0800148e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800148e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001490:	3204      	adds	r2, #4

08001492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001494:	d3fb      	bcc.n	800148e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001496:	f00a ff43 	bl	800c320 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800149a:	f7fe ff11 	bl	80002c0 <main>

0800149e <LoopForever>:

LoopForever:
    b LoopForever
 800149e:	e7fe      	b.n	800149e <LoopForever>
  ldr   r0, =_estack
 80014a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014a8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80014ac:	0800cf70 	.word	0x0800cf70
  ldr r2, =_sbss
 80014b0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80014b4:	20005fdc 	.word	0x20005fdc

080014b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014b8:	e7fe      	b.n	80014b8 <ADC1_2_IRQHandler>

080014ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b082      	sub	sp, #8
 80014be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014c0:	2300      	movs	r3, #0
 80014c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014c4:	2003      	movs	r0, #3
 80014c6:	f001 fdfd 	bl	80030c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ca:	2000      	movs	r0, #0
 80014cc:	f000 f80e 	bl	80014ec <HAL_InitTick>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d002      	beq.n	80014dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	71fb      	strb	r3, [r7, #7]
 80014da:	e001      	b.n	80014e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014dc:	f7ff fba4 	bl	8000c28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014e0:	79fb      	ldrb	r3, [r7, #7]

}
 80014e2:	4618      	mov	r0, r3
 80014e4:	3708      	adds	r7, #8
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
	...

080014ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014f4:	2300      	movs	r3, #0
 80014f6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <HAL_InitTick+0x68>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d022      	beq.n	8001546 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001500:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_InitTick+0x6c>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_InitTick+0x68>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800150c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001510:	fbb2 f3f3 	udiv	r3, r2, r3
 8001514:	4618      	mov	r0, r3
 8001516:	f001 fe08 	bl	800312a <HAL_SYSTICK_Config>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d10f      	bne.n	8001540 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2b0f      	cmp	r3, #15
 8001524:	d809      	bhi.n	800153a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001526:	2200      	movs	r2, #0
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	f04f 30ff 	mov.w	r0, #4294967295
 800152e:	f001 fdd4 	bl	80030da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001532:	4a0a      	ldr	r2, [pc, #40]	; (800155c <HAL_InitTick+0x70>)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	e007      	b.n	800154a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	73fb      	strb	r3, [r7, #15]
 800153e:	e004      	b.n	800154a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	73fb      	strb	r3, [r7, #15]
 8001544:	e001      	b.n	800154a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800154a:	7bfb      	ldrb	r3, [r7, #15]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3710      	adds	r7, #16
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000008 	.word	0x20000008
 8001558:	20000000 	.word	0x20000000
 800155c:	20000004 	.word	0x20000004

08001560 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <HAL_IncTick+0x1c>)
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <HAL_IncTick+0x20>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4413      	add	r3, r2
 800156e:	4a03      	ldr	r2, [pc, #12]	; (800157c <HAL_IncTick+0x1c>)
 8001570:	6013      	str	r3, [r2, #0]
}
 8001572:	bf00      	nop
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	200044bc 	.word	0x200044bc
 8001580:	20000008 	.word	0x20000008

08001584 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return uwTick;
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <HAL_GetTick+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	200044bc 	.word	0x200044bc

0800159c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80015ac:	4904      	ldr	r1, [pc, #16]	; (80015c0 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	40010030 	.word	0x40010030

080015c4 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f023 0202 	bic.w	r2, r3, #2
 80015d4:	4904      	ldr	r1, [pc, #16]	; (80015e8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4313      	orrs	r3, r2
 80015da:	600b      	str	r3, [r1, #0]
}
 80015dc:	bf00      	nop
 80015de:	370c      	adds	r7, #12
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	40010030 	.word	0x40010030

080015ec <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 80015f2:	4b0f      	ldr	r3, [pc, #60]	; (8001630 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80015fe:	f7ff ffc1 	bl	8001584 <HAL_GetTick>
 8001602:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8001604:	e008      	b.n	8001618 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8001606:	f7ff ffbd 	bl	8001584 <HAL_GetTick>
 800160a:	4602      	mov	r2, r0
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	1ad3      	subs	r3, r2, r3
 8001610:	2b0a      	cmp	r3, #10
 8001612:	d901      	bls.n	8001618 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e006      	b.n	8001626 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0308 	and.w	r3, r3, #8
 8001620:	2b00      	cmp	r3, #0
 8001622:	d0f0      	beq.n	8001606 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40010030 	.word	0x40010030

08001634 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001634:	b480      	push	{r7}
 8001636:	b083      	sub	sp, #12
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	431a      	orrs	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	609a      	str	r2, [r3, #8]
}
 800164e:	bf00      	nop
 8001650:	370c      	adds	r7, #12
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
 8001662:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	609a      	str	r2, [r3, #8]
}
 8001674:	bf00      	nop
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001690:	4618      	mov	r0, r3
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800169c:	b480      	push	{r7}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
 80016a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	3360      	adds	r3, #96	; 0x60
 80016ae:	461a      	mov	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	4413      	add	r3, r2
 80016b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b08      	ldr	r3, [pc, #32]	; (80016e0 <LL_ADC_SetOffset+0x44>)
 80016be:	4013      	ands	r3, r2
 80016c0:	687a      	ldr	r2, [r7, #4]
 80016c2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	4313      	orrs	r3, r2
 80016cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80016d4:	bf00      	nop
 80016d6:	371c      	adds	r7, #28
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	03fff000 	.word	0x03fff000

080016e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3360      	adds	r3, #96	; 0x60
 80016f2:	461a      	mov	r2, r3
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001704:	4618      	mov	r0, r3
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001710:	b480      	push	{r7}
 8001712:	b087      	sub	sp, #28
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	3360      	adds	r3, #96	; 0x60
 8001720:	461a      	mov	r2, r3
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	431a      	orrs	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800173a:	bf00      	nop
 800173c:	371c      	adds	r7, #28
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr

08001746 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001746:	b480      	push	{r7}
 8001748:	b087      	sub	sp, #28
 800174a:	af00      	add	r7, sp, #0
 800174c:	60f8      	str	r0, [r7, #12]
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	3360      	adds	r3, #96	; 0x60
 8001756:	461a      	mov	r2, r3
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	4413      	add	r3, r2
 800175e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	431a      	orrs	r2, r3
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001770:	bf00      	nop
 8001772:	371c      	adds	r7, #28
 8001774:	46bd      	mov	sp, r7
 8001776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177a:	4770      	bx	lr

0800177c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800177c:	b480      	push	{r7}
 800177e:	b087      	sub	sp, #28
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	3360      	adds	r3, #96	; 0x60
 800178c:	461a      	mov	r2, r3
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4413      	add	r3, r2
 8001794:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	431a      	orrs	r2, r3
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80017a6:	bf00      	nop
 80017a8:	371c      	adds	r7, #28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
 80017ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	615a      	str	r2, [r3, #20]
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d101      	bne.n	80017f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80017ec:	2301      	movs	r3, #1
 80017ee:	e000      	b.n	80017f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80017f0:	2300      	movs	r3, #0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017fe:	b480      	push	{r7}
 8001800:	b087      	sub	sp, #28
 8001802:	af00      	add	r7, sp, #0
 8001804:	60f8      	str	r0, [r7, #12]
 8001806:	60b9      	str	r1, [r7, #8]
 8001808:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	3330      	adds	r3, #48	; 0x30
 800180e:	461a      	mov	r2, r3
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	0a1b      	lsrs	r3, r3, #8
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	4413      	add	r3, r2
 800181c:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	f003 031f 	and.w	r3, r3, #31
 8001828:	211f      	movs	r1, #31
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	401a      	ands	r2, r3
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	0e9b      	lsrs	r3, r3, #26
 8001836:	f003 011f 	and.w	r1, r3, #31
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	f003 031f 	and.w	r3, r3, #31
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	431a      	orrs	r2, r3
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800184a:	bf00      	nop
 800184c:	371c      	adds	r7, #28
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001856:	b480      	push	{r7}
 8001858:	b087      	sub	sp, #28
 800185a:	af00      	add	r7, sp, #0
 800185c:	60f8      	str	r0, [r7, #12]
 800185e:	60b9      	str	r1, [r7, #8]
 8001860:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	3314      	adds	r3, #20
 8001866:	461a      	mov	r2, r3
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	0e5b      	lsrs	r3, r3, #25
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	f003 0304 	and.w	r3, r3, #4
 8001872:	4413      	add	r3, r2
 8001874:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	0d1b      	lsrs	r3, r3, #20
 800187e:	f003 031f 	and.w	r3, r3, #31
 8001882:	2107      	movs	r1, #7
 8001884:	fa01 f303 	lsl.w	r3, r1, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	401a      	ands	r2, r3
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	0d1b      	lsrs	r3, r3, #20
 8001890:	f003 031f 	and.w	r3, r3, #31
 8001894:	6879      	ldr	r1, [r7, #4]
 8001896:	fa01 f303 	lsl.w	r3, r1, r3
 800189a:	431a      	orrs	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80018a0:	bf00      	nop
 80018a2:	371c      	adds	r7, #28
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018c4:	43db      	mvns	r3, r3
 80018c6:	401a      	ands	r2, r3
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f003 0318 	and.w	r3, r3, #24
 80018ce:	4908      	ldr	r1, [pc, #32]	; (80018f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80018d0:	40d9      	lsrs	r1, r3
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	400b      	ands	r3, r1
 80018d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80018da:	431a      	orrs	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80018e2:	bf00      	nop
 80018e4:	3714      	adds	r7, #20
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	0007ffff 	.word	0x0007ffff

080018f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 031f 	and.w	r3, r3, #31
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001920:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6093      	str	r3, [r2, #8]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001948:	d101      	bne.n	800194e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800194a:	2301      	movs	r3, #1
 800194c:	e000      	b.n	8001950 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800194e:	2300      	movs	r3, #0
}
 8001950:	4618      	mov	r0, r3
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800196c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001970:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001978:	bf00      	nop
 800197a:	370c      	adds	r7, #12
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	689b      	ldr	r3, [r3, #8]
 8001990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001994:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001998:	d101      	bne.n	800199e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800199e:	2300      	movs	r3, #0
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	370c      	adds	r7, #12
 80019a4:	46bd      	mov	sp, r7
 80019a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019aa:	4770      	bx	lr

080019ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b083      	sub	sp, #12
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019c0:	f043 0201 	orr.w	r2, r3, #1
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80019e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019e8:	f043 0202 	orr.w	r2, r3, #2
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <LL_ADC_IsEnabled+0x18>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <LL_ADC_IsEnabled+0x1a>
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr

08001a22 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8001a22:	b480      	push	{r7}
 8001a24:	b083      	sub	sp, #12
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d101      	bne.n	8001a3a <LL_ADC_IsDisableOngoing+0x18>
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <LL_ADC_IsDisableOngoing+0x1a>
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	370c      	adds	r7, #12
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001a58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001a5c:	f043 0204 	orr.w	r2, r3, #4
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001a64:	bf00      	nop
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d101      	bne.n	8001a88 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	370c      	adds	r7, #12
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr

08001a96 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b083      	sub	sp, #12
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b08      	cmp	r3, #8
 8001aa8:	d101      	bne.n	8001aae <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e000      	b.n	8001ab0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	370c      	adds	r7, #12
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001abc:	b590      	push	{r4, r7, lr}
 8001abe:	b089      	sub	sp, #36	; 0x24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e1a9      	b.n	8001e2a <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d109      	bne.n	8001af8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff f8cb 	bl	8000c80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f7ff ff19 	bl	8001934 <LL_ADC_IsDeepPowerDownEnabled>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d004      	beq.n	8001b12 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff feff 	bl	8001910 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff34 	bl	8001984 <LL_ADC_IsInternalRegulatorEnabled>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d115      	bne.n	8001b4e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff ff18 	bl	800195c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001b2c:	4b9c      	ldr	r3, [pc, #624]	; (8001da0 <HAL_ADC_Init+0x2e4>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	099b      	lsrs	r3, r3, #6
 8001b32:	4a9c      	ldr	r2, [pc, #624]	; (8001da4 <HAL_ADC_Init+0x2e8>)
 8001b34:	fba2 2303 	umull	r2, r3, r2, r3
 8001b38:	099b      	lsrs	r3, r3, #6
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b40:	e002      	b.n	8001b48 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f9      	bne.n	8001b42 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff ff16 	bl	8001984 <LL_ADC_IsInternalRegulatorEnabled>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10d      	bne.n	8001b7a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b62:	f043 0210 	orr.w	r2, r3, #16
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b6e:	f043 0201 	orr.w	r2, r3, #1
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ff76 	bl	8001a70 <LL_ADC_REG_IsConversionOngoing>
 8001b84:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	f040 8142 	bne.w	8001e18 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f040 813e 	bne.w	8001e18 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ba0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001ba4:	f043 0202 	orr.w	r2, r3, #2
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff ff23 	bl	80019fc <LL_ADC_IsEnabled>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d141      	bne.n	8001c40 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001bc4:	d004      	beq.n	8001bd0 <HAL_ADC_Init+0x114>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a77      	ldr	r2, [pc, #476]	; (8001da8 <HAL_ADC_Init+0x2ec>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d10f      	bne.n	8001bf0 <HAL_ADC_Init+0x134>
 8001bd0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001bd4:	f7ff ff12 	bl	80019fc <LL_ADC_IsEnabled>
 8001bd8:	4604      	mov	r4, r0
 8001bda:	4873      	ldr	r0, [pc, #460]	; (8001da8 <HAL_ADC_Init+0x2ec>)
 8001bdc:	f7ff ff0e 	bl	80019fc <LL_ADC_IsEnabled>
 8001be0:	4603      	mov	r3, r0
 8001be2:	4323      	orrs	r3, r4
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	bf0c      	ite	eq
 8001be8:	2301      	moveq	r3, #1
 8001bea:	2300      	movne	r3, #0
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	e012      	b.n	8001c16 <HAL_ADC_Init+0x15a>
 8001bf0:	486e      	ldr	r0, [pc, #440]	; (8001dac <HAL_ADC_Init+0x2f0>)
 8001bf2:	f7ff ff03 	bl	80019fc <LL_ADC_IsEnabled>
 8001bf6:	4604      	mov	r4, r0
 8001bf8:	486d      	ldr	r0, [pc, #436]	; (8001db0 <HAL_ADC_Init+0x2f4>)
 8001bfa:	f7ff feff 	bl	80019fc <LL_ADC_IsEnabled>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	431c      	orrs	r4, r3
 8001c02:	486c      	ldr	r0, [pc, #432]	; (8001db4 <HAL_ADC_Init+0x2f8>)
 8001c04:	f7ff fefa 	bl	80019fc <LL_ADC_IsEnabled>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4323      	orrs	r3, r4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	bf0c      	ite	eq
 8001c10:	2301      	moveq	r3, #1
 8001c12:	2300      	movne	r3, #0
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d012      	beq.n	8001c40 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c22:	d004      	beq.n	8001c2e <HAL_ADC_Init+0x172>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a5f      	ldr	r2, [pc, #380]	; (8001da8 <HAL_ADC_Init+0x2ec>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_Init+0x176>
 8001c2e:	4a62      	ldr	r2, [pc, #392]	; (8001db8 <HAL_ADC_Init+0x2fc>)
 8001c30:	e000      	b.n	8001c34 <HAL_ADC_Init+0x178>
 8001c32:	4a62      	ldr	r2, [pc, #392]	; (8001dbc <HAL_ADC_Init+0x300>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4610      	mov	r0, r2
 8001c3c:	f7ff fcfa 	bl	8001634 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	7f5b      	ldrb	r3, [r3, #29]
 8001c44:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c4a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001c50:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001c56:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c5e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001c60:	4313      	orrs	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d106      	bne.n	8001c7c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c72:	3b01      	subs	r3, #1
 8001c74:	045b      	lsls	r3, r3, #17
 8001c76:	69ba      	ldr	r2, [r7, #24]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d009      	beq.n	8001c98 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c88:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	4b48      	ldr	r3, [pc, #288]	; (8001dc0 <HAL_ADC_Init+0x304>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6812      	ldr	r2, [r2, #0]
 8001ca6:	69b9      	ldr	r1, [r7, #24]
 8001ca8:	430b      	orrs	r3, r1
 8001caa:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fee5 	bl	8001a96 <LL_ADC_INJ_IsConversionOngoing>
 8001ccc:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d17f      	bne.n	8001dd4 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d17c      	bne.n	8001dd4 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001cde:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ce6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001cf6:	f023 0302 	bic.w	r3, r3, #2
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	69b9      	ldr	r1, [r7, #24]
 8001d00:	430b      	orrs	r3, r1
 8001d02:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	691b      	ldr	r3, [r3, #16]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d017      	beq.n	8001d3c <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691a      	ldr	r2, [r3, #16]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d1a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d24:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6911      	ldr	r1, [r2, #16]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6812      	ldr	r2, [r2, #0]
 8001d34:	430b      	orrs	r3, r1
 8001d36:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001d3a:	e013      	b.n	8001d64 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	691a      	ldr	r2, [r3, #16]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001d4a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	6812      	ldr	r2, [r2, #0]
 8001d58:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001d5c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d60:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d6a:	2b01      	cmp	r3, #1
 8001d6c:	d12a      	bne.n	8001dc4 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001d78:	f023 0304 	bic.w	r3, r3, #4
 8001d7c:	687a      	ldr	r2, [r7, #4]
 8001d7e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001d84:	4311      	orrs	r1, r2
 8001d86:	687a      	ldr	r2, [r7, #4]
 8001d88:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001d8a:	4311      	orrs	r1, r2
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001d90:	430a      	orrs	r2, r1
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f042 0201 	orr.w	r2, r2, #1
 8001d9c:	611a      	str	r2, [r3, #16]
 8001d9e:	e019      	b.n	8001dd4 <HAL_ADC_Init+0x318>
 8001da0:	20000000 	.word	0x20000000
 8001da4:	053e2d63 	.word	0x053e2d63
 8001da8:	50000100 	.word	0x50000100
 8001dac:	50000400 	.word	0x50000400
 8001db0:	50000500 	.word	0x50000500
 8001db4:	50000600 	.word	0x50000600
 8001db8:	50000300 	.word	0x50000300
 8001dbc:	50000700 	.word	0x50000700
 8001dc0:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	691a      	ldr	r2, [r3, #16]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f022 0201 	bic.w	r2, r2, #1
 8001dd2:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	695b      	ldr	r3, [r3, #20]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d10c      	bne.n	8001df6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f023 010f 	bic.w	r1, r3, #15
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	1e5a      	subs	r2, r3, #1
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	631a      	str	r2, [r3, #48]	; 0x30
 8001df4:	e007      	b.n	8001e06 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 020f 	bic.w	r2, r2, #15
 8001e04:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0a:	f023 0303 	bic.w	r3, r3, #3
 8001e0e:	f043 0201 	orr.w	r2, r3, #1
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e16:	e007      	b.n	8001e28 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1c:	f043 0210 	orr.w	r2, r3, #16
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e28:	7ffb      	ldrb	r3, [r7, #31]
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3724      	adds	r7, #36	; 0x24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd90      	pop	{r4, r7, pc}
 8001e32:	bf00      	nop

08001e34 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e48:	d004      	beq.n	8001e54 <HAL_ADC_Start_DMA+0x20>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a5a      	ldr	r2, [pc, #360]	; (8001fb8 <HAL_ADC_Start_DMA+0x184>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d101      	bne.n	8001e58 <HAL_ADC_Start_DMA+0x24>
 8001e54:	4b59      	ldr	r3, [pc, #356]	; (8001fbc <HAL_ADC_Start_DMA+0x188>)
 8001e56:	e000      	b.n	8001e5a <HAL_ADC_Start_DMA+0x26>
 8001e58:	4b59      	ldr	r3, [pc, #356]	; (8001fc0 <HAL_ADC_Start_DMA+0x18c>)
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fd4a 	bl	80018f4 <LL_ADC_GetMultimode>
 8001e60:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7ff fe02 	bl	8001a70 <LL_ADC_REG_IsConversionOngoing>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	f040 809b 	bne.w	8001faa <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d101      	bne.n	8001e82 <HAL_ADC_Start_DMA+0x4e>
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e096      	b.n	8001fb0 <HAL_ADC_Start_DMA+0x17c>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a4d      	ldr	r2, [pc, #308]	; (8001fc4 <HAL_ADC_Start_DMA+0x190>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d008      	beq.n	8001ea6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	2b05      	cmp	r3, #5
 8001e9e:	d002      	beq.n	8001ea6 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	2b09      	cmp	r3, #9
 8001ea4:	d17a      	bne.n	8001f9c <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 fcf6 	bl	8002898 <ADC_Enable>
 8001eac:	4603      	mov	r3, r0
 8001eae:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001eb0:	7dfb      	ldrb	r3, [r7, #23]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d16d      	bne.n	8001f92 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ebe:	f023 0301 	bic.w	r3, r3, #1
 8001ec2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a3a      	ldr	r2, [pc, #232]	; (8001fb8 <HAL_ADC_Start_DMA+0x184>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d009      	beq.n	8001ee8 <HAL_ADC_Start_DMA+0xb4>
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a3b      	ldr	r2, [pc, #236]	; (8001fc8 <HAL_ADC_Start_DMA+0x194>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d002      	beq.n	8001ee4 <HAL_ADC_Start_DMA+0xb0>
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	e003      	b.n	8001eec <HAL_ADC_Start_DMA+0xb8>
 8001ee4:	4b39      	ldr	r3, [pc, #228]	; (8001fcc <HAL_ADC_Start_DMA+0x198>)
 8001ee6:	e001      	b.n	8001eec <HAL_ADC_Start_DMA+0xb8>
 8001ee8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	6812      	ldr	r2, [r2, #0]
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d002      	beq.n	8001efa <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d105      	bne.n	8001f06 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d006      	beq.n	8001f20 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f16:	f023 0206 	bic.w	r2, r3, #6
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	661a      	str	r2, [r3, #96]	; 0x60
 8001f1e:	e002      	b.n	8001f26 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2a:	4a29      	ldr	r2, [pc, #164]	; (8001fd0 <HAL_ADC_Start_DMA+0x19c>)
 8001f2c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f32:	4a28      	ldr	r2, [pc, #160]	; (8001fd4 <HAL_ADC_Start_DMA+0x1a0>)
 8001f34:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3a:	4a27      	ldr	r2, [pc, #156]	; (8001fd8 <HAL_ADC_Start_DMA+0x1a4>)
 8001f3c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	221c      	movs	r2, #28
 8001f44:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0210 	orr.w	r2, r2, #16
 8001f5c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 0201 	orr.w	r2, r2, #1
 8001f6c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	3340      	adds	r3, #64	; 0x40
 8001f78:	4619      	mov	r1, r3
 8001f7a:	68ba      	ldr	r2, [r7, #8]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f001 fb63 	bl	8003648 <HAL_DMA_Start_IT>
 8001f82:	4603      	mov	r3, r0
 8001f84:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fd5c 	bl	8001a48 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001f90:	e00d      	b.n	8001fae <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001f9a:	e008      	b.n	8001fae <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001fa8:	e001      	b.n	8001fae <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001faa:	2302      	movs	r3, #2
 8001fac:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	50000100 	.word	0x50000100
 8001fbc:	50000300 	.word	0x50000300
 8001fc0:	50000700 	.word	0x50000700
 8001fc4:	50000600 	.word	0x50000600
 8001fc8:	50000500 	.word	0x50000500
 8001fcc:	50000400 	.word	0x50000400
 8001fd0:	08002a83 	.word	0x08002a83
 8001fd4:	08002b5b 	.word	0x08002b5b
 8001fd8:	08002b77 	.word	0x08002b77

08001fdc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b0b6      	sub	sp, #216	; 0xd8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002032:	2b01      	cmp	r3, #1
 8002034:	d102      	bne.n	800203c <HAL_ADC_ConfigChannel+0x24>
 8002036:	2302      	movs	r3, #2
 8002038:	f000 bc13 	b.w	8002862 <HAL_ADC_ConfigChannel+0x84a>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff fd11 	bl	8001a70 <LL_ADC_REG_IsConversionOngoing>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	f040 83f3 	bne.w	800283c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6818      	ldr	r0, [r3, #0]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	6859      	ldr	r1, [r3, #4]
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	461a      	mov	r2, r3
 8002064:	f7ff fbcb 	bl	80017fe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff fcff 	bl	8001a70 <LL_ADC_REG_IsConversionOngoing>
 8002072:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fd0b 	bl	8001a96 <LL_ADC_INJ_IsConversionOngoing>
 8002080:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002084:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002088:	2b00      	cmp	r3, #0
 800208a:	f040 81d9 	bne.w	8002440 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800208e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002092:	2b00      	cmp	r3, #0
 8002094:	f040 81d4 	bne.w	8002440 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020a0:	d10f      	bne.n	80020c2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6818      	ldr	r0, [r3, #0]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2200      	movs	r2, #0
 80020ac:	4619      	mov	r1, r3
 80020ae:	f7ff fbd2 	bl	8001856 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7ff fb79 	bl	80017b2 <LL_ADC_SetSamplingTimeCommonConfig>
 80020c0:	e00e      	b.n	80020e0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	6819      	ldr	r1, [r3, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	461a      	mov	r2, r3
 80020d0:	f7ff fbc1 	bl	8001856 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2100      	movs	r1, #0
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fb69 	bl	80017b2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	695a      	ldr	r2, [r3, #20]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	08db      	lsrs	r3, r3, #3
 80020ec:	f003 0303 	and.w	r3, r3, #3
 80020f0:	005b      	lsls	r3, r3, #1
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2b04      	cmp	r3, #4
 8002100:	d022      	beq.n	8002148 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6818      	ldr	r0, [r3, #0]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	6919      	ldr	r1, [r3, #16]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002112:	f7ff fac3 	bl	800169c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6818      	ldr	r0, [r3, #0]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	6919      	ldr	r1, [r3, #16]
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	461a      	mov	r2, r3
 8002124:	f7ff fb0f 	bl	8001746 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6818      	ldr	r0, [r3, #0]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002134:	2b01      	cmp	r3, #1
 8002136:	d102      	bne.n	800213e <HAL_ADC_ConfigChannel+0x126>
 8002138:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800213c:	e000      	b.n	8002140 <HAL_ADC_ConfigChannel+0x128>
 800213e:	2300      	movs	r3, #0
 8002140:	461a      	mov	r2, r3
 8002142:	f7ff fb1b 	bl	800177c <LL_ADC_SetOffsetSaturation>
 8002146:	e17b      	b.n	8002440 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2100      	movs	r1, #0
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fac8 	bl	80016e4 <LL_ADC_GetOffsetChannel>
 8002154:	4603      	mov	r3, r0
 8002156:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800215a:	2b00      	cmp	r3, #0
 800215c:	d10a      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x15c>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fabd 	bl	80016e4 <LL_ADC_GetOffsetChannel>
 800216a:	4603      	mov	r3, r0
 800216c:	0e9b      	lsrs	r3, r3, #26
 800216e:	f003 021f 	and.w	r2, r3, #31
 8002172:	e01e      	b.n	80021b2 <HAL_ADC_ConfigChannel+0x19a>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2100      	movs	r1, #0
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fab2 	bl	80016e4 <LL_ADC_GetOffsetChannel>
 8002180:	4603      	mov	r3, r0
 8002182:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002186:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002192:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002196:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800219a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80021a2:	2320      	movs	r3, #32
 80021a4:	e004      	b.n	80021b0 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80021a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021aa:	fab3 f383 	clz	r3, r3
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d105      	bne.n	80021ca <HAL_ADC_ConfigChannel+0x1b2>
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	0e9b      	lsrs	r3, r3, #26
 80021c4:	f003 031f 	and.w	r3, r3, #31
 80021c8:	e018      	b.n	80021fc <HAL_ADC_ConfigChannel+0x1e4>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021d6:	fa93 f3a3 	rbit	r3, r3
 80021da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80021de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80021e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80021e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80021ee:	2320      	movs	r3, #32
 80021f0:	e004      	b.n	80021fc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80021f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021f6:	fab3 f383 	clz	r3, r3
 80021fa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d106      	bne.n	800220e <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2200      	movs	r2, #0
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f7ff fa81 	bl	8001710 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2101      	movs	r1, #1
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fa65 	bl	80016e4 <LL_ADC_GetOffsetChannel>
 800221a:	4603      	mov	r3, r0
 800221c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10a      	bne.n	800223a <HAL_ADC_ConfigChannel+0x222>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2101      	movs	r1, #1
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff fa5a 	bl	80016e4 <LL_ADC_GetOffsetChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	0e9b      	lsrs	r3, r3, #26
 8002234:	f003 021f 	and.w	r2, r3, #31
 8002238:	e01e      	b.n	8002278 <HAL_ADC_ConfigChannel+0x260>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2101      	movs	r1, #1
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fa4f 	bl	80016e4 <LL_ADC_GetOffsetChannel>
 8002246:	4603      	mov	r3, r0
 8002248:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002250:	fa93 f3a3 	rbit	r3, r3
 8002254:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002258:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800225c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002260:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002268:	2320      	movs	r3, #32
 800226a:	e004      	b.n	8002276 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800226c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002270:	fab3 f383 	clz	r3, r3
 8002274:	b2db      	uxtb	r3, r3
 8002276:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002280:	2b00      	cmp	r3, #0
 8002282:	d105      	bne.n	8002290 <HAL_ADC_ConfigChannel+0x278>
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	0e9b      	lsrs	r3, r3, #26
 800228a:	f003 031f 	and.w	r3, r3, #31
 800228e:	e018      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x2aa>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002298:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800229c:	fa93 f3a3 	rbit	r3, r3
 80022a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80022a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80022a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80022ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80022b4:	2320      	movs	r3, #32
 80022b6:	e004      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80022b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022bc:	fab3 f383 	clz	r3, r3
 80022c0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d106      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	2200      	movs	r2, #0
 80022cc:	2101      	movs	r1, #1
 80022ce:	4618      	mov	r0, r3
 80022d0:	f7ff fa1e 	bl	8001710 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2102      	movs	r1, #2
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fa02 	bl	80016e4 <LL_ADC_GetOffsetChannel>
 80022e0:	4603      	mov	r3, r0
 80022e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10a      	bne.n	8002300 <HAL_ADC_ConfigChannel+0x2e8>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2102      	movs	r1, #2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f7ff f9f7 	bl	80016e4 <LL_ADC_GetOffsetChannel>
 80022f6:	4603      	mov	r3, r0
 80022f8:	0e9b      	lsrs	r3, r3, #26
 80022fa:	f003 021f 	and.w	r2, r3, #31
 80022fe:	e01e      	b.n	800233e <HAL_ADC_ConfigChannel+0x326>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2102      	movs	r1, #2
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff f9ec 	bl	80016e4 <LL_ADC_GetOffsetChannel>
 800230c:	4603      	mov	r3, r0
 800230e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002312:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002316:	fa93 f3a3 	rbit	r3, r3
 800231a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800231e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002326:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800232e:	2320      	movs	r3, #32
 8002330:	e004      	b.n	800233c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002332:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	b2db      	uxtb	r3, r3
 800233c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002346:	2b00      	cmp	r3, #0
 8002348:	d105      	bne.n	8002356 <HAL_ADC_ConfigChannel+0x33e>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	0e9b      	lsrs	r3, r3, #26
 8002350:	f003 031f 	and.w	r3, r3, #31
 8002354:	e016      	b.n	8002384 <HAL_ADC_ConfigChannel+0x36c>
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002362:	fa93 f3a3 	rbit	r3, r3
 8002366:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002368:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800236a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800236e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002376:	2320      	movs	r3, #32
 8002378:	e004      	b.n	8002384 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800237a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800237e:	fab3 f383 	clz	r3, r3
 8002382:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002384:	429a      	cmp	r2, r3
 8002386:	d106      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2200      	movs	r2, #0
 800238e:	2102      	movs	r1, #2
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff f9bd 	bl	8001710 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2103      	movs	r1, #3
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff f9a1 	bl	80016e4 <LL_ADC_GetOffsetChannel>
 80023a2:	4603      	mov	r3, r0
 80023a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10a      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x3aa>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2103      	movs	r1, #3
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff f996 	bl	80016e4 <LL_ADC_GetOffsetChannel>
 80023b8:	4603      	mov	r3, r0
 80023ba:	0e9b      	lsrs	r3, r3, #26
 80023bc:	f003 021f 	and.w	r2, r3, #31
 80023c0:	e017      	b.n	80023f2 <HAL_ADC_ConfigChannel+0x3da>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2103      	movs	r1, #3
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff f98b 	bl	80016e4 <LL_ADC_GetOffsetChannel>
 80023ce:	4603      	mov	r3, r0
 80023d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80023d4:	fa93 f3a3 	rbit	r3, r3
 80023d8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80023da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80023dc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80023de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80023e4:	2320      	movs	r3, #32
 80023e6:	e003      	b.n	80023f0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80023e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023ea:	fab3 f383 	clz	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d105      	bne.n	800240a <HAL_ADC_ConfigChannel+0x3f2>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	0e9b      	lsrs	r3, r3, #26
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	e011      	b.n	800242e <HAL_ADC_ConfigChannel+0x416>
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002410:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800241a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800241c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002422:	2320      	movs	r3, #32
 8002424:	e003      	b.n	800242e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002426:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002428:	fab3 f383 	clz	r3, r3
 800242c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800242e:	429a      	cmp	r2, r3
 8002430:	d106      	bne.n	8002440 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2200      	movs	r2, #0
 8002438:	2103      	movs	r1, #3
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff f968 	bl	8001710 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fad9 	bl	80019fc <LL_ADC_IsEnabled>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	f040 813d 	bne.w	80026cc <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	6819      	ldr	r1, [r3, #0]
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	461a      	mov	r2, r3
 8002460:	f7ff fa24 	bl	80018ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	4aa2      	ldr	r2, [pc, #648]	; (80026f4 <HAL_ADC_ConfigChannel+0x6dc>)
 800246a:	4293      	cmp	r3, r2
 800246c:	f040 812e 	bne.w	80026cc <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10b      	bne.n	8002498 <HAL_ADC_ConfigChannel+0x480>
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	0e9b      	lsrs	r3, r3, #26
 8002486:	3301      	adds	r3, #1
 8002488:	f003 031f 	and.w	r3, r3, #31
 800248c:	2b09      	cmp	r3, #9
 800248e:	bf94      	ite	ls
 8002490:	2301      	movls	r3, #1
 8002492:	2300      	movhi	r3, #0
 8002494:	b2db      	uxtb	r3, r3
 8002496:	e019      	b.n	80024cc <HAL_ADC_ConfigChannel+0x4b4>
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024a0:	fa93 f3a3 	rbit	r3, r3
 80024a4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80024a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80024a8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80024aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80024b0:	2320      	movs	r3, #32
 80024b2:	e003      	b.n	80024bc <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80024b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	3301      	adds	r3, #1
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	2b09      	cmp	r3, #9
 80024c4:	bf94      	ite	ls
 80024c6:	2301      	movls	r3, #1
 80024c8:	2300      	movhi	r3, #0
 80024ca:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d079      	beq.n	80025c4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d107      	bne.n	80024ec <HAL_ADC_ConfigChannel+0x4d4>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	0e9b      	lsrs	r3, r3, #26
 80024e2:	3301      	adds	r3, #1
 80024e4:	069b      	lsls	r3, r3, #26
 80024e6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024ea:	e015      	b.n	8002518 <HAL_ADC_ConfigChannel+0x500>
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024f4:	fa93 f3a3 	rbit	r3, r3
 80024f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80024fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024fc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80024fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002504:	2320      	movs	r3, #32
 8002506:	e003      	b.n	8002510 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002508:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800250a:	fab3 f383 	clz	r3, r3
 800250e:	b2db      	uxtb	r3, r3
 8002510:	3301      	adds	r3, #1
 8002512:	069b      	lsls	r3, r3, #26
 8002514:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002520:	2b00      	cmp	r3, #0
 8002522:	d109      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x520>
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	0e9b      	lsrs	r3, r3, #26
 800252a:	3301      	adds	r3, #1
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	2101      	movs	r1, #1
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
 8002536:	e017      	b.n	8002568 <HAL_ADC_ConfigChannel+0x550>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002546:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002548:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800254a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002550:	2320      	movs	r3, #32
 8002552:	e003      	b.n	800255c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	3301      	adds	r3, #1
 800255e:	f003 031f 	and.w	r3, r3, #31
 8002562:	2101      	movs	r1, #1
 8002564:	fa01 f303 	lsl.w	r3, r1, r3
 8002568:	ea42 0103 	orr.w	r1, r2, r3
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <HAL_ADC_ConfigChannel+0x576>
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	0e9b      	lsrs	r3, r3, #26
 800257e:	3301      	adds	r3, #1
 8002580:	f003 021f 	and.w	r2, r3, #31
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	051b      	lsls	r3, r3, #20
 800258c:	e018      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x5a8>
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002596:	fa93 f3a3 	rbit	r3, r3
 800259a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800259c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80025a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80025a6:	2320      	movs	r3, #32
 80025a8:	e003      	b.n	80025b2 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80025aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025ac:	fab3 f383 	clz	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	3301      	adds	r3, #1
 80025b4:	f003 021f 	and.w	r2, r3, #31
 80025b8:	4613      	mov	r3, r2
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	4413      	add	r3, r2
 80025be:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025c0:	430b      	orrs	r3, r1
 80025c2:	e07e      	b.n	80026c2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d107      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x5c8>
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	0e9b      	lsrs	r3, r3, #26
 80025d6:	3301      	adds	r3, #1
 80025d8:	069b      	lsls	r3, r3, #26
 80025da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025de:	e015      	b.n	800260c <HAL_ADC_ConfigChannel+0x5f4>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80025ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025f0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80025f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80025f8:	2320      	movs	r3, #32
 80025fa:	e003      	b.n	8002604 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80025fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025fe:	fab3 f383 	clz	r3, r3
 8002602:	b2db      	uxtb	r3, r3
 8002604:	3301      	adds	r3, #1
 8002606:	069b      	lsls	r3, r3, #26
 8002608:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002614:	2b00      	cmp	r3, #0
 8002616:	d109      	bne.n	800262c <HAL_ADC_ConfigChannel+0x614>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	0e9b      	lsrs	r3, r3, #26
 800261e:	3301      	adds	r3, #1
 8002620:	f003 031f 	and.w	r3, r3, #31
 8002624:	2101      	movs	r1, #1
 8002626:	fa01 f303 	lsl.w	r3, r1, r3
 800262a:	e017      	b.n	800265c <HAL_ADC_ConfigChannel+0x644>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002632:	6a3b      	ldr	r3, [r7, #32]
 8002634:	fa93 f3a3 	rbit	r3, r3
 8002638:	61fb      	str	r3, [r7, #28]
  return result;
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800263e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002640:	2b00      	cmp	r3, #0
 8002642:	d101      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002644:	2320      	movs	r3, #32
 8002646:	e003      	b.n	8002650 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264a:	fab3 f383 	clz	r3, r3
 800264e:	b2db      	uxtb	r3, r3
 8002650:	3301      	adds	r3, #1
 8002652:	f003 031f 	and.w	r3, r3, #31
 8002656:	2101      	movs	r1, #1
 8002658:	fa01 f303 	lsl.w	r3, r1, r3
 800265c:	ea42 0103 	orr.w	r1, r2, r3
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002668:	2b00      	cmp	r3, #0
 800266a:	d10d      	bne.n	8002688 <HAL_ADC_ConfigChannel+0x670>
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	0e9b      	lsrs	r3, r3, #26
 8002672:	3301      	adds	r3, #1
 8002674:	f003 021f 	and.w	r2, r3, #31
 8002678:	4613      	mov	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4413      	add	r3, r2
 800267e:	3b1e      	subs	r3, #30
 8002680:	051b      	lsls	r3, r3, #20
 8002682:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002686:	e01b      	b.n	80026c0 <HAL_ADC_ConfigChannel+0x6a8>
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	fa93 f3a3 	rbit	r3, r3
 8002694:	613b      	str	r3, [r7, #16]
  return result;
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80026a0:	2320      	movs	r3, #32
 80026a2:	e003      	b.n	80026ac <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	fab3 f383 	clz	r3, r3
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	3301      	adds	r3, #1
 80026ae:	f003 021f 	and.w	r2, r3, #31
 80026b2:	4613      	mov	r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4413      	add	r3, r2
 80026b8:	3b1e      	subs	r3, #30
 80026ba:	051b      	lsls	r3, r3, #20
 80026bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026c6:	4619      	mov	r1, r3
 80026c8:	f7ff f8c5 	bl	8001856 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_ADC_ConfigChannel+0x6e0>)
 80026d2:	4013      	ands	r3, r2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80be 	beq.w	8002856 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026e2:	d004      	beq.n	80026ee <HAL_ADC_ConfigChannel+0x6d6>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a04      	ldr	r2, [pc, #16]	; (80026fc <HAL_ADC_ConfigChannel+0x6e4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d10a      	bne.n	8002704 <HAL_ADC_ConfigChannel+0x6ec>
 80026ee:	4b04      	ldr	r3, [pc, #16]	; (8002700 <HAL_ADC_ConfigChannel+0x6e8>)
 80026f0:	e009      	b.n	8002706 <HAL_ADC_ConfigChannel+0x6ee>
 80026f2:	bf00      	nop
 80026f4:	407f0000 	.word	0x407f0000
 80026f8:	80080000 	.word	0x80080000
 80026fc:	50000100 	.word	0x50000100
 8002700:	50000300 	.word	0x50000300
 8002704:	4b59      	ldr	r3, [pc, #356]	; (800286c <HAL_ADC_ConfigChannel+0x854>)
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe ffba 	bl	8001680 <LL_ADC_GetCommonPathInternalCh>
 800270c:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a56      	ldr	r2, [pc, #344]	; (8002870 <HAL_ADC_ConfigChannel+0x858>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d004      	beq.n	8002724 <HAL_ADC_ConfigChannel+0x70c>
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a55      	ldr	r2, [pc, #340]	; (8002874 <HAL_ADC_ConfigChannel+0x85c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d13a      	bne.n	800279a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002724:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002728:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d134      	bne.n	800279a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002738:	d005      	beq.n	8002746 <HAL_ADC_ConfigChannel+0x72e>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a4e      	ldr	r2, [pc, #312]	; (8002878 <HAL_ADC_ConfigChannel+0x860>)
 8002740:	4293      	cmp	r3, r2
 8002742:	f040 8085 	bne.w	8002850 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800274e:	d004      	beq.n	800275a <HAL_ADC_ConfigChannel+0x742>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a49      	ldr	r2, [pc, #292]	; (800287c <HAL_ADC_ConfigChannel+0x864>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d101      	bne.n	800275e <HAL_ADC_ConfigChannel+0x746>
 800275a:	4a49      	ldr	r2, [pc, #292]	; (8002880 <HAL_ADC_ConfigChannel+0x868>)
 800275c:	e000      	b.n	8002760 <HAL_ADC_ConfigChannel+0x748>
 800275e:	4a43      	ldr	r2, [pc, #268]	; (800286c <HAL_ADC_ConfigChannel+0x854>)
 8002760:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002764:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002768:	4619      	mov	r1, r3
 800276a:	4610      	mov	r0, r2
 800276c:	f7fe ff75 	bl	800165a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002770:	4b44      	ldr	r3, [pc, #272]	; (8002884 <HAL_ADC_ConfigChannel+0x86c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	099b      	lsrs	r3, r3, #6
 8002776:	4a44      	ldr	r2, [pc, #272]	; (8002888 <HAL_ADC_ConfigChannel+0x870>)
 8002778:	fba2 2303 	umull	r2, r3, r2, r3
 800277c:	099b      	lsrs	r3, r3, #6
 800277e:	1c5a      	adds	r2, r3, #1
 8002780:	4613      	mov	r3, r2
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800278a:	e002      	b.n	8002792 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	3b01      	subs	r3, #1
 8002790:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1f9      	bne.n	800278c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002798:	e05a      	b.n	8002850 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a3b      	ldr	r2, [pc, #236]	; (800288c <HAL_ADC_ConfigChannel+0x874>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d125      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d11f      	bne.n	80027f0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a31      	ldr	r2, [pc, #196]	; (800287c <HAL_ADC_ConfigChannel+0x864>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d104      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x7ac>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a34      	ldr	r2, [pc, #208]	; (8002890 <HAL_ADC_ConfigChannel+0x878>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d047      	beq.n	8002854 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027cc:	d004      	beq.n	80027d8 <HAL_ADC_ConfigChannel+0x7c0>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a2a      	ldr	r2, [pc, #168]	; (800287c <HAL_ADC_ConfigChannel+0x864>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d101      	bne.n	80027dc <HAL_ADC_ConfigChannel+0x7c4>
 80027d8:	4a29      	ldr	r2, [pc, #164]	; (8002880 <HAL_ADC_ConfigChannel+0x868>)
 80027da:	e000      	b.n	80027de <HAL_ADC_ConfigChannel+0x7c6>
 80027dc:	4a23      	ldr	r2, [pc, #140]	; (800286c <HAL_ADC_ConfigChannel+0x854>)
 80027de:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027e6:	4619      	mov	r1, r3
 80027e8:	4610      	mov	r0, r2
 80027ea:	f7fe ff36 	bl	800165a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027ee:	e031      	b.n	8002854 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a27      	ldr	r2, [pc, #156]	; (8002894 <HAL_ADC_ConfigChannel+0x87c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d12d      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80027fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d127      	bne.n	8002856 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1c      	ldr	r2, [pc, #112]	; (800287c <HAL_ADC_ConfigChannel+0x864>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d022      	beq.n	8002856 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002818:	d004      	beq.n	8002824 <HAL_ADC_ConfigChannel+0x80c>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a17      	ldr	r2, [pc, #92]	; (800287c <HAL_ADC_ConfigChannel+0x864>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d101      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x810>
 8002824:	4a16      	ldr	r2, [pc, #88]	; (8002880 <HAL_ADC_ConfigChannel+0x868>)
 8002826:	e000      	b.n	800282a <HAL_ADC_ConfigChannel+0x812>
 8002828:	4a10      	ldr	r2, [pc, #64]	; (800286c <HAL_ADC_ConfigChannel+0x854>)
 800282a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800282e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002832:	4619      	mov	r1, r3
 8002834:	4610      	mov	r0, r2
 8002836:	f7fe ff10 	bl	800165a <LL_ADC_SetCommonPathInternalCh>
 800283a:	e00c      	b.n	8002856 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002840:	f043 0220 	orr.w	r2, r3, #32
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800284e:	e002      	b.n	8002856 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002850:	bf00      	nop
 8002852:	e000      	b.n	8002856 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002854:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800285e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002862:	4618      	mov	r0, r3
 8002864:	37d8      	adds	r7, #216	; 0xd8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	50000700 	.word	0x50000700
 8002870:	c3210000 	.word	0xc3210000
 8002874:	90c00010 	.word	0x90c00010
 8002878:	50000600 	.word	0x50000600
 800287c:	50000100 	.word	0x50000100
 8002880:	50000300 	.word	0x50000300
 8002884:	20000000 	.word	0x20000000
 8002888:	053e2d63 	.word	0x053e2d63
 800288c:	c7520000 	.word	0xc7520000
 8002890:	50000500 	.word	0x50000500
 8002894:	cb840000 	.word	0xcb840000

08002898 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80028a0:	2300      	movs	r3, #0
 80028a2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff f8a7 	bl	80019fc <LL_ADC_IsEnabled>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d176      	bne.n	80029a2 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	689a      	ldr	r2, [r3, #8]
 80028ba:	4b3c      	ldr	r3, [pc, #240]	; (80029ac <ADC_Enable+0x114>)
 80028bc:	4013      	ands	r3, r2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00d      	beq.n	80028de <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c6:	f043 0210 	orr.w	r2, r3, #16
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d2:	f043 0201 	orr.w	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e062      	b.n	80029a4 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7ff f862 	bl	80019ac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028f0:	d004      	beq.n	80028fc <ADC_Enable+0x64>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a2e      	ldr	r2, [pc, #184]	; (80029b0 <ADC_Enable+0x118>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d101      	bne.n	8002900 <ADC_Enable+0x68>
 80028fc:	4b2d      	ldr	r3, [pc, #180]	; (80029b4 <ADC_Enable+0x11c>)
 80028fe:	e000      	b.n	8002902 <ADC_Enable+0x6a>
 8002900:	4b2d      	ldr	r3, [pc, #180]	; (80029b8 <ADC_Enable+0x120>)
 8002902:	4618      	mov	r0, r3
 8002904:	f7fe febc 	bl	8001680 <LL_ADC_GetCommonPathInternalCh>
 8002908:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800290a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800290e:	2b00      	cmp	r3, #0
 8002910:	d013      	beq.n	800293a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002912:	4b2a      	ldr	r3, [pc, #168]	; (80029bc <ADC_Enable+0x124>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	099b      	lsrs	r3, r3, #6
 8002918:	4a29      	ldr	r2, [pc, #164]	; (80029c0 <ADC_Enable+0x128>)
 800291a:	fba2 2303 	umull	r2, r3, r2, r3
 800291e:	099b      	lsrs	r3, r3, #6
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	4613      	mov	r3, r2
 8002924:	005b      	lsls	r3, r3, #1
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800292c:	e002      	b.n	8002934 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	3b01      	subs	r3, #1
 8002932:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1f9      	bne.n	800292e <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800293a:	f7fe fe23 	bl	8001584 <HAL_GetTick>
 800293e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002940:	e028      	b.n	8002994 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff f858 	bl	80019fc <LL_ADC_IsEnabled>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d104      	bne.n	800295c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff f828 	bl	80019ac <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800295c:	f7fe fe12 	bl	8001584 <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d914      	bls.n	8002994 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	2b01      	cmp	r3, #1
 8002976:	d00d      	beq.n	8002994 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297c:	f043 0210 	orr.w	r2, r3, #16
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002988:	f043 0201 	orr.w	r2, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e007      	b.n	80029a4 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d1cf      	bne.n	8002942 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80029a2:	2300      	movs	r3, #0
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	8000003f 	.word	0x8000003f
 80029b0:	50000100 	.word	0x50000100
 80029b4:	50000300 	.word	0x50000300
 80029b8:	50000700 	.word	0x50000700
 80029bc:	20000000 	.word	0x20000000
 80029c0:	053e2d63 	.word	0x053e2d63

080029c4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7ff f826 	bl	8001a22 <LL_ADC_IsDisableOngoing>
 80029d6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff f80d 	bl	80019fc <LL_ADC_IsEnabled>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d047      	beq.n	8002a78 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d144      	bne.n	8002a78 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 030d 	and.w	r3, r3, #13
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	d10c      	bne.n	8002a16 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fe ffe7 	bl	80019d4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002a0e:	f7fe fdb9 	bl	8001584 <HAL_GetTick>
 8002a12:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a14:	e029      	b.n	8002a6a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1a:	f043 0210 	orr.w	r2, r3, #16
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a26:	f043 0201 	orr.w	r2, r3, #1
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e023      	b.n	8002a7a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a32:	f7fe fda7 	bl	8001584 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d914      	bls.n	8002a6a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0301 	and.w	r3, r3, #1
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00d      	beq.n	8002a6a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a52:	f043 0210 	orr.w	r2, r3, #16
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a5e:	f043 0201 	orr.w	r2, r3, #1
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e007      	b.n	8002a7a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1dc      	bne.n	8002a32 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3710      	adds	r7, #16
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b084      	sub	sp, #16
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d14b      	bne.n	8002b34 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0308 	and.w	r3, r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d021      	beq.n	8002afa <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fe fe8c 	bl	80017d8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d032      	beq.n	8002b2c <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d12b      	bne.n	8002b2c <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d11f      	bne.n	8002b2c <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af0:	f043 0201 	orr.w	r2, r3, #1
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	65da      	str	r2, [r3, #92]	; 0x5c
 8002af8:	e018      	b.n	8002b2c <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d111      	bne.n	8002b2c <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d105      	bne.n	8002b2c <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b24:	f043 0201 	orr.w	r2, r3, #1
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f7ff fa55 	bl	8001fdc <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002b32:	e00e      	b.n	8002b52 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d003      	beq.n	8002b48 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f7ff fa5f 	bl	8002004 <HAL_ADC_ErrorCallback>
}
 8002b46:	e004      	b.n	8002b52 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	4798      	blx	r3
}
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b66:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002b68:	68f8      	ldr	r0, [r7, #12]
 8002b6a:	f7ff fa41 	bl	8001ff0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002b6e:	bf00      	nop
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b084      	sub	sp, #16
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b88:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b94:	f043 0204 	orr.w	r2, r3, #4
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f7ff fa31 	bl	8002004 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ba2:	bf00      	nop
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <LL_ADC_IsEnabled>:
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d101      	bne.n	8002bc2 <LL_ADC_IsEnabled+0x18>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <LL_ADC_IsEnabled+0x1a>
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_ADC_StartCalibration>:
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002be2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	609a      	str	r2, [r3, #8]
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <LL_ADC_IsCalibrationOnGoing>:
{
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c16:	d101      	bne.n	8002c1c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <LL_ADC_REG_IsConversionOngoing>:
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b083      	sub	sp, #12
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d101      	bne.n	8002c42 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_ADCEx_Calibration_Start+0x1c>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e04d      	b.n	8002d08 <HAL_ADCEx_Calibration_Start+0xb8>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff fea5 	bl	80029c4 <ADC_Disable>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002c7e:	7bfb      	ldrb	r3, [r7, #15]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d136      	bne.n	8002cf2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c88:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c8c:	f023 0302 	bic.w	r3, r3, #2
 8002c90:	f043 0202 	orr.w	r2, r3, #2
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6839      	ldr	r1, [r7, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff ff96 	bl	8002bd0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002ca4:	e014      	b.n	8002cd0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	4a18      	ldr	r2, [pc, #96]	; (8002d10 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d90d      	bls.n	8002cd0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb8:	f023 0312 	bic.w	r3, r3, #18
 8002cbc:	f043 0210 	orr.w	r2, r3, #16
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e01b      	b.n	8002d08 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f7ff ff94 	bl	8002c02 <LL_ADC_IsCalibrationOnGoing>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1e2      	bne.n	8002ca6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce4:	f023 0303 	bic.w	r3, r3, #3
 8002ce8:	f043 0201 	orr.w	r2, r3, #1
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cf0:	e005      	b.n	8002cfe <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf6:	f043 0210 	orr.w	r2, r3, #16
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	0004de01 	.word	0x0004de01

08002d14 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002d14:	b590      	push	{r4, r7, lr}
 8002d16:	b0a1      	sub	sp, #132	; 0x84
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d101      	bne.n	8002d32 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002d2e:	2302      	movs	r3, #2
 8002d30:	e0e7      	b.n	8002f02 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d4a:	d102      	bne.n	8002d52 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002d4c:	4b6f      	ldr	r3, [pc, #444]	; (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	e009      	b.n	8002d66 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a6e      	ldr	r2, [pc, #440]	; (8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d102      	bne.n	8002d62 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002d5c:	4b6d      	ldr	r3, [pc, #436]	; (8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002d5e:	60bb      	str	r3, [r7, #8]
 8002d60:	e001      	b.n	8002d66 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002d62:	2300      	movs	r3, #0
 8002d64:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d10b      	bne.n	8002d84 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d70:	f043 0220 	orr.w	r2, r3, #32
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0be      	b.n	8002f02 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff ff4f 	bl	8002c2a <LL_ADC_REG_IsConversionOngoing>
 8002d8c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7ff ff49 	bl	8002c2a <LL_ADC_REG_IsConversionOngoing>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	f040 80a0 	bne.w	8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002da0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	f040 809c 	bne.w	8002ee0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002db0:	d004      	beq.n	8002dbc <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a55      	ldr	r2, [pc, #340]	; (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d101      	bne.n	8002dc0 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002dbc:	4b56      	ldr	r3, [pc, #344]	; (8002f18 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002dbe:	e000      	b.n	8002dc2 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002dc0:	4b56      	ldr	r3, [pc, #344]	; (8002f1c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002dc2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d04b      	beq.n	8002e64 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002dcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	6859      	ldr	r1, [r3, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dde:	035b      	lsls	r3, r3, #13
 8002de0:	430b      	orrs	r3, r1
 8002de2:	431a      	orrs	r2, r3
 8002de4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002de6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002df0:	d004      	beq.n	8002dfc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a45      	ldr	r2, [pc, #276]	; (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d10f      	bne.n	8002e1c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002dfc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e00:	f7ff fed3 	bl	8002baa <LL_ADC_IsEnabled>
 8002e04:	4604      	mov	r4, r0
 8002e06:	4841      	ldr	r0, [pc, #260]	; (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e08:	f7ff fecf 	bl	8002baa <LL_ADC_IsEnabled>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	4323      	orrs	r3, r4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	bf0c      	ite	eq
 8002e14:	2301      	moveq	r3, #1
 8002e16:	2300      	movne	r3, #0
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	e012      	b.n	8002e42 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002e1c:	483c      	ldr	r0, [pc, #240]	; (8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002e1e:	f7ff fec4 	bl	8002baa <LL_ADC_IsEnabled>
 8002e22:	4604      	mov	r4, r0
 8002e24:	483b      	ldr	r0, [pc, #236]	; (8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002e26:	f7ff fec0 	bl	8002baa <LL_ADC_IsEnabled>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	431c      	orrs	r4, r3
 8002e2e:	483c      	ldr	r0, [pc, #240]	; (8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002e30:	f7ff febb 	bl	8002baa <LL_ADC_IsEnabled>
 8002e34:	4603      	mov	r3, r0
 8002e36:	4323      	orrs	r3, r4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	bf0c      	ite	eq
 8002e3c:	2301      	moveq	r3, #1
 8002e3e:	2300      	movne	r3, #0
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d056      	beq.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e4e:	f023 030f 	bic.w	r3, r3, #15
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	6811      	ldr	r1, [r2, #0]
 8002e56:	683a      	ldr	r2, [r7, #0]
 8002e58:	6892      	ldr	r2, [r2, #8]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e60:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002e62:	e047      	b.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e6e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e78:	d004      	beq.n	8002e84 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a23      	ldr	r2, [pc, #140]	; (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d10f      	bne.n	8002ea4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002e84:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e88:	f7ff fe8f 	bl	8002baa <LL_ADC_IsEnabled>
 8002e8c:	4604      	mov	r4, r0
 8002e8e:	481f      	ldr	r0, [pc, #124]	; (8002f0c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002e90:	f7ff fe8b 	bl	8002baa <LL_ADC_IsEnabled>
 8002e94:	4603      	mov	r3, r0
 8002e96:	4323      	orrs	r3, r4
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	e012      	b.n	8002eca <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002ea4:	481a      	ldr	r0, [pc, #104]	; (8002f10 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ea6:	f7ff fe80 	bl	8002baa <LL_ADC_IsEnabled>
 8002eaa:	4604      	mov	r4, r0
 8002eac:	4819      	ldr	r0, [pc, #100]	; (8002f14 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002eae:	f7ff fe7c 	bl	8002baa <LL_ADC_IsEnabled>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	431c      	orrs	r4, r3
 8002eb6:	481a      	ldr	r0, [pc, #104]	; (8002f20 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002eb8:	f7ff fe77 	bl	8002baa <LL_ADC_IsEnabled>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	4323      	orrs	r3, r4
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf0c      	ite	eq
 8002ec4:	2301      	moveq	r3, #1
 8002ec6:	2300      	movne	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d012      	beq.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ed6:	f023 030f 	bic.w	r3, r3, #15
 8002eda:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002edc:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ede:	e009      	b.n	8002ef4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee4:	f043 0220 	orr.w	r2, r3, #32
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002ef2:	e000      	b.n	8002ef6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ef4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002efe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3784      	adds	r7, #132	; 0x84
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd90      	pop	{r4, r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	50000100 	.word	0x50000100
 8002f10:	50000400 	.word	0x50000400
 8002f14:	50000500 	.word	0x50000500
 8002f18:	50000300 	.word	0x50000300
 8002f1c:	50000700 	.word	0x50000700
 8002f20:	50000600 	.word	0x50000600

08002f24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f34:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <__NVIC_SetPriorityGrouping+0x44>)
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f40:	4013      	ands	r3, r2
 8002f42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f56:	4a04      	ldr	r2, [pc, #16]	; (8002f68 <__NVIC_SetPriorityGrouping+0x44>)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	60d3      	str	r3, [r2, #12]
}
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	e000ed00 	.word	0xe000ed00

08002f6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f70:	4b04      	ldr	r3, [pc, #16]	; (8002f84 <__NVIC_GetPriorityGrouping+0x18>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	0a1b      	lsrs	r3, r3, #8
 8002f76:	f003 0307 	and.w	r3, r3, #7
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	4603      	mov	r3, r0
 8002f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	db0b      	blt.n	8002fb2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f9a:	79fb      	ldrb	r3, [r7, #7]
 8002f9c:	f003 021f 	and.w	r2, r3, #31
 8002fa0:	4907      	ldr	r1, [pc, #28]	; (8002fc0 <__NVIC_EnableIRQ+0x38>)
 8002fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa6:	095b      	lsrs	r3, r3, #5
 8002fa8:	2001      	movs	r0, #1
 8002faa:	fa00 f202 	lsl.w	r2, r0, r2
 8002fae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	e000e100 	.word	0xe000e100

08002fc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	6039      	str	r1, [r7, #0]
 8002fce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	db0a      	blt.n	8002fee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	b2da      	uxtb	r2, r3
 8002fdc:	490c      	ldr	r1, [pc, #48]	; (8003010 <__NVIC_SetPriority+0x4c>)
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	0112      	lsls	r2, r2, #4
 8002fe4:	b2d2      	uxtb	r2, r2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fec:	e00a      	b.n	8003004 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	4908      	ldr	r1, [pc, #32]	; (8003014 <__NVIC_SetPriority+0x50>)
 8002ff4:	79fb      	ldrb	r3, [r7, #7]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	3b04      	subs	r3, #4
 8002ffc:	0112      	lsls	r2, r2, #4
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	440b      	add	r3, r1
 8003002:	761a      	strb	r2, [r3, #24]
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000e100 	.word	0xe000e100
 8003014:	e000ed00 	.word	0xe000ed00

08003018 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003018:	b480      	push	{r7}
 800301a:	b089      	sub	sp, #36	; 0x24
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f003 0307 	and.w	r3, r3, #7
 800302a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f1c3 0307 	rsb	r3, r3, #7
 8003032:	2b04      	cmp	r3, #4
 8003034:	bf28      	it	cs
 8003036:	2304      	movcs	r3, #4
 8003038:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	3304      	adds	r3, #4
 800303e:	2b06      	cmp	r3, #6
 8003040:	d902      	bls.n	8003048 <NVIC_EncodePriority+0x30>
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	3b03      	subs	r3, #3
 8003046:	e000      	b.n	800304a <NVIC_EncodePriority+0x32>
 8003048:	2300      	movs	r3, #0
 800304a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800304c:	f04f 32ff 	mov.w	r2, #4294967295
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43da      	mvns	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	401a      	ands	r2, r3
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003060:	f04f 31ff 	mov.w	r1, #4294967295
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	fa01 f303 	lsl.w	r3, r1, r3
 800306a:	43d9      	mvns	r1, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003070:	4313      	orrs	r3, r2
         );
}
 8003072:	4618      	mov	r0, r3
 8003074:	3724      	adds	r7, #36	; 0x24
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
	...

08003080 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b082      	sub	sp, #8
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3b01      	subs	r3, #1
 800308c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003090:	d301      	bcc.n	8003096 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003092:	2301      	movs	r3, #1
 8003094:	e00f      	b.n	80030b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003096:	4a0a      	ldr	r2, [pc, #40]	; (80030c0 <SysTick_Config+0x40>)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	3b01      	subs	r3, #1
 800309c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800309e:	210f      	movs	r1, #15
 80030a0:	f04f 30ff 	mov.w	r0, #4294967295
 80030a4:	f7ff ff8e 	bl	8002fc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030a8:	4b05      	ldr	r3, [pc, #20]	; (80030c0 <SysTick_Config+0x40>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030ae:	4b04      	ldr	r3, [pc, #16]	; (80030c0 <SysTick_Config+0x40>)
 80030b0:	2207      	movs	r2, #7
 80030b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	e000e010 	.word	0xe000e010

080030c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff ff29 	bl	8002f24 <__NVIC_SetPriorityGrouping>
}
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b086      	sub	sp, #24
 80030de:	af00      	add	r7, sp, #0
 80030e0:	4603      	mov	r3, r0
 80030e2:	60b9      	str	r1, [r7, #8]
 80030e4:	607a      	str	r2, [r7, #4]
 80030e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030e8:	f7ff ff40 	bl	8002f6c <__NVIC_GetPriorityGrouping>
 80030ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	68b9      	ldr	r1, [r7, #8]
 80030f2:	6978      	ldr	r0, [r7, #20]
 80030f4:	f7ff ff90 	bl	8003018 <NVIC_EncodePriority>
 80030f8:	4602      	mov	r2, r0
 80030fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030fe:	4611      	mov	r1, r2
 8003100:	4618      	mov	r0, r3
 8003102:	f7ff ff5f 	bl	8002fc4 <__NVIC_SetPriority>
}
 8003106:	bf00      	nop
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	4603      	mov	r3, r0
 8003116:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff ff33 	bl	8002f88 <__NVIC_EnableIRQ>
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7ff ffa4 	bl	8003080 <SysTick_Config>
 8003138:	4603      	mov	r3, r0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b082      	sub	sp, #8
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d101      	bne.n	8003154 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	e014      	b.n	800317e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	791b      	ldrb	r3, [r3, #4]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d105      	bne.n	800316a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7fd ff89 	bl	800107c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08a      	sub	sp, #40	; 0x28
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003194:	2300      	movs	r3, #0
 8003196:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d002      	beq.n	80031a4 <HAL_DAC_ConfigChannel+0x1c>
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e19e      	b.n	80034e6 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	795b      	ldrb	r3, [r3, #5]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d101      	bne.n	80031b4 <HAL_DAC_ConfigChannel+0x2c>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e198      	b.n	80034e6 <HAL_DAC_ConfigChannel+0x35e>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2201      	movs	r2, #1
 80031b8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2202      	movs	r2, #2
 80031be:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d17a      	bne.n	80032be <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80031c8:	f7fe f9dc 	bl	8001584 <HAL_GetTick>
 80031cc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d13d      	bne.n	8003250 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80031d4:	e018      	b.n	8003208 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80031d6:	f7fe f9d5 	bl	8001584 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d911      	bls.n	8003208 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00a      	beq.n	8003208 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f043 0208 	orr.w	r2, r3, #8
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2203      	movs	r2, #3
 8003202:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e16e      	b.n	80034e6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800320e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1df      	bne.n	80031d6 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68ba      	ldr	r2, [r7, #8]
 800321c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800321e:	641a      	str	r2, [r3, #64]	; 0x40
 8003220:	e020      	b.n	8003264 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003222:	f7fe f9af 	bl	8001584 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b01      	cmp	r3, #1
 800322e:	d90f      	bls.n	8003250 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003236:	2b00      	cmp	r3, #0
 8003238:	da0a      	bge.n	8003250 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f043 0208 	orr.w	r2, r3, #8
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2203      	movs	r2, #3
 800324a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e14a      	b.n	80034e6 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003256:	2b00      	cmp	r3, #0
 8003258:	dbe3      	blt.n	8003222 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68ba      	ldr	r2, [r7, #8]
 8003260:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003262:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003274:	fa01 f303 	lsl.w	r3, r1, r3
 8003278:	43db      	mvns	r3, r3
 800327a:	ea02 0103 	and.w	r1, r2, r3
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f003 0310 	and.w	r3, r3, #16
 8003288:	409a      	lsls	r2, r3
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f003 0310 	and.w	r3, r3, #16
 800329e:	21ff      	movs	r1, #255	; 0xff
 80032a0:	fa01 f303 	lsl.w	r3, r1, r3
 80032a4:	43db      	mvns	r3, r3
 80032a6:	ea02 0103 	and.w	r1, r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f003 0310 	and.w	r3, r3, #16
 80032b4:	409a      	lsls	r2, r3
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d11d      	bne.n	8003302 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032cc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f003 0310 	and.w	r3, r3, #16
 80032d4:	221f      	movs	r2, #31
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43db      	mvns	r3, r3
 80032dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032de:	4013      	ands	r3, r2
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f003 0310 	and.w	r3, r3, #16
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032f6:	4313      	orrs	r3, r2
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003300:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003308:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f003 0310 	and.w	r3, r3, #16
 8003310:	2207      	movs	r2, #7
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800331a:	4013      	ands	r3, r2
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d102      	bne.n	800332c <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8003326:	2300      	movs	r3, #0
 8003328:	623b      	str	r3, [r7, #32]
 800332a:	e00f      	b.n	800334c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	699b      	ldr	r3, [r3, #24]
 8003330:	2b02      	cmp	r3, #2
 8003332:	d102      	bne.n	800333a <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003334:	2301      	movs	r3, #1
 8003336:	623b      	str	r3, [r7, #32]
 8003338:	e008      	b.n	800334c <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	695b      	ldr	r3, [r3, #20]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d102      	bne.n	8003348 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003342:	2301      	movs	r3, #1
 8003344:	623b      	str	r3, [r7, #32]
 8003346:	e001      	b.n	800334c <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003348:	2300      	movs	r3, #0
 800334a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	695b      	ldr	r3, [r3, #20]
 8003354:	4313      	orrs	r3, r2
 8003356:	6a3a      	ldr	r2, [r7, #32]
 8003358:	4313      	orrs	r3, r2
 800335a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f003 0310 	and.w	r3, r3, #16
 8003362:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003366:	fa02 f303 	lsl.w	r3, r2, r3
 800336a:	43db      	mvns	r3, r3
 800336c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800336e:	4013      	ands	r3, r2
 8003370:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	791b      	ldrb	r3, [r3, #4]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d102      	bne.n	8003380 <HAL_DAC_ConfigChannel+0x1f8>
 800337a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800337e:	e000      	b.n	8003382 <HAL_DAC_ConfigChannel+0x1fa>
 8003380:	2300      	movs	r3, #0
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4313      	orrs	r3, r2
 8003386:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43db      	mvns	r3, r3
 8003398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800339a:	4013      	ands	r3, r2
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	795b      	ldrb	r3, [r3, #5]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d102      	bne.n	80033ac <HAL_DAC_ConfigChannel+0x224>
 80033a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033aa:	e000      	b.n	80033ae <HAL_DAC_ConfigChannel+0x226>
 80033ac:	2300      	movs	r3, #0
 80033ae:	697a      	ldr	r2, [r7, #20]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d114      	bne.n	80033ee <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80033c4:	f003 f86e 	bl	80064a4 <HAL_RCC_GetHCLKFreq>
 80033c8:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4a48      	ldr	r2, [pc, #288]	; (80034f0 <HAL_DAC_ConfigChannel+0x368>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d904      	bls.n	80033dc <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80033d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
 80033da:	e00f      	b.n	80033fc <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4a45      	ldr	r2, [pc, #276]	; (80034f4 <HAL_DAC_ConfigChannel+0x36c>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d90a      	bls.n	80033fa <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80033e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ea:	627b      	str	r3, [r7, #36]	; 0x24
 80033ec:	e006      	b.n	80033fc <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033f4:	4313      	orrs	r3, r2
 80033f6:	627b      	str	r3, [r7, #36]	; 0x24
 80033f8:	e000      	b.n	80033fc <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80033fa:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f003 0310 	and.w	r3, r3, #16
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800340a:	4313      	orrs	r3, r2
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003414:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6819      	ldr	r1, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f003 0310 	and.w	r3, r3, #16
 8003422:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	43da      	mvns	r2, r3
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	400a      	ands	r2, r1
 8003432:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	f003 0310 	and.w	r3, r3, #16
 8003442:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800344e:	4013      	ands	r3, r2
 8003450:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	697a      	ldr	r2, [r7, #20]
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003466:	4313      	orrs	r3, r2
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003470:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6819      	ldr	r1, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f003 0310 	and.w	r3, r3, #16
 800347e:	22c0      	movs	r2, #192	; 0xc0
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43da      	mvns	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	400a      	ands	r2, r1
 800348c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800348e:	68bb      	ldr	r3, [r7, #8]
 8003490:	68db      	ldr	r3, [r3, #12]
 8003492:	089b      	lsrs	r3, r3, #2
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	089b      	lsrs	r3, r3, #2
 80034a0:	021b      	lsls	r3, r3, #8
 80034a2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f003 0310 	and.w	r3, r3, #16
 80034b8:	f640 710f 	movw	r1, #3855	; 0xf0f
 80034bc:	fa01 f303 	lsl.w	r3, r1, r3
 80034c0:	43db      	mvns	r3, r3
 80034c2:	ea02 0103 	and.w	r1, r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f003 0310 	and.w	r3, r3, #16
 80034cc:	697a      	ldr	r2, [r7, #20]
 80034ce:	409a      	lsls	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2201      	movs	r2, #1
 80034dc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80034e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3728      	adds	r7, #40	; 0x28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	09896800 	.word	0x09896800
 80034f4:	04c4b400 	.word	0x04c4b400

080034f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e08d      	b.n	8003626 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	461a      	mov	r2, r3
 8003510:	4b47      	ldr	r3, [pc, #284]	; (8003630 <HAL_DMA_Init+0x138>)
 8003512:	429a      	cmp	r2, r3
 8003514:	d80f      	bhi.n	8003536 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	461a      	mov	r2, r3
 800351c:	4b45      	ldr	r3, [pc, #276]	; (8003634 <HAL_DMA_Init+0x13c>)
 800351e:	4413      	add	r3, r2
 8003520:	4a45      	ldr	r2, [pc, #276]	; (8003638 <HAL_DMA_Init+0x140>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	091b      	lsrs	r3, r3, #4
 8003528:	009a      	lsls	r2, r3, #2
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a42      	ldr	r2, [pc, #264]	; (800363c <HAL_DMA_Init+0x144>)
 8003532:	641a      	str	r2, [r3, #64]	; 0x40
 8003534:	e00e      	b.n	8003554 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	461a      	mov	r2, r3
 800353c:	4b40      	ldr	r3, [pc, #256]	; (8003640 <HAL_DMA_Init+0x148>)
 800353e:	4413      	add	r3, r2
 8003540:	4a3d      	ldr	r2, [pc, #244]	; (8003638 <HAL_DMA_Init+0x140>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	091b      	lsrs	r3, r3, #4
 8003548:	009a      	lsls	r2, r3, #2
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a3c      	ldr	r2, [pc, #240]	; (8003644 <HAL_DMA_Init+0x14c>)
 8003552:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2202      	movs	r2, #2
 8003558:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800356a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003578:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	691b      	ldr	r3, [r3, #16]
 800357e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003584:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003590:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6a1b      	ldr	r3, [r3, #32]
 8003596:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4313      	orrs	r3, r2
 800359c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f9b6 	bl	8003918 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035b4:	d102      	bne.n	80035bc <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80035d0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d010      	beq.n	80035fc <HAL_DMA_Init+0x104>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d80c      	bhi.n	80035fc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 f9d6 	bl	8003994 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	e008      	b.n	800360e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	40020407 	.word	0x40020407
 8003634:	bffdfff8 	.word	0xbffdfff8
 8003638:	cccccccd 	.word	0xcccccccd
 800363c:	40020000 	.word	0x40020000
 8003640:	bffdfbf8 	.word	0xbffdfbf8
 8003644:	40020400 	.word	0x40020400

08003648 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	60f8      	str	r0, [r7, #12]
 8003650:	60b9      	str	r1, [r7, #8]
 8003652:	607a      	str	r2, [r7, #4]
 8003654:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003656:	2300      	movs	r3, #0
 8003658:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003660:	2b01      	cmp	r3, #1
 8003662:	d101      	bne.n	8003668 <HAL_DMA_Start_IT+0x20>
 8003664:	2302      	movs	r3, #2
 8003666:	e066      	b.n	8003736 <HAL_DMA_Start_IT+0xee>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b01      	cmp	r3, #1
 800367a:	d155      	bne.n	8003728 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2202      	movs	r2, #2
 8003680:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0201 	bic.w	r2, r2, #1
 8003698:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	68b9      	ldr	r1, [r7, #8]
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 f8fb 	bl	800389c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d008      	beq.n	80036c0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 020e 	orr.w	r2, r2, #14
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	e00f      	b.n	80036e0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0204 	bic.w	r2, r2, #4
 80036ce:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 020a 	orr.w	r2, r2, #10
 80036de:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036fc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003710:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003714:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f042 0201 	orr.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	e005      	b.n	8003734 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003730:	2302      	movs	r3, #2
 8003732:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003734:	7dfb      	ldrb	r3, [r7, #23]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	f003 031f 	and.w	r3, r3, #31
 800375e:	2204      	movs	r2, #4
 8003760:	409a      	lsls	r2, r3
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	4013      	ands	r3, r2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d026      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x7a>
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	f003 0304 	and.w	r3, r3, #4
 8003770:	2b00      	cmp	r3, #0
 8003772:	d021      	beq.n	80037b8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0320 	and.w	r3, r3, #32
 800377e:	2b00      	cmp	r3, #0
 8003780:	d107      	bne.n	8003792 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0204 	bic.w	r2, r2, #4
 8003790:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003796:	f003 021f 	and.w	r2, r3, #31
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	2104      	movs	r1, #4
 80037a0:	fa01 f202 	lsl.w	r2, r1, r2
 80037a4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d071      	beq.n	8003892 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80037b6:	e06c      	b.n	8003892 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037bc:	f003 031f 	and.w	r3, r3, #31
 80037c0:	2202      	movs	r2, #2
 80037c2:	409a      	lsls	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4013      	ands	r3, r2
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d02e      	beq.n	800382a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d029      	beq.n	800382a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10b      	bne.n	80037fc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f022 020a 	bic.w	r2, r2, #10
 80037f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003800:	f003 021f 	and.w	r2, r3, #31
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	2102      	movs	r1, #2
 800380a:	fa01 f202 	lsl.w	r2, r1, r2
 800380e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	2b00      	cmp	r3, #0
 800381e:	d038      	beq.n	8003892 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003828:	e033      	b.n	8003892 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382e:	f003 031f 	and.w	r3, r3, #31
 8003832:	2208      	movs	r2, #8
 8003834:	409a      	lsls	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	4013      	ands	r3, r2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d02a      	beq.n	8003894 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d025      	beq.n	8003894 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 020e 	bic.w	r2, r2, #14
 8003856:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385c:	f003 021f 	and.w	r2, r3, #31
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	2101      	movs	r1, #1
 8003866:	fa01 f202 	lsl.w	r2, r1, r2
 800386a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2201      	movs	r2, #1
 8003876:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003886:	2b00      	cmp	r3, #0
 8003888:	d004      	beq.n	8003894 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003892:	bf00      	nop
 8003894:	bf00      	nop
}
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80038b2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d004      	beq.n	80038c6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c0:	68fa      	ldr	r2, [r7, #12]
 80038c2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80038c4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ca:	f003 021f 	and.w	r2, r3, #31
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d2:	2101      	movs	r1, #1
 80038d4:	fa01 f202 	lsl.w	r2, r1, r2
 80038d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	2b10      	cmp	r3, #16
 80038e8:	d108      	bne.n	80038fc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80038fa:	e007      	b.n	800390c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	60da      	str	r2, [r3, #12]
}
 800390c:	bf00      	nop
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003918:	b480      	push	{r7}
 800391a:	b087      	sub	sp, #28
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	4b16      	ldr	r3, [pc, #88]	; (8003980 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003928:	429a      	cmp	r2, r3
 800392a:	d802      	bhi.n	8003932 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800392c:	4b15      	ldr	r3, [pc, #84]	; (8003984 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	e001      	b.n	8003936 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003932:	4b15      	ldr	r3, [pc, #84]	; (8003988 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003934:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	3b08      	subs	r3, #8
 8003942:	4a12      	ldr	r2, [pc, #72]	; (800398c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003944:	fba2 2303 	umull	r2, r3, r2, r3
 8003948:	091b      	lsrs	r3, r3, #4
 800394a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003950:	089b      	lsrs	r3, r3, #2
 8003952:	009a      	lsls	r2, r3, #2
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4413      	add	r3, r2
 8003958:	461a      	mov	r2, r3
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a0b      	ldr	r2, [pc, #44]	; (8003990 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003962:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f003 031f 	and.w	r3, r3, #31
 800396a:	2201      	movs	r2, #1
 800396c:	409a      	lsls	r2, r3
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003972:	bf00      	nop
 8003974:	371c      	adds	r7, #28
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	40020407 	.word	0x40020407
 8003984:	40020800 	.word	0x40020800
 8003988:	40020820 	.word	0x40020820
 800398c:	cccccccd 	.word	0xcccccccd
 8003990:	40020880 	.word	0x40020880

08003994 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	b2db      	uxtb	r3, r3
 80039a2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	461a      	mov	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a08      	ldr	r2, [pc, #32]	; (80039d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80039b6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	3b01      	subs	r3, #1
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	2201      	movs	r2, #1
 80039c2:	409a      	lsls	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80039c8:	bf00      	nop
 80039ca:	3714      	adds	r7, #20
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	1000823f 	.word	0x1000823f
 80039d8:	40020940 	.word	0x40020940

080039dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80039ea:	e15a      	b.n	8003ca2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	2101      	movs	r1, #1
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	fa01 f303 	lsl.w	r3, r1, r3
 80039f8:	4013      	ands	r3, r2
 80039fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 814c 	beq.w	8003c9c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d005      	beq.n	8003a1c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d130      	bne.n	8003a7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	2203      	movs	r2, #3
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4013      	ands	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a52:	2201      	movs	r2, #1
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5a:	43db      	mvns	r3, r3
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	091b      	lsrs	r3, r3, #4
 8003a68:	f003 0201 	and.w	r2, r3, #1
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	d017      	beq.n	8003aba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	2203      	movs	r2, #3
 8003a96:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9a:	43db      	mvns	r3, r3
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d123      	bne.n	8003b0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	08da      	lsrs	r2, r3, #3
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3208      	adds	r2, #8
 8003ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ad2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	220f      	movs	r2, #15
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	693a      	ldr	r2, [r7, #16]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	691a      	ldr	r2, [r3, #16]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f003 0307 	and.w	r3, r3, #7
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	08da      	lsrs	r2, r3, #3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	3208      	adds	r2, #8
 8003b08:	6939      	ldr	r1, [r7, #16]
 8003b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	2203      	movs	r2, #3
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4013      	ands	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	f003 0203 	and.w	r2, r3, #3
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 80a6 	beq.w	8003c9c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b50:	4b5b      	ldr	r3, [pc, #364]	; (8003cc0 <HAL_GPIO_Init+0x2e4>)
 8003b52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b54:	4a5a      	ldr	r2, [pc, #360]	; (8003cc0 <HAL_GPIO_Init+0x2e4>)
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	6613      	str	r3, [r2, #96]	; 0x60
 8003b5c:	4b58      	ldr	r3, [pc, #352]	; (8003cc0 <HAL_GPIO_Init+0x2e4>)
 8003b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	60bb      	str	r3, [r7, #8]
 8003b66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b68:	4a56      	ldr	r2, [pc, #344]	; (8003cc4 <HAL_GPIO_Init+0x2e8>)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	089b      	lsrs	r3, r3, #2
 8003b6e:	3302      	adds	r3, #2
 8003b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	f003 0303 	and.w	r3, r3, #3
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	220f      	movs	r2, #15
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	43db      	mvns	r3, r3
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	4013      	ands	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b92:	d01f      	beq.n	8003bd4 <HAL_GPIO_Init+0x1f8>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a4c      	ldr	r2, [pc, #304]	; (8003cc8 <HAL_GPIO_Init+0x2ec>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d019      	beq.n	8003bd0 <HAL_GPIO_Init+0x1f4>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a4b      	ldr	r2, [pc, #300]	; (8003ccc <HAL_GPIO_Init+0x2f0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d013      	beq.n	8003bcc <HAL_GPIO_Init+0x1f0>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a4a      	ldr	r2, [pc, #296]	; (8003cd0 <HAL_GPIO_Init+0x2f4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00d      	beq.n	8003bc8 <HAL_GPIO_Init+0x1ec>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a49      	ldr	r2, [pc, #292]	; (8003cd4 <HAL_GPIO_Init+0x2f8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d007      	beq.n	8003bc4 <HAL_GPIO_Init+0x1e8>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a48      	ldr	r2, [pc, #288]	; (8003cd8 <HAL_GPIO_Init+0x2fc>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d101      	bne.n	8003bc0 <HAL_GPIO_Init+0x1e4>
 8003bbc:	2305      	movs	r3, #5
 8003bbe:	e00a      	b.n	8003bd6 <HAL_GPIO_Init+0x1fa>
 8003bc0:	2306      	movs	r3, #6
 8003bc2:	e008      	b.n	8003bd6 <HAL_GPIO_Init+0x1fa>
 8003bc4:	2304      	movs	r3, #4
 8003bc6:	e006      	b.n	8003bd6 <HAL_GPIO_Init+0x1fa>
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e004      	b.n	8003bd6 <HAL_GPIO_Init+0x1fa>
 8003bcc:	2302      	movs	r3, #2
 8003bce:	e002      	b.n	8003bd6 <HAL_GPIO_Init+0x1fa>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <HAL_GPIO_Init+0x1fa>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	f002 0203 	and.w	r2, r2, #3
 8003bdc:	0092      	lsls	r2, r2, #2
 8003bde:	4093      	lsls	r3, r2
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003be6:	4937      	ldr	r1, [pc, #220]	; (8003cc4 <HAL_GPIO_Init+0x2e8>)
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	089b      	lsrs	r3, r3, #2
 8003bec:	3302      	adds	r3, #2
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003bf4:	4b39      	ldr	r3, [pc, #228]	; (8003cdc <HAL_GPIO_Init+0x300>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4013      	ands	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c18:	4a30      	ldr	r2, [pc, #192]	; (8003cdc <HAL_GPIO_Init+0x300>)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c1e:	4b2f      	ldr	r3, [pc, #188]	; (8003cdc <HAL_GPIO_Init+0x300>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	43db      	mvns	r3, r3
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c42:	4a26      	ldr	r2, [pc, #152]	; (8003cdc <HAL_GPIO_Init+0x300>)
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003c48:	4b24      	ldr	r3, [pc, #144]	; (8003cdc <HAL_GPIO_Init+0x300>)
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	43db      	mvns	r3, r3
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4013      	ands	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003c64:	693a      	ldr	r2, [r7, #16]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c6c:	4a1b      	ldr	r2, [pc, #108]	; (8003cdc <HAL_GPIO_Init+0x300>)
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003c72:	4b1a      	ldr	r3, [pc, #104]	; (8003cdc <HAL_GPIO_Init+0x300>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c96:	4a11      	ldr	r2, [pc, #68]	; (8003cdc <HAL_GPIO_Init+0x300>)
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	fa22 f303 	lsr.w	r3, r2, r3
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f47f ae9d 	bne.w	80039ec <HAL_GPIO_Init+0x10>
  }
}
 8003cb2:	bf00      	nop
 8003cb4:	bf00      	nop
 8003cb6:	371c      	adds	r7, #28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	40010000 	.word	0x40010000
 8003cc8:	48000400 	.word	0x48000400
 8003ccc:	48000800 	.word	0x48000800
 8003cd0:	48000c00 	.word	0x48000c00
 8003cd4:	48001000 	.word	0x48001000
 8003cd8:	48001400 	.word	0x48001400
 8003cdc:	40010400 	.word	0x40010400

08003ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	807b      	strh	r3, [r7, #2]
 8003cec:	4613      	mov	r3, r2
 8003cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cf0:	787b      	ldrb	r3, [r7, #1]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003cf6:	887a      	ldrh	r2, [r7, #2]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003cfc:	e002      	b.n	8003d04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003cfe:	887a      	ldrh	r2, [r7, #2]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d101      	bne.n	8003d22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e08d      	b.n	8003e3e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d106      	bne.n	8003d3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fd f9de 	bl	80010f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2224      	movs	r2, #36	; 0x24
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0201 	bic.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d60:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689a      	ldr	r2, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d70:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	2b01      	cmp	r3, #1
 8003d78:	d107      	bne.n	8003d8a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	e006      	b.n	8003d98 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	689a      	ldr	r2, [r3, #8]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d96:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d108      	bne.n	8003db2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dae:	605a      	str	r2, [r3, #4]
 8003db0:	e007      	b.n	8003dc2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dc0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003dd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003de4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	691a      	ldr	r2, [r3, #16]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	69d9      	ldr	r1, [r3, #28]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a1a      	ldr	r2, [r3, #32]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f042 0201 	orr.w	r2, r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2220      	movs	r2, #32
 8003e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2200      	movs	r2, #0
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b083      	sub	sp, #12
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
 8003e4e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d138      	bne.n	8003ece <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d101      	bne.n	8003e6a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e66:	2302      	movs	r3, #2
 8003e68:	e032      	b.n	8003ed0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2224      	movs	r2, #36	; 0x24
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f022 0201 	bic.w	r2, r2, #1
 8003e88:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003e98:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	6819      	ldr	r1, [r3, #0]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	683a      	ldr	r2, [r7, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0201 	orr.w	r2, r2, #1
 8003eb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2220      	movs	r2, #32
 8003ebe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	e000      	b.n	8003ed0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003ece:	2302      	movs	r3, #2
  }
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b20      	cmp	r3, #32
 8003ef0:	d139      	bne.n	8003f66 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d101      	bne.n	8003f00 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003efc:	2302      	movs	r3, #2
 8003efe:	e033      	b.n	8003f68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2224      	movs	r2, #36	; 0x24
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0201 	bic.w	r2, r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003f2e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	021b      	lsls	r3, r3, #8
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0201 	orr.w	r2, r2, #1
 8003f50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2220      	movs	r2, #32
 8003f56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	e000      	b.n	8003f68 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f66:	2302      	movs	r3, #2
  }
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3714      	adds	r7, #20
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e0c0      	b.n	8004108 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d106      	bne.n	8003fa0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f007 fd48 	bl	800ba30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2203      	movs	r2, #3
 8003fa4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4618      	mov	r0, r3
 8003fae:	f003 fbe6 	bl	800777e <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	73fb      	strb	r3, [r7, #15]
 8003fb6:	e03e      	b.n	8004036 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fb8:	7bfa      	ldrb	r2, [r7, #15]
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	009b      	lsls	r3, r3, #2
 8003fc0:	4413      	add	r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	440b      	add	r3, r1
 8003fc6:	3311      	adds	r3, #17
 8003fc8:	2201      	movs	r2, #1
 8003fca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fcc:	7bfa      	ldrb	r2, [r7, #15]
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	440b      	add	r3, r1
 8003fda:	3310      	adds	r3, #16
 8003fdc:	7bfa      	ldrb	r2, [r7, #15]
 8003fde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fe0:	7bfa      	ldrb	r2, [r7, #15]
 8003fe2:	6879      	ldr	r1, [r7, #4]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	4413      	add	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	440b      	add	r3, r1
 8003fee:	3313      	adds	r3, #19
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ff4:	7bfa      	ldrb	r2, [r7, #15]
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	00db      	lsls	r3, r3, #3
 8004000:	440b      	add	r3, r1
 8004002:	3320      	adds	r3, #32
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004008:	7bfa      	ldrb	r2, [r7, #15]
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	4613      	mov	r3, r2
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	440b      	add	r3, r1
 8004016:	3324      	adds	r3, #36	; 0x24
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800401c:	7bfb      	ldrb	r3, [r7, #15]
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	1c5a      	adds	r2, r3, #1
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	440b      	add	r3, r1
 800402c:	2200      	movs	r2, #0
 800402e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	3301      	adds	r3, #1
 8004034:	73fb      	strb	r3, [r7, #15]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	791b      	ldrb	r3, [r3, #4]
 800403a:	7bfa      	ldrb	r2, [r7, #15]
 800403c:	429a      	cmp	r2, r3
 800403e:	d3bb      	bcc.n	8003fb8 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004040:	2300      	movs	r3, #0
 8004042:	73fb      	strb	r3, [r7, #15]
 8004044:	e044      	b.n	80040d0 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004046:	7bfa      	ldrb	r2, [r7, #15]
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	4413      	add	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	440b      	add	r3, r1
 8004054:	f203 1351 	addw	r3, r3, #337	; 0x151
 8004058:	2200      	movs	r2, #0
 800405a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800405c:	7bfa      	ldrb	r2, [r7, #15]
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	440b      	add	r3, r1
 800406a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800406e:	7bfa      	ldrb	r2, [r7, #15]
 8004070:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004072:	7bfa      	ldrb	r2, [r7, #15]
 8004074:	6879      	ldr	r1, [r7, #4]
 8004076:	4613      	mov	r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4413      	add	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	440b      	add	r3, r1
 8004080:	f203 1353 	addw	r3, r3, #339	; 0x153
 8004084:	2200      	movs	r2, #0
 8004086:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004088:	7bfa      	ldrb	r2, [r7, #15]
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	4613      	mov	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	4413      	add	r3, r2
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	440b      	add	r3, r1
 8004096:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800409a:	2200      	movs	r2, #0
 800409c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800409e:	7bfa      	ldrb	r2, [r7, #15]
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	4413      	add	r3, r2
 80040a8:	00db      	lsls	r3, r3, #3
 80040aa:	440b      	add	r3, r1
 80040ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80040b0:	2200      	movs	r2, #0
 80040b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040b4:	7bfa      	ldrb	r2, [r7, #15]
 80040b6:	6879      	ldr	r1, [r7, #4]
 80040b8:	4613      	mov	r3, r2
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	4413      	add	r3, r2
 80040be:	00db      	lsls	r3, r3, #3
 80040c0:	440b      	add	r3, r1
 80040c2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80040c6:	2200      	movs	r2, #0
 80040c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
 80040cc:	3301      	adds	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	791b      	ldrb	r3, [r3, #4]
 80040d4:	7bfa      	ldrb	r2, [r7, #15]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d3b5      	bcc.n	8004046 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6818      	ldr	r0, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3304      	adds	r3, #4
 80040e2:	e893 0006 	ldmia.w	r3, {r1, r2}
 80040e6:	f003 fb65 	bl	80077b4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	7a9b      	ldrb	r3, [r3, #10]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d102      	bne.n	8004106 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f001 fc41 	bl	8005988 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800411e:	2b01      	cmp	r3, #1
 8004120:	d101      	bne.n	8004126 <HAL_PCD_Start+0x16>
 8004122:	2302      	movs	r3, #2
 8004124:	e012      	b.n	800414c <HAL_PCD_Start+0x3c>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f003 fb0c 	bl	8007750 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4618      	mov	r0, r3
 800413e:	f005 fdcc 	bl	8009cda <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 800414a:	2300      	movs	r3, #0
}
 800414c:	4618      	mov	r0, r3
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f005 fdd1 	bl	8009d08 <USB_ReadInterrupts>
 8004166:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 fb04 	bl	8004780 <PCD_EP_ISR_Handler>

    return;
 8004178:	e110      	b.n	800439c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004180:	2b00      	cmp	r3, #0
 8004182:	d013      	beq.n	80041ac <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800418c:	b29a      	uxth	r2, r3
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004196:	b292      	uxth	r2, r2
 8004198:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f007 fce0 	bl	800bb62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80041a2:	2100      	movs	r1, #0
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f8fc 	bl	80043a2 <HAL_PCD_SetAddress>

    return;
 80041aa:	e0f7      	b.n	800439c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d00c      	beq.n	80041d0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041be:	b29a      	uxth	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80041c8:	b292      	uxth	r2, r2
 80041ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80041ce:	e0e5      	b.n	800439c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00c      	beq.n	80041f4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041ec:	b292      	uxth	r2, r2
 80041ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80041f2:	e0d3      	b.n	800439c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d034      	beq.n	8004268 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004206:	b29a      	uxth	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0204 	bic.w	r2, r2, #4
 8004210:	b292      	uxth	r2, r2
 8004212:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800421e:	b29a      	uxth	r2, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0208 	bic.w	r2, r2, #8
 8004228:	b292      	uxth	r2, r2
 800422a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8004234:	2b01      	cmp	r3, #1
 8004236:	d107      	bne.n	8004248 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004240:	2100      	movs	r1, #0
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f007 fe80 	bl	800bf48 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f007 fcc3 	bl	800bbd4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004256:	b29a      	uxth	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004260:	b292      	uxth	r2, r2
 8004262:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8004266:	e099      	b.n	800439c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800426e:	2b00      	cmp	r3, #0
 8004270:	d027      	beq.n	80042c2 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800427a:	b29a      	uxth	r2, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f042 0208 	orr.w	r2, r2, #8
 8004284:	b292      	uxth	r2, r2
 8004286:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004292:	b29a      	uxth	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800429c:	b292      	uxth	r2, r2
 800429e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f042 0204 	orr.w	r2, r2, #4
 80042b4:	b292      	uxth	r2, r2
 80042b6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f007 fc70 	bl	800bba0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80042c0:	e06c      	b.n	800439c <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d040      	beq.n	800434e <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042de:	b292      	uxth	r2, r2
 80042e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d12b      	bne.n	8004346 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0204 	orr.w	r2, r2, #4
 8004300:	b292      	uxth	r2, r2
 8004302:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800430e:	b29a      	uxth	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f042 0208 	orr.w	r2, r2, #8
 8004318:	b292      	uxth	r2, r2
 800431a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800432e:	b29b      	uxth	r3, r3
 8004330:	089b      	lsrs	r3, r3, #2
 8004332:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800433c:	2101      	movs	r1, #1
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f007 fe02 	bl	800bf48 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8004344:	e02a      	b.n	800439c <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f007 fc2a 	bl	800bba0 <HAL_PCD_SuspendCallback>
    return;
 800434c:	e026      	b.n	800439c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00f      	beq.n	8004378 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004360:	b29a      	uxth	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800436a:	b292      	uxth	r2, r2
 800436c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f007 fbe8 	bl	800bb46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004376:	e011      	b.n	800439c <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00c      	beq.n	800439c <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800438a:	b29a      	uxth	r2, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004394:	b292      	uxth	r2, r2
 8004396:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 800439a:	bf00      	nop
  }
}
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b082      	sub	sp, #8
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	460b      	mov	r3, r1
 80043ac:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d101      	bne.n	80043bc <HAL_PCD_SetAddress+0x1a>
 80043b8:	2302      	movs	r3, #2
 80043ba:	e012      	b.n	80043e2 <HAL_PCD_SetAddress+0x40>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	78fa      	ldrb	r2, [r7, #3]
 80043c8:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	78fa      	ldrb	r2, [r7, #3]
 80043d0:	4611      	mov	r1, r2
 80043d2:	4618      	mov	r0, r3
 80043d4:	f005 fc6d 	bl	8009cb2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b084      	sub	sp, #16
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	4608      	mov	r0, r1
 80043f4:	4611      	mov	r1, r2
 80043f6:	461a      	mov	r2, r3
 80043f8:	4603      	mov	r3, r0
 80043fa:	70fb      	strb	r3, [r7, #3]
 80043fc:	460b      	mov	r3, r1
 80043fe:	803b      	strh	r3, [r7, #0]
 8004400:	4613      	mov	r3, r2
 8004402:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004408:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800440c:	2b00      	cmp	r3, #0
 800440e:	da0e      	bge.n	800442e <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	f003 0207 	and.w	r2, r3, #7
 8004416:	4613      	mov	r3, r2
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	3310      	adds	r3, #16
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	4413      	add	r3, r2
 8004424:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2201      	movs	r2, #1
 800442a:	705a      	strb	r2, [r3, #1]
 800442c:	e00e      	b.n	800444c <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800442e:	78fb      	ldrb	r3, [r7, #3]
 8004430:	f003 0207 	and.w	r2, r3, #7
 8004434:	4613      	mov	r3, r2
 8004436:	009b      	lsls	r3, r3, #2
 8004438:	4413      	add	r3, r2
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	4413      	add	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800444c:	78fb      	ldrb	r3, [r7, #3]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	b2da      	uxtb	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004458:	883a      	ldrh	r2, [r7, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	78ba      	ldrb	r2, [r7, #2]
 8004462:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004464:	78bb      	ldrb	r3, [r7, #2]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d102      	bne.n	8004470 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2200      	movs	r2, #0
 800446e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004476:	2b01      	cmp	r3, #1
 8004478:	d101      	bne.n	800447e <HAL_PCD_EP_Open+0x94>
 800447a:	2302      	movs	r3, #2
 800447c:	e00e      	b.n	800449c <HAL_PCD_EP_Open+0xb2>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68f9      	ldr	r1, [r7, #12]
 800448c:	4618      	mov	r0, r3
 800448e:	f003 f9af 	bl	80077f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 800449a:	7afb      	ldrb	r3, [r7, #11]
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
 80044ac:	460b      	mov	r3, r1
 80044ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80044b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	da0e      	bge.n	80044d6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044b8:	78fb      	ldrb	r3, [r7, #3]
 80044ba:	f003 0207 	and.w	r2, r3, #7
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	00db      	lsls	r3, r3, #3
 80044c6:	3310      	adds	r3, #16
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	4413      	add	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2201      	movs	r2, #1
 80044d2:	705a      	strb	r2, [r3, #1]
 80044d4:	e00e      	b.n	80044f4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044d6:	78fb      	ldrb	r3, [r7, #3]
 80044d8:	f003 0207 	and.w	r2, r3, #7
 80044dc:	4613      	mov	r3, r2
 80044de:	009b      	lsls	r3, r3, #2
 80044e0:	4413      	add	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	4413      	add	r3, r2
 80044ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80044f4:	78fb      	ldrb	r3, [r7, #3]
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004506:	2b01      	cmp	r3, #1
 8004508:	d101      	bne.n	800450e <HAL_PCD_EP_Close+0x6a>
 800450a:	2302      	movs	r3, #2
 800450c:	e00e      	b.n	800452c <HAL_PCD_EP_Close+0x88>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	68f9      	ldr	r1, [r7, #12]
 800451c:	4618      	mov	r0, r3
 800451e:	f003 fd2b 	bl	8007f78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	3710      	adds	r7, #16
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	607a      	str	r2, [r7, #4]
 800453e:	603b      	str	r3, [r7, #0]
 8004540:	460b      	mov	r3, r1
 8004542:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004544:	7afb      	ldrb	r3, [r7, #11]
 8004546:	f003 0207 	and.w	r2, r3, #7
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	4413      	add	r3, r2
 800455a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	2200      	movs	r2, #0
 800456c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2200      	movs	r2, #0
 8004572:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004574:	7afb      	ldrb	r3, [r7, #11]
 8004576:	f003 0307 	and.w	r3, r3, #7
 800457a:	b2da      	uxtb	r2, r3
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	6979      	ldr	r1, [r7, #20]
 8004586:	4618      	mov	r0, r3
 8004588:	f003 fee3 	bl	8008352 <USB_EPStartXfer>

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3718      	adds	r7, #24
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004596:	b480      	push	{r7}
 8004598:	b083      	sub	sp, #12
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
 800459e:	460b      	mov	r3, r1
 80045a0:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80045a2:	78fb      	ldrb	r3, [r7, #3]
 80045a4:	f003 0207 	and.w	r2, r3, #7
 80045a8:	6879      	ldr	r1, [r7, #4]
 80045aa:	4613      	mov	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	4413      	add	r3, r2
 80045b0:	00db      	lsls	r3, r3, #3
 80045b2:	440b      	add	r3, r1
 80045b4:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80045b8:	681b      	ldr	r3, [r3, #0]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr

080045c6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80045c6:	b580      	push	{r7, lr}
 80045c8:	b086      	sub	sp, #24
 80045ca:	af00      	add	r7, sp, #0
 80045cc:	60f8      	str	r0, [r7, #12]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	603b      	str	r3, [r7, #0]
 80045d2:	460b      	mov	r3, r1
 80045d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045d6:	7afb      	ldrb	r3, [r7, #11]
 80045d8:	f003 0207 	and.w	r2, r3, #7
 80045dc:	4613      	mov	r3, r2
 80045de:	009b      	lsls	r3, r3, #2
 80045e0:	4413      	add	r3, r2
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	3310      	adds	r3, #16
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4413      	add	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	683a      	ldr	r2, [r7, #0]
 80045f6:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	683a      	ldr	r2, [r7, #0]
 8004604:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	2200      	movs	r2, #0
 800460a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	2201      	movs	r2, #1
 8004610:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004612:	7afb      	ldrb	r3, [r7, #11]
 8004614:	f003 0307 	and.w	r3, r3, #7
 8004618:	b2da      	uxtb	r2, r3
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	6979      	ldr	r1, [r7, #20]
 8004624:	4618      	mov	r0, r3
 8004626:	f003 fe94 	bl	8008352 <USB_EPStartXfer>

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3718      	adds	r7, #24
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	460b      	mov	r3, r1
 800463e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	7912      	ldrb	r2, [r2, #4]
 800464a:	4293      	cmp	r3, r2
 800464c:	d901      	bls.n	8004652 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e03e      	b.n	80046d0 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004652:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004656:	2b00      	cmp	r3, #0
 8004658:	da0e      	bge.n	8004678 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800465a:	78fb      	ldrb	r3, [r7, #3]
 800465c:	f003 0207 	and.w	r2, r3, #7
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	3310      	adds	r3, #16
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	4413      	add	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2201      	movs	r2, #1
 8004674:	705a      	strb	r2, [r3, #1]
 8004676:	e00c      	b.n	8004692 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004678:	78fa      	ldrb	r2, [r7, #3]
 800467a:	4613      	mov	r3, r2
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	4413      	add	r3, r2
 8004680:	00db      	lsls	r3, r3, #3
 8004682:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	4413      	add	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004698:	78fb      	ldrb	r3, [r7, #3]
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d101      	bne.n	80046b2 <HAL_PCD_EP_SetStall+0x7e>
 80046ae:	2302      	movs	r3, #2
 80046b0:	e00e      	b.n	80046d0 <HAL_PCD_EP_SetStall+0x9c>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68f9      	ldr	r1, [r7, #12]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f005 f9f7 	bl	8009ab4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80046e4:	78fb      	ldrb	r3, [r7, #3]
 80046e6:	f003 030f 	and.w	r3, r3, #15
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	7912      	ldrb	r2, [r2, #4]
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d901      	bls.n	80046f6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e040      	b.n	8004778 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	da0e      	bge.n	800471c <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	f003 0207 	and.w	r2, r3, #7
 8004704:	4613      	mov	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	4413      	add	r3, r2
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	3310      	adds	r3, #16
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	4413      	add	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2201      	movs	r2, #1
 8004718:	705a      	strb	r2, [r3, #1]
 800471a:	e00e      	b.n	800473a <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800471c:	78fb      	ldrb	r3, [r7, #3]
 800471e:	f003 0207 	and.w	r2, r3, #7
 8004722:	4613      	mov	r3, r2
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	4413      	add	r3, r2
 8004728:	00db      	lsls	r3, r3, #3
 800472a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	4413      	add	r3, r2
 8004732:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	b2da      	uxtb	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8004752:	2b01      	cmp	r3, #1
 8004754:	d101      	bne.n	800475a <HAL_PCD_EP_ClrStall+0x82>
 8004756:	2302      	movs	r3, #2
 8004758:	e00e      	b.n	8004778 <HAL_PCD_EP_ClrStall+0xa0>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	68f9      	ldr	r1, [r7, #12]
 8004768:	4618      	mov	r0, r3
 800476a:	f005 f9f4 	bl	8009b56 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b096      	sub	sp, #88	; 0x58
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004788:	e3ae      	b.n	8004ee8 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004792:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8004796:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800479a:	b2db      	uxtb	r3, r3
 800479c:	f003 030f 	and.w	r3, r3, #15
 80047a0:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 80047a4:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f040 8170 	bne.w	8004a8e <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80047ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80047b2:	f003 0310 	and.w	r3, r3, #16
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d14d      	bne.n	8004856 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80047c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ca:	81fb      	strh	r3, [r7, #14]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	89fb      	ldrh	r3, [r7, #14]
 80047d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047da:	b29b      	uxth	r3, r3
 80047dc:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3310      	adds	r3, #16
 80047e2:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	461a      	mov	r2, r3
 80047f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	00db      	lsls	r3, r3, #3
 80047f6:	4413      	add	r3, r2
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	6812      	ldr	r2, [r2, #0]
 80047fc:	4413      	add	r3, r2
 80047fe:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004802:	881b      	ldrh	r3, [r3, #0]
 8004804:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800480a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800480c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004812:	69db      	ldr	r3, [r3, #28]
 8004814:	441a      	add	r2, r3
 8004816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004818:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800481a:	2100      	movs	r1, #0
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f007 f978 	bl	800bb12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	7b1b      	ldrb	r3, [r3, #12]
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 835d 	beq.w	8004ee8 <PCD_EP_ISR_Handler+0x768>
 800482e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	2b00      	cmp	r3, #0
 8004834:	f040 8358 	bne.w	8004ee8 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	7b1b      	ldrb	r3, [r3, #12]
 800483c:	b2db      	uxtb	r3, r3
 800483e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004842:	b2da      	uxtb	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	b292      	uxth	r2, r2
 800484a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	731a      	strb	r2, [r3, #12]
 8004854:	e348      	b.n	8004ee8 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800485c:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8004868:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800486c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004870:	2b00      	cmp	r3, #0
 8004872:	d032      	beq.n	80048da <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800487c:	b29b      	uxth	r3, r3
 800487e:	461a      	mov	r2, r3
 8004880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	00db      	lsls	r3, r3, #3
 8004886:	4413      	add	r3, r2
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6812      	ldr	r2, [r2, #0]
 800488c:	4413      	add	r3, r2
 800488e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004892:	881b      	ldrh	r3, [r3, #0]
 8004894:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004898:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800489a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6818      	ldr	r0, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	f503 7126 	add.w	r1, r3, #664	; 0x298
 80048a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048a8:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80048aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048ac:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	f005 fa7c 	bl	8009dac <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	881b      	ldrh	r3, [r3, #0]
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	f640 738f 	movw	r3, #3983	; 0xf8f
 80048c0:	4013      	ands	r3, r2
 80048c2:	823b      	strh	r3, [r7, #16]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	8a3a      	ldrh	r2, [r7, #16]
 80048ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048ce:	b292      	uxth	r2, r2
 80048d0:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f007 f8f0 	bl	800bab8 <HAL_PCD_SetupStageCallback>
 80048d8:	e306      	b.n	8004ee8 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80048da:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 80048de:	2b00      	cmp	r3, #0
 80048e0:	f280 8302 	bge.w	8004ee8 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	881b      	ldrh	r3, [r3, #0]
 80048ea:	b29a      	uxth	r2, r3
 80048ec:	f640 738f 	movw	r3, #3983	; 0xf8f
 80048f0:	4013      	ands	r3, r2
 80048f2:	83fb      	strh	r3, [r7, #30]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	8bfa      	ldrh	r2, [r7, #30]
 80048fa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80048fe:	b292      	uxth	r2, r2
 8004900:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800490a:	b29b      	uxth	r3, r3
 800490c:	461a      	mov	r2, r3
 800490e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	4413      	add	r3, r2
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6812      	ldr	r2, [r2, #0]
 800491a:	4413      	add	r3, r2
 800491c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004920:	881b      	ldrh	r3, [r3, #0]
 8004922:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004926:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004928:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800492a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800492c:	69db      	ldr	r3, [r3, #28]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d019      	beq.n	8004966 <PCD_EP_ISR_Handler+0x1e6>
 8004932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d015      	beq.n	8004966 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004940:	6959      	ldr	r1, [r3, #20]
 8004942:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004944:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8004946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004948:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800494a:	b29b      	uxth	r3, r3
 800494c:	f005 fa2e 	bl	8009dac <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8004950:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004952:	695a      	ldr	r2, [r3, #20]
 8004954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004956:	69db      	ldr	r3, [r3, #28]
 8004958:	441a      	add	r2, r3
 800495a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800495c:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800495e:	2100      	movs	r1, #0
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f007 f8bb 	bl	800badc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8004970:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004974:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004978:	2b00      	cmp	r3, #0
 800497a:	f040 82b5 	bne.w	8004ee8 <PCD_EP_ISR_Handler+0x768>
 800497e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004982:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004986:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800498a:	f000 82ad 	beq.w	8004ee8 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	61bb      	str	r3, [r7, #24]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800499c:	b29b      	uxth	r3, r3
 800499e:	461a      	mov	r2, r3
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	4413      	add	r3, r2
 80049a4:	61bb      	str	r3, [r7, #24]
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80049ac:	617b      	str	r3, [r7, #20]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	881b      	ldrh	r3, [r3, #0]
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049b8:	b29a      	uxth	r2, r3
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	801a      	strh	r2, [r3, #0]
 80049be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	2b3e      	cmp	r3, #62	; 0x3e
 80049c4:	d91d      	bls.n	8004a02 <PCD_EP_ISR_Handler+0x282>
 80049c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	095b      	lsrs	r3, r3, #5
 80049cc:	647b      	str	r3, [r7, #68]	; 0x44
 80049ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 031f 	and.w	r3, r3, #31
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d102      	bne.n	80049e0 <PCD_EP_ISR_Handler+0x260>
 80049da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049dc:	3b01      	subs	r3, #1
 80049de:	647b      	str	r3, [r7, #68]	; 0x44
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	881b      	ldrh	r3, [r3, #0]
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	029b      	lsls	r3, r3, #10
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	4313      	orrs	r3, r2
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	801a      	strh	r2, [r3, #0]
 8004a00:	e026      	b.n	8004a50 <PCD_EP_ISR_Handler+0x2d0>
 8004a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a04:	691b      	ldr	r3, [r3, #16]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10a      	bne.n	8004a20 <PCD_EP_ISR_Handler+0x2a0>
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	801a      	strh	r2, [r3, #0]
 8004a1e:	e017      	b.n	8004a50 <PCD_EP_ISR_Handler+0x2d0>
 8004a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	085b      	lsrs	r3, r3, #1
 8004a26:	647b      	str	r3, [r7, #68]	; 0x44
 8004a28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a2a:	691b      	ldr	r3, [r3, #16]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d002      	beq.n	8004a3a <PCD_EP_ISR_Handler+0x2ba>
 8004a34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a36:	3301      	adds	r3, #1
 8004a38:	647b      	str	r3, [r7, #68]	; 0x44
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	881b      	ldrh	r3, [r3, #0]
 8004a3e:	b29a      	uxth	r2, r3
 8004a40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	029b      	lsls	r3, r3, #10
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	881b      	ldrh	r3, [r3, #0]
 8004a56:	b29b      	uxth	r3, r3
 8004a58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a60:	827b      	strh	r3, [r7, #18]
 8004a62:	8a7b      	ldrh	r3, [r7, #18]
 8004a64:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a68:	827b      	strh	r3, [r7, #18]
 8004a6a:	8a7b      	ldrh	r3, [r7, #18]
 8004a6c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a70:	827b      	strh	r3, [r7, #18]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	8a7b      	ldrh	r3, [r7, #18]
 8004a78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	8013      	strh	r3, [r2, #0]
 8004a8c:	e22c      	b.n	8004ee8 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	461a      	mov	r2, r3
 8004a94:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	4413      	add	r3, r2
 8004a9c:	881b      	ldrh	r3, [r3, #0]
 8004a9e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8004aa2:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f280 80f6 	bge.w	8004c98 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	461a      	mov	r2, r3
 8004ab2:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8004ac2:	4013      	ands	r3, r2
 8004ac4:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	461a      	mov	r2, r3
 8004ace:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8004ada:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ade:	b292      	uxth	r2, r2
 8004ae0:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8004ae2:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	00db      	lsls	r3, r3, #3
 8004aee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	4413      	add	r3, r2
 8004af6:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8004af8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004afa:	7b1b      	ldrb	r3, [r3, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d123      	bne.n	8004b48 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b0e:	781b      	ldrb	r3, [r3, #0]
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	4413      	add	r3, r2
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6812      	ldr	r2, [r2, #0]
 8004b18:	4413      	add	r3, r2
 8004b1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004b1e:	881b      	ldrh	r3, [r3, #0]
 8004b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b24:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8004b28:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	f000 808e 	beq.w	8004c4e <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6818      	ldr	r0, [r3, #0]
 8004b36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b38:	6959      	ldr	r1, [r3, #20]
 8004b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b3c:	88da      	ldrh	r2, [r3, #6]
 8004b3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004b42:	f005 f933 	bl	8009dac <USB_ReadPMA>
 8004b46:	e082      	b.n	8004c4e <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8004b48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b4a:	78db      	ldrb	r3, [r3, #3]
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d10a      	bne.n	8004b66 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8004b50:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004b54:	461a      	mov	r2, r3
 8004b56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f9d3 	bl	8004f04 <HAL_PCD_EP_DB_Receive>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8004b64:	e073      	b.n	8004c4e <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	4413      	add	r3, r2
 8004b74:	881b      	ldrh	r3, [r3, #0]
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b80:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	441a      	add	r2, r3
 8004b92:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8004b96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ba2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ba6:	b29b      	uxth	r3, r3
 8004ba8:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	4413      	add	r3, r2
 8004bb8:	881b      	ldrh	r3, [r3, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d022      	beq.n	8004c0a <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bcc:	b29b      	uxth	r3, r3
 8004bce:	461a      	mov	r2, r3
 8004bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	00db      	lsls	r3, r3, #3
 8004bd6:	4413      	add	r3, r2
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	6812      	ldr	r2, [r2, #0]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004be2:	881b      	ldrh	r3, [r3, #0]
 8004be4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004be8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004bec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d02c      	beq.n	8004c4e <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bfa:	6959      	ldr	r1, [r3, #20]
 8004bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bfe:	891a      	ldrh	r2, [r3, #8]
 8004c00:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004c04:	f005 f8d2 	bl	8009dac <USB_ReadPMA>
 8004c08:	e021      	b.n	8004c4e <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c12:	b29b      	uxth	r3, r3
 8004c14:	461a      	mov	r2, r3
 8004c16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	00db      	lsls	r3, r3, #3
 8004c1c:	4413      	add	r3, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6812      	ldr	r2, [r2, #0]
 8004c22:	4413      	add	r3, r2
 8004c24:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004c28:	881b      	ldrh	r3, [r3, #0]
 8004c2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004c2e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8004c32:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d009      	beq.n	8004c4e <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c40:	6959      	ldr	r1, [r3, #20]
 8004c42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c44:	895a      	ldrh	r2, [r3, #10]
 8004c46:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004c4a:	f005 f8af 	bl	8009dac <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8004c4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c50:	69da      	ldr	r2, [r3, #28]
 8004c52:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004c56:	441a      	add	r2, r3
 8004c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c5a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8004c5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c5e:	695a      	ldr	r2, [r3, #20]
 8004c60:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8004c64:	441a      	add	r2, r3
 8004c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c68:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8004c6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d005      	beq.n	8004c7e <PCD_EP_ISR_Handler+0x4fe>
 8004c72:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8004c76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c78:	691b      	ldr	r3, [r3, #16]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d206      	bcs.n	8004c8c <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8004c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	4619      	mov	r1, r3
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f006 ff29 	bl	800badc <HAL_PCD_DataOutStageCallback>
 8004c8a:	e005      	b.n	8004c98 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c92:	4618      	mov	r0, r3
 8004c94:	f003 fb5d 	bl	8008352 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8004c98:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	f000 8121 	beq.w	8004ee8 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8004ca6:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8004caa:	4613      	mov	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	4413      	add	r3, r2
 8004cb0:	00db      	lsls	r3, r3, #3
 8004cb2:	3310      	adds	r3, #16
 8004cb4:	687a      	ldr	r2, [r7, #4]
 8004cb6:	4413      	add	r3, r2
 8004cb8:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	461a      	mov	r2, r3
 8004cc0:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	4413      	add	r3, r2
 8004cc8:	881b      	ldrh	r3, [r3, #0]
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8004cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	461a      	mov	r2, r3
 8004cde:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	441a      	add	r2, r3
 8004ce6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8004cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cf8:	78db      	ldrb	r3, [r3, #3]
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	f040 80a2 	bne.w	8004e44 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8004d00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d02:	2200      	movs	r2, #0
 8004d04:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8004d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d08:	7b1b      	ldrb	r3, [r3, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	f000 8093 	beq.w	8004e36 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004d10:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d046      	beq.n	8004daa <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d1e:	785b      	ldrb	r3, [r3, #1]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d126      	bne.n	8004d72 <PCD_EP_ISR_Handler+0x5f2>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	461a      	mov	r2, r3
 8004d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d38:	4413      	add	r3, r2
 8004d3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	00da      	lsls	r2, r3, #3
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	4413      	add	r3, r2
 8004d46:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004d4a:	623b      	str	r3, [r7, #32]
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	6a3b      	ldr	r3, [r7, #32]
 8004d5a:	801a      	strh	r2, [r3, #0]
 8004d5c:	6a3b      	ldr	r3, [r7, #32]
 8004d5e:	881b      	ldrh	r3, [r3, #0]
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	6a3b      	ldr	r3, [r7, #32]
 8004d6e:	801a      	strh	r2, [r3, #0]
 8004d70:	e061      	b.n	8004e36 <PCD_EP_ISR_Handler+0x6b6>
 8004d72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d74:	785b      	ldrb	r3, [r3, #1]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d15d      	bne.n	8004e36 <PCD_EP_ISR_Handler+0x6b6>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d88:	b29b      	uxth	r3, r3
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8e:	4413      	add	r3, r2
 8004d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	00da      	lsls	r2, r3, #3
 8004d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004da0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da4:	2200      	movs	r2, #0
 8004da6:	801a      	strh	r2, [r3, #0]
 8004da8:	e045      	b.n	8004e36 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004db2:	785b      	ldrb	r3, [r3, #1]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d126      	bne.n	8004e06 <PCD_EP_ISR_Handler+0x686>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	461a      	mov	r2, r3
 8004dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dcc:	4413      	add	r3, r2
 8004dce:	637b      	str	r3, [r7, #52]	; 0x34
 8004dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	00da      	lsls	r2, r3, #3
 8004dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd8:	4413      	add	r3, r2
 8004dda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004dde:	633b      	str	r3, [r7, #48]	; 0x30
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de2:	881b      	ldrh	r3, [r3, #0]
 8004de4:	b29b      	uxth	r3, r3
 8004de6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004dea:	b29a      	uxth	r2, r3
 8004dec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dee:	801a      	strh	r2, [r3, #0]
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	881b      	ldrh	r3, [r3, #0]
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dfa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	801a      	strh	r2, [r3, #0]
 8004e04:	e017      	b.n	8004e36 <PCD_EP_ISR_Handler+0x6b6>
 8004e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e08:	785b      	ldrb	r3, [r3, #1]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d113      	bne.n	8004e36 <PCD_EP_ISR_Handler+0x6b6>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	461a      	mov	r2, r3
 8004e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e1c:	4413      	add	r3, r2
 8004e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	00da      	lsls	r2, r3, #3
 8004e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e28:	4413      	add	r3, r2
 8004e2a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8004e2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e32:	2200      	movs	r2, #0
 8004e34:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004e36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e38:	781b      	ldrb	r3, [r3, #0]
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f006 fe68 	bl	800bb12 <HAL_PCD_DataInStageCallback>
 8004e42:	e051      	b.n	8004ee8 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8004e44:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d144      	bne.n	8004eda <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	461a      	mov	r2, r3
 8004e5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	00db      	lsls	r3, r3, #3
 8004e62:	4413      	add	r3, r2
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6812      	ldr	r2, [r2, #0]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004e6e:	881b      	ldrh	r3, [r3, #0]
 8004e70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004e74:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8004e78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e7a:	699a      	ldr	r2, [r3, #24]
 8004e7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d907      	bls.n	8004e94 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8004e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e86:	699a      	ldr	r2, [r3, #24]
 8004e88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004e8c:	1ad2      	subs	r2, r2, r3
 8004e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e90:	619a      	str	r2, [r3, #24]
 8004e92:	e002      	b.n	8004e9a <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8004e94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e96:	2200      	movs	r2, #0
 8004e98:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8004e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8004ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f006 fe32 	bl	800bb12 <HAL_PCD_DataInStageCallback>
 8004eae:	e01b      	b.n	8004ee8 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8004eb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eb2:	695a      	ldr	r2, [r3, #20]
 8004eb4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004eb8:	441a      	add	r2, r3
 8004eba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ebc:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8004ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ec0:	69da      	ldr	r2, [r3, #28]
 8004ec2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004ec6:	441a      	add	r2, r3
 8004ec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004eca:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f003 fa3d 	bl	8008352 <USB_EPStartXfer>
 8004ed8:	e006      	b.n	8004ee8 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8004eda:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ede:	461a      	mov	r2, r3
 8004ee0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ee2:	6878      	ldr	r0, [r7, #4]
 8004ee4:	f000 f917 	bl	8005116 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	b21b      	sxth	r3, r3
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f6ff ac48 	blt.w	800478a <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3758      	adds	r7, #88	; 0x58
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b088      	sub	sp, #32
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8004f12:	88fb      	ldrh	r3, [r7, #6]
 8004f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d07c      	beq.n	8005016 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	461a      	mov	r2, r3
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	00db      	lsls	r3, r3, #3
 8004f2e:	4413      	add	r3, r2
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	4413      	add	r3, r2
 8004f36:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004f40:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	699a      	ldr	r2, [r3, #24]
 8004f46:	8b7b      	ldrh	r3, [r7, #26]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d306      	bcc.n	8004f5a <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	699a      	ldr	r2, [r3, #24]
 8004f50:	8b7b      	ldrh	r3, [r7, #26]
 8004f52:	1ad2      	subs	r2, r2, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	619a      	str	r2, [r3, #24]
 8004f58:	e002      	b.n	8004f60 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d123      	bne.n	8004fb0 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	461a      	mov	r2, r3
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	881b      	ldrh	r3, [r3, #0]
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f82:	833b      	strh	r3, [r7, #24]
 8004f84:	8b3b      	ldrh	r3, [r7, #24]
 8004f86:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004f8a:	833b      	strh	r3, [r7, #24]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	441a      	add	r2, r3
 8004f9a:	8b3b      	ldrh	r3, [r7, #24]
 8004f9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8004fb0:	88fb      	ldrh	r3, [r7, #6]
 8004fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d01f      	beq.n	8004ffa <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd4:	82fb      	strh	r3, [r7, #22]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	461a      	mov	r2, r3
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	441a      	add	r2, r3
 8004fe4:	8afb      	ldrh	r3, [r7, #22]
 8004fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ff2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8004ffa:	8b7b      	ldrh	r3, [r7, #26]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	f000 8085 	beq.w	800510c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6818      	ldr	r0, [r3, #0]
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	6959      	ldr	r1, [r3, #20]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	891a      	ldrh	r2, [r3, #8]
 800500e:	8b7b      	ldrh	r3, [r7, #26]
 8005010:	f004 fecc 	bl	8009dac <USB_ReadPMA>
 8005014:	e07a      	b.n	800510c <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800501e:	b29b      	uxth	r3, r3
 8005020:	461a      	mov	r2, r3
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	4413      	add	r3, r2
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	6812      	ldr	r2, [r2, #0]
 800502e:	4413      	add	r3, r2
 8005030:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005034:	881b      	ldrh	r3, [r3, #0]
 8005036:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800503a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	699a      	ldr	r2, [r3, #24]
 8005040:	8b7b      	ldrh	r3, [r7, #26]
 8005042:	429a      	cmp	r2, r3
 8005044:	d306      	bcc.n	8005054 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	8b7b      	ldrh	r3, [r7, #26]
 800504c:	1ad2      	subs	r2, r2, r3
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	619a      	str	r2, [r3, #24]
 8005052:	e002      	b.n	800505a <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2200      	movs	r2, #0
 8005058:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d123      	bne.n	80050aa <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	881b      	ldrh	r3, [r3, #0]
 8005072:	b29b      	uxth	r3, r3
 8005074:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507c:	83fb      	strh	r3, [r7, #30]
 800507e:	8bfb      	ldrh	r3, [r7, #30]
 8005080:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005084:	83fb      	strh	r3, [r7, #30]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	461a      	mov	r2, r3
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	441a      	add	r2, r3
 8005094:	8bfb      	ldrh	r3, [r7, #30]
 8005096:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800509a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800509e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80050aa:	88fb      	ldrh	r3, [r7, #6]
 80050ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d11f      	bne.n	80050f4 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	461a      	mov	r2, r3
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	009b      	lsls	r3, r3, #2
 80050c0:	4413      	add	r3, r2
 80050c2:	881b      	ldrh	r3, [r3, #0]
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ce:	83bb      	strh	r3, [r7, #28]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	461a      	mov	r2, r3
 80050d6:	68bb      	ldr	r3, [r7, #8]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	441a      	add	r2, r3
 80050de:	8bbb      	ldrh	r3, [r7, #28]
 80050e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80050f4:	8b7b      	ldrh	r3, [r7, #26]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d008      	beq.n	800510c <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6818      	ldr	r0, [r3, #0]
 80050fe:	68bb      	ldr	r3, [r7, #8]
 8005100:	6959      	ldr	r1, [r3, #20]
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	895a      	ldrh	r2, [r3, #10]
 8005106:	8b7b      	ldrh	r3, [r7, #26]
 8005108:	f004 fe50 	bl	8009dac <USB_ReadPMA>
    }
  }

  return count;
 800510c:	8b7b      	ldrh	r3, [r7, #26]
}
 800510e:	4618      	mov	r0, r3
 8005110:	3720      	adds	r7, #32
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}

08005116 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005116:	b580      	push	{r7, lr}
 8005118:	b0a4      	sub	sp, #144	; 0x90
 800511a:	af00      	add	r7, sp, #0
 800511c:	60f8      	str	r0, [r7, #12]
 800511e:	60b9      	str	r1, [r7, #8]
 8005120:	4613      	mov	r3, r2
 8005122:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005124:	88fb      	ldrh	r3, [r7, #6]
 8005126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 81db 	beq.w	80054e6 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005138:	b29b      	uxth	r3, r3
 800513a:	461a      	mov	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	00db      	lsls	r3, r3, #3
 8005142:	4413      	add	r3, r2
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	6812      	ldr	r2, [r2, #0]
 8005148:	4413      	add	r3, r2
 800514a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800514e:	881b      	ldrh	r3, [r3, #0]
 8005150:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005154:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	699a      	ldr	r2, [r3, #24]
 800515c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005160:	429a      	cmp	r2, r3
 8005162:	d907      	bls.n	8005174 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	699a      	ldr	r2, [r3, #24]
 8005168:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800516c:	1ad2      	subs	r2, r2, r3
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	619a      	str	r2, [r3, #24]
 8005172:	e002      	b.n	800517a <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2200      	movs	r2, #0
 8005178:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	2b00      	cmp	r3, #0
 8005180:	f040 80b9 	bne.w	80052f6 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	785b      	ldrb	r3, [r3, #1]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d126      	bne.n	80051da <HAL_PCD_EP_DB_Transmit+0xc4>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519a:	b29b      	uxth	r3, r3
 800519c:	461a      	mov	r2, r3
 800519e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051a0:	4413      	add	r3, r2
 80051a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	00da      	lsls	r2, r3, #3
 80051aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ac:	4413      	add	r3, r2
 80051ae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80051b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80051b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80051be:	b29a      	uxth	r2, r3
 80051c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c2:	801a      	strh	r2, [r3, #0]
 80051c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c6:	881b      	ldrh	r3, [r3, #0]
 80051c8:	b29b      	uxth	r3, r3
 80051ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	801a      	strh	r2, [r3, #0]
 80051d8:	e01a      	b.n	8005210 <HAL_PCD_EP_DB_Transmit+0xfa>
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	785b      	ldrb	r3, [r3, #1]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d116      	bne.n	8005210 <HAL_PCD_EP_DB_Transmit+0xfa>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	637b      	str	r3, [r7, #52]	; 0x34
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	461a      	mov	r2, r3
 80051f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051f6:	4413      	add	r3, r2
 80051f8:	637b      	str	r3, [r7, #52]	; 0x34
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	00da      	lsls	r2, r3, #3
 8005200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005202:	4413      	add	r3, r2
 8005204:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005208:	633b      	str	r3, [r7, #48]	; 0x30
 800520a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800520c:	2200      	movs	r2, #0
 800520e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	627b      	str	r3, [r7, #36]	; 0x24
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	785b      	ldrb	r3, [r3, #1]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d126      	bne.n	800526c <HAL_PCD_EP_DB_Transmit+0x156>
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	61fb      	str	r3, [r7, #28]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800522c:	b29b      	uxth	r3, r3
 800522e:	461a      	mov	r2, r3
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	4413      	add	r3, r2
 8005234:	61fb      	str	r3, [r7, #28]
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	00da      	lsls	r2, r3, #3
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	4413      	add	r3, r2
 8005240:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005244:	61bb      	str	r3, [r7, #24]
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	881b      	ldrh	r3, [r3, #0]
 800524a:	b29b      	uxth	r3, r3
 800524c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005250:	b29a      	uxth	r2, r3
 8005252:	69bb      	ldr	r3, [r7, #24]
 8005254:	801a      	strh	r2, [r3, #0]
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	881b      	ldrh	r3, [r3, #0]
 800525a:	b29b      	uxth	r3, r3
 800525c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005260:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005264:	b29a      	uxth	r2, r3
 8005266:	69bb      	ldr	r3, [r7, #24]
 8005268:	801a      	strh	r2, [r3, #0]
 800526a:	e017      	b.n	800529c <HAL_PCD_EP_DB_Transmit+0x186>
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	785b      	ldrb	r3, [r3, #1]
 8005270:	2b01      	cmp	r3, #1
 8005272:	d113      	bne.n	800529c <HAL_PCD_EP_DB_Transmit+0x186>
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800527c:	b29b      	uxth	r3, r3
 800527e:	461a      	mov	r2, r3
 8005280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005282:	4413      	add	r3, r2
 8005284:	627b      	str	r3, [r7, #36]	; 0x24
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	00da      	lsls	r2, r3, #3
 800528c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528e:	4413      	add	r3, r2
 8005290:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005294:	623b      	str	r3, [r7, #32]
 8005296:	6a3b      	ldr	r3, [r7, #32]
 8005298:	2200      	movs	r2, #0
 800529a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	4619      	mov	r1, r3
 80052a2:	68f8      	ldr	r0, [r7, #12]
 80052a4:	f006 fc35 	bl	800bb12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80052a8:	88fb      	ldrh	r3, [r7, #6]
 80052aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	f000 82fa 	beq.w	80058a8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	461a      	mov	r2, r3
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	4413      	add	r3, r2
 80052c2:	881b      	ldrh	r3, [r3, #0]
 80052c4:	b29b      	uxth	r3, r3
 80052c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ce:	82fb      	strh	r3, [r7, #22]
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	461a      	mov	r2, r3
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	441a      	add	r2, r3
 80052de:	8afb      	ldrh	r3, [r7, #22]
 80052e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80052ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	8013      	strh	r3, [r2, #0]
 80052f4:	e2d8      	b.n	80058a8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80052f6:	88fb      	ldrh	r3, [r7, #6]
 80052f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d021      	beq.n	8005344 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	461a      	mov	r2, r3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	781b      	ldrb	r3, [r3, #0]
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	881b      	ldrh	r3, [r3, #0]
 8005310:	b29b      	uxth	r3, r3
 8005312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800531a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	461a      	mov	r2, r3
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	781b      	ldrb	r3, [r3, #0]
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	441a      	add	r2, r3
 800532c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800533c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005340:	b29b      	uxth	r3, r3
 8005342:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800534a:	2b01      	cmp	r3, #1
 800534c:	f040 82ac 	bne.w	80058a8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	695a      	ldr	r2, [r3, #20]
 8005354:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005358:	441a      	add	r2, r3
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	69da      	ldr	r2, [r3, #28]
 8005362:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005366:	441a      	add	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	6a1a      	ldr	r2, [r3, #32]
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	429a      	cmp	r2, r3
 8005376:	d30b      	bcc.n	8005390 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	691b      	ldr	r3, [r3, #16]
 800537c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	6a1a      	ldr	r2, [r3, #32]
 8005384:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005388:	1ad2      	subs	r2, r2, r3
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	621a      	str	r2, [r3, #32]
 800538e:	e017      	b.n	80053c0 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	6a1b      	ldr	r3, [r3, #32]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d108      	bne.n	80053aa <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8005398:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800539c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80053a8:	e00a      	b.n	80053c0 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	6a1b      	ldr	r3, [r3, #32]
 80053b6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	2200      	movs	r2, #0
 80053be:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	785b      	ldrb	r3, [r3, #1]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d165      	bne.n	8005494 <HAL_PCD_EP_DB_Transmit+0x37e>
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	461a      	mov	r2, r3
 80053da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053dc:	4413      	add	r3, r2
 80053de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	00da      	lsls	r2, r3, #3
 80053e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053e8:	4413      	add	r3, r2
 80053ea:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80053ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80053f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053f2:	881b      	ldrh	r3, [r3, #0]
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053fe:	801a      	strh	r2, [r3, #0]
 8005400:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005404:	2b3e      	cmp	r3, #62	; 0x3e
 8005406:	d91d      	bls.n	8005444 <HAL_PCD_EP_DB_Transmit+0x32e>
 8005408:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800540c:	095b      	lsrs	r3, r3, #5
 800540e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005410:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005414:	f003 031f 	and.w	r3, r3, #31
 8005418:	2b00      	cmp	r3, #0
 800541a:	d102      	bne.n	8005422 <HAL_PCD_EP_DB_Transmit+0x30c>
 800541c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800541e:	3b01      	subs	r3, #1
 8005420:	64bb      	str	r3, [r7, #72]	; 0x48
 8005422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	b29a      	uxth	r2, r3
 8005428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800542a:	b29b      	uxth	r3, r3
 800542c:	029b      	lsls	r3, r3, #10
 800542e:	b29b      	uxth	r3, r3
 8005430:	4313      	orrs	r3, r2
 8005432:	b29b      	uxth	r3, r3
 8005434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800543c:	b29a      	uxth	r2, r3
 800543e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005440:	801a      	strh	r2, [r3, #0]
 8005442:	e044      	b.n	80054ce <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005444:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005448:	2b00      	cmp	r3, #0
 800544a:	d10a      	bne.n	8005462 <HAL_PCD_EP_DB_Transmit+0x34c>
 800544c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544e:	881b      	ldrh	r3, [r3, #0]
 8005450:	b29b      	uxth	r3, r3
 8005452:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005456:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800545a:	b29a      	uxth	r2, r3
 800545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545e:	801a      	strh	r2, [r3, #0]
 8005460:	e035      	b.n	80054ce <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005462:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005466:	085b      	lsrs	r3, r3, #1
 8005468:	64bb      	str	r3, [r7, #72]	; 0x48
 800546a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <HAL_PCD_EP_DB_Transmit+0x366>
 8005476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005478:	3301      	adds	r3, #1
 800547a:	64bb      	str	r3, [r7, #72]	; 0x48
 800547c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	b29a      	uxth	r2, r3
 8005482:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005484:	b29b      	uxth	r3, r3
 8005486:	029b      	lsls	r3, r3, #10
 8005488:	b29b      	uxth	r3, r3
 800548a:	4313      	orrs	r3, r2
 800548c:	b29a      	uxth	r2, r3
 800548e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005490:	801a      	strh	r2, [r3, #0]
 8005492:	e01c      	b.n	80054ce <HAL_PCD_EP_DB_Transmit+0x3b8>
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	785b      	ldrb	r3, [r3, #1]
 8005498:	2b01      	cmp	r3, #1
 800549a:	d118      	bne.n	80054ce <HAL_PCD_EP_DB_Transmit+0x3b8>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	647b      	str	r3, [r7, #68]	; 0x44
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054aa:	b29b      	uxth	r3, r3
 80054ac:	461a      	mov	r2, r3
 80054ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054b0:	4413      	add	r3, r2
 80054b2:	647b      	str	r3, [r7, #68]	; 0x44
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	00da      	lsls	r2, r3, #3
 80054ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054bc:	4413      	add	r3, r2
 80054be:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80054c2:	643b      	str	r3, [r7, #64]	; 0x40
 80054c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054c8:	b29a      	uxth	r2, r3
 80054ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054cc:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6818      	ldr	r0, [r3, #0]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	6959      	ldr	r1, [r3, #20]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	891a      	ldrh	r2, [r3, #8]
 80054da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80054de:	b29b      	uxth	r3, r3
 80054e0:	f004 fc22 	bl	8009d28 <USB_WritePMA>
 80054e4:	e1e0      	b.n	80058a8 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	461a      	mov	r2, r3
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	00db      	lsls	r3, r3, #3
 80054f8:	4413      	add	r3, r2
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	6812      	ldr	r2, [r2, #0]
 80054fe:	4413      	add	r3, r2
 8005500:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005504:	881b      	ldrh	r3, [r3, #0]
 8005506:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800550a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005516:	429a      	cmp	r2, r3
 8005518:	d307      	bcc.n	800552a <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	699a      	ldr	r2, [r3, #24]
 800551e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005522:	1ad2      	subs	r2, r2, r3
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	619a      	str	r2, [r3, #24]
 8005528:	e002      	b.n	8005530 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	2200      	movs	r2, #0
 800552e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	2b00      	cmp	r3, #0
 8005536:	f040 80c0 	bne.w	80056ba <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	785b      	ldrb	r3, [r3, #1]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d126      	bne.n	8005590 <HAL_PCD_EP_DB_Transmit+0x47a>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005550:	b29b      	uxth	r3, r3
 8005552:	461a      	mov	r2, r3
 8005554:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005556:	4413      	add	r3, r2
 8005558:	67fb      	str	r3, [r7, #124]	; 0x7c
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	00da      	lsls	r2, r3, #3
 8005560:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005562:	4413      	add	r3, r2
 8005564:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8005568:	67bb      	str	r3, [r7, #120]	; 0x78
 800556a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	b29b      	uxth	r3, r3
 8005570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005574:	b29a      	uxth	r2, r3
 8005576:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005578:	801a      	strh	r2, [r3, #0]
 800557a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800557c:	881b      	ldrh	r3, [r3, #0]
 800557e:	b29b      	uxth	r3, r3
 8005580:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005584:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005588:	b29a      	uxth	r2, r3
 800558a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800558c:	801a      	strh	r2, [r3, #0]
 800558e:	e01a      	b.n	80055c6 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	785b      	ldrb	r3, [r3, #1]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d116      	bne.n	80055c6 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	667b      	str	r3, [r7, #100]	; 0x64
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	461a      	mov	r2, r3
 80055aa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055ac:	4413      	add	r3, r2
 80055ae:	667b      	str	r3, [r7, #100]	; 0x64
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	00da      	lsls	r2, r3, #3
 80055b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055b8:	4413      	add	r3, r2
 80055ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80055be:	663b      	str	r3, [r7, #96]	; 0x60
 80055c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80055c2:	2200      	movs	r2, #0
 80055c4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	677b      	str	r3, [r7, #116]	; 0x74
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	785b      	ldrb	r3, [r3, #1]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d12b      	bne.n	800562c <HAL_PCD_EP_DB_Transmit+0x516>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055e2:	b29b      	uxth	r3, r3
 80055e4:	461a      	mov	r2, r3
 80055e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055e8:	4413      	add	r3, r2
 80055ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	00da      	lsls	r2, r3, #3
 80055f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80055f4:	4413      	add	r3, r2
 80055f6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80055fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055fe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005602:	881b      	ldrh	r3, [r3, #0]
 8005604:	b29b      	uxth	r3, r3
 8005606:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800560a:	b29a      	uxth	r2, r3
 800560c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005610:	801a      	strh	r2, [r3, #0]
 8005612:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005616:	881b      	ldrh	r3, [r3, #0]
 8005618:	b29b      	uxth	r3, r3
 800561a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800561e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005622:	b29a      	uxth	r2, r3
 8005624:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005628:	801a      	strh	r2, [r3, #0]
 800562a:	e017      	b.n	800565c <HAL_PCD_EP_DB_Transmit+0x546>
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	785b      	ldrb	r3, [r3, #1]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d113      	bne.n	800565c <HAL_PCD_EP_DB_Transmit+0x546>
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800563c:	b29b      	uxth	r3, r3
 800563e:	461a      	mov	r2, r3
 8005640:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005642:	4413      	add	r3, r2
 8005644:	677b      	str	r3, [r7, #116]	; 0x74
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	00da      	lsls	r2, r3, #3
 800564c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800564e:	4413      	add	r3, r2
 8005650:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005654:	673b      	str	r3, [r7, #112]	; 0x70
 8005656:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005658:	2200      	movs	r2, #0
 800565a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	4619      	mov	r1, r3
 8005662:	68f8      	ldr	r0, [r7, #12]
 8005664:	f006 fa55 	bl	800bb12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8005668:	88fb      	ldrh	r3, [r7, #6]
 800566a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800566e:	2b00      	cmp	r3, #0
 8005670:	f040 811a 	bne.w	80058a8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	461a      	mov	r2, r3
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	4413      	add	r3, r2
 8005682:	881b      	ldrh	r3, [r3, #0]
 8005684:	b29b      	uxth	r3, r3
 8005686:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800568a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568e:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	461a      	mov	r2, r3
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	441a      	add	r2, r3
 80056a0:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80056a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	8013      	strh	r3, [r2, #0]
 80056b8:	e0f6      	b.n	80058a8 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80056ba:	88fb      	ldrh	r3, [r7, #6]
 80056bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d121      	bne.n	8005708 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	461a      	mov	r2, r3
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	881b      	ldrh	r3, [r3, #0]
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	461a      	mov	r2, r3
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	441a      	add	r2, r3
 80056f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80056f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005704:	b29b      	uxth	r3, r3
 8005706:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800570e:	2b01      	cmp	r3, #1
 8005710:	f040 80ca 	bne.w	80058a8 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	695a      	ldr	r2, [r3, #20]
 8005718:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800571c:	441a      	add	r2, r3
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	69da      	ldr	r2, [r3, #28]
 8005726:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800572a:	441a      	add	r2, r3
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	6a1a      	ldr	r2, [r3, #32]
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	691b      	ldr	r3, [r3, #16]
 8005738:	429a      	cmp	r2, r3
 800573a:	d30b      	bcc.n	8005754 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	6a1a      	ldr	r2, [r3, #32]
 8005748:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800574c:	1ad2      	subs	r2, r2, r3
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	621a      	str	r2, [r3, #32]
 8005752:	e017      	b.n	8005784 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d108      	bne.n	800576e <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 800575c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005760:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800576c:	e00a      	b.n	8005784 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	2200      	movs	r2, #0
 800577a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2200      	movs	r2, #0
 8005780:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	657b      	str	r3, [r7, #84]	; 0x54
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	785b      	ldrb	r3, [r3, #1]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d165      	bne.n	800585e <HAL_PCD_EP_DB_Transmit+0x748>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	461a      	mov	r2, r3
 80057a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057a6:	4413      	add	r3, r2
 80057a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	00da      	lsls	r2, r3, #3
 80057b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80057b2:	4413      	add	r3, r2
 80057b4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80057b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80057ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057bc:	881b      	ldrh	r3, [r3, #0]
 80057be:	b29b      	uxth	r3, r3
 80057c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057c8:	801a      	strh	r2, [r3, #0]
 80057ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057ce:	2b3e      	cmp	r3, #62	; 0x3e
 80057d0:	d91d      	bls.n	800580e <HAL_PCD_EP_DB_Transmit+0x6f8>
 80057d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057d6:	095b      	lsrs	r3, r3, #5
 80057d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80057da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80057de:	f003 031f 	and.w	r3, r3, #31
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d102      	bne.n	80057ec <HAL_PCD_EP_DB_Transmit+0x6d6>
 80057e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057e8:	3b01      	subs	r3, #1
 80057ea:	66bb      	str	r3, [r7, #104]	; 0x68
 80057ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80057ee:	881b      	ldrh	r3, [r3, #0]
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	029b      	lsls	r3, r3, #10
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	4313      	orrs	r3, r2
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005806:	b29a      	uxth	r2, r3
 8005808:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800580a:	801a      	strh	r2, [r3, #0]
 800580c:	e041      	b.n	8005892 <HAL_PCD_EP_DB_Transmit+0x77c>
 800580e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10a      	bne.n	800582c <HAL_PCD_EP_DB_Transmit+0x716>
 8005816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	b29b      	uxth	r3, r3
 800581c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005820:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005824:	b29a      	uxth	r2, r3
 8005826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005828:	801a      	strh	r2, [r3, #0]
 800582a:	e032      	b.n	8005892 <HAL_PCD_EP_DB_Transmit+0x77c>
 800582c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005830:	085b      	lsrs	r3, r3, #1
 8005832:	66bb      	str	r3, [r7, #104]	; 0x68
 8005834:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	d002      	beq.n	8005846 <HAL_PCD_EP_DB_Transmit+0x730>
 8005840:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005842:	3301      	adds	r3, #1
 8005844:	66bb      	str	r3, [r7, #104]	; 0x68
 8005846:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005848:	881b      	ldrh	r3, [r3, #0]
 800584a:	b29a      	uxth	r2, r3
 800584c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800584e:	b29b      	uxth	r3, r3
 8005850:	029b      	lsls	r3, r3, #10
 8005852:	b29b      	uxth	r3, r3
 8005854:	4313      	orrs	r3, r2
 8005856:	b29a      	uxth	r2, r3
 8005858:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800585a:	801a      	strh	r2, [r3, #0]
 800585c:	e019      	b.n	8005892 <HAL_PCD_EP_DB_Transmit+0x77c>
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	785b      	ldrb	r3, [r3, #1]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d115      	bne.n	8005892 <HAL_PCD_EP_DB_Transmit+0x77c>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800586e:	b29b      	uxth	r3, r3
 8005870:	461a      	mov	r2, r3
 8005872:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005874:	4413      	add	r3, r2
 8005876:	657b      	str	r3, [r7, #84]	; 0x54
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	00da      	lsls	r2, r3, #3
 800587e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005880:	4413      	add	r3, r2
 8005882:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005886:	653b      	str	r3, [r7, #80]	; 0x50
 8005888:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800588c:	b29a      	uxth	r2, r3
 800588e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005890:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6818      	ldr	r0, [r3, #0]
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	6959      	ldr	r1, [r3, #20]
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	895a      	ldrh	r2, [r3, #10]
 800589e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	f004 fa40 	bl	8009d28 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	781b      	ldrb	r3, [r3, #0]
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	4413      	add	r3, r2
 80058b6:	881b      	ldrh	r3, [r3, #0]
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058c2:	82bb      	strh	r3, [r7, #20]
 80058c4:	8abb      	ldrh	r3, [r7, #20]
 80058c6:	f083 0310 	eor.w	r3, r3, #16
 80058ca:	82bb      	strh	r3, [r7, #20]
 80058cc:	8abb      	ldrh	r3, [r7, #20]
 80058ce:	f083 0320 	eor.w	r3, r3, #32
 80058d2:	82bb      	strh	r3, [r7, #20]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	461a      	mov	r2, r3
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	009b      	lsls	r3, r3, #2
 80058e0:	441a      	add	r2, r3
 80058e2:	8abb      	ldrh	r3, [r7, #20]
 80058e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80058e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80058ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3790      	adds	r7, #144	; 0x90
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8005902:	b480      	push	{r7}
 8005904:	b087      	sub	sp, #28
 8005906:	af00      	add	r7, sp, #0
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	607b      	str	r3, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	817b      	strh	r3, [r7, #10]
 8005910:	4613      	mov	r3, r2
 8005912:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8005914:	897b      	ldrh	r3, [r7, #10]
 8005916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591a:	b29b      	uxth	r3, r3
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00b      	beq.n	8005938 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005920:	897b      	ldrh	r3, [r7, #10]
 8005922:	f003 0207 	and.w	r2, r3, #7
 8005926:	4613      	mov	r3, r2
 8005928:	009b      	lsls	r3, r3, #2
 800592a:	4413      	add	r3, r2
 800592c:	00db      	lsls	r3, r3, #3
 800592e:	3310      	adds	r3, #16
 8005930:	68fa      	ldr	r2, [r7, #12]
 8005932:	4413      	add	r3, r2
 8005934:	617b      	str	r3, [r7, #20]
 8005936:	e009      	b.n	800594c <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005938:	897a      	ldrh	r2, [r7, #10]
 800593a:	4613      	mov	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	00db      	lsls	r3, r3, #3
 8005942:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	4413      	add	r3, r2
 800594a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800594c:	893b      	ldrh	r3, [r7, #8]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d107      	bne.n	8005962 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	2200      	movs	r2, #0
 8005956:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	b29a      	uxth	r2, r3
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	80da      	strh	r2, [r3, #6]
 8005960:	e00b      	b.n	800597a <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2201      	movs	r2, #1
 8005966:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	b29a      	uxth	r2, r3
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	0c1b      	lsrs	r3, r3, #16
 8005974:	b29a      	uxth	r2, r3
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	371c      	adds	r7, #28
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005988:	b480      	push	{r7}
 800598a:	b085      	sub	sp, #20
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	f043 0301 	orr.w	r3, r3, #1
 80059b2:	b29a      	uxth	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	f043 0302 	orr.w	r3, r3, #2
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3714      	adds	r7, #20
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d141      	bne.n	8005a6e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80059ea:	4b4b      	ldr	r3, [pc, #300]	; (8005b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80059f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059f6:	d131      	bne.n	8005a5c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059f8:	4b47      	ldr	r3, [pc, #284]	; (8005b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80059fe:	4a46      	ldr	r2, [pc, #280]	; (8005b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a08:	4b43      	ldr	r3, [pc, #268]	; (8005b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a10:	4a41      	ldr	r2, [pc, #260]	; (8005b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a18:	4b40      	ldr	r3, [pc, #256]	; (8005b1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	2232      	movs	r2, #50	; 0x32
 8005a1e:	fb02 f303 	mul.w	r3, r2, r3
 8005a22:	4a3f      	ldr	r2, [pc, #252]	; (8005b20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005a24:	fba2 2303 	umull	r2, r3, r2, r3
 8005a28:	0c9b      	lsrs	r3, r3, #18
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a2e:	e002      	b.n	8005a36 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a36:	4b38      	ldr	r3, [pc, #224]	; (8005b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a38:	695b      	ldr	r3, [r3, #20]
 8005a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a42:	d102      	bne.n	8005a4a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d1f2      	bne.n	8005a30 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a4a:	4b33      	ldr	r3, [pc, #204]	; (8005b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a4c:	695b      	ldr	r3, [r3, #20]
 8005a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a56:	d158      	bne.n	8005b0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e057      	b.n	8005b0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a5c:	4b2e      	ldr	r3, [pc, #184]	; (8005b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a62:	4a2d      	ldr	r2, [pc, #180]	; (8005b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005a6c:	e04d      	b.n	8005b0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a74:	d141      	bne.n	8005afa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a76:	4b28      	ldr	r3, [pc, #160]	; (8005b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a82:	d131      	bne.n	8005ae8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a84:	4b24      	ldr	r3, [pc, #144]	; (8005b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a8a:	4a23      	ldr	r2, [pc, #140]	; (8005b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a94:	4b20      	ldr	r3, [pc, #128]	; (8005b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a9c:	4a1e      	ldr	r2, [pc, #120]	; (8005b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005aa2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005aa4:	4b1d      	ldr	r3, [pc, #116]	; (8005b1c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2232      	movs	r2, #50	; 0x32
 8005aaa:	fb02 f303 	mul.w	r3, r2, r3
 8005aae:	4a1c      	ldr	r2, [pc, #112]	; (8005b20 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005ab0:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab4:	0c9b      	lsrs	r3, r3, #18
 8005ab6:	3301      	adds	r3, #1
 8005ab8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005aba:	e002      	b.n	8005ac2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	3b01      	subs	r3, #1
 8005ac0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005ac2:	4b15      	ldr	r3, [pc, #84]	; (8005b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ac4:	695b      	ldr	r3, [r3, #20]
 8005ac6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ace:	d102      	bne.n	8005ad6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1f2      	bne.n	8005abc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ad6:	4b10      	ldr	r3, [pc, #64]	; (8005b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ade:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ae2:	d112      	bne.n	8005b0a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	e011      	b.n	8005b0c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ae8:	4b0b      	ldr	r3, [pc, #44]	; (8005b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005aee:	4a0a      	ldr	r2, [pc, #40]	; (8005b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005af0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005af4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005af8:	e007      	b.n	8005b0a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005afa:	4b07      	ldr	r3, [pc, #28]	; (8005b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b02:	4a05      	ldr	r2, [pc, #20]	; (8005b18 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b08:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	40007000 	.word	0x40007000
 8005b1c:	20000000 	.word	0x20000000
 8005b20:	431bde83 	.word	0x431bde83

08005b24 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005b28:	4b05      	ldr	r3, [pc, #20]	; (8005b40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	4a04      	ldr	r2, [pc, #16]	; (8005b40 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005b2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b32:	6093      	str	r3, [r2, #8]
}
 8005b34:	bf00      	nop
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
 8005b3e:	bf00      	nop
 8005b40:	40007000 	.word	0x40007000

08005b44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b088      	sub	sp, #32
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e2fe      	b.n	8006154 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d075      	beq.n	8005c4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b62:	4b97      	ldr	r3, [pc, #604]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f003 030c 	and.w	r3, r3, #12
 8005b6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b6c:	4b94      	ldr	r3, [pc, #592]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f003 0303 	and.w	r3, r3, #3
 8005b74:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005b76:	69bb      	ldr	r3, [r7, #24]
 8005b78:	2b0c      	cmp	r3, #12
 8005b7a:	d102      	bne.n	8005b82 <HAL_RCC_OscConfig+0x3e>
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d002      	beq.n	8005b88 <HAL_RCC_OscConfig+0x44>
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	2b08      	cmp	r3, #8
 8005b86:	d10b      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b88:	4b8d      	ldr	r3, [pc, #564]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d05b      	beq.n	8005c4c <HAL_RCC_OscConfig+0x108>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d157      	bne.n	8005c4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e2d9      	b.n	8006154 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ba8:	d106      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x74>
 8005baa:	4b85      	ldr	r3, [pc, #532]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a84      	ldr	r2, [pc, #528]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	e01d      	b.n	8005bf4 <HAL_RCC_OscConfig+0xb0>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bc0:	d10c      	bne.n	8005bdc <HAL_RCC_OscConfig+0x98>
 8005bc2:	4b7f      	ldr	r3, [pc, #508]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a7e      	ldr	r2, [pc, #504]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bcc:	6013      	str	r3, [r2, #0]
 8005bce:	4b7c      	ldr	r3, [pc, #496]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a7b      	ldr	r2, [pc, #492]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bd8:	6013      	str	r3, [r2, #0]
 8005bda:	e00b      	b.n	8005bf4 <HAL_RCC_OscConfig+0xb0>
 8005bdc:	4b78      	ldr	r3, [pc, #480]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a77      	ldr	r2, [pc, #476]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	4b75      	ldr	r3, [pc, #468]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a74      	ldr	r2, [pc, #464]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	685b      	ldr	r3, [r3, #4]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d013      	beq.n	8005c24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bfc:	f7fb fcc2 	bl	8001584 <HAL_GetTick>
 8005c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c02:	e008      	b.n	8005c16 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c04:	f7fb fcbe 	bl	8001584 <HAL_GetTick>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	1ad3      	subs	r3, r2, r3
 8005c0e:	2b64      	cmp	r3, #100	; 0x64
 8005c10:	d901      	bls.n	8005c16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c12:	2303      	movs	r3, #3
 8005c14:	e29e      	b.n	8006154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c16:	4b6a      	ldr	r3, [pc, #424]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d0f0      	beq.n	8005c04 <HAL_RCC_OscConfig+0xc0>
 8005c22:	e014      	b.n	8005c4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c24:	f7fb fcae 	bl	8001584 <HAL_GetTick>
 8005c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c2c:	f7fb fcaa 	bl	8001584 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b64      	cmp	r3, #100	; 0x64
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e28a      	b.n	8006154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c3e:	4b60      	ldr	r3, [pc, #384]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1f0      	bne.n	8005c2c <HAL_RCC_OscConfig+0xe8>
 8005c4a:	e000      	b.n	8005c4e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d075      	beq.n	8005d46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c5a:	4b59      	ldr	r3, [pc, #356]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005c5c:	689b      	ldr	r3, [r3, #8]
 8005c5e:	f003 030c 	and.w	r3, r3, #12
 8005c62:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c64:	4b56      	ldr	r3, [pc, #344]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f003 0303 	and.w	r3, r3, #3
 8005c6c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	2b0c      	cmp	r3, #12
 8005c72:	d102      	bne.n	8005c7a <HAL_RCC_OscConfig+0x136>
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	2b02      	cmp	r3, #2
 8005c78:	d002      	beq.n	8005c80 <HAL_RCC_OscConfig+0x13c>
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	2b04      	cmp	r3, #4
 8005c7e:	d11f      	bne.n	8005cc0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c80:	4b4f      	ldr	r3, [pc, #316]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d005      	beq.n	8005c98 <HAL_RCC_OscConfig+0x154>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d101      	bne.n	8005c98 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e25d      	b.n	8006154 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c98:	4b49      	ldr	r3, [pc, #292]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	061b      	lsls	r3, r3, #24
 8005ca6:	4946      	ldr	r1, [pc, #280]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005cac:	4b45      	ldr	r3, [pc, #276]	; (8005dc4 <HAL_RCC_OscConfig+0x280>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f7fb fc1b 	bl	80014ec <HAL_InitTick>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d043      	beq.n	8005d44 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e249      	b.n	8006154 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d023      	beq.n	8005d10 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cc8:	4b3d      	ldr	r3, [pc, #244]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a3c      	ldr	r2, [pc, #240]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005cce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005cd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cd4:	f7fb fc56 	bl	8001584 <HAL_GetTick>
 8005cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cda:	e008      	b.n	8005cee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005cdc:	f7fb fc52 	bl	8001584 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e232      	b.n	8006154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cee:	4b34      	ldr	r3, [pc, #208]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0f0      	beq.n	8005cdc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cfa:	4b31      	ldr	r3, [pc, #196]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	691b      	ldr	r3, [r3, #16]
 8005d06:	061b      	lsls	r3, r3, #24
 8005d08:	492d      	ldr	r1, [pc, #180]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	604b      	str	r3, [r1, #4]
 8005d0e:	e01a      	b.n	8005d46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d10:	4b2b      	ldr	r3, [pc, #172]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a2a      	ldr	r2, [pc, #168]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005d16:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1c:	f7fb fc32 	bl	8001584 <HAL_GetTick>
 8005d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d22:	e008      	b.n	8005d36 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d24:	f7fb fc2e 	bl	8001584 <HAL_GetTick>
 8005d28:	4602      	mov	r2, r0
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	2b02      	cmp	r3, #2
 8005d30:	d901      	bls.n	8005d36 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e20e      	b.n	8006154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d36:	4b22      	ldr	r3, [pc, #136]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1f0      	bne.n	8005d24 <HAL_RCC_OscConfig+0x1e0>
 8005d42:	e000      	b.n	8005d46 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0308 	and.w	r3, r3, #8
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d041      	beq.n	8005dd6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d01c      	beq.n	8005d94 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d5a:	4b19      	ldr	r3, [pc, #100]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d60:	4a17      	ldr	r2, [pc, #92]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005d62:	f043 0301 	orr.w	r3, r3, #1
 8005d66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d6a:	f7fb fc0b 	bl	8001584 <HAL_GetTick>
 8005d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d70:	e008      	b.n	8005d84 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005d72:	f7fb fc07 	bl	8001584 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e1e7      	b.n	8006154 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005d84:	4b0e      	ldr	r3, [pc, #56]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0ef      	beq.n	8005d72 <HAL_RCC_OscConfig+0x22e>
 8005d92:	e020      	b.n	8005dd6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d94:	4b0a      	ldr	r3, [pc, #40]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005d96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005d9a:	4a09      	ldr	r2, [pc, #36]	; (8005dc0 <HAL_RCC_OscConfig+0x27c>)
 8005d9c:	f023 0301 	bic.w	r3, r3, #1
 8005da0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005da4:	f7fb fbee 	bl	8001584 <HAL_GetTick>
 8005da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005daa:	e00d      	b.n	8005dc8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dac:	f7fb fbea 	bl	8001584 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d906      	bls.n	8005dc8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e1ca      	b.n	8006154 <HAL_RCC_OscConfig+0x610>
 8005dbe:	bf00      	nop
 8005dc0:	40021000 	.word	0x40021000
 8005dc4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005dc8:	4b8c      	ldr	r3, [pc, #560]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dce:	f003 0302 	and.w	r3, r3, #2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1ea      	bne.n	8005dac <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0304 	and.w	r3, r3, #4
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 80a6 	beq.w	8005f30 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005de4:	2300      	movs	r3, #0
 8005de6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005de8:	4b84      	ldr	r3, [pc, #528]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <HAL_RCC_OscConfig+0x2b4>
 8005df4:	2301      	movs	r3, #1
 8005df6:	e000      	b.n	8005dfa <HAL_RCC_OscConfig+0x2b6>
 8005df8:	2300      	movs	r3, #0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00d      	beq.n	8005e1a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dfe:	4b7f      	ldr	r3, [pc, #508]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e02:	4a7e      	ldr	r2, [pc, #504]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e08:	6593      	str	r3, [r2, #88]	; 0x58
 8005e0a:	4b7c      	ldr	r3, [pc, #496]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005e16:	2301      	movs	r3, #1
 8005e18:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e1a:	4b79      	ldr	r3, [pc, #484]	; (8006000 <HAL_RCC_OscConfig+0x4bc>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d118      	bne.n	8005e58 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e26:	4b76      	ldr	r3, [pc, #472]	; (8006000 <HAL_RCC_OscConfig+0x4bc>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a75      	ldr	r2, [pc, #468]	; (8006000 <HAL_RCC_OscConfig+0x4bc>)
 8005e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e32:	f7fb fba7 	bl	8001584 <HAL_GetTick>
 8005e36:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e38:	e008      	b.n	8005e4c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e3a:	f7fb fba3 	bl	8001584 <HAL_GetTick>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	1ad3      	subs	r3, r2, r3
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d901      	bls.n	8005e4c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005e48:	2303      	movs	r3, #3
 8005e4a:	e183      	b.n	8006154 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e4c:	4b6c      	ldr	r3, [pc, #432]	; (8006000 <HAL_RCC_OscConfig+0x4bc>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d0f0      	beq.n	8005e3a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d108      	bne.n	8005e72 <HAL_RCC_OscConfig+0x32e>
 8005e60:	4b66      	ldr	r3, [pc, #408]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e66:	4a65      	ldr	r2, [pc, #404]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005e68:	f043 0301 	orr.w	r3, r3, #1
 8005e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e70:	e024      	b.n	8005ebc <HAL_RCC_OscConfig+0x378>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	2b05      	cmp	r3, #5
 8005e78:	d110      	bne.n	8005e9c <HAL_RCC_OscConfig+0x358>
 8005e7a:	4b60      	ldr	r3, [pc, #384]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e80:	4a5e      	ldr	r2, [pc, #376]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005e82:	f043 0304 	orr.w	r3, r3, #4
 8005e86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e8a:	4b5c      	ldr	r3, [pc, #368]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e90:	4a5a      	ldr	r2, [pc, #360]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005e92:	f043 0301 	orr.w	r3, r3, #1
 8005e96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005e9a:	e00f      	b.n	8005ebc <HAL_RCC_OscConfig+0x378>
 8005e9c:	4b57      	ldr	r3, [pc, #348]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea2:	4a56      	ldr	r2, [pc, #344]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005ea4:	f023 0301 	bic.w	r3, r3, #1
 8005ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005eac:	4b53      	ldr	r3, [pc, #332]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb2:	4a52      	ldr	r2, [pc, #328]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005eb4:	f023 0304 	bic.w	r3, r3, #4
 8005eb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d016      	beq.n	8005ef2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ec4:	f7fb fb5e 	bl	8001584 <HAL_GetTick>
 8005ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005eca:	e00a      	b.n	8005ee2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ecc:	f7fb fb5a 	bl	8001584 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d901      	bls.n	8005ee2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e138      	b.n	8006154 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ee2:	4b46      	ldr	r3, [pc, #280]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d0ed      	beq.n	8005ecc <HAL_RCC_OscConfig+0x388>
 8005ef0:	e015      	b.n	8005f1e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef2:	f7fb fb47 	bl	8001584 <HAL_GetTick>
 8005ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ef8:	e00a      	b.n	8005f10 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005efa:	f7fb fb43 	bl	8001584 <HAL_GetTick>
 8005efe:	4602      	mov	r2, r0
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	1ad3      	subs	r3, r2, r3
 8005f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d901      	bls.n	8005f10 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e121      	b.n	8006154 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f10:	4b3a      	ldr	r3, [pc, #232]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f16:	f003 0302 	and.w	r3, r3, #2
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d1ed      	bne.n	8005efa <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f1e:	7ffb      	ldrb	r3, [r7, #31]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d105      	bne.n	8005f30 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f24:	4b35      	ldr	r3, [pc, #212]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f28:	4a34      	ldr	r2, [pc, #208]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005f2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f2e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0320 	and.w	r3, r3, #32
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d03c      	beq.n	8005fb6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	699b      	ldr	r3, [r3, #24]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d01c      	beq.n	8005f7e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005f44:	4b2d      	ldr	r3, [pc, #180]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f4a:	4a2c      	ldr	r2, [pc, #176]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005f4c:	f043 0301 	orr.w	r3, r3, #1
 8005f50:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f54:	f7fb fb16 	bl	8001584 <HAL_GetTick>
 8005f58:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f5a:	e008      	b.n	8005f6e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f5c:	f7fb fb12 	bl	8001584 <HAL_GetTick>
 8005f60:	4602      	mov	r2, r0
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	1ad3      	subs	r3, r2, r3
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d901      	bls.n	8005f6e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e0f2      	b.n	8006154 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005f6e:	4b23      	ldr	r3, [pc, #140]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005f70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f74:	f003 0302 	and.w	r3, r3, #2
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d0ef      	beq.n	8005f5c <HAL_RCC_OscConfig+0x418>
 8005f7c:	e01b      	b.n	8005fb6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005f7e:	4b1f      	ldr	r3, [pc, #124]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005f80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f84:	4a1d      	ldr	r2, [pc, #116]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005f86:	f023 0301 	bic.w	r3, r3, #1
 8005f8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f8e:	f7fb faf9 	bl	8001584 <HAL_GetTick>
 8005f92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005f94:	e008      	b.n	8005fa8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f96:	f7fb faf5 	bl	8001584 <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	693b      	ldr	r3, [r7, #16]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	2b02      	cmp	r3, #2
 8005fa2:	d901      	bls.n	8005fa8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e0d5      	b.n	8006154 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005fa8:	4b14      	ldr	r3, [pc, #80]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d1ef      	bne.n	8005f96 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	69db      	ldr	r3, [r3, #28]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	f000 80c9 	beq.w	8006152 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005fc0:	4b0e      	ldr	r3, [pc, #56]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f003 030c 	and.w	r3, r3, #12
 8005fc8:	2b0c      	cmp	r3, #12
 8005fca:	f000 8083 	beq.w	80060d4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d15e      	bne.n	8006094 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fd6:	4b09      	ldr	r3, [pc, #36]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a08      	ldr	r2, [pc, #32]	; (8005ffc <HAL_RCC_OscConfig+0x4b8>)
 8005fdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fe2:	f7fb facf 	bl	8001584 <HAL_GetTick>
 8005fe6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005fe8:	e00c      	b.n	8006004 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005fea:	f7fb facb 	bl	8001584 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d905      	bls.n	8006004 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e0ab      	b.n	8006154 <HAL_RCC_OscConfig+0x610>
 8005ffc:	40021000 	.word	0x40021000
 8006000:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006004:	4b55      	ldr	r3, [pc, #340]	; (800615c <HAL_RCC_OscConfig+0x618>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1ec      	bne.n	8005fea <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006010:	4b52      	ldr	r3, [pc, #328]	; (800615c <HAL_RCC_OscConfig+0x618>)
 8006012:	68da      	ldr	r2, [r3, #12]
 8006014:	4b52      	ldr	r3, [pc, #328]	; (8006160 <HAL_RCC_OscConfig+0x61c>)
 8006016:	4013      	ands	r3, r2
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6a11      	ldr	r1, [r2, #32]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006020:	3a01      	subs	r2, #1
 8006022:	0112      	lsls	r2, r2, #4
 8006024:	4311      	orrs	r1, r2
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800602a:	0212      	lsls	r2, r2, #8
 800602c:	4311      	orrs	r1, r2
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006032:	0852      	lsrs	r2, r2, #1
 8006034:	3a01      	subs	r2, #1
 8006036:	0552      	lsls	r2, r2, #21
 8006038:	4311      	orrs	r1, r2
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800603e:	0852      	lsrs	r2, r2, #1
 8006040:	3a01      	subs	r2, #1
 8006042:	0652      	lsls	r2, r2, #25
 8006044:	4311      	orrs	r1, r2
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800604a:	06d2      	lsls	r2, r2, #27
 800604c:	430a      	orrs	r2, r1
 800604e:	4943      	ldr	r1, [pc, #268]	; (800615c <HAL_RCC_OscConfig+0x618>)
 8006050:	4313      	orrs	r3, r2
 8006052:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006054:	4b41      	ldr	r3, [pc, #260]	; (800615c <HAL_RCC_OscConfig+0x618>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a40      	ldr	r2, [pc, #256]	; (800615c <HAL_RCC_OscConfig+0x618>)
 800605a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800605e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006060:	4b3e      	ldr	r3, [pc, #248]	; (800615c <HAL_RCC_OscConfig+0x618>)
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	4a3d      	ldr	r2, [pc, #244]	; (800615c <HAL_RCC_OscConfig+0x618>)
 8006066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800606a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606c:	f7fb fa8a 	bl	8001584 <HAL_GetTick>
 8006070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006074:	f7fb fa86 	bl	8001584 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b02      	cmp	r3, #2
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e066      	b.n	8006154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006086:	4b35      	ldr	r3, [pc, #212]	; (800615c <HAL_RCC_OscConfig+0x618>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d0f0      	beq.n	8006074 <HAL_RCC_OscConfig+0x530>
 8006092:	e05e      	b.n	8006152 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006094:	4b31      	ldr	r3, [pc, #196]	; (800615c <HAL_RCC_OscConfig+0x618>)
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a30      	ldr	r2, [pc, #192]	; (800615c <HAL_RCC_OscConfig+0x618>)
 800609a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800609e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a0:	f7fb fa70 	bl	8001584 <HAL_GetTick>
 80060a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060a6:	e008      	b.n	80060ba <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060a8:	f7fb fa6c 	bl	8001584 <HAL_GetTick>
 80060ac:	4602      	mov	r2, r0
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	2b02      	cmp	r3, #2
 80060b4:	d901      	bls.n	80060ba <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80060b6:	2303      	movs	r3, #3
 80060b8:	e04c      	b.n	8006154 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80060ba:	4b28      	ldr	r3, [pc, #160]	; (800615c <HAL_RCC_OscConfig+0x618>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1f0      	bne.n	80060a8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80060c6:	4b25      	ldr	r3, [pc, #148]	; (800615c <HAL_RCC_OscConfig+0x618>)
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	4924      	ldr	r1, [pc, #144]	; (800615c <HAL_RCC_OscConfig+0x618>)
 80060cc:	4b25      	ldr	r3, [pc, #148]	; (8006164 <HAL_RCC_OscConfig+0x620>)
 80060ce:	4013      	ands	r3, r2
 80060d0:	60cb      	str	r3, [r1, #12]
 80060d2:	e03e      	b.n	8006152 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d101      	bne.n	80060e0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e039      	b.n	8006154 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80060e0:	4b1e      	ldr	r3, [pc, #120]	; (800615c <HAL_RCC_OscConfig+0x618>)
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f003 0203 	and.w	r2, r3, #3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d12c      	bne.n	800614e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060fe:	3b01      	subs	r3, #1
 8006100:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006102:	429a      	cmp	r2, r3
 8006104:	d123      	bne.n	800614e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006110:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006112:	429a      	cmp	r2, r3
 8006114:	d11b      	bne.n	800614e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006120:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006122:	429a      	cmp	r2, r3
 8006124:	d113      	bne.n	800614e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006130:	085b      	lsrs	r3, r3, #1
 8006132:	3b01      	subs	r3, #1
 8006134:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006136:	429a      	cmp	r2, r3
 8006138:	d109      	bne.n	800614e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006144:	085b      	lsrs	r3, r3, #1
 8006146:	3b01      	subs	r3, #1
 8006148:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800614a:	429a      	cmp	r2, r3
 800614c:	d001      	beq.n	8006152 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e000      	b.n	8006154 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8006152:	2300      	movs	r3, #0
}
 8006154:	4618      	mov	r0, r3
 8006156:	3720      	adds	r7, #32
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}
 800615c:	40021000 	.word	0x40021000
 8006160:	019f800c 	.word	0x019f800c
 8006164:	feeefffc 	.word	0xfeeefffc

08006168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b086      	sub	sp, #24
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006172:	2300      	movs	r3, #0
 8006174:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800617c:	2301      	movs	r3, #1
 800617e:	e11e      	b.n	80063be <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006180:	4b91      	ldr	r3, [pc, #580]	; (80063c8 <HAL_RCC_ClockConfig+0x260>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 030f 	and.w	r3, r3, #15
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	429a      	cmp	r2, r3
 800618c:	d910      	bls.n	80061b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800618e:	4b8e      	ldr	r3, [pc, #568]	; (80063c8 <HAL_RCC_ClockConfig+0x260>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f023 020f 	bic.w	r2, r3, #15
 8006196:	498c      	ldr	r1, [pc, #560]	; (80063c8 <HAL_RCC_ClockConfig+0x260>)
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	4313      	orrs	r3, r2
 800619c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800619e:	4b8a      	ldr	r3, [pc, #552]	; (80063c8 <HAL_RCC_ClockConfig+0x260>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 030f 	and.w	r3, r3, #15
 80061a6:	683a      	ldr	r2, [r7, #0]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d001      	beq.n	80061b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e106      	b.n	80063be <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d073      	beq.n	80062a4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d129      	bne.n	8006218 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061c4:	4b81      	ldr	r3, [pc, #516]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d101      	bne.n	80061d4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80061d0:	2301      	movs	r3, #1
 80061d2:	e0f4      	b.n	80063be <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80061d4:	f000 f972 	bl	80064bc <RCC_GetSysClockFreqFromPLLSource>
 80061d8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	4a7c      	ldr	r2, [pc, #496]	; (80063d0 <HAL_RCC_ClockConfig+0x268>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d93f      	bls.n	8006262 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80061e2:	4b7a      	ldr	r3, [pc, #488]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d009      	beq.n	8006202 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d033      	beq.n	8006262 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d12f      	bne.n	8006262 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8006202:	4b72      	ldr	r3, [pc, #456]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800620a:	4a70      	ldr	r2, [pc, #448]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 800620c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006210:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8006212:	2380      	movs	r3, #128	; 0x80
 8006214:	617b      	str	r3, [r7, #20]
 8006216:	e024      	b.n	8006262 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	2b02      	cmp	r3, #2
 800621e:	d107      	bne.n	8006230 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006220:	4b6a      	ldr	r3, [pc, #424]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d109      	bne.n	8006240 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e0c6      	b.n	80063be <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006230:	4b66      	ldr	r3, [pc, #408]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800623c:	2301      	movs	r3, #1
 800623e:	e0be      	b.n	80063be <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8006240:	f000 f8ce 	bl	80063e0 <HAL_RCC_GetSysClockFreq>
 8006244:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	4a61      	ldr	r2, [pc, #388]	; (80063d0 <HAL_RCC_ClockConfig+0x268>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d909      	bls.n	8006262 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800624e:	4b5f      	ldr	r3, [pc, #380]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 8006250:	689b      	ldr	r3, [r3, #8]
 8006252:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006256:	4a5d      	ldr	r2, [pc, #372]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 8006258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800625c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800625e:	2380      	movs	r3, #128	; 0x80
 8006260:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006262:	4b5a      	ldr	r3, [pc, #360]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f023 0203 	bic.w	r2, r3, #3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	4957      	ldr	r1, [pc, #348]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 8006270:	4313      	orrs	r3, r2
 8006272:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006274:	f7fb f986 	bl	8001584 <HAL_GetTick>
 8006278:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800627a:	e00a      	b.n	8006292 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800627c:	f7fb f982 	bl	8001584 <HAL_GetTick>
 8006280:	4602      	mov	r2, r0
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	1ad3      	subs	r3, r2, r3
 8006286:	f241 3288 	movw	r2, #5000	; 0x1388
 800628a:	4293      	cmp	r3, r2
 800628c:	d901      	bls.n	8006292 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800628e:	2303      	movs	r3, #3
 8006290:	e095      	b.n	80063be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006292:	4b4e      	ldr	r3, [pc, #312]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	f003 020c 	and.w	r2, r3, #12
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d1eb      	bne.n	800627c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 0302 	and.w	r3, r3, #2
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d023      	beq.n	80062f8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f003 0304 	and.w	r3, r3, #4
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d005      	beq.n	80062c8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80062bc:	4b43      	ldr	r3, [pc, #268]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	4a42      	ldr	r2, [pc, #264]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 80062c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80062c6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0308 	and.w	r3, r3, #8
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d007      	beq.n	80062e4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80062d4:	4b3d      	ldr	r3, [pc, #244]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80062dc:	4a3b      	ldr	r2, [pc, #236]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 80062de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80062e2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80062e4:	4b39      	ldr	r3, [pc, #228]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	689b      	ldr	r3, [r3, #8]
 80062f0:	4936      	ldr	r1, [pc, #216]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 80062f2:	4313      	orrs	r3, r2
 80062f4:	608b      	str	r3, [r1, #8]
 80062f6:	e008      	b.n	800630a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	2b80      	cmp	r3, #128	; 0x80
 80062fc:	d105      	bne.n	800630a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80062fe:	4b33      	ldr	r3, [pc, #204]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	4a32      	ldr	r2, [pc, #200]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 8006304:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006308:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800630a:	4b2f      	ldr	r3, [pc, #188]	; (80063c8 <HAL_RCC_ClockConfig+0x260>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f003 030f 	and.w	r3, r3, #15
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	429a      	cmp	r2, r3
 8006316:	d21d      	bcs.n	8006354 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006318:	4b2b      	ldr	r3, [pc, #172]	; (80063c8 <HAL_RCC_ClockConfig+0x260>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f023 020f 	bic.w	r2, r3, #15
 8006320:	4929      	ldr	r1, [pc, #164]	; (80063c8 <HAL_RCC_ClockConfig+0x260>)
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	4313      	orrs	r3, r2
 8006326:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006328:	f7fb f92c 	bl	8001584 <HAL_GetTick>
 800632c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800632e:	e00a      	b.n	8006346 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006330:	f7fb f928 	bl	8001584 <HAL_GetTick>
 8006334:	4602      	mov	r2, r0
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	1ad3      	subs	r3, r2, r3
 800633a:	f241 3288 	movw	r2, #5000	; 0x1388
 800633e:	4293      	cmp	r3, r2
 8006340:	d901      	bls.n	8006346 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	e03b      	b.n	80063be <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006346:	4b20      	ldr	r3, [pc, #128]	; (80063c8 <HAL_RCC_ClockConfig+0x260>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 030f 	and.w	r3, r3, #15
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d1ed      	bne.n	8006330 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f003 0304 	and.w	r3, r3, #4
 800635c:	2b00      	cmp	r3, #0
 800635e:	d008      	beq.n	8006372 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006360:	4b1a      	ldr	r3, [pc, #104]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	4917      	ldr	r1, [pc, #92]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 800636e:	4313      	orrs	r3, r2
 8006370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f003 0308 	and.w	r3, r3, #8
 800637a:	2b00      	cmp	r3, #0
 800637c:	d009      	beq.n	8006392 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800637e:	4b13      	ldr	r3, [pc, #76]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	00db      	lsls	r3, r3, #3
 800638c:	490f      	ldr	r1, [pc, #60]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 800638e:	4313      	orrs	r3, r2
 8006390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006392:	f000 f825 	bl	80063e0 <HAL_RCC_GetSysClockFreq>
 8006396:	4602      	mov	r2, r0
 8006398:	4b0c      	ldr	r3, [pc, #48]	; (80063cc <HAL_RCC_ClockConfig+0x264>)
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	091b      	lsrs	r3, r3, #4
 800639e:	f003 030f 	and.w	r3, r3, #15
 80063a2:	490c      	ldr	r1, [pc, #48]	; (80063d4 <HAL_RCC_ClockConfig+0x26c>)
 80063a4:	5ccb      	ldrb	r3, [r1, r3]
 80063a6:	f003 031f 	and.w	r3, r3, #31
 80063aa:	fa22 f303 	lsr.w	r3, r2, r3
 80063ae:	4a0a      	ldr	r2, [pc, #40]	; (80063d8 <HAL_RCC_ClockConfig+0x270>)
 80063b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80063b2:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <HAL_RCC_ClockConfig+0x274>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fb f898 	bl	80014ec <HAL_InitTick>
 80063bc:	4603      	mov	r3, r0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3718      	adds	r7, #24
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	40022000 	.word	0x40022000
 80063cc:	40021000 	.word	0x40021000
 80063d0:	04c4b400 	.word	0x04c4b400
 80063d4:	0800cf24 	.word	0x0800cf24
 80063d8:	20000000 	.word	0x20000000
 80063dc:	20000004 	.word	0x20000004

080063e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b087      	sub	sp, #28
 80063e4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80063e6:	4b2c      	ldr	r3, [pc, #176]	; (8006498 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 030c 	and.w	r3, r3, #12
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d102      	bne.n	80063f8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80063f2:	4b2a      	ldr	r3, [pc, #168]	; (800649c <HAL_RCC_GetSysClockFreq+0xbc>)
 80063f4:	613b      	str	r3, [r7, #16]
 80063f6:	e047      	b.n	8006488 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80063f8:	4b27      	ldr	r3, [pc, #156]	; (8006498 <HAL_RCC_GetSysClockFreq+0xb8>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	f003 030c 	and.w	r3, r3, #12
 8006400:	2b08      	cmp	r3, #8
 8006402:	d102      	bne.n	800640a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006404:	4b26      	ldr	r3, [pc, #152]	; (80064a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006406:	613b      	str	r3, [r7, #16]
 8006408:	e03e      	b.n	8006488 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800640a:	4b23      	ldr	r3, [pc, #140]	; (8006498 <HAL_RCC_GetSysClockFreq+0xb8>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 030c 	and.w	r3, r3, #12
 8006412:	2b0c      	cmp	r3, #12
 8006414:	d136      	bne.n	8006484 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006416:	4b20      	ldr	r3, [pc, #128]	; (8006498 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	f003 0303 	and.w	r3, r3, #3
 800641e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006420:	4b1d      	ldr	r3, [pc, #116]	; (8006498 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006422:	68db      	ldr	r3, [r3, #12]
 8006424:	091b      	lsrs	r3, r3, #4
 8006426:	f003 030f 	and.w	r3, r3, #15
 800642a:	3301      	adds	r3, #1
 800642c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2b03      	cmp	r3, #3
 8006432:	d10c      	bne.n	800644e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006434:	4a1a      	ldr	r2, [pc, #104]	; (80064a0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	fbb2 f3f3 	udiv	r3, r2, r3
 800643c:	4a16      	ldr	r2, [pc, #88]	; (8006498 <HAL_RCC_GetSysClockFreq+0xb8>)
 800643e:	68d2      	ldr	r2, [r2, #12]
 8006440:	0a12      	lsrs	r2, r2, #8
 8006442:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006446:	fb02 f303 	mul.w	r3, r2, r3
 800644a:	617b      	str	r3, [r7, #20]
      break;
 800644c:	e00c      	b.n	8006468 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800644e:	4a13      	ldr	r2, [pc, #76]	; (800649c <HAL_RCC_GetSysClockFreq+0xbc>)
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	fbb2 f3f3 	udiv	r3, r2, r3
 8006456:	4a10      	ldr	r2, [pc, #64]	; (8006498 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006458:	68d2      	ldr	r2, [r2, #12]
 800645a:	0a12      	lsrs	r2, r2, #8
 800645c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006460:	fb02 f303 	mul.w	r3, r2, r3
 8006464:	617b      	str	r3, [r7, #20]
      break;
 8006466:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006468:	4b0b      	ldr	r3, [pc, #44]	; (8006498 <HAL_RCC_GetSysClockFreq+0xb8>)
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	0e5b      	lsrs	r3, r3, #25
 800646e:	f003 0303 	and.w	r3, r3, #3
 8006472:	3301      	adds	r3, #1
 8006474:	005b      	lsls	r3, r3, #1
 8006476:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006478:	697a      	ldr	r2, [r7, #20]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006480:	613b      	str	r3, [r7, #16]
 8006482:	e001      	b.n	8006488 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006484:	2300      	movs	r3, #0
 8006486:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006488:	693b      	ldr	r3, [r7, #16]
}
 800648a:	4618      	mov	r0, r3
 800648c:	371c      	adds	r7, #28
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	40021000 	.word	0x40021000
 800649c:	00f42400 	.word	0x00f42400
 80064a0:	007a1200 	.word	0x007a1200

080064a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80064a4:	b480      	push	{r7}
 80064a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80064a8:	4b03      	ldr	r3, [pc, #12]	; (80064b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80064aa:	681b      	ldr	r3, [r3, #0]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	46bd      	mov	sp, r7
 80064b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b4:	4770      	bx	lr
 80064b6:	bf00      	nop
 80064b8:	20000000 	.word	0x20000000

080064bc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80064bc:	b480      	push	{r7}
 80064be:	b087      	sub	sp, #28
 80064c0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80064c2:	4b1e      	ldr	r3, [pc, #120]	; (800653c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f003 0303 	and.w	r3, r3, #3
 80064ca:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80064cc:	4b1b      	ldr	r3, [pc, #108]	; (800653c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	091b      	lsrs	r3, r3, #4
 80064d2:	f003 030f 	and.w	r3, r3, #15
 80064d6:	3301      	adds	r3, #1
 80064d8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d10c      	bne.n	80064fa <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064e0:	4a17      	ldr	r2, [pc, #92]	; (8006540 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064e8:	4a14      	ldr	r2, [pc, #80]	; (800653c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80064ea:	68d2      	ldr	r2, [r2, #12]
 80064ec:	0a12      	lsrs	r2, r2, #8
 80064ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064f2:	fb02 f303 	mul.w	r3, r2, r3
 80064f6:	617b      	str	r3, [r7, #20]
    break;
 80064f8:	e00c      	b.n	8006514 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064fa:	4a12      	ldr	r2, [pc, #72]	; (8006544 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006502:	4a0e      	ldr	r2, [pc, #56]	; (800653c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006504:	68d2      	ldr	r2, [r2, #12]
 8006506:	0a12      	lsrs	r2, r2, #8
 8006508:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800650c:	fb02 f303 	mul.w	r3, r2, r3
 8006510:	617b      	str	r3, [r7, #20]
    break;
 8006512:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006514:	4b09      	ldr	r3, [pc, #36]	; (800653c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	0e5b      	lsrs	r3, r3, #25
 800651a:	f003 0303 	and.w	r3, r3, #3
 800651e:	3301      	adds	r3, #1
 8006520:	005b      	lsls	r3, r3, #1
 8006522:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	fbb2 f3f3 	udiv	r3, r2, r3
 800652c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800652e:	687b      	ldr	r3, [r7, #4]
}
 8006530:	4618      	mov	r0, r3
 8006532:	371c      	adds	r7, #28
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	40021000 	.word	0x40021000
 8006540:	007a1200 	.word	0x007a1200
 8006544:	00f42400 	.word	0x00f42400

08006548 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b086      	sub	sp, #24
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006550:	2300      	movs	r3, #0
 8006552:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006554:	2300      	movs	r3, #0
 8006556:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006560:	2b00      	cmp	r3, #0
 8006562:	f000 8098 	beq.w	8006696 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006566:	2300      	movs	r3, #0
 8006568:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800656a:	4b43      	ldr	r3, [pc, #268]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800656c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800656e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10d      	bne.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006576:	4b40      	ldr	r3, [pc, #256]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800657a:	4a3f      	ldr	r2, [pc, #252]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800657c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006580:	6593      	str	r3, [r2, #88]	; 0x58
 8006582:	4b3d      	ldr	r3, [pc, #244]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800658a:	60bb      	str	r3, [r7, #8]
 800658c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800658e:	2301      	movs	r3, #1
 8006590:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006592:	4b3a      	ldr	r3, [pc, #232]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a39      	ldr	r2, [pc, #228]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800659c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800659e:	f7fa fff1 	bl	8001584 <HAL_GetTick>
 80065a2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065a4:	e009      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065a6:	f7fa ffed 	bl	8001584 <HAL_GetTick>
 80065aa:	4602      	mov	r2, r0
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	2b02      	cmp	r3, #2
 80065b2:	d902      	bls.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80065b4:	2303      	movs	r3, #3
 80065b6:	74fb      	strb	r3, [r7, #19]
        break;
 80065b8:	e005      	b.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065ba:	4b30      	ldr	r3, [pc, #192]	; (800667c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0ef      	beq.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80065c6:	7cfb      	ldrb	r3, [r7, #19]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d159      	bne.n	8006680 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80065cc:	4b2a      	ldr	r3, [pc, #168]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065d6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d01e      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d019      	beq.n	800661c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80065e8:	4b23      	ldr	r3, [pc, #140]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80065f4:	4b20      	ldr	r3, [pc, #128]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065fa:	4a1f      	ldr	r2, [pc, #124]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006604:	4b1c      	ldr	r3, [pc, #112]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660a:	4a1b      	ldr	r2, [pc, #108]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800660c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006614:	4a18      	ldr	r2, [pc, #96]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f003 0301 	and.w	r3, r3, #1
 8006622:	2b00      	cmp	r3, #0
 8006624:	d016      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006626:	f7fa ffad 	bl	8001584 <HAL_GetTick>
 800662a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800662c:	e00b      	b.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800662e:	f7fa ffa9 	bl	8001584 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	f241 3288 	movw	r2, #5000	; 0x1388
 800663c:	4293      	cmp	r3, r2
 800663e:	d902      	bls.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8006640:	2303      	movs	r3, #3
 8006642:	74fb      	strb	r3, [r7, #19]
            break;
 8006644:	e006      	b.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006646:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d0ec      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006654:	7cfb      	ldrb	r3, [r7, #19]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10b      	bne.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800665a:	4b07      	ldr	r3, [pc, #28]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800665c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006660:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006668:	4903      	ldr	r1, [pc, #12]	; (8006678 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800666a:	4313      	orrs	r3, r2
 800666c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006670:	e008      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006672:	7cfb      	ldrb	r3, [r7, #19]
 8006674:	74bb      	strb	r3, [r7, #18]
 8006676:	e005      	b.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006678:	40021000 	.word	0x40021000
 800667c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006680:	7cfb      	ldrb	r3, [r7, #19]
 8006682:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006684:	7c7b      	ldrb	r3, [r7, #17]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d105      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800668a:	4ba7      	ldr	r3, [pc, #668]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800668c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800668e:	4aa6      	ldr	r2, [pc, #664]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006694:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 0301 	and.w	r3, r3, #1
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00a      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80066a2:	4ba1      	ldr	r3, [pc, #644]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066a8:	f023 0203 	bic.w	r2, r3, #3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	499d      	ldr	r1, [pc, #628]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066b2:	4313      	orrs	r3, r2
 80066b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0302 	and.w	r3, r3, #2
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d00a      	beq.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80066c4:	4b98      	ldr	r3, [pc, #608]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ca:	f023 020c 	bic.w	r2, r3, #12
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	4995      	ldr	r1, [pc, #596]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066d4:	4313      	orrs	r3, r2
 80066d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0304 	and.w	r3, r3, #4
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d00a      	beq.n	80066fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80066e6:	4b90      	ldr	r3, [pc, #576]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066ec:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	498c      	ldr	r1, [pc, #560]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0308 	and.w	r3, r3, #8
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00a      	beq.n	800671e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006708:	4b87      	ldr	r3, [pc, #540]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800670a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800670e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	691b      	ldr	r3, [r3, #16]
 8006716:	4984      	ldr	r1, [pc, #528]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006718:	4313      	orrs	r3, r2
 800671a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0310 	and.w	r3, r3, #16
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00a      	beq.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800672a:	4b7f      	ldr	r3, [pc, #508]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800672c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006730:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	695b      	ldr	r3, [r3, #20]
 8006738:	497b      	ldr	r1, [pc, #492]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800673a:	4313      	orrs	r3, r2
 800673c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0320 	and.w	r3, r3, #32
 8006748:	2b00      	cmp	r3, #0
 800674a:	d00a      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800674c:	4b76      	ldr	r3, [pc, #472]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800674e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006752:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	4973      	ldr	r1, [pc, #460]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800675c:	4313      	orrs	r3, r2
 800675e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00a      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800676e:	4b6e      	ldr	r3, [pc, #440]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006774:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69db      	ldr	r3, [r3, #28]
 800677c:	496a      	ldr	r1, [pc, #424]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800677e:	4313      	orrs	r3, r2
 8006780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00a      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006790:	4b65      	ldr	r3, [pc, #404]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006796:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	4962      	ldr	r1, [pc, #392]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00a      	beq.n	80067c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067b2:	4b5d      	ldr	r3, [pc, #372]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	4959      	ldr	r1, [pc, #356]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00a      	beq.n	80067ea <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80067d4:	4b54      	ldr	r3, [pc, #336]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80067da:	f023 0203 	bic.w	r2, r3, #3
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e2:	4951      	ldr	r1, [pc, #324]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067e4:	4313      	orrs	r3, r2
 80067e6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00a      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80067f6:	4b4c      	ldr	r3, [pc, #304]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80067f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006804:	4948      	ldr	r1, [pc, #288]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006806:	4313      	orrs	r3, r2
 8006808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006814:	2b00      	cmp	r3, #0
 8006816:	d015      	beq.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006818:	4b43      	ldr	r3, [pc, #268]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800681a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006826:	4940      	ldr	r1, [pc, #256]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006828:	4313      	orrs	r3, r2
 800682a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006832:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006836:	d105      	bne.n	8006844 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006838:	4b3b      	ldr	r3, [pc, #236]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	4a3a      	ldr	r2, [pc, #232]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800683e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006842:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800684c:	2b00      	cmp	r3, #0
 800684e:	d015      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006850:	4b35      	ldr	r3, [pc, #212]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006856:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800685e:	4932      	ldr	r1, [pc, #200]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006860:	4313      	orrs	r3, r2
 8006862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800686a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800686e:	d105      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006870:	4b2d      	ldr	r3, [pc, #180]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	4a2c      	ldr	r2, [pc, #176]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006876:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800687a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006884:	2b00      	cmp	r3, #0
 8006886:	d015      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006888:	4b27      	ldr	r3, [pc, #156]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800688a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006896:	4924      	ldr	r1, [pc, #144]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006898:	4313      	orrs	r3, r2
 800689a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068a6:	d105      	bne.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068a8:	4b1f      	ldr	r3, [pc, #124]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	4a1e      	ldr	r2, [pc, #120]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068b2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d015      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068c0:	4b19      	ldr	r3, [pc, #100]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ce:	4916      	ldr	r1, [pc, #88]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068d0:	4313      	orrs	r3, r2
 80068d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068de:	d105      	bne.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068e0:	4b11      	ldr	r3, [pc, #68]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068e2:	68db      	ldr	r3, [r3, #12]
 80068e4:	4a10      	ldr	r2, [pc, #64]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068e6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068ea:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d019      	beq.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80068f8:	4b0b      	ldr	r3, [pc, #44]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80068fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006906:	4908      	ldr	r1, [pc, #32]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006908:	4313      	orrs	r3, r2
 800690a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006912:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006916:	d109      	bne.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006918:	4b03      	ldr	r3, [pc, #12]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800691a:	68db      	ldr	r3, [r3, #12]
 800691c:	4a02      	ldr	r2, [pc, #8]	; (8006928 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800691e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006922:	60d3      	str	r3, [r2, #12]
 8006924:	e002      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006926:	bf00      	nop
 8006928:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d015      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006938:	4b29      	ldr	r3, [pc, #164]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800693a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800693e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006946:	4926      	ldr	r1, [pc, #152]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006948:	4313      	orrs	r3, r2
 800694a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006952:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006956:	d105      	bne.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006958:	4b21      	ldr	r3, [pc, #132]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	4a20      	ldr	r2, [pc, #128]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800695e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006962:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800696c:	2b00      	cmp	r3, #0
 800696e:	d015      	beq.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006970:	4b1b      	ldr	r3, [pc, #108]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006976:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800697e:	4918      	ldr	r1, [pc, #96]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006980:	4313      	orrs	r3, r2
 8006982:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800698a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800698e:	d105      	bne.n	800699c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006990:	4b13      	ldr	r3, [pc, #76]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	4a12      	ldr	r2, [pc, #72]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006996:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800699a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d015      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80069a8:	4b0d      	ldr	r3, [pc, #52]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80069aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80069ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069b6:	490a      	ldr	r1, [pc, #40]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80069b8:	4313      	orrs	r3, r2
 80069ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069c6:	d105      	bne.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80069c8:	4b05      	ldr	r3, [pc, #20]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80069ca:	68db      	ldr	r3, [r3, #12]
 80069cc:	4a04      	ldr	r2, [pc, #16]	; (80069e0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80069ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069d2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80069d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80069d6:	4618      	mov	r0, r3
 80069d8:	3718      	adds	r7, #24
 80069da:	46bd      	mov	sp, r7
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	40021000 	.word	0x40021000

080069e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e049      	b.n	8006a8a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d106      	bne.n	8006a10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7fa fbce 	bl	80011ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	3304      	adds	r3, #4
 8006a20:	4619      	mov	r1, r3
 8006a22:	4610      	mov	r0, r2
 8006a24:	f000 fb88 	bl	8007138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2201      	movs	r2, #1
 8006a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2201      	movs	r2, #1
 8006a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2201      	movs	r2, #1
 8006a5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2201      	movs	r2, #1
 8006a64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2201      	movs	r2, #1
 8006a74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3708      	adds	r7, #8
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}
	...

08006a94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d001      	beq.n	8006aac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e054      	b.n	8006b56 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2202      	movs	r2, #2
 8006ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68da      	ldr	r2, [r3, #12]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f042 0201 	orr.w	r2, r2, #1
 8006ac2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a26      	ldr	r2, [pc, #152]	; (8006b64 <HAL_TIM_Base_Start_IT+0xd0>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d022      	beq.n	8006b14 <HAL_TIM_Base_Start_IT+0x80>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ad6:	d01d      	beq.n	8006b14 <HAL_TIM_Base_Start_IT+0x80>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a22      	ldr	r2, [pc, #136]	; (8006b68 <HAL_TIM_Base_Start_IT+0xd4>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d018      	beq.n	8006b14 <HAL_TIM_Base_Start_IT+0x80>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a21      	ldr	r2, [pc, #132]	; (8006b6c <HAL_TIM_Base_Start_IT+0xd8>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d013      	beq.n	8006b14 <HAL_TIM_Base_Start_IT+0x80>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a1f      	ldr	r2, [pc, #124]	; (8006b70 <HAL_TIM_Base_Start_IT+0xdc>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d00e      	beq.n	8006b14 <HAL_TIM_Base_Start_IT+0x80>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a1e      	ldr	r2, [pc, #120]	; (8006b74 <HAL_TIM_Base_Start_IT+0xe0>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d009      	beq.n	8006b14 <HAL_TIM_Base_Start_IT+0x80>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a1c      	ldr	r2, [pc, #112]	; (8006b78 <HAL_TIM_Base_Start_IT+0xe4>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d004      	beq.n	8006b14 <HAL_TIM_Base_Start_IT+0x80>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a1b      	ldr	r2, [pc, #108]	; (8006b7c <HAL_TIM_Base_Start_IT+0xe8>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d115      	bne.n	8006b40 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	689a      	ldr	r2, [r3, #8]
 8006b1a:	4b19      	ldr	r3, [pc, #100]	; (8006b80 <HAL_TIM_Base_Start_IT+0xec>)
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2b06      	cmp	r3, #6
 8006b24:	d015      	beq.n	8006b52 <HAL_TIM_Base_Start_IT+0xbe>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b2c:	d011      	beq.n	8006b52 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f042 0201 	orr.w	r2, r2, #1
 8006b3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b3e:	e008      	b.n	8006b52 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f042 0201 	orr.w	r2, r2, #1
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	e000      	b.n	8006b54 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b52:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3714      	adds	r7, #20
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	40012c00 	.word	0x40012c00
 8006b68:	40000400 	.word	0x40000400
 8006b6c:	40000800 	.word	0x40000800
 8006b70:	40000c00 	.word	0x40000c00
 8006b74:	40013400 	.word	0x40013400
 8006b78:	40014000 	.word	0x40014000
 8006b7c:	40015000 	.word	0x40015000
 8006b80:	00010007 	.word	0x00010007

08006b84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	f003 0302 	and.w	r3, r3, #2
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d020      	beq.n	8006be8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	f003 0302 	and.w	r3, r3, #2
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d01b      	beq.n	8006be8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f06f 0202 	mvn.w	r2, #2
 8006bb8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	699b      	ldr	r3, [r3, #24]
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fa94 	bl	80070fc <HAL_TIM_IC_CaptureCallback>
 8006bd4:	e005      	b.n	8006be2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fa86 	bl	80070e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fa97 	bl	8007110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	f003 0304 	and.w	r3, r3, #4
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d020      	beq.n	8006c34 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f003 0304 	and.w	r3, r3, #4
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d01b      	beq.n	8006c34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f06f 0204 	mvn.w	r2, #4
 8006c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2202      	movs	r2, #2
 8006c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	699b      	ldr	r3, [r3, #24]
 8006c12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 fa6e 	bl	80070fc <HAL_TIM_IC_CaptureCallback>
 8006c20:	e005      	b.n	8006c2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fa60 	bl	80070e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 fa71 	bl	8007110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	f003 0308 	and.w	r3, r3, #8
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d020      	beq.n	8006c80 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f003 0308 	and.w	r3, r3, #8
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01b      	beq.n	8006c80 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f06f 0208 	mvn.w	r2, #8
 8006c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2204      	movs	r2, #4
 8006c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	f003 0303 	and.w	r3, r3, #3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d003      	beq.n	8006c6e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c66:	6878      	ldr	r0, [r7, #4]
 8006c68:	f000 fa48 	bl	80070fc <HAL_TIM_IC_CaptureCallback>
 8006c6c:	e005      	b.n	8006c7a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fa3a 	bl	80070e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 fa4b 	bl	8007110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	f003 0310 	and.w	r3, r3, #16
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d020      	beq.n	8006ccc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f003 0310 	and.w	r3, r3, #16
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d01b      	beq.n	8006ccc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f06f 0210 	mvn.w	r2, #16
 8006c9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2208      	movs	r2, #8
 8006ca2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fa22 	bl	80070fc <HAL_TIM_IC_CaptureCallback>
 8006cb8:	e005      	b.n	8006cc6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 fa14 	bl	80070e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f000 fa25 	bl	8007110 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00c      	beq.n	8006cf0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f003 0301 	and.w	r3, r3, #1
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d007      	beq.n	8006cf0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f06f 0201 	mvn.w	r2, #1
 8006ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	f000 f9f2 	bl	80070d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d104      	bne.n	8006d04 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d00c      	beq.n	8006d1e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d007      	beq.n	8006d1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8006d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fcdd 	bl	80076d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d00c      	beq.n	8006d42 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d007      	beq.n	8006d42 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 fcd5 	bl	80076ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d00c      	beq.n	8006d66 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d007      	beq.n	8006d66 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d60:	6878      	ldr	r0, [r7, #4]
 8006d62:	f000 f9df 	bl	8007124 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f003 0320 	and.w	r3, r3, #32
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00c      	beq.n	8006d8a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d007      	beq.n	8006d8a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f06f 0220 	mvn.w	r2, #32
 8006d82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006d84:	6878      	ldr	r0, [r7, #4]
 8006d86:	f000 fc9d 	bl	80076c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d00c      	beq.n	8006dae <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d007      	beq.n	8006dae <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f000 fca9 	bl	8007700 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00c      	beq.n	8006dd2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d007      	beq.n	8006dd2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fca1 	bl	8007714 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d00c      	beq.n	8006df6 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d007      	beq.n	8006df6 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8006dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f000 fc99 	bl	8007728 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d00c      	beq.n	8006e1a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d007      	beq.n	8006e1a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8006e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fc91 	bl	800773c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e1a:	bf00      	nop
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
	...

08006e24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d101      	bne.n	8006e40 <HAL_TIM_ConfigClockSource+0x1c>
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	e0f6      	b.n	800702e <HAL_TIM_ConfigClockSource+0x20a>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2202      	movs	r2, #2
 8006e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006e5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a6f      	ldr	r2, [pc, #444]	; (8007038 <HAL_TIM_ConfigClockSource+0x214>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	f000 80c1 	beq.w	8007002 <HAL_TIM_ConfigClockSource+0x1de>
 8006e80:	4a6d      	ldr	r2, [pc, #436]	; (8007038 <HAL_TIM_ConfigClockSource+0x214>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	f200 80c6 	bhi.w	8007014 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e88:	4a6c      	ldr	r2, [pc, #432]	; (800703c <HAL_TIM_ConfigClockSource+0x218>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	f000 80b9 	beq.w	8007002 <HAL_TIM_ConfigClockSource+0x1de>
 8006e90:	4a6a      	ldr	r2, [pc, #424]	; (800703c <HAL_TIM_ConfigClockSource+0x218>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	f200 80be 	bhi.w	8007014 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e98:	4a69      	ldr	r2, [pc, #420]	; (8007040 <HAL_TIM_ConfigClockSource+0x21c>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	f000 80b1 	beq.w	8007002 <HAL_TIM_ConfigClockSource+0x1de>
 8006ea0:	4a67      	ldr	r2, [pc, #412]	; (8007040 <HAL_TIM_ConfigClockSource+0x21c>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	f200 80b6 	bhi.w	8007014 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ea8:	4a66      	ldr	r2, [pc, #408]	; (8007044 <HAL_TIM_ConfigClockSource+0x220>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	f000 80a9 	beq.w	8007002 <HAL_TIM_ConfigClockSource+0x1de>
 8006eb0:	4a64      	ldr	r2, [pc, #400]	; (8007044 <HAL_TIM_ConfigClockSource+0x220>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	f200 80ae 	bhi.w	8007014 <HAL_TIM_ConfigClockSource+0x1f0>
 8006eb8:	4a63      	ldr	r2, [pc, #396]	; (8007048 <HAL_TIM_ConfigClockSource+0x224>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	f000 80a1 	beq.w	8007002 <HAL_TIM_ConfigClockSource+0x1de>
 8006ec0:	4a61      	ldr	r2, [pc, #388]	; (8007048 <HAL_TIM_ConfigClockSource+0x224>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	f200 80a6 	bhi.w	8007014 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ec8:	4a60      	ldr	r2, [pc, #384]	; (800704c <HAL_TIM_ConfigClockSource+0x228>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	f000 8099 	beq.w	8007002 <HAL_TIM_ConfigClockSource+0x1de>
 8006ed0:	4a5e      	ldr	r2, [pc, #376]	; (800704c <HAL_TIM_ConfigClockSource+0x228>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	f200 809e 	bhi.w	8007014 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ed8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006edc:	f000 8091 	beq.w	8007002 <HAL_TIM_ConfigClockSource+0x1de>
 8006ee0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006ee4:	f200 8096 	bhi.w	8007014 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ee8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006eec:	f000 8089 	beq.w	8007002 <HAL_TIM_ConfigClockSource+0x1de>
 8006ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ef4:	f200 808e 	bhi.w	8007014 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ef8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006efc:	d03e      	beq.n	8006f7c <HAL_TIM_ConfigClockSource+0x158>
 8006efe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f02:	f200 8087 	bhi.w	8007014 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f0a:	f000 8086 	beq.w	800701a <HAL_TIM_ConfigClockSource+0x1f6>
 8006f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f12:	d87f      	bhi.n	8007014 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f14:	2b70      	cmp	r3, #112	; 0x70
 8006f16:	d01a      	beq.n	8006f4e <HAL_TIM_ConfigClockSource+0x12a>
 8006f18:	2b70      	cmp	r3, #112	; 0x70
 8006f1a:	d87b      	bhi.n	8007014 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f1c:	2b60      	cmp	r3, #96	; 0x60
 8006f1e:	d050      	beq.n	8006fc2 <HAL_TIM_ConfigClockSource+0x19e>
 8006f20:	2b60      	cmp	r3, #96	; 0x60
 8006f22:	d877      	bhi.n	8007014 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f24:	2b50      	cmp	r3, #80	; 0x50
 8006f26:	d03c      	beq.n	8006fa2 <HAL_TIM_ConfigClockSource+0x17e>
 8006f28:	2b50      	cmp	r3, #80	; 0x50
 8006f2a:	d873      	bhi.n	8007014 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f2c:	2b40      	cmp	r3, #64	; 0x40
 8006f2e:	d058      	beq.n	8006fe2 <HAL_TIM_ConfigClockSource+0x1be>
 8006f30:	2b40      	cmp	r3, #64	; 0x40
 8006f32:	d86f      	bhi.n	8007014 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f34:	2b30      	cmp	r3, #48	; 0x30
 8006f36:	d064      	beq.n	8007002 <HAL_TIM_ConfigClockSource+0x1de>
 8006f38:	2b30      	cmp	r3, #48	; 0x30
 8006f3a:	d86b      	bhi.n	8007014 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f3c:	2b20      	cmp	r3, #32
 8006f3e:	d060      	beq.n	8007002 <HAL_TIM_ConfigClockSource+0x1de>
 8006f40:	2b20      	cmp	r3, #32
 8006f42:	d867      	bhi.n	8007014 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d05c      	beq.n	8007002 <HAL_TIM_ConfigClockSource+0x1de>
 8006f48:	2b10      	cmp	r3, #16
 8006f4a:	d05a      	beq.n	8007002 <HAL_TIM_ConfigClockSource+0x1de>
 8006f4c:	e062      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f5e:	f000 fafb 	bl	8007558 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689b      	ldr	r3, [r3, #8]
 8006f68:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f70:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68ba      	ldr	r2, [r7, #8]
 8006f78:	609a      	str	r2, [r3, #8]
      break;
 8006f7a:	e04f      	b.n	800701c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f8c:	f000 fae4 	bl	8007558 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f9e:	609a      	str	r2, [r3, #8]
      break;
 8006fa0:	e03c      	b.n	800701c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fae:	461a      	mov	r2, r3
 8006fb0:	f000 fa56 	bl	8007460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	2150      	movs	r1, #80	; 0x50
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f000 faaf 	bl	800751e <TIM_ITRx_SetConfig>
      break;
 8006fc0:	e02c      	b.n	800701c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f000 fa75 	bl	80074be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2160      	movs	r1, #96	; 0x60
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f000 fa9f 	bl	800751e <TIM_ITRx_SetConfig>
      break;
 8006fe0:	e01c      	b.n	800701c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fee:	461a      	mov	r2, r3
 8006ff0:	f000 fa36 	bl	8007460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2140      	movs	r1, #64	; 0x40
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	f000 fa8f 	bl	800751e <TIM_ITRx_SetConfig>
      break;
 8007000:	e00c      	b.n	800701c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	4619      	mov	r1, r3
 800700c:	4610      	mov	r0, r2
 800700e:	f000 fa86 	bl	800751e <TIM_ITRx_SetConfig>
      break;
 8007012:	e003      	b.n	800701c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	73fb      	strb	r3, [r7, #15]
      break;
 8007018:	e000      	b.n	800701c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800701a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800702c:	7bfb      	ldrb	r3, [r7, #15]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}
 8007036:	bf00      	nop
 8007038:	00100070 	.word	0x00100070
 800703c:	00100060 	.word	0x00100060
 8007040:	00100050 	.word	0x00100050
 8007044:	00100040 	.word	0x00100040
 8007048:	00100030 	.word	0x00100030
 800704c:	00100020 	.word	0x00100020

08007050 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b082      	sub	sp, #8
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007060:	2b01      	cmp	r3, #1
 8007062:	d101      	bne.n	8007068 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007064:	2302      	movs	r3, #2
 8007066:	e031      	b.n	80070cc <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2202      	movs	r2, #2
 8007074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007078:	6839      	ldr	r1, [r7, #0]
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f000 f910 	bl	80072a0 <TIM_SlaveTimer_SetConfig>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d009      	beq.n	800709a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e018      	b.n	80070cc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68da      	ldr	r2, [r3, #12]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070a8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070b8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070f0:	bf00      	nop
 80070f2:	370c      	adds	r7, #12
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007110:	b480      	push	{r7}
 8007112:	b083      	sub	sp, #12
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007118:	bf00      	nop
 800711a:	370c      	adds	r7, #12
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007124:	b480      	push	{r7}
 8007126:	b083      	sub	sp, #12
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800712c:	bf00      	nop
 800712e:	370c      	adds	r7, #12
 8007130:	46bd      	mov	sp, r7
 8007132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007136:	4770      	bx	lr

08007138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007138:	b480      	push	{r7}
 800713a:	b085      	sub	sp, #20
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
 8007140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a4c      	ldr	r2, [pc, #304]	; (800727c <TIM_Base_SetConfig+0x144>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d017      	beq.n	8007180 <TIM_Base_SetConfig+0x48>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007156:	d013      	beq.n	8007180 <TIM_Base_SetConfig+0x48>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a49      	ldr	r2, [pc, #292]	; (8007280 <TIM_Base_SetConfig+0x148>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d00f      	beq.n	8007180 <TIM_Base_SetConfig+0x48>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a48      	ldr	r2, [pc, #288]	; (8007284 <TIM_Base_SetConfig+0x14c>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d00b      	beq.n	8007180 <TIM_Base_SetConfig+0x48>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a47      	ldr	r2, [pc, #284]	; (8007288 <TIM_Base_SetConfig+0x150>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d007      	beq.n	8007180 <TIM_Base_SetConfig+0x48>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a46      	ldr	r2, [pc, #280]	; (800728c <TIM_Base_SetConfig+0x154>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d003      	beq.n	8007180 <TIM_Base_SetConfig+0x48>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	4a45      	ldr	r2, [pc, #276]	; (8007290 <TIM_Base_SetConfig+0x158>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d108      	bne.n	8007192 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007186:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	4313      	orrs	r3, r2
 8007190:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a39      	ldr	r2, [pc, #228]	; (800727c <TIM_Base_SetConfig+0x144>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d023      	beq.n	80071e2 <TIM_Base_SetConfig+0xaa>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071a0:	d01f      	beq.n	80071e2 <TIM_Base_SetConfig+0xaa>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a36      	ldr	r2, [pc, #216]	; (8007280 <TIM_Base_SetConfig+0x148>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d01b      	beq.n	80071e2 <TIM_Base_SetConfig+0xaa>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a35      	ldr	r2, [pc, #212]	; (8007284 <TIM_Base_SetConfig+0x14c>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d017      	beq.n	80071e2 <TIM_Base_SetConfig+0xaa>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a34      	ldr	r2, [pc, #208]	; (8007288 <TIM_Base_SetConfig+0x150>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d013      	beq.n	80071e2 <TIM_Base_SetConfig+0xaa>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a33      	ldr	r2, [pc, #204]	; (800728c <TIM_Base_SetConfig+0x154>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d00f      	beq.n	80071e2 <TIM_Base_SetConfig+0xaa>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a33      	ldr	r2, [pc, #204]	; (8007294 <TIM_Base_SetConfig+0x15c>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d00b      	beq.n	80071e2 <TIM_Base_SetConfig+0xaa>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a32      	ldr	r2, [pc, #200]	; (8007298 <TIM_Base_SetConfig+0x160>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d007      	beq.n	80071e2 <TIM_Base_SetConfig+0xaa>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a31      	ldr	r2, [pc, #196]	; (800729c <TIM_Base_SetConfig+0x164>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d003      	beq.n	80071e2 <TIM_Base_SetConfig+0xaa>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a2c      	ldr	r2, [pc, #176]	; (8007290 <TIM_Base_SetConfig+0x158>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d108      	bne.n	80071f4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80071e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	68fa      	ldr	r2, [r7, #12]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	695b      	ldr	r3, [r3, #20]
 80071fe:	4313      	orrs	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68fa      	ldr	r2, [r7, #12]
 8007206:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007208:	683b      	ldr	r3, [r7, #0]
 800720a:	689a      	ldr	r2, [r3, #8]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	681a      	ldr	r2, [r3, #0]
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4a18      	ldr	r2, [pc, #96]	; (800727c <TIM_Base_SetConfig+0x144>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d013      	beq.n	8007248 <TIM_Base_SetConfig+0x110>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a1a      	ldr	r2, [pc, #104]	; (800728c <TIM_Base_SetConfig+0x154>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d00f      	beq.n	8007248 <TIM_Base_SetConfig+0x110>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	4a1a      	ldr	r2, [pc, #104]	; (8007294 <TIM_Base_SetConfig+0x15c>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d00b      	beq.n	8007248 <TIM_Base_SetConfig+0x110>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	4a19      	ldr	r2, [pc, #100]	; (8007298 <TIM_Base_SetConfig+0x160>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d007      	beq.n	8007248 <TIM_Base_SetConfig+0x110>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	4a18      	ldr	r2, [pc, #96]	; (800729c <TIM_Base_SetConfig+0x164>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d003      	beq.n	8007248 <TIM_Base_SetConfig+0x110>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a13      	ldr	r2, [pc, #76]	; (8007290 <TIM_Base_SetConfig+0x158>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d103      	bne.n	8007250 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	691a      	ldr	r2, [r3, #16]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	f003 0301 	and.w	r3, r3, #1
 800725e:	2b01      	cmp	r3, #1
 8007260:	d105      	bne.n	800726e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	f023 0201 	bic.w	r2, r3, #1
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	611a      	str	r2, [r3, #16]
  }
}
 800726e:	bf00      	nop
 8007270:	3714      	adds	r7, #20
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	40012c00 	.word	0x40012c00
 8007280:	40000400 	.word	0x40000400
 8007284:	40000800 	.word	0x40000800
 8007288:	40000c00 	.word	0x40000c00
 800728c:	40013400 	.word	0x40013400
 8007290:	40015000 	.word	0x40015000
 8007294:	40014000 	.word	0x40014000
 8007298:	40014400 	.word	0x40014400
 800729c:	40014800 	.word	0x40014800

080072a0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b086      	sub	sp, #24
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
 80072a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80072aa:	2300      	movs	r3, #0
 80072ac:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80072bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072c0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80072cc:	693b      	ldr	r3, [r7, #16]
 80072ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072d2:	f023 0307 	bic.w	r3, r3, #7
 80072d6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	693a      	ldr	r2, [r7, #16]
 80072de:	4313      	orrs	r3, r2
 80072e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	693a      	ldr	r2, [r7, #16]
 80072e8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	4a56      	ldr	r2, [pc, #344]	; (8007448 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	f000 80a2 	beq.w	800743a <TIM_SlaveTimer_SetConfig+0x19a>
 80072f6:	4a54      	ldr	r2, [pc, #336]	; (8007448 <TIM_SlaveTimer_SetConfig+0x1a8>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	f200 809b 	bhi.w	8007434 <TIM_SlaveTimer_SetConfig+0x194>
 80072fe:	4a53      	ldr	r2, [pc, #332]	; (800744c <TIM_SlaveTimer_SetConfig+0x1ac>)
 8007300:	4293      	cmp	r3, r2
 8007302:	f000 809a 	beq.w	800743a <TIM_SlaveTimer_SetConfig+0x19a>
 8007306:	4a51      	ldr	r2, [pc, #324]	; (800744c <TIM_SlaveTimer_SetConfig+0x1ac>)
 8007308:	4293      	cmp	r3, r2
 800730a:	f200 8093 	bhi.w	8007434 <TIM_SlaveTimer_SetConfig+0x194>
 800730e:	4a50      	ldr	r2, [pc, #320]	; (8007450 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8007310:	4293      	cmp	r3, r2
 8007312:	f000 8092 	beq.w	800743a <TIM_SlaveTimer_SetConfig+0x19a>
 8007316:	4a4e      	ldr	r2, [pc, #312]	; (8007450 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8007318:	4293      	cmp	r3, r2
 800731a:	f200 808b 	bhi.w	8007434 <TIM_SlaveTimer_SetConfig+0x194>
 800731e:	4a4d      	ldr	r2, [pc, #308]	; (8007454 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8007320:	4293      	cmp	r3, r2
 8007322:	f000 808a 	beq.w	800743a <TIM_SlaveTimer_SetConfig+0x19a>
 8007326:	4a4b      	ldr	r2, [pc, #300]	; (8007454 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8007328:	4293      	cmp	r3, r2
 800732a:	f200 8083 	bhi.w	8007434 <TIM_SlaveTimer_SetConfig+0x194>
 800732e:	4a4a      	ldr	r2, [pc, #296]	; (8007458 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8007330:	4293      	cmp	r3, r2
 8007332:	f000 8082 	beq.w	800743a <TIM_SlaveTimer_SetConfig+0x19a>
 8007336:	4a48      	ldr	r2, [pc, #288]	; (8007458 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d87b      	bhi.n	8007434 <TIM_SlaveTimer_SetConfig+0x194>
 800733c:	4a47      	ldr	r2, [pc, #284]	; (800745c <TIM_SlaveTimer_SetConfig+0x1bc>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d07b      	beq.n	800743a <TIM_SlaveTimer_SetConfig+0x19a>
 8007342:	4a46      	ldr	r2, [pc, #280]	; (800745c <TIM_SlaveTimer_SetConfig+0x1bc>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d875      	bhi.n	8007434 <TIM_SlaveTimer_SetConfig+0x194>
 8007348:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800734c:	d075      	beq.n	800743a <TIM_SlaveTimer_SetConfig+0x19a>
 800734e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007352:	d86f      	bhi.n	8007434 <TIM_SlaveTimer_SetConfig+0x194>
 8007354:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007358:	d06f      	beq.n	800743a <TIM_SlaveTimer_SetConfig+0x19a>
 800735a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800735e:	d869      	bhi.n	8007434 <TIM_SlaveTimer_SetConfig+0x194>
 8007360:	2b70      	cmp	r3, #112	; 0x70
 8007362:	d01a      	beq.n	800739a <TIM_SlaveTimer_SetConfig+0xfa>
 8007364:	2b70      	cmp	r3, #112	; 0x70
 8007366:	d865      	bhi.n	8007434 <TIM_SlaveTimer_SetConfig+0x194>
 8007368:	2b60      	cmp	r3, #96	; 0x60
 800736a:	d059      	beq.n	8007420 <TIM_SlaveTimer_SetConfig+0x180>
 800736c:	2b60      	cmp	r3, #96	; 0x60
 800736e:	d861      	bhi.n	8007434 <TIM_SlaveTimer_SetConfig+0x194>
 8007370:	2b50      	cmp	r3, #80	; 0x50
 8007372:	d04b      	beq.n	800740c <TIM_SlaveTimer_SetConfig+0x16c>
 8007374:	2b50      	cmp	r3, #80	; 0x50
 8007376:	d85d      	bhi.n	8007434 <TIM_SlaveTimer_SetConfig+0x194>
 8007378:	2b40      	cmp	r3, #64	; 0x40
 800737a:	d019      	beq.n	80073b0 <TIM_SlaveTimer_SetConfig+0x110>
 800737c:	2b40      	cmp	r3, #64	; 0x40
 800737e:	d859      	bhi.n	8007434 <TIM_SlaveTimer_SetConfig+0x194>
 8007380:	2b30      	cmp	r3, #48	; 0x30
 8007382:	d05a      	beq.n	800743a <TIM_SlaveTimer_SetConfig+0x19a>
 8007384:	2b30      	cmp	r3, #48	; 0x30
 8007386:	d855      	bhi.n	8007434 <TIM_SlaveTimer_SetConfig+0x194>
 8007388:	2b20      	cmp	r3, #32
 800738a:	d056      	beq.n	800743a <TIM_SlaveTimer_SetConfig+0x19a>
 800738c:	2b20      	cmp	r3, #32
 800738e:	d851      	bhi.n	8007434 <TIM_SlaveTimer_SetConfig+0x194>
 8007390:	2b00      	cmp	r3, #0
 8007392:	d052      	beq.n	800743a <TIM_SlaveTimer_SetConfig+0x19a>
 8007394:	2b10      	cmp	r3, #16
 8007396:	d050      	beq.n	800743a <TIM_SlaveTimer_SetConfig+0x19a>
 8007398:	e04c      	b.n	8007434 <TIM_SlaveTimer_SetConfig+0x194>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80073aa:	f000 f8d5 	bl	8007558 <TIM_ETR_SetConfig>
      break;
 80073ae:	e045      	b.n	800743c <TIM_SlaveTimer_SetConfig+0x19c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	2b05      	cmp	r3, #5
 80073b6:	d004      	beq.n	80073c2 <TIM_SlaveTimer_SetConfig+0x122>
          (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	681b      	ldr	r3, [r3, #0]
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || \
 80073bc:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 80073c0:	d101      	bne.n	80073c6 <TIM_SlaveTimer_SetConfig+0x126>
      {
        return HAL_ERROR;
 80073c2:	2301      	movs	r3, #1
 80073c4:	e03b      	b.n	800743e <TIM_SlaveTimer_SetConfig+0x19e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6a1b      	ldr	r3, [r3, #32]
 80073cc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	6a1a      	ldr	r2, [r3, #32]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f022 0201 	bic.w	r2, r2, #1
 80073dc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	699b      	ldr	r3, [r3, #24]
 80073e4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073ec:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	011b      	lsls	r3, r3, #4
 80073f4:	68ba      	ldr	r2, [r7, #8]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68ba      	ldr	r2, [r7, #8]
 8007400:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	68fa      	ldr	r2, [r7, #12]
 8007408:	621a      	str	r2, [r3, #32]
      break;
 800740a:	e017      	b.n	800743c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007418:	461a      	mov	r2, r3
 800741a:	f000 f821 	bl	8007460 <TIM_TI1_ConfigInputStage>
      break;
 800741e:	e00d      	b.n	800743c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800742c:	461a      	mov	r2, r3
 800742e:	f000 f846 	bl	80074be <TIM_TI2_ConfigInputStage>
      break;
 8007432:	e003      	b.n	800743c <TIM_SlaveTimer_SetConfig+0x19c>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      status = HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	75fb      	strb	r3, [r7, #23]
      break;
 8007438:	e000      	b.n	800743c <TIM_SlaveTimer_SetConfig+0x19c>
      break;
 800743a:	bf00      	nop
  }

  return status;
 800743c:	7dfb      	ldrb	r3, [r7, #23]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3718      	adds	r7, #24
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	00100070 	.word	0x00100070
 800744c:	00100060 	.word	0x00100060
 8007450:	00100050 	.word	0x00100050
 8007454:	00100040 	.word	0x00100040
 8007458:	00100030 	.word	0x00100030
 800745c:	00100020 	.word	0x00100020

08007460 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007460:	b480      	push	{r7}
 8007462:	b087      	sub	sp, #28
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6a1b      	ldr	r3, [r3, #32]
 8007470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6a1b      	ldr	r3, [r3, #32]
 8007476:	f023 0201 	bic.w	r2, r3, #1
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800748a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	011b      	lsls	r3, r3, #4
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	4313      	orrs	r3, r2
 8007494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f023 030a 	bic.w	r3, r3, #10
 800749c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	697a      	ldr	r2, [r7, #20]
 80074b0:	621a      	str	r2, [r3, #32]
}
 80074b2:	bf00      	nop
 80074b4:	371c      	adds	r7, #28
 80074b6:	46bd      	mov	sp, r7
 80074b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074bc:	4770      	bx	lr

080074be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074be:	b480      	push	{r7}
 80074c0:	b087      	sub	sp, #28
 80074c2:	af00      	add	r7, sp, #0
 80074c4:	60f8      	str	r0, [r7, #12]
 80074c6:	60b9      	str	r1, [r7, #8]
 80074c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6a1b      	ldr	r3, [r3, #32]
 80074ce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	f023 0210 	bic.w	r2, r3, #16
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	699b      	ldr	r3, [r3, #24]
 80074e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	031b      	lsls	r3, r3, #12
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	4313      	orrs	r3, r2
 80074f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074f4:	697b      	ldr	r3, [r7, #20]
 80074f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074fa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	011b      	lsls	r3, r3, #4
 8007500:	697a      	ldr	r2, [r7, #20]
 8007502:	4313      	orrs	r3, r2
 8007504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	697a      	ldr	r2, [r7, #20]
 8007510:	621a      	str	r2, [r3, #32]
}
 8007512:	bf00      	nop
 8007514:	371c      	adds	r7, #28
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr

0800751e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800751e:	b480      	push	{r7}
 8007520:	b085      	sub	sp, #20
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007538:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800753a:	683a      	ldr	r2, [r7, #0]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4313      	orrs	r3, r2
 8007540:	f043 0307 	orr.w	r3, r3, #7
 8007544:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	609a      	str	r2, [r3, #8]
}
 800754c:	bf00      	nop
 800754e:	3714      	adds	r7, #20
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
 8007564:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007572:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	021a      	lsls	r2, r3, #8
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	431a      	orrs	r2, r3
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	4313      	orrs	r3, r2
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	4313      	orrs	r3, r2
 8007584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	609a      	str	r2, [r3, #8]
}
 800758c:	bf00      	nop
 800758e:	371c      	adds	r7, #28
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d101      	bne.n	80075b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075ac:	2302      	movs	r3, #2
 80075ae:	e074      	b.n	800769a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2201      	movs	r2, #1
 80075b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2202      	movs	r2, #2
 80075bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a34      	ldr	r2, [pc, #208]	; (80076a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d009      	beq.n	80075ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a33      	ldr	r2, [pc, #204]	; (80076ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d004      	beq.n	80075ee <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a31      	ldr	r2, [pc, #196]	; (80076b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d108      	bne.n	8007600 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80075f4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800760a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	4313      	orrs	r3, r2
 8007614:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68fa      	ldr	r2, [r7, #12]
 800761c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a21      	ldr	r2, [pc, #132]	; (80076a8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d022      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007630:	d01d      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a1f      	ldr	r2, [pc, #124]	; (80076b4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007638:	4293      	cmp	r3, r2
 800763a:	d018      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a1d      	ldr	r2, [pc, #116]	; (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d013      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	4a1c      	ldr	r2, [pc, #112]	; (80076bc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d00e      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	4a15      	ldr	r2, [pc, #84]	; (80076ac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d009      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a18      	ldr	r2, [pc, #96]	; (80076c0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007660:	4293      	cmp	r3, r2
 8007662:	d004      	beq.n	800766e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	4a11      	ldr	r2, [pc, #68]	; (80076b0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d10c      	bne.n	8007688 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007674:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	4313      	orrs	r3, r2
 800767e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68ba      	ldr	r2, [r7, #8]
 8007686:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2201      	movs	r2, #1
 800768c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2200      	movs	r2, #0
 8007694:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3714      	adds	r7, #20
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	40012c00 	.word	0x40012c00
 80076ac:	40013400 	.word	0x40013400
 80076b0:	40015000 	.word	0x40015000
 80076b4:	40000400 	.word	0x40000400
 80076b8:	40000800 	.word	0x40000800
 80076bc:	40000c00 	.word	0x40000c00
 80076c0:	40014000 	.word	0x40014000

080076c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007700:	b480      	push	{r7}
 8007702:	b083      	sub	sp, #12
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007708:	bf00      	nop
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8007750:	b480      	push	{r7}
 8007752:	b085      	sub	sp, #20
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007760:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8007764:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	b29a      	uxth	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	3714      	adds	r7, #20
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800777e:	b480      	push	{r7}
 8007780:	b085      	sub	sp, #20
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8007786:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800778a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8007792:	b29a      	uxth	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	b29b      	uxth	r3, r3
 8007798:	43db      	mvns	r3, r3
 800779a:	b29b      	uxth	r3, r3
 800779c:	4013      	ands	r3, r2
 800779e:	b29a      	uxth	r2, r3
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3714      	adds	r7, #20
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	1d3b      	adds	r3, r7, #4
 80077be:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80077e2:	2300      	movs	r3, #0
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b09d      	sub	sp, #116	; 0x74
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
 80077f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80077fa:	2300      	movs	r3, #0
 80077fc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8007800:	687a      	ldr	r2, [r7, #4]
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4413      	add	r3, r2
 800780a:	881b      	ldrh	r3, [r3, #0]
 800780c:	b29b      	uxth	r3, r3
 800780e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8007812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007816:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	78db      	ldrb	r3, [r3, #3]
 800781e:	2b03      	cmp	r3, #3
 8007820:	d81f      	bhi.n	8007862 <USB_ActivateEndpoint+0x72>
 8007822:	a201      	add	r2, pc, #4	; (adr r2, 8007828 <USB_ActivateEndpoint+0x38>)
 8007824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007828:	08007839 	.word	0x08007839
 800782c:	08007855 	.word	0x08007855
 8007830:	0800786b 	.word	0x0800786b
 8007834:	08007847 	.word	0x08007847
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8007838:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800783c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007840:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007844:	e012      	b.n	800786c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8007846:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800784a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800784e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007852:	e00b      	b.n	800786c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8007854:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007858:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800785c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8007860:	e004      	b.n	800786c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8007868:	e000      	b.n	800786c <USB_ActivateEndpoint+0x7c>
      break;
 800786a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	009b      	lsls	r3, r3, #2
 8007874:	441a      	add	r2, r3
 8007876:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800787a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800787e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007882:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800788a:	b29b      	uxth	r3, r3
 800788c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4413      	add	r3, r2
 8007898:	881b      	ldrh	r3, [r3, #0]
 800789a:	b29b      	uxth	r3, r3
 800789c:	b21b      	sxth	r3, r3
 800789e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078a6:	b21a      	sxth	r2, r3
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	781b      	ldrb	r3, [r3, #0]
 80078ac:	b21b      	sxth	r3, r3
 80078ae:	4313      	orrs	r3, r2
 80078b0:	b21b      	sxth	r3, r3
 80078b2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	009b      	lsls	r3, r3, #2
 80078be:	441a      	add	r2, r3
 80078c0:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80078c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	7b1b      	ldrb	r3, [r3, #12]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f040 8178 	bne.w	8007bd2 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	785b      	ldrb	r3, [r3, #1]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 8084 	beq.w	80079f4 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	61bb      	str	r3, [r7, #24]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	461a      	mov	r2, r3
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	4413      	add	r3, r2
 80078fe:	61bb      	str	r3, [r7, #24]
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	781b      	ldrb	r3, [r3, #0]
 8007904:	00da      	lsls	r2, r3, #3
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	4413      	add	r3, r2
 800790a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800790e:	617b      	str	r3, [r7, #20]
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	88db      	ldrh	r3, [r3, #6]
 8007914:	085b      	lsrs	r3, r3, #1
 8007916:	b29b      	uxth	r3, r3
 8007918:	005b      	lsls	r3, r3, #1
 800791a:	b29a      	uxth	r2, r3
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	009b      	lsls	r3, r3, #2
 8007928:	4413      	add	r3, r2
 800792a:	881b      	ldrh	r3, [r3, #0]
 800792c:	827b      	strh	r3, [r7, #18]
 800792e:	8a7b      	ldrh	r3, [r7, #18]
 8007930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007934:	2b00      	cmp	r3, #0
 8007936:	d01b      	beq.n	8007970 <USB_ActivateEndpoint+0x180>
 8007938:	687a      	ldr	r2, [r7, #4]
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4413      	add	r3, r2
 8007942:	881b      	ldrh	r3, [r3, #0]
 8007944:	b29b      	uxth	r3, r3
 8007946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800794a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800794e:	823b      	strh	r3, [r7, #16]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	441a      	add	r2, r3
 800795a:	8a3b      	ldrh	r3, [r7, #16]
 800795c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007968:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800796c:	b29b      	uxth	r3, r3
 800796e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	78db      	ldrb	r3, [r3, #3]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d020      	beq.n	80079ba <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007978:	687a      	ldr	r2, [r7, #4]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	009b      	lsls	r3, r3, #2
 8007980:	4413      	add	r3, r2
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	b29b      	uxth	r3, r3
 8007986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800798a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800798e:	81bb      	strh	r3, [r7, #12]
 8007990:	89bb      	ldrh	r3, [r7, #12]
 8007992:	f083 0320 	eor.w	r3, r3, #32
 8007996:	81bb      	strh	r3, [r7, #12]
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	441a      	add	r2, r3
 80079a2:	89bb      	ldrh	r3, [r7, #12]
 80079a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	8013      	strh	r3, [r2, #0]
 80079b8:	e2d5      	b.n	8007f66 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	009b      	lsls	r3, r3, #2
 80079c2:	4413      	add	r3, r2
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079d0:	81fb      	strh	r3, [r7, #14]
 80079d2:	687a      	ldr	r2, [r7, #4]
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	781b      	ldrb	r3, [r3, #0]
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	441a      	add	r2, r3
 80079dc:	89fb      	ldrh	r3, [r7, #14]
 80079de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80079ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	8013      	strh	r3, [r2, #0]
 80079f2:	e2b8      	b.n	8007f66 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	633b      	str	r3, [r7, #48]	; 0x30
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	461a      	mov	r2, r3
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	4413      	add	r3, r2
 8007a06:	633b      	str	r3, [r7, #48]	; 0x30
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	781b      	ldrb	r3, [r3, #0]
 8007a0c:	00da      	lsls	r2, r3, #3
 8007a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a10:	4413      	add	r3, r2
 8007a12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007a16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	88db      	ldrh	r3, [r3, #6]
 8007a1c:	085b      	lsrs	r3, r3, #1
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	005b      	lsls	r3, r3, #1
 8007a22:	b29a      	uxth	r2, r3
 8007a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a26:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a32:	b29b      	uxth	r3, r3
 8007a34:	461a      	mov	r2, r3
 8007a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a38:	4413      	add	r3, r2
 8007a3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	00da      	lsls	r2, r3, #3
 8007a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a44:	4413      	add	r3, r2
 8007a46:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a4a:	627b      	str	r3, [r7, #36]	; 0x24
 8007a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4e:	881b      	ldrh	r3, [r3, #0]
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007a56:	b29a      	uxth	r2, r3
 8007a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5a:	801a      	strh	r2, [r3, #0]
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	691b      	ldr	r3, [r3, #16]
 8007a60:	2b3e      	cmp	r3, #62	; 0x3e
 8007a62:	d91d      	bls.n	8007aa0 <USB_ActivateEndpoint+0x2b0>
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	095b      	lsrs	r3, r3, #5
 8007a6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	691b      	ldr	r3, [r3, #16]
 8007a70:	f003 031f 	and.w	r3, r3, #31
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d102      	bne.n	8007a7e <USB_ActivateEndpoint+0x28e>
 8007a78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a7a:	3b01      	subs	r3, #1
 8007a7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a80:	881b      	ldrh	r3, [r3, #0]
 8007a82:	b29a      	uxth	r2, r3
 8007a84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	029b      	lsls	r3, r3, #10
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9c:	801a      	strh	r2, [r3, #0]
 8007a9e:	e026      	b.n	8007aee <USB_ActivateEndpoint+0x2fe>
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	691b      	ldr	r3, [r3, #16]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d10a      	bne.n	8007abe <USB_ActivateEndpoint+0x2ce>
 8007aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aaa:	881b      	ldrh	r3, [r3, #0]
 8007aac:	b29b      	uxth	r3, r3
 8007aae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ab2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ab6:	b29a      	uxth	r2, r3
 8007ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aba:	801a      	strh	r2, [r3, #0]
 8007abc:	e017      	b.n	8007aee <USB_ActivateEndpoint+0x2fe>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	085b      	lsrs	r3, r3, #1
 8007ac4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	691b      	ldr	r3, [r3, #16]
 8007aca:	f003 0301 	and.w	r3, r3, #1
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <USB_ActivateEndpoint+0x2e8>
 8007ad2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ada:	881b      	ldrh	r3, [r3, #0]
 8007adc:	b29a      	uxth	r2, r3
 8007ade:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	029b      	lsls	r3, r3, #10
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	b29a      	uxth	r2, r3
 8007aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aec:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	4413      	add	r3, r2
 8007af8:	881b      	ldrh	r3, [r3, #0]
 8007afa:	847b      	strh	r3, [r7, #34]	; 0x22
 8007afc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d01b      	beq.n	8007b3e <USB_ActivateEndpoint+0x34e>
 8007b06:	687a      	ldr	r2, [r7, #4]
 8007b08:	683b      	ldr	r3, [r7, #0]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	009b      	lsls	r3, r3, #2
 8007b0e:	4413      	add	r3, r2
 8007b10:	881b      	ldrh	r3, [r3, #0]
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1c:	843b      	strh	r3, [r7, #32]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	781b      	ldrb	r3, [r3, #0]
 8007b24:	009b      	lsls	r3, r3, #2
 8007b26:	441a      	add	r2, r3
 8007b28:	8c3b      	ldrh	r3, [r7, #32]
 8007b2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	781b      	ldrb	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d124      	bne.n	8007b90 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	781b      	ldrb	r3, [r3, #0]
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	4413      	add	r3, r2
 8007b50:	881b      	ldrh	r3, [r3, #0]
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b5c:	83bb      	strh	r3, [r7, #28]
 8007b5e:	8bbb      	ldrh	r3, [r7, #28]
 8007b60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007b64:	83bb      	strh	r3, [r7, #28]
 8007b66:	8bbb      	ldrh	r3, [r7, #28]
 8007b68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007b6c:	83bb      	strh	r3, [r7, #28]
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	441a      	add	r2, r3
 8007b78:	8bbb      	ldrh	r3, [r7, #28]
 8007b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	8013      	strh	r3, [r2, #0]
 8007b8e:	e1ea      	b.n	8007f66 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	009b      	lsls	r3, r3, #2
 8007b98:	4413      	add	r3, r2
 8007b9a:	881b      	ldrh	r3, [r3, #0]
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ba6:	83fb      	strh	r3, [r7, #30]
 8007ba8:	8bfb      	ldrh	r3, [r7, #30]
 8007baa:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007bae:	83fb      	strh	r3, [r7, #30]
 8007bb0:	687a      	ldr	r2, [r7, #4]
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	441a      	add	r2, r3
 8007bba:	8bfb      	ldrh	r3, [r7, #30]
 8007bbc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bc0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	8013      	strh	r3, [r2, #0]
 8007bd0:	e1c9      	b.n	8007f66 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	78db      	ldrb	r3, [r3, #3]
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d11e      	bne.n	8007c18 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007bda:	687a      	ldr	r2, [r7, #4]
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	781b      	ldrb	r3, [r3, #0]
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	4413      	add	r3, r2
 8007be4:	881b      	ldrh	r3, [r3, #0]
 8007be6:	b29b      	uxth	r3, r3
 8007be8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007bec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bf0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8007bf4:	687a      	ldr	r2, [r7, #4]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	781b      	ldrb	r3, [r3, #0]
 8007bfa:	009b      	lsls	r3, r3, #2
 8007bfc:	441a      	add	r2, r3
 8007bfe:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8007c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c0a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8007c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c12:	b29b      	uxth	r3, r3
 8007c14:	8013      	strh	r3, [r2, #0]
 8007c16:	e01d      	b.n	8007c54 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	009b      	lsls	r3, r3, #2
 8007c20:	4413      	add	r3, r2
 8007c22:	881b      	ldrh	r3, [r3, #0]
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8007c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c2e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	441a      	add	r2, r3
 8007c3c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8007c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	461a      	mov	r2, r3
 8007c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c64:	4413      	add	r3, r2
 8007c66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	00da      	lsls	r2, r3, #3
 8007c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c70:	4413      	add	r3, r2
 8007c72:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007c76:	65bb      	str	r3, [r7, #88]	; 0x58
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	891b      	ldrh	r3, [r3, #8]
 8007c7c:	085b      	lsrs	r3, r3, #1
 8007c7e:	b29b      	uxth	r3, r3
 8007c80:	005b      	lsls	r3, r3, #1
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c86:	801a      	strh	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	657b      	str	r3, [r7, #84]	; 0x54
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	461a      	mov	r2, r3
 8007c96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c98:	4413      	add	r3, r2
 8007c9a:	657b      	str	r3, [r7, #84]	; 0x54
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	781b      	ldrb	r3, [r3, #0]
 8007ca0:	00da      	lsls	r2, r3, #3
 8007ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007caa:	653b      	str	r3, [r7, #80]	; 0x50
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	895b      	ldrh	r3, [r3, #10]
 8007cb0:	085b      	lsrs	r3, r3, #1
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	005b      	lsls	r3, r3, #1
 8007cb6:	b29a      	uxth	r2, r3
 8007cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cba:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	785b      	ldrb	r3, [r3, #1]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	f040 8093 	bne.w	8007dec <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	781b      	ldrb	r3, [r3, #0]
 8007ccc:	009b      	lsls	r3, r3, #2
 8007cce:	4413      	add	r3, r2
 8007cd0:	881b      	ldrh	r3, [r3, #0]
 8007cd2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8007cd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d01b      	beq.n	8007d1a <USB_ActivateEndpoint+0x52a>
 8007ce2:	687a      	ldr	r2, [r7, #4]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	009b      	lsls	r3, r3, #2
 8007cea:	4413      	add	r3, r2
 8007cec:	881b      	ldrh	r3, [r3, #0]
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cf8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	683b      	ldr	r3, [r7, #0]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	441a      	add	r2, r3
 8007d04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	781b      	ldrb	r3, [r3, #0]
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	4413      	add	r3, r2
 8007d24:	881b      	ldrh	r3, [r3, #0]
 8007d26:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8007d28:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8007d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d01b      	beq.n	8007d6a <USB_ActivateEndpoint+0x57a>
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	009b      	lsls	r3, r3, #2
 8007d3a:	4413      	add	r3, r2
 8007d3c:	881b      	ldrh	r3, [r3, #0]
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d48:	877b      	strh	r3, [r7, #58]	; 0x3a
 8007d4a:	687a      	ldr	r2, [r7, #4]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	009b      	lsls	r3, r3, #2
 8007d52:	441a      	add	r2, r3
 8007d54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8007d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d62:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	009b      	lsls	r3, r3, #2
 8007d72:	4413      	add	r3, r2
 8007d74:	881b      	ldrh	r3, [r3, #0]
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d80:	873b      	strh	r3, [r7, #56]	; 0x38
 8007d82:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d84:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d88:	873b      	strh	r3, [r7, #56]	; 0x38
 8007d8a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d8c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007d90:	873b      	strh	r3, [r7, #56]	; 0x38
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	441a      	add	r2, r3
 8007d9c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007d9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007da2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007daa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007db2:	687a      	ldr	r2, [r7, #4]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	781b      	ldrb	r3, [r3, #0]
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	4413      	add	r3, r2
 8007dbc:	881b      	ldrh	r3, [r3, #0]
 8007dbe:	b29b      	uxth	r3, r3
 8007dc0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007dc4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8007dca:	687a      	ldr	r2, [r7, #4]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	781b      	ldrb	r3, [r3, #0]
 8007dd0:	009b      	lsls	r3, r3, #2
 8007dd2:	441a      	add	r2, r3
 8007dd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	8013      	strh	r3, [r2, #0]
 8007dea:	e0bc      	b.n	8007f66 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007dec:	687a      	ldr	r2, [r7, #4]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4413      	add	r3, r2
 8007df6:	881b      	ldrh	r3, [r3, #0]
 8007df8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007dfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d01d      	beq.n	8007e44 <USB_ActivateEndpoint+0x654>
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4413      	add	r3, r2
 8007e12:	881b      	ldrh	r3, [r3, #0]
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e1e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	441a      	add	r2, r3
 8007e2c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e40:	b29b      	uxth	r3, r3
 8007e42:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007e44:	687a      	ldr	r2, [r7, #4]
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	009b      	lsls	r3, r3, #2
 8007e4c:	4413      	add	r3, r2
 8007e4e:	881b      	ldrh	r3, [r3, #0]
 8007e50:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8007e54:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d01d      	beq.n	8007e9c <USB_ActivateEndpoint+0x6ac>
 8007e60:	687a      	ldr	r2, [r7, #4]
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	4413      	add	r3, r2
 8007e6a:	881b      	ldrh	r3, [r3, #0]
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e76:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8007e7a:	687a      	ldr	r2, [r7, #4]
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	441a      	add	r2, r3
 8007e84:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8007e88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	78db      	ldrb	r3, [r3, #3]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d024      	beq.n	8007eee <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	009b      	lsls	r3, r3, #2
 8007eac:	4413      	add	r3, r2
 8007eae:	881b      	ldrh	r3, [r3, #0]
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007ebe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007ec2:	f083 0320 	eor.w	r3, r3, #32
 8007ec6:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	441a      	add	r2, r3
 8007ed4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ee8:	b29b      	uxth	r3, r3
 8007eea:	8013      	strh	r3, [r2, #0]
 8007eec:	e01d      	b.n	8007f2a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f04:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	781b      	ldrb	r3, [r3, #0]
 8007f0e:	009b      	lsls	r3, r3, #2
 8007f10:	441a      	add	r2, r3
 8007f12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8007f16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	009b      	lsls	r3, r3, #2
 8007f32:	4413      	add	r3, r2
 8007f34:	881b      	ldrh	r3, [r3, #0]
 8007f36:	b29b      	uxth	r3, r3
 8007f38:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	009b      	lsls	r3, r3, #2
 8007f4c:	441a      	add	r2, r3
 8007f4e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007f52:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007f56:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007f5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f62:	b29b      	uxth	r3, r3
 8007f64:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8007f66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3774      	adds	r7, #116	; 0x74
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f74:	4770      	bx	lr
 8007f76:	bf00      	nop

08007f78 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b08d      	sub	sp, #52	; 0x34
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	7b1b      	ldrb	r3, [r3, #12]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f040 808e 	bne.w	80080a8 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	785b      	ldrb	r3, [r3, #1]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d044      	beq.n	800801e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	781b      	ldrb	r3, [r3, #0]
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	4413      	add	r3, r2
 8007f9e:	881b      	ldrh	r3, [r3, #0]
 8007fa0:	81bb      	strh	r3, [r7, #12]
 8007fa2:	89bb      	ldrh	r3, [r7, #12]
 8007fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d01b      	beq.n	8007fe4 <USB_DeactivateEndpoint+0x6c>
 8007fac:	687a      	ldr	r2, [r7, #4]
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	4413      	add	r3, r2
 8007fb6:	881b      	ldrh	r3, [r3, #0]
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fc2:	817b      	strh	r3, [r7, #10]
 8007fc4:	687a      	ldr	r2, [r7, #4]
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	781b      	ldrb	r3, [r3, #0]
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	441a      	add	r2, r3
 8007fce:	897b      	ldrh	r3, [r7, #10]
 8007fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007fdc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007fe0:	b29b      	uxth	r3, r3
 8007fe2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8007fe4:	687a      	ldr	r2, [r7, #4]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	881b      	ldrh	r3, [r3, #0]
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ffa:	813b      	strh	r3, [r7, #8]
 8007ffc:	687a      	ldr	r2, [r7, #4]
 8007ffe:	683b      	ldr	r3, [r7, #0]
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	009b      	lsls	r3, r3, #2
 8008004:	441a      	add	r2, r3
 8008006:	893b      	ldrh	r3, [r7, #8]
 8008008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800800c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008018:	b29b      	uxth	r3, r3
 800801a:	8013      	strh	r3, [r2, #0]
 800801c:	e192      	b.n	8008344 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	881b      	ldrh	r3, [r3, #0]
 800802a:	827b      	strh	r3, [r7, #18]
 800802c:	8a7b      	ldrh	r3, [r7, #18]
 800802e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008032:	2b00      	cmp	r3, #0
 8008034:	d01b      	beq.n	800806e <USB_DeactivateEndpoint+0xf6>
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	009b      	lsls	r3, r3, #2
 800803e:	4413      	add	r3, r2
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	b29b      	uxth	r3, r3
 8008044:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008048:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800804c:	823b      	strh	r3, [r7, #16]
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	441a      	add	r2, r3
 8008058:	8a3b      	ldrh	r3, [r7, #16]
 800805a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800805e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008062:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800806a:	b29b      	uxth	r3, r3
 800806c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	683b      	ldr	r3, [r7, #0]
 8008072:	781b      	ldrb	r3, [r3, #0]
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4413      	add	r3, r2
 8008078:	881b      	ldrh	r3, [r3, #0]
 800807a:	b29b      	uxth	r3, r3
 800807c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008080:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008084:	81fb      	strh	r3, [r7, #14]
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	441a      	add	r2, r3
 8008090:	89fb      	ldrh	r3, [r7, #14]
 8008092:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008096:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800809a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800809e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	8013      	strh	r3, [r2, #0]
 80080a6:	e14d      	b.n	8008344 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	785b      	ldrb	r3, [r3, #1]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	f040 80a5 	bne.w	80081fc <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	781b      	ldrb	r3, [r3, #0]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	881b      	ldrh	r3, [r3, #0]
 80080be:	843b      	strh	r3, [r7, #32]
 80080c0:	8c3b      	ldrh	r3, [r7, #32]
 80080c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d01b      	beq.n	8008102 <USB_DeactivateEndpoint+0x18a>
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	4413      	add	r3, r2
 80080d4:	881b      	ldrh	r3, [r3, #0]
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80080dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080e0:	83fb      	strh	r3, [r7, #30]
 80080e2:	687a      	ldr	r2, [r7, #4]
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	441a      	add	r2, r3
 80080ec:	8bfb      	ldrh	r3, [r7, #30]
 80080ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80080f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80080f6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080fe:	b29b      	uxth	r3, r3
 8008100:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	4413      	add	r3, r2
 800810c:	881b      	ldrh	r3, [r3, #0]
 800810e:	83bb      	strh	r3, [r7, #28]
 8008110:	8bbb      	ldrh	r3, [r7, #28]
 8008112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008116:	2b00      	cmp	r3, #0
 8008118:	d01b      	beq.n	8008152 <USB_DeactivateEndpoint+0x1da>
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	881b      	ldrh	r3, [r3, #0]
 8008126:	b29b      	uxth	r3, r3
 8008128:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800812c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008130:	837b      	strh	r3, [r7, #26]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	009b      	lsls	r3, r3, #2
 800813a:	441a      	add	r2, r3
 800813c:	8b7b      	ldrh	r3, [r7, #26]
 800813e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008146:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800814a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800814e:	b29b      	uxth	r3, r3
 8008150:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	4413      	add	r3, r2
 800815c:	881b      	ldrh	r3, [r3, #0]
 800815e:	b29b      	uxth	r3, r3
 8008160:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008168:	833b      	strh	r3, [r7, #24]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	781b      	ldrb	r3, [r3, #0]
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	441a      	add	r2, r3
 8008174:	8b3b      	ldrh	r3, [r7, #24]
 8008176:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800817a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800817e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008182:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008186:	b29b      	uxth	r3, r3
 8008188:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800818a:	687a      	ldr	r2, [r7, #4]
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	881b      	ldrh	r3, [r3, #0]
 8008196:	b29b      	uxth	r3, r3
 8008198:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800819c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081a0:	82fb      	strh	r3, [r7, #22]
 80081a2:	687a      	ldr	r2, [r7, #4]
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	781b      	ldrb	r3, [r3, #0]
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	441a      	add	r2, r3
 80081ac:	8afb      	ldrh	r3, [r7, #22]
 80081ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081be:	b29b      	uxth	r3, r3
 80081c0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80081c2:	687a      	ldr	r2, [r7, #4]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	781b      	ldrb	r3, [r3, #0]
 80081c8:	009b      	lsls	r3, r3, #2
 80081ca:	4413      	add	r3, r2
 80081cc:	881b      	ldrh	r3, [r3, #0]
 80081ce:	b29b      	uxth	r3, r3
 80081d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081d8:	82bb      	strh	r3, [r7, #20]
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	781b      	ldrb	r3, [r3, #0]
 80081e0:	009b      	lsls	r3, r3, #2
 80081e2:	441a      	add	r2, r3
 80081e4:	8abb      	ldrh	r3, [r7, #20]
 80081e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80081ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80081ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80081f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081f6:	b29b      	uxth	r3, r3
 80081f8:	8013      	strh	r3, [r2, #0]
 80081fa:	e0a3      	b.n	8008344 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	4413      	add	r3, r2
 8008206:	881b      	ldrh	r3, [r3, #0]
 8008208:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800820a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800820c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d01b      	beq.n	800824c <USB_DeactivateEndpoint+0x2d4>
 8008214:	687a      	ldr	r2, [r7, #4]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	781b      	ldrb	r3, [r3, #0]
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	4413      	add	r3, r2
 800821e:	881b      	ldrh	r3, [r3, #0]
 8008220:	b29b      	uxth	r3, r3
 8008222:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800822a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	781b      	ldrb	r3, [r3, #0]
 8008232:	009b      	lsls	r3, r3, #2
 8008234:	441a      	add	r2, r3
 8008236:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008238:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800823c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008240:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008248:	b29b      	uxth	r3, r3
 800824a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800824c:	687a      	ldr	r2, [r7, #4]
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	781b      	ldrb	r3, [r3, #0]
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	881b      	ldrh	r3, [r3, #0]
 8008258:	857b      	strh	r3, [r7, #42]	; 0x2a
 800825a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800825c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008260:	2b00      	cmp	r3, #0
 8008262:	d01b      	beq.n	800829c <USB_DeactivateEndpoint+0x324>
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4413      	add	r3, r2
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	b29b      	uxth	r3, r3
 8008272:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800827a:	853b      	strh	r3, [r7, #40]	; 0x28
 800827c:	687a      	ldr	r2, [r7, #4]
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	441a      	add	r2, r3
 8008286:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008288:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800828c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008290:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008294:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8008298:	b29b      	uxth	r3, r3
 800829a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	009b      	lsls	r3, r3, #2
 80082a4:	4413      	add	r3, r2
 80082a6:	881b      	ldrh	r3, [r3, #0]
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80082b4:	687a      	ldr	r2, [r7, #4]
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	781b      	ldrb	r3, [r3, #0]
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	441a      	add	r2, r3
 80082be:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80082c0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082c4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80082c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80082cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	781b      	ldrb	r3, [r3, #0]
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	4413      	add	r3, r2
 80082de:	881b      	ldrh	r3, [r3, #0]
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	441a      	add	r2, r3
 80082f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80082f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80082fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008300:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008304:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008308:	b29b      	uxth	r3, r3
 800830a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800830c:	687a      	ldr	r2, [r7, #4]
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	009b      	lsls	r3, r3, #2
 8008314:	4413      	add	r3, r2
 8008316:	881b      	ldrh	r3, [r3, #0]
 8008318:	b29b      	uxth	r3, r3
 800831a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800831e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008322:	847b      	strh	r3, [r7, #34]	; 0x22
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	781b      	ldrb	r3, [r3, #0]
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	441a      	add	r2, r3
 800832e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8008330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008338:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800833c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008340:	b29b      	uxth	r3, r3
 8008342:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8008344:	2300      	movs	r3, #0
}
 8008346:	4618      	mov	r0, r3
 8008348:	3734      	adds	r7, #52	; 0x34
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr

08008352 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8008352:	b580      	push	{r7, lr}
 8008354:	b0c2      	sub	sp, #264	; 0x108
 8008356:	af00      	add	r7, sp, #0
 8008358:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800835c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008360:	6018      	str	r0, [r3, #0]
 8008362:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800836a:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800836c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	785b      	ldrb	r3, [r3, #1]
 8008378:	2b01      	cmp	r3, #1
 800837a:	f040 86b7 	bne.w	80090ec <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800837e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	699a      	ldr	r2, [r3, #24]
 800838a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800838e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	429a      	cmp	r2, r3
 8008398:	d908      	bls.n	80083ac <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800839a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800839e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	691b      	ldr	r3, [r3, #16]
 80083a6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80083aa:	e007      	b.n	80083bc <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80083ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	699b      	ldr	r3, [r3, #24]
 80083b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80083bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	7b1b      	ldrb	r3, [r3, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d13a      	bne.n	8008442 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80083cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	6959      	ldr	r1, [r3, #20]
 80083d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	88da      	ldrh	r2, [r3, #6]
 80083e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80083ee:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80083f2:	6800      	ldr	r0, [r0, #0]
 80083f4:	f001 fc98 	bl	8009d28 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80083f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80083fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	613b      	str	r3, [r7, #16]
 8008404:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008408:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008412:	b29b      	uxth	r3, r3
 8008414:	461a      	mov	r2, r3
 8008416:	693b      	ldr	r3, [r7, #16]
 8008418:	4413      	add	r3, r2
 800841a:	613b      	str	r3, [r7, #16]
 800841c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008420:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	00da      	lsls	r2, r3, #3
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	4413      	add	r3, r2
 800842e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008432:	60fb      	str	r3, [r7, #12]
 8008434:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008438:	b29a      	uxth	r2, r3
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	801a      	strh	r2, [r3, #0]
 800843e:	f000 be1f 	b.w	8009080 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8008442:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008446:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	78db      	ldrb	r3, [r3, #3]
 800844e:	2b02      	cmp	r3, #2
 8008450:	f040 8462 	bne.w	8008d18 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8008454:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008458:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	6a1a      	ldr	r2, [r3, #32]
 8008460:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008464:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	429a      	cmp	r2, r3
 800846e:	f240 83df 	bls.w	8008c30 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8008472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008476:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800847a:	681a      	ldr	r2, [r3, #0]
 800847c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	4413      	add	r3, r2
 800848c:	881b      	ldrh	r3, [r3, #0]
 800848e:	b29b      	uxth	r3, r3
 8008490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008494:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008498:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800849c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084a4:	681a      	ldr	r2, [r3, #0]
 80084a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	441a      	add	r2, r3
 80084b6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80084ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80084c2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80084c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084ca:	b29b      	uxth	r3, r3
 80084cc:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80084ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	6a1a      	ldr	r2, [r3, #32]
 80084da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80084de:	1ad2      	subs	r2, r2, r3
 80084e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80084ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084f0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80084f4:	681a      	ldr	r2, [r3, #0]
 80084f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80084fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	781b      	ldrb	r3, [r3, #0]
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4413      	add	r3, r2
 8008506:	881b      	ldrh	r3, [r3, #0]
 8008508:	b29b      	uxth	r3, r3
 800850a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 81c7 	beq.w	80088a2 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008518:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	633b      	str	r3, [r7, #48]	; 0x30
 8008520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	785b      	ldrb	r3, [r3, #1]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d177      	bne.n	8008620 <USB_EPStartXfer+0x2ce>
 8008530:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008534:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	62bb      	str	r3, [r7, #40]	; 0x28
 800853c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008540:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800854a:	b29b      	uxth	r3, r3
 800854c:	461a      	mov	r2, r3
 800854e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008550:	4413      	add	r3, r2
 8008552:	62bb      	str	r3, [r7, #40]	; 0x28
 8008554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008558:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	00da      	lsls	r2, r3, #3
 8008562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008564:	4413      	add	r3, r2
 8008566:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800856a:	627b      	str	r3, [r7, #36]	; 0x24
 800856c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856e:	881b      	ldrh	r3, [r3, #0]
 8008570:	b29b      	uxth	r3, r3
 8008572:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008576:	b29a      	uxth	r2, r3
 8008578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857a:	801a      	strh	r2, [r3, #0]
 800857c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008580:	2b3e      	cmp	r3, #62	; 0x3e
 8008582:	d921      	bls.n	80085c8 <USB_EPStartXfer+0x276>
 8008584:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008588:	095b      	lsrs	r3, r3, #5
 800858a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800858e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008592:	f003 031f 	and.w	r3, r3, #31
 8008596:	2b00      	cmp	r3, #0
 8008598:	d104      	bne.n	80085a4 <USB_EPStartXfer+0x252>
 800859a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800859e:	3b01      	subs	r3, #1
 80085a0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a6:	881b      	ldrh	r3, [r3, #0]
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80085ae:	b29b      	uxth	r3, r3
 80085b0:	029b      	lsls	r3, r3, #10
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	4313      	orrs	r3, r2
 80085b6:	b29b      	uxth	r3, r3
 80085b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c4:	801a      	strh	r2, [r3, #0]
 80085c6:	e050      	b.n	800866a <USB_EPStartXfer+0x318>
 80085c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d10a      	bne.n	80085e6 <USB_EPStartXfer+0x294>
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	881b      	ldrh	r3, [r3, #0]
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80085da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80085de:	b29a      	uxth	r2, r3
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e2:	801a      	strh	r2, [r3, #0]
 80085e4:	e041      	b.n	800866a <USB_EPStartXfer+0x318>
 80085e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085ea:	085b      	lsrs	r3, r3, #1
 80085ec:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80085f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80085f4:	f003 0301 	and.w	r3, r3, #1
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d004      	beq.n	8008606 <USB_EPStartXfer+0x2b4>
 80085fc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008600:	3301      	adds	r3, #1
 8008602:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008608:	881b      	ldrh	r3, [r3, #0]
 800860a:	b29a      	uxth	r2, r3
 800860c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8008610:	b29b      	uxth	r3, r3
 8008612:	029b      	lsls	r3, r3, #10
 8008614:	b29b      	uxth	r3, r3
 8008616:	4313      	orrs	r3, r2
 8008618:	b29a      	uxth	r2, r3
 800861a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861c:	801a      	strh	r2, [r3, #0]
 800861e:	e024      	b.n	800866a <USB_EPStartXfer+0x318>
 8008620:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008624:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	785b      	ldrb	r3, [r3, #1]
 800862c:	2b01      	cmp	r3, #1
 800862e:	d11c      	bne.n	800866a <USB_EPStartXfer+0x318>
 8008630:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008634:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800863e:	b29b      	uxth	r3, r3
 8008640:	461a      	mov	r2, r3
 8008642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008644:	4413      	add	r3, r2
 8008646:	633b      	str	r3, [r7, #48]	; 0x30
 8008648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800864c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	781b      	ldrb	r3, [r3, #0]
 8008654:	00da      	lsls	r2, r3, #3
 8008656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008658:	4413      	add	r3, r2
 800865a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800865e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008660:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008664:	b29a      	uxth	r2, r3
 8008666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008668:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800866a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800866e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	895b      	ldrh	r3, [r3, #10]
 8008676:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800867a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800867e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	6959      	ldr	r1, [r3, #20]
 8008686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800868a:	b29b      	uxth	r3, r3
 800868c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008690:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008694:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008698:	6800      	ldr	r0, [r0, #0]
 800869a:	f001 fb45 	bl	8009d28 <USB_WritePMA>
            ep->xfer_buff += len;
 800869e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	695a      	ldr	r2, [r3, #20]
 80086aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086ae:	441a      	add	r2, r3
 80086b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80086bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	6a1a      	ldr	r2, [r3, #32]
 80086c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	691b      	ldr	r3, [r3, #16]
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d90f      	bls.n	80086f8 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 80086d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	6a1a      	ldr	r2, [r3, #32]
 80086e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80086e8:	1ad2      	subs	r2, r2, r3
 80086ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	621a      	str	r2, [r3, #32]
 80086f6:	e00e      	b.n	8008716 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 80086f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80086fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	6a1b      	ldr	r3, [r3, #32]
 8008704:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008708:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800870c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2200      	movs	r2, #0
 8008714:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800871a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	785b      	ldrb	r3, [r3, #1]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d177      	bne.n	8008816 <USB_EPStartXfer+0x4c4>
 8008726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800872a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	61bb      	str	r3, [r7, #24]
 8008732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008736:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008740:	b29b      	uxth	r3, r3
 8008742:	461a      	mov	r2, r3
 8008744:	69bb      	ldr	r3, [r7, #24]
 8008746:	4413      	add	r3, r2
 8008748:	61bb      	str	r3, [r7, #24]
 800874a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800874e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	781b      	ldrb	r3, [r3, #0]
 8008756:	00da      	lsls	r2, r3, #3
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	4413      	add	r3, r2
 800875c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008760:	617b      	str	r3, [r7, #20]
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	881b      	ldrh	r3, [r3, #0]
 8008766:	b29b      	uxth	r3, r3
 8008768:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800876c:	b29a      	uxth	r2, r3
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	801a      	strh	r2, [r3, #0]
 8008772:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008776:	2b3e      	cmp	r3, #62	; 0x3e
 8008778:	d921      	bls.n	80087be <USB_EPStartXfer+0x46c>
 800877a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800877e:	095b      	lsrs	r3, r3, #5
 8008780:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008788:	f003 031f 	and.w	r3, r3, #31
 800878c:	2b00      	cmp	r3, #0
 800878e:	d104      	bne.n	800879a <USB_EPStartXfer+0x448>
 8008790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008794:	3b01      	subs	r3, #1
 8008796:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	881b      	ldrh	r3, [r3, #0]
 800879e:	b29a      	uxth	r2, r3
 80087a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087a4:	b29b      	uxth	r3, r3
 80087a6:	029b      	lsls	r3, r3, #10
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	4313      	orrs	r3, r2
 80087ac:	b29b      	uxth	r3, r3
 80087ae:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087b2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	801a      	strh	r2, [r3, #0]
 80087bc:	e056      	b.n	800886c <USB_EPStartXfer+0x51a>
 80087be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d10a      	bne.n	80087dc <USB_EPStartXfer+0x48a>
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	881b      	ldrh	r3, [r3, #0]
 80087ca:	b29b      	uxth	r3, r3
 80087cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087d4:	b29a      	uxth	r2, r3
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	801a      	strh	r2, [r3, #0]
 80087da:	e047      	b.n	800886c <USB_EPStartXfer+0x51a>
 80087dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087e0:	085b      	lsrs	r3, r3, #1
 80087e2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80087e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80087ea:	f003 0301 	and.w	r3, r3, #1
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d004      	beq.n	80087fc <USB_EPStartXfer+0x4aa>
 80087f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087f6:	3301      	adds	r3, #1
 80087f8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	881b      	ldrh	r3, [r3, #0]
 8008800:	b29a      	uxth	r2, r3
 8008802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008806:	b29b      	uxth	r3, r3
 8008808:	029b      	lsls	r3, r3, #10
 800880a:	b29b      	uxth	r3, r3
 800880c:	4313      	orrs	r3, r2
 800880e:	b29a      	uxth	r2, r3
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	801a      	strh	r2, [r3, #0]
 8008814:	e02a      	b.n	800886c <USB_EPStartXfer+0x51a>
 8008816:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800881a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	785b      	ldrb	r3, [r3, #1]
 8008822:	2b01      	cmp	r3, #1
 8008824:	d122      	bne.n	800886c <USB_EPStartXfer+0x51a>
 8008826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800882a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	623b      	str	r3, [r7, #32]
 8008832:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008836:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008840:	b29b      	uxth	r3, r3
 8008842:	461a      	mov	r2, r3
 8008844:	6a3b      	ldr	r3, [r7, #32]
 8008846:	4413      	add	r3, r2
 8008848:	623b      	str	r3, [r7, #32]
 800884a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800884e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	781b      	ldrb	r3, [r3, #0]
 8008856:	00da      	lsls	r2, r3, #3
 8008858:	6a3b      	ldr	r3, [r7, #32]
 800885a:	4413      	add	r3, r2
 800885c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008860:	61fb      	str	r3, [r7, #28]
 8008862:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008866:	b29a      	uxth	r2, r3
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800886c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008870:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	891b      	ldrh	r3, [r3, #8]
 8008878:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800887c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008880:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	6959      	ldr	r1, [r3, #20]
 8008888:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800888c:	b29b      	uxth	r3, r3
 800888e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008892:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008896:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800889a:	6800      	ldr	r0, [r0, #0]
 800889c:	f001 fa44 	bl	8009d28 <USB_WritePMA>
 80088a0:	e3ee      	b.n	8009080 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80088a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	785b      	ldrb	r3, [r3, #1]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d177      	bne.n	80089a2 <USB_EPStartXfer+0x650>
 80088b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80088be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	461a      	mov	r2, r3
 80088d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088d2:	4413      	add	r3, r2
 80088d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80088d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80088da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	00da      	lsls	r2, r3, #3
 80088e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088e6:	4413      	add	r3, r2
 80088e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80088ec:	647b      	str	r3, [r7, #68]	; 0x44
 80088ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088f0:	881b      	ldrh	r3, [r3, #0]
 80088f2:	b29b      	uxth	r3, r3
 80088f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088f8:	b29a      	uxth	r2, r3
 80088fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088fc:	801a      	strh	r2, [r3, #0]
 80088fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008902:	2b3e      	cmp	r3, #62	; 0x3e
 8008904:	d921      	bls.n	800894a <USB_EPStartXfer+0x5f8>
 8008906:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800890a:	095b      	lsrs	r3, r3, #5
 800890c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008914:	f003 031f 	and.w	r3, r3, #31
 8008918:	2b00      	cmp	r3, #0
 800891a:	d104      	bne.n	8008926 <USB_EPStartXfer+0x5d4>
 800891c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008920:	3b01      	subs	r3, #1
 8008922:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008928:	881b      	ldrh	r3, [r3, #0]
 800892a:	b29a      	uxth	r2, r3
 800892c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008930:	b29b      	uxth	r3, r3
 8008932:	029b      	lsls	r3, r3, #10
 8008934:	b29b      	uxth	r3, r3
 8008936:	4313      	orrs	r3, r2
 8008938:	b29b      	uxth	r3, r3
 800893a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800893e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008942:	b29a      	uxth	r2, r3
 8008944:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008946:	801a      	strh	r2, [r3, #0]
 8008948:	e056      	b.n	80089f8 <USB_EPStartXfer+0x6a6>
 800894a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10a      	bne.n	8008968 <USB_EPStartXfer+0x616>
 8008952:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008954:	881b      	ldrh	r3, [r3, #0]
 8008956:	b29b      	uxth	r3, r3
 8008958:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800895c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008960:	b29a      	uxth	r2, r3
 8008962:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008964:	801a      	strh	r2, [r3, #0]
 8008966:	e047      	b.n	80089f8 <USB_EPStartXfer+0x6a6>
 8008968:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800896c:	085b      	lsrs	r3, r3, #1
 800896e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008972:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	2b00      	cmp	r3, #0
 800897c:	d004      	beq.n	8008988 <USB_EPStartXfer+0x636>
 800897e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008982:	3301      	adds	r3, #1
 8008984:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800898a:	881b      	ldrh	r3, [r3, #0]
 800898c:	b29a      	uxth	r2, r3
 800898e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008992:	b29b      	uxth	r3, r3
 8008994:	029b      	lsls	r3, r3, #10
 8008996:	b29b      	uxth	r3, r3
 8008998:	4313      	orrs	r3, r2
 800899a:	b29a      	uxth	r2, r3
 800899c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800899e:	801a      	strh	r2, [r3, #0]
 80089a0:	e02a      	b.n	80089f8 <USB_EPStartXfer+0x6a6>
 80089a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	785b      	ldrb	r3, [r3, #1]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d122      	bne.n	80089f8 <USB_EPStartXfer+0x6a6>
 80089b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	653b      	str	r3, [r7, #80]	; 0x50
 80089be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80089cc:	b29b      	uxth	r3, r3
 80089ce:	461a      	mov	r2, r3
 80089d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089d2:	4413      	add	r3, r2
 80089d4:	653b      	str	r3, [r7, #80]	; 0x50
 80089d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	781b      	ldrb	r3, [r3, #0]
 80089e2:	00da      	lsls	r2, r3, #3
 80089e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80089e6:	4413      	add	r3, r2
 80089e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80089ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80089f2:	b29a      	uxth	r2, r3
 80089f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80089f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80089fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	891b      	ldrh	r3, [r3, #8]
 8008a04:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008a08:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a0c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	6959      	ldr	r1, [r3, #20]
 8008a14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a18:	b29b      	uxth	r3, r3
 8008a1a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008a1e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008a22:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008a26:	6800      	ldr	r0, [r0, #0]
 8008a28:	f001 f97e 	bl	8009d28 <USB_WritePMA>
            ep->xfer_buff += len;
 8008a2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a30:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	695a      	ldr	r2, [r3, #20]
 8008a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a3c:	441a      	add	r2, r3
 8008a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8008a4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	6a1a      	ldr	r2, [r3, #32]
 8008a56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	429a      	cmp	r2, r3
 8008a64:	d90f      	bls.n	8008a86 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008a66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	6a1a      	ldr	r2, [r3, #32]
 8008a72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008a76:	1ad2      	subs	r2, r2, r3
 8008a78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	621a      	str	r2, [r3, #32]
 8008a84:	e00e      	b.n	8008aa4 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	6a1b      	ldr	r3, [r3, #32]
 8008a92:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8008a96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008a9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	2200      	movs	r2, #0
 8008aa2:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008aa4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008aa8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	643b      	str	r3, [r7, #64]	; 0x40
 8008ab0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ab4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	785b      	ldrb	r3, [r3, #1]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d177      	bne.n	8008bb0 <USB_EPStartXfer+0x85e>
 8008ac0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ac4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	63bb      	str	r3, [r7, #56]	; 0x38
 8008acc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ad0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	461a      	mov	r2, r3
 8008ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ae0:	4413      	add	r3, r2
 8008ae2:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ae4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ae8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	00da      	lsls	r2, r3, #3
 8008af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af4:	4413      	add	r3, r2
 8008af6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008afa:	637b      	str	r3, [r7, #52]	; 0x34
 8008afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008afe:	881b      	ldrh	r3, [r3, #0]
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b0a:	801a      	strh	r2, [r3, #0]
 8008b0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b10:	2b3e      	cmp	r3, #62	; 0x3e
 8008b12:	d921      	bls.n	8008b58 <USB_EPStartXfer+0x806>
 8008b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b18:	095b      	lsrs	r3, r3, #5
 8008b1a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008b1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b22:	f003 031f 	and.w	r3, r3, #31
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d104      	bne.n	8008b34 <USB_EPStartXfer+0x7e2>
 8008b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b2e:	3b01      	subs	r3, #1
 8008b30:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b36:	881b      	ldrh	r3, [r3, #0]
 8008b38:	b29a      	uxth	r2, r3
 8008b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b3e:	b29b      	uxth	r3, r3
 8008b40:	029b      	lsls	r3, r3, #10
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	4313      	orrs	r3, r2
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b54:	801a      	strh	r2, [r3, #0]
 8008b56:	e050      	b.n	8008bfa <USB_EPStartXfer+0x8a8>
 8008b58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10a      	bne.n	8008b76 <USB_EPStartXfer+0x824>
 8008b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b62:	881b      	ldrh	r3, [r3, #0]
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b6e:	b29a      	uxth	r2, r3
 8008b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b72:	801a      	strh	r2, [r3, #0]
 8008b74:	e041      	b.n	8008bfa <USB_EPStartXfer+0x8a8>
 8008b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b7a:	085b      	lsrs	r3, r3, #1
 8008b7c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008b84:	f003 0301 	and.w	r3, r3, #1
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d004      	beq.n	8008b96 <USB_EPStartXfer+0x844>
 8008b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b90:	3301      	adds	r3, #1
 8008b92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b98:	881b      	ldrh	r3, [r3, #0]
 8008b9a:	b29a      	uxth	r2, r3
 8008b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ba0:	b29b      	uxth	r3, r3
 8008ba2:	029b      	lsls	r3, r3, #10
 8008ba4:	b29b      	uxth	r3, r3
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	b29a      	uxth	r2, r3
 8008baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bac:	801a      	strh	r2, [r3, #0]
 8008bae:	e024      	b.n	8008bfa <USB_EPStartXfer+0x8a8>
 8008bb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	785b      	ldrb	r3, [r3, #1]
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d11c      	bne.n	8008bfa <USB_EPStartXfer+0x8a8>
 8008bc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bc4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008bce:	b29b      	uxth	r3, r3
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008bd4:	4413      	add	r3, r2
 8008bd6:	643b      	str	r3, [r7, #64]	; 0x40
 8008bd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	781b      	ldrb	r3, [r3, #0]
 8008be4:	00da      	lsls	r2, r3, #3
 8008be6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008be8:	4413      	add	r3, r2
 8008bea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008bf4:	b29a      	uxth	r2, r3
 8008bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bf8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8008bfa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008bfe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	895b      	ldrh	r3, [r3, #10]
 8008c06:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008c0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c0e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	6959      	ldr	r1, [r3, #20]
 8008c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008c1a:	b29b      	uxth	r3, r3
 8008c1c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008c20:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008c24:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008c28:	6800      	ldr	r0, [r0, #0]
 8008c2a:	f001 f87d 	bl	8009d28 <USB_WritePMA>
 8008c2e:	e227      	b.n	8009080 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008c30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	6a1b      	ldr	r3, [r3, #32]
 8008c3c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008c40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c48:	681a      	ldr	r2, [r3, #0]
 8008c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	781b      	ldrb	r3, [r3, #0]
 8008c56:	009b      	lsls	r3, r3, #2
 8008c58:	4413      	add	r3, r2
 8008c5a:	881b      	ldrh	r3, [r3, #0]
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8008c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c66:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8008c6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c6e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008c78:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	781b      	ldrb	r3, [r3, #0]
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	441a      	add	r2, r3
 8008c84:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8008c88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8008c8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8008c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8008c9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ca0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008cb6:	b29b      	uxth	r3, r3
 8008cb8:	461a      	mov	r2, r3
 8008cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cbc:	4413      	add	r3, r2
 8008cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008cc0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cc4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	00da      	lsls	r2, r3, #3
 8008cce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008cd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8008cd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008ce0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8008ce2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ce6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	891b      	ldrh	r3, [r3, #8]
 8008cee:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008cf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008cf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	6959      	ldr	r1, [r3, #20]
 8008cfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d02:	b29b      	uxth	r3, r3
 8008d04:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008d08:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008d0c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008d10:	6800      	ldr	r0, [r0, #0]
 8008d12:	f001 f809 	bl	8009d28 <USB_WritePMA>
 8008d16:	e1b3      	b.n	8009080 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8008d18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	6a1a      	ldr	r2, [r3, #32]
 8008d24:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008d28:	1ad2      	subs	r2, r2, r3
 8008d2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d2e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d3a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d44:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	781b      	ldrb	r3, [r3, #0]
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	881b      	ldrh	r3, [r3, #0]
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	f000 80c6 	beq.w	8008eea <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008d5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d62:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	673b      	str	r3, [r7, #112]	; 0x70
 8008d6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	785b      	ldrb	r3, [r3, #1]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d177      	bne.n	8008e6a <USB_EPStartXfer+0xb18>
 8008d7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008d8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	461a      	mov	r2, r3
 8008d98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008d9a:	4413      	add	r3, r2
 8008d9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008da2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	781b      	ldrb	r3, [r3, #0]
 8008daa:	00da      	lsls	r2, r3, #3
 8008dac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008dae:	4413      	add	r3, r2
 8008db0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008db4:	667b      	str	r3, [r7, #100]	; 0x64
 8008db6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008db8:	881b      	ldrh	r3, [r3, #0]
 8008dba:	b29b      	uxth	r3, r3
 8008dbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008dc4:	801a      	strh	r2, [r3, #0]
 8008dc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dca:	2b3e      	cmp	r3, #62	; 0x3e
 8008dcc:	d921      	bls.n	8008e12 <USB_EPStartXfer+0xac0>
 8008dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008dd2:	095b      	lsrs	r3, r3, #5
 8008dd4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ddc:	f003 031f 	and.w	r3, r3, #31
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d104      	bne.n	8008dee <USB_EPStartXfer+0xa9c>
 8008de4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008de8:	3b01      	subs	r3, #1
 8008dea:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008dee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008df0:	881b      	ldrh	r3, [r3, #0]
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	029b      	lsls	r3, r3, #10
 8008dfc:	b29b      	uxth	r3, r3
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e0a:	b29a      	uxth	r2, r3
 8008e0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e0e:	801a      	strh	r2, [r3, #0]
 8008e10:	e050      	b.n	8008eb4 <USB_EPStartXfer+0xb62>
 8008e12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d10a      	bne.n	8008e30 <USB_EPStartXfer+0xade>
 8008e1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e1c:	881b      	ldrh	r3, [r3, #0]
 8008e1e:	b29b      	uxth	r3, r3
 8008e20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008e24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e2c:	801a      	strh	r2, [r3, #0]
 8008e2e:	e041      	b.n	8008eb4 <USB_EPStartXfer+0xb62>
 8008e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e34:	085b      	lsrs	r3, r3, #1
 8008e36:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008e3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008e3e:	f003 0301 	and.w	r3, r3, #1
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d004      	beq.n	8008e50 <USB_EPStartXfer+0xafe>
 8008e46:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e52:	881b      	ldrh	r3, [r3, #0]
 8008e54:	b29a      	uxth	r2, r3
 8008e56:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	029b      	lsls	r3, r3, #10
 8008e5e:	b29b      	uxth	r3, r3
 8008e60:	4313      	orrs	r3, r2
 8008e62:	b29a      	uxth	r2, r3
 8008e64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e66:	801a      	strh	r2, [r3, #0]
 8008e68:	e024      	b.n	8008eb4 <USB_EPStartXfer+0xb62>
 8008e6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	785b      	ldrb	r3, [r3, #1]
 8008e76:	2b01      	cmp	r3, #1
 8008e78:	d11c      	bne.n	8008eb4 <USB_EPStartXfer+0xb62>
 8008e7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e7e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008e88:	b29b      	uxth	r3, r3
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e8e:	4413      	add	r3, r2
 8008e90:	673b      	str	r3, [r7, #112]	; 0x70
 8008e92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008e96:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	00da      	lsls	r2, r3, #3
 8008ea0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ea2:	4413      	add	r3, r2
 8008ea4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8008ea8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008eaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008eae:	b29a      	uxth	r2, r3
 8008eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eb2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8008eb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	895b      	ldrh	r3, [r3, #10]
 8008ec0:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8008ec4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ec8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	6959      	ldr	r1, [r3, #20]
 8008ed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008ed4:	b29b      	uxth	r3, r3
 8008ed6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008eda:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8008ede:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8008ee2:	6800      	ldr	r0, [r0, #0]
 8008ee4:	f000 ff20 	bl	8009d28 <USB_WritePMA>
 8008ee8:	e0ca      	b.n	8009080 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8008eea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008eee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	785b      	ldrb	r3, [r3, #1]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d177      	bne.n	8008fea <USB_EPStartXfer+0xc98>
 8008efa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008efe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f0a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8008f14:	b29b      	uxth	r3, r3
 8008f16:	461a      	mov	r2, r3
 8008f18:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f1a:	4413      	add	r3, r2
 8008f1c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008f22:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	781b      	ldrb	r3, [r3, #0]
 8008f2a:	00da      	lsls	r2, r3, #3
 8008f2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008f2e:	4413      	add	r3, r2
 8008f30:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8008f34:	67bb      	str	r3, [r7, #120]	; 0x78
 8008f36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f38:	881b      	ldrh	r3, [r3, #0]
 8008f3a:	b29b      	uxth	r3, r3
 8008f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f40:	b29a      	uxth	r2, r3
 8008f42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f44:	801a      	strh	r2, [r3, #0]
 8008f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f4a:	2b3e      	cmp	r3, #62	; 0x3e
 8008f4c:	d921      	bls.n	8008f92 <USB_EPStartXfer+0xc40>
 8008f4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f52:	095b      	lsrs	r3, r3, #5
 8008f54:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f5c:	f003 031f 	and.w	r3, r3, #31
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d104      	bne.n	8008f6e <USB_EPStartXfer+0xc1c>
 8008f64:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008f68:	3b01      	subs	r3, #1
 8008f6a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008f6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f70:	881b      	ldrh	r3, [r3, #0]
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	029b      	lsls	r3, r3, #10
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	b29b      	uxth	r3, r3
 8008f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f8a:	b29a      	uxth	r2, r3
 8008f8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f8e:	801a      	strh	r2, [r3, #0]
 8008f90:	e05c      	b.n	800904c <USB_EPStartXfer+0xcfa>
 8008f92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d10a      	bne.n	8008fb0 <USB_EPStartXfer+0xc5e>
 8008f9a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008f9c:	881b      	ldrh	r3, [r3, #0]
 8008f9e:	b29b      	uxth	r3, r3
 8008fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fac:	801a      	strh	r2, [r3, #0]
 8008fae:	e04d      	b.n	800904c <USB_EPStartXfer+0xcfa>
 8008fb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fb4:	085b      	lsrs	r3, r3, #1
 8008fb6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8008fbe:	f003 0301 	and.w	r3, r3, #1
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d004      	beq.n	8008fd0 <USB_EPStartXfer+0xc7e>
 8008fc6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008fca:	3301      	adds	r3, #1
 8008fcc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008fd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fd2:	881b      	ldrh	r3, [r3, #0]
 8008fd4:	b29a      	uxth	r2, r3
 8008fd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	029b      	lsls	r3, r3, #10
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fe6:	801a      	strh	r2, [r3, #0]
 8008fe8:	e030      	b.n	800904c <USB_EPStartXfer+0xcfa>
 8008fea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008fee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	785b      	ldrb	r3, [r3, #1]
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	d128      	bne.n	800904c <USB_EPStartXfer+0xcfa>
 8008ffa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8008ffe:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009008:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800900c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009016:	b29b      	uxth	r3, r3
 8009018:	461a      	mov	r2, r3
 800901a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800901e:	4413      	add	r3, r2
 8009020:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	781b      	ldrb	r3, [r3, #0]
 8009030:	00da      	lsls	r2, r3, #3
 8009032:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009036:	4413      	add	r3, r2
 8009038:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800903c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009044:	b29a      	uxth	r2, r3
 8009046:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800904a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800904c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009050:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	891b      	ldrh	r3, [r3, #8]
 8009058:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800905c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009060:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	6959      	ldr	r1, [r3, #20]
 8009068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800906c:	b29b      	uxth	r3, r3
 800906e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009072:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8009076:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800907a:	6800      	ldr	r0, [r0, #0]
 800907c:	f000 fe54 	bl	8009d28 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8009080:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009084:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009088:	681a      	ldr	r2, [r3, #0]
 800908a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800908e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	781b      	ldrb	r3, [r3, #0]
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	4413      	add	r3, r2
 800909a:	881b      	ldrh	r3, [r3, #0]
 800909c:	b29b      	uxth	r3, r3
 800909e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80090a6:	817b      	strh	r3, [r7, #10]
 80090a8:	897b      	ldrh	r3, [r7, #10]
 80090aa:	f083 0310 	eor.w	r3, r3, #16
 80090ae:	817b      	strh	r3, [r7, #10]
 80090b0:	897b      	ldrh	r3, [r7, #10]
 80090b2:	f083 0320 	eor.w	r3, r3, #32
 80090b6:	817b      	strh	r3, [r7, #10]
 80090b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090bc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	781b      	ldrb	r3, [r3, #0]
 80090ce:	009b      	lsls	r3, r3, #2
 80090d0:	441a      	add	r2, r3
 80090d2:	897b      	ldrh	r3, [r7, #10]
 80090d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80090d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80090dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80090e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	8013      	strh	r3, [r2, #0]
 80090e8:	f000 bcde 	b.w	8009aa8 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80090ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80090f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	7b1b      	ldrb	r3, [r3, #12]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f040 80bb 	bne.w	8009274 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80090fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	699a      	ldr	r2, [r3, #24]
 800910a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800910e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	691b      	ldr	r3, [r3, #16]
 8009116:	429a      	cmp	r2, r3
 8009118:	d917      	bls.n	800914a <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800911a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800911e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800912a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800912e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	699a      	ldr	r2, [r3, #24]
 8009136:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800913a:	1ad2      	subs	r2, r2, r3
 800913c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009140:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	619a      	str	r2, [r3, #24]
 8009148:	e00e      	b.n	8009168 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800914a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800914e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	699b      	ldr	r3, [r3, #24]
 8009156:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800915a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800915e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2200      	movs	r2, #0
 8009166:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8009168:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800916c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009176:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800917a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009184:	b29b      	uxth	r3, r3
 8009186:	461a      	mov	r2, r3
 8009188:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800918c:	4413      	add	r3, r2
 800918e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	00da      	lsls	r2, r3, #3
 80091a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80091a4:	4413      	add	r3, r2
 80091a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80091aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80091ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091b2:	881b      	ldrh	r3, [r3, #0]
 80091b4:	b29b      	uxth	r3, r3
 80091b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80091ba:	b29a      	uxth	r2, r3
 80091bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091c0:	801a      	strh	r2, [r3, #0]
 80091c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091c6:	2b3e      	cmp	r3, #62	; 0x3e
 80091c8:	d924      	bls.n	8009214 <USB_EPStartXfer+0xec2>
 80091ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091ce:	095b      	lsrs	r3, r3, #5
 80091d0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80091d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80091d8:	f003 031f 	and.w	r3, r3, #31
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d104      	bne.n	80091ea <USB_EPStartXfer+0xe98>
 80091e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80091e4:	3b01      	subs	r3, #1
 80091e6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80091ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80091ee:	881b      	ldrh	r3, [r3, #0]
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	029b      	lsls	r3, r3, #10
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	4313      	orrs	r3, r2
 80091fe:	b29b      	uxth	r3, r3
 8009200:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009204:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009208:	b29a      	uxth	r2, r3
 800920a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800920e:	801a      	strh	r2, [r3, #0]
 8009210:	f000 bc10 	b.w	8009a34 <USB_EPStartXfer+0x16e2>
 8009214:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10c      	bne.n	8009236 <USB_EPStartXfer+0xee4>
 800921c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009220:	881b      	ldrh	r3, [r3, #0]
 8009222:	b29b      	uxth	r3, r3
 8009224:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009228:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800922c:	b29a      	uxth	r2, r3
 800922e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009232:	801a      	strh	r2, [r3, #0]
 8009234:	e3fe      	b.n	8009a34 <USB_EPStartXfer+0x16e2>
 8009236:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800923a:	085b      	lsrs	r3, r3, #1
 800923c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009240:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009244:	f003 0301 	and.w	r3, r3, #1
 8009248:	2b00      	cmp	r3, #0
 800924a:	d004      	beq.n	8009256 <USB_EPStartXfer+0xf04>
 800924c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009250:	3301      	adds	r3, #1
 8009252:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009256:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800925a:	881b      	ldrh	r3, [r3, #0]
 800925c:	b29a      	uxth	r2, r3
 800925e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8009262:	b29b      	uxth	r3, r3
 8009264:	029b      	lsls	r3, r3, #10
 8009266:	b29b      	uxth	r3, r3
 8009268:	4313      	orrs	r3, r2
 800926a:	b29a      	uxth	r2, r3
 800926c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009270:	801a      	strh	r2, [r3, #0]
 8009272:	e3df      	b.n	8009a34 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8009274:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009278:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	78db      	ldrb	r3, [r3, #3]
 8009280:	2b02      	cmp	r3, #2
 8009282:	f040 8218 	bne.w	80096b6 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8009286:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800928a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	785b      	ldrb	r3, [r3, #1]
 8009292:	2b00      	cmp	r3, #0
 8009294:	f040 809d 	bne.w	80093d2 <USB_EPStartXfer+0x1080>
 8009298:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800929c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80092a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	461a      	mov	r2, r3
 80092b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092bc:	4413      	add	r3, r2
 80092be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80092c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	781b      	ldrb	r3, [r3, #0]
 80092ce:	00da      	lsls	r2, r3, #3
 80092d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80092d4:	4413      	add	r3, r2
 80092d6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80092da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80092de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80092e2:	881b      	ldrh	r3, [r3, #0]
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80092ea:	b29a      	uxth	r2, r3
 80092ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80092f0:	801a      	strh	r2, [r3, #0]
 80092f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80092f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	691b      	ldr	r3, [r3, #16]
 80092fe:	2b3e      	cmp	r3, #62	; 0x3e
 8009300:	d92b      	bls.n	800935a <USB_EPStartXfer+0x1008>
 8009302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	095b      	lsrs	r3, r3, #5
 8009310:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009318:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	691b      	ldr	r3, [r3, #16]
 8009320:	f003 031f 	and.w	r3, r3, #31
 8009324:	2b00      	cmp	r3, #0
 8009326:	d104      	bne.n	8009332 <USB_EPStartXfer+0xfe0>
 8009328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800932c:	3b01      	subs	r3, #1
 800932e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009332:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009336:	881b      	ldrh	r3, [r3, #0]
 8009338:	b29a      	uxth	r2, r3
 800933a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800933e:	b29b      	uxth	r3, r3
 8009340:	029b      	lsls	r3, r3, #10
 8009342:	b29b      	uxth	r3, r3
 8009344:	4313      	orrs	r3, r2
 8009346:	b29b      	uxth	r3, r3
 8009348:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800934c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009350:	b29a      	uxth	r2, r3
 8009352:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009356:	801a      	strh	r2, [r3, #0]
 8009358:	e070      	b.n	800943c <USB_EPStartXfer+0x10ea>
 800935a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800935e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	691b      	ldr	r3, [r3, #16]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d10c      	bne.n	8009384 <USB_EPStartXfer+0x1032>
 800936a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800936e:	881b      	ldrh	r3, [r3, #0]
 8009370:	b29b      	uxth	r3, r3
 8009372:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009376:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800937a:	b29a      	uxth	r2, r3
 800937c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8009380:	801a      	strh	r2, [r3, #0]
 8009382:	e05b      	b.n	800943c <USB_EPStartXfer+0x10ea>
 8009384:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009388:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	085b      	lsrs	r3, r3, #1
 8009392:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009396:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800939a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	691b      	ldr	r3, [r3, #16]
 80093a2:	f003 0301 	and.w	r3, r3, #1
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d004      	beq.n	80093b4 <USB_EPStartXfer+0x1062>
 80093aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093ae:	3301      	adds	r3, #1
 80093b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80093b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80093b8:	881b      	ldrh	r3, [r3, #0]
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80093c0:	b29b      	uxth	r3, r3
 80093c2:	029b      	lsls	r3, r3, #10
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	4313      	orrs	r3, r2
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80093ce:	801a      	strh	r2, [r3, #0]
 80093d0:	e034      	b.n	800943c <USB_EPStartXfer+0x10ea>
 80093d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	785b      	ldrb	r3, [r3, #1]
 80093de:	2b01      	cmp	r3, #1
 80093e0:	d12c      	bne.n	800943c <USB_EPStartXfer+0x10ea>
 80093e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80093f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80093f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80093fe:	b29b      	uxth	r3, r3
 8009400:	461a      	mov	r2, r3
 8009402:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8009406:	4413      	add	r3, r2
 8009408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800940c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	781b      	ldrb	r3, [r3, #0]
 8009418:	00da      	lsls	r2, r3, #3
 800941a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800941e:	4413      	add	r3, r2
 8009420:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009424:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009428:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800942c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	691b      	ldr	r3, [r3, #16]
 8009434:	b29a      	uxth	r2, r3
 8009436:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800943a:	801a      	strh	r2, [r3, #0]
 800943c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009440:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800944a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800944e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	785b      	ldrb	r3, [r3, #1]
 8009456:	2b00      	cmp	r3, #0
 8009458:	f040 809d 	bne.w	8009596 <USB_EPStartXfer+0x1244>
 800945c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009460:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800946a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800946e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009478:	b29b      	uxth	r3, r3
 800947a:	461a      	mov	r2, r3
 800947c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009480:	4413      	add	r3, r2
 8009482:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009486:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800948a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	781b      	ldrb	r3, [r3, #0]
 8009492:	00da      	lsls	r2, r3, #3
 8009494:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009498:	4413      	add	r3, r2
 800949a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800949e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80094a2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094a6:	881b      	ldrh	r3, [r3, #0]
 80094a8:	b29b      	uxth	r3, r3
 80094aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094b4:	801a      	strh	r2, [r3, #0]
 80094b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	691b      	ldr	r3, [r3, #16]
 80094c2:	2b3e      	cmp	r3, #62	; 0x3e
 80094c4:	d92b      	bls.n	800951e <USB_EPStartXfer+0x11cc>
 80094c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	691b      	ldr	r3, [r3, #16]
 80094d2:	095b      	lsrs	r3, r3, #5
 80094d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80094d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80094dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	691b      	ldr	r3, [r3, #16]
 80094e4:	f003 031f 	and.w	r3, r3, #31
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d104      	bne.n	80094f6 <USB_EPStartXfer+0x11a4>
 80094ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094f0:	3b01      	subs	r3, #1
 80094f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80094f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80094fa:	881b      	ldrh	r3, [r3, #0]
 80094fc:	b29a      	uxth	r2, r3
 80094fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009502:	b29b      	uxth	r3, r3
 8009504:	029b      	lsls	r3, r3, #10
 8009506:	b29b      	uxth	r3, r3
 8009508:	4313      	orrs	r3, r2
 800950a:	b29b      	uxth	r3, r3
 800950c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009514:	b29a      	uxth	r2, r3
 8009516:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800951a:	801a      	strh	r2, [r3, #0]
 800951c:	e069      	b.n	80095f2 <USB_EPStartXfer+0x12a0>
 800951e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009522:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	691b      	ldr	r3, [r3, #16]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d10c      	bne.n	8009548 <USB_EPStartXfer+0x11f6>
 800952e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009532:	881b      	ldrh	r3, [r3, #0]
 8009534:	b29b      	uxth	r3, r3
 8009536:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800953a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800953e:	b29a      	uxth	r2, r3
 8009540:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009544:	801a      	strh	r2, [r3, #0]
 8009546:	e054      	b.n	80095f2 <USB_EPStartXfer+0x12a0>
 8009548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800954c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	691b      	ldr	r3, [r3, #16]
 8009554:	085b      	lsrs	r3, r3, #1
 8009556:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800955a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800955e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	691b      	ldr	r3, [r3, #16]
 8009566:	f003 0301 	and.w	r3, r3, #1
 800956a:	2b00      	cmp	r3, #0
 800956c:	d004      	beq.n	8009578 <USB_EPStartXfer+0x1226>
 800956e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009572:	3301      	adds	r3, #1
 8009574:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009578:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800957c:	881b      	ldrh	r3, [r3, #0]
 800957e:	b29a      	uxth	r2, r3
 8009580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009584:	b29b      	uxth	r3, r3
 8009586:	029b      	lsls	r3, r3, #10
 8009588:	b29b      	uxth	r3, r3
 800958a:	4313      	orrs	r3, r2
 800958c:	b29a      	uxth	r2, r3
 800958e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009592:	801a      	strh	r2, [r3, #0]
 8009594:	e02d      	b.n	80095f2 <USB_EPStartXfer+0x12a0>
 8009596:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800959a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	785b      	ldrb	r3, [r3, #1]
 80095a2:	2b01      	cmp	r3, #1
 80095a4:	d125      	bne.n	80095f2 <USB_EPStartXfer+0x12a0>
 80095a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	461a      	mov	r2, r3
 80095b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80095bc:	4413      	add	r3, r2
 80095be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80095c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095c6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	00da      	lsls	r2, r3, #3
 80095d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80095d4:	4413      	add	r3, r2
 80095d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80095da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80095de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	b29a      	uxth	r2, r3
 80095ec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80095f0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80095f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80095f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	69db      	ldr	r3, [r3, #28]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	f000 8218 	beq.w	8009a34 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8009604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4413      	add	r3, r2
 800961e:	881b      	ldrh	r3, [r3, #0]
 8009620:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009624:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800962c:	2b00      	cmp	r3, #0
 800962e:	d005      	beq.n	800963c <USB_EPStartXfer+0x12ea>
 8009630:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009638:	2b00      	cmp	r3, #0
 800963a:	d10d      	bne.n	8009658 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800963c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8009640:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8009644:	2b00      	cmp	r3, #0
 8009646:	f040 81f5 	bne.w	8009a34 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800964a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800964e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009652:	2b00      	cmp	r3, #0
 8009654:	f040 81ee 	bne.w	8009a34 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8009658:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800965c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009666:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	781b      	ldrb	r3, [r3, #0]
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	4413      	add	r3, r2
 8009672:	881b      	ldrh	r3, [r3, #0]
 8009674:	b29b      	uxth	r3, r3
 8009676:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800967a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800967e:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 8009682:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009686:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009690:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	781b      	ldrb	r3, [r3, #0]
 8009698:	009b      	lsls	r3, r3, #2
 800969a:	441a      	add	r2, r3
 800969c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80096a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80096a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80096a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80096ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	8013      	strh	r3, [r2, #0]
 80096b4:	e1be      	b.n	8009a34 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80096b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	78db      	ldrb	r3, [r3, #3]
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	f040 81b4 	bne.w	8009a30 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80096c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	699a      	ldr	r2, [r3, #24]
 80096d4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096d8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	691b      	ldr	r3, [r3, #16]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d917      	bls.n	8009714 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 80096e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	691b      	ldr	r3, [r3, #16]
 80096f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 80096f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80096f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	699a      	ldr	r2, [r3, #24]
 8009700:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009704:	1ad2      	subs	r2, r2, r3
 8009706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800970a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	619a      	str	r2, [r3, #24]
 8009712:	e00e      	b.n	8009732 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8009714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 8009724:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009728:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	2200      	movs	r2, #0
 8009730:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8009732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	785b      	ldrb	r3, [r3, #1]
 800973e:	2b00      	cmp	r3, #0
 8009740:	f040 8085 	bne.w	800984e <USB_EPStartXfer+0x14fc>
 8009744:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009748:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009752:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009756:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009760:	b29b      	uxth	r3, r3
 8009762:	461a      	mov	r2, r3
 8009764:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009768:	4413      	add	r3, r2
 800976a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800976e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009772:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	781b      	ldrb	r3, [r3, #0]
 800977a:	00da      	lsls	r2, r3, #3
 800977c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8009780:	4413      	add	r3, r2
 8009782:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8009786:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800978a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800978e:	881b      	ldrh	r3, [r3, #0]
 8009790:	b29b      	uxth	r3, r3
 8009792:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009796:	b29a      	uxth	r2, r3
 8009798:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800979c:	801a      	strh	r2, [r3, #0]
 800979e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097a2:	2b3e      	cmp	r3, #62	; 0x3e
 80097a4:	d923      	bls.n	80097ee <USB_EPStartXfer+0x149c>
 80097a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097aa:	095b      	lsrs	r3, r3, #5
 80097ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80097b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097b4:	f003 031f 	and.w	r3, r3, #31
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d104      	bne.n	80097c6 <USB_EPStartXfer+0x1474>
 80097bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097c0:	3b01      	subs	r3, #1
 80097c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80097c6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80097ca:	881b      	ldrh	r3, [r3, #0]
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097d2:	b29b      	uxth	r3, r3
 80097d4:	029b      	lsls	r3, r3, #10
 80097d6:	b29b      	uxth	r3, r3
 80097d8:	4313      	orrs	r3, r2
 80097da:	b29b      	uxth	r3, r3
 80097dc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80097e0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80097e4:	b29a      	uxth	r2, r3
 80097e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80097ea:	801a      	strh	r2, [r3, #0]
 80097ec:	e060      	b.n	80098b0 <USB_EPStartXfer+0x155e>
 80097ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d10c      	bne.n	8009810 <USB_EPStartXfer+0x14be>
 80097f6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80097fa:	881b      	ldrh	r3, [r3, #0]
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009802:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009806:	b29a      	uxth	r2, r3
 8009808:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800980c:	801a      	strh	r2, [r3, #0]
 800980e:	e04f      	b.n	80098b0 <USB_EPStartXfer+0x155e>
 8009810:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009814:	085b      	lsrs	r3, r3, #1
 8009816:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800981a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800981e:	f003 0301 	and.w	r3, r3, #1
 8009822:	2b00      	cmp	r3, #0
 8009824:	d004      	beq.n	8009830 <USB_EPStartXfer+0x14de>
 8009826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800982a:	3301      	adds	r3, #1
 800982c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009830:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009834:	881b      	ldrh	r3, [r3, #0]
 8009836:	b29a      	uxth	r2, r3
 8009838:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800983c:	b29b      	uxth	r3, r3
 800983e:	029b      	lsls	r3, r3, #10
 8009840:	b29b      	uxth	r3, r3
 8009842:	4313      	orrs	r3, r2
 8009844:	b29a      	uxth	r2, r3
 8009846:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800984a:	801a      	strh	r2, [r3, #0]
 800984c:	e030      	b.n	80098b0 <USB_EPStartXfer+0x155e>
 800984e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009852:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	785b      	ldrb	r3, [r3, #1]
 800985a:	2b01      	cmp	r3, #1
 800985c:	d128      	bne.n	80098b0 <USB_EPStartXfer+0x155e>
 800985e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009862:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800986c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009870:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800987a:	b29b      	uxth	r3, r3
 800987c:	461a      	mov	r2, r3
 800987e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009882:	4413      	add	r3, r2
 8009884:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009888:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800988c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	781b      	ldrb	r3, [r3, #0]
 8009894:	00da      	lsls	r2, r3, #3
 8009896:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800989a:	4413      	add	r3, r2
 800989c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80098a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80098a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80098ae:	801a      	strh	r2, [r3, #0]
 80098b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80098be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	785b      	ldrb	r3, [r3, #1]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	f040 8085 	bne.w	80099da <USB_EPStartXfer+0x1688>
 80098d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098d4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80098de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098e2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098ec:	b29b      	uxth	r3, r3
 80098ee:	461a      	mov	r2, r3
 80098f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80098f4:	4413      	add	r3, r2
 80098f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80098fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80098fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	00da      	lsls	r2, r3, #3
 8009908:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800990c:	4413      	add	r3, r2
 800990e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009912:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009916:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800991a:	881b      	ldrh	r3, [r3, #0]
 800991c:	b29b      	uxth	r3, r3
 800991e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009922:	b29a      	uxth	r2, r3
 8009924:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009928:	801a      	strh	r2, [r3, #0]
 800992a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800992e:	2b3e      	cmp	r3, #62	; 0x3e
 8009930:	d923      	bls.n	800997a <USB_EPStartXfer+0x1628>
 8009932:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009936:	095b      	lsrs	r3, r3, #5
 8009938:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800993c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009940:	f003 031f 	and.w	r3, r3, #31
 8009944:	2b00      	cmp	r3, #0
 8009946:	d104      	bne.n	8009952 <USB_EPStartXfer+0x1600>
 8009948:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800994c:	3b01      	subs	r3, #1
 800994e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009952:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009956:	881b      	ldrh	r3, [r3, #0]
 8009958:	b29a      	uxth	r2, r3
 800995a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800995e:	b29b      	uxth	r3, r3
 8009960:	029b      	lsls	r3, r3, #10
 8009962:	b29b      	uxth	r3, r3
 8009964:	4313      	orrs	r3, r2
 8009966:	b29b      	uxth	r3, r3
 8009968:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800996c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009970:	b29a      	uxth	r2, r3
 8009972:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009976:	801a      	strh	r2, [r3, #0]
 8009978:	e05c      	b.n	8009a34 <USB_EPStartXfer+0x16e2>
 800997a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10c      	bne.n	800999c <USB_EPStartXfer+0x164a>
 8009982:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009986:	881b      	ldrh	r3, [r3, #0]
 8009988:	b29b      	uxth	r3, r3
 800998a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800998e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009992:	b29a      	uxth	r2, r3
 8009994:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009998:	801a      	strh	r2, [r3, #0]
 800999a:	e04b      	b.n	8009a34 <USB_EPStartXfer+0x16e2>
 800999c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099a0:	085b      	lsrs	r3, r3, #1
 80099a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80099a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80099aa:	f003 0301 	and.w	r3, r3, #1
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d004      	beq.n	80099bc <USB_EPStartXfer+0x166a>
 80099b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80099b6:	3301      	adds	r3, #1
 80099b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80099bc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80099c0:	881b      	ldrh	r3, [r3, #0]
 80099c2:	b29a      	uxth	r2, r3
 80099c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80099c8:	b29b      	uxth	r3, r3
 80099ca:	029b      	lsls	r3, r3, #10
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	4313      	orrs	r3, r2
 80099d0:	b29a      	uxth	r2, r3
 80099d2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80099d6:	801a      	strh	r2, [r3, #0]
 80099d8:	e02c      	b.n	8009a34 <USB_EPStartXfer+0x16e2>
 80099da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	785b      	ldrb	r3, [r3, #1]
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d124      	bne.n	8009a34 <USB_EPStartXfer+0x16e2>
 80099ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80099ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099f8:	b29b      	uxth	r3, r3
 80099fa:	461a      	mov	r2, r3
 80099fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009a00:	4413      	add	r3, r2
 8009a02:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009a06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	781b      	ldrb	r3, [r3, #0]
 8009a12:	00da      	lsls	r2, r3, #3
 8009a14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8009a18:	4413      	add	r3, r2
 8009a1a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009a1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009a2c:	801a      	strh	r2, [r3, #0]
 8009a2e:	e001      	b.n	8009a34 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	e03a      	b.n	8009aaa <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a38:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a3c:	681a      	ldr	r2, [r3, #0]
 8009a3e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	781b      	ldrb	r3, [r3, #0]
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4413      	add	r3, r2
 8009a4e:	881b      	ldrh	r3, [r3, #0]
 8009a50:	b29b      	uxth	r3, r3
 8009a52:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a5a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009a5e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009a62:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009a66:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009a6a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009a6e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009a72:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8009a76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a7a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8009a84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	009b      	lsls	r3, r3, #2
 8009a8e:	441a      	add	r2, r3
 8009a90:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8009a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aa4:	b29b      	uxth	r3, r3
 8009aa6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009aa8:	2300      	movs	r3, #0
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}

08009ab4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	785b      	ldrb	r3, [r3, #1]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d020      	beq.n	8009b08 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8009ac6:	687a      	ldr	r2, [r7, #4]
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	4413      	add	r3, r2
 8009ad0:	881b      	ldrh	r3, [r3, #0]
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009adc:	81bb      	strh	r3, [r7, #12]
 8009ade:	89bb      	ldrh	r3, [r7, #12]
 8009ae0:	f083 0310 	eor.w	r3, r3, #16
 8009ae4:	81bb      	strh	r3, [r7, #12]
 8009ae6:	687a      	ldr	r2, [r7, #4]
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	441a      	add	r2, r3
 8009af0:	89bb      	ldrh	r3, [r7, #12]
 8009af2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009af6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009afe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b02:	b29b      	uxth	r3, r3
 8009b04:	8013      	strh	r3, [r2, #0]
 8009b06:	e01f      	b.n	8009b48 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	4413      	add	r3, r2
 8009b12:	881b      	ldrh	r3, [r3, #0]
 8009b14:	b29b      	uxth	r3, r3
 8009b16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b1e:	81fb      	strh	r3, [r7, #14]
 8009b20:	89fb      	ldrh	r3, [r7, #14]
 8009b22:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009b26:	81fb      	strh	r3, [r7, #14]
 8009b28:	687a      	ldr	r2, [r7, #4]
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	009b      	lsls	r3, r3, #2
 8009b30:	441a      	add	r2, r3
 8009b32:	89fb      	ldrh	r3, [r7, #14]
 8009b34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8009b48:	2300      	movs	r3, #0
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3714      	adds	r7, #20
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b54:	4770      	bx	lr

08009b56 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009b56:	b480      	push	{r7}
 8009b58:	b087      	sub	sp, #28
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	6078      	str	r0, [r7, #4]
 8009b5e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	7b1b      	ldrb	r3, [r3, #12]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	f040 809d 	bne.w	8009ca4 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	785b      	ldrb	r3, [r3, #1]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d04c      	beq.n	8009c0c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	4413      	add	r3, r2
 8009b7c:	881b      	ldrh	r3, [r3, #0]
 8009b7e:	823b      	strh	r3, [r7, #16]
 8009b80:	8a3b      	ldrh	r3, [r7, #16]
 8009b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d01b      	beq.n	8009bc2 <USB_EPClearStall+0x6c>
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	4413      	add	r3, r2
 8009b94:	881b      	ldrh	r3, [r3, #0]
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ba0:	81fb      	strh	r3, [r7, #14]
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	441a      	add	r2, r3
 8009bac:	89fb      	ldrh	r3, [r7, #14]
 8009bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009bc2:	683b      	ldr	r3, [r7, #0]
 8009bc4:	78db      	ldrb	r3, [r3, #3]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d06c      	beq.n	8009ca4 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	781b      	ldrb	r3, [r3, #0]
 8009bd0:	009b      	lsls	r3, r3, #2
 8009bd2:	4413      	add	r3, r2
 8009bd4:	881b      	ldrh	r3, [r3, #0]
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009be0:	81bb      	strh	r3, [r7, #12]
 8009be2:	89bb      	ldrh	r3, [r7, #12]
 8009be4:	f083 0320 	eor.w	r3, r3, #32
 8009be8:	81bb      	strh	r3, [r7, #12]
 8009bea:	687a      	ldr	r2, [r7, #4]
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	781b      	ldrb	r3, [r3, #0]
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	441a      	add	r2, r3
 8009bf4:	89bb      	ldrh	r3, [r7, #12]
 8009bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c06:	b29b      	uxth	r3, r3
 8009c08:	8013      	strh	r3, [r2, #0]
 8009c0a:	e04b      	b.n	8009ca4 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	009b      	lsls	r3, r3, #2
 8009c14:	4413      	add	r3, r2
 8009c16:	881b      	ldrh	r3, [r3, #0]
 8009c18:	82fb      	strh	r3, [r7, #22]
 8009c1a:	8afb      	ldrh	r3, [r7, #22]
 8009c1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d01b      	beq.n	8009c5c <USB_EPClearStall+0x106>
 8009c24:	687a      	ldr	r2, [r7, #4]
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	4413      	add	r3, r2
 8009c2e:	881b      	ldrh	r3, [r3, #0]
 8009c30:	b29b      	uxth	r3, r3
 8009c32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c3a:	82bb      	strh	r3, [r7, #20]
 8009c3c:	687a      	ldr	r2, [r7, #4]
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	441a      	add	r2, r3
 8009c46:	8abb      	ldrh	r3, [r7, #20]
 8009c48:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c4c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c50:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	781b      	ldrb	r3, [r3, #0]
 8009c62:	009b      	lsls	r3, r3, #2
 8009c64:	4413      	add	r3, r2
 8009c66:	881b      	ldrh	r3, [r3, #0]
 8009c68:	b29b      	uxth	r3, r3
 8009c6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c72:	827b      	strh	r3, [r7, #18]
 8009c74:	8a7b      	ldrh	r3, [r7, #18]
 8009c76:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009c7a:	827b      	strh	r3, [r7, #18]
 8009c7c:	8a7b      	ldrh	r3, [r7, #18]
 8009c7e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c82:	827b      	strh	r3, [r7, #18]
 8009c84:	687a      	ldr	r2, [r7, #4]
 8009c86:	683b      	ldr	r3, [r7, #0]
 8009c88:	781b      	ldrb	r3, [r3, #0]
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	441a      	add	r2, r3
 8009c8e:	8a7b      	ldrh	r3, [r7, #18]
 8009c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ca0:	b29b      	uxth	r3, r3
 8009ca2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009ca4:	2300      	movs	r3, #0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	371c      	adds	r7, #28
 8009caa:	46bd      	mov	sp, r7
 8009cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb0:	4770      	bx	lr

08009cb2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8009cb2:	b480      	push	{r7}
 8009cb4:	b083      	sub	sp, #12
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	460b      	mov	r3, r1
 8009cbc:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8009cbe:	78fb      	ldrb	r3, [r7, #3]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d103      	bne.n	8009ccc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2280      	movs	r2, #128	; 0x80
 8009cc8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	370c      	adds	r7, #12
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr

08009cda <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8009cda:	b480      	push	{r7}
 8009cdc:	b083      	sub	sp, #12
 8009cde:	af00      	add	r7, sp, #0
 8009ce0:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009ce8:	b29b      	uxth	r3, r3
 8009cea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009cee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009cf2:	b29a      	uxth	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8009cfa:	2300      	movs	r3, #0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	370c      	adds	r7, #12
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3714      	adds	r7, #20
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b08b      	sub	sp, #44	; 0x2c
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	4611      	mov	r1, r2
 8009d34:	461a      	mov	r2, r3
 8009d36:	460b      	mov	r3, r1
 8009d38:	80fb      	strh	r3, [r7, #6]
 8009d3a:	4613      	mov	r3, r2
 8009d3c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009d3e:	88bb      	ldrh	r3, [r7, #4]
 8009d40:	3301      	adds	r3, #1
 8009d42:	085b      	lsrs	r3, r3, #1
 8009d44:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009d4e:	88fa      	ldrh	r2, [r7, #6]
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	4413      	add	r3, r2
 8009d54:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d58:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8009d5e:	e01b      	b.n	8009d98 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 8009d60:	69fb      	ldr	r3, [r7, #28]
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009d66:	69fb      	ldr	r3, [r7, #28]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	021b      	lsls	r3, r3, #8
 8009d6e:	b21a      	sxth	r2, r3
 8009d70:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	b21b      	sxth	r3, r3
 8009d78:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009d7a:	6a3b      	ldr	r3, [r7, #32]
 8009d7c:	8a7a      	ldrh	r2, [r7, #18]
 8009d7e:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8009d80:	6a3b      	ldr	r3, [r7, #32]
 8009d82:	3302      	adds	r3, #2
 8009d84:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d94:	3b01      	subs	r3, #1
 8009d96:	627b      	str	r3, [r7, #36]	; 0x24
 8009d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d1e0      	bne.n	8009d60 <USB_WritePMA+0x38>
  }
}
 8009d9e:	bf00      	nop
 8009da0:	bf00      	nop
 8009da2:	372c      	adds	r7, #44	; 0x2c
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b08b      	sub	sp, #44	; 0x2c
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	4611      	mov	r1, r2
 8009db8:	461a      	mov	r2, r3
 8009dba:	460b      	mov	r3, r1
 8009dbc:	80fb      	strh	r3, [r7, #6]
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8009dc2:	88bb      	ldrh	r3, [r7, #4]
 8009dc4:	085b      	lsrs	r3, r3, #1
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009dd2:	88fa      	ldrh	r2, [r7, #6]
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	4413      	add	r3, r2
 8009dd8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009ddc:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009dde:	69bb      	ldr	r3, [r7, #24]
 8009de0:	627b      	str	r3, [r7, #36]	; 0x24
 8009de2:	e018      	b.n	8009e16 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 8009de4:	6a3b      	ldr	r3, [r7, #32]
 8009de6:	881b      	ldrh	r3, [r3, #0]
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8009dec:	6a3b      	ldr	r3, [r7, #32]
 8009dee:	3302      	adds	r3, #2
 8009df0:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	b2da      	uxtb	r2, r3
 8009df6:	69fb      	ldr	r3, [r7, #28]
 8009df8:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009dfa:	69fb      	ldr	r3, [r7, #28]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	0a1b      	lsrs	r3, r3, #8
 8009e04:	b2da      	uxtb	r2, r3
 8009e06:	69fb      	ldr	r3, [r7, #28]
 8009e08:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	3301      	adds	r3, #1
 8009e0e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e12:	3b01      	subs	r3, #1
 8009e14:	627b      	str	r3, [r7, #36]	; 0x24
 8009e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d1e3      	bne.n	8009de4 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009e1c:	88bb      	ldrh	r3, [r7, #4]
 8009e1e:	f003 0301 	and.w	r3, r3, #1
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d007      	beq.n	8009e38 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 8009e28:	6a3b      	ldr	r3, [r7, #32]
 8009e2a:	881b      	ldrh	r3, [r3, #0]
 8009e2c:	b29b      	uxth	r3, r3
 8009e2e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	b2da      	uxtb	r2, r3
 8009e34:	69fb      	ldr	r3, [r7, #28]
 8009e36:	701a      	strb	r2, [r3, #0]
  }
}
 8009e38:	bf00      	nop
 8009e3a:	372c      	adds	r7, #44	; 0x2c
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b084      	sub	sp, #16
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	460b      	mov	r3, r1
 8009e4e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009e50:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009e54:	f002 f8ae 	bl	800bfb4 <USBD_static_malloc>
 8009e58:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d105      	bne.n	8009e6c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009e68:	2302      	movs	r3, #2
 8009e6a:	e066      	b.n	8009f3a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	7c1b      	ldrb	r3, [r3, #16]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d119      	bne.n	8009eb0 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009e7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e80:	2202      	movs	r2, #2
 8009e82:	2181      	movs	r1, #129	; 0x81
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f001 ff3c 	bl	800bd02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009e94:	2202      	movs	r2, #2
 8009e96:	2101      	movs	r1, #1
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f001 ff32 	bl	800bd02 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2210      	movs	r2, #16
 8009eaa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8009eae:	e016      	b.n	8009ede <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009eb0:	2340      	movs	r3, #64	; 0x40
 8009eb2:	2202      	movs	r2, #2
 8009eb4:	2181      	movs	r1, #129	; 0x81
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f001 ff23 	bl	800bd02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009ec2:	2340      	movs	r3, #64	; 0x40
 8009ec4:	2202      	movs	r2, #2
 8009ec6:	2101      	movs	r1, #1
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f001 ff1a 	bl	800bd02 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2201      	movs	r2, #1
 8009ed2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2210      	movs	r2, #16
 8009eda:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009ede:	2308      	movs	r3, #8
 8009ee0:	2203      	movs	r2, #3
 8009ee2:	2182      	movs	r1, #130	; 0x82
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f001 ff0c 	bl	800bd02 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2201      	movs	r2, #1
 8009eee:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2200      	movs	r2, #0
 8009f00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	7c1b      	ldrb	r3, [r3, #16]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d109      	bne.n	8009f28 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009f1e:	2101      	movs	r1, #1
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f001 ffdd 	bl	800bee0 <USBD_LL_PrepareReceive>
 8009f26:	e007      	b.n	8009f38 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009f2e:	2340      	movs	r3, #64	; 0x40
 8009f30:	2101      	movs	r1, #1
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f001 ffd4 	bl	800bee0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3710      	adds	r7, #16
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}

08009f42 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b082      	sub	sp, #8
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009f4e:	2181      	movs	r1, #129	; 0x81
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f001 fefc 	bl	800bd4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2200      	movs	r2, #0
 8009f5a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009f5c:	2101      	movs	r1, #1
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f001 fef5 	bl	800bd4e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2200      	movs	r2, #0
 8009f68:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009f6c:	2182      	movs	r1, #130	; 0x82
 8009f6e:	6878      	ldr	r0, [r7, #4]
 8009f70:	f001 feed 	bl	800bd4e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d00e      	beq.n	8009fac <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009f94:	685b      	ldr	r3, [r3, #4]
 8009f96:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f002 f816 	bl	800bfd0 <USBD_static_free>
    pdev->pClassData = NULL;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009fac:	2300      	movs	r3, #0
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3708      	adds	r7, #8
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}
	...

08009fb8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fc8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fd2:	2300      	movs	r3, #0
 8009fd4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d101      	bne.n	8009fe0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8009fdc:	2303      	movs	r3, #3
 8009fde:	e0af      	b.n	800a140 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	781b      	ldrb	r3, [r3, #0]
 8009fe4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d03f      	beq.n	800a06c <USBD_CDC_Setup+0xb4>
 8009fec:	2b20      	cmp	r3, #32
 8009fee:	f040 809f 	bne.w	800a130 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	88db      	ldrh	r3, [r3, #6]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d02e      	beq.n	800a058 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	781b      	ldrb	r3, [r3, #0]
 8009ffe:	b25b      	sxtb	r3, r3
 800a000:	2b00      	cmp	r3, #0
 800a002:	da16      	bge.n	800a032 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	683a      	ldr	r2, [r7, #0]
 800a00e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800a010:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a012:	683a      	ldr	r2, [r7, #0]
 800a014:	88d2      	ldrh	r2, [r2, #6]
 800a016:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	88db      	ldrh	r3, [r3, #6]
 800a01c:	2b07      	cmp	r3, #7
 800a01e:	bf28      	it	cs
 800a020:	2307      	movcs	r3, #7
 800a022:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a024:	693b      	ldr	r3, [r7, #16]
 800a026:	89fa      	ldrh	r2, [r7, #14]
 800a028:	4619      	mov	r1, r3
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f001 fa9f 	bl	800b56e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800a030:	e085      	b.n	800a13e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	785a      	ldrb	r2, [r3, #1]
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	88db      	ldrh	r3, [r3, #6]
 800a040:	b2da      	uxtb	r2, r3
 800a042:	693b      	ldr	r3, [r7, #16]
 800a044:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800a048:	6939      	ldr	r1, [r7, #16]
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	88db      	ldrh	r3, [r3, #6]
 800a04e:	461a      	mov	r2, r3
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f001 fab8 	bl	800b5c6 <USBD_CtlPrepareRx>
      break;
 800a056:	e072      	b.n	800a13e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	683a      	ldr	r2, [r7, #0]
 800a062:	7850      	ldrb	r0, [r2, #1]
 800a064:	2200      	movs	r2, #0
 800a066:	6839      	ldr	r1, [r7, #0]
 800a068:	4798      	blx	r3
      break;
 800a06a:	e068      	b.n	800a13e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	785b      	ldrb	r3, [r3, #1]
 800a070:	2b0b      	cmp	r3, #11
 800a072:	d852      	bhi.n	800a11a <USBD_CDC_Setup+0x162>
 800a074:	a201      	add	r2, pc, #4	; (adr r2, 800a07c <USBD_CDC_Setup+0xc4>)
 800a076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a07a:	bf00      	nop
 800a07c:	0800a0ad 	.word	0x0800a0ad
 800a080:	0800a129 	.word	0x0800a129
 800a084:	0800a11b 	.word	0x0800a11b
 800a088:	0800a11b 	.word	0x0800a11b
 800a08c:	0800a11b 	.word	0x0800a11b
 800a090:	0800a11b 	.word	0x0800a11b
 800a094:	0800a11b 	.word	0x0800a11b
 800a098:	0800a11b 	.word	0x0800a11b
 800a09c:	0800a11b 	.word	0x0800a11b
 800a0a0:	0800a11b 	.word	0x0800a11b
 800a0a4:	0800a0d7 	.word	0x0800a0d7
 800a0a8:	0800a101 	.word	0x0800a101
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0b2:	b2db      	uxtb	r3, r3
 800a0b4:	2b03      	cmp	r3, #3
 800a0b6:	d107      	bne.n	800a0c8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a0b8:	f107 030a 	add.w	r3, r7, #10
 800a0bc:	2202      	movs	r2, #2
 800a0be:	4619      	mov	r1, r3
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f001 fa54 	bl	800b56e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a0c6:	e032      	b.n	800a12e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a0c8:	6839      	ldr	r1, [r7, #0]
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f001 f9de 	bl	800b48c <USBD_CtlError>
            ret = USBD_FAIL;
 800a0d0:	2303      	movs	r3, #3
 800a0d2:	75fb      	strb	r3, [r7, #23]
          break;
 800a0d4:	e02b      	b.n	800a12e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	2b03      	cmp	r3, #3
 800a0e0:	d107      	bne.n	800a0f2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a0e2:	f107 030d 	add.w	r3, r7, #13
 800a0e6:	2201      	movs	r2, #1
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f001 fa3f 	bl	800b56e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a0f0:	e01d      	b.n	800a12e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800a0f2:	6839      	ldr	r1, [r7, #0]
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f001 f9c9 	bl	800b48c <USBD_CtlError>
            ret = USBD_FAIL;
 800a0fa:	2303      	movs	r3, #3
 800a0fc:	75fb      	strb	r3, [r7, #23]
          break;
 800a0fe:	e016      	b.n	800a12e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a106:	b2db      	uxtb	r3, r3
 800a108:	2b03      	cmp	r3, #3
 800a10a:	d00f      	beq.n	800a12c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800a10c:	6839      	ldr	r1, [r7, #0]
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f001 f9bc 	bl	800b48c <USBD_CtlError>
            ret = USBD_FAIL;
 800a114:	2303      	movs	r3, #3
 800a116:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a118:	e008      	b.n	800a12c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a11a:	6839      	ldr	r1, [r7, #0]
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	f001 f9b5 	bl	800b48c <USBD_CtlError>
          ret = USBD_FAIL;
 800a122:	2303      	movs	r3, #3
 800a124:	75fb      	strb	r3, [r7, #23]
          break;
 800a126:	e002      	b.n	800a12e <USBD_CDC_Setup+0x176>
          break;
 800a128:	bf00      	nop
 800a12a:	e008      	b.n	800a13e <USBD_CDC_Setup+0x186>
          break;
 800a12c:	bf00      	nop
      }
      break;
 800a12e:	e006      	b.n	800a13e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800a130:	6839      	ldr	r1, [r7, #0]
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f001 f9aa 	bl	800b48c <USBD_CtlError>
      ret = USBD_FAIL;
 800a138:	2303      	movs	r3, #3
 800a13a:	75fb      	strb	r3, [r7, #23]
      break;
 800a13c:	bf00      	nop
  }

  return (uint8_t)ret;
 800a13e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a140:	4618      	mov	r0, r3
 800a142:	3718      	adds	r7, #24
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b084      	sub	sp, #16
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
 800a150:	460b      	mov	r3, r1
 800a152:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a15a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a162:	2b00      	cmp	r3, #0
 800a164:	d101      	bne.n	800a16a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a166:	2303      	movs	r3, #3
 800a168:	e04f      	b.n	800a20a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a170:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a172:	78fa      	ldrb	r2, [r7, #3]
 800a174:	6879      	ldr	r1, [r7, #4]
 800a176:	4613      	mov	r3, r2
 800a178:	009b      	lsls	r3, r3, #2
 800a17a:	4413      	add	r3, r2
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	440b      	add	r3, r1
 800a180:	3318      	adds	r3, #24
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d029      	beq.n	800a1dc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800a188:	78fa      	ldrb	r2, [r7, #3]
 800a18a:	6879      	ldr	r1, [r7, #4]
 800a18c:	4613      	mov	r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	4413      	add	r3, r2
 800a192:	009b      	lsls	r3, r3, #2
 800a194:	440b      	add	r3, r1
 800a196:	3318      	adds	r3, #24
 800a198:	681a      	ldr	r2, [r3, #0]
 800a19a:	78f9      	ldrb	r1, [r7, #3]
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	460b      	mov	r3, r1
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	440b      	add	r3, r1
 800a1a4:	00db      	lsls	r3, r3, #3
 800a1a6:	4403      	add	r3, r0
 800a1a8:	3320      	adds	r3, #32
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	fbb2 f1f3 	udiv	r1, r2, r3
 800a1b0:	fb01 f303 	mul.w	r3, r1, r3
 800a1b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d110      	bne.n	800a1dc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800a1ba:	78fa      	ldrb	r2, [r7, #3]
 800a1bc:	6879      	ldr	r1, [r7, #4]
 800a1be:	4613      	mov	r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	4413      	add	r3, r2
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	440b      	add	r3, r1
 800a1c8:	3318      	adds	r3, #24
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a1ce:	78f9      	ldrb	r1, [r7, #3]
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f001 fe62 	bl	800be9e <USBD_LL_Transmit>
 800a1da:	e015      	b.n	800a208 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d00b      	beq.n	800a208 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a1f6:	691b      	ldr	r3, [r3, #16]
 800a1f8:	68ba      	ldr	r2, [r7, #8]
 800a1fa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a1fe:	68ba      	ldr	r2, [r7, #8]
 800a200:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a204:	78fa      	ldrb	r2, [r7, #3]
 800a206:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	3710      	adds	r7, #16
 800a20e:	46bd      	mov	sp, r7
 800a210:	bd80      	pop	{r7, pc}

0800a212 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a212:	b580      	push	{r7, lr}
 800a214:	b084      	sub	sp, #16
 800a216:	af00      	add	r7, sp, #0
 800a218:	6078      	str	r0, [r7, #4]
 800a21a:	460b      	mov	r3, r1
 800a21c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a224:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d101      	bne.n	800a234 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a230:	2303      	movs	r3, #3
 800a232:	e015      	b.n	800a260 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a234:	78fb      	ldrb	r3, [r7, #3]
 800a236:	4619      	mov	r1, r3
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f001 fe72 	bl	800bf22 <USBD_LL_GetRxDataSize>
 800a23e:	4602      	mov	r2, r0
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	68fa      	ldr	r2, [r7, #12]
 800a250:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a254:	68fa      	ldr	r2, [r7, #12]
 800a256:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a25a:	4611      	mov	r1, r2
 800a25c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a25e:	2300      	movs	r3, #0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3710      	adds	r7, #16
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a276:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d101      	bne.n	800a282 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800a27e:	2303      	movs	r3, #3
 800a280:	e01b      	b.n	800a2ba <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d015      	beq.n	800a2b8 <USBD_CDC_EP0_RxReady+0x50>
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a292:	2bff      	cmp	r3, #255	; 0xff
 800a294:	d010      	beq.n	800a2b8 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800a29c:	689b      	ldr	r3, [r3, #8]
 800a29e:	68fa      	ldr	r2, [r7, #12]
 800a2a0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800a2a4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a2a6:	68fa      	ldr	r2, [r7, #12]
 800a2a8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a2ac:	b292      	uxth	r2, r2
 800a2ae:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	22ff      	movs	r2, #255	; 0xff
 800a2b4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
	...

0800a2c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2243      	movs	r2, #67	; 0x43
 800a2d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800a2d2:	4b03      	ldr	r3, [pc, #12]	; (800a2e0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr
 800a2e0:	20000094 	.word	0x20000094

0800a2e4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2243      	movs	r2, #67	; 0x43
 800a2f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800a2f2:	4b03      	ldr	r3, [pc, #12]	; (800a300 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	370c      	adds	r7, #12
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr
 800a300:	20000050 	.word	0x20000050

0800a304 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a304:	b480      	push	{r7}
 800a306:	b083      	sub	sp, #12
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2243      	movs	r2, #67	; 0x43
 800a310:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800a312:	4b03      	ldr	r3, [pc, #12]	; (800a320 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a314:	4618      	mov	r0, r3
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr
 800a320:	200000d8 	.word	0x200000d8

0800a324 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	220a      	movs	r2, #10
 800a330:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a332:	4b03      	ldr	r3, [pc, #12]	; (800a340 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a334:	4618      	mov	r0, r3
 800a336:	370c      	adds	r7, #12
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr
 800a340:	2000000c 	.word	0x2000000c

0800a344 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a344:	b480      	push	{r7}
 800a346:	b083      	sub	sp, #12
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
 800a34c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d101      	bne.n	800a358 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a354:	2303      	movs	r3, #3
 800a356:	e004      	b.n	800a362 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	683a      	ldr	r2, [r7, #0]
 800a35c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800a360:	2300      	movs	r3, #0
}
 800a362:	4618      	mov	r0, r3
 800a364:	370c      	adds	r7, #12
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a36e:	b480      	push	{r7}
 800a370:	b087      	sub	sp, #28
 800a372:	af00      	add	r7, sp, #0
 800a374:	60f8      	str	r0, [r7, #12]
 800a376:	60b9      	str	r1, [r7, #8]
 800a378:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a380:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d101      	bne.n	800a38c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a388:	2303      	movs	r3, #3
 800a38a:	e008      	b.n	800a39e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	68ba      	ldr	r2, [r7, #8]
 800a390:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a39c:	2300      	movs	r3, #0
}
 800a39e:	4618      	mov	r0, r3
 800a3a0:	371c      	adds	r7, #28
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b085      	sub	sp, #20
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
 800a3b2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3ba:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	e004      	b.n	800a3d0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	683a      	ldr	r2, [r7, #0]
 800a3ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	3714      	adds	r7, #20
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b084      	sub	sp, #16
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3ea:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d101      	bne.n	800a3fa <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800a3f6:	2303      	movs	r3, #3
 800a3f8:	e016      	b.n	800a428 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	7c1b      	ldrb	r3, [r3, #16]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d109      	bne.n	800a416 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a408:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a40c:	2101      	movs	r1, #1
 800a40e:	6878      	ldr	r0, [r7, #4]
 800a410:	f001 fd66 	bl	800bee0 <USBD_LL_PrepareReceive>
 800a414:	e007      	b.n	800a426 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a41c:	2340      	movs	r3, #64	; 0x40
 800a41e:	2101      	movs	r1, #1
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f001 fd5d 	bl	800bee0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a426:	2300      	movs	r3, #0
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3710      	adds	r7, #16
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b086      	sub	sp, #24
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	60b9      	str	r1, [r7, #8]
 800a43a:	4613      	mov	r3, r2
 800a43c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d101      	bne.n	800a448 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a444:	2303      	movs	r3, #3
 800a446:	e01f      	b.n	800a488 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2200      	movs	r2, #0
 800a44c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2200      	movs	r2, #0
 800a454:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a460:	68bb      	ldr	r3, [r7, #8]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d003      	beq.n	800a46e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	68ba      	ldr	r2, [r7, #8]
 800a46a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	2201      	movs	r2, #1
 800a472:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	79fa      	ldrb	r2, [r7, #7]
 800a47a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a47c:	68f8      	ldr	r0, [r7, #12]
 800a47e:	f001 fbc5 	bl	800bc0c <USBD_LL_Init>
 800a482:	4603      	mov	r3, r0
 800a484:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a486:	7dfb      	ldrb	r3, [r7, #23]
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3718      	adds	r7, #24
 800a48c:	46bd      	mov	sp, r7
 800a48e:	bd80      	pop	{r7, pc}

0800a490 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
 800a498:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a49a:	2300      	movs	r3, #0
 800a49c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d101      	bne.n	800a4a8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	e016      	b.n	800a4d6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	683a      	ldr	r2, [r7, #0]
 800a4ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d00b      	beq.n	800a4d4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c4:	f107 020e 	add.w	r2, r7, #14
 800a4c8:	4610      	mov	r0, r2
 800a4ca:	4798      	blx	r3
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800a4d4:	2300      	movs	r3, #0
}
 800a4d6:	4618      	mov	r0, r3
 800a4d8:	3710      	adds	r7, #16
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	bd80      	pop	{r7, pc}

0800a4de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a4de:	b580      	push	{r7, lr}
 800a4e0:	b082      	sub	sp, #8
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f001 fbf0 	bl	800bccc <USBD_LL_Start>
 800a4ec:	4603      	mov	r3, r0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800a4f6:	b480      	push	{r7}
 800a4f8:	b083      	sub	sp, #12
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a4fe:	2300      	movs	r3, #0
}
 800a500:	4618      	mov	r0, r3
 800a502:	370c      	adds	r7, #12
 800a504:	46bd      	mov	sp, r7
 800a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50a:	4770      	bx	lr

0800a50c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
 800a514:	460b      	mov	r3, r1
 800a516:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800a518:	2303      	movs	r3, #3
 800a51a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a522:	2b00      	cmp	r3, #0
 800a524:	d009      	beq.n	800a53a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	78fa      	ldrb	r2, [r7, #3]
 800a530:	4611      	mov	r1, r2
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	4798      	blx	r3
 800a536:	4603      	mov	r3, r0
 800a538:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a53a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	3710      	adds	r7, #16
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
 800a54c:	460b      	mov	r3, r1
 800a54e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a556:	2b00      	cmp	r3, #0
 800a558:	d007      	beq.n	800a56a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	78fa      	ldrb	r2, [r7, #3]
 800a564:	4611      	mov	r1, r2
 800a566:	6878      	ldr	r0, [r7, #4]
 800a568:	4798      	blx	r3
  }

  return USBD_OK;
 800a56a:	2300      	movs	r3, #0
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3708      	adds	r7, #8
 800a570:	46bd      	mov	sp, r7
 800a572:	bd80      	pop	{r7, pc}

0800a574 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a584:	6839      	ldr	r1, [r7, #0]
 800a586:	4618      	mov	r0, r3
 800a588:	f000 ff46 	bl	800b418 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a59a:	461a      	mov	r2, r3
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a5a8:	f003 031f 	and.w	r3, r3, #31
 800a5ac:	2b02      	cmp	r3, #2
 800a5ae:	d01a      	beq.n	800a5e6 <USBD_LL_SetupStage+0x72>
 800a5b0:	2b02      	cmp	r3, #2
 800a5b2:	d822      	bhi.n	800a5fa <USBD_LL_SetupStage+0x86>
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d002      	beq.n	800a5be <USBD_LL_SetupStage+0x4a>
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d00a      	beq.n	800a5d2 <USBD_LL_SetupStage+0x5e>
 800a5bc:	e01d      	b.n	800a5fa <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f000 f9ee 	bl	800a9a8 <USBD_StdDevReq>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	73fb      	strb	r3, [r7, #15]
      break;
 800a5d0:	e020      	b.n	800a614 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5d8:	4619      	mov	r1, r3
 800a5da:	6878      	ldr	r0, [r7, #4]
 800a5dc:	f000 fa52 	bl	800aa84 <USBD_StdItfReq>
 800a5e0:	4603      	mov	r3, r0
 800a5e2:	73fb      	strb	r3, [r7, #15]
      break;
 800a5e4:	e016      	b.n	800a614 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f000 fa91 	bl	800ab16 <USBD_StdEPReq>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	73fb      	strb	r3, [r7, #15]
      break;
 800a5f8:	e00c      	b.n	800a614 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a600:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a604:	b2db      	uxtb	r3, r3
 800a606:	4619      	mov	r1, r3
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f001 fbbf 	bl	800bd8c <USBD_LL_StallEP>
 800a60e:	4603      	mov	r3, r0
 800a610:	73fb      	strb	r3, [r7, #15]
      break;
 800a612:	bf00      	nop
  }

  return ret;
 800a614:	7bfb      	ldrb	r3, [r7, #15]
}
 800a616:	4618      	mov	r0, r3
 800a618:	3710      	adds	r7, #16
 800a61a:	46bd      	mov	sp, r7
 800a61c:	bd80      	pop	{r7, pc}

0800a61e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a61e:	b580      	push	{r7, lr}
 800a620:	b086      	sub	sp, #24
 800a622:	af00      	add	r7, sp, #0
 800a624:	60f8      	str	r0, [r7, #12]
 800a626:	460b      	mov	r3, r1
 800a628:	607a      	str	r2, [r7, #4]
 800a62a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a62c:	7afb      	ldrb	r3, [r7, #11]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d138      	bne.n	800a6a4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a638:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a640:	2b03      	cmp	r3, #3
 800a642:	d14a      	bne.n	800a6da <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	689a      	ldr	r2, [r3, #8]
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d913      	bls.n	800a678 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	689a      	ldr	r2, [r3, #8]
 800a654:	693b      	ldr	r3, [r7, #16]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	1ad2      	subs	r2, r2, r3
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a65e:	693b      	ldr	r3, [r7, #16]
 800a660:	68da      	ldr	r2, [r3, #12]
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	4293      	cmp	r3, r2
 800a668:	bf28      	it	cs
 800a66a:	4613      	movcs	r3, r2
 800a66c:	461a      	mov	r2, r3
 800a66e:	6879      	ldr	r1, [r7, #4]
 800a670:	68f8      	ldr	r0, [r7, #12]
 800a672:	f000 ffc5 	bl	800b600 <USBD_CtlContinueRx>
 800a676:	e030      	b.n	800a6da <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a67e:	b2db      	uxtb	r3, r3
 800a680:	2b03      	cmp	r3, #3
 800a682:	d10b      	bne.n	800a69c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a68a:	691b      	ldr	r3, [r3, #16]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d005      	beq.n	800a69c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a696:	691b      	ldr	r3, [r3, #16]
 800a698:	68f8      	ldr	r0, [r7, #12]
 800a69a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f000 ffc0 	bl	800b622 <USBD_CtlSendStatus>
 800a6a2:	e01a      	b.n	800a6da <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	2b03      	cmp	r3, #3
 800a6ae:	d114      	bne.n	800a6da <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6b6:	699b      	ldr	r3, [r3, #24]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00e      	beq.n	800a6da <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a6c2:	699b      	ldr	r3, [r3, #24]
 800a6c4:	7afa      	ldrb	r2, [r7, #11]
 800a6c6:	4611      	mov	r1, r2
 800a6c8:	68f8      	ldr	r0, [r7, #12]
 800a6ca:	4798      	blx	r3
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a6d0:	7dfb      	ldrb	r3, [r7, #23]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d001      	beq.n	800a6da <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a6d6:	7dfb      	ldrb	r3, [r7, #23]
 800a6d8:	e000      	b.n	800a6dc <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3718      	adds	r7, #24
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b086      	sub	sp, #24
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	460b      	mov	r3, r1
 800a6ee:	607a      	str	r2, [r7, #4]
 800a6f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a6f2:	7afb      	ldrb	r3, [r7, #11]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d16b      	bne.n	800a7d0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	3314      	adds	r3, #20
 800a6fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a704:	2b02      	cmp	r3, #2
 800a706:	d156      	bne.n	800a7b6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	689a      	ldr	r2, [r3, #8]
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	429a      	cmp	r2, r3
 800a712:	d914      	bls.n	800a73e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	689a      	ldr	r2, [r3, #8]
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	1ad2      	subs	r2, r2, r3
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	461a      	mov	r2, r3
 800a728:	6879      	ldr	r1, [r7, #4]
 800a72a:	68f8      	ldr	r0, [r7, #12]
 800a72c:	f000 ff3a 	bl	800b5a4 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a730:	2300      	movs	r3, #0
 800a732:	2200      	movs	r2, #0
 800a734:	2100      	movs	r1, #0
 800a736:	68f8      	ldr	r0, [r7, #12]
 800a738:	f001 fbd2 	bl	800bee0 <USBD_LL_PrepareReceive>
 800a73c:	e03b      	b.n	800a7b6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	68da      	ldr	r2, [r3, #12]
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	429a      	cmp	r2, r3
 800a748:	d11c      	bne.n	800a784 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a74a:	693b      	ldr	r3, [r7, #16]
 800a74c:	685a      	ldr	r2, [r3, #4]
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a752:	429a      	cmp	r2, r3
 800a754:	d316      	bcc.n	800a784 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	685a      	ldr	r2, [r3, #4]
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a760:	429a      	cmp	r2, r3
 800a762:	d20f      	bcs.n	800a784 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a764:	2200      	movs	r2, #0
 800a766:	2100      	movs	r1, #0
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f000 ff1b 	bl	800b5a4 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2200      	movs	r2, #0
 800a772:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a776:	2300      	movs	r3, #0
 800a778:	2200      	movs	r2, #0
 800a77a:	2100      	movs	r1, #0
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f001 fbaf 	bl	800bee0 <USBD_LL_PrepareReceive>
 800a782:	e018      	b.n	800a7b6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	2b03      	cmp	r3, #3
 800a78e:	d10b      	bne.n	800a7a8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a796:	68db      	ldr	r3, [r3, #12]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d005      	beq.n	800a7a8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7a2:	68db      	ldr	r3, [r3, #12]
 800a7a4:	68f8      	ldr	r0, [r7, #12]
 800a7a6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7a8:	2180      	movs	r1, #128	; 0x80
 800a7aa:	68f8      	ldr	r0, [r7, #12]
 800a7ac:	f001 faee 	bl	800bd8c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a7b0:	68f8      	ldr	r0, [r7, #12]
 800a7b2:	f000 ff49 	bl	800b648 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a7bc:	2b01      	cmp	r3, #1
 800a7be:	d122      	bne.n	800a806 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a7c0:	68f8      	ldr	r0, [r7, #12]
 800a7c2:	f7ff fe98 	bl	800a4f6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a7ce:	e01a      	b.n	800a806 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	2b03      	cmp	r3, #3
 800a7da:	d114      	bne.n	800a806 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7e2:	695b      	ldr	r3, [r3, #20]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d00e      	beq.n	800a806 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a7ee:	695b      	ldr	r3, [r3, #20]
 800a7f0:	7afa      	ldrb	r2, [r7, #11]
 800a7f2:	4611      	mov	r1, r2
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	4798      	blx	r3
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a7fc:	7dfb      	ldrb	r3, [r7, #23]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d001      	beq.n	800a806 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a802:	7dfb      	ldrb	r3, [r7, #23]
 800a804:	e000      	b.n	800a808 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a806:	2300      	movs	r3, #0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3718      	adds	r7, #24
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b082      	sub	sp, #8
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	2201      	movs	r2, #1
 800a81c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	2200      	movs	r2, #0
 800a824:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2200      	movs	r2, #0
 800a82c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d101      	bne.n	800a844 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a840:	2303      	movs	r3, #3
 800a842:	e02f      	b.n	800a8a4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00f      	beq.n	800a86e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d009      	beq.n	800a86e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	6852      	ldr	r2, [r2, #4]
 800a866:	b2d2      	uxtb	r2, r2
 800a868:	4611      	mov	r1, r2
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a86e:	2340      	movs	r3, #64	; 0x40
 800a870:	2200      	movs	r2, #0
 800a872:	2100      	movs	r1, #0
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f001 fa44 	bl	800bd02 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	2240      	movs	r2, #64	; 0x40
 800a886:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a88a:	2340      	movs	r3, #64	; 0x40
 800a88c:	2200      	movs	r2, #0
 800a88e:	2180      	movs	r1, #128	; 0x80
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f001 fa36 	bl	800bd02 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2201      	movs	r2, #1
 800a89a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2240      	movs	r2, #64	; 0x40
 800a8a0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	3708      	adds	r7, #8
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	bd80      	pop	{r7, pc}

0800a8ac <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	460b      	mov	r3, r1
 800a8b6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	78fa      	ldrb	r2, [r7, #3]
 800a8bc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a8be:	2300      	movs	r3, #0
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr

0800a8cc <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b083      	sub	sp, #12
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8da:	b2da      	uxtb	r2, r3
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2204      	movs	r2, #4
 800a8e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a906:	b2db      	uxtb	r3, r3
 800a908:	2b04      	cmp	r3, #4
 800a90a:	d106      	bne.n	800a91a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a912:	b2da      	uxtb	r2, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr

0800a928 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b082      	sub	sp, #8
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a936:	2b00      	cmp	r3, #0
 800a938:	d101      	bne.n	800a93e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a93a:	2303      	movs	r3, #3
 800a93c:	e012      	b.n	800a964 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a944:	b2db      	uxtb	r3, r3
 800a946:	2b03      	cmp	r3, #3
 800a948:	d10b      	bne.n	800a962 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a950:	69db      	ldr	r3, [r3, #28]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d005      	beq.n	800a962 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a95c:	69db      	ldr	r3, [r3, #28]
 800a95e:	6878      	ldr	r0, [r7, #4]
 800a960:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a962:	2300      	movs	r3, #0
}
 800a964:	4618      	mov	r0, r3
 800a966:	3708      	adds	r7, #8
 800a968:	46bd      	mov	sp, r7
 800a96a:	bd80      	pop	{r7, pc}

0800a96c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a96c:	b480      	push	{r7}
 800a96e:	b087      	sub	sp, #28
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a978:	697b      	ldr	r3, [r7, #20]
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	3301      	adds	r3, #1
 800a982:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a98a:	8a3b      	ldrh	r3, [r7, #16]
 800a98c:	021b      	lsls	r3, r3, #8
 800a98e:	b21a      	sxth	r2, r3
 800a990:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a994:	4313      	orrs	r3, r2
 800a996:	b21b      	sxth	r3, r3
 800a998:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a99a:	89fb      	ldrh	r3, [r7, #14]
}
 800a99c:	4618      	mov	r0, r3
 800a99e:	371c      	adds	r7, #28
 800a9a0:	46bd      	mov	sp, r7
 800a9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a6:	4770      	bx	lr

0800a9a8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b084      	sub	sp, #16
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
 800a9b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a9be:	2b40      	cmp	r3, #64	; 0x40
 800a9c0:	d005      	beq.n	800a9ce <USBD_StdDevReq+0x26>
 800a9c2:	2b40      	cmp	r3, #64	; 0x40
 800a9c4:	d853      	bhi.n	800aa6e <USBD_StdDevReq+0xc6>
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00b      	beq.n	800a9e2 <USBD_StdDevReq+0x3a>
 800a9ca:	2b20      	cmp	r3, #32
 800a9cc:	d14f      	bne.n	800aa6e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9d4:	689b      	ldr	r3, [r3, #8]
 800a9d6:	6839      	ldr	r1, [r7, #0]
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	4798      	blx	r3
 800a9dc:	4603      	mov	r3, r0
 800a9de:	73fb      	strb	r3, [r7, #15]
      break;
 800a9e0:	e04a      	b.n	800aa78 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	785b      	ldrb	r3, [r3, #1]
 800a9e6:	2b09      	cmp	r3, #9
 800a9e8:	d83b      	bhi.n	800aa62 <USBD_StdDevReq+0xba>
 800a9ea:	a201      	add	r2, pc, #4	; (adr r2, 800a9f0 <USBD_StdDevReq+0x48>)
 800a9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f0:	0800aa45 	.word	0x0800aa45
 800a9f4:	0800aa59 	.word	0x0800aa59
 800a9f8:	0800aa63 	.word	0x0800aa63
 800a9fc:	0800aa4f 	.word	0x0800aa4f
 800aa00:	0800aa63 	.word	0x0800aa63
 800aa04:	0800aa23 	.word	0x0800aa23
 800aa08:	0800aa19 	.word	0x0800aa19
 800aa0c:	0800aa63 	.word	0x0800aa63
 800aa10:	0800aa3b 	.word	0x0800aa3b
 800aa14:	0800aa2d 	.word	0x0800aa2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800aa18:	6839      	ldr	r1, [r7, #0]
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f000 f9de 	bl	800addc <USBD_GetDescriptor>
          break;
 800aa20:	e024      	b.n	800aa6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800aa22:	6839      	ldr	r1, [r7, #0]
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 fb6d 	bl	800b104 <USBD_SetAddress>
          break;
 800aa2a:	e01f      	b.n	800aa6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800aa2c:	6839      	ldr	r1, [r7, #0]
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 fbac 	bl	800b18c <USBD_SetConfig>
 800aa34:	4603      	mov	r3, r0
 800aa36:	73fb      	strb	r3, [r7, #15]
          break;
 800aa38:	e018      	b.n	800aa6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800aa3a:	6839      	ldr	r1, [r7, #0]
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f000 fc4b 	bl	800b2d8 <USBD_GetConfig>
          break;
 800aa42:	e013      	b.n	800aa6c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800aa44:	6839      	ldr	r1, [r7, #0]
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 fc7c 	bl	800b344 <USBD_GetStatus>
          break;
 800aa4c:	e00e      	b.n	800aa6c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800aa4e:	6839      	ldr	r1, [r7, #0]
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f000 fcab 	bl	800b3ac <USBD_SetFeature>
          break;
 800aa56:	e009      	b.n	800aa6c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800aa58:	6839      	ldr	r1, [r7, #0]
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	f000 fcba 	bl	800b3d4 <USBD_ClrFeature>
          break;
 800aa60:	e004      	b.n	800aa6c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800aa62:	6839      	ldr	r1, [r7, #0]
 800aa64:	6878      	ldr	r0, [r7, #4]
 800aa66:	f000 fd11 	bl	800b48c <USBD_CtlError>
          break;
 800aa6a:	bf00      	nop
      }
      break;
 800aa6c:	e004      	b.n	800aa78 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800aa6e:	6839      	ldr	r1, [r7, #0]
 800aa70:	6878      	ldr	r0, [r7, #4]
 800aa72:	f000 fd0b 	bl	800b48c <USBD_CtlError>
      break;
 800aa76:	bf00      	nop
  }

  return ret;
 800aa78:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3710      	adds	r7, #16
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	bd80      	pop	{r7, pc}
 800aa82:	bf00      	nop

0800aa84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa84:	b580      	push	{r7, lr}
 800aa86:	b084      	sub	sp, #16
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
 800aa8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	781b      	ldrb	r3, [r3, #0]
 800aa96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800aa9a:	2b40      	cmp	r3, #64	; 0x40
 800aa9c:	d005      	beq.n	800aaaa <USBD_StdItfReq+0x26>
 800aa9e:	2b40      	cmp	r3, #64	; 0x40
 800aaa0:	d82f      	bhi.n	800ab02 <USBD_StdItfReq+0x7e>
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d001      	beq.n	800aaaa <USBD_StdItfReq+0x26>
 800aaa6:	2b20      	cmp	r3, #32
 800aaa8:	d12b      	bne.n	800ab02 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aab0:	b2db      	uxtb	r3, r3
 800aab2:	3b01      	subs	r3, #1
 800aab4:	2b02      	cmp	r3, #2
 800aab6:	d81d      	bhi.n	800aaf4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	889b      	ldrh	r3, [r3, #4]
 800aabc:	b2db      	uxtb	r3, r3
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d813      	bhi.n	800aaea <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aac8:	689b      	ldr	r3, [r3, #8]
 800aaca:	6839      	ldr	r1, [r7, #0]
 800aacc:	6878      	ldr	r0, [r7, #4]
 800aace:	4798      	blx	r3
 800aad0:	4603      	mov	r3, r0
 800aad2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	88db      	ldrh	r3, [r3, #6]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d110      	bne.n	800aafe <USBD_StdItfReq+0x7a>
 800aadc:	7bfb      	ldrb	r3, [r7, #15]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d10d      	bne.n	800aafe <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 fd9d 	bl	800b622 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aae8:	e009      	b.n	800aafe <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800aaea:	6839      	ldr	r1, [r7, #0]
 800aaec:	6878      	ldr	r0, [r7, #4]
 800aaee:	f000 fccd 	bl	800b48c <USBD_CtlError>
          break;
 800aaf2:	e004      	b.n	800aafe <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800aaf4:	6839      	ldr	r1, [r7, #0]
 800aaf6:	6878      	ldr	r0, [r7, #4]
 800aaf8:	f000 fcc8 	bl	800b48c <USBD_CtlError>
          break;
 800aafc:	e000      	b.n	800ab00 <USBD_StdItfReq+0x7c>
          break;
 800aafe:	bf00      	nop
      }
      break;
 800ab00:	e004      	b.n	800ab0c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ab02:	6839      	ldr	r1, [r7, #0]
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 fcc1 	bl	800b48c <USBD_CtlError>
      break;
 800ab0a:	bf00      	nop
  }

  return ret;
 800ab0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3710      	adds	r7, #16
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}

0800ab16 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab16:	b580      	push	{r7, lr}
 800ab18:	b084      	sub	sp, #16
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
 800ab1e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ab20:	2300      	movs	r3, #0
 800ab22:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	889b      	ldrh	r3, [r3, #4]
 800ab28:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	781b      	ldrb	r3, [r3, #0]
 800ab2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ab32:	2b40      	cmp	r3, #64	; 0x40
 800ab34:	d007      	beq.n	800ab46 <USBD_StdEPReq+0x30>
 800ab36:	2b40      	cmp	r3, #64	; 0x40
 800ab38:	f200 8145 	bhi.w	800adc6 <USBD_StdEPReq+0x2b0>
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00c      	beq.n	800ab5a <USBD_StdEPReq+0x44>
 800ab40:	2b20      	cmp	r3, #32
 800ab42:	f040 8140 	bne.w	800adc6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	6839      	ldr	r1, [r7, #0]
 800ab50:	6878      	ldr	r0, [r7, #4]
 800ab52:	4798      	blx	r3
 800ab54:	4603      	mov	r3, r0
 800ab56:	73fb      	strb	r3, [r7, #15]
      break;
 800ab58:	e13a      	b.n	800add0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	785b      	ldrb	r3, [r3, #1]
 800ab5e:	2b03      	cmp	r3, #3
 800ab60:	d007      	beq.n	800ab72 <USBD_StdEPReq+0x5c>
 800ab62:	2b03      	cmp	r3, #3
 800ab64:	f300 8129 	bgt.w	800adba <USBD_StdEPReq+0x2a4>
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d07f      	beq.n	800ac6c <USBD_StdEPReq+0x156>
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d03c      	beq.n	800abea <USBD_StdEPReq+0xd4>
 800ab70:	e123      	b.n	800adba <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	d002      	beq.n	800ab84 <USBD_StdEPReq+0x6e>
 800ab7e:	2b03      	cmp	r3, #3
 800ab80:	d016      	beq.n	800abb0 <USBD_StdEPReq+0x9a>
 800ab82:	e02c      	b.n	800abde <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ab84:	7bbb      	ldrb	r3, [r7, #14]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00d      	beq.n	800aba6 <USBD_StdEPReq+0x90>
 800ab8a:	7bbb      	ldrb	r3, [r7, #14]
 800ab8c:	2b80      	cmp	r3, #128	; 0x80
 800ab8e:	d00a      	beq.n	800aba6 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ab90:	7bbb      	ldrb	r3, [r7, #14]
 800ab92:	4619      	mov	r1, r3
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f001 f8f9 	bl	800bd8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ab9a:	2180      	movs	r1, #128	; 0x80
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f001 f8f5 	bl	800bd8c <USBD_LL_StallEP>
 800aba2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aba4:	e020      	b.n	800abe8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800aba6:	6839      	ldr	r1, [r7, #0]
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 fc6f 	bl	800b48c <USBD_CtlError>
              break;
 800abae:	e01b      	b.n	800abe8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	885b      	ldrh	r3, [r3, #2]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d10e      	bne.n	800abd6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800abb8:	7bbb      	ldrb	r3, [r7, #14]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d00b      	beq.n	800abd6 <USBD_StdEPReq+0xc0>
 800abbe:	7bbb      	ldrb	r3, [r7, #14]
 800abc0:	2b80      	cmp	r3, #128	; 0x80
 800abc2:	d008      	beq.n	800abd6 <USBD_StdEPReq+0xc0>
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	88db      	ldrh	r3, [r3, #6]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d104      	bne.n	800abd6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800abcc:	7bbb      	ldrb	r3, [r7, #14]
 800abce:	4619      	mov	r1, r3
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f001 f8db 	bl	800bd8c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800abd6:	6878      	ldr	r0, [r7, #4]
 800abd8:	f000 fd23 	bl	800b622 <USBD_CtlSendStatus>

              break;
 800abdc:	e004      	b.n	800abe8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800abde:	6839      	ldr	r1, [r7, #0]
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f000 fc53 	bl	800b48c <USBD_CtlError>
              break;
 800abe6:	bf00      	nop
          }
          break;
 800abe8:	e0ec      	b.n	800adc4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	2b02      	cmp	r3, #2
 800abf4:	d002      	beq.n	800abfc <USBD_StdEPReq+0xe6>
 800abf6:	2b03      	cmp	r3, #3
 800abf8:	d016      	beq.n	800ac28 <USBD_StdEPReq+0x112>
 800abfa:	e030      	b.n	800ac5e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800abfc:	7bbb      	ldrb	r3, [r7, #14]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d00d      	beq.n	800ac1e <USBD_StdEPReq+0x108>
 800ac02:	7bbb      	ldrb	r3, [r7, #14]
 800ac04:	2b80      	cmp	r3, #128	; 0x80
 800ac06:	d00a      	beq.n	800ac1e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ac08:	7bbb      	ldrb	r3, [r7, #14]
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	6878      	ldr	r0, [r7, #4]
 800ac0e:	f001 f8bd 	bl	800bd8c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac12:	2180      	movs	r1, #128	; 0x80
 800ac14:	6878      	ldr	r0, [r7, #4]
 800ac16:	f001 f8b9 	bl	800bd8c <USBD_LL_StallEP>
 800ac1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ac1c:	e025      	b.n	800ac6a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ac1e:	6839      	ldr	r1, [r7, #0]
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f000 fc33 	bl	800b48c <USBD_CtlError>
              break;
 800ac26:	e020      	b.n	800ac6a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ac28:	683b      	ldr	r3, [r7, #0]
 800ac2a:	885b      	ldrh	r3, [r3, #2]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d11b      	bne.n	800ac68 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ac30:	7bbb      	ldrb	r3, [r7, #14]
 800ac32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d004      	beq.n	800ac44 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ac3a:	7bbb      	ldrb	r3, [r7, #14]
 800ac3c:	4619      	mov	r1, r3
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f001 f8c3 	bl	800bdca <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f000 fcec 	bl	800b622 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac50:	689b      	ldr	r3, [r3, #8]
 800ac52:	6839      	ldr	r1, [r7, #0]
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	4798      	blx	r3
 800ac58:	4603      	mov	r3, r0
 800ac5a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ac5c:	e004      	b.n	800ac68 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ac5e:	6839      	ldr	r1, [r7, #0]
 800ac60:	6878      	ldr	r0, [r7, #4]
 800ac62:	f000 fc13 	bl	800b48c <USBD_CtlError>
              break;
 800ac66:	e000      	b.n	800ac6a <USBD_StdEPReq+0x154>
              break;
 800ac68:	bf00      	nop
          }
          break;
 800ac6a:	e0ab      	b.n	800adc4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	d002      	beq.n	800ac7e <USBD_StdEPReq+0x168>
 800ac78:	2b03      	cmp	r3, #3
 800ac7a:	d032      	beq.n	800ace2 <USBD_StdEPReq+0x1cc>
 800ac7c:	e097      	b.n	800adae <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ac7e:	7bbb      	ldrb	r3, [r7, #14]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d007      	beq.n	800ac94 <USBD_StdEPReq+0x17e>
 800ac84:	7bbb      	ldrb	r3, [r7, #14]
 800ac86:	2b80      	cmp	r3, #128	; 0x80
 800ac88:	d004      	beq.n	800ac94 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ac8a:	6839      	ldr	r1, [r7, #0]
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 fbfd 	bl	800b48c <USBD_CtlError>
                break;
 800ac92:	e091      	b.n	800adb8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ac94:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	da0b      	bge.n	800acb4 <USBD_StdEPReq+0x19e>
 800ac9c:	7bbb      	ldrb	r3, [r7, #14]
 800ac9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aca2:	4613      	mov	r3, r2
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	4413      	add	r3, r2
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	3310      	adds	r3, #16
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	4413      	add	r3, r2
 800acb0:	3304      	adds	r3, #4
 800acb2:	e00b      	b.n	800accc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800acb4:	7bbb      	ldrb	r3, [r7, #14]
 800acb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800acba:	4613      	mov	r3, r2
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	4413      	add	r3, r2
 800acc0:	009b      	lsls	r3, r3, #2
 800acc2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800acc6:	687a      	ldr	r2, [r7, #4]
 800acc8:	4413      	add	r3, r2
 800acca:	3304      	adds	r3, #4
 800accc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800acce:	68bb      	ldr	r3, [r7, #8]
 800acd0:	2200      	movs	r2, #0
 800acd2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	2202      	movs	r2, #2
 800acd8:	4619      	mov	r1, r3
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 fc47 	bl	800b56e <USBD_CtlSendData>
              break;
 800ace0:	e06a      	b.n	800adb8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ace2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	da11      	bge.n	800ad0e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800acea:	7bbb      	ldrb	r3, [r7, #14]
 800acec:	f003 020f 	and.w	r2, r3, #15
 800acf0:	6879      	ldr	r1, [r7, #4]
 800acf2:	4613      	mov	r3, r2
 800acf4:	009b      	lsls	r3, r3, #2
 800acf6:	4413      	add	r3, r2
 800acf8:	009b      	lsls	r3, r3, #2
 800acfa:	440b      	add	r3, r1
 800acfc:	3324      	adds	r3, #36	; 0x24
 800acfe:	881b      	ldrh	r3, [r3, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d117      	bne.n	800ad34 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ad04:	6839      	ldr	r1, [r7, #0]
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fbc0 	bl	800b48c <USBD_CtlError>
                  break;
 800ad0c:	e054      	b.n	800adb8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ad0e:	7bbb      	ldrb	r3, [r7, #14]
 800ad10:	f003 020f 	and.w	r2, r3, #15
 800ad14:	6879      	ldr	r1, [r7, #4]
 800ad16:	4613      	mov	r3, r2
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	4413      	add	r3, r2
 800ad1c:	009b      	lsls	r3, r3, #2
 800ad1e:	440b      	add	r3, r1
 800ad20:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ad24:	881b      	ldrh	r3, [r3, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d104      	bne.n	800ad34 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ad2a:	6839      	ldr	r1, [r7, #0]
 800ad2c:	6878      	ldr	r0, [r7, #4]
 800ad2e:	f000 fbad 	bl	800b48c <USBD_CtlError>
                  break;
 800ad32:	e041      	b.n	800adb8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	da0b      	bge.n	800ad54 <USBD_StdEPReq+0x23e>
 800ad3c:	7bbb      	ldrb	r3, [r7, #14]
 800ad3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ad42:	4613      	mov	r3, r2
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	4413      	add	r3, r2
 800ad48:	009b      	lsls	r3, r3, #2
 800ad4a:	3310      	adds	r3, #16
 800ad4c:	687a      	ldr	r2, [r7, #4]
 800ad4e:	4413      	add	r3, r2
 800ad50:	3304      	adds	r3, #4
 800ad52:	e00b      	b.n	800ad6c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ad54:	7bbb      	ldrb	r3, [r7, #14]
 800ad56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ad5a:	4613      	mov	r3, r2
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	4413      	add	r3, r2
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	4413      	add	r3, r2
 800ad6a:	3304      	adds	r3, #4
 800ad6c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ad6e:	7bbb      	ldrb	r3, [r7, #14]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d002      	beq.n	800ad7a <USBD_StdEPReq+0x264>
 800ad74:	7bbb      	ldrb	r3, [r7, #14]
 800ad76:	2b80      	cmp	r3, #128	; 0x80
 800ad78:	d103      	bne.n	800ad82 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	601a      	str	r2, [r3, #0]
 800ad80:	e00e      	b.n	800ada0 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ad82:	7bbb      	ldrb	r3, [r7, #14]
 800ad84:	4619      	mov	r1, r3
 800ad86:	6878      	ldr	r0, [r7, #4]
 800ad88:	f001 f83e 	bl	800be08 <USBD_LL_IsStallEP>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d003      	beq.n	800ad9a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ad92:	68bb      	ldr	r3, [r7, #8]
 800ad94:	2201      	movs	r2, #1
 800ad96:	601a      	str	r2, [r3, #0]
 800ad98:	e002      	b.n	800ada0 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	2202      	movs	r2, #2
 800ada4:	4619      	mov	r1, r3
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 fbe1 	bl	800b56e <USBD_CtlSendData>
              break;
 800adac:	e004      	b.n	800adb8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800adae:	6839      	ldr	r1, [r7, #0]
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 fb6b 	bl	800b48c <USBD_CtlError>
              break;
 800adb6:	bf00      	nop
          }
          break;
 800adb8:	e004      	b.n	800adc4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800adba:	6839      	ldr	r1, [r7, #0]
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f000 fb65 	bl	800b48c <USBD_CtlError>
          break;
 800adc2:	bf00      	nop
      }
      break;
 800adc4:	e004      	b.n	800add0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800adc6:	6839      	ldr	r1, [r7, #0]
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 fb5f 	bl	800b48c <USBD_CtlError>
      break;
 800adce:	bf00      	nop
  }

  return ret;
 800add0:	7bfb      	ldrb	r3, [r7, #15]
}
 800add2:	4618      	mov	r0, r3
 800add4:	3710      	adds	r7, #16
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}
	...

0800addc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	6078      	str	r0, [r7, #4]
 800ade4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ade6:	2300      	movs	r3, #0
 800ade8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800adea:	2300      	movs	r3, #0
 800adec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800adee:	2300      	movs	r3, #0
 800adf0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800adf2:	683b      	ldr	r3, [r7, #0]
 800adf4:	885b      	ldrh	r3, [r3, #2]
 800adf6:	0a1b      	lsrs	r3, r3, #8
 800adf8:	b29b      	uxth	r3, r3
 800adfa:	3b01      	subs	r3, #1
 800adfc:	2b0e      	cmp	r3, #14
 800adfe:	f200 8152 	bhi.w	800b0a6 <USBD_GetDescriptor+0x2ca>
 800ae02:	a201      	add	r2, pc, #4	; (adr r2, 800ae08 <USBD_GetDescriptor+0x2c>)
 800ae04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae08:	0800ae79 	.word	0x0800ae79
 800ae0c:	0800ae91 	.word	0x0800ae91
 800ae10:	0800aed1 	.word	0x0800aed1
 800ae14:	0800b0a7 	.word	0x0800b0a7
 800ae18:	0800b0a7 	.word	0x0800b0a7
 800ae1c:	0800b047 	.word	0x0800b047
 800ae20:	0800b073 	.word	0x0800b073
 800ae24:	0800b0a7 	.word	0x0800b0a7
 800ae28:	0800b0a7 	.word	0x0800b0a7
 800ae2c:	0800b0a7 	.word	0x0800b0a7
 800ae30:	0800b0a7 	.word	0x0800b0a7
 800ae34:	0800b0a7 	.word	0x0800b0a7
 800ae38:	0800b0a7 	.word	0x0800b0a7
 800ae3c:	0800b0a7 	.word	0x0800b0a7
 800ae40:	0800ae45 	.word	0x0800ae45
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae4a:	69db      	ldr	r3, [r3, #28]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00b      	beq.n	800ae68 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae56:	69db      	ldr	r3, [r3, #28]
 800ae58:	687a      	ldr	r2, [r7, #4]
 800ae5a:	7c12      	ldrb	r2, [r2, #16]
 800ae5c:	f107 0108 	add.w	r1, r7, #8
 800ae60:	4610      	mov	r0, r2
 800ae62:	4798      	blx	r3
 800ae64:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ae66:	e126      	b.n	800b0b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ae68:	6839      	ldr	r1, [r7, #0]
 800ae6a:	6878      	ldr	r0, [r7, #4]
 800ae6c:	f000 fb0e 	bl	800b48c <USBD_CtlError>
        err++;
 800ae70:	7afb      	ldrb	r3, [r7, #11]
 800ae72:	3301      	adds	r3, #1
 800ae74:	72fb      	strb	r3, [r7, #11]
      break;
 800ae76:	e11e      	b.n	800b0b6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	7c12      	ldrb	r2, [r2, #16]
 800ae84:	f107 0108 	add.w	r1, r7, #8
 800ae88:	4610      	mov	r0, r2
 800ae8a:	4798      	blx	r3
 800ae8c:	60f8      	str	r0, [r7, #12]
      break;
 800ae8e:	e112      	b.n	800b0b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	7c1b      	ldrb	r3, [r3, #16]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d10d      	bne.n	800aeb4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ae9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aea0:	f107 0208 	add.w	r2, r7, #8
 800aea4:	4610      	mov	r0, r2
 800aea6:	4798      	blx	r3
 800aea8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	3301      	adds	r3, #1
 800aeae:	2202      	movs	r2, #2
 800aeb0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aeb2:	e100      	b.n	800b0b6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aeba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aebc:	f107 0208 	add.w	r2, r7, #8
 800aec0:	4610      	mov	r0, r2
 800aec2:	4798      	blx	r3
 800aec4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	3301      	adds	r3, #1
 800aeca:	2202      	movs	r2, #2
 800aecc:	701a      	strb	r2, [r3, #0]
      break;
 800aece:	e0f2      	b.n	800b0b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aed0:	683b      	ldr	r3, [r7, #0]
 800aed2:	885b      	ldrh	r3, [r3, #2]
 800aed4:	b2db      	uxtb	r3, r3
 800aed6:	2b05      	cmp	r3, #5
 800aed8:	f200 80ac 	bhi.w	800b034 <USBD_GetDescriptor+0x258>
 800aedc:	a201      	add	r2, pc, #4	; (adr r2, 800aee4 <USBD_GetDescriptor+0x108>)
 800aede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aee2:	bf00      	nop
 800aee4:	0800aefd 	.word	0x0800aefd
 800aee8:	0800af31 	.word	0x0800af31
 800aeec:	0800af65 	.word	0x0800af65
 800aef0:	0800af99 	.word	0x0800af99
 800aef4:	0800afcd 	.word	0x0800afcd
 800aef8:	0800b001 	.word	0x0800b001
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af02:	685b      	ldr	r3, [r3, #4]
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00b      	beq.n	800af20 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	687a      	ldr	r2, [r7, #4]
 800af12:	7c12      	ldrb	r2, [r2, #16]
 800af14:	f107 0108 	add.w	r1, r7, #8
 800af18:	4610      	mov	r0, r2
 800af1a:	4798      	blx	r3
 800af1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af1e:	e091      	b.n	800b044 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af20:	6839      	ldr	r1, [r7, #0]
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 fab2 	bl	800b48c <USBD_CtlError>
            err++;
 800af28:	7afb      	ldrb	r3, [r7, #11]
 800af2a:	3301      	adds	r3, #1
 800af2c:	72fb      	strb	r3, [r7, #11]
          break;
 800af2e:	e089      	b.n	800b044 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af36:	689b      	ldr	r3, [r3, #8]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d00b      	beq.n	800af54 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	687a      	ldr	r2, [r7, #4]
 800af46:	7c12      	ldrb	r2, [r2, #16]
 800af48:	f107 0108 	add.w	r1, r7, #8
 800af4c:	4610      	mov	r0, r2
 800af4e:	4798      	blx	r3
 800af50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af52:	e077      	b.n	800b044 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af54:	6839      	ldr	r1, [r7, #0]
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 fa98 	bl	800b48c <USBD_CtlError>
            err++;
 800af5c:	7afb      	ldrb	r3, [r7, #11]
 800af5e:	3301      	adds	r3, #1
 800af60:	72fb      	strb	r3, [r7, #11]
          break;
 800af62:	e06f      	b.n	800b044 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d00b      	beq.n	800af88 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af76:	68db      	ldr	r3, [r3, #12]
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	7c12      	ldrb	r2, [r2, #16]
 800af7c:	f107 0108 	add.w	r1, r7, #8
 800af80:	4610      	mov	r0, r2
 800af82:	4798      	blx	r3
 800af84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800af86:	e05d      	b.n	800b044 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800af88:	6839      	ldr	r1, [r7, #0]
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 fa7e 	bl	800b48c <USBD_CtlError>
            err++;
 800af90:	7afb      	ldrb	r3, [r7, #11]
 800af92:	3301      	adds	r3, #1
 800af94:	72fb      	strb	r3, [r7, #11]
          break;
 800af96:	e055      	b.n	800b044 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800af9e:	691b      	ldr	r3, [r3, #16]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d00b      	beq.n	800afbc <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afaa:	691b      	ldr	r3, [r3, #16]
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	7c12      	ldrb	r2, [r2, #16]
 800afb0:	f107 0108 	add.w	r1, r7, #8
 800afb4:	4610      	mov	r0, r2
 800afb6:	4798      	blx	r3
 800afb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afba:	e043      	b.n	800b044 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800afbc:	6839      	ldr	r1, [r7, #0]
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 fa64 	bl	800b48c <USBD_CtlError>
            err++;
 800afc4:	7afb      	ldrb	r3, [r7, #11]
 800afc6:	3301      	adds	r3, #1
 800afc8:	72fb      	strb	r3, [r7, #11]
          break;
 800afca:	e03b      	b.n	800b044 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afd2:	695b      	ldr	r3, [r3, #20]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d00b      	beq.n	800aff0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800afde:	695b      	ldr	r3, [r3, #20]
 800afe0:	687a      	ldr	r2, [r7, #4]
 800afe2:	7c12      	ldrb	r2, [r2, #16]
 800afe4:	f107 0108 	add.w	r1, r7, #8
 800afe8:	4610      	mov	r0, r2
 800afea:	4798      	blx	r3
 800afec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800afee:	e029      	b.n	800b044 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aff0:	6839      	ldr	r1, [r7, #0]
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f000 fa4a 	bl	800b48c <USBD_CtlError>
            err++;
 800aff8:	7afb      	ldrb	r3, [r7, #11]
 800affa:	3301      	adds	r3, #1
 800affc:	72fb      	strb	r3, [r7, #11]
          break;
 800affe:	e021      	b.n	800b044 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b006:	699b      	ldr	r3, [r3, #24]
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d00b      	beq.n	800b024 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b012:	699b      	ldr	r3, [r3, #24]
 800b014:	687a      	ldr	r2, [r7, #4]
 800b016:	7c12      	ldrb	r2, [r2, #16]
 800b018:	f107 0108 	add.w	r1, r7, #8
 800b01c:	4610      	mov	r0, r2
 800b01e:	4798      	blx	r3
 800b020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b022:	e00f      	b.n	800b044 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b024:	6839      	ldr	r1, [r7, #0]
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 fa30 	bl	800b48c <USBD_CtlError>
            err++;
 800b02c:	7afb      	ldrb	r3, [r7, #11]
 800b02e:	3301      	adds	r3, #1
 800b030:	72fb      	strb	r3, [r7, #11]
          break;
 800b032:	e007      	b.n	800b044 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b034:	6839      	ldr	r1, [r7, #0]
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 fa28 	bl	800b48c <USBD_CtlError>
          err++;
 800b03c:	7afb      	ldrb	r3, [r7, #11]
 800b03e:	3301      	adds	r3, #1
 800b040:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800b042:	bf00      	nop
      }
      break;
 800b044:	e037      	b.n	800b0b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	7c1b      	ldrb	r3, [r3, #16]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d109      	bne.n	800b062 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b056:	f107 0208 	add.w	r2, r7, #8
 800b05a:	4610      	mov	r0, r2
 800b05c:	4798      	blx	r3
 800b05e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b060:	e029      	b.n	800b0b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b062:	6839      	ldr	r1, [r7, #0]
 800b064:	6878      	ldr	r0, [r7, #4]
 800b066:	f000 fa11 	bl	800b48c <USBD_CtlError>
        err++;
 800b06a:	7afb      	ldrb	r3, [r7, #11]
 800b06c:	3301      	adds	r3, #1
 800b06e:	72fb      	strb	r3, [r7, #11]
      break;
 800b070:	e021      	b.n	800b0b6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	7c1b      	ldrb	r3, [r3, #16]
 800b076:	2b00      	cmp	r3, #0
 800b078:	d10d      	bne.n	800b096 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b082:	f107 0208 	add.w	r2, r7, #8
 800b086:	4610      	mov	r0, r2
 800b088:	4798      	blx	r3
 800b08a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	3301      	adds	r3, #1
 800b090:	2207      	movs	r2, #7
 800b092:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b094:	e00f      	b.n	800b0b6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b096:	6839      	ldr	r1, [r7, #0]
 800b098:	6878      	ldr	r0, [r7, #4]
 800b09a:	f000 f9f7 	bl	800b48c <USBD_CtlError>
        err++;
 800b09e:	7afb      	ldrb	r3, [r7, #11]
 800b0a0:	3301      	adds	r3, #1
 800b0a2:	72fb      	strb	r3, [r7, #11]
      break;
 800b0a4:	e007      	b.n	800b0b6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b0a6:	6839      	ldr	r1, [r7, #0]
 800b0a8:	6878      	ldr	r0, [r7, #4]
 800b0aa:	f000 f9ef 	bl	800b48c <USBD_CtlError>
      err++;
 800b0ae:	7afb      	ldrb	r3, [r7, #11]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	72fb      	strb	r3, [r7, #11]
      break;
 800b0b4:	bf00      	nop
  }

  if (err != 0U)
 800b0b6:	7afb      	ldrb	r3, [r7, #11]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d11e      	bne.n	800b0fa <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	88db      	ldrh	r3, [r3, #6]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d016      	beq.n	800b0f2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b0c4:	893b      	ldrh	r3, [r7, #8]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00e      	beq.n	800b0e8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	88da      	ldrh	r2, [r3, #6]
 800b0ce:	893b      	ldrh	r3, [r7, #8]
 800b0d0:	4293      	cmp	r3, r2
 800b0d2:	bf28      	it	cs
 800b0d4:	4613      	movcs	r3, r2
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b0da:	893b      	ldrh	r3, [r7, #8]
 800b0dc:	461a      	mov	r2, r3
 800b0de:	68f9      	ldr	r1, [r7, #12]
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 fa44 	bl	800b56e <USBD_CtlSendData>
 800b0e6:	e009      	b.n	800b0fc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b0e8:	6839      	ldr	r1, [r7, #0]
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 f9ce 	bl	800b48c <USBD_CtlError>
 800b0f0:	e004      	b.n	800b0fc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 fa95 	bl	800b622 <USBD_CtlSendStatus>
 800b0f8:	e000      	b.n	800b0fc <USBD_GetDescriptor+0x320>
    return;
 800b0fa:	bf00      	nop
  }
}
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop

0800b104 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b104:	b580      	push	{r7, lr}
 800b106:	b084      	sub	sp, #16
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	889b      	ldrh	r3, [r3, #4]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d131      	bne.n	800b17a <USBD_SetAddress+0x76>
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	88db      	ldrh	r3, [r3, #6]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d12d      	bne.n	800b17a <USBD_SetAddress+0x76>
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	885b      	ldrh	r3, [r3, #2]
 800b122:	2b7f      	cmp	r3, #127	; 0x7f
 800b124:	d829      	bhi.n	800b17a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b126:	683b      	ldr	r3, [r7, #0]
 800b128:	885b      	ldrh	r3, [r3, #2]
 800b12a:	b2db      	uxtb	r3, r3
 800b12c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b130:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b138:	b2db      	uxtb	r3, r3
 800b13a:	2b03      	cmp	r3, #3
 800b13c:	d104      	bne.n	800b148 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b13e:	6839      	ldr	r1, [r7, #0]
 800b140:	6878      	ldr	r0, [r7, #4]
 800b142:	f000 f9a3 	bl	800b48c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b146:	e01d      	b.n	800b184 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	7bfa      	ldrb	r2, [r7, #15]
 800b14c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b150:	7bfb      	ldrb	r3, [r7, #15]
 800b152:	4619      	mov	r1, r3
 800b154:	6878      	ldr	r0, [r7, #4]
 800b156:	f000 fe83 	bl	800be60 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f000 fa61 	bl	800b622 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b160:	7bfb      	ldrb	r3, [r7, #15]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d004      	beq.n	800b170 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2202      	movs	r2, #2
 800b16a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b16e:	e009      	b.n	800b184 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2201      	movs	r2, #1
 800b174:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b178:	e004      	b.n	800b184 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b17a:	6839      	ldr	r1, [r7, #0]
 800b17c:	6878      	ldr	r0, [r7, #4]
 800b17e:	f000 f985 	bl	800b48c <USBD_CtlError>
  }
}
 800b182:	bf00      	nop
 800b184:	bf00      	nop
 800b186:	3710      	adds	r7, #16
 800b188:	46bd      	mov	sp, r7
 800b18a:	bd80      	pop	{r7, pc}

0800b18c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b196:	2300      	movs	r3, #0
 800b198:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	885b      	ldrh	r3, [r3, #2]
 800b19e:	b2da      	uxtb	r2, r3
 800b1a0:	4b4c      	ldr	r3, [pc, #304]	; (800b2d4 <USBD_SetConfig+0x148>)
 800b1a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b1a4:	4b4b      	ldr	r3, [pc, #300]	; (800b2d4 <USBD_SetConfig+0x148>)
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d905      	bls.n	800b1b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b1ac:	6839      	ldr	r1, [r7, #0]
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 f96c 	bl	800b48c <USBD_CtlError>
    return USBD_FAIL;
 800b1b4:	2303      	movs	r3, #3
 800b1b6:	e088      	b.n	800b2ca <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	2b02      	cmp	r3, #2
 800b1c2:	d002      	beq.n	800b1ca <USBD_SetConfig+0x3e>
 800b1c4:	2b03      	cmp	r3, #3
 800b1c6:	d025      	beq.n	800b214 <USBD_SetConfig+0x88>
 800b1c8:	e071      	b.n	800b2ae <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b1ca:	4b42      	ldr	r3, [pc, #264]	; (800b2d4 <USBD_SetConfig+0x148>)
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d01c      	beq.n	800b20c <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800b1d2:	4b40      	ldr	r3, [pc, #256]	; (800b2d4 <USBD_SetConfig+0x148>)
 800b1d4:	781b      	ldrb	r3, [r3, #0]
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b1dc:	4b3d      	ldr	r3, [pc, #244]	; (800b2d4 <USBD_SetConfig+0x148>)
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	4619      	mov	r1, r3
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f7ff f992 	bl	800a50c <USBD_SetClassConfig>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b1ec:	7bfb      	ldrb	r3, [r7, #15]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d004      	beq.n	800b1fc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800b1f2:	6839      	ldr	r1, [r7, #0]
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 f949 	bl	800b48c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b1fa:	e065      	b.n	800b2c8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b1fc:	6878      	ldr	r0, [r7, #4]
 800b1fe:	f000 fa10 	bl	800b622 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2203      	movs	r2, #3
 800b206:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b20a:	e05d      	b.n	800b2c8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 fa08 	bl	800b622 <USBD_CtlSendStatus>
      break;
 800b212:	e059      	b.n	800b2c8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b214:	4b2f      	ldr	r3, [pc, #188]	; (800b2d4 <USBD_SetConfig+0x148>)
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d112      	bne.n	800b242 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2202      	movs	r2, #2
 800b220:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b224:	4b2b      	ldr	r3, [pc, #172]	; (800b2d4 <USBD_SetConfig+0x148>)
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	461a      	mov	r2, r3
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b22e:	4b29      	ldr	r3, [pc, #164]	; (800b2d4 <USBD_SetConfig+0x148>)
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	4619      	mov	r1, r3
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f7ff f985 	bl	800a544 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b23a:	6878      	ldr	r0, [r7, #4]
 800b23c:	f000 f9f1 	bl	800b622 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b240:	e042      	b.n	800b2c8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800b242:	4b24      	ldr	r3, [pc, #144]	; (800b2d4 <USBD_SetConfig+0x148>)
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	461a      	mov	r2, r3
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	685b      	ldr	r3, [r3, #4]
 800b24c:	429a      	cmp	r2, r3
 800b24e:	d02a      	beq.n	800b2a6 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	b2db      	uxtb	r3, r3
 800b256:	4619      	mov	r1, r3
 800b258:	6878      	ldr	r0, [r7, #4]
 800b25a:	f7ff f973 	bl	800a544 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b25e:	4b1d      	ldr	r3, [pc, #116]	; (800b2d4 <USBD_SetConfig+0x148>)
 800b260:	781b      	ldrb	r3, [r3, #0]
 800b262:	461a      	mov	r2, r3
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b268:	4b1a      	ldr	r3, [pc, #104]	; (800b2d4 <USBD_SetConfig+0x148>)
 800b26a:	781b      	ldrb	r3, [r3, #0]
 800b26c:	4619      	mov	r1, r3
 800b26e:	6878      	ldr	r0, [r7, #4]
 800b270:	f7ff f94c 	bl	800a50c <USBD_SetClassConfig>
 800b274:	4603      	mov	r3, r0
 800b276:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b278:	7bfb      	ldrb	r3, [r7, #15]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d00f      	beq.n	800b29e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800b27e:	6839      	ldr	r1, [r7, #0]
 800b280:	6878      	ldr	r0, [r7, #4]
 800b282:	f000 f903 	bl	800b48c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	4619      	mov	r1, r3
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f7ff f958 	bl	800a544 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2202      	movs	r2, #2
 800b298:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b29c:	e014      	b.n	800b2c8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 f9bf 	bl	800b622 <USBD_CtlSendStatus>
      break;
 800b2a4:	e010      	b.n	800b2c8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800b2a6:	6878      	ldr	r0, [r7, #4]
 800b2a8:	f000 f9bb 	bl	800b622 <USBD_CtlSendStatus>
      break;
 800b2ac:	e00c      	b.n	800b2c8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800b2ae:	6839      	ldr	r1, [r7, #0]
 800b2b0:	6878      	ldr	r0, [r7, #4]
 800b2b2:	f000 f8eb 	bl	800b48c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b2b6:	4b07      	ldr	r3, [pc, #28]	; (800b2d4 <USBD_SetConfig+0x148>)
 800b2b8:	781b      	ldrb	r3, [r3, #0]
 800b2ba:	4619      	mov	r1, r3
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f7ff f941 	bl	800a544 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b2c2:	2303      	movs	r3, #3
 800b2c4:	73fb      	strb	r3, [r7, #15]
      break;
 800b2c6:	bf00      	nop
  }

  return ret;
 800b2c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3710      	adds	r7, #16
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	200044c0 	.word	0x200044c0

0800b2d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
 800b2e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b2e2:	683b      	ldr	r3, [r7, #0]
 800b2e4:	88db      	ldrh	r3, [r3, #6]
 800b2e6:	2b01      	cmp	r3, #1
 800b2e8:	d004      	beq.n	800b2f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b2ea:	6839      	ldr	r1, [r7, #0]
 800b2ec:	6878      	ldr	r0, [r7, #4]
 800b2ee:	f000 f8cd 	bl	800b48c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b2f2:	e023      	b.n	800b33c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2fa:	b2db      	uxtb	r3, r3
 800b2fc:	2b02      	cmp	r3, #2
 800b2fe:	dc02      	bgt.n	800b306 <USBD_GetConfig+0x2e>
 800b300:	2b00      	cmp	r3, #0
 800b302:	dc03      	bgt.n	800b30c <USBD_GetConfig+0x34>
 800b304:	e015      	b.n	800b332 <USBD_GetConfig+0x5a>
 800b306:	2b03      	cmp	r3, #3
 800b308:	d00b      	beq.n	800b322 <USBD_GetConfig+0x4a>
 800b30a:	e012      	b.n	800b332 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	3308      	adds	r3, #8
 800b316:	2201      	movs	r2, #1
 800b318:	4619      	mov	r1, r3
 800b31a:	6878      	ldr	r0, [r7, #4]
 800b31c:	f000 f927 	bl	800b56e <USBD_CtlSendData>
        break;
 800b320:	e00c      	b.n	800b33c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	3304      	adds	r3, #4
 800b326:	2201      	movs	r2, #1
 800b328:	4619      	mov	r1, r3
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f000 f91f 	bl	800b56e <USBD_CtlSendData>
        break;
 800b330:	e004      	b.n	800b33c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b332:	6839      	ldr	r1, [r7, #0]
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 f8a9 	bl	800b48c <USBD_CtlError>
        break;
 800b33a:	bf00      	nop
}
 800b33c:	bf00      	nop
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b354:	b2db      	uxtb	r3, r3
 800b356:	3b01      	subs	r3, #1
 800b358:	2b02      	cmp	r3, #2
 800b35a:	d81e      	bhi.n	800b39a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	88db      	ldrh	r3, [r3, #6]
 800b360:	2b02      	cmp	r3, #2
 800b362:	d004      	beq.n	800b36e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b364:	6839      	ldr	r1, [r7, #0]
 800b366:	6878      	ldr	r0, [r7, #4]
 800b368:	f000 f890 	bl	800b48c <USBD_CtlError>
        break;
 800b36c:	e01a      	b.n	800b3a4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2201      	movs	r2, #1
 800b372:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d005      	beq.n	800b38a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	f043 0202 	orr.w	r2, r3, #2
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	330c      	adds	r3, #12
 800b38e:	2202      	movs	r2, #2
 800b390:	4619      	mov	r1, r3
 800b392:	6878      	ldr	r0, [r7, #4]
 800b394:	f000 f8eb 	bl	800b56e <USBD_CtlSendData>
      break;
 800b398:	e004      	b.n	800b3a4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b39a:	6839      	ldr	r1, [r7, #0]
 800b39c:	6878      	ldr	r0, [r7, #4]
 800b39e:	f000 f875 	bl	800b48c <USBD_CtlError>
      break;
 800b3a2:	bf00      	nop
  }
}
 800b3a4:	bf00      	nop
 800b3a6:	3708      	adds	r7, #8
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b082      	sub	sp, #8
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b3b6:	683b      	ldr	r3, [r7, #0]
 800b3b8:	885b      	ldrh	r3, [r3, #2]
 800b3ba:	2b01      	cmp	r3, #1
 800b3bc:	d106      	bne.n	800b3cc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	2201      	movs	r2, #1
 800b3c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f000 f92b 	bl	800b622 <USBD_CtlSendStatus>
  }
}
 800b3cc:	bf00      	nop
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b082      	sub	sp, #8
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	3b01      	subs	r3, #1
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	d80b      	bhi.n	800b404 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	885b      	ldrh	r3, [r3, #2]
 800b3f0:	2b01      	cmp	r3, #1
 800b3f2:	d10c      	bne.n	800b40e <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b3fc:	6878      	ldr	r0, [r7, #4]
 800b3fe:	f000 f910 	bl	800b622 <USBD_CtlSendStatus>
      }
      break;
 800b402:	e004      	b.n	800b40e <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b404:	6839      	ldr	r1, [r7, #0]
 800b406:	6878      	ldr	r0, [r7, #4]
 800b408:	f000 f840 	bl	800b48c <USBD_CtlError>
      break;
 800b40c:	e000      	b.n	800b410 <USBD_ClrFeature+0x3c>
      break;
 800b40e:	bf00      	nop
  }
}
 800b410:	bf00      	nop
 800b412:	3708      	adds	r7, #8
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}

0800b418 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
 800b420:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b422:	683b      	ldr	r3, [r7, #0]
 800b424:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	781a      	ldrb	r2, [r3, #0]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	3301      	adds	r3, #1
 800b432:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	781a      	ldrb	r2, [r3, #0]
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	3301      	adds	r3, #1
 800b440:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f7ff fa92 	bl	800a96c <SWAPBYTE>
 800b448:	4603      	mov	r3, r0
 800b44a:	461a      	mov	r2, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	3301      	adds	r3, #1
 800b454:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	3301      	adds	r3, #1
 800b45a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b45c:	68f8      	ldr	r0, [r7, #12]
 800b45e:	f7ff fa85 	bl	800a96c <SWAPBYTE>
 800b462:	4603      	mov	r3, r0
 800b464:	461a      	mov	r2, r3
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	3301      	adds	r3, #1
 800b46e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	3301      	adds	r3, #1
 800b474:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b476:	68f8      	ldr	r0, [r7, #12]
 800b478:	f7ff fa78 	bl	800a96c <SWAPBYTE>
 800b47c:	4603      	mov	r3, r0
 800b47e:	461a      	mov	r2, r3
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	80da      	strh	r2, [r3, #6]
}
 800b484:	bf00      	nop
 800b486:	3710      	adds	r7, #16
 800b488:	46bd      	mov	sp, r7
 800b48a:	bd80      	pop	{r7, pc}

0800b48c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b48c:	b580      	push	{r7, lr}
 800b48e:	b082      	sub	sp, #8
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b496:	2180      	movs	r1, #128	; 0x80
 800b498:	6878      	ldr	r0, [r7, #4]
 800b49a:	f000 fc77 	bl	800bd8c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b49e:	2100      	movs	r1, #0
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	f000 fc73 	bl	800bd8c <USBD_LL_StallEP>
}
 800b4a6:	bf00      	nop
 800b4a8:	3708      	adds	r7, #8
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b086      	sub	sp, #24
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	60f8      	str	r0, [r7, #12]
 800b4b6:	60b9      	str	r1, [r7, #8]
 800b4b8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b4ba:	2300      	movs	r3, #0
 800b4bc:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d036      	beq.n	800b532 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b4c8:	6938      	ldr	r0, [r7, #16]
 800b4ca:	f000 f836 	bl	800b53a <USBD_GetLen>
 800b4ce:	4603      	mov	r3, r0
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	b29b      	uxth	r3, r3
 800b4d4:	005b      	lsls	r3, r3, #1
 800b4d6:	b29a      	uxth	r2, r3
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b4dc:	7dfb      	ldrb	r3, [r7, #23]
 800b4de:	68ba      	ldr	r2, [r7, #8]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	7812      	ldrb	r2, [r2, #0]
 800b4e6:	701a      	strb	r2, [r3, #0]
  idx++;
 800b4e8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b4ee:	7dfb      	ldrb	r3, [r7, #23]
 800b4f0:	68ba      	ldr	r2, [r7, #8]
 800b4f2:	4413      	add	r3, r2
 800b4f4:	2203      	movs	r2, #3
 800b4f6:	701a      	strb	r2, [r3, #0]
  idx++;
 800b4f8:	7dfb      	ldrb	r3, [r7, #23]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b4fe:	e013      	b.n	800b528 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b500:	7dfb      	ldrb	r3, [r7, #23]
 800b502:	68ba      	ldr	r2, [r7, #8]
 800b504:	4413      	add	r3, r2
 800b506:	693a      	ldr	r2, [r7, #16]
 800b508:	7812      	ldrb	r2, [r2, #0]
 800b50a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	3301      	adds	r3, #1
 800b510:	613b      	str	r3, [r7, #16]
    idx++;
 800b512:	7dfb      	ldrb	r3, [r7, #23]
 800b514:	3301      	adds	r3, #1
 800b516:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b518:	7dfb      	ldrb	r3, [r7, #23]
 800b51a:	68ba      	ldr	r2, [r7, #8]
 800b51c:	4413      	add	r3, r2
 800b51e:	2200      	movs	r2, #0
 800b520:	701a      	strb	r2, [r3, #0]
    idx++;
 800b522:	7dfb      	ldrb	r3, [r7, #23]
 800b524:	3301      	adds	r3, #1
 800b526:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d1e7      	bne.n	800b500 <USBD_GetString+0x52>
 800b530:	e000      	b.n	800b534 <USBD_GetString+0x86>
    return;
 800b532:	bf00      	nop
  }
}
 800b534:	3718      	adds	r7, #24
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b53a:	b480      	push	{r7}
 800b53c:	b085      	sub	sp, #20
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b542:	2300      	movs	r3, #0
 800b544:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b54a:	e005      	b.n	800b558 <USBD_GetLen+0x1e>
  {
    len++;
 800b54c:	7bfb      	ldrb	r3, [r7, #15]
 800b54e:	3301      	adds	r3, #1
 800b550:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	3301      	adds	r3, #1
 800b556:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	781b      	ldrb	r3, [r3, #0]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1f5      	bne.n	800b54c <USBD_GetLen+0x12>
  }

  return len;
 800b560:	7bfb      	ldrb	r3, [r7, #15]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3714      	adds	r7, #20
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b084      	sub	sp, #16
 800b572:	af00      	add	r7, sp, #0
 800b574:	60f8      	str	r0, [r7, #12]
 800b576:	60b9      	str	r1, [r7, #8]
 800b578:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	2202      	movs	r2, #2
 800b57e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	687a      	ldr	r2, [r7, #4]
 800b586:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	687a      	ldr	r2, [r7, #4]
 800b58c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	68ba      	ldr	r2, [r7, #8]
 800b592:	2100      	movs	r1, #0
 800b594:	68f8      	ldr	r0, [r7, #12]
 800b596:	f000 fc82 	bl	800be9e <USBD_LL_Transmit>

  return USBD_OK;
 800b59a:	2300      	movs	r3, #0
}
 800b59c:	4618      	mov	r0, r3
 800b59e:	3710      	adds	r7, #16
 800b5a0:	46bd      	mov	sp, r7
 800b5a2:	bd80      	pop	{r7, pc}

0800b5a4 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b084      	sub	sp, #16
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	60f8      	str	r0, [r7, #12]
 800b5ac:	60b9      	str	r1, [r7, #8]
 800b5ae:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	68ba      	ldr	r2, [r7, #8]
 800b5b4:	2100      	movs	r1, #0
 800b5b6:	68f8      	ldr	r0, [r7, #12]
 800b5b8:	f000 fc71 	bl	800be9e <USBD_LL_Transmit>

  return USBD_OK;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3710      	adds	r7, #16
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}

0800b5c6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b5c6:	b580      	push	{r7, lr}
 800b5c8:	b084      	sub	sp, #16
 800b5ca:	af00      	add	r7, sp, #0
 800b5cc:	60f8      	str	r0, [r7, #12]
 800b5ce:	60b9      	str	r1, [r7, #8]
 800b5d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2203      	movs	r2, #3
 800b5d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	687a      	ldr	r2, [r7, #4]
 800b5de:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	68ba      	ldr	r2, [r7, #8]
 800b5ee:	2100      	movs	r1, #0
 800b5f0:	68f8      	ldr	r0, [r7, #12]
 800b5f2:	f000 fc75 	bl	800bee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b5f6:	2300      	movs	r3, #0
}
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	3710      	adds	r7, #16
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}

0800b600 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b600:	b580      	push	{r7, lr}
 800b602:	b084      	sub	sp, #16
 800b604:	af00      	add	r7, sp, #0
 800b606:	60f8      	str	r0, [r7, #12]
 800b608:	60b9      	str	r1, [r7, #8]
 800b60a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	68ba      	ldr	r2, [r7, #8]
 800b610:	2100      	movs	r1, #0
 800b612:	68f8      	ldr	r0, [r7, #12]
 800b614:	f000 fc64 	bl	800bee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b618:	2300      	movs	r3, #0
}
 800b61a:	4618      	mov	r0, r3
 800b61c:	3710      	adds	r7, #16
 800b61e:	46bd      	mov	sp, r7
 800b620:	bd80      	pop	{r7, pc}

0800b622 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b622:	b580      	push	{r7, lr}
 800b624:	b082      	sub	sp, #8
 800b626:	af00      	add	r7, sp, #0
 800b628:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	2204      	movs	r2, #4
 800b62e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b632:	2300      	movs	r3, #0
 800b634:	2200      	movs	r2, #0
 800b636:	2100      	movs	r1, #0
 800b638:	6878      	ldr	r0, [r7, #4]
 800b63a:	f000 fc30 	bl	800be9e <USBD_LL_Transmit>

  return USBD_OK;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	3708      	adds	r7, #8
 800b644:	46bd      	mov	sp, r7
 800b646:	bd80      	pop	{r7, pc}

0800b648 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b082      	sub	sp, #8
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2205      	movs	r2, #5
 800b654:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b658:	2300      	movs	r3, #0
 800b65a:	2200      	movs	r2, #0
 800b65c:	2100      	movs	r1, #0
 800b65e:	6878      	ldr	r0, [r7, #4]
 800b660:	f000 fc3e 	bl	800bee0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b664:	2300      	movs	r3, #0
}
 800b666:	4618      	mov	r0, r3
 800b668:	3708      	adds	r7, #8
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
	...

0800b670 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800b674:	2200      	movs	r2, #0
 800b676:	4912      	ldr	r1, [pc, #72]	; (800b6c0 <MX_USB_Device_Init+0x50>)
 800b678:	4812      	ldr	r0, [pc, #72]	; (800b6c4 <MX_USB_Device_Init+0x54>)
 800b67a:	f7fe fed9 	bl	800a430 <USBD_Init>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d001      	beq.n	800b688 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800b684:	f7f5 faca 	bl	8000c1c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800b688:	490f      	ldr	r1, [pc, #60]	; (800b6c8 <MX_USB_Device_Init+0x58>)
 800b68a:	480e      	ldr	r0, [pc, #56]	; (800b6c4 <MX_USB_Device_Init+0x54>)
 800b68c:	f7fe ff00 	bl	800a490 <USBD_RegisterClass>
 800b690:	4603      	mov	r3, r0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d001      	beq.n	800b69a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800b696:	f7f5 fac1 	bl	8000c1c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800b69a:	490c      	ldr	r1, [pc, #48]	; (800b6cc <MX_USB_Device_Init+0x5c>)
 800b69c:	4809      	ldr	r0, [pc, #36]	; (800b6c4 <MX_USB_Device_Init+0x54>)
 800b69e:	f7fe fe51 	bl	800a344 <USBD_CDC_RegisterInterface>
 800b6a2:	4603      	mov	r3, r0
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d001      	beq.n	800b6ac <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800b6a8:	f7f5 fab8 	bl	8000c1c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800b6ac:	4805      	ldr	r0, [pc, #20]	; (800b6c4 <MX_USB_Device_Init+0x54>)
 800b6ae:	f7fe ff16 	bl	800a4de <USBD_Start>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d001      	beq.n	800b6bc <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800b6b8:	f7f5 fab0 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800b6bc:	bf00      	nop
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	20000130 	.word	0x20000130
 800b6c4:	200044c4 	.word	0x200044c4
 800b6c8:	20000018 	.word	0x20000018
 800b6cc:	2000011c 	.word	0x2000011c

0800b6d0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	4905      	ldr	r1, [pc, #20]	; (800b6ec <CDC_Init_FS+0x1c>)
 800b6d8:	4805      	ldr	r0, [pc, #20]	; (800b6f0 <CDC_Init_FS+0x20>)
 800b6da:	f7fe fe48 	bl	800a36e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b6de:	4905      	ldr	r1, [pc, #20]	; (800b6f4 <CDC_Init_FS+0x24>)
 800b6e0:	4803      	ldr	r0, [pc, #12]	; (800b6f0 <CDC_Init_FS+0x20>)
 800b6e2:	f7fe fe62 	bl	800a3aa <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b6e6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	bd80      	pop	{r7, pc}
 800b6ec:	20004f94 	.word	0x20004f94
 800b6f0:	200044c4 	.word	0x200044c4
 800b6f4:	20004794 	.word	0x20004794

0800b6f8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b6f8:	b480      	push	{r7}
 800b6fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b6fc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	4603      	mov	r3, r0
 800b710:	6039      	str	r1, [r7, #0]
 800b712:	71fb      	strb	r3, [r7, #7]
 800b714:	4613      	mov	r3, r2
 800b716:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b718:	79fb      	ldrb	r3, [r7, #7]
 800b71a:	2b23      	cmp	r3, #35	; 0x23
 800b71c:	d84a      	bhi.n	800b7b4 <CDC_Control_FS+0xac>
 800b71e:	a201      	add	r2, pc, #4	; (adr r2, 800b724 <CDC_Control_FS+0x1c>)
 800b720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b724:	0800b7b5 	.word	0x0800b7b5
 800b728:	0800b7b5 	.word	0x0800b7b5
 800b72c:	0800b7b5 	.word	0x0800b7b5
 800b730:	0800b7b5 	.word	0x0800b7b5
 800b734:	0800b7b5 	.word	0x0800b7b5
 800b738:	0800b7b5 	.word	0x0800b7b5
 800b73c:	0800b7b5 	.word	0x0800b7b5
 800b740:	0800b7b5 	.word	0x0800b7b5
 800b744:	0800b7b5 	.word	0x0800b7b5
 800b748:	0800b7b5 	.word	0x0800b7b5
 800b74c:	0800b7b5 	.word	0x0800b7b5
 800b750:	0800b7b5 	.word	0x0800b7b5
 800b754:	0800b7b5 	.word	0x0800b7b5
 800b758:	0800b7b5 	.word	0x0800b7b5
 800b75c:	0800b7b5 	.word	0x0800b7b5
 800b760:	0800b7b5 	.word	0x0800b7b5
 800b764:	0800b7b5 	.word	0x0800b7b5
 800b768:	0800b7b5 	.word	0x0800b7b5
 800b76c:	0800b7b5 	.word	0x0800b7b5
 800b770:	0800b7b5 	.word	0x0800b7b5
 800b774:	0800b7b5 	.word	0x0800b7b5
 800b778:	0800b7b5 	.word	0x0800b7b5
 800b77c:	0800b7b5 	.word	0x0800b7b5
 800b780:	0800b7b5 	.word	0x0800b7b5
 800b784:	0800b7b5 	.word	0x0800b7b5
 800b788:	0800b7b5 	.word	0x0800b7b5
 800b78c:	0800b7b5 	.word	0x0800b7b5
 800b790:	0800b7b5 	.word	0x0800b7b5
 800b794:	0800b7b5 	.word	0x0800b7b5
 800b798:	0800b7b5 	.word	0x0800b7b5
 800b79c:	0800b7b5 	.word	0x0800b7b5
 800b7a0:	0800b7b5 	.word	0x0800b7b5
 800b7a4:	0800b7b5 	.word	0x0800b7b5
 800b7a8:	0800b7b5 	.word	0x0800b7b5
 800b7ac:	0800b7b5 	.word	0x0800b7b5
 800b7b0:	0800b7b5 	.word	0x0800b7b5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b7b4:	bf00      	nop
  }

  return (USBD_OK);
 800b7b6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b7c4:	b580      	push	{r7, lr}
 800b7c6:	b082      	sub	sp, #8
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
 800b7cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b7ce:	6879      	ldr	r1, [r7, #4]
 800b7d0:	4805      	ldr	r0, [pc, #20]	; (800b7e8 <CDC_Receive_FS+0x24>)
 800b7d2:	f7fe fdea 	bl	800a3aa <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b7d6:	4804      	ldr	r0, [pc, #16]	; (800b7e8 <CDC_Receive_FS+0x24>)
 800b7d8:	f7fe fe00 	bl	800a3dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b7dc:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3708      	adds	r7, #8
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}
 800b7e6:	bf00      	nop
 800b7e8:	200044c4 	.word	0x200044c4

0800b7ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b7ec:	b480      	push	{r7}
 800b7ee:	b087      	sub	sp, #28
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	4613      	mov	r3, r2
 800b7f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b7fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b802:	4618      	mov	r0, r3
 800b804:	371c      	adds	r7, #28
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr
	...

0800b810 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
 800b816:	4603      	mov	r3, r0
 800b818:	6039      	str	r1, [r7, #0]
 800b81a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	2212      	movs	r2, #18
 800b820:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800b822:	4b03      	ldr	r3, [pc, #12]	; (800b830 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800b824:	4618      	mov	r0, r3
 800b826:	370c      	adds	r7, #12
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr
 800b830:	20000150 	.word	0x20000150

0800b834 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	4603      	mov	r3, r0
 800b83c:	6039      	str	r1, [r7, #0]
 800b83e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	2204      	movs	r2, #4
 800b844:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b846:	4b03      	ldr	r3, [pc, #12]	; (800b854 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800b848:	4618      	mov	r0, r3
 800b84a:	370c      	adds	r7, #12
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr
 800b854:	20000164 	.word	0x20000164

0800b858 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b858:	b580      	push	{r7, lr}
 800b85a:	b082      	sub	sp, #8
 800b85c:	af00      	add	r7, sp, #0
 800b85e:	4603      	mov	r3, r0
 800b860:	6039      	str	r1, [r7, #0]
 800b862:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b864:	79fb      	ldrb	r3, [r7, #7]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d105      	bne.n	800b876 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b86a:	683a      	ldr	r2, [r7, #0]
 800b86c:	4907      	ldr	r1, [pc, #28]	; (800b88c <USBD_CDC_ProductStrDescriptor+0x34>)
 800b86e:	4808      	ldr	r0, [pc, #32]	; (800b890 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b870:	f7ff fe1d 	bl	800b4ae <USBD_GetString>
 800b874:	e004      	b.n	800b880 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800b876:	683a      	ldr	r2, [r7, #0]
 800b878:	4904      	ldr	r1, [pc, #16]	; (800b88c <USBD_CDC_ProductStrDescriptor+0x34>)
 800b87a:	4805      	ldr	r0, [pc, #20]	; (800b890 <USBD_CDC_ProductStrDescriptor+0x38>)
 800b87c:	f7ff fe17 	bl	800b4ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800b880:	4b02      	ldr	r3, [pc, #8]	; (800b88c <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800b882:	4618      	mov	r0, r3
 800b884:	3708      	adds	r7, #8
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}
 800b88a:	bf00      	nop
 800b88c:	20005794 	.word	0x20005794
 800b890:	0800cee4 	.word	0x0800cee4

0800b894 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b082      	sub	sp, #8
 800b898:	af00      	add	r7, sp, #0
 800b89a:	4603      	mov	r3, r0
 800b89c:	6039      	str	r1, [r7, #0]
 800b89e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b8a0:	683a      	ldr	r2, [r7, #0]
 800b8a2:	4904      	ldr	r1, [pc, #16]	; (800b8b4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800b8a4:	4804      	ldr	r0, [pc, #16]	; (800b8b8 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800b8a6:	f7ff fe02 	bl	800b4ae <USBD_GetString>
  return USBD_StrDesc;
 800b8aa:	4b02      	ldr	r3, [pc, #8]	; (800b8b4 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3708      	adds	r7, #8
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	bd80      	pop	{r7, pc}
 800b8b4:	20005794 	.word	0x20005794
 800b8b8:	0800cef4 	.word	0x0800cef4

0800b8bc <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	4603      	mov	r3, r0
 800b8c4:	6039      	str	r1, [r7, #0]
 800b8c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	221a      	movs	r2, #26
 800b8cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b8ce:	f000 f843 	bl	800b958 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800b8d2:	4b02      	ldr	r3, [pc, #8]	; (800b8dc <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	3708      	adds	r7, #8
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}
 800b8dc:	20000168 	.word	0x20000168

0800b8e0 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b082      	sub	sp, #8
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	6039      	str	r1, [r7, #0]
 800b8ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b8ec:	79fb      	ldrb	r3, [r7, #7]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d105      	bne.n	800b8fe <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b8f2:	683a      	ldr	r2, [r7, #0]
 800b8f4:	4907      	ldr	r1, [pc, #28]	; (800b914 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b8f6:	4808      	ldr	r0, [pc, #32]	; (800b918 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b8f8:	f7ff fdd9 	bl	800b4ae <USBD_GetString>
 800b8fc:	e004      	b.n	800b908 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800b8fe:	683a      	ldr	r2, [r7, #0]
 800b900:	4904      	ldr	r1, [pc, #16]	; (800b914 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800b902:	4805      	ldr	r0, [pc, #20]	; (800b918 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800b904:	f7ff fdd3 	bl	800b4ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800b908:	4b02      	ldr	r3, [pc, #8]	; (800b914 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	3708      	adds	r7, #8
 800b90e:	46bd      	mov	sp, r7
 800b910:	bd80      	pop	{r7, pc}
 800b912:	bf00      	nop
 800b914:	20005794 	.word	0x20005794
 800b918:	0800cf08 	.word	0x0800cf08

0800b91c <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b082      	sub	sp, #8
 800b920:	af00      	add	r7, sp, #0
 800b922:	4603      	mov	r3, r0
 800b924:	6039      	str	r1, [r7, #0]
 800b926:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b928:	79fb      	ldrb	r3, [r7, #7]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d105      	bne.n	800b93a <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b92e:	683a      	ldr	r2, [r7, #0]
 800b930:	4907      	ldr	r1, [pc, #28]	; (800b950 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b932:	4808      	ldr	r0, [pc, #32]	; (800b954 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b934:	f7ff fdbb 	bl	800b4ae <USBD_GetString>
 800b938:	e004      	b.n	800b944 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800b93a:	683a      	ldr	r2, [r7, #0]
 800b93c:	4904      	ldr	r1, [pc, #16]	; (800b950 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800b93e:	4805      	ldr	r0, [pc, #20]	; (800b954 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800b940:	f7ff fdb5 	bl	800b4ae <USBD_GetString>
  }
  return USBD_StrDesc;
 800b944:	4b02      	ldr	r3, [pc, #8]	; (800b950 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800b946:	4618      	mov	r0, r3
 800b948:	3708      	adds	r7, #8
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bd80      	pop	{r7, pc}
 800b94e:	bf00      	nop
 800b950:	20005794 	.word	0x20005794
 800b954:	0800cf14 	.word	0x0800cf14

0800b958 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b95e:	4b0f      	ldr	r3, [pc, #60]	; (800b99c <Get_SerialNum+0x44>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b964:	4b0e      	ldr	r3, [pc, #56]	; (800b9a0 <Get_SerialNum+0x48>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b96a:	4b0e      	ldr	r3, [pc, #56]	; (800b9a4 <Get_SerialNum+0x4c>)
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b970:	68fa      	ldr	r2, [r7, #12]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4413      	add	r3, r2
 800b976:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d009      	beq.n	800b992 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b97e:	2208      	movs	r2, #8
 800b980:	4909      	ldr	r1, [pc, #36]	; (800b9a8 <Get_SerialNum+0x50>)
 800b982:	68f8      	ldr	r0, [r7, #12]
 800b984:	f000 f814 	bl	800b9b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b988:	2204      	movs	r2, #4
 800b98a:	4908      	ldr	r1, [pc, #32]	; (800b9ac <Get_SerialNum+0x54>)
 800b98c:	68b8      	ldr	r0, [r7, #8]
 800b98e:	f000 f80f 	bl	800b9b0 <IntToUnicode>
  }
}
 800b992:	bf00      	nop
 800b994:	3710      	adds	r7, #16
 800b996:	46bd      	mov	sp, r7
 800b998:	bd80      	pop	{r7, pc}
 800b99a:	bf00      	nop
 800b99c:	1fff7590 	.word	0x1fff7590
 800b9a0:	1fff7594 	.word	0x1fff7594
 800b9a4:	1fff7598 	.word	0x1fff7598
 800b9a8:	2000016a 	.word	0x2000016a
 800b9ac:	2000017a 	.word	0x2000017a

0800b9b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b087      	sub	sp, #28
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	60f8      	str	r0, [r7, #12]
 800b9b8:	60b9      	str	r1, [r7, #8]
 800b9ba:	4613      	mov	r3, r2
 800b9bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b9c2:	2300      	movs	r3, #0
 800b9c4:	75fb      	strb	r3, [r7, #23]
 800b9c6:	e027      	b.n	800ba18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	0f1b      	lsrs	r3, r3, #28
 800b9cc:	2b09      	cmp	r3, #9
 800b9ce:	d80b      	bhi.n	800b9e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	0f1b      	lsrs	r3, r3, #28
 800b9d4:	b2da      	uxtb	r2, r3
 800b9d6:	7dfb      	ldrb	r3, [r7, #23]
 800b9d8:	005b      	lsls	r3, r3, #1
 800b9da:	4619      	mov	r1, r3
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	440b      	add	r3, r1
 800b9e0:	3230      	adds	r2, #48	; 0x30
 800b9e2:	b2d2      	uxtb	r2, r2
 800b9e4:	701a      	strb	r2, [r3, #0]
 800b9e6:	e00a      	b.n	800b9fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	0f1b      	lsrs	r3, r3, #28
 800b9ec:	b2da      	uxtb	r2, r3
 800b9ee:	7dfb      	ldrb	r3, [r7, #23]
 800b9f0:	005b      	lsls	r3, r3, #1
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	440b      	add	r3, r1
 800b9f8:	3237      	adds	r2, #55	; 0x37
 800b9fa:	b2d2      	uxtb	r2, r2
 800b9fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	011b      	lsls	r3, r3, #4
 800ba02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ba04:	7dfb      	ldrb	r3, [r7, #23]
 800ba06:	005b      	lsls	r3, r3, #1
 800ba08:	3301      	adds	r3, #1
 800ba0a:	68ba      	ldr	r2, [r7, #8]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	2200      	movs	r2, #0
 800ba10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ba12:	7dfb      	ldrb	r3, [r7, #23]
 800ba14:	3301      	adds	r3, #1
 800ba16:	75fb      	strb	r3, [r7, #23]
 800ba18:	7dfa      	ldrb	r2, [r7, #23]
 800ba1a:	79fb      	ldrb	r3, [r7, #7]
 800ba1c:	429a      	cmp	r2, r3
 800ba1e:	d3d3      	bcc.n	800b9c8 <IntToUnicode+0x18>
  }
}
 800ba20:	bf00      	nop
 800ba22:	bf00      	nop
 800ba24:	371c      	adds	r7, #28
 800ba26:	46bd      	mov	sp, r7
 800ba28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba2c:	4770      	bx	lr
	...

0800ba30 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b098      	sub	sp, #96	; 0x60
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800ba38:	f107 030c 	add.w	r3, r7, #12
 800ba3c:	2254      	movs	r2, #84	; 0x54
 800ba3e:	2100      	movs	r1, #0
 800ba40:	4618      	mov	r0, r3
 800ba42:	f000 fc18 	bl	800c276 <memset>
  if(pcdHandle->Instance==USB)
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	4a19      	ldr	r2, [pc, #100]	; (800bab0 <HAL_PCD_MspInit+0x80>)
 800ba4c:	4293      	cmp	r3, r2
 800ba4e:	d12a      	bne.n	800baa6 <HAL_PCD_MspInit+0x76>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ba50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ba54:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ba56:	2300      	movs	r3, #0
 800ba58:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800ba5a:	f107 030c 	add.w	r3, r7, #12
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7fa fd72 	bl	8006548 <HAL_RCCEx_PeriphCLKConfig>
 800ba64:	4603      	mov	r3, r0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d001      	beq.n	800ba6e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800ba6a:	f7f5 f8d7 	bl	8000c1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800ba6e:	4b11      	ldr	r3, [pc, #68]	; (800bab4 <HAL_PCD_MspInit+0x84>)
 800ba70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba72:	4a10      	ldr	r2, [pc, #64]	; (800bab4 <HAL_PCD_MspInit+0x84>)
 800ba74:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ba78:	6593      	str	r3, [r2, #88]	; 0x58
 800ba7a:	4b0e      	ldr	r3, [pc, #56]	; (800bab4 <HAL_PCD_MspInit+0x84>)
 800ba7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba82:	60bb      	str	r3, [r7, #8]
 800ba84:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800ba86:	2200      	movs	r2, #0
 800ba88:	2100      	movs	r1, #0
 800ba8a:	2013      	movs	r0, #19
 800ba8c:	f7f7 fb25 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800ba90:	2013      	movs	r0, #19
 800ba92:	f7f7 fb3c 	bl	800310e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800ba96:	2200      	movs	r2, #0
 800ba98:	2100      	movs	r1, #0
 800ba9a:	2014      	movs	r0, #20
 800ba9c:	f7f7 fb1d 	bl	80030da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800baa0:	2014      	movs	r0, #20
 800baa2:	f7f7 fb34 	bl	800310e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800baa6:	bf00      	nop
 800baa8:	3760      	adds	r7, #96	; 0x60
 800baaa:	46bd      	mov	sp, r7
 800baac:	bd80      	pop	{r7, pc}
 800baae:	bf00      	nop
 800bab0:	40005c00 	.word	0x40005c00
 800bab4:	40021000 	.word	0x40021000

0800bab8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bab8:	b580      	push	{r7, lr}
 800baba:	b082      	sub	sp, #8
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800bacc:	4619      	mov	r1, r3
 800bace:	4610      	mov	r0, r2
 800bad0:	f7fe fd50 	bl	800a574 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800bad4:	bf00      	nop
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b082      	sub	sp, #8
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	460b      	mov	r3, r1
 800bae6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800baee:	78fa      	ldrb	r2, [r7, #3]
 800baf0:	6879      	ldr	r1, [r7, #4]
 800baf2:	4613      	mov	r3, r2
 800baf4:	009b      	lsls	r3, r3, #2
 800baf6:	4413      	add	r3, r2
 800baf8:	00db      	lsls	r3, r3, #3
 800bafa:	440b      	add	r3, r1
 800bafc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bb00:	681a      	ldr	r2, [r3, #0]
 800bb02:	78fb      	ldrb	r3, [r7, #3]
 800bb04:	4619      	mov	r1, r3
 800bb06:	f7fe fd8a 	bl	800a61e <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800bb0a:	bf00      	nop
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b082      	sub	sp, #8
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800bb24:	78fa      	ldrb	r2, [r7, #3]
 800bb26:	6879      	ldr	r1, [r7, #4]
 800bb28:	4613      	mov	r3, r2
 800bb2a:	009b      	lsls	r3, r3, #2
 800bb2c:	4413      	add	r3, r2
 800bb2e:	00db      	lsls	r3, r3, #3
 800bb30:	440b      	add	r3, r1
 800bb32:	3324      	adds	r3, #36	; 0x24
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	78fb      	ldrb	r3, [r7, #3]
 800bb38:	4619      	mov	r1, r3
 800bb3a:	f7fe fdd3 	bl	800a6e4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800bb3e:	bf00      	nop
 800bb40:	3708      	adds	r7, #8
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}

0800bb46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb46:	b580      	push	{r7, lr}
 800bb48:	b082      	sub	sp, #8
 800bb4a:	af00      	add	r7, sp, #0
 800bb4c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bb54:	4618      	mov	r0, r3
 800bb56:	f7fe fee7 	bl	800a928 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800bb5a:	bf00      	nop
 800bb5c:	3708      	adds	r7, #8
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b084      	sub	sp, #16
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	795b      	ldrb	r3, [r3, #5]
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	d001      	beq.n	800bb7a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800bb76:	f7f5 f851 	bl	8000c1c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bb80:	7bfa      	ldrb	r2, [r7, #15]
 800bb82:	4611      	mov	r1, r2
 800bb84:	4618      	mov	r0, r3
 800bb86:	f7fe fe91 	bl	800a8ac <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fe fe3d 	bl	800a810 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800bb96:	bf00      	nop
 800bb98:	3710      	adds	r7, #16
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
	...

0800bba0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b082      	sub	sp, #8
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f7fe fe8c 	bl	800a8cc <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	7a5b      	ldrb	r3, [r3, #9]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d005      	beq.n	800bbc8 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bbbc:	4b04      	ldr	r3, [pc, #16]	; (800bbd0 <HAL_PCD_SuspendCallback+0x30>)
 800bbbe:	691b      	ldr	r3, [r3, #16]
 800bbc0:	4a03      	ldr	r2, [pc, #12]	; (800bbd0 <HAL_PCD_SuspendCallback+0x30>)
 800bbc2:	f043 0306 	orr.w	r3, r3, #6
 800bbc6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800bbc8:	bf00      	nop
 800bbca:	3708      	adds	r7, #8
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}
 800bbd0:	e000ed00 	.word	0xe000ed00

0800bbd4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b082      	sub	sp, #8
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	7a5b      	ldrb	r3, [r3, #9]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d007      	beq.n	800bbf4 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bbe4:	4b08      	ldr	r3, [pc, #32]	; (800bc08 <HAL_PCD_ResumeCallback+0x34>)
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	4a07      	ldr	r2, [pc, #28]	; (800bc08 <HAL_PCD_ResumeCallback+0x34>)
 800bbea:	f023 0306 	bic.w	r3, r3, #6
 800bbee:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800bbf0:	f000 f9f8 	bl	800bfe4 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	f7fe fe7c 	bl	800a8f8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800bc00:	bf00      	nop
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}
 800bc08:	e000ed00 	.word	0xe000ed00

0800bc0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b082      	sub	sp, #8
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800bc14:	4a2b      	ldr	r2, [pc, #172]	; (800bcc4 <USBD_LL_Init+0xb8>)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	4a29      	ldr	r2, [pc, #164]	; (800bcc4 <USBD_LL_Init+0xb8>)
 800bc20:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800bc24:	4b27      	ldr	r3, [pc, #156]	; (800bcc4 <USBD_LL_Init+0xb8>)
 800bc26:	4a28      	ldr	r2, [pc, #160]	; (800bcc8 <USBD_LL_Init+0xbc>)
 800bc28:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800bc2a:	4b26      	ldr	r3, [pc, #152]	; (800bcc4 <USBD_LL_Init+0xb8>)
 800bc2c:	2208      	movs	r2, #8
 800bc2e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800bc30:	4b24      	ldr	r3, [pc, #144]	; (800bcc4 <USBD_LL_Init+0xb8>)
 800bc32:	2202      	movs	r2, #2
 800bc34:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bc36:	4b23      	ldr	r3, [pc, #140]	; (800bcc4 <USBD_LL_Init+0xb8>)
 800bc38:	2202      	movs	r2, #2
 800bc3a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800bc3c:	4b21      	ldr	r3, [pc, #132]	; (800bcc4 <USBD_LL_Init+0xb8>)
 800bc3e:	2200      	movs	r2, #0
 800bc40:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800bc42:	4b20      	ldr	r3, [pc, #128]	; (800bcc4 <USBD_LL_Init+0xb8>)
 800bc44:	2200      	movs	r2, #0
 800bc46:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800bc48:	4b1e      	ldr	r3, [pc, #120]	; (800bcc4 <USBD_LL_Init+0xb8>)
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800bc4e:	4b1d      	ldr	r3, [pc, #116]	; (800bcc4 <USBD_LL_Init+0xb8>)
 800bc50:	2200      	movs	r2, #0
 800bc52:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800bc54:	481b      	ldr	r0, [pc, #108]	; (800bcc4 <USBD_LL_Init+0xb8>)
 800bc56:	f7f8 f98d 	bl	8003f74 <HAL_PCD_Init>
 800bc5a:	4603      	mov	r3, r0
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d001      	beq.n	800bc64 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800bc60:	f7f4 ffdc 	bl	8000c1c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc6a:	2318      	movs	r3, #24
 800bc6c:	2200      	movs	r2, #0
 800bc6e:	2100      	movs	r1, #0
 800bc70:	f7f9 fe47 	bl	8005902 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc7a:	2358      	movs	r3, #88	; 0x58
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	2180      	movs	r1, #128	; 0x80
 800bc80:	f7f9 fe3f 	bl	8005902 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc8a:	23c0      	movs	r3, #192	; 0xc0
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	2181      	movs	r1, #129	; 0x81
 800bc90:	f7f9 fe37 	bl	8005902 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc9a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bc9e:	2200      	movs	r2, #0
 800bca0:	2101      	movs	r1, #1
 800bca2:	f7f9 fe2e 	bl	8005902 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bcac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	2182      	movs	r1, #130	; 0x82
 800bcb4:	f7f9 fe25 	bl	8005902 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800bcb8:	2300      	movs	r3, #0
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3708      	adds	r7, #8
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	bd80      	pop	{r7, pc}
 800bcc2:	bf00      	nop
 800bcc4:	20005994 	.word	0x20005994
 800bcc8:	40005c00 	.word	0x40005c00

0800bccc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bce2:	4618      	mov	r0, r3
 800bce4:	f7f8 fa14 	bl	8004110 <HAL_PCD_Start>
 800bce8:	4603      	mov	r3, r0
 800bcea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bcec:	7bfb      	ldrb	r3, [r7, #15]
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f000 f97e 	bl	800bff0 <USBD_Get_USB_Status>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bcf8:	7bbb      	ldrb	r3, [r7, #14]
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3710      	adds	r7, #16
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}

0800bd02 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800bd02:	b580      	push	{r7, lr}
 800bd04:	b084      	sub	sp, #16
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
 800bd0a:	4608      	mov	r0, r1
 800bd0c:	4611      	mov	r1, r2
 800bd0e:	461a      	mov	r2, r3
 800bd10:	4603      	mov	r3, r0
 800bd12:	70fb      	strb	r3, [r7, #3]
 800bd14:	460b      	mov	r3, r1
 800bd16:	70bb      	strb	r3, [r7, #2]
 800bd18:	4613      	mov	r3, r2
 800bd1a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd20:	2300      	movs	r3, #0
 800bd22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bd2a:	78bb      	ldrb	r3, [r7, #2]
 800bd2c:	883a      	ldrh	r2, [r7, #0]
 800bd2e:	78f9      	ldrb	r1, [r7, #3]
 800bd30:	f7f8 fb5b 	bl	80043ea <HAL_PCD_EP_Open>
 800bd34:	4603      	mov	r3, r0
 800bd36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd38:	7bfb      	ldrb	r3, [r7, #15]
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	f000 f958 	bl	800bff0 <USBD_Get_USB_Status>
 800bd40:	4603      	mov	r3, r0
 800bd42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd44:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	3710      	adds	r7, #16
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}

0800bd4e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd4e:	b580      	push	{r7, lr}
 800bd50:	b084      	sub	sp, #16
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	6078      	str	r0, [r7, #4]
 800bd56:	460b      	mov	r3, r1
 800bd58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bd68:	78fa      	ldrb	r2, [r7, #3]
 800bd6a:	4611      	mov	r1, r2
 800bd6c:	4618      	mov	r0, r3
 800bd6e:	f7f8 fb99 	bl	80044a4 <HAL_PCD_EP_Close>
 800bd72:	4603      	mov	r3, r0
 800bd74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bd76:	7bfb      	ldrb	r3, [r7, #15]
 800bd78:	4618      	mov	r0, r3
 800bd7a:	f000 f939 	bl	800bff0 <USBD_Get_USB_Status>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bd82:	7bbb      	ldrb	r3, [r7, #14]
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	3710      	adds	r7, #16
 800bd88:	46bd      	mov	sp, r7
 800bd8a:	bd80      	pop	{r7, pc}

0800bd8c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	b084      	sub	sp, #16
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
 800bd94:	460b      	mov	r3, r1
 800bd96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bda6:	78fa      	ldrb	r2, [r7, #3]
 800bda8:	4611      	mov	r1, r2
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7f8 fc42 	bl	8004634 <HAL_PCD_EP_SetStall>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdb4:	7bfb      	ldrb	r3, [r7, #15]
 800bdb6:	4618      	mov	r0, r3
 800bdb8:	f000 f91a 	bl	800bff0 <USBD_Get_USB_Status>
 800bdbc:	4603      	mov	r3, r0
 800bdbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdc0:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3710      	adds	r7, #16
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b084      	sub	sp, #16
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bdda:	2300      	movs	r3, #0
 800bddc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bde4:	78fa      	ldrb	r2, [r7, #3]
 800bde6:	4611      	mov	r1, r2
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7f8 fc75 	bl	80046d8 <HAL_PCD_EP_ClrStall>
 800bdee:	4603      	mov	r3, r0
 800bdf0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bdf2:	7bfb      	ldrb	r3, [r7, #15]
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	f000 f8fb 	bl	800bff0 <USBD_Get_USB_Status>
 800bdfa:	4603      	mov	r3, r0
 800bdfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdfe:	7bbb      	ldrb	r3, [r7, #14]
}
 800be00:	4618      	mov	r0, r3
 800be02:	3710      	adds	r7, #16
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800be08:	b480      	push	{r7}
 800be0a:	b085      	sub	sp, #20
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	460b      	mov	r3, r1
 800be12:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be1a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800be1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800be20:	2b00      	cmp	r3, #0
 800be22:	da0b      	bge.n	800be3c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800be24:	78fb      	ldrb	r3, [r7, #3]
 800be26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be2a:	68f9      	ldr	r1, [r7, #12]
 800be2c:	4613      	mov	r3, r2
 800be2e:	009b      	lsls	r3, r3, #2
 800be30:	4413      	add	r3, r2
 800be32:	00db      	lsls	r3, r3, #3
 800be34:	440b      	add	r3, r1
 800be36:	3312      	adds	r3, #18
 800be38:	781b      	ldrb	r3, [r3, #0]
 800be3a:	e00b      	b.n	800be54 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800be3c:	78fb      	ldrb	r3, [r7, #3]
 800be3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800be42:	68f9      	ldr	r1, [r7, #12]
 800be44:	4613      	mov	r3, r2
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	4413      	add	r3, r2
 800be4a:	00db      	lsls	r3, r3, #3
 800be4c:	440b      	add	r3, r1
 800be4e:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800be52:	781b      	ldrb	r3, [r3, #0]
  }
}
 800be54:	4618      	mov	r0, r3
 800be56:	3714      	adds	r7, #20
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr

0800be60 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
 800be68:	460b      	mov	r3, r1
 800be6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be6c:	2300      	movs	r3, #0
 800be6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800be70:	2300      	movs	r3, #0
 800be72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800be7a:	78fa      	ldrb	r2, [r7, #3]
 800be7c:	4611      	mov	r1, r2
 800be7e:	4618      	mov	r0, r3
 800be80:	f7f8 fa8f 	bl	80043a2 <HAL_PCD_SetAddress>
 800be84:	4603      	mov	r3, r0
 800be86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800be88:	7bfb      	ldrb	r3, [r7, #15]
 800be8a:	4618      	mov	r0, r3
 800be8c:	f000 f8b0 	bl	800bff0 <USBD_Get_USB_Status>
 800be90:	4603      	mov	r3, r0
 800be92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be94:	7bbb      	ldrb	r3, [r7, #14]
}
 800be96:	4618      	mov	r0, r3
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}

0800be9e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800be9e:	b580      	push	{r7, lr}
 800bea0:	b086      	sub	sp, #24
 800bea2:	af00      	add	r7, sp, #0
 800bea4:	60f8      	str	r0, [r7, #12]
 800bea6:	607a      	str	r2, [r7, #4]
 800bea8:	603b      	str	r3, [r7, #0]
 800beaa:	460b      	mov	r3, r1
 800beac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800beae:	2300      	movs	r3, #0
 800beb0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800beb2:	2300      	movs	r3, #0
 800beb4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bebc:	7af9      	ldrb	r1, [r7, #11]
 800bebe:	683b      	ldr	r3, [r7, #0]
 800bec0:	687a      	ldr	r2, [r7, #4]
 800bec2:	f7f8 fb80 	bl	80045c6 <HAL_PCD_EP_Transmit>
 800bec6:	4603      	mov	r3, r0
 800bec8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800beca:	7dfb      	ldrb	r3, [r7, #23]
 800becc:	4618      	mov	r0, r3
 800bece:	f000 f88f 	bl	800bff0 <USBD_Get_USB_Status>
 800bed2:	4603      	mov	r3, r0
 800bed4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bed6:	7dbb      	ldrb	r3, [r7, #22]
}
 800bed8:	4618      	mov	r0, r3
 800beda:	3718      	adds	r7, #24
 800bedc:	46bd      	mov	sp, r7
 800bede:	bd80      	pop	{r7, pc}

0800bee0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b086      	sub	sp, #24
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	60f8      	str	r0, [r7, #12]
 800bee8:	607a      	str	r2, [r7, #4]
 800beea:	603b      	str	r3, [r7, #0]
 800beec:	460b      	mov	r3, r1
 800beee:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bef0:	2300      	movs	r3, #0
 800bef2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bef4:	2300      	movs	r3, #0
 800bef6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800befe:	7af9      	ldrb	r1, [r7, #11]
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	687a      	ldr	r2, [r7, #4]
 800bf04:	f7f8 fb16 	bl	8004534 <HAL_PCD_EP_Receive>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bf0c:	7dfb      	ldrb	r3, [r7, #23]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f000 f86e 	bl	800bff0 <USBD_Get_USB_Status>
 800bf14:	4603      	mov	r3, r0
 800bf16:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bf18:	7dbb      	ldrb	r3, [r7, #22]
}
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	3718      	adds	r7, #24
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}

0800bf22 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bf22:	b580      	push	{r7, lr}
 800bf24:	b082      	sub	sp, #8
 800bf26:	af00      	add	r7, sp, #0
 800bf28:	6078      	str	r0, [r7, #4]
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf34:	78fa      	ldrb	r2, [r7, #3]
 800bf36:	4611      	mov	r1, r2
 800bf38:	4618      	mov	r0, r3
 800bf3a:	f7f8 fb2c 	bl	8004596 <HAL_PCD_EP_GetRxCount>
 800bf3e:	4603      	mov	r3, r0
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3708      	adds	r7, #8
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b082      	sub	sp, #8
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	460b      	mov	r3, r1
 800bf52:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800bf54:	78fb      	ldrb	r3, [r7, #3]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d002      	beq.n	800bf60 <HAL_PCDEx_LPM_Callback+0x18>
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d013      	beq.n	800bf86 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800bf5e:	e023      	b.n	800bfa8 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	7a5b      	ldrb	r3, [r3, #9]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d007      	beq.n	800bf78 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bf68:	f000 f83c 	bl	800bfe4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf6c:	4b10      	ldr	r3, [pc, #64]	; (800bfb0 <HAL_PCDEx_LPM_Callback+0x68>)
 800bf6e:	691b      	ldr	r3, [r3, #16]
 800bf70:	4a0f      	ldr	r2, [pc, #60]	; (800bfb0 <HAL_PCDEx_LPM_Callback+0x68>)
 800bf72:	f023 0306 	bic.w	r3, r3, #6
 800bf76:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bf7e:	4618      	mov	r0, r3
 800bf80:	f7fe fcba 	bl	800a8f8 <USBD_LL_Resume>
    break;
 800bf84:	e010      	b.n	800bfa8 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	f7fe fc9d 	bl	800a8cc <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	7a5b      	ldrb	r3, [r3, #9]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d005      	beq.n	800bfa6 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf9a:	4b05      	ldr	r3, [pc, #20]	; (800bfb0 <HAL_PCDEx_LPM_Callback+0x68>)
 800bf9c:	691b      	ldr	r3, [r3, #16]
 800bf9e:	4a04      	ldr	r2, [pc, #16]	; (800bfb0 <HAL_PCDEx_LPM_Callback+0x68>)
 800bfa0:	f043 0306 	orr.w	r3, r3, #6
 800bfa4:	6113      	str	r3, [r2, #16]
    break;
 800bfa6:	bf00      	nop
}
 800bfa8:	bf00      	nop
 800bfaa:	3708      	adds	r7, #8
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}
 800bfb0:	e000ed00 	.word	0xe000ed00

0800bfb4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b083      	sub	sp, #12
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bfbc:	4b03      	ldr	r3, [pc, #12]	; (800bfcc <USBD_static_malloc+0x18>)
}
 800bfbe:	4618      	mov	r0, r3
 800bfc0:	370c      	adds	r7, #12
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc8:	4770      	bx	lr
 800bfca:	bf00      	nop
 800bfcc:	20005c70 	.word	0x20005c70

0800bfd0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bfd0:	b480      	push	{r7}
 800bfd2:	b083      	sub	sp, #12
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]

}
 800bfd8:	bf00      	nop
 800bfda:	370c      	adds	r7, #12
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr

0800bfe4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bfe8:	f7f4 f9d6 	bl	8000398 <SystemClock_Config>
}
 800bfec:	bf00      	nop
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bff0:	b480      	push	{r7}
 800bff2:	b085      	sub	sp, #20
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	4603      	mov	r3, r0
 800bff8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bffa:	2300      	movs	r3, #0
 800bffc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bffe:	79fb      	ldrb	r3, [r7, #7]
 800c000:	2b03      	cmp	r3, #3
 800c002:	d817      	bhi.n	800c034 <USBD_Get_USB_Status+0x44>
 800c004:	a201      	add	r2, pc, #4	; (adr r2, 800c00c <USBD_Get_USB_Status+0x1c>)
 800c006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c00a:	bf00      	nop
 800c00c:	0800c01d 	.word	0x0800c01d
 800c010:	0800c023 	.word	0x0800c023
 800c014:	0800c029 	.word	0x0800c029
 800c018:	0800c02f 	.word	0x0800c02f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c01c:	2300      	movs	r3, #0
 800c01e:	73fb      	strb	r3, [r7, #15]
    break;
 800c020:	e00b      	b.n	800c03a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c022:	2303      	movs	r3, #3
 800c024:	73fb      	strb	r3, [r7, #15]
    break;
 800c026:	e008      	b.n	800c03a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c028:	2301      	movs	r3, #1
 800c02a:	73fb      	strb	r3, [r7, #15]
    break;
 800c02c:	e005      	b.n	800c03a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c02e:	2303      	movs	r3, #3
 800c030:	73fb      	strb	r3, [r7, #15]
    break;
 800c032:	e002      	b.n	800c03a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c034:	2303      	movs	r3, #3
 800c036:	73fb      	strb	r3, [r7, #15]
    break;
 800c038:	bf00      	nop
  }
  return usb_status;
 800c03a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c03c:	4618      	mov	r0, r3
 800c03e:	3714      	adds	r7, #20
 800c040:	46bd      	mov	sp, r7
 800c042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c046:	4770      	bx	lr

0800c048 <std>:
 800c048:	2300      	movs	r3, #0
 800c04a:	b510      	push	{r4, lr}
 800c04c:	4604      	mov	r4, r0
 800c04e:	e9c0 3300 	strd	r3, r3, [r0]
 800c052:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c056:	6083      	str	r3, [r0, #8]
 800c058:	8181      	strh	r1, [r0, #12]
 800c05a:	6643      	str	r3, [r0, #100]	; 0x64
 800c05c:	81c2      	strh	r2, [r0, #14]
 800c05e:	6183      	str	r3, [r0, #24]
 800c060:	4619      	mov	r1, r3
 800c062:	2208      	movs	r2, #8
 800c064:	305c      	adds	r0, #92	; 0x5c
 800c066:	f000 f906 	bl	800c276 <memset>
 800c06a:	4b0d      	ldr	r3, [pc, #52]	; (800c0a0 <std+0x58>)
 800c06c:	6263      	str	r3, [r4, #36]	; 0x24
 800c06e:	4b0d      	ldr	r3, [pc, #52]	; (800c0a4 <std+0x5c>)
 800c070:	62a3      	str	r3, [r4, #40]	; 0x28
 800c072:	4b0d      	ldr	r3, [pc, #52]	; (800c0a8 <std+0x60>)
 800c074:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c076:	4b0d      	ldr	r3, [pc, #52]	; (800c0ac <std+0x64>)
 800c078:	6323      	str	r3, [r4, #48]	; 0x30
 800c07a:	4b0d      	ldr	r3, [pc, #52]	; (800c0b0 <std+0x68>)
 800c07c:	6224      	str	r4, [r4, #32]
 800c07e:	429c      	cmp	r4, r3
 800c080:	d006      	beq.n	800c090 <std+0x48>
 800c082:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c086:	4294      	cmp	r4, r2
 800c088:	d002      	beq.n	800c090 <std+0x48>
 800c08a:	33d0      	adds	r3, #208	; 0xd0
 800c08c:	429c      	cmp	r4, r3
 800c08e:	d105      	bne.n	800c09c <std+0x54>
 800c090:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c098:	f000 b966 	b.w	800c368 <__retarget_lock_init_recursive>
 800c09c:	bd10      	pop	{r4, pc}
 800c09e:	bf00      	nop
 800c0a0:	0800c1f1 	.word	0x0800c1f1
 800c0a4:	0800c213 	.word	0x0800c213
 800c0a8:	0800c24b 	.word	0x0800c24b
 800c0ac:	0800c26f 	.word	0x0800c26f
 800c0b0:	20005e90 	.word	0x20005e90

0800c0b4 <stdio_exit_handler>:
 800c0b4:	4a02      	ldr	r2, [pc, #8]	; (800c0c0 <stdio_exit_handler+0xc>)
 800c0b6:	4903      	ldr	r1, [pc, #12]	; (800c0c4 <stdio_exit_handler+0x10>)
 800c0b8:	4803      	ldr	r0, [pc, #12]	; (800c0c8 <stdio_exit_handler+0x14>)
 800c0ba:	f000 b869 	b.w	800c190 <_fwalk_sglue>
 800c0be:	bf00      	nop
 800c0c0:	20000184 	.word	0x20000184
 800c0c4:	0800cc15 	.word	0x0800cc15
 800c0c8:	20000190 	.word	0x20000190

0800c0cc <cleanup_stdio>:
 800c0cc:	6841      	ldr	r1, [r0, #4]
 800c0ce:	4b0c      	ldr	r3, [pc, #48]	; (800c100 <cleanup_stdio+0x34>)
 800c0d0:	4299      	cmp	r1, r3
 800c0d2:	b510      	push	{r4, lr}
 800c0d4:	4604      	mov	r4, r0
 800c0d6:	d001      	beq.n	800c0dc <cleanup_stdio+0x10>
 800c0d8:	f000 fd9c 	bl	800cc14 <_fflush_r>
 800c0dc:	68a1      	ldr	r1, [r4, #8]
 800c0de:	4b09      	ldr	r3, [pc, #36]	; (800c104 <cleanup_stdio+0x38>)
 800c0e0:	4299      	cmp	r1, r3
 800c0e2:	d002      	beq.n	800c0ea <cleanup_stdio+0x1e>
 800c0e4:	4620      	mov	r0, r4
 800c0e6:	f000 fd95 	bl	800cc14 <_fflush_r>
 800c0ea:	68e1      	ldr	r1, [r4, #12]
 800c0ec:	4b06      	ldr	r3, [pc, #24]	; (800c108 <cleanup_stdio+0x3c>)
 800c0ee:	4299      	cmp	r1, r3
 800c0f0:	d004      	beq.n	800c0fc <cleanup_stdio+0x30>
 800c0f2:	4620      	mov	r0, r4
 800c0f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c0f8:	f000 bd8c 	b.w	800cc14 <_fflush_r>
 800c0fc:	bd10      	pop	{r4, pc}
 800c0fe:	bf00      	nop
 800c100:	20005e90 	.word	0x20005e90
 800c104:	20005ef8 	.word	0x20005ef8
 800c108:	20005f60 	.word	0x20005f60

0800c10c <global_stdio_init.part.0>:
 800c10c:	b510      	push	{r4, lr}
 800c10e:	4b0b      	ldr	r3, [pc, #44]	; (800c13c <global_stdio_init.part.0+0x30>)
 800c110:	4c0b      	ldr	r4, [pc, #44]	; (800c140 <global_stdio_init.part.0+0x34>)
 800c112:	4a0c      	ldr	r2, [pc, #48]	; (800c144 <global_stdio_init.part.0+0x38>)
 800c114:	601a      	str	r2, [r3, #0]
 800c116:	4620      	mov	r0, r4
 800c118:	2200      	movs	r2, #0
 800c11a:	2104      	movs	r1, #4
 800c11c:	f7ff ff94 	bl	800c048 <std>
 800c120:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c124:	2201      	movs	r2, #1
 800c126:	2109      	movs	r1, #9
 800c128:	f7ff ff8e 	bl	800c048 <std>
 800c12c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c130:	2202      	movs	r2, #2
 800c132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c136:	2112      	movs	r1, #18
 800c138:	f7ff bf86 	b.w	800c048 <std>
 800c13c:	20005fc8 	.word	0x20005fc8
 800c140:	20005e90 	.word	0x20005e90
 800c144:	0800c0b5 	.word	0x0800c0b5

0800c148 <__sfp_lock_acquire>:
 800c148:	4801      	ldr	r0, [pc, #4]	; (800c150 <__sfp_lock_acquire+0x8>)
 800c14a:	f000 b90e 	b.w	800c36a <__retarget_lock_acquire_recursive>
 800c14e:	bf00      	nop
 800c150:	20005fd1 	.word	0x20005fd1

0800c154 <__sfp_lock_release>:
 800c154:	4801      	ldr	r0, [pc, #4]	; (800c15c <__sfp_lock_release+0x8>)
 800c156:	f000 b909 	b.w	800c36c <__retarget_lock_release_recursive>
 800c15a:	bf00      	nop
 800c15c:	20005fd1 	.word	0x20005fd1

0800c160 <__sinit>:
 800c160:	b510      	push	{r4, lr}
 800c162:	4604      	mov	r4, r0
 800c164:	f7ff fff0 	bl	800c148 <__sfp_lock_acquire>
 800c168:	6a23      	ldr	r3, [r4, #32]
 800c16a:	b11b      	cbz	r3, 800c174 <__sinit+0x14>
 800c16c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c170:	f7ff bff0 	b.w	800c154 <__sfp_lock_release>
 800c174:	4b04      	ldr	r3, [pc, #16]	; (800c188 <__sinit+0x28>)
 800c176:	6223      	str	r3, [r4, #32]
 800c178:	4b04      	ldr	r3, [pc, #16]	; (800c18c <__sinit+0x2c>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d1f5      	bne.n	800c16c <__sinit+0xc>
 800c180:	f7ff ffc4 	bl	800c10c <global_stdio_init.part.0>
 800c184:	e7f2      	b.n	800c16c <__sinit+0xc>
 800c186:	bf00      	nop
 800c188:	0800c0cd 	.word	0x0800c0cd
 800c18c:	20005fc8 	.word	0x20005fc8

0800c190 <_fwalk_sglue>:
 800c190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c194:	4607      	mov	r7, r0
 800c196:	4688      	mov	r8, r1
 800c198:	4614      	mov	r4, r2
 800c19a:	2600      	movs	r6, #0
 800c19c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c1a0:	f1b9 0901 	subs.w	r9, r9, #1
 800c1a4:	d505      	bpl.n	800c1b2 <_fwalk_sglue+0x22>
 800c1a6:	6824      	ldr	r4, [r4, #0]
 800c1a8:	2c00      	cmp	r4, #0
 800c1aa:	d1f7      	bne.n	800c19c <_fwalk_sglue+0xc>
 800c1ac:	4630      	mov	r0, r6
 800c1ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1b2:	89ab      	ldrh	r3, [r5, #12]
 800c1b4:	2b01      	cmp	r3, #1
 800c1b6:	d907      	bls.n	800c1c8 <_fwalk_sglue+0x38>
 800c1b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c1bc:	3301      	adds	r3, #1
 800c1be:	d003      	beq.n	800c1c8 <_fwalk_sglue+0x38>
 800c1c0:	4629      	mov	r1, r5
 800c1c2:	4638      	mov	r0, r7
 800c1c4:	47c0      	blx	r8
 800c1c6:	4306      	orrs	r6, r0
 800c1c8:	3568      	adds	r5, #104	; 0x68
 800c1ca:	e7e9      	b.n	800c1a0 <_fwalk_sglue+0x10>

0800c1cc <iprintf>:
 800c1cc:	b40f      	push	{r0, r1, r2, r3}
 800c1ce:	b507      	push	{r0, r1, r2, lr}
 800c1d0:	4906      	ldr	r1, [pc, #24]	; (800c1ec <iprintf+0x20>)
 800c1d2:	ab04      	add	r3, sp, #16
 800c1d4:	6808      	ldr	r0, [r1, #0]
 800c1d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c1da:	6881      	ldr	r1, [r0, #8]
 800c1dc:	9301      	str	r3, [sp, #4]
 800c1de:	f000 f9e9 	bl	800c5b4 <_vfiprintf_r>
 800c1e2:	b003      	add	sp, #12
 800c1e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c1e8:	b004      	add	sp, #16
 800c1ea:	4770      	bx	lr
 800c1ec:	200001dc 	.word	0x200001dc

0800c1f0 <__sread>:
 800c1f0:	b510      	push	{r4, lr}
 800c1f2:	460c      	mov	r4, r1
 800c1f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1f8:	f000 f868 	bl	800c2cc <_read_r>
 800c1fc:	2800      	cmp	r0, #0
 800c1fe:	bfab      	itete	ge
 800c200:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c202:	89a3      	ldrhlt	r3, [r4, #12]
 800c204:	181b      	addge	r3, r3, r0
 800c206:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c20a:	bfac      	ite	ge
 800c20c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c20e:	81a3      	strhlt	r3, [r4, #12]
 800c210:	bd10      	pop	{r4, pc}

0800c212 <__swrite>:
 800c212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c216:	461f      	mov	r7, r3
 800c218:	898b      	ldrh	r3, [r1, #12]
 800c21a:	05db      	lsls	r3, r3, #23
 800c21c:	4605      	mov	r5, r0
 800c21e:	460c      	mov	r4, r1
 800c220:	4616      	mov	r6, r2
 800c222:	d505      	bpl.n	800c230 <__swrite+0x1e>
 800c224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c228:	2302      	movs	r3, #2
 800c22a:	2200      	movs	r2, #0
 800c22c:	f000 f83c 	bl	800c2a8 <_lseek_r>
 800c230:	89a3      	ldrh	r3, [r4, #12]
 800c232:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c236:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c23a:	81a3      	strh	r3, [r4, #12]
 800c23c:	4632      	mov	r2, r6
 800c23e:	463b      	mov	r3, r7
 800c240:	4628      	mov	r0, r5
 800c242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c246:	f000 b853 	b.w	800c2f0 <_write_r>

0800c24a <__sseek>:
 800c24a:	b510      	push	{r4, lr}
 800c24c:	460c      	mov	r4, r1
 800c24e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c252:	f000 f829 	bl	800c2a8 <_lseek_r>
 800c256:	1c43      	adds	r3, r0, #1
 800c258:	89a3      	ldrh	r3, [r4, #12]
 800c25a:	bf15      	itete	ne
 800c25c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c25e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c262:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c266:	81a3      	strheq	r3, [r4, #12]
 800c268:	bf18      	it	ne
 800c26a:	81a3      	strhne	r3, [r4, #12]
 800c26c:	bd10      	pop	{r4, pc}

0800c26e <__sclose>:
 800c26e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c272:	f000 b809 	b.w	800c288 <_close_r>

0800c276 <memset>:
 800c276:	4402      	add	r2, r0
 800c278:	4603      	mov	r3, r0
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d100      	bne.n	800c280 <memset+0xa>
 800c27e:	4770      	bx	lr
 800c280:	f803 1b01 	strb.w	r1, [r3], #1
 800c284:	e7f9      	b.n	800c27a <memset+0x4>
	...

0800c288 <_close_r>:
 800c288:	b538      	push	{r3, r4, r5, lr}
 800c28a:	4d06      	ldr	r5, [pc, #24]	; (800c2a4 <_close_r+0x1c>)
 800c28c:	2300      	movs	r3, #0
 800c28e:	4604      	mov	r4, r0
 800c290:	4608      	mov	r0, r1
 800c292:	602b      	str	r3, [r5, #0]
 800c294:	f7f5 f86b 	bl	800136e <_close>
 800c298:	1c43      	adds	r3, r0, #1
 800c29a:	d102      	bne.n	800c2a2 <_close_r+0x1a>
 800c29c:	682b      	ldr	r3, [r5, #0]
 800c29e:	b103      	cbz	r3, 800c2a2 <_close_r+0x1a>
 800c2a0:	6023      	str	r3, [r4, #0]
 800c2a2:	bd38      	pop	{r3, r4, r5, pc}
 800c2a4:	20005fcc 	.word	0x20005fcc

0800c2a8 <_lseek_r>:
 800c2a8:	b538      	push	{r3, r4, r5, lr}
 800c2aa:	4d07      	ldr	r5, [pc, #28]	; (800c2c8 <_lseek_r+0x20>)
 800c2ac:	4604      	mov	r4, r0
 800c2ae:	4608      	mov	r0, r1
 800c2b0:	4611      	mov	r1, r2
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	602a      	str	r2, [r5, #0]
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	f7f5 f880 	bl	80013bc <_lseek>
 800c2bc:	1c43      	adds	r3, r0, #1
 800c2be:	d102      	bne.n	800c2c6 <_lseek_r+0x1e>
 800c2c0:	682b      	ldr	r3, [r5, #0]
 800c2c2:	b103      	cbz	r3, 800c2c6 <_lseek_r+0x1e>
 800c2c4:	6023      	str	r3, [r4, #0]
 800c2c6:	bd38      	pop	{r3, r4, r5, pc}
 800c2c8:	20005fcc 	.word	0x20005fcc

0800c2cc <_read_r>:
 800c2cc:	b538      	push	{r3, r4, r5, lr}
 800c2ce:	4d07      	ldr	r5, [pc, #28]	; (800c2ec <_read_r+0x20>)
 800c2d0:	4604      	mov	r4, r0
 800c2d2:	4608      	mov	r0, r1
 800c2d4:	4611      	mov	r1, r2
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	602a      	str	r2, [r5, #0]
 800c2da:	461a      	mov	r2, r3
 800c2dc:	f7f5 f80e 	bl	80012fc <_read>
 800c2e0:	1c43      	adds	r3, r0, #1
 800c2e2:	d102      	bne.n	800c2ea <_read_r+0x1e>
 800c2e4:	682b      	ldr	r3, [r5, #0]
 800c2e6:	b103      	cbz	r3, 800c2ea <_read_r+0x1e>
 800c2e8:	6023      	str	r3, [r4, #0]
 800c2ea:	bd38      	pop	{r3, r4, r5, pc}
 800c2ec:	20005fcc 	.word	0x20005fcc

0800c2f0 <_write_r>:
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	4d07      	ldr	r5, [pc, #28]	; (800c310 <_write_r+0x20>)
 800c2f4:	4604      	mov	r4, r0
 800c2f6:	4608      	mov	r0, r1
 800c2f8:	4611      	mov	r1, r2
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	602a      	str	r2, [r5, #0]
 800c2fe:	461a      	mov	r2, r3
 800c300:	f7f5 f819 	bl	8001336 <_write>
 800c304:	1c43      	adds	r3, r0, #1
 800c306:	d102      	bne.n	800c30e <_write_r+0x1e>
 800c308:	682b      	ldr	r3, [r5, #0]
 800c30a:	b103      	cbz	r3, 800c30e <_write_r+0x1e>
 800c30c:	6023      	str	r3, [r4, #0]
 800c30e:	bd38      	pop	{r3, r4, r5, pc}
 800c310:	20005fcc 	.word	0x20005fcc

0800c314 <__errno>:
 800c314:	4b01      	ldr	r3, [pc, #4]	; (800c31c <__errno+0x8>)
 800c316:	6818      	ldr	r0, [r3, #0]
 800c318:	4770      	bx	lr
 800c31a:	bf00      	nop
 800c31c:	200001dc 	.word	0x200001dc

0800c320 <__libc_init_array>:
 800c320:	b570      	push	{r4, r5, r6, lr}
 800c322:	4d0d      	ldr	r5, [pc, #52]	; (800c358 <__libc_init_array+0x38>)
 800c324:	4c0d      	ldr	r4, [pc, #52]	; (800c35c <__libc_init_array+0x3c>)
 800c326:	1b64      	subs	r4, r4, r5
 800c328:	10a4      	asrs	r4, r4, #2
 800c32a:	2600      	movs	r6, #0
 800c32c:	42a6      	cmp	r6, r4
 800c32e:	d109      	bne.n	800c344 <__libc_init_array+0x24>
 800c330:	4d0b      	ldr	r5, [pc, #44]	; (800c360 <__libc_init_array+0x40>)
 800c332:	4c0c      	ldr	r4, [pc, #48]	; (800c364 <__libc_init_array+0x44>)
 800c334:	f000 fdc0 	bl	800ceb8 <_init>
 800c338:	1b64      	subs	r4, r4, r5
 800c33a:	10a4      	asrs	r4, r4, #2
 800c33c:	2600      	movs	r6, #0
 800c33e:	42a6      	cmp	r6, r4
 800c340:	d105      	bne.n	800c34e <__libc_init_array+0x2e>
 800c342:	bd70      	pop	{r4, r5, r6, pc}
 800c344:	f855 3b04 	ldr.w	r3, [r5], #4
 800c348:	4798      	blx	r3
 800c34a:	3601      	adds	r6, #1
 800c34c:	e7ee      	b.n	800c32c <__libc_init_array+0xc>
 800c34e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c352:	4798      	blx	r3
 800c354:	3601      	adds	r6, #1
 800c356:	e7f2      	b.n	800c33e <__libc_init_array+0x1e>
 800c358:	0800cf68 	.word	0x0800cf68
 800c35c:	0800cf68 	.word	0x0800cf68
 800c360:	0800cf68 	.word	0x0800cf68
 800c364:	0800cf6c 	.word	0x0800cf6c

0800c368 <__retarget_lock_init_recursive>:
 800c368:	4770      	bx	lr

0800c36a <__retarget_lock_acquire_recursive>:
 800c36a:	4770      	bx	lr

0800c36c <__retarget_lock_release_recursive>:
 800c36c:	4770      	bx	lr
	...

0800c370 <_free_r>:
 800c370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c372:	2900      	cmp	r1, #0
 800c374:	d044      	beq.n	800c400 <_free_r+0x90>
 800c376:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c37a:	9001      	str	r0, [sp, #4]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	f1a1 0404 	sub.w	r4, r1, #4
 800c382:	bfb8      	it	lt
 800c384:	18e4      	addlt	r4, r4, r3
 800c386:	f000 f8df 	bl	800c548 <__malloc_lock>
 800c38a:	4a1e      	ldr	r2, [pc, #120]	; (800c404 <_free_r+0x94>)
 800c38c:	9801      	ldr	r0, [sp, #4]
 800c38e:	6813      	ldr	r3, [r2, #0]
 800c390:	b933      	cbnz	r3, 800c3a0 <_free_r+0x30>
 800c392:	6063      	str	r3, [r4, #4]
 800c394:	6014      	str	r4, [r2, #0]
 800c396:	b003      	add	sp, #12
 800c398:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c39c:	f000 b8da 	b.w	800c554 <__malloc_unlock>
 800c3a0:	42a3      	cmp	r3, r4
 800c3a2:	d908      	bls.n	800c3b6 <_free_r+0x46>
 800c3a4:	6825      	ldr	r5, [r4, #0]
 800c3a6:	1961      	adds	r1, r4, r5
 800c3a8:	428b      	cmp	r3, r1
 800c3aa:	bf01      	itttt	eq
 800c3ac:	6819      	ldreq	r1, [r3, #0]
 800c3ae:	685b      	ldreq	r3, [r3, #4]
 800c3b0:	1949      	addeq	r1, r1, r5
 800c3b2:	6021      	streq	r1, [r4, #0]
 800c3b4:	e7ed      	b.n	800c392 <_free_r+0x22>
 800c3b6:	461a      	mov	r2, r3
 800c3b8:	685b      	ldr	r3, [r3, #4]
 800c3ba:	b10b      	cbz	r3, 800c3c0 <_free_r+0x50>
 800c3bc:	42a3      	cmp	r3, r4
 800c3be:	d9fa      	bls.n	800c3b6 <_free_r+0x46>
 800c3c0:	6811      	ldr	r1, [r2, #0]
 800c3c2:	1855      	adds	r5, r2, r1
 800c3c4:	42a5      	cmp	r5, r4
 800c3c6:	d10b      	bne.n	800c3e0 <_free_r+0x70>
 800c3c8:	6824      	ldr	r4, [r4, #0]
 800c3ca:	4421      	add	r1, r4
 800c3cc:	1854      	adds	r4, r2, r1
 800c3ce:	42a3      	cmp	r3, r4
 800c3d0:	6011      	str	r1, [r2, #0]
 800c3d2:	d1e0      	bne.n	800c396 <_free_r+0x26>
 800c3d4:	681c      	ldr	r4, [r3, #0]
 800c3d6:	685b      	ldr	r3, [r3, #4]
 800c3d8:	6053      	str	r3, [r2, #4]
 800c3da:	440c      	add	r4, r1
 800c3dc:	6014      	str	r4, [r2, #0]
 800c3de:	e7da      	b.n	800c396 <_free_r+0x26>
 800c3e0:	d902      	bls.n	800c3e8 <_free_r+0x78>
 800c3e2:	230c      	movs	r3, #12
 800c3e4:	6003      	str	r3, [r0, #0]
 800c3e6:	e7d6      	b.n	800c396 <_free_r+0x26>
 800c3e8:	6825      	ldr	r5, [r4, #0]
 800c3ea:	1961      	adds	r1, r4, r5
 800c3ec:	428b      	cmp	r3, r1
 800c3ee:	bf04      	itt	eq
 800c3f0:	6819      	ldreq	r1, [r3, #0]
 800c3f2:	685b      	ldreq	r3, [r3, #4]
 800c3f4:	6063      	str	r3, [r4, #4]
 800c3f6:	bf04      	itt	eq
 800c3f8:	1949      	addeq	r1, r1, r5
 800c3fa:	6021      	streq	r1, [r4, #0]
 800c3fc:	6054      	str	r4, [r2, #4]
 800c3fe:	e7ca      	b.n	800c396 <_free_r+0x26>
 800c400:	b003      	add	sp, #12
 800c402:	bd30      	pop	{r4, r5, pc}
 800c404:	20005fd4 	.word	0x20005fd4

0800c408 <sbrk_aligned>:
 800c408:	b570      	push	{r4, r5, r6, lr}
 800c40a:	4e0e      	ldr	r6, [pc, #56]	; (800c444 <sbrk_aligned+0x3c>)
 800c40c:	460c      	mov	r4, r1
 800c40e:	6831      	ldr	r1, [r6, #0]
 800c410:	4605      	mov	r5, r0
 800c412:	b911      	cbnz	r1, 800c41a <sbrk_aligned+0x12>
 800c414:	f000 fcbc 	bl	800cd90 <_sbrk_r>
 800c418:	6030      	str	r0, [r6, #0]
 800c41a:	4621      	mov	r1, r4
 800c41c:	4628      	mov	r0, r5
 800c41e:	f000 fcb7 	bl	800cd90 <_sbrk_r>
 800c422:	1c43      	adds	r3, r0, #1
 800c424:	d00a      	beq.n	800c43c <sbrk_aligned+0x34>
 800c426:	1cc4      	adds	r4, r0, #3
 800c428:	f024 0403 	bic.w	r4, r4, #3
 800c42c:	42a0      	cmp	r0, r4
 800c42e:	d007      	beq.n	800c440 <sbrk_aligned+0x38>
 800c430:	1a21      	subs	r1, r4, r0
 800c432:	4628      	mov	r0, r5
 800c434:	f000 fcac 	bl	800cd90 <_sbrk_r>
 800c438:	3001      	adds	r0, #1
 800c43a:	d101      	bne.n	800c440 <sbrk_aligned+0x38>
 800c43c:	f04f 34ff 	mov.w	r4, #4294967295
 800c440:	4620      	mov	r0, r4
 800c442:	bd70      	pop	{r4, r5, r6, pc}
 800c444:	20005fd8 	.word	0x20005fd8

0800c448 <_malloc_r>:
 800c448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c44c:	1ccd      	adds	r5, r1, #3
 800c44e:	f025 0503 	bic.w	r5, r5, #3
 800c452:	3508      	adds	r5, #8
 800c454:	2d0c      	cmp	r5, #12
 800c456:	bf38      	it	cc
 800c458:	250c      	movcc	r5, #12
 800c45a:	2d00      	cmp	r5, #0
 800c45c:	4607      	mov	r7, r0
 800c45e:	db01      	blt.n	800c464 <_malloc_r+0x1c>
 800c460:	42a9      	cmp	r1, r5
 800c462:	d905      	bls.n	800c470 <_malloc_r+0x28>
 800c464:	230c      	movs	r3, #12
 800c466:	603b      	str	r3, [r7, #0]
 800c468:	2600      	movs	r6, #0
 800c46a:	4630      	mov	r0, r6
 800c46c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c470:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c544 <_malloc_r+0xfc>
 800c474:	f000 f868 	bl	800c548 <__malloc_lock>
 800c478:	f8d8 3000 	ldr.w	r3, [r8]
 800c47c:	461c      	mov	r4, r3
 800c47e:	bb5c      	cbnz	r4, 800c4d8 <_malloc_r+0x90>
 800c480:	4629      	mov	r1, r5
 800c482:	4638      	mov	r0, r7
 800c484:	f7ff ffc0 	bl	800c408 <sbrk_aligned>
 800c488:	1c43      	adds	r3, r0, #1
 800c48a:	4604      	mov	r4, r0
 800c48c:	d155      	bne.n	800c53a <_malloc_r+0xf2>
 800c48e:	f8d8 4000 	ldr.w	r4, [r8]
 800c492:	4626      	mov	r6, r4
 800c494:	2e00      	cmp	r6, #0
 800c496:	d145      	bne.n	800c524 <_malloc_r+0xdc>
 800c498:	2c00      	cmp	r4, #0
 800c49a:	d048      	beq.n	800c52e <_malloc_r+0xe6>
 800c49c:	6823      	ldr	r3, [r4, #0]
 800c49e:	4631      	mov	r1, r6
 800c4a0:	4638      	mov	r0, r7
 800c4a2:	eb04 0903 	add.w	r9, r4, r3
 800c4a6:	f000 fc73 	bl	800cd90 <_sbrk_r>
 800c4aa:	4581      	cmp	r9, r0
 800c4ac:	d13f      	bne.n	800c52e <_malloc_r+0xe6>
 800c4ae:	6821      	ldr	r1, [r4, #0]
 800c4b0:	1a6d      	subs	r5, r5, r1
 800c4b2:	4629      	mov	r1, r5
 800c4b4:	4638      	mov	r0, r7
 800c4b6:	f7ff ffa7 	bl	800c408 <sbrk_aligned>
 800c4ba:	3001      	adds	r0, #1
 800c4bc:	d037      	beq.n	800c52e <_malloc_r+0xe6>
 800c4be:	6823      	ldr	r3, [r4, #0]
 800c4c0:	442b      	add	r3, r5
 800c4c2:	6023      	str	r3, [r4, #0]
 800c4c4:	f8d8 3000 	ldr.w	r3, [r8]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d038      	beq.n	800c53e <_malloc_r+0xf6>
 800c4cc:	685a      	ldr	r2, [r3, #4]
 800c4ce:	42a2      	cmp	r2, r4
 800c4d0:	d12b      	bne.n	800c52a <_malloc_r+0xe2>
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	605a      	str	r2, [r3, #4]
 800c4d6:	e00f      	b.n	800c4f8 <_malloc_r+0xb0>
 800c4d8:	6822      	ldr	r2, [r4, #0]
 800c4da:	1b52      	subs	r2, r2, r5
 800c4dc:	d41f      	bmi.n	800c51e <_malloc_r+0xd6>
 800c4de:	2a0b      	cmp	r2, #11
 800c4e0:	d917      	bls.n	800c512 <_malloc_r+0xca>
 800c4e2:	1961      	adds	r1, r4, r5
 800c4e4:	42a3      	cmp	r3, r4
 800c4e6:	6025      	str	r5, [r4, #0]
 800c4e8:	bf18      	it	ne
 800c4ea:	6059      	strne	r1, [r3, #4]
 800c4ec:	6863      	ldr	r3, [r4, #4]
 800c4ee:	bf08      	it	eq
 800c4f0:	f8c8 1000 	streq.w	r1, [r8]
 800c4f4:	5162      	str	r2, [r4, r5]
 800c4f6:	604b      	str	r3, [r1, #4]
 800c4f8:	4638      	mov	r0, r7
 800c4fa:	f104 060b 	add.w	r6, r4, #11
 800c4fe:	f000 f829 	bl	800c554 <__malloc_unlock>
 800c502:	f026 0607 	bic.w	r6, r6, #7
 800c506:	1d23      	adds	r3, r4, #4
 800c508:	1af2      	subs	r2, r6, r3
 800c50a:	d0ae      	beq.n	800c46a <_malloc_r+0x22>
 800c50c:	1b9b      	subs	r3, r3, r6
 800c50e:	50a3      	str	r3, [r4, r2]
 800c510:	e7ab      	b.n	800c46a <_malloc_r+0x22>
 800c512:	42a3      	cmp	r3, r4
 800c514:	6862      	ldr	r2, [r4, #4]
 800c516:	d1dd      	bne.n	800c4d4 <_malloc_r+0x8c>
 800c518:	f8c8 2000 	str.w	r2, [r8]
 800c51c:	e7ec      	b.n	800c4f8 <_malloc_r+0xb0>
 800c51e:	4623      	mov	r3, r4
 800c520:	6864      	ldr	r4, [r4, #4]
 800c522:	e7ac      	b.n	800c47e <_malloc_r+0x36>
 800c524:	4634      	mov	r4, r6
 800c526:	6876      	ldr	r6, [r6, #4]
 800c528:	e7b4      	b.n	800c494 <_malloc_r+0x4c>
 800c52a:	4613      	mov	r3, r2
 800c52c:	e7cc      	b.n	800c4c8 <_malloc_r+0x80>
 800c52e:	230c      	movs	r3, #12
 800c530:	603b      	str	r3, [r7, #0]
 800c532:	4638      	mov	r0, r7
 800c534:	f000 f80e 	bl	800c554 <__malloc_unlock>
 800c538:	e797      	b.n	800c46a <_malloc_r+0x22>
 800c53a:	6025      	str	r5, [r4, #0]
 800c53c:	e7dc      	b.n	800c4f8 <_malloc_r+0xb0>
 800c53e:	605b      	str	r3, [r3, #4]
 800c540:	deff      	udf	#255	; 0xff
 800c542:	bf00      	nop
 800c544:	20005fd4 	.word	0x20005fd4

0800c548 <__malloc_lock>:
 800c548:	4801      	ldr	r0, [pc, #4]	; (800c550 <__malloc_lock+0x8>)
 800c54a:	f7ff bf0e 	b.w	800c36a <__retarget_lock_acquire_recursive>
 800c54e:	bf00      	nop
 800c550:	20005fd0 	.word	0x20005fd0

0800c554 <__malloc_unlock>:
 800c554:	4801      	ldr	r0, [pc, #4]	; (800c55c <__malloc_unlock+0x8>)
 800c556:	f7ff bf09 	b.w	800c36c <__retarget_lock_release_recursive>
 800c55a:	bf00      	nop
 800c55c:	20005fd0 	.word	0x20005fd0

0800c560 <__sfputc_r>:
 800c560:	6893      	ldr	r3, [r2, #8]
 800c562:	3b01      	subs	r3, #1
 800c564:	2b00      	cmp	r3, #0
 800c566:	b410      	push	{r4}
 800c568:	6093      	str	r3, [r2, #8]
 800c56a:	da08      	bge.n	800c57e <__sfputc_r+0x1e>
 800c56c:	6994      	ldr	r4, [r2, #24]
 800c56e:	42a3      	cmp	r3, r4
 800c570:	db01      	blt.n	800c576 <__sfputc_r+0x16>
 800c572:	290a      	cmp	r1, #10
 800c574:	d103      	bne.n	800c57e <__sfputc_r+0x1e>
 800c576:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c57a:	f000 bb73 	b.w	800cc64 <__swbuf_r>
 800c57e:	6813      	ldr	r3, [r2, #0]
 800c580:	1c58      	adds	r0, r3, #1
 800c582:	6010      	str	r0, [r2, #0]
 800c584:	7019      	strb	r1, [r3, #0]
 800c586:	4608      	mov	r0, r1
 800c588:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c58c:	4770      	bx	lr

0800c58e <__sfputs_r>:
 800c58e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c590:	4606      	mov	r6, r0
 800c592:	460f      	mov	r7, r1
 800c594:	4614      	mov	r4, r2
 800c596:	18d5      	adds	r5, r2, r3
 800c598:	42ac      	cmp	r4, r5
 800c59a:	d101      	bne.n	800c5a0 <__sfputs_r+0x12>
 800c59c:	2000      	movs	r0, #0
 800c59e:	e007      	b.n	800c5b0 <__sfputs_r+0x22>
 800c5a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5a4:	463a      	mov	r2, r7
 800c5a6:	4630      	mov	r0, r6
 800c5a8:	f7ff ffda 	bl	800c560 <__sfputc_r>
 800c5ac:	1c43      	adds	r3, r0, #1
 800c5ae:	d1f3      	bne.n	800c598 <__sfputs_r+0xa>
 800c5b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5b4 <_vfiprintf_r>:
 800c5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b8:	460d      	mov	r5, r1
 800c5ba:	b09d      	sub	sp, #116	; 0x74
 800c5bc:	4614      	mov	r4, r2
 800c5be:	4698      	mov	r8, r3
 800c5c0:	4606      	mov	r6, r0
 800c5c2:	b118      	cbz	r0, 800c5cc <_vfiprintf_r+0x18>
 800c5c4:	6a03      	ldr	r3, [r0, #32]
 800c5c6:	b90b      	cbnz	r3, 800c5cc <_vfiprintf_r+0x18>
 800c5c8:	f7ff fdca 	bl	800c160 <__sinit>
 800c5cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5ce:	07d9      	lsls	r1, r3, #31
 800c5d0:	d405      	bmi.n	800c5de <_vfiprintf_r+0x2a>
 800c5d2:	89ab      	ldrh	r3, [r5, #12]
 800c5d4:	059a      	lsls	r2, r3, #22
 800c5d6:	d402      	bmi.n	800c5de <_vfiprintf_r+0x2a>
 800c5d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5da:	f7ff fec6 	bl	800c36a <__retarget_lock_acquire_recursive>
 800c5de:	89ab      	ldrh	r3, [r5, #12]
 800c5e0:	071b      	lsls	r3, r3, #28
 800c5e2:	d501      	bpl.n	800c5e8 <_vfiprintf_r+0x34>
 800c5e4:	692b      	ldr	r3, [r5, #16]
 800c5e6:	b99b      	cbnz	r3, 800c610 <_vfiprintf_r+0x5c>
 800c5e8:	4629      	mov	r1, r5
 800c5ea:	4630      	mov	r0, r6
 800c5ec:	f000 fb78 	bl	800cce0 <__swsetup_r>
 800c5f0:	b170      	cbz	r0, 800c610 <_vfiprintf_r+0x5c>
 800c5f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5f4:	07dc      	lsls	r4, r3, #31
 800c5f6:	d504      	bpl.n	800c602 <_vfiprintf_r+0x4e>
 800c5f8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5fc:	b01d      	add	sp, #116	; 0x74
 800c5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c602:	89ab      	ldrh	r3, [r5, #12]
 800c604:	0598      	lsls	r0, r3, #22
 800c606:	d4f7      	bmi.n	800c5f8 <_vfiprintf_r+0x44>
 800c608:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c60a:	f7ff feaf 	bl	800c36c <__retarget_lock_release_recursive>
 800c60e:	e7f3      	b.n	800c5f8 <_vfiprintf_r+0x44>
 800c610:	2300      	movs	r3, #0
 800c612:	9309      	str	r3, [sp, #36]	; 0x24
 800c614:	2320      	movs	r3, #32
 800c616:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c61a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c61e:	2330      	movs	r3, #48	; 0x30
 800c620:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c7d4 <_vfiprintf_r+0x220>
 800c624:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c628:	f04f 0901 	mov.w	r9, #1
 800c62c:	4623      	mov	r3, r4
 800c62e:	469a      	mov	sl, r3
 800c630:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c634:	b10a      	cbz	r2, 800c63a <_vfiprintf_r+0x86>
 800c636:	2a25      	cmp	r2, #37	; 0x25
 800c638:	d1f9      	bne.n	800c62e <_vfiprintf_r+0x7a>
 800c63a:	ebba 0b04 	subs.w	fp, sl, r4
 800c63e:	d00b      	beq.n	800c658 <_vfiprintf_r+0xa4>
 800c640:	465b      	mov	r3, fp
 800c642:	4622      	mov	r2, r4
 800c644:	4629      	mov	r1, r5
 800c646:	4630      	mov	r0, r6
 800c648:	f7ff ffa1 	bl	800c58e <__sfputs_r>
 800c64c:	3001      	adds	r0, #1
 800c64e:	f000 80a9 	beq.w	800c7a4 <_vfiprintf_r+0x1f0>
 800c652:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c654:	445a      	add	r2, fp
 800c656:	9209      	str	r2, [sp, #36]	; 0x24
 800c658:	f89a 3000 	ldrb.w	r3, [sl]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	f000 80a1 	beq.w	800c7a4 <_vfiprintf_r+0x1f0>
 800c662:	2300      	movs	r3, #0
 800c664:	f04f 32ff 	mov.w	r2, #4294967295
 800c668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c66c:	f10a 0a01 	add.w	sl, sl, #1
 800c670:	9304      	str	r3, [sp, #16]
 800c672:	9307      	str	r3, [sp, #28]
 800c674:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c678:	931a      	str	r3, [sp, #104]	; 0x68
 800c67a:	4654      	mov	r4, sl
 800c67c:	2205      	movs	r2, #5
 800c67e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c682:	4854      	ldr	r0, [pc, #336]	; (800c7d4 <_vfiprintf_r+0x220>)
 800c684:	f7f3 fdcc 	bl	8000220 <memchr>
 800c688:	9a04      	ldr	r2, [sp, #16]
 800c68a:	b9d8      	cbnz	r0, 800c6c4 <_vfiprintf_r+0x110>
 800c68c:	06d1      	lsls	r1, r2, #27
 800c68e:	bf44      	itt	mi
 800c690:	2320      	movmi	r3, #32
 800c692:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c696:	0713      	lsls	r3, r2, #28
 800c698:	bf44      	itt	mi
 800c69a:	232b      	movmi	r3, #43	; 0x2b
 800c69c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6a0:	f89a 3000 	ldrb.w	r3, [sl]
 800c6a4:	2b2a      	cmp	r3, #42	; 0x2a
 800c6a6:	d015      	beq.n	800c6d4 <_vfiprintf_r+0x120>
 800c6a8:	9a07      	ldr	r2, [sp, #28]
 800c6aa:	4654      	mov	r4, sl
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	f04f 0c0a 	mov.w	ip, #10
 800c6b2:	4621      	mov	r1, r4
 800c6b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6b8:	3b30      	subs	r3, #48	; 0x30
 800c6ba:	2b09      	cmp	r3, #9
 800c6bc:	d94d      	bls.n	800c75a <_vfiprintf_r+0x1a6>
 800c6be:	b1b0      	cbz	r0, 800c6ee <_vfiprintf_r+0x13a>
 800c6c0:	9207      	str	r2, [sp, #28]
 800c6c2:	e014      	b.n	800c6ee <_vfiprintf_r+0x13a>
 800c6c4:	eba0 0308 	sub.w	r3, r0, r8
 800c6c8:	fa09 f303 	lsl.w	r3, r9, r3
 800c6cc:	4313      	orrs	r3, r2
 800c6ce:	9304      	str	r3, [sp, #16]
 800c6d0:	46a2      	mov	sl, r4
 800c6d2:	e7d2      	b.n	800c67a <_vfiprintf_r+0xc6>
 800c6d4:	9b03      	ldr	r3, [sp, #12]
 800c6d6:	1d19      	adds	r1, r3, #4
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	9103      	str	r1, [sp, #12]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	bfbb      	ittet	lt
 800c6e0:	425b      	neglt	r3, r3
 800c6e2:	f042 0202 	orrlt.w	r2, r2, #2
 800c6e6:	9307      	strge	r3, [sp, #28]
 800c6e8:	9307      	strlt	r3, [sp, #28]
 800c6ea:	bfb8      	it	lt
 800c6ec:	9204      	strlt	r2, [sp, #16]
 800c6ee:	7823      	ldrb	r3, [r4, #0]
 800c6f0:	2b2e      	cmp	r3, #46	; 0x2e
 800c6f2:	d10c      	bne.n	800c70e <_vfiprintf_r+0x15a>
 800c6f4:	7863      	ldrb	r3, [r4, #1]
 800c6f6:	2b2a      	cmp	r3, #42	; 0x2a
 800c6f8:	d134      	bne.n	800c764 <_vfiprintf_r+0x1b0>
 800c6fa:	9b03      	ldr	r3, [sp, #12]
 800c6fc:	1d1a      	adds	r2, r3, #4
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	9203      	str	r2, [sp, #12]
 800c702:	2b00      	cmp	r3, #0
 800c704:	bfb8      	it	lt
 800c706:	f04f 33ff 	movlt.w	r3, #4294967295
 800c70a:	3402      	adds	r4, #2
 800c70c:	9305      	str	r3, [sp, #20]
 800c70e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c7e4 <_vfiprintf_r+0x230>
 800c712:	7821      	ldrb	r1, [r4, #0]
 800c714:	2203      	movs	r2, #3
 800c716:	4650      	mov	r0, sl
 800c718:	f7f3 fd82 	bl	8000220 <memchr>
 800c71c:	b138      	cbz	r0, 800c72e <_vfiprintf_r+0x17a>
 800c71e:	9b04      	ldr	r3, [sp, #16]
 800c720:	eba0 000a 	sub.w	r0, r0, sl
 800c724:	2240      	movs	r2, #64	; 0x40
 800c726:	4082      	lsls	r2, r0
 800c728:	4313      	orrs	r3, r2
 800c72a:	3401      	adds	r4, #1
 800c72c:	9304      	str	r3, [sp, #16]
 800c72e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c732:	4829      	ldr	r0, [pc, #164]	; (800c7d8 <_vfiprintf_r+0x224>)
 800c734:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c738:	2206      	movs	r2, #6
 800c73a:	f7f3 fd71 	bl	8000220 <memchr>
 800c73e:	2800      	cmp	r0, #0
 800c740:	d03f      	beq.n	800c7c2 <_vfiprintf_r+0x20e>
 800c742:	4b26      	ldr	r3, [pc, #152]	; (800c7dc <_vfiprintf_r+0x228>)
 800c744:	bb1b      	cbnz	r3, 800c78e <_vfiprintf_r+0x1da>
 800c746:	9b03      	ldr	r3, [sp, #12]
 800c748:	3307      	adds	r3, #7
 800c74a:	f023 0307 	bic.w	r3, r3, #7
 800c74e:	3308      	adds	r3, #8
 800c750:	9303      	str	r3, [sp, #12]
 800c752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c754:	443b      	add	r3, r7
 800c756:	9309      	str	r3, [sp, #36]	; 0x24
 800c758:	e768      	b.n	800c62c <_vfiprintf_r+0x78>
 800c75a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c75e:	460c      	mov	r4, r1
 800c760:	2001      	movs	r0, #1
 800c762:	e7a6      	b.n	800c6b2 <_vfiprintf_r+0xfe>
 800c764:	2300      	movs	r3, #0
 800c766:	3401      	adds	r4, #1
 800c768:	9305      	str	r3, [sp, #20]
 800c76a:	4619      	mov	r1, r3
 800c76c:	f04f 0c0a 	mov.w	ip, #10
 800c770:	4620      	mov	r0, r4
 800c772:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c776:	3a30      	subs	r2, #48	; 0x30
 800c778:	2a09      	cmp	r2, #9
 800c77a:	d903      	bls.n	800c784 <_vfiprintf_r+0x1d0>
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d0c6      	beq.n	800c70e <_vfiprintf_r+0x15a>
 800c780:	9105      	str	r1, [sp, #20]
 800c782:	e7c4      	b.n	800c70e <_vfiprintf_r+0x15a>
 800c784:	fb0c 2101 	mla	r1, ip, r1, r2
 800c788:	4604      	mov	r4, r0
 800c78a:	2301      	movs	r3, #1
 800c78c:	e7f0      	b.n	800c770 <_vfiprintf_r+0x1bc>
 800c78e:	ab03      	add	r3, sp, #12
 800c790:	9300      	str	r3, [sp, #0]
 800c792:	462a      	mov	r2, r5
 800c794:	4b12      	ldr	r3, [pc, #72]	; (800c7e0 <_vfiprintf_r+0x22c>)
 800c796:	a904      	add	r1, sp, #16
 800c798:	4630      	mov	r0, r6
 800c79a:	f3af 8000 	nop.w
 800c79e:	4607      	mov	r7, r0
 800c7a0:	1c78      	adds	r0, r7, #1
 800c7a2:	d1d6      	bne.n	800c752 <_vfiprintf_r+0x19e>
 800c7a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7a6:	07d9      	lsls	r1, r3, #31
 800c7a8:	d405      	bmi.n	800c7b6 <_vfiprintf_r+0x202>
 800c7aa:	89ab      	ldrh	r3, [r5, #12]
 800c7ac:	059a      	lsls	r2, r3, #22
 800c7ae:	d402      	bmi.n	800c7b6 <_vfiprintf_r+0x202>
 800c7b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7b2:	f7ff fddb 	bl	800c36c <__retarget_lock_release_recursive>
 800c7b6:	89ab      	ldrh	r3, [r5, #12]
 800c7b8:	065b      	lsls	r3, r3, #25
 800c7ba:	f53f af1d 	bmi.w	800c5f8 <_vfiprintf_r+0x44>
 800c7be:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7c0:	e71c      	b.n	800c5fc <_vfiprintf_r+0x48>
 800c7c2:	ab03      	add	r3, sp, #12
 800c7c4:	9300      	str	r3, [sp, #0]
 800c7c6:	462a      	mov	r2, r5
 800c7c8:	4b05      	ldr	r3, [pc, #20]	; (800c7e0 <_vfiprintf_r+0x22c>)
 800c7ca:	a904      	add	r1, sp, #16
 800c7cc:	4630      	mov	r0, r6
 800c7ce:	f000 f879 	bl	800c8c4 <_printf_i>
 800c7d2:	e7e4      	b.n	800c79e <_vfiprintf_r+0x1ea>
 800c7d4:	0800cf34 	.word	0x0800cf34
 800c7d8:	0800cf3e 	.word	0x0800cf3e
 800c7dc:	00000000 	.word	0x00000000
 800c7e0:	0800c58f 	.word	0x0800c58f
 800c7e4:	0800cf3a 	.word	0x0800cf3a

0800c7e8 <_printf_common>:
 800c7e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7ec:	4616      	mov	r6, r2
 800c7ee:	4699      	mov	r9, r3
 800c7f0:	688a      	ldr	r2, [r1, #8]
 800c7f2:	690b      	ldr	r3, [r1, #16]
 800c7f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c7f8:	4293      	cmp	r3, r2
 800c7fa:	bfb8      	it	lt
 800c7fc:	4613      	movlt	r3, r2
 800c7fe:	6033      	str	r3, [r6, #0]
 800c800:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c804:	4607      	mov	r7, r0
 800c806:	460c      	mov	r4, r1
 800c808:	b10a      	cbz	r2, 800c80e <_printf_common+0x26>
 800c80a:	3301      	adds	r3, #1
 800c80c:	6033      	str	r3, [r6, #0]
 800c80e:	6823      	ldr	r3, [r4, #0]
 800c810:	0699      	lsls	r1, r3, #26
 800c812:	bf42      	ittt	mi
 800c814:	6833      	ldrmi	r3, [r6, #0]
 800c816:	3302      	addmi	r3, #2
 800c818:	6033      	strmi	r3, [r6, #0]
 800c81a:	6825      	ldr	r5, [r4, #0]
 800c81c:	f015 0506 	ands.w	r5, r5, #6
 800c820:	d106      	bne.n	800c830 <_printf_common+0x48>
 800c822:	f104 0a19 	add.w	sl, r4, #25
 800c826:	68e3      	ldr	r3, [r4, #12]
 800c828:	6832      	ldr	r2, [r6, #0]
 800c82a:	1a9b      	subs	r3, r3, r2
 800c82c:	42ab      	cmp	r3, r5
 800c82e:	dc26      	bgt.n	800c87e <_printf_common+0x96>
 800c830:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c834:	1e13      	subs	r3, r2, #0
 800c836:	6822      	ldr	r2, [r4, #0]
 800c838:	bf18      	it	ne
 800c83a:	2301      	movne	r3, #1
 800c83c:	0692      	lsls	r2, r2, #26
 800c83e:	d42b      	bmi.n	800c898 <_printf_common+0xb0>
 800c840:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c844:	4649      	mov	r1, r9
 800c846:	4638      	mov	r0, r7
 800c848:	47c0      	blx	r8
 800c84a:	3001      	adds	r0, #1
 800c84c:	d01e      	beq.n	800c88c <_printf_common+0xa4>
 800c84e:	6823      	ldr	r3, [r4, #0]
 800c850:	6922      	ldr	r2, [r4, #16]
 800c852:	f003 0306 	and.w	r3, r3, #6
 800c856:	2b04      	cmp	r3, #4
 800c858:	bf02      	ittt	eq
 800c85a:	68e5      	ldreq	r5, [r4, #12]
 800c85c:	6833      	ldreq	r3, [r6, #0]
 800c85e:	1aed      	subeq	r5, r5, r3
 800c860:	68a3      	ldr	r3, [r4, #8]
 800c862:	bf0c      	ite	eq
 800c864:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c868:	2500      	movne	r5, #0
 800c86a:	4293      	cmp	r3, r2
 800c86c:	bfc4      	itt	gt
 800c86e:	1a9b      	subgt	r3, r3, r2
 800c870:	18ed      	addgt	r5, r5, r3
 800c872:	2600      	movs	r6, #0
 800c874:	341a      	adds	r4, #26
 800c876:	42b5      	cmp	r5, r6
 800c878:	d11a      	bne.n	800c8b0 <_printf_common+0xc8>
 800c87a:	2000      	movs	r0, #0
 800c87c:	e008      	b.n	800c890 <_printf_common+0xa8>
 800c87e:	2301      	movs	r3, #1
 800c880:	4652      	mov	r2, sl
 800c882:	4649      	mov	r1, r9
 800c884:	4638      	mov	r0, r7
 800c886:	47c0      	blx	r8
 800c888:	3001      	adds	r0, #1
 800c88a:	d103      	bne.n	800c894 <_printf_common+0xac>
 800c88c:	f04f 30ff 	mov.w	r0, #4294967295
 800c890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c894:	3501      	adds	r5, #1
 800c896:	e7c6      	b.n	800c826 <_printf_common+0x3e>
 800c898:	18e1      	adds	r1, r4, r3
 800c89a:	1c5a      	adds	r2, r3, #1
 800c89c:	2030      	movs	r0, #48	; 0x30
 800c89e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8a2:	4422      	add	r2, r4
 800c8a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8ac:	3302      	adds	r3, #2
 800c8ae:	e7c7      	b.n	800c840 <_printf_common+0x58>
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	4622      	mov	r2, r4
 800c8b4:	4649      	mov	r1, r9
 800c8b6:	4638      	mov	r0, r7
 800c8b8:	47c0      	blx	r8
 800c8ba:	3001      	adds	r0, #1
 800c8bc:	d0e6      	beq.n	800c88c <_printf_common+0xa4>
 800c8be:	3601      	adds	r6, #1
 800c8c0:	e7d9      	b.n	800c876 <_printf_common+0x8e>
	...

0800c8c4 <_printf_i>:
 800c8c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c8c8:	7e0f      	ldrb	r7, [r1, #24]
 800c8ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c8cc:	2f78      	cmp	r7, #120	; 0x78
 800c8ce:	4691      	mov	r9, r2
 800c8d0:	4680      	mov	r8, r0
 800c8d2:	460c      	mov	r4, r1
 800c8d4:	469a      	mov	sl, r3
 800c8d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c8da:	d807      	bhi.n	800c8ec <_printf_i+0x28>
 800c8dc:	2f62      	cmp	r7, #98	; 0x62
 800c8de:	d80a      	bhi.n	800c8f6 <_printf_i+0x32>
 800c8e0:	2f00      	cmp	r7, #0
 800c8e2:	f000 80d4 	beq.w	800ca8e <_printf_i+0x1ca>
 800c8e6:	2f58      	cmp	r7, #88	; 0x58
 800c8e8:	f000 80c0 	beq.w	800ca6c <_printf_i+0x1a8>
 800c8ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c8f4:	e03a      	b.n	800c96c <_printf_i+0xa8>
 800c8f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c8fa:	2b15      	cmp	r3, #21
 800c8fc:	d8f6      	bhi.n	800c8ec <_printf_i+0x28>
 800c8fe:	a101      	add	r1, pc, #4	; (adr r1, 800c904 <_printf_i+0x40>)
 800c900:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c904:	0800c95d 	.word	0x0800c95d
 800c908:	0800c971 	.word	0x0800c971
 800c90c:	0800c8ed 	.word	0x0800c8ed
 800c910:	0800c8ed 	.word	0x0800c8ed
 800c914:	0800c8ed 	.word	0x0800c8ed
 800c918:	0800c8ed 	.word	0x0800c8ed
 800c91c:	0800c971 	.word	0x0800c971
 800c920:	0800c8ed 	.word	0x0800c8ed
 800c924:	0800c8ed 	.word	0x0800c8ed
 800c928:	0800c8ed 	.word	0x0800c8ed
 800c92c:	0800c8ed 	.word	0x0800c8ed
 800c930:	0800ca75 	.word	0x0800ca75
 800c934:	0800c99d 	.word	0x0800c99d
 800c938:	0800ca2f 	.word	0x0800ca2f
 800c93c:	0800c8ed 	.word	0x0800c8ed
 800c940:	0800c8ed 	.word	0x0800c8ed
 800c944:	0800ca97 	.word	0x0800ca97
 800c948:	0800c8ed 	.word	0x0800c8ed
 800c94c:	0800c99d 	.word	0x0800c99d
 800c950:	0800c8ed 	.word	0x0800c8ed
 800c954:	0800c8ed 	.word	0x0800c8ed
 800c958:	0800ca37 	.word	0x0800ca37
 800c95c:	682b      	ldr	r3, [r5, #0]
 800c95e:	1d1a      	adds	r2, r3, #4
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	602a      	str	r2, [r5, #0]
 800c964:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c968:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c96c:	2301      	movs	r3, #1
 800c96e:	e09f      	b.n	800cab0 <_printf_i+0x1ec>
 800c970:	6820      	ldr	r0, [r4, #0]
 800c972:	682b      	ldr	r3, [r5, #0]
 800c974:	0607      	lsls	r7, r0, #24
 800c976:	f103 0104 	add.w	r1, r3, #4
 800c97a:	6029      	str	r1, [r5, #0]
 800c97c:	d501      	bpl.n	800c982 <_printf_i+0xbe>
 800c97e:	681e      	ldr	r6, [r3, #0]
 800c980:	e003      	b.n	800c98a <_printf_i+0xc6>
 800c982:	0646      	lsls	r6, r0, #25
 800c984:	d5fb      	bpl.n	800c97e <_printf_i+0xba>
 800c986:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c98a:	2e00      	cmp	r6, #0
 800c98c:	da03      	bge.n	800c996 <_printf_i+0xd2>
 800c98e:	232d      	movs	r3, #45	; 0x2d
 800c990:	4276      	negs	r6, r6
 800c992:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c996:	485a      	ldr	r0, [pc, #360]	; (800cb00 <_printf_i+0x23c>)
 800c998:	230a      	movs	r3, #10
 800c99a:	e012      	b.n	800c9c2 <_printf_i+0xfe>
 800c99c:	682b      	ldr	r3, [r5, #0]
 800c99e:	6820      	ldr	r0, [r4, #0]
 800c9a0:	1d19      	adds	r1, r3, #4
 800c9a2:	6029      	str	r1, [r5, #0]
 800c9a4:	0605      	lsls	r5, r0, #24
 800c9a6:	d501      	bpl.n	800c9ac <_printf_i+0xe8>
 800c9a8:	681e      	ldr	r6, [r3, #0]
 800c9aa:	e002      	b.n	800c9b2 <_printf_i+0xee>
 800c9ac:	0641      	lsls	r1, r0, #25
 800c9ae:	d5fb      	bpl.n	800c9a8 <_printf_i+0xe4>
 800c9b0:	881e      	ldrh	r6, [r3, #0]
 800c9b2:	4853      	ldr	r0, [pc, #332]	; (800cb00 <_printf_i+0x23c>)
 800c9b4:	2f6f      	cmp	r7, #111	; 0x6f
 800c9b6:	bf0c      	ite	eq
 800c9b8:	2308      	moveq	r3, #8
 800c9ba:	230a      	movne	r3, #10
 800c9bc:	2100      	movs	r1, #0
 800c9be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9c2:	6865      	ldr	r5, [r4, #4]
 800c9c4:	60a5      	str	r5, [r4, #8]
 800c9c6:	2d00      	cmp	r5, #0
 800c9c8:	bfa2      	ittt	ge
 800c9ca:	6821      	ldrge	r1, [r4, #0]
 800c9cc:	f021 0104 	bicge.w	r1, r1, #4
 800c9d0:	6021      	strge	r1, [r4, #0]
 800c9d2:	b90e      	cbnz	r6, 800c9d8 <_printf_i+0x114>
 800c9d4:	2d00      	cmp	r5, #0
 800c9d6:	d04b      	beq.n	800ca70 <_printf_i+0x1ac>
 800c9d8:	4615      	mov	r5, r2
 800c9da:	fbb6 f1f3 	udiv	r1, r6, r3
 800c9de:	fb03 6711 	mls	r7, r3, r1, r6
 800c9e2:	5dc7      	ldrb	r7, [r0, r7]
 800c9e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c9e8:	4637      	mov	r7, r6
 800c9ea:	42bb      	cmp	r3, r7
 800c9ec:	460e      	mov	r6, r1
 800c9ee:	d9f4      	bls.n	800c9da <_printf_i+0x116>
 800c9f0:	2b08      	cmp	r3, #8
 800c9f2:	d10b      	bne.n	800ca0c <_printf_i+0x148>
 800c9f4:	6823      	ldr	r3, [r4, #0]
 800c9f6:	07de      	lsls	r6, r3, #31
 800c9f8:	d508      	bpl.n	800ca0c <_printf_i+0x148>
 800c9fa:	6923      	ldr	r3, [r4, #16]
 800c9fc:	6861      	ldr	r1, [r4, #4]
 800c9fe:	4299      	cmp	r1, r3
 800ca00:	bfde      	ittt	le
 800ca02:	2330      	movle	r3, #48	; 0x30
 800ca04:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ca08:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ca0c:	1b52      	subs	r2, r2, r5
 800ca0e:	6122      	str	r2, [r4, #16]
 800ca10:	f8cd a000 	str.w	sl, [sp]
 800ca14:	464b      	mov	r3, r9
 800ca16:	aa03      	add	r2, sp, #12
 800ca18:	4621      	mov	r1, r4
 800ca1a:	4640      	mov	r0, r8
 800ca1c:	f7ff fee4 	bl	800c7e8 <_printf_common>
 800ca20:	3001      	adds	r0, #1
 800ca22:	d14a      	bne.n	800caba <_printf_i+0x1f6>
 800ca24:	f04f 30ff 	mov.w	r0, #4294967295
 800ca28:	b004      	add	sp, #16
 800ca2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca2e:	6823      	ldr	r3, [r4, #0]
 800ca30:	f043 0320 	orr.w	r3, r3, #32
 800ca34:	6023      	str	r3, [r4, #0]
 800ca36:	4833      	ldr	r0, [pc, #204]	; (800cb04 <_printf_i+0x240>)
 800ca38:	2778      	movs	r7, #120	; 0x78
 800ca3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ca3e:	6823      	ldr	r3, [r4, #0]
 800ca40:	6829      	ldr	r1, [r5, #0]
 800ca42:	061f      	lsls	r7, r3, #24
 800ca44:	f851 6b04 	ldr.w	r6, [r1], #4
 800ca48:	d402      	bmi.n	800ca50 <_printf_i+0x18c>
 800ca4a:	065f      	lsls	r7, r3, #25
 800ca4c:	bf48      	it	mi
 800ca4e:	b2b6      	uxthmi	r6, r6
 800ca50:	07df      	lsls	r7, r3, #31
 800ca52:	bf48      	it	mi
 800ca54:	f043 0320 	orrmi.w	r3, r3, #32
 800ca58:	6029      	str	r1, [r5, #0]
 800ca5a:	bf48      	it	mi
 800ca5c:	6023      	strmi	r3, [r4, #0]
 800ca5e:	b91e      	cbnz	r6, 800ca68 <_printf_i+0x1a4>
 800ca60:	6823      	ldr	r3, [r4, #0]
 800ca62:	f023 0320 	bic.w	r3, r3, #32
 800ca66:	6023      	str	r3, [r4, #0]
 800ca68:	2310      	movs	r3, #16
 800ca6a:	e7a7      	b.n	800c9bc <_printf_i+0xf8>
 800ca6c:	4824      	ldr	r0, [pc, #144]	; (800cb00 <_printf_i+0x23c>)
 800ca6e:	e7e4      	b.n	800ca3a <_printf_i+0x176>
 800ca70:	4615      	mov	r5, r2
 800ca72:	e7bd      	b.n	800c9f0 <_printf_i+0x12c>
 800ca74:	682b      	ldr	r3, [r5, #0]
 800ca76:	6826      	ldr	r6, [r4, #0]
 800ca78:	6961      	ldr	r1, [r4, #20]
 800ca7a:	1d18      	adds	r0, r3, #4
 800ca7c:	6028      	str	r0, [r5, #0]
 800ca7e:	0635      	lsls	r5, r6, #24
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	d501      	bpl.n	800ca88 <_printf_i+0x1c4>
 800ca84:	6019      	str	r1, [r3, #0]
 800ca86:	e002      	b.n	800ca8e <_printf_i+0x1ca>
 800ca88:	0670      	lsls	r0, r6, #25
 800ca8a:	d5fb      	bpl.n	800ca84 <_printf_i+0x1c0>
 800ca8c:	8019      	strh	r1, [r3, #0]
 800ca8e:	2300      	movs	r3, #0
 800ca90:	6123      	str	r3, [r4, #16]
 800ca92:	4615      	mov	r5, r2
 800ca94:	e7bc      	b.n	800ca10 <_printf_i+0x14c>
 800ca96:	682b      	ldr	r3, [r5, #0]
 800ca98:	1d1a      	adds	r2, r3, #4
 800ca9a:	602a      	str	r2, [r5, #0]
 800ca9c:	681d      	ldr	r5, [r3, #0]
 800ca9e:	6862      	ldr	r2, [r4, #4]
 800caa0:	2100      	movs	r1, #0
 800caa2:	4628      	mov	r0, r5
 800caa4:	f7f3 fbbc 	bl	8000220 <memchr>
 800caa8:	b108      	cbz	r0, 800caae <_printf_i+0x1ea>
 800caaa:	1b40      	subs	r0, r0, r5
 800caac:	6060      	str	r0, [r4, #4]
 800caae:	6863      	ldr	r3, [r4, #4]
 800cab0:	6123      	str	r3, [r4, #16]
 800cab2:	2300      	movs	r3, #0
 800cab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cab8:	e7aa      	b.n	800ca10 <_printf_i+0x14c>
 800caba:	6923      	ldr	r3, [r4, #16]
 800cabc:	462a      	mov	r2, r5
 800cabe:	4649      	mov	r1, r9
 800cac0:	4640      	mov	r0, r8
 800cac2:	47d0      	blx	sl
 800cac4:	3001      	adds	r0, #1
 800cac6:	d0ad      	beq.n	800ca24 <_printf_i+0x160>
 800cac8:	6823      	ldr	r3, [r4, #0]
 800caca:	079b      	lsls	r3, r3, #30
 800cacc:	d413      	bmi.n	800caf6 <_printf_i+0x232>
 800cace:	68e0      	ldr	r0, [r4, #12]
 800cad0:	9b03      	ldr	r3, [sp, #12]
 800cad2:	4298      	cmp	r0, r3
 800cad4:	bfb8      	it	lt
 800cad6:	4618      	movlt	r0, r3
 800cad8:	e7a6      	b.n	800ca28 <_printf_i+0x164>
 800cada:	2301      	movs	r3, #1
 800cadc:	4632      	mov	r2, r6
 800cade:	4649      	mov	r1, r9
 800cae0:	4640      	mov	r0, r8
 800cae2:	47d0      	blx	sl
 800cae4:	3001      	adds	r0, #1
 800cae6:	d09d      	beq.n	800ca24 <_printf_i+0x160>
 800cae8:	3501      	adds	r5, #1
 800caea:	68e3      	ldr	r3, [r4, #12]
 800caec:	9903      	ldr	r1, [sp, #12]
 800caee:	1a5b      	subs	r3, r3, r1
 800caf0:	42ab      	cmp	r3, r5
 800caf2:	dcf2      	bgt.n	800cada <_printf_i+0x216>
 800caf4:	e7eb      	b.n	800cace <_printf_i+0x20a>
 800caf6:	2500      	movs	r5, #0
 800caf8:	f104 0619 	add.w	r6, r4, #25
 800cafc:	e7f5      	b.n	800caea <_printf_i+0x226>
 800cafe:	bf00      	nop
 800cb00:	0800cf45 	.word	0x0800cf45
 800cb04:	0800cf56 	.word	0x0800cf56

0800cb08 <__sflush_r>:
 800cb08:	898a      	ldrh	r2, [r1, #12]
 800cb0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb0e:	4605      	mov	r5, r0
 800cb10:	0710      	lsls	r0, r2, #28
 800cb12:	460c      	mov	r4, r1
 800cb14:	d458      	bmi.n	800cbc8 <__sflush_r+0xc0>
 800cb16:	684b      	ldr	r3, [r1, #4]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	dc05      	bgt.n	800cb28 <__sflush_r+0x20>
 800cb1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	dc02      	bgt.n	800cb28 <__sflush_r+0x20>
 800cb22:	2000      	movs	r0, #0
 800cb24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb2a:	2e00      	cmp	r6, #0
 800cb2c:	d0f9      	beq.n	800cb22 <__sflush_r+0x1a>
 800cb2e:	2300      	movs	r3, #0
 800cb30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cb34:	682f      	ldr	r7, [r5, #0]
 800cb36:	6a21      	ldr	r1, [r4, #32]
 800cb38:	602b      	str	r3, [r5, #0]
 800cb3a:	d032      	beq.n	800cba2 <__sflush_r+0x9a>
 800cb3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cb3e:	89a3      	ldrh	r3, [r4, #12]
 800cb40:	075a      	lsls	r2, r3, #29
 800cb42:	d505      	bpl.n	800cb50 <__sflush_r+0x48>
 800cb44:	6863      	ldr	r3, [r4, #4]
 800cb46:	1ac0      	subs	r0, r0, r3
 800cb48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cb4a:	b10b      	cbz	r3, 800cb50 <__sflush_r+0x48>
 800cb4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cb4e:	1ac0      	subs	r0, r0, r3
 800cb50:	2300      	movs	r3, #0
 800cb52:	4602      	mov	r2, r0
 800cb54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cb56:	6a21      	ldr	r1, [r4, #32]
 800cb58:	4628      	mov	r0, r5
 800cb5a:	47b0      	blx	r6
 800cb5c:	1c43      	adds	r3, r0, #1
 800cb5e:	89a3      	ldrh	r3, [r4, #12]
 800cb60:	d106      	bne.n	800cb70 <__sflush_r+0x68>
 800cb62:	6829      	ldr	r1, [r5, #0]
 800cb64:	291d      	cmp	r1, #29
 800cb66:	d82b      	bhi.n	800cbc0 <__sflush_r+0xb8>
 800cb68:	4a29      	ldr	r2, [pc, #164]	; (800cc10 <__sflush_r+0x108>)
 800cb6a:	410a      	asrs	r2, r1
 800cb6c:	07d6      	lsls	r6, r2, #31
 800cb6e:	d427      	bmi.n	800cbc0 <__sflush_r+0xb8>
 800cb70:	2200      	movs	r2, #0
 800cb72:	6062      	str	r2, [r4, #4]
 800cb74:	04d9      	lsls	r1, r3, #19
 800cb76:	6922      	ldr	r2, [r4, #16]
 800cb78:	6022      	str	r2, [r4, #0]
 800cb7a:	d504      	bpl.n	800cb86 <__sflush_r+0x7e>
 800cb7c:	1c42      	adds	r2, r0, #1
 800cb7e:	d101      	bne.n	800cb84 <__sflush_r+0x7c>
 800cb80:	682b      	ldr	r3, [r5, #0]
 800cb82:	b903      	cbnz	r3, 800cb86 <__sflush_r+0x7e>
 800cb84:	6560      	str	r0, [r4, #84]	; 0x54
 800cb86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb88:	602f      	str	r7, [r5, #0]
 800cb8a:	2900      	cmp	r1, #0
 800cb8c:	d0c9      	beq.n	800cb22 <__sflush_r+0x1a>
 800cb8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb92:	4299      	cmp	r1, r3
 800cb94:	d002      	beq.n	800cb9c <__sflush_r+0x94>
 800cb96:	4628      	mov	r0, r5
 800cb98:	f7ff fbea 	bl	800c370 <_free_r>
 800cb9c:	2000      	movs	r0, #0
 800cb9e:	6360      	str	r0, [r4, #52]	; 0x34
 800cba0:	e7c0      	b.n	800cb24 <__sflush_r+0x1c>
 800cba2:	2301      	movs	r3, #1
 800cba4:	4628      	mov	r0, r5
 800cba6:	47b0      	blx	r6
 800cba8:	1c41      	adds	r1, r0, #1
 800cbaa:	d1c8      	bne.n	800cb3e <__sflush_r+0x36>
 800cbac:	682b      	ldr	r3, [r5, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d0c5      	beq.n	800cb3e <__sflush_r+0x36>
 800cbb2:	2b1d      	cmp	r3, #29
 800cbb4:	d001      	beq.n	800cbba <__sflush_r+0xb2>
 800cbb6:	2b16      	cmp	r3, #22
 800cbb8:	d101      	bne.n	800cbbe <__sflush_r+0xb6>
 800cbba:	602f      	str	r7, [r5, #0]
 800cbbc:	e7b1      	b.n	800cb22 <__sflush_r+0x1a>
 800cbbe:	89a3      	ldrh	r3, [r4, #12]
 800cbc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbc4:	81a3      	strh	r3, [r4, #12]
 800cbc6:	e7ad      	b.n	800cb24 <__sflush_r+0x1c>
 800cbc8:	690f      	ldr	r7, [r1, #16]
 800cbca:	2f00      	cmp	r7, #0
 800cbcc:	d0a9      	beq.n	800cb22 <__sflush_r+0x1a>
 800cbce:	0793      	lsls	r3, r2, #30
 800cbd0:	680e      	ldr	r6, [r1, #0]
 800cbd2:	bf08      	it	eq
 800cbd4:	694b      	ldreq	r3, [r1, #20]
 800cbd6:	600f      	str	r7, [r1, #0]
 800cbd8:	bf18      	it	ne
 800cbda:	2300      	movne	r3, #0
 800cbdc:	eba6 0807 	sub.w	r8, r6, r7
 800cbe0:	608b      	str	r3, [r1, #8]
 800cbe2:	f1b8 0f00 	cmp.w	r8, #0
 800cbe6:	dd9c      	ble.n	800cb22 <__sflush_r+0x1a>
 800cbe8:	6a21      	ldr	r1, [r4, #32]
 800cbea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cbec:	4643      	mov	r3, r8
 800cbee:	463a      	mov	r2, r7
 800cbf0:	4628      	mov	r0, r5
 800cbf2:	47b0      	blx	r6
 800cbf4:	2800      	cmp	r0, #0
 800cbf6:	dc06      	bgt.n	800cc06 <__sflush_r+0xfe>
 800cbf8:	89a3      	ldrh	r3, [r4, #12]
 800cbfa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cbfe:	81a3      	strh	r3, [r4, #12]
 800cc00:	f04f 30ff 	mov.w	r0, #4294967295
 800cc04:	e78e      	b.n	800cb24 <__sflush_r+0x1c>
 800cc06:	4407      	add	r7, r0
 800cc08:	eba8 0800 	sub.w	r8, r8, r0
 800cc0c:	e7e9      	b.n	800cbe2 <__sflush_r+0xda>
 800cc0e:	bf00      	nop
 800cc10:	dfbffffe 	.word	0xdfbffffe

0800cc14 <_fflush_r>:
 800cc14:	b538      	push	{r3, r4, r5, lr}
 800cc16:	690b      	ldr	r3, [r1, #16]
 800cc18:	4605      	mov	r5, r0
 800cc1a:	460c      	mov	r4, r1
 800cc1c:	b913      	cbnz	r3, 800cc24 <_fflush_r+0x10>
 800cc1e:	2500      	movs	r5, #0
 800cc20:	4628      	mov	r0, r5
 800cc22:	bd38      	pop	{r3, r4, r5, pc}
 800cc24:	b118      	cbz	r0, 800cc2e <_fflush_r+0x1a>
 800cc26:	6a03      	ldr	r3, [r0, #32]
 800cc28:	b90b      	cbnz	r3, 800cc2e <_fflush_r+0x1a>
 800cc2a:	f7ff fa99 	bl	800c160 <__sinit>
 800cc2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d0f3      	beq.n	800cc1e <_fflush_r+0xa>
 800cc36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cc38:	07d0      	lsls	r0, r2, #31
 800cc3a:	d404      	bmi.n	800cc46 <_fflush_r+0x32>
 800cc3c:	0599      	lsls	r1, r3, #22
 800cc3e:	d402      	bmi.n	800cc46 <_fflush_r+0x32>
 800cc40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc42:	f7ff fb92 	bl	800c36a <__retarget_lock_acquire_recursive>
 800cc46:	4628      	mov	r0, r5
 800cc48:	4621      	mov	r1, r4
 800cc4a:	f7ff ff5d 	bl	800cb08 <__sflush_r>
 800cc4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc50:	07da      	lsls	r2, r3, #31
 800cc52:	4605      	mov	r5, r0
 800cc54:	d4e4      	bmi.n	800cc20 <_fflush_r+0xc>
 800cc56:	89a3      	ldrh	r3, [r4, #12]
 800cc58:	059b      	lsls	r3, r3, #22
 800cc5a:	d4e1      	bmi.n	800cc20 <_fflush_r+0xc>
 800cc5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc5e:	f7ff fb85 	bl	800c36c <__retarget_lock_release_recursive>
 800cc62:	e7dd      	b.n	800cc20 <_fflush_r+0xc>

0800cc64 <__swbuf_r>:
 800cc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc66:	460e      	mov	r6, r1
 800cc68:	4614      	mov	r4, r2
 800cc6a:	4605      	mov	r5, r0
 800cc6c:	b118      	cbz	r0, 800cc76 <__swbuf_r+0x12>
 800cc6e:	6a03      	ldr	r3, [r0, #32]
 800cc70:	b90b      	cbnz	r3, 800cc76 <__swbuf_r+0x12>
 800cc72:	f7ff fa75 	bl	800c160 <__sinit>
 800cc76:	69a3      	ldr	r3, [r4, #24]
 800cc78:	60a3      	str	r3, [r4, #8]
 800cc7a:	89a3      	ldrh	r3, [r4, #12]
 800cc7c:	071a      	lsls	r2, r3, #28
 800cc7e:	d525      	bpl.n	800cccc <__swbuf_r+0x68>
 800cc80:	6923      	ldr	r3, [r4, #16]
 800cc82:	b31b      	cbz	r3, 800cccc <__swbuf_r+0x68>
 800cc84:	6823      	ldr	r3, [r4, #0]
 800cc86:	6922      	ldr	r2, [r4, #16]
 800cc88:	1a98      	subs	r0, r3, r2
 800cc8a:	6963      	ldr	r3, [r4, #20]
 800cc8c:	b2f6      	uxtb	r6, r6
 800cc8e:	4283      	cmp	r3, r0
 800cc90:	4637      	mov	r7, r6
 800cc92:	dc04      	bgt.n	800cc9e <__swbuf_r+0x3a>
 800cc94:	4621      	mov	r1, r4
 800cc96:	4628      	mov	r0, r5
 800cc98:	f7ff ffbc 	bl	800cc14 <_fflush_r>
 800cc9c:	b9e0      	cbnz	r0, 800ccd8 <__swbuf_r+0x74>
 800cc9e:	68a3      	ldr	r3, [r4, #8]
 800cca0:	3b01      	subs	r3, #1
 800cca2:	60a3      	str	r3, [r4, #8]
 800cca4:	6823      	ldr	r3, [r4, #0]
 800cca6:	1c5a      	adds	r2, r3, #1
 800cca8:	6022      	str	r2, [r4, #0]
 800ccaa:	701e      	strb	r6, [r3, #0]
 800ccac:	6962      	ldr	r2, [r4, #20]
 800ccae:	1c43      	adds	r3, r0, #1
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d004      	beq.n	800ccbe <__swbuf_r+0x5a>
 800ccb4:	89a3      	ldrh	r3, [r4, #12]
 800ccb6:	07db      	lsls	r3, r3, #31
 800ccb8:	d506      	bpl.n	800ccc8 <__swbuf_r+0x64>
 800ccba:	2e0a      	cmp	r6, #10
 800ccbc:	d104      	bne.n	800ccc8 <__swbuf_r+0x64>
 800ccbe:	4621      	mov	r1, r4
 800ccc0:	4628      	mov	r0, r5
 800ccc2:	f7ff ffa7 	bl	800cc14 <_fflush_r>
 800ccc6:	b938      	cbnz	r0, 800ccd8 <__swbuf_r+0x74>
 800ccc8:	4638      	mov	r0, r7
 800ccca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cccc:	4621      	mov	r1, r4
 800ccce:	4628      	mov	r0, r5
 800ccd0:	f000 f806 	bl	800cce0 <__swsetup_r>
 800ccd4:	2800      	cmp	r0, #0
 800ccd6:	d0d5      	beq.n	800cc84 <__swbuf_r+0x20>
 800ccd8:	f04f 37ff 	mov.w	r7, #4294967295
 800ccdc:	e7f4      	b.n	800ccc8 <__swbuf_r+0x64>
	...

0800cce0 <__swsetup_r>:
 800cce0:	b538      	push	{r3, r4, r5, lr}
 800cce2:	4b2a      	ldr	r3, [pc, #168]	; (800cd8c <__swsetup_r+0xac>)
 800cce4:	4605      	mov	r5, r0
 800cce6:	6818      	ldr	r0, [r3, #0]
 800cce8:	460c      	mov	r4, r1
 800ccea:	b118      	cbz	r0, 800ccf4 <__swsetup_r+0x14>
 800ccec:	6a03      	ldr	r3, [r0, #32]
 800ccee:	b90b      	cbnz	r3, 800ccf4 <__swsetup_r+0x14>
 800ccf0:	f7ff fa36 	bl	800c160 <__sinit>
 800ccf4:	89a3      	ldrh	r3, [r4, #12]
 800ccf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ccfa:	0718      	lsls	r0, r3, #28
 800ccfc:	d422      	bmi.n	800cd44 <__swsetup_r+0x64>
 800ccfe:	06d9      	lsls	r1, r3, #27
 800cd00:	d407      	bmi.n	800cd12 <__swsetup_r+0x32>
 800cd02:	2309      	movs	r3, #9
 800cd04:	602b      	str	r3, [r5, #0]
 800cd06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cd0a:	81a3      	strh	r3, [r4, #12]
 800cd0c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd10:	e034      	b.n	800cd7c <__swsetup_r+0x9c>
 800cd12:	0758      	lsls	r0, r3, #29
 800cd14:	d512      	bpl.n	800cd3c <__swsetup_r+0x5c>
 800cd16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cd18:	b141      	cbz	r1, 800cd2c <__swsetup_r+0x4c>
 800cd1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cd1e:	4299      	cmp	r1, r3
 800cd20:	d002      	beq.n	800cd28 <__swsetup_r+0x48>
 800cd22:	4628      	mov	r0, r5
 800cd24:	f7ff fb24 	bl	800c370 <_free_r>
 800cd28:	2300      	movs	r3, #0
 800cd2a:	6363      	str	r3, [r4, #52]	; 0x34
 800cd2c:	89a3      	ldrh	r3, [r4, #12]
 800cd2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cd32:	81a3      	strh	r3, [r4, #12]
 800cd34:	2300      	movs	r3, #0
 800cd36:	6063      	str	r3, [r4, #4]
 800cd38:	6923      	ldr	r3, [r4, #16]
 800cd3a:	6023      	str	r3, [r4, #0]
 800cd3c:	89a3      	ldrh	r3, [r4, #12]
 800cd3e:	f043 0308 	orr.w	r3, r3, #8
 800cd42:	81a3      	strh	r3, [r4, #12]
 800cd44:	6923      	ldr	r3, [r4, #16]
 800cd46:	b94b      	cbnz	r3, 800cd5c <__swsetup_r+0x7c>
 800cd48:	89a3      	ldrh	r3, [r4, #12]
 800cd4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cd4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd52:	d003      	beq.n	800cd5c <__swsetup_r+0x7c>
 800cd54:	4621      	mov	r1, r4
 800cd56:	4628      	mov	r0, r5
 800cd58:	f000 f850 	bl	800cdfc <__smakebuf_r>
 800cd5c:	89a0      	ldrh	r0, [r4, #12]
 800cd5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cd62:	f010 0301 	ands.w	r3, r0, #1
 800cd66:	d00a      	beq.n	800cd7e <__swsetup_r+0x9e>
 800cd68:	2300      	movs	r3, #0
 800cd6a:	60a3      	str	r3, [r4, #8]
 800cd6c:	6963      	ldr	r3, [r4, #20]
 800cd6e:	425b      	negs	r3, r3
 800cd70:	61a3      	str	r3, [r4, #24]
 800cd72:	6923      	ldr	r3, [r4, #16]
 800cd74:	b943      	cbnz	r3, 800cd88 <__swsetup_r+0xa8>
 800cd76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cd7a:	d1c4      	bne.n	800cd06 <__swsetup_r+0x26>
 800cd7c:	bd38      	pop	{r3, r4, r5, pc}
 800cd7e:	0781      	lsls	r1, r0, #30
 800cd80:	bf58      	it	pl
 800cd82:	6963      	ldrpl	r3, [r4, #20]
 800cd84:	60a3      	str	r3, [r4, #8]
 800cd86:	e7f4      	b.n	800cd72 <__swsetup_r+0x92>
 800cd88:	2000      	movs	r0, #0
 800cd8a:	e7f7      	b.n	800cd7c <__swsetup_r+0x9c>
 800cd8c:	200001dc 	.word	0x200001dc

0800cd90 <_sbrk_r>:
 800cd90:	b538      	push	{r3, r4, r5, lr}
 800cd92:	4d06      	ldr	r5, [pc, #24]	; (800cdac <_sbrk_r+0x1c>)
 800cd94:	2300      	movs	r3, #0
 800cd96:	4604      	mov	r4, r0
 800cd98:	4608      	mov	r0, r1
 800cd9a:	602b      	str	r3, [r5, #0]
 800cd9c:	f7f4 fb1c 	bl	80013d8 <_sbrk>
 800cda0:	1c43      	adds	r3, r0, #1
 800cda2:	d102      	bne.n	800cdaa <_sbrk_r+0x1a>
 800cda4:	682b      	ldr	r3, [r5, #0]
 800cda6:	b103      	cbz	r3, 800cdaa <_sbrk_r+0x1a>
 800cda8:	6023      	str	r3, [r4, #0]
 800cdaa:	bd38      	pop	{r3, r4, r5, pc}
 800cdac:	20005fcc 	.word	0x20005fcc

0800cdb0 <__swhatbuf_r>:
 800cdb0:	b570      	push	{r4, r5, r6, lr}
 800cdb2:	460c      	mov	r4, r1
 800cdb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cdb8:	2900      	cmp	r1, #0
 800cdba:	b096      	sub	sp, #88	; 0x58
 800cdbc:	4615      	mov	r5, r2
 800cdbe:	461e      	mov	r6, r3
 800cdc0:	da0d      	bge.n	800cdde <__swhatbuf_r+0x2e>
 800cdc2:	89a3      	ldrh	r3, [r4, #12]
 800cdc4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cdc8:	f04f 0100 	mov.w	r1, #0
 800cdcc:	bf0c      	ite	eq
 800cdce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cdd2:	2340      	movne	r3, #64	; 0x40
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	6031      	str	r1, [r6, #0]
 800cdd8:	602b      	str	r3, [r5, #0]
 800cdda:	b016      	add	sp, #88	; 0x58
 800cddc:	bd70      	pop	{r4, r5, r6, pc}
 800cdde:	466a      	mov	r2, sp
 800cde0:	f000 f848 	bl	800ce74 <_fstat_r>
 800cde4:	2800      	cmp	r0, #0
 800cde6:	dbec      	blt.n	800cdc2 <__swhatbuf_r+0x12>
 800cde8:	9901      	ldr	r1, [sp, #4]
 800cdea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cdee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cdf2:	4259      	negs	r1, r3
 800cdf4:	4159      	adcs	r1, r3
 800cdf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdfa:	e7eb      	b.n	800cdd4 <__swhatbuf_r+0x24>

0800cdfc <__smakebuf_r>:
 800cdfc:	898b      	ldrh	r3, [r1, #12]
 800cdfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ce00:	079d      	lsls	r5, r3, #30
 800ce02:	4606      	mov	r6, r0
 800ce04:	460c      	mov	r4, r1
 800ce06:	d507      	bpl.n	800ce18 <__smakebuf_r+0x1c>
 800ce08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ce0c:	6023      	str	r3, [r4, #0]
 800ce0e:	6123      	str	r3, [r4, #16]
 800ce10:	2301      	movs	r3, #1
 800ce12:	6163      	str	r3, [r4, #20]
 800ce14:	b002      	add	sp, #8
 800ce16:	bd70      	pop	{r4, r5, r6, pc}
 800ce18:	ab01      	add	r3, sp, #4
 800ce1a:	466a      	mov	r2, sp
 800ce1c:	f7ff ffc8 	bl	800cdb0 <__swhatbuf_r>
 800ce20:	9900      	ldr	r1, [sp, #0]
 800ce22:	4605      	mov	r5, r0
 800ce24:	4630      	mov	r0, r6
 800ce26:	f7ff fb0f 	bl	800c448 <_malloc_r>
 800ce2a:	b948      	cbnz	r0, 800ce40 <__smakebuf_r+0x44>
 800ce2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce30:	059a      	lsls	r2, r3, #22
 800ce32:	d4ef      	bmi.n	800ce14 <__smakebuf_r+0x18>
 800ce34:	f023 0303 	bic.w	r3, r3, #3
 800ce38:	f043 0302 	orr.w	r3, r3, #2
 800ce3c:	81a3      	strh	r3, [r4, #12]
 800ce3e:	e7e3      	b.n	800ce08 <__smakebuf_r+0xc>
 800ce40:	89a3      	ldrh	r3, [r4, #12]
 800ce42:	6020      	str	r0, [r4, #0]
 800ce44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce48:	81a3      	strh	r3, [r4, #12]
 800ce4a:	9b00      	ldr	r3, [sp, #0]
 800ce4c:	6163      	str	r3, [r4, #20]
 800ce4e:	9b01      	ldr	r3, [sp, #4]
 800ce50:	6120      	str	r0, [r4, #16]
 800ce52:	b15b      	cbz	r3, 800ce6c <__smakebuf_r+0x70>
 800ce54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ce58:	4630      	mov	r0, r6
 800ce5a:	f000 f81d 	bl	800ce98 <_isatty_r>
 800ce5e:	b128      	cbz	r0, 800ce6c <__smakebuf_r+0x70>
 800ce60:	89a3      	ldrh	r3, [r4, #12]
 800ce62:	f023 0303 	bic.w	r3, r3, #3
 800ce66:	f043 0301 	orr.w	r3, r3, #1
 800ce6a:	81a3      	strh	r3, [r4, #12]
 800ce6c:	89a3      	ldrh	r3, [r4, #12]
 800ce6e:	431d      	orrs	r5, r3
 800ce70:	81a5      	strh	r5, [r4, #12]
 800ce72:	e7cf      	b.n	800ce14 <__smakebuf_r+0x18>

0800ce74 <_fstat_r>:
 800ce74:	b538      	push	{r3, r4, r5, lr}
 800ce76:	4d07      	ldr	r5, [pc, #28]	; (800ce94 <_fstat_r+0x20>)
 800ce78:	2300      	movs	r3, #0
 800ce7a:	4604      	mov	r4, r0
 800ce7c:	4608      	mov	r0, r1
 800ce7e:	4611      	mov	r1, r2
 800ce80:	602b      	str	r3, [r5, #0]
 800ce82:	f7f4 fa80 	bl	8001386 <_fstat>
 800ce86:	1c43      	adds	r3, r0, #1
 800ce88:	d102      	bne.n	800ce90 <_fstat_r+0x1c>
 800ce8a:	682b      	ldr	r3, [r5, #0]
 800ce8c:	b103      	cbz	r3, 800ce90 <_fstat_r+0x1c>
 800ce8e:	6023      	str	r3, [r4, #0]
 800ce90:	bd38      	pop	{r3, r4, r5, pc}
 800ce92:	bf00      	nop
 800ce94:	20005fcc 	.word	0x20005fcc

0800ce98 <_isatty_r>:
 800ce98:	b538      	push	{r3, r4, r5, lr}
 800ce9a:	4d06      	ldr	r5, [pc, #24]	; (800ceb4 <_isatty_r+0x1c>)
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	4604      	mov	r4, r0
 800cea0:	4608      	mov	r0, r1
 800cea2:	602b      	str	r3, [r5, #0]
 800cea4:	f7f4 fa7f 	bl	80013a6 <_isatty>
 800cea8:	1c43      	adds	r3, r0, #1
 800ceaa:	d102      	bne.n	800ceb2 <_isatty_r+0x1a>
 800ceac:	682b      	ldr	r3, [r5, #0]
 800ceae:	b103      	cbz	r3, 800ceb2 <_isatty_r+0x1a>
 800ceb0:	6023      	str	r3, [r4, #0]
 800ceb2:	bd38      	pop	{r3, r4, r5, pc}
 800ceb4:	20005fcc 	.word	0x20005fcc

0800ceb8 <_init>:
 800ceb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceba:	bf00      	nop
 800cebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cebe:	bc08      	pop	{r3}
 800cec0:	469e      	mov	lr, r3
 800cec2:	4770      	bx	lr

0800cec4 <_fini>:
 800cec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec6:	bf00      	nop
 800cec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceca:	bc08      	pop	{r3}
 800cecc:	469e      	mov	lr, r3
 800cece:	4770      	bx	lr
