
HS_thermocouple_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011d98  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  08011f78  08011f78  00021f78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012548  08012548  00030370  2**0
                  CONTENTS
  4 .ARM          00000000  08012548  08012548  00030370  2**0
                  CONTENTS
  5 .preinit_array 00000000  08012548  08012548  00030370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012548  08012548  00022548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801254c  0801254c  0002254c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000370  20000000  08012550  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f98  20000370  080128c0  00030370  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  20004308  080128c0  00034308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030370  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000303a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002025d  00000000  00000000  000303e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047c3  00000000  00000000  00050640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ce0  00000000  00000000  00054e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001625  00000000  00000000  00056ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cdaf  00000000  00000000  0005810d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023964  00000000  00000000  00084ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001198db  00000000  00000000  000a8820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009020  00000000  00000000  001c20fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001cb11c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000370 	.word	0x20000370
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011f60 	.word	0x08011f60

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000374 	.word	0x20000374
 800021c:	08011f60 	.word	0x08011f60

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfc:	f001 fe4f 	bl	800299e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d00:	f000 f8b6 	bl	8000e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d04:	f000 fbf6 	bl	80014f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d08:	f000 fbb2 	bl	8001470 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d0c:	f000 f8fc 	bl	8000f08 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d10:	f000 f97e 	bl	8001010 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000d14:	f000 f9ee 	bl	80010f4 <MX_ADC3_Init>
  MX_ADC4_Init();
 8000d18:	f000 fa72 	bl	8001200 <MX_ADC4_Init>
  MX_TIM2_Init();
 8000d1c:	f000 fb5c 	bl	80013d8 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8000d20:	f00c fd8e 	bl	800d840 <MX_USB_Device_Init>
  MX_I2C3_Init();
 8000d24:	f000 fb18 	bl	8001358 <MX_I2C3_Init>
  MX_DAC1_Init();
 8000d28:	f000 fadc 	bl	80012e4 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  ResetStates();
 8000d2c:	f001 f954 	bl	8001fd8 <ResetStates>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(conv_state == CFG_RECEIVED){
 8000d30:	4b47      	ldr	r3, [pc, #284]	; (8000e50 <main+0x158>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d101      	bne.n	8000d3e <main+0x46>
		  InterpretConfig();
 8000d3a:	f000 fc87 	bl	800164c <InterpretConfig>
	  }
	  if(conv_state == CFG_INTERPRETED){
 8000d3e:	4b44      	ldr	r3, [pc, #272]	; (8000e50 <main+0x158>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d101      	bne.n	8000d4c <main+0x54>
		  SetupMeasurement();
 8000d48:	f000 fd6a 	bl	8001820 <SetupMeasurement>
	  }
	  if(conv_state == PARAMETERS_SET){
 8000d4c:	4b40      	ldr	r3, [pc, #256]	; (8000e50 <main+0x158>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	d101      	bne.n	8000d5a <main+0x62>
		  SendParameters();
 8000d56:	f000 ff5f 	bl	8001c18 <SendParameters>
	  }
	  if(conv_state == ARMED){
 8000d5a:	4b3d      	ldr	r3, [pc, #244]	; (8000e50 <main+0x158>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	d106      	bne.n	8000d72 <main+0x7a>
		  while(!measurement_activated);
 8000d64:	bf00      	nop
 8000d66:	4b3b      	ldr	r3, [pc, #236]	; (8000e54 <main+0x15c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0fb      	beq.n	8000d66 <main+0x6e>
		  StartMeasurement();
 8000d6e:	f000 ffc1 	bl	8001cf4 <StartMeasurement>
	  }
	  if(conv_state == MEASURING){
 8000d72:	4b37      	ldr	r3, [pc, #220]	; (8000e50 <main+0x158>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b05      	cmp	r3, #5
 8000d7a:	d150      	bne.n	8000e1e <main+0x126>
		 if(adc_state[0] == START_FULL &&
 8000d7c:	4b36      	ldr	r3, [pc, #216]	; (8000e58 <main+0x160>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d11d      	bne.n	8000dc0 <main+0xc8>
			adc_state[1] == START_FULL &&
 8000d84:	4b34      	ldr	r3, [pc, #208]	; (8000e58 <main+0x160>)
 8000d86:	785b      	ldrb	r3, [r3, #1]
		 if(adc_state[0] == START_FULL &&
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d119      	bne.n	8000dc0 <main+0xc8>
			adc_state[2] == START_FULL &&
 8000d8c:	4b32      	ldr	r3, [pc, #200]	; (8000e58 <main+0x160>)
 8000d8e:	789b      	ldrb	r3, [r3, #2]
			adc_state[1] == START_FULL &&
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d115      	bne.n	8000dc0 <main+0xc8>
			adc_state[3] == START_FULL) {
 8000d94:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <main+0x160>)
 8000d96:	78db      	ldrb	r3, [r3, #3]
			adc_state[2] == START_FULL &&
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d111      	bne.n	8000dc0 <main+0xc8>
			 if(current_buffer_id == 's') {
 8000d9c:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <main+0x164>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b73      	cmp	r3, #115	; 0x73
 8000da2:	d104      	bne.n	8000dae <main+0xb6>
				 dropped_packet_count++;
 8000da4:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <main+0x168>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	3301      	adds	r3, #1
 8000daa:	4a2d      	ldr	r2, [pc, #180]	; (8000e60 <main+0x168>)
 8000dac:	6013      	str	r3, [r2, #0]
			 }
			 current_buffer_id = 's';
 8000dae:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <main+0x164>)
 8000db0:	2273      	movs	r2, #115	; 0x73
 8000db2:	701a      	strb	r2, [r3, #0]
			 SendData(current_buffer_id);
 8000db4:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <main+0x164>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 f85f 	bl	8001e7c <SendData>
 8000dbe:	e020      	b.n	8000e02 <main+0x10a>
		 }
		 else if(adc_state[0] == END_FULL &&
 8000dc0:	4b25      	ldr	r3, [pc, #148]	; (8000e58 <main+0x160>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d11c      	bne.n	8000e02 <main+0x10a>
				 adc_state[1] == END_FULL &&
 8000dc8:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <main+0x160>)
 8000dca:	785b      	ldrb	r3, [r3, #1]
		 else if(adc_state[0] == END_FULL &&
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d118      	bne.n	8000e02 <main+0x10a>
				 adc_state[2] == END_FULL &&
 8000dd0:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <main+0x160>)
 8000dd2:	789b      	ldrb	r3, [r3, #2]
				 adc_state[1] == END_FULL &&
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d114      	bne.n	8000e02 <main+0x10a>
				 adc_state[3] == END_FULL) {
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <main+0x160>)
 8000dda:	78db      	ldrb	r3, [r3, #3]
				 adc_state[2] == END_FULL &&
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d110      	bne.n	8000e02 <main+0x10a>
			 if(current_buffer_id == 'e') {
 8000de0:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <main+0x164>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b65      	cmp	r3, #101	; 0x65
 8000de6:	d104      	bne.n	8000df2 <main+0xfa>
				 dropped_packet_count++;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <main+0x168>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	4a1c      	ldr	r2, [pc, #112]	; (8000e60 <main+0x168>)
 8000df0:	6013      	str	r3, [r2, #0]
			 }
			 current_buffer_id = 'e';
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <main+0x164>)
 8000df4:	2265      	movs	r2, #101	; 0x65
 8000df6:	701a      	strb	r2, [r3, #0]
			 SendData(current_buffer_id);
 8000df8:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <main+0x164>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f001 f83d 	bl	8001e7c <SendData>
		 }

		 if(conv_count_reached && current_packet_count >= (target_packet_count - 1)) {
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <main+0x16c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d009      	beq.n	8000e1e <main+0x126>
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <main+0x170>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	1e5a      	subs	r2, r3, #1
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <main+0x174>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dc02      	bgt.n	8000e1e <main+0x126>
			 conv_state = DONE;
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <main+0x158>)
 8000e1a:	2206      	movs	r2, #6
 8000e1c:	701a      	strb	r2, [r3, #0]
		 }
	  }
	  if(conv_state == DONE){
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <main+0x158>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b06      	cmp	r3, #6
 8000e26:	d183      	bne.n	8000d30 <main+0x38>
		  if(current_packet_count < target_packet_count){
 8000e28:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <main+0x174>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <main+0x170>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	da0a      	bge.n	8000e4a <main+0x152>
			  if(current_buffer_id == 's'){
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <main+0x164>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b73      	cmp	r3, #115	; 0x73
 8000e3a:	d103      	bne.n	8000e44 <main+0x14c>
				  SendData('e');
 8000e3c:	2065      	movs	r0, #101	; 0x65
 8000e3e:	f001 f81d 	bl	8001e7c <SendData>
 8000e42:	e002      	b.n	8000e4a <main+0x152>
			  }
			  else {
				  SendData('s');
 8000e44:	2073      	movs	r0, #115	; 0x73
 8000e46:	f001 f819 	bl	8001e7c <SendData>
			  }
		  }

		  ResetStates();
 8000e4a:	f001 f8c5 	bl	8001fd8 <ResetStates>
	  if(conv_state == CFG_RECEIVED){
 8000e4e:	e76f      	b.n	8000d30 <main+0x38>
 8000e50:	200027bc 	.word	0x200027bc
 8000e54:	200027d8 	.word	0x200027d8
 8000e58:	200027d0 	.word	0x200027d0
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	20000778 	.word	0x20000778
 8000e64:	200027d4 	.word	0x200027d4
 8000e68:	20000774 	.word	0x20000774
 8000e6c:	20000770 	.word	0x20000770

08000e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b094      	sub	sp, #80	; 0x50
 8000e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e76:	f107 0318 	add.w	r3, r7, #24
 8000e7a:	2238      	movs	r2, #56	; 0x38
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f00e f827 	bl	800eed2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f006 ff4e 	bl	8007d34 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000e98:	2321      	movs	r3, #33	; 0x21
 8000e9a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 78;
 8000eb2:	234e      	movs	r3, #78	; 0x4e
 8000eb4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000eb6:	2306      	movs	r3, #6
 8000eb8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec2:	f107 0318 	add.w	r3, r7, #24
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f006 ffe8 	bl	8007e9c <HAL_RCC_OscConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ed2:	f001 f8df 	bl	8002094 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed6:	230f      	movs	r3, #15
 8000ed8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eda:	2303      	movs	r3, #3
 8000edc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2104      	movs	r1, #4
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f007 fae6 	bl	80084c0 <HAL_RCC_ClockConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000efa:	f001 f8cb 	bl	8002094 <Error_Handler>
  }
}
 8000efe:	bf00      	nop
 8000f00:	3750      	adds	r7, #80	; 0x50
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	; 0x30
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2220      	movs	r2, #32
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f00d ffd6 	bl	800eed2 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f26:	4b38      	ldr	r3, [pc, #224]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f28:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f2e:	4b36      	ldr	r3, [pc, #216]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f34:	4b34      	ldr	r3, [pc, #208]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f3a:	4b33      	ldr	r3, [pc, #204]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f40:	4b31      	ldr	r3, [pc, #196]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f46:	4b30      	ldr	r3, [pc, #192]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f4c:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f4e:	2204      	movs	r2, #4
 8000f50:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f52:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f58:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f64:	4b28      	ldr	r3, [pc, #160]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000f6c:	4b26      	ldr	r3, [pc, #152]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f6e:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000f72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f84:	4b20      	ldr	r3, [pc, #128]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8000f92:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f94:	2210      	movs	r2, #16
 8000f96:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f9a:	2220      	movs	r2, #32
 8000f9c:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_ADC1_Init+0x100>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_ADC1_Init+0x100>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000faa:	4817      	ldr	r0, [pc, #92]	; (8001008 <MX_ADC1_Init+0x100>)
 8000fac:	f002 f820 	bl	8002ff0 <HAL_ADC_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000fb6:	f001 f86d 	bl	8002094 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4810      	ldr	r0, [pc, #64]	; (8001008 <MX_ADC1_Init+0x100>)
 8000fc6:	f003 fa49 	bl	800445c <HAL_ADCEx_MultiModeConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000fd0:	f001 f860 	bl	8002094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	; (800100c <MX_ADC1_Init+0x104>)
 8000fd6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd8:	2306      	movs	r3, #6
 8000fda:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fe0:	237f      	movs	r3, #127	; 0x7f
 8000fe2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_ADC1_Init+0x100>)
 8000ff2:	f002 faf9 	bl	80035e8 <HAL_ADC_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000ffc:	f001 f84a 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	3730      	adds	r7, #48	; 0x30
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000038c 	.word	0x2000038c
 800100c:	04300002 	.word	0x04300002

08001010 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001016:	463b      	mov	r3, r7
 8001018:	2220      	movs	r2, #32
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f00d ff58 	bl	800eed2 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001022:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001024:	4a31      	ldr	r2, [pc, #196]	; (80010ec <MX_ADC2_Init+0xdc>)
 8001026:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001028:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <MX_ADC2_Init+0xd8>)
 800102a:	2200      	movs	r2, #0
 800102c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800102e:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001034:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800103a:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <MX_ADC2_Init+0xd8>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001042:	2200      	movs	r2, #0
 8001044:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001046:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001048:	2204      	movs	r2, #4
 800104a:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800104c:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <MX_ADC2_Init+0xd8>)
 800104e:	2200      	movs	r2, #0
 8001050:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001052:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001054:	2200      	movs	r2, #0
 8001056:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001058:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <MX_ADC2_Init+0xd8>)
 800105a:	2201      	movs	r2, #1
 800105c:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001066:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001068:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 800106c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800106e:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001070:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001074:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001076:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001080:	2200      	movs	r2, #0
 8001082:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001086:	2201      	movs	r2, #1
 8001088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <MX_ADC2_Init+0xd8>)
 800108e:	2210      	movs	r2, #16
 8001090:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001094:	2220      	movs	r2, #32
 8001096:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <MX_ADC2_Init+0xd8>)
 800109a:	2200      	movs	r2, #0
 800109c:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_ADC2_Init+0xd8>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010a4:	4810      	ldr	r0, [pc, #64]	; (80010e8 <MX_ADC2_Init+0xd8>)
 80010a6:	f001 ffa3 	bl	8002ff0 <HAL_ADC_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 80010b0:	f000 fff0 	bl	8002094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_ADC2_Init+0xe0>)
 80010b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b8:	2306      	movs	r3, #6
 80010ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010c0:	237f      	movs	r3, #127	; 0x7f
 80010c2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010c4:	2304      	movs	r3, #4
 80010c6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010cc:	463b      	mov	r3, r7
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_ADC2_Init+0xd8>)
 80010d2:	f002 fa89 	bl	80035e8 <HAL_ADC_ConfigChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 80010dc:	f000 ffda 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	3720      	adds	r7, #32
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200003f8 	.word	0x200003f8
 80010ec:	50000100 	.word	0x50000100
 80010f0:	0c900008 	.word	0x0c900008

080010f4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08c      	sub	sp, #48	; 0x30
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2220      	movs	r2, #32
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f00d fee0 	bl	800eed2 <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001112:	4b38      	ldr	r3, [pc, #224]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001114:	4a38      	ldr	r2, [pc, #224]	; (80011f8 <MX_ADC3_Init+0x104>)
 8001116:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001118:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <MX_ADC3_Init+0x100>)
 800111a:	2200      	movs	r2, #0
 800111c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800111e:	4b35      	ldr	r3, [pc, #212]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001124:	4b33      	ldr	r3, [pc, #204]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800112a:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <MX_ADC3_Init+0x100>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001130:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001132:	2200      	movs	r2, #0
 8001134:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001136:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001138:	2204      	movs	r2, #4
 800113a:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800113c:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <MX_ADC3_Init+0x100>)
 800113e:	2200      	movs	r2, #0
 8001140:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001142:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001144:	2200      	movs	r2, #0
 8001146:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <MX_ADC3_Init+0x100>)
 800114a:	2201      	movs	r2, #1
 800114c:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800114e:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001156:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001158:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 800115c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800115e:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001164:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001166:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001168:	2201      	movs	r2, #1
 800116a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001170:	2200      	movs	r2, #0
 8001172:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_ADC3_Init+0x100>)
 800117e:	2210      	movs	r2, #16
 8001180:	645a      	str	r2, [r3, #68]	; 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001184:	2220      	movs	r2, #32
 8001186:	649a      	str	r2, [r3, #72]	; 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_ADC3_Init+0x100>)
 800118a:	2200      	movs	r2, #0
 800118c:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001190:	2201      	movs	r2, #1
 8001192:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001194:	4817      	ldr	r0, [pc, #92]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001196:	f001 ff2b 	bl	8002ff0 <HAL_ADC_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80011a0:	f000 ff78 	bl	8002094 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	4811      	ldr	r0, [pc, #68]	; (80011f4 <MX_ADC3_Init+0x100>)
 80011b0:	f003 f954 	bl	800445c <HAL_ADCEx_MultiModeConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_ADC3_Init+0xca>
  {
    Error_Handler();
 80011ba:	f000 ff6b 	bl	8002094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_ADC3_Init+0x108>)
 80011c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c2:	2306      	movs	r3, #6
 80011c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ca:	237f      	movs	r3, #127	; 0x7f
 80011cc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011ce:	2304      	movs	r3, #4
 80011d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <MX_ADC3_Init+0x100>)
 80011dc:	f002 fa04 	bl	80035e8 <HAL_ADC_ConfigChannel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_ADC3_Init+0xf6>
  {
    Error_Handler();
 80011e6:	f000 ff55 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	3730      	adds	r7, #48	; 0x30
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000464 	.word	0x20000464
 80011f8:	50000400 	.word	0x50000400
 80011fc:	04300002 	.word	0x04300002

08001200 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001206:	463b      	mov	r3, r7
 8001208:	2220      	movs	r2, #32
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f00d fe60 	bl	800eed2 <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001212:	4b31      	ldr	r3, [pc, #196]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001214:	4a31      	ldr	r2, [pc, #196]	; (80012dc <MX_ADC4_Init+0xdc>)
 8001216:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001218:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <MX_ADC4_Init+0xd8>)
 800121a:	2200      	movs	r2, #0
 800121c:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800121e:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001224:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 800122a:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <MX_ADC4_Init+0xd8>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001230:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001238:	2204      	movs	r2, #4
 800123a:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <MX_ADC4_Init+0xd8>)
 800123e:	2200      	movs	r2, #0
 8001240:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001244:	2200      	movs	r2, #0
 8001246:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <MX_ADC4_Init+0xd8>)
 800124a:	2201      	movs	r2, #1
 800124c:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800124e:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001256:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001258:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 800125c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800125e:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001260:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001264:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001266:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001268:	2201      	movs	r2, #1
 800126a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001270:	2200      	movs	r2, #0
 8001272:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 800127c:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <MX_ADC4_Init+0xd8>)
 800127e:	2210      	movs	r2, #16
 8001280:	645a      	str	r2, [r3, #68]	; 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001284:	2220      	movs	r2, #32
 8001286:	649a      	str	r2, [r3, #72]	; 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <MX_ADC4_Init+0xd8>)
 800128a:	2200      	movs	r2, #0
 800128c:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001290:	2201      	movs	r2, #1
 8001292:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001294:	4810      	ldr	r0, [pc, #64]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001296:	f001 feab 	bl	8002ff0 <HAL_ADC_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ADC4_Init+0xa4>
  {
    Error_Handler();
 80012a0:	f000 fef8 	bl	8002094 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_ADC4_Init+0xe0>)
 80012a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012a8:	2306      	movs	r3, #6
 80012aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012b0:	237f      	movs	r3, #127	; 0x7f
 80012b2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012b4:	2304      	movs	r3, #4
 80012b6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_ADC4_Init+0xd8>)
 80012c2:	f002 f991 	bl	80035e8 <HAL_ADC_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_ADC4_Init+0xd0>
  {
    Error_Handler();
 80012cc:	f000 fee2 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200004d0 	.word	0x200004d0
 80012dc:	50000500 	.word	0x50000500
 80012e0:	14f00020 	.word	0x14f00020

080012e4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	; 0x30
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012ea:	463b      	mov	r3, r7
 80012ec:	2230      	movs	r2, #48	; 0x30
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f00d fdee 	bl	800eed2 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <MX_DAC1_Init+0x6c>)
 80012f8:	4a16      	ldr	r2, [pc, #88]	; (8001354 <MX_DAC1_Init+0x70>)
 80012fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012fc:	4814      	ldr	r0, [pc, #80]	; (8001350 <MX_DAC1_Init+0x6c>)
 80012fe:	f003 fac4 	bl	800488a <HAL_DAC_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001308:	f000 fec4 	bl	8002094 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001324:	2302      	movs	r3, #2
 8001326:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001328:	2301      	movs	r3, #1
 800132a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001330:	463b      	mov	r3, r7
 8001332:	2200      	movs	r2, #0
 8001334:	4619      	mov	r1, r3
 8001336:	4806      	ldr	r0, [pc, #24]	; (8001350 <MX_DAC1_Init+0x6c>)
 8001338:	f003 fb64 	bl	8004a04 <HAL_DAC_ConfigChannel>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001342:	f000 fea7 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	3730      	adds	r7, #48	; 0x30
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200006bc 	.word	0x200006bc
 8001354:	50000800 	.word	0x50000800

08001358 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <MX_I2C3_Init+0x74>)
 800135e:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <MX_I2C3_Init+0x78>)
 8001360:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x40707EB4;
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_I2C3_Init+0x74>)
 8001364:	4a1b      	ldr	r2, [pc, #108]	; (80013d4 <MX_I2C3_Init+0x7c>)
 8001366:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 144;
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_I2C3_Init+0x74>)
 800136a:	2290      	movs	r2, #144	; 0x90
 800136c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <MX_I2C3_Init+0x74>)
 8001370:	2201      	movs	r2, #1
 8001372:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_I2C3_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_I2C3_Init+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_I2C3_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_I2C3_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_I2C3_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001392:	480e      	ldr	r0, [pc, #56]	; (80013cc <MX_I2C3_Init+0x74>)
 8001394:	f004 f977 	bl	8005686 <HAL_I2C_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800139e:	f000 fe79 	bl	8002094 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013a2:	2100      	movs	r1, #0
 80013a4:	4809      	ldr	r0, [pc, #36]	; (80013cc <MX_I2C3_Init+0x74>)
 80013a6:	f004 fef9 	bl	800619c <HAL_I2CEx_ConfigAnalogFilter>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80013b0:	f000 fe70 	bl	8002094 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80013b4:	2100      	movs	r1, #0
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_I2C3_Init+0x74>)
 80013b8:	f004 ff3b 	bl	8006232 <HAL_I2CEx_ConfigDigitalFilter>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80013c2:	f000 fe67 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200006d0 	.word	0x200006d0
 80013d0:	40007800 	.word	0x40007800
 80013d4:	40707eb4 	.word	0x40707eb4

080013d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013de:	f107 0310 	add.w	r3, r7, #16
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <MX_TIM2_Init+0x94>)
 80013f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 156 - 1;
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <MX_TIM2_Init+0x94>)
 8001400:	229b      	movs	r2, #155	; 0x9b
 8001402:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_TIM2_Init+0x94>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <MX_TIM2_Init+0x94>)
 800140c:	2209      	movs	r2, #9
 800140e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001410:	4b16      	ldr	r3, [pc, #88]	; (800146c <MX_TIM2_Init+0x94>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <MX_TIM2_Init+0x94>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800141c:	4813      	ldr	r0, [pc, #76]	; (800146c <MX_TIM2_Init+0x94>)
 800141e:	f007 fc8d 	bl	8008d3c <HAL_TIM_Base_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001428:	f000 fe34 	bl	8002094 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001430:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	4619      	mov	r1, r3
 8001438:	480c      	ldr	r0, [pc, #48]	; (800146c <MX_TIM2_Init+0x94>)
 800143a:	f007 fecd 	bl	80091d8 <HAL_TIM_ConfigClockSource>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001444:	f000 fe26 	bl	8002094 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001448:	2320      	movs	r3, #32
 800144a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_TIM2_Init+0x94>)
 8001456:	f008 f957 	bl	8009708 <HAL_TIMEx_MasterConfigSynchronization>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001460:	f000 fe18 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	3720      	adds	r7, #32
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000724 	.word	0x20000724

08001470 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001476:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <MX_DMA_Init+0x80>)
 8001478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800147a:	4a1d      	ldr	r2, [pc, #116]	; (80014f0 <MX_DMA_Init+0x80>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6493      	str	r3, [r2, #72]	; 0x48
 8001482:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <MX_DMA_Init+0x80>)
 8001484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800148e:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <MX_DMA_Init+0x80>)
 8001490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001492:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <MX_DMA_Init+0x80>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6493      	str	r3, [r2, #72]	; 0x48
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <MX_DMA_Init+0x80>)
 800149c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	200b      	movs	r0, #11
 80014ac:	f003 f9b9 	bl	8004822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014b0:	200b      	movs	r0, #11
 80014b2:	f003 f9d0 	bl	8004856 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	200c      	movs	r0, #12
 80014bc:	f003 f9b1 	bl	8004822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014c0:	200c      	movs	r0, #12
 80014c2:	f003 f9c8 	bl	8004856 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	200d      	movs	r0, #13
 80014cc:	f003 f9a9 	bl	8004822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80014d0:	200d      	movs	r0, #13
 80014d2:	f003 f9c0 	bl	8004856 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	200e      	movs	r0, #14
 80014dc:	f003 f9a1 	bl	8004822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80014e0:	200e      	movs	r0, #14
 80014e2:	f003 f9b8 	bl	8004856 <HAL_NVIC_EnableIRQ>

}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000

080014f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800150a:	4b4d      	ldr	r3, [pc, #308]	; (8001640 <MX_GPIO_Init+0x14c>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	4a4c      	ldr	r2, [pc, #304]	; (8001640 <MX_GPIO_Init+0x14c>)
 8001510:	f043 0320 	orr.w	r3, r3, #32
 8001514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001516:	4b4a      	ldr	r3, [pc, #296]	; (8001640 <MX_GPIO_Init+0x14c>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	f003 0320 	and.w	r3, r3, #32
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	4b47      	ldr	r3, [pc, #284]	; (8001640 <MX_GPIO_Init+0x14c>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	4a46      	ldr	r2, [pc, #280]	; (8001640 <MX_GPIO_Init+0x14c>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152e:	4b44      	ldr	r3, [pc, #272]	; (8001640 <MX_GPIO_Init+0x14c>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	4b41      	ldr	r3, [pc, #260]	; (8001640 <MX_GPIO_Init+0x14c>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	4a40      	ldr	r2, [pc, #256]	; (8001640 <MX_GPIO_Init+0x14c>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001546:	4b3e      	ldr	r3, [pc, #248]	; (8001640 <MX_GPIO_Init+0x14c>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001552:	4b3b      	ldr	r3, [pc, #236]	; (8001640 <MX_GPIO_Init+0x14c>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	4a3a      	ldr	r2, [pc, #232]	; (8001640 <MX_GPIO_Init+0x14c>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155e:	4b38      	ldr	r3, [pc, #224]	; (8001640 <MX_GPIO_Init+0x14c>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ERRATA_FIX1_Pin|ERRATA_FIX2_Pin|ERRATA_FIX3_Pin|ERRATA_FIX4_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 41d8 	mov.w	r1, #27648	; 0x6c00
 8001570:	4834      	ldr	r0, [pc, #208]	; (8001644 <MX_GPIO_Init+0x150>)
 8001572:	f004 f84d 	bl	8005610 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IND_LED_R_Pin|IND_LED_G_Pin|IND_LED_B_Pin, GPIO_PIN_SET);
 8001576:	2201      	movs	r2, #1
 8001578:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800157c:	4832      	ldr	r0, [pc, #200]	; (8001648 <MX_GPIO_Init+0x154>)
 800157e:	f004 f847 	bl	8005610 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ERRATA_FIX1_Pin ERRATA_FIX2_Pin ERRATA_FIX3_Pin ERRATA_FIX4_Pin */
  GPIO_InitStruct.Pin = ERRATA_FIX1_Pin|ERRATA_FIX2_Pin|ERRATA_FIX3_Pin|ERRATA_FIX4_Pin;
 8001582:	f44f 43d8 	mov.w	r3, #27648	; 0x6c00
 8001586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001588:	2301      	movs	r3, #1
 800158a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4619      	mov	r1, r3
 800159a:	482a      	ldr	r0, [pc, #168]	; (8001644 <MX_GPIO_Init+0x150>)
 800159c:	f003 feb6 	bl	800530c <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_ALERT_Pin */
  GPIO_InitStruct.Pin = TEMP_ALERT_Pin;
 80015a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_ALERT_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b8:	f003 fea8 	bl	800530c <HAL_GPIO_Init>

  /*Configure GPIO pins : IND_LED_R_Pin IND_LED_G_Pin IND_LED_B_Pin */
  GPIO_InitStruct.Pin = IND_LED_R_Pin|IND_LED_G_Pin|IND_LED_B_Pin;
 80015bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	481c      	ldr	r0, [pc, #112]	; (8001648 <MX_GPIO_Init+0x154>)
 80015d6:	f003 fe99 	bl	800530c <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_SHORT_Pin */
  GPIO_InitStruct.Pin = TRIG_SHORT_Pin;
 80015da:	2320      	movs	r3, #32
 80015dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_SHORT_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	4815      	ldr	r0, [pc, #84]	; (8001644 <MX_GPIO_Init+0x150>)
 80015f0:	f003 fe8c 	bl	800530c <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_EXT_2_Pin */
  GPIO_InitStruct.Pin = TRIG_EXT_2_Pin;
 80015f4:	2340      	movs	r3, #64	; 0x40
 80015f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015fe:	2301      	movs	r3, #1
 8001600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_EXT_2_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	480e      	ldr	r0, [pc, #56]	; (8001644 <MX_GPIO_Init+0x150>)
 800160a:	f003 fe7f 	bl	800530c <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_EXT_1_Pin */
  GPIO_InitStruct.Pin = TRIG_EXT_1_Pin;
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001612:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001618:	2302      	movs	r3, #2
 800161a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_EXT_1_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	4808      	ldr	r0, [pc, #32]	; (8001644 <MX_GPIO_Init+0x150>)
 8001624:	f003 fe72 	bl	800530c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001628:	2200      	movs	r2, #0
 800162a:	2100      	movs	r1, #0
 800162c:	2017      	movs	r0, #23
 800162e:	f003 f8f8 	bl	8004822 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001632:	2017      	movs	r0, #23
 8001634:	f003 f90f 	bl	8004856 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	; 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40021000 	.word	0x40021000
 8001644:	48000400 	.word	0x48000400
 8001648:	48000800 	.word	0x48000800

0800164c <InterpretConfig>:

/* USER CODE BEGIN 4 */

int InterpretConfig(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b0a6      	sub	sp, #152	; 0x98
 8001650:	af00      	add	r7, sp, #0
	char variable_name[CFG_VAR_SIZE];
	char variable_value[CFG_VAR_SIZE];
	memset(variable_name, 0, sizeof(variable_name));
 8001652:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001656:	2240      	movs	r2, #64	; 0x40
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f00d fc39 	bl	800eed2 <memset>
	memset(variable_value, 0, sizeof(variable_value));
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	2240      	movs	r2, #64	; 0x40
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f00d fc32 	bl	800eed2 <memset>
	int variable_name_indexes[2] = {0, 0};
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
	int variable_value_indexes[2] = {0, 0};
 8001676:	2300      	movs	r3, #0
 8001678:	603b      	str	r3, [r7, #0]
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
	char reading_status = 'n';
 800167e:	236e      	movs	r3, #110	; 0x6e
 8001680:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	for(int i = 0; i < USB_RX_BUFFER_SIZE; i++){
 8001684:	2300      	movs	r3, #0
 8001686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800168a:	e077      	b.n	800177c <InterpretConfig+0x130>
		if(rx_buffer[i] == '\0'){
 800168c:	4a42      	ldr	r2, [pc, #264]	; (8001798 <InterpretConfig+0x14c>)
 800168e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001692:	4413      	add	r3, r2
 8001694:	f993 3000 	ldrsb.w	r3, [r3]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d074      	beq.n	8001786 <InterpretConfig+0x13a>
			break;
		}
		// Reading the variable name
		if(reading_status == 'n'){
 800169c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80016a0:	2b6e      	cmp	r3, #110	; 0x6e
 80016a2:	d112      	bne.n	80016ca <InterpretConfig+0x7e>
			if(rx_buffer[i] == ':') {
 80016a4:	4a3c      	ldr	r2, [pc, #240]	; (8001798 <InterpretConfig+0x14c>)
 80016a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016aa:	4413      	add	r3, r2
 80016ac:	f993 3000 	ldrsb.w	r3, [r3]
 80016b0:	2b3a      	cmp	r3, #58	; 0x3a
 80016b2:	d15e      	bne.n	8001772 <InterpretConfig+0x126>
				variable_name_indexes[1] = i;
 80016b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016b8:	60fb      	str	r3, [r7, #12]
				variable_value_indexes[0] = i+1;
 80016ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016be:	3301      	adds	r3, #1
 80016c0:	603b      	str	r3, [r7, #0]
				reading_status = 'v';
 80016c2:	2376      	movs	r3, #118	; 0x76
 80016c4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80016c8:	e053      	b.n	8001772 <InterpretConfig+0x126>
			}
		}
		// Reading the variable value
		else if(reading_status == 'v'){
 80016ca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80016ce:	2b76      	cmp	r3, #118	; 0x76
 80016d0:	d14f      	bne.n	8001772 <InterpretConfig+0x126>
			if(rx_buffer[i] == ';') {
 80016d2:	4a31      	ldr	r2, [pc, #196]	; (8001798 <InterpretConfig+0x14c>)
 80016d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016d8:	4413      	add	r3, r2
 80016da:	f993 3000 	ldrsb.w	r3, [r3]
 80016de:	2b3b      	cmp	r3, #59	; 0x3b
 80016e0:	d147      	bne.n	8001772 <InterpretConfig+0x126>
				variable_value_indexes[1] = i;
 80016e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016e6:	607b      	str	r3, [r7, #4]

				strncpy(variable_name, ((char*)rx_buffer + variable_name_indexes[0]), (variable_name_indexes[1] - variable_name_indexes[0]));
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <InterpretConfig+0x14c>)
 80016ee:	18d1      	adds	r1, r2, r3
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	461a      	mov	r2, r3
 80016f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016fc:	4618      	mov	r0, r3
 80016fe:	f00d fbf0 	bl	800eee2 <strncpy>
				variable_name[variable_name_indexes[1] + 1] = '\0';
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	3301      	adds	r3, #1
 8001706:	3398      	adds	r3, #152	; 0x98
 8001708:	443b      	add	r3, r7
 800170a:	2200      	movs	r2, #0
 800170c:	f803 2c48 	strb.w	r2, [r3, #-72]
				strncpy(variable_value, ((char*)rx_buffer + variable_value_indexes[0]), (variable_value_indexes[1] - variable_value_indexes[0]));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <InterpretConfig+0x14c>)
 8001716:	18d1      	adds	r1, r2, r3
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	461a      	mov	r2, r3
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	4618      	mov	r0, r3
 8001726:	f00d fbdc 	bl	800eee2 <strncpy>
				variable_value[variable_value_indexes[1] + 1] = '\0';
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3301      	adds	r3, #1
 800172e:	3398      	adds	r3, #152	; 0x98
 8001730:	443b      	add	r3, r7
 8001732:	2200      	movs	r2, #0
 8001734:	f803 2c88 	strb.w	r2, [r3, #-136]

				InterpretVariable(variable_name, variable_value);
 8001738:	f107 0210 	add.w	r2, r7, #16
 800173c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f000 f82c 	bl	80017a0 <InterpretVariable>
				memset(variable_name, 0, sizeof(variable_name));
 8001748:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800174c:	2240      	movs	r2, #64	; 0x40
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f00d fbbe 	bl	800eed2 <memset>
				memset(variable_value, 0, sizeof(variable_value));
 8001756:	f107 0310 	add.w	r3, r7, #16
 800175a:	2240      	movs	r2, #64	; 0x40
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f00d fbb7 	bl	800eed2 <memset>
				variable_name_indexes[0] = i + 1;
 8001764:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001768:	3301      	adds	r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
				reading_status = 'n';
 800176c:	236e      	movs	r3, #110	; 0x6e
 800176e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	for(int i = 0; i < USB_RX_BUFFER_SIZE; i++){
 8001772:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001776:	3301      	adds	r3, #1
 8001778:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800177c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001780:	2bff      	cmp	r3, #255	; 0xff
 8001782:	dd83      	ble.n	800168c <InterpretConfig+0x40>
 8001784:	e000      	b.n	8001788 <InterpretConfig+0x13c>
			break;
 8001786:	bf00      	nop
			}
		}
	}

	conv_state = CFG_INTERPRETED;
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <InterpretConfig+0x150>)
 800178a:	2202      	movs	r2, #2
 800178c:	701a      	strb	r2, [r3, #0]
	return 1;
 800178e:	2301      	movs	r3, #1
}
 8001790:	4618      	mov	r0, r3
 8001792:	3798      	adds	r7, #152	; 0x98
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200026bc 	.word	0x200026bc
 800179c:	200027bc 	.word	0x200027bc

080017a0 <InterpretVariable>:

int InterpretVariable(char name[CFG_VAR_SIZE], char value[CFG_VAR_SIZE]) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	if(strcmp(name, "RecLen") == 0) {
 80017aa:	4917      	ldr	r1, [pc, #92]	; (8001808 <InterpretVariable+0x68>)
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7fe fd37 	bl	8000220 <strcmp>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d107      	bne.n	80017c8 <InterpretVariable+0x28>
		record_length_ms = (uint16_t)atoi(value);
 80017b8:	6838      	ldr	r0, [r7, #0]
 80017ba:	f00c fd6f 	bl	800e29c <atoi>
 80017be:	4603      	mov	r3, r0
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <InterpretVariable+0x6c>)
 80017c4:	801a      	strh	r2, [r3, #0]
 80017c6:	e019      	b.n	80017fc <InterpretVariable+0x5c>
	}
	else if(strcmp(name, "RecInt") == 0) {
 80017c8:	4911      	ldr	r1, [pc, #68]	; (8001810 <InterpretVariable+0x70>)
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7fe fd28 	bl	8000220 <strcmp>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d107      	bne.n	80017e6 <InterpretVariable+0x46>
		record_interval_us = (uint16_t)atoi(value);
 80017d6:	6838      	ldr	r0, [r7, #0]
 80017d8:	f00c fd60 	bl	800e29c <atoi>
 80017dc:	4603      	mov	r3, r0
 80017de:	b29a      	uxth	r2, r3
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <InterpretVariable+0x74>)
 80017e2:	801a      	strh	r2, [r3, #0]
 80017e4:	e00a      	b.n	80017fc <InterpretVariable+0x5c>
	}
	else if(strcmp(name, "TcType") == 0) {
 80017e6:	490c      	ldr	r1, [pc, #48]	; (8001818 <InterpretVariable+0x78>)
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7fe fd19 	bl	8000220 <strcmp>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d103      	bne.n	80017fc <InterpretVariable+0x5c>
		tc_type = value[0];
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	781a      	ldrb	r2, [r3, #0]
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <InterpretVariable+0x7c>)
 80017fa:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 80017fc:	2301      	movs	r3, #1
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	08011f78 	.word	0x08011f78
 800180c:	20000008 	.word	0x20000008
 8001810:	08011f80 	.word	0x08011f80
 8001814:	2000000a 	.word	0x2000000a
 8001818:	08011f88 	.word	0x08011f88
 800181c:	2000000c 	.word	0x2000000c

08001820 <SetupMeasurement>:

int SetupMeasurement(void){
 8001820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001824:	b090      	sub	sp, #64	; 0x40
 8001826:	af04      	add	r7, sp, #16
	// > Set the correct analog reference voltage and get the relevant coefficients

	const double *used_coefficients;
	uint8_t coefficients_count;
	if(tc_type == 'E') {
 8001828:	4b63      	ldr	r3, [pc, #396]	; (80019b8 <SetupMeasurement+0x198>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b45      	cmp	r3, #69	; 0x45
 800182e:	d10b      	bne.n	8001848 <SetupMeasurement+0x28>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2); // 2.9V
 8001830:	2020      	movs	r0, #32
 8001832:	f001 f925 	bl	8002a80 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		analog_reference_voltage = 2.9;
 8001836:	4b61      	ldr	r3, [pc, #388]	; (80019bc <SetupMeasurement+0x19c>)
 8001838:	4a61      	ldr	r2, [pc, #388]	; (80019c0 <SetupMeasurement+0x1a0>)
 800183a:	601a      	str	r2, [r3, #0]
		used_coefficients = type_e_coefficients;
 800183c:	4b61      	ldr	r3, [pc, #388]	; (80019c4 <SetupMeasurement+0x1a4>)
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
		coefficients_count = type_e_coefficients_count;
 8001840:	230e      	movs	r3, #14
 8001842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001846:	e02e      	b.n	80018a6 <SetupMeasurement+0x86>
	}
	else if(tc_type == 'J') {
 8001848:	4b5b      	ldr	r3, [pc, #364]	; (80019b8 <SetupMeasurement+0x198>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b4a      	cmp	r3, #74	; 0x4a
 800184e:	d10b      	bne.n	8001868 <SetupMeasurement+0x48>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1); // 2.5V
 8001850:	2010      	movs	r0, #16
 8001852:	f001 f915 	bl	8002a80 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		analog_reference_voltage = 2.5;
 8001856:	4b59      	ldr	r3, [pc, #356]	; (80019bc <SetupMeasurement+0x19c>)
 8001858:	4a5b      	ldr	r2, [pc, #364]	; (80019c8 <SetupMeasurement+0x1a8>)
 800185a:	601a      	str	r2, [r3, #0]
		used_coefficients = type_j_coefficients;
 800185c:	4b5b      	ldr	r3, [pc, #364]	; (80019cc <SetupMeasurement+0x1ac>)
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
		coefficients_count = type_j_coefficients_count;
 8001860:	2309      	movs	r3, #9
 8001862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001866:	e01e      	b.n	80018a6 <SetupMeasurement+0x86>
	}
	else if(tc_type == 'K') {
 8001868:	4b53      	ldr	r3, [pc, #332]	; (80019b8 <SetupMeasurement+0x198>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b4b      	cmp	r3, #75	; 0x4b
 800186e:	d10b      	bne.n	8001888 <SetupMeasurement+0x68>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0); // 2.048V
 8001870:	2000      	movs	r0, #0
 8001872:	f001 f905 	bl	8002a80 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		analog_reference_voltage = 2.048;
 8001876:	4b51      	ldr	r3, [pc, #324]	; (80019bc <SetupMeasurement+0x19c>)
 8001878:	4a55      	ldr	r2, [pc, #340]	; (80019d0 <SetupMeasurement+0x1b0>)
 800187a:	601a      	str	r2, [r3, #0]
		used_coefficients = type_k_coefficients;
 800187c:	4b55      	ldr	r3, [pc, #340]	; (80019d4 <SetupMeasurement+0x1b4>)
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
		coefficients_count = type_k_coefficients_count;
 8001880:	230b      	movs	r3, #11
 8001882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001886:	e00e      	b.n	80018a6 <SetupMeasurement+0x86>
	}
	else if(tc_type == 'T') {
 8001888:	4b4b      	ldr	r3, [pc, #300]	; (80019b8 <SetupMeasurement+0x198>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b54      	cmp	r3, #84	; 0x54
 800188e:	d10a      	bne.n	80018a6 <SetupMeasurement+0x86>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0); // 2.048V
 8001890:	2000      	movs	r0, #0
 8001892:	f001 f8f5 	bl	8002a80 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		analog_reference_voltage = 2.048;
 8001896:	4b49      	ldr	r3, [pc, #292]	; (80019bc <SetupMeasurement+0x19c>)
 8001898:	4a4d      	ldr	r2, [pc, #308]	; (80019d0 <SetupMeasurement+0x1b0>)
 800189a:	601a      	str	r2, [r3, #0]
		used_coefficients = type_t_coefficients;
 800189c:	4b4e      	ldr	r3, [pc, #312]	; (80019d8 <SetupMeasurement+0x1b8>)
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
		coefficients_count = type_t_coefficients_count;
 80018a0:	230f      	movs	r3, #15
 80018a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	}

	// > Calculate and set ADC sync timer
	target_conv_count = (record_length_ms * 1000) / record_interval_us;
 80018a6:	4b4d      	ldr	r3, [pc, #308]	; (80019dc <SetupMeasurement+0x1bc>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b0:	fb02 f303 	mul.w	r3, r2, r3
 80018b4:	4a4a      	ldr	r2, [pc, #296]	; (80019e0 <SetupMeasurement+0x1c0>)
 80018b6:	8812      	ldrh	r2, [r2, #0]
 80018b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80018bc:	4a49      	ldr	r2, [pc, #292]	; (80019e4 <SetupMeasurement+0x1c4>)
 80018be:	6013      	str	r3, [r2, #0]

	__HAL_TIM_SET_AUTORELOAD(&htim2, record_interval_us - 1);
 80018c0:	4b47      	ldr	r3, [pc, #284]	; (80019e0 <SetupMeasurement+0x1c0>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	1e5a      	subs	r2, r3, #1
 80018c6:	4b48      	ldr	r3, [pc, #288]	; (80019e8 <SetupMeasurement+0x1c8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80018cc:	4b44      	ldr	r3, [pc, #272]	; (80019e0 <SetupMeasurement+0x1c0>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b44      	ldr	r3, [pc, #272]	; (80019e8 <SetupMeasurement+0x1c8>)
 80018d6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(&htim2, record_interval_us - 1);
 80018d8:	4b41      	ldr	r3, [pc, #260]	; (80019e0 <SetupMeasurement+0x1c0>)
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	1e5a      	subs	r2, r3, #1
 80018de:	4b42      	ldr	r3, [pc, #264]	; (80019e8 <SetupMeasurement+0x1c8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	625a      	str	r2, [r3, #36]	; 0x24

	// > Calculate and set DAC value

	// Initiate a one shot temperature conversion
	uint8_t one_shot_conversion_command = 0b01000100;
 80018e4:	2344      	movs	r3, #68	; 0x44
 80018e6:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(&hi2c3, (TEMP_SENSOR_ADDR << 1), 0x1, I2C_MEMADD_SIZE_8BIT, &one_shot_conversion_command, 1, HAL_MAX_DELAY);
 80018e8:	f04f 33ff 	mov.w	r3, #4294967295
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	2301      	movs	r3, #1
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	1cfb      	adds	r3, r7, #3
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2301      	movs	r3, #1
 80018f8:	2201      	movs	r2, #1
 80018fa:	2190      	movs	r1, #144	; 0x90
 80018fc:	483b      	ldr	r0, [pc, #236]	; (80019ec <SetupMeasurement+0x1cc>)
 80018fe:	f003 ff5d 	bl	80057bc <HAL_I2C_Mem_Write>
	// Read the temperature
	uint8_t temp_buffer[2];
	HAL_I2C_Mem_Read(&hi2c3, (TEMP_SENSOR_ADDR << 1), 0x0, I2C_MEMADD_SIZE_8BIT, temp_buffer, 2, HAL_MAX_DELAY);
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	2302      	movs	r3, #2
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	463b      	mov	r3, r7
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2301      	movs	r3, #1
 8001912:	2200      	movs	r2, #0
 8001914:	2190      	movs	r1, #144	; 0x90
 8001916:	4835      	ldr	r0, [pc, #212]	; (80019ec <SetupMeasurement+0x1cc>)
 8001918:	f004 f864 	bl	80059e4 <HAL_I2C_Mem_Read>

	// Calculate the temperature in C
	uint8_t negative_temperature_flag = temp_buffer[0] >> 7;
 800191c:	783b      	ldrb	r3, [r7, #0]
 800191e:	09db      	lsrs	r3, r3, #7
 8001920:	76fb      	strb	r3, [r7, #27]
	temp_buffer[0] &= 0b01111111;
 8001922:	783b      	ldrb	r3, [r7, #0]
 8001924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001928:	b2db      	uxtb	r3, r3
 800192a:	703b      	strb	r3, [r7, #0]
	uint16_t sensor_output = (temp_buffer[0] << 2) | (temp_buffer[1] >> 6);
 800192c:	783b      	ldrb	r3, [r7, #0]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	b21a      	sxth	r2, r3
 8001932:	787b      	ldrb	r3, [r7, #1]
 8001934:	099b      	lsrs	r3, r3, #6
 8001936:	b2db      	uxtb	r3, r3
 8001938:	b21b      	sxth	r3, r3
 800193a:	4313      	orrs	r3, r2
 800193c:	b21b      	sxth	r3, r3
 800193e:	833b      	strh	r3, [r7, #24]

	if(negative_temperature_flag) {
 8001940:	7efb      	ldrb	r3, [r7, #27]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d014      	beq.n	8001970 <SetupMeasurement+0x150>
		cold_junction_temp = (sensor_output - 512)/4.0;
 8001946:	8b3b      	ldrh	r3, [r7, #24]
 8001948:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fe21 	bl	8000594 <__aeabi_i2d>
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <SetupMeasurement+0x1d0>)
 8001958:	f7fe ffb0 	bl	80008bc <__aeabi_ddiv>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	f7ff f978 	bl	8000c58 <__aeabi_d2f>
 8001968:	4603      	mov	r3, r0
 800196a:	4a22      	ldr	r2, [pc, #136]	; (80019f4 <SetupMeasurement+0x1d4>)
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e011      	b.n	8001994 <SetupMeasurement+0x174>
	}
	else{
		cold_junction_temp = (sensor_output)/4.0;
 8001970:	8b3b      	ldrh	r3, [r7, #24]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fe0e 	bl	8000594 <__aeabi_i2d>
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <SetupMeasurement+0x1d0>)
 800197e:	f7fe ff9d 	bl	80008bc <__aeabi_ddiv>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	f7ff f965 	bl	8000c58 <__aeabi_d2f>
 800198e:	4603      	mov	r3, r0
 8001990:	4a18      	ldr	r2, [pc, #96]	; (80019f4 <SetupMeasurement+0x1d4>)
 8001992:	6013      	str	r3, [r2, #0]
	}

	// Calculate the required DAC offset
	float cjc_offset_temperature = MINIMUM_TEMPERATURE - cold_junction_temp;
 8001994:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <SetupMeasurement+0x1d4>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800199e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a2:	edc7 7a05 	vstr	s15, [r7, #20]
	double cjc_offset_voltage = 0;
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for(int i = 0; i < coefficients_count; i++) {
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	e048      	b.n	8001a4a <SetupMeasurement+0x22a>
 80019b8:	2000000c 	.word	0x2000000c
 80019bc:	20000004 	.word	0x20000004
 80019c0:	4039999a 	.word	0x4039999a
 80019c4:	08012120 	.word	0x08012120
 80019c8:	40200000 	.word	0x40200000
 80019cc:	08012008 	.word	0x08012008
 80019d0:	4003126f 	.word	0x4003126f
 80019d4:	08012050 	.word	0x08012050
 80019d8:	080120a8 	.word	0x080120a8
 80019dc:	20000008 	.word	0x20000008
 80019e0:	2000000a 	.word	0x2000000a
 80019e4:	200027c0 	.word	0x200027c0
 80019e8:	20000724 	.word	0x20000724
 80019ec:	200006d0 	.word	0x200006d0
 80019f0:	40100000 	.word	0x40100000
 80019f4:	200027c8 	.word	0x200027c8
		cjc_offset_voltage += used_coefficients[i] * pow(cjc_offset_temperature, i);
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019fe:	4413      	add	r3, r2
 8001a00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001a04:	6978      	ldr	r0, [r7, #20]
 8001a06:	f7fe fdd7 	bl	80005b8 <__aeabi_f2d>
 8001a0a:	4682      	mov	sl, r0
 8001a0c:	468b      	mov	fp, r1
 8001a0e:	69f8      	ldr	r0, [r7, #28]
 8001a10:	f7fe fdc0 	bl	8000594 <__aeabi_i2d>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	ec43 2b11 	vmov	d1, r2, r3
 8001a1c:	ec4b ab10 	vmov	d0, sl, fp
 8001a20:	f00f fb64 	bl	80110ec <pow>
 8001a24:	ec53 2b10 	vmov	r2, r3, d0
 8001a28:	4640      	mov	r0, r8
 8001a2a:	4649      	mov	r1, r9
 8001a2c:	f7fe fe1c 	bl	8000668 <__aeabi_dmul>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a38:	f7fe fc60 	bl	80002fc <__adddf3>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for(int i = 0; i < coefficients_count; i++) {
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	3301      	adds	r3, #1
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	dbd1      	blt.n	80019f8 <SetupMeasurement+0x1d8>
	}

	double total_offset_calc = INAMP_OUTPUT_BUFFER_OFFSET + ((-1) * (cjc_offset_voltage * pow(10, -6)) * INAMP_GAIN);
 8001a54:	a36a      	add	r3, pc, #424	; (adr r3, 8001c00 <SetupMeasurement+0x3e0>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a5e:	f7fe fe03 	bl	8000668 <__aeabi_dmul>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4614      	mov	r4, r2
 8001a68:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001a6c:	a366      	add	r3, pc, #408	; (adr r3, 8001c08 <SetupMeasurement+0x3e8>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	4620      	mov	r0, r4
 8001a74:	4629      	mov	r1, r5
 8001a76:	f7fe fdf7 	bl	8000668 <__aeabi_dmul>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	a363      	add	r3, pc, #396	; (adr r3, 8001c10 <SetupMeasurement+0x3f0>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	f7fe fc38 	bl	80002fc <__adddf3>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t offset = (uint32_t)(total_offset_calc * 4096) / analog_reference_voltage;
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	4b4d      	ldr	r3, [pc, #308]	; (8001bd0 <SetupMeasurement+0x3b0>)
 8001a9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a9e:	f7fe fde3 	bl	8000668 <__aeabi_dmul>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f7ff f8b5 	bl	8000c18 <__aeabi_d2uiz>
 8001aae:	ee07 0a90 	vmov	s15, r0
 8001ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ab6:	4b47      	ldr	r3, [pc, #284]	; (8001bd4 <SetupMeasurement+0x3b4>)
 8001ab8:	ed93 7a00 	vldr	s14, [r3]
 8001abc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ac4:	ee17 3a90 	vmov	r3, s15
 8001ac8:	607b      	str	r3, [r7, #4]
	applied_voltage_offset = (float)(offset * analog_reference_voltage) / 4096;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ad4:	4b3f      	ldr	r3, [pc, #252]	; (8001bd4 <SetupMeasurement+0x3b4>)
 8001ad6:	edd3 7a00 	vldr	s15, [r3]
 8001ada:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ade:	eddf 6a3e 	vldr	s13, [pc, #248]	; 8001bd8 <SetupMeasurement+0x3b8>
 8001ae2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ae6:	4b3d      	ldr	r3, [pc, #244]	; (8001bdc <SetupMeasurement+0x3bc>)
 8001ae8:	edc3 7a00 	vstr	s15, [r3]

	// Set the DAC voltage
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, offset);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	483b      	ldr	r0, [pc, #236]	; (8001be0 <SetupMeasurement+0x3c0>)
 8001af4:	f002 ff58 	bl	80049a8 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001af8:	2100      	movs	r1, #0
 8001afa:	4839      	ldr	r0, [pc, #228]	; (8001be0 <SetupMeasurement+0x3c0>)
 8001afc:	f002 fee8 	bl	80048d0 <HAL_DAC_Start>


	// Calculate the target packet number
	target_packet_count = (record_length_ms * 1000.0 / record_interval_us) / (ADC_BUFFER_SIZE / 2);
 8001b00:	4b38      	ldr	r3, [pc, #224]	; (8001be4 <SetupMeasurement+0x3c4>)
 8001b02:	881b      	ldrh	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fd45 	bl	8000594 <__aeabi_i2d>
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <SetupMeasurement+0x3c8>)
 8001b10:	f7fe fdaa 	bl	8000668 <__aeabi_dmul>
 8001b14:	4602      	mov	r2, r0
 8001b16:	460b      	mov	r3, r1
 8001b18:	4614      	mov	r4, r2
 8001b1a:	461d      	mov	r5, r3
 8001b1c:	4b33      	ldr	r3, [pc, #204]	; (8001bec <SetupMeasurement+0x3cc>)
 8001b1e:	881b      	ldrh	r3, [r3, #0]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fd37 	bl	8000594 <__aeabi_i2d>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4620      	mov	r0, r4
 8001b2c:	4629      	mov	r1, r5
 8001b2e:	f7fe fec5 	bl	80008bc <__aeabi_ddiv>
 8001b32:	4602      	mov	r2, r0
 8001b34:	460b      	mov	r3, r1
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	4b2c      	ldr	r3, [pc, #176]	; (8001bf0 <SetupMeasurement+0x3d0>)
 8001b40:	f7fe febc 	bl	80008bc <__aeabi_ddiv>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	4610      	mov	r0, r2
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f7ff f83c 	bl	8000bc8 <__aeabi_d2iz>
 8001b50:	4603      	mov	r3, r0
 8001b52:	4a28      	ldr	r2, [pc, #160]	; (8001bf4 <SetupMeasurement+0x3d4>)
 8001b54:	6013      	str	r3, [r2, #0]
	if((int)(record_length_ms * 1000.0 / record_interval_us) % (ADC_BUFFER_SIZE / 2) != 0){
 8001b56:	4b23      	ldr	r3, [pc, #140]	; (8001be4 <SetupMeasurement+0x3c4>)
 8001b58:	881b      	ldrh	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fd1a 	bl	8000594 <__aeabi_i2d>
 8001b60:	f04f 0200 	mov.w	r2, #0
 8001b64:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <SetupMeasurement+0x3c8>)
 8001b66:	f7fe fd7f 	bl	8000668 <__aeabi_dmul>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4614      	mov	r4, r2
 8001b70:	461d      	mov	r5, r3
 8001b72:	4b1e      	ldr	r3, [pc, #120]	; (8001bec <SetupMeasurement+0x3cc>)
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7fe fd0c 	bl	8000594 <__aeabi_i2d>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	460b      	mov	r3, r1
 8001b80:	4620      	mov	r0, r4
 8001b82:	4629      	mov	r1, r5
 8001b84:	f7fe fe9a 	bl	80008bc <__aeabi_ddiv>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4610      	mov	r0, r2
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f7ff f81a 	bl	8000bc8 <__aeabi_d2iz>
 8001b94:	4602      	mov	r2, r0
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <SetupMeasurement+0x3d8>)
 8001b98:	fb83 1302 	smull	r1, r3, r3, r2
 8001b9c:	1159      	asrs	r1, r3, #5
 8001b9e:	17d3      	asrs	r3, r2, #31
 8001ba0:	1acb      	subs	r3, r1, r3
 8001ba2:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001ba6:	fb01 f303 	mul.w	r3, r1, r3
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d004      	beq.n	8001bba <SetupMeasurement+0x39a>
		target_packet_count += 1;
 8001bb0:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <SetupMeasurement+0x3d4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	4a0f      	ldr	r2, [pc, #60]	; (8001bf4 <SetupMeasurement+0x3d4>)
 8001bb8:	6013      	str	r3, [r2, #0]
	}

	conv_state = PARAMETERS_SET;
 8001bba:	4b10      	ldr	r3, [pc, #64]	; (8001bfc <SetupMeasurement+0x3dc>)
 8001bbc:	2203      	movs	r2, #3
 8001bbe:	701a      	strb	r2, [r3, #0]
	return 1;
 8001bc0:	2301      	movs	r3, #1
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3730      	adds	r7, #48	; 0x30
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bcc:	f3af 8000 	nop.w
 8001bd0:	40b00000 	.word	0x40b00000
 8001bd4:	20000004 	.word	0x20000004
 8001bd8:	45800000 	.word	0x45800000
 8001bdc:	200027cc 	.word	0x200027cc
 8001be0:	200006bc 	.word	0x200006bc
 8001be4:	20000008 	.word	0x20000008
 8001be8:	408f4000 	.word	0x408f4000
 8001bec:	2000000a 	.word	0x2000000a
 8001bf0:	407f4000 	.word	0x407f4000
 8001bf4:	20000774 	.word	0x20000774
 8001bf8:	10624dd3 	.word	0x10624dd3
 8001bfc:	200027bc 	.word	0x200027bc
 8001c00:	a0b5ed8d 	.word	0xa0b5ed8d
 8001c04:	3eb0c6f7 	.word	0x3eb0c6f7
 8001c08:	e6d1d609 	.word	0xe6d1d609
 8001c0c:	4066aa7d 	.word	0x4066aa7d
 8001c10:	9999999a 	.word	0x9999999a
 8001c14:	3fc99999 	.word	0x3fc99999

08001c18 <SendParameters>:

int SendParameters(void) {
 8001c18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c1c:	b0ca      	sub	sp, #296	; 0x128
 8001c1e:	af08      	add	r7, sp, #32
	unsigned char parameters_msg[USB_TX_HEADER_SIZE];

	sprintf((char *)parameters_msg, "CjcTmp:%.2f;AlgRfr:%.3f;AplOfs:%.4f;AdcBuf:%d;UsbBuf:%d;PktCnt:%d\n",
 8001c20:	4b2c      	ldr	r3, [pc, #176]	; (8001cd4 <SendParameters+0xbc>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fcc7 	bl	80005b8 <__aeabi_f2d>
 8001c2a:	4680      	mov	r8, r0
 8001c2c:	4689      	mov	r9, r1
 8001c2e:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <SendParameters+0xc0>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7fe fcc0 	bl	80005b8 <__aeabi_f2d>
 8001c38:	4604      	mov	r4, r0
 8001c3a:	460d      	mov	r5, r1
 8001c3c:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <SendParameters+0xc4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fcb9 	bl	80005b8 <__aeabi_f2d>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4925      	ldr	r1, [pc, #148]	; (8001ce0 <SendParameters+0xc8>)
 8001c4c:	6809      	ldr	r1, [r1, #0]
 8001c4e:	1d38      	adds	r0, r7, #4
 8001c50:	9106      	str	r1, [sp, #24]
 8001c52:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001c56:	9105      	str	r1, [sp, #20]
 8001c58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c5c:	9104      	str	r1, [sp, #16]
 8001c5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c62:	e9cd 4500 	strd	r4, r5, [sp]
 8001c66:	4642      	mov	r2, r8
 8001c68:	464b      	mov	r3, r9
 8001c6a:	491e      	ldr	r1, [pc, #120]	; (8001ce4 <SendParameters+0xcc>)
 8001c6c:	f00d f8ce 	bl	800ee0c <siprintf>
									analog_reference_voltage,
									applied_voltage_offset,
									ADC_BUFFER_SIZE,
									USB_TX_BUFFER_SIZE,
									target_packet_count);
	uint16_t line_len = strlen((char *)parameters_msg);
 8001c70:	1d3b      	adds	r3, r7, #4
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7fe fb34 	bl	80002e0 <strlen>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
	while(CDC_Transmit_FS(parameters_msg, line_len) != USBD_OK);
 8001c7e:	bf00      	nop
 8001c80:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f00b feb3 	bl	800d9f4 <CDC_Transmit_FS>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f5      	bne.n	8001c80 <SendParameters+0x68>

	HAL_GPIO_WritePin(IND_LED_G_GPIO_Port, IND_LED_G_Pin, GPIO_PIN_SET);
 8001c94:	2201      	movs	r2, #1
 8001c96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c9a:	4813      	ldr	r0, [pc, #76]	; (8001ce8 <SendParameters+0xd0>)
 8001c9c:	f003 fcb8 	bl	8005610 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_LED_R_GPIO_Port, IND_LED_R_Pin, GPIO_PIN_SET);
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001ca6:	4810      	ldr	r0, [pc, #64]	; (8001ce8 <SendParameters+0xd0>)
 8001ca8:	f003 fcb2 	bl	8005610 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_LED_B_GPIO_Port, IND_LED_B_Pin, GPIO_PIN_RESET);
 8001cac:	2200      	movs	r2, #0
 8001cae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cb2:	480d      	ldr	r0, [pc, #52]	; (8001ce8 <SendParameters+0xd0>)
 8001cb4:	f003 fcac 	bl	8005610 <HAL_GPIO_WritePin>
	measurement_activated = 0;
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <SendParameters+0xd4>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	601a      	str	r2, [r3, #0]
	conv_state = ARMED;
 8001cbe:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <SendParameters+0xd8>)
 8001cc0:	2204      	movs	r2, #4
 8001cc2:	701a      	strb	r2, [r3, #0]

	return 1;
 8001cc4:	2301      	movs	r3, #1
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200027c8 	.word	0x200027c8
 8001cd8:	20000004 	.word	0x20000004
 8001cdc:	200027cc 	.word	0x200027cc
 8001ce0:	20000774 	.word	0x20000774
 8001ce4:	08011f90 	.word	0x08011f90
 8001ce8:	48000800 	.word	0x48000800
 8001cec:	200027d8 	.word	0x200027d8
 8001cf0:	200027bc 	.word	0x200027bc

08001cf4 <StartMeasurement>:

int StartMeasurement(void) {
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IND_LED_G_GPIO_Port, IND_LED_G_Pin, GPIO_PIN_SET);
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cfe:	4820      	ldr	r0, [pc, #128]	; (8001d80 <StartMeasurement+0x8c>)
 8001d00:	f003 fc86 	bl	8005610 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_LED_R_GPIO_Port, IND_LED_R_Pin, GPIO_PIN_RESET);
 8001d04:	2200      	movs	r2, #0
 8001d06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d0a:	481d      	ldr	r0, [pc, #116]	; (8001d80 <StartMeasurement+0x8c>)
 8001d0c:	f003 fc80 	bl	8005610 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_LED_B_GPIO_Port, IND_LED_B_Pin, GPIO_PIN_SET);
 8001d10:	2201      	movs	r2, #1
 8001d12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d16:	481a      	ldr	r0, [pc, #104]	; (8001d80 <StartMeasurement+0x8c>)
 8001d18:	f003 fc7a 	bl	8005610 <HAL_GPIO_WritePin>

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001d1c:	217f      	movs	r1, #127	; 0x7f
 8001d1e:	4819      	ldr	r0, [pc, #100]	; (8001d84 <StartMeasurement+0x90>)
 8001d20:	f002 fb3a 	bl	8004398 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffers[0], ADC_BUFFER_SIZE);
 8001d24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d28:	4917      	ldr	r1, [pc, #92]	; (8001d88 <StartMeasurement+0x94>)
 8001d2a:	4816      	ldr	r0, [pc, #88]	; (8001d84 <StartMeasurement+0x90>)
 8001d2c:	f001 fb1c 	bl	8003368 <HAL_ADC_Start_DMA>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001d30:	217f      	movs	r1, #127	; 0x7f
 8001d32:	4816      	ldr	r0, [pc, #88]	; (8001d8c <StartMeasurement+0x98>)
 8001d34:	f002 fb30 	bl	8004398 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buffers[1], ADC_BUFFER_SIZE);
 8001d38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d3c:	4914      	ldr	r1, [pc, #80]	; (8001d90 <StartMeasurement+0x9c>)
 8001d3e:	4813      	ldr	r0, [pc, #76]	; (8001d8c <StartMeasurement+0x98>)
 8001d40:	f001 fb12 	bl	8003368 <HAL_ADC_Start_DMA>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8001d44:	217f      	movs	r1, #127	; 0x7f
 8001d46:	4813      	ldr	r0, [pc, #76]	; (8001d94 <StartMeasurement+0xa0>)
 8001d48:	f002 fb26 	bl	8004398 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc_buffers[2], ADC_BUFFER_SIZE);
 8001d4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d50:	4911      	ldr	r1, [pc, #68]	; (8001d98 <StartMeasurement+0xa4>)
 8001d52:	4810      	ldr	r0, [pc, #64]	; (8001d94 <StartMeasurement+0xa0>)
 8001d54:	f001 fb08 	bl	8003368 <HAL_ADC_Start_DMA>
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8001d58:	217f      	movs	r1, #127	; 0x7f
 8001d5a:	4810      	ldr	r0, [pc, #64]	; (8001d9c <StartMeasurement+0xa8>)
 8001d5c:	f002 fb1c 	bl	8004398 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc_buffers[3], ADC_BUFFER_SIZE);
 8001d60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d64:	490e      	ldr	r1, [pc, #56]	; (8001da0 <StartMeasurement+0xac>)
 8001d66:	480d      	ldr	r0, [pc, #52]	; (8001d9c <StartMeasurement+0xa8>)
 8001d68:	f001 fafe 	bl	8003368 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8001d6c:	480d      	ldr	r0, [pc, #52]	; (8001da4 <StartMeasurement+0xb0>)
 8001d6e:	f007 f83d 	bl	8008dec <HAL_TIM_Base_Start_IT>
	conv_state = MEASURING;
 8001d72:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <StartMeasurement+0xb4>)
 8001d74:	2205      	movs	r2, #5
 8001d76:	701a      	strb	r2, [r3, #0]

	return 1;
 8001d78:	2301      	movs	r3, #1
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	48000800 	.word	0x48000800
 8001d84:	2000038c 	.word	0x2000038c
 8001d88:	2000077c 	.word	0x2000077c
 8001d8c:	200003f8 	.word	0x200003f8
 8001d90:	20000f4c 	.word	0x20000f4c
 8001d94:	20000464 	.word	0x20000464
 8001d98:	2000171c 	.word	0x2000171c
 8001d9c:	200004d0 	.word	0x200004d0
 8001da0:	20001eec 	.word	0x20001eec
 8001da4:	20000724 	.word	0x20000724
 8001da8:	200027bc 	.word	0x200027bc

08001dac <HAL_ADC_ConvHalfCpltCallback>:

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d103      	bne.n	8001dc4 <HAL_ADC_ConvHalfCpltCallback+0x18>
		adc_state[0] = START_FULL;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	; (8001e04 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	701a      	strb	r2, [r3, #0]
		adc_state[2] = START_FULL;
	}
	else if(hadc == &hadc4){
		adc_state[3] = START_FULL;
	}
}
 8001dc2:	e016      	b.n	8001df2 <HAL_ADC_ConvHalfCpltCallback+0x46>
	else if(hadc == &hadc2){
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a10      	ldr	r2, [pc, #64]	; (8001e08 <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d103      	bne.n	8001dd4 <HAL_ADC_ConvHalfCpltCallback+0x28>
		adc_state[1] = START_FULL;
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	705a      	strb	r2, [r3, #1]
}
 8001dd2:	e00e      	b.n	8001df2 <HAL_ADC_ConvHalfCpltCallback+0x46>
	else if(hadc == &hadc3){
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d103      	bne.n	8001de4 <HAL_ADC_ConvHalfCpltCallback+0x38>
		adc_state[2] = START_FULL;
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	709a      	strb	r2, [r3, #2]
}
 8001de2:	e006      	b.n	8001df2 <HAL_ADC_ConvHalfCpltCallback+0x46>
	else if(hadc == &hadc4){
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d102      	bne.n	8001df2 <HAL_ADC_ConvHalfCpltCallback+0x46>
		adc_state[3] = START_FULL;
 8001dec:	4b05      	ldr	r3, [pc, #20]	; (8001e04 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8001dee:	2201      	movs	r2, #1
 8001df0:	70da      	strb	r2, [r3, #3]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	2000038c 	.word	0x2000038c
 8001e04:	200027d0 	.word	0x200027d0
 8001e08:	200003f8 	.word	0x200003f8
 8001e0c:	20000464 	.word	0x20000464
 8001e10:	200004d0 	.word	0x200004d0

08001e14 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <HAL_ADC_ConvCpltCallback+0x54>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d103      	bne.n	8001e2c <HAL_ADC_ConvCpltCallback+0x18>
		adc_state[0] = END_FULL;
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <HAL_ADC_ConvCpltCallback+0x58>)
 8001e26:	2202      	movs	r2, #2
 8001e28:	701a      	strb	r2, [r3, #0]
		adc_state[2] = END_FULL;
	}
	else if(hadc == &hadc4){
		adc_state[3] = END_FULL;
	}
}
 8001e2a:	e016      	b.n	8001e5a <HAL_ADC_ConvCpltCallback+0x46>
	else if(hadc == &hadc2){
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	4a10      	ldr	r2, [pc, #64]	; (8001e70 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d103      	bne.n	8001e3c <HAL_ADC_ConvCpltCallback+0x28>
		adc_state[1] = END_FULL;
 8001e34:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <HAL_ADC_ConvCpltCallback+0x58>)
 8001e36:	2202      	movs	r2, #2
 8001e38:	705a      	strb	r2, [r3, #1]
}
 8001e3a:	e00e      	b.n	8001e5a <HAL_ADC_ConvCpltCallback+0x46>
	else if(hadc == &hadc3){
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	4a0d      	ldr	r2, [pc, #52]	; (8001e74 <HAL_ADC_ConvCpltCallback+0x60>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d103      	bne.n	8001e4c <HAL_ADC_ConvCpltCallback+0x38>
		adc_state[2] = END_FULL;
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <HAL_ADC_ConvCpltCallback+0x58>)
 8001e46:	2202      	movs	r2, #2
 8001e48:	709a      	strb	r2, [r3, #2]
}
 8001e4a:	e006      	b.n	8001e5a <HAL_ADC_ConvCpltCallback+0x46>
	else if(hadc == &hadc4){
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <HAL_ADC_ConvCpltCallback+0x64>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d102      	bne.n	8001e5a <HAL_ADC_ConvCpltCallback+0x46>
		adc_state[3] = END_FULL;
 8001e54:	4b05      	ldr	r3, [pc, #20]	; (8001e6c <HAL_ADC_ConvCpltCallback+0x58>)
 8001e56:	2202      	movs	r2, #2
 8001e58:	70da      	strb	r2, [r3, #3]
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	2000038c 	.word	0x2000038c
 8001e6c:	200027d0 	.word	0x200027d0
 8001e70:	200003f8 	.word	0x200003f8
 8001e74:	20000464 	.word	0x20000464
 8001e78:	200004d0 	.word	0x200004d0

08001e7c <SendData>:

int SendData(char buffer_id) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	f5ad 6d7c 	sub.w	sp, sp, #4032	; 0xfc0
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	4602      	mov	r2, r0
 8001e86:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 8001e8a:	f6a3 73b9 	subw	r3, r3, #4025	; 0xfb9
 8001e8e:	701a      	strb	r2, [r3, #0]
	// > Send the ADC data
	unsigned char tx_buffer[USB_TX_BUFFER_SIZE];

	// Determine the ADC buffer start index for the packet
	unsigned int adc_buffer_start_index;
	if(buffer_id == 's'){
 8001e90:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 8001e94:	f6a3 73b9 	subw	r3, r3, #4025	; 0xfb9
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b73      	cmp	r3, #115	; 0x73
 8001e9c:	d103      	bne.n	8001ea6 <SendData+0x2a>
		adc_buffer_start_index = 0;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f8c7 3fbc 	str.w	r3, [r7, #4028]	; 0xfbc
 8001ea4:	e00a      	b.n	8001ebc <SendData+0x40>
	}
	else if(buffer_id == 'e') {
 8001ea6:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 8001eaa:	f6a3 73b9 	subw	r3, r3, #4025	; 0xfb9
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	2b65      	cmp	r3, #101	; 0x65
 8001eb2:	d103      	bne.n	8001ebc <SendData+0x40>
		adc_buffer_start_index = ADC_BUFFER_SIZE/2;
 8001eb4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001eb8:	f8c7 3fbc 	str.w	r3, [r7, #4028]	; 0xfbc
	}


	unsigned int tx_start_index = 0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 3fb8 	str.w	r3, [r7, #4024]	; 0xfb8
	// Iterate through all ADCs
	for(int adc_index = 0; adc_index < MAX_CHANNEL_COUNT; adc_index++){
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 3fb4 	str.w	r3, [r7, #4020]	; 0xfb4
 8001ec8:	e053      	b.n	8001f72 <SendData+0xf6>

		for(int i = 0; i < ADC_BUFFER_SIZE/2; i++){
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f8c7 3fb0 	str.w	r3, [r7, #4016]	; 0xfb0
 8001ed0:	e03f      	b.n	8001f52 <SendData+0xd6>
			tx_buffer[tx_start_index + (i*2)+1] = (uint8_t)(adc_buffers[adc_index][adc_buffer_start_index + i] & 0x00FF);
 8001ed2:	f8d7 2fb0 	ldr.w	r2, [r7, #4016]	; 0xfb0
 8001ed6:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	; 0xfbc
 8001eda:	4413      	add	r3, r2
 8001edc:	493b      	ldr	r1, [pc, #236]	; (8001fcc <SendData+0x150>)
 8001ede:	f8d7 2fb4 	ldr.w	r2, [r7, #4020]	; 0xfb4
 8001ee2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ee6:	fb00 f202 	mul.w	r2, r0, r2
 8001eea:	4413      	add	r3, r2
 8001eec:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001ef0:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	; 0xfb0
 8001ef4:	005b      	lsls	r3, r3, #1
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	; 0xfb8
 8001efc:	440b      	add	r3, r1
 8001efe:	3301      	adds	r3, #1
 8001f00:	b2d1      	uxtb	r1, r2
 8001f02:	f507 627c 	add.w	r2, r7, #4032	; 0xfc0
 8001f06:	f6a2 72b4 	subw	r2, r2, #4020	; 0xfb4
 8001f0a:	54d1      	strb	r1, [r2, r3]
			tx_buffer[tx_start_index + i*2] = (uint8_t)((adc_buffers[adc_index][adc_buffer_start_index + i] >> 8) & 0x00FF);
 8001f0c:	f8d7 2fb0 	ldr.w	r2, [r7, #4016]	; 0xfb0
 8001f10:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	; 0xfbc
 8001f14:	4413      	add	r3, r2
 8001f16:	492d      	ldr	r1, [pc, #180]	; (8001fcc <SendData+0x150>)
 8001f18:	f8d7 2fb4 	ldr.w	r2, [r7, #4020]	; 0xfb4
 8001f1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f20:	fb00 f202 	mul.w	r2, r0, r2
 8001f24:	4413      	add	r3, r2
 8001f26:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001f2a:	0a1b      	lsrs	r3, r3, #8
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	; 0xfb0
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	4619      	mov	r1, r3
 8001f36:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	; 0xfb8
 8001f3a:	440b      	add	r3, r1
 8001f3c:	b2d1      	uxtb	r1, r2
 8001f3e:	f507 627c 	add.w	r2, r7, #4032	; 0xfc0
 8001f42:	f6a2 72b4 	subw	r2, r2, #4020	; 0xfb4
 8001f46:	54d1      	strb	r1, [r2, r3]
		for(int i = 0; i < ADC_BUFFER_SIZE/2; i++){
 8001f48:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	; 0xfb0
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	f8c7 3fb0 	str.w	r3, [r7, #4016]	; 0xfb0
 8001f52:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	; 0xfb0
 8001f56:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f5a:	dbba      	blt.n	8001ed2 <SendData+0x56>
		}
		tx_start_index += ADC_BUFFER_SIZE;
 8001f5c:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	; 0xfb8
 8001f60:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001f64:	f8c7 3fb8 	str.w	r3, [r7, #4024]	; 0xfb8
	for(int adc_index = 0; adc_index < MAX_CHANNEL_COUNT; adc_index++){
 8001f68:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	; 0xfb4
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f8c7 3fb4 	str.w	r3, [r7, #4020]	; 0xfb4
 8001f72:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	; 0xfb4
 8001f76:	2b03      	cmp	r3, #3
 8001f78:	dda7      	ble.n	8001eca <SendData+0x4e>
	}

	while(CDC_Transmit_FS(tx_buffer, USB_TX_BUFFER_SIZE) != USBD_OK);
 8001f7a:	bf00      	nop
 8001f7c:	f107 030c 	add.w	r3, r7, #12
 8001f80:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001f84:	4618      	mov	r0, r3
 8001f86:	f00b fd35 	bl	800d9f4 <CDC_Transmit_FS>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1f5      	bne.n	8001f7c <SendData+0x100>
	current_packet_count++;
 8001f90:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <SendData+0x154>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	4a0e      	ldr	r2, [pc, #56]	; (8001fd0 <SendData+0x154>)
 8001f98:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	f8c7 3fac 	str.w	r3, [r7, #4012]	; 0xfac
 8001fa0:	e00a      	b.n	8001fb8 <SendData+0x13c>
		 adc_state[i] = EMPTY;
 8001fa2:	4a0c      	ldr	r2, [pc, #48]	; (8001fd4 <SendData+0x158>)
 8001fa4:	f8d7 3fac 	ldr.w	r3, [r7, #4012]	; 0xfac
 8001fa8:	4413      	add	r3, r2
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 8001fae:	f8d7 3fac 	ldr.w	r3, [r7, #4012]	; 0xfac
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	f8c7 3fac 	str.w	r3, [r7, #4012]	; 0xfac
 8001fb8:	f8d7 3fac 	ldr.w	r3, [r7, #4012]	; 0xfac
 8001fbc:	2b03      	cmp	r3, #3
 8001fbe:	ddf0      	ble.n	8001fa2 <SendData+0x126>
	}

	return 1;
 8001fc0:	2301      	movs	r3, #1
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f507 677c 	add.w	r7, r7, #4032	; 0xfc0
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	2000077c 	.word	0x2000077c
 8001fd0:	20000770 	.word	0x20000770
 8001fd4:	200027d0 	.word	0x200027d0

08001fd8 <ResetStates>:

int ResetStates(void) {
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Stop_IT(&htim2);
 8001fdc:	481f      	ldr	r0, [pc, #124]	; (800205c <ResetStates+0x84>)
 8001fde:	f006 ff7d 	bl	8008edc <HAL_TIM_Base_Stop_IT>
	  HAL_ADC_Stop_DMA(&hadc1);
 8001fe2:	481f      	ldr	r0, [pc, #124]	; (8002060 <ResetStates+0x88>)
 8001fe4:	f001 fa94 	bl	8003510 <HAL_ADC_Stop_DMA>
	  HAL_ADC_Stop_DMA(&hadc2);
 8001fe8:	481e      	ldr	r0, [pc, #120]	; (8002064 <ResetStates+0x8c>)
 8001fea:	f001 fa91 	bl	8003510 <HAL_ADC_Stop_DMA>
	  HAL_ADC_Stop_DMA(&hadc3);
 8001fee:	481e      	ldr	r0, [pc, #120]	; (8002068 <ResetStates+0x90>)
 8001ff0:	f001 fa8e 	bl	8003510 <HAL_ADC_Stop_DMA>
	  HAL_ADC_Stop_DMA(&hadc4);
 8001ff4:	481d      	ldr	r0, [pc, #116]	; (800206c <ResetStates+0x94>)
 8001ff6:	f001 fa8b 	bl	8003510 <HAL_ADC_Stop_DMA>
	  memset(adc_buffers, 0, sizeof(adc_buffers));
 8001ffa:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001ffe:	2100      	movs	r1, #0
 8002000:	481b      	ldr	r0, [pc, #108]	; (8002070 <ResetStates+0x98>)
 8002002:	f00c ff66 	bl	800eed2 <memset>
	  conv_state = IDLE;
 8002006:	4b1b      	ldr	r3, [pc, #108]	; (8002074 <ResetStates+0x9c>)
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
	  conv_count = 0;
 800200c:	4b1a      	ldr	r3, [pc, #104]	; (8002078 <ResetStates+0xa0>)
 800200e:	2200      	movs	r2, #0
 8002010:	601a      	str	r2, [r3, #0]
	  conv_count_reached = 0;
 8002012:	4b1a      	ldr	r3, [pc, #104]	; (800207c <ResetStates+0xa4>)
 8002014:	2200      	movs	r2, #0
 8002016:	601a      	str	r2, [r3, #0]
	  target_packet_count = 0;
 8002018:	4b19      	ldr	r3, [pc, #100]	; (8002080 <ResetStates+0xa8>)
 800201a:	2200      	movs	r2, #0
 800201c:	601a      	str	r2, [r3, #0]
	  current_packet_count = 0;
 800201e:	4b19      	ldr	r3, [pc, #100]	; (8002084 <ResetStates+0xac>)
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
	  measurement_activated = 0;
 8002024:	4b18      	ldr	r3, [pc, #96]	; (8002088 <ResetStates+0xb0>)
 8002026:	2200      	movs	r2, #0
 8002028:	601a      	str	r2, [r3, #0]
	  current_buffer_id = 'e';
 800202a:	4b18      	ldr	r3, [pc, #96]	; (800208c <ResetStates+0xb4>)
 800202c:	2265      	movs	r2, #101	; 0x65
 800202e:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_WritePin(IND_LED_G_GPIO_Port, IND_LED_G_Pin, GPIO_PIN_RESET);
 8002030:	2200      	movs	r2, #0
 8002032:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002036:	4816      	ldr	r0, [pc, #88]	; (8002090 <ResetStates+0xb8>)
 8002038:	f003 faea 	bl	8005610 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IND_LED_R_GPIO_Port, IND_LED_R_Pin, GPIO_PIN_SET);
 800203c:	2201      	movs	r2, #1
 800203e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002042:	4813      	ldr	r0, [pc, #76]	; (8002090 <ResetStates+0xb8>)
 8002044:	f003 fae4 	bl	8005610 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IND_LED_B_GPIO_Port, IND_LED_B_Pin, GPIO_PIN_SET);
 8002048:	2201      	movs	r2, #1
 800204a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800204e:	4810      	ldr	r0, [pc, #64]	; (8002090 <ResetStates+0xb8>)
 8002050:	f003 fade 	bl	8005610 <HAL_GPIO_WritePin>

	  return 1;
 8002054:	2301      	movs	r3, #1
}
 8002056:	4618      	mov	r0, r3
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000724 	.word	0x20000724
 8002060:	2000038c 	.word	0x2000038c
 8002064:	200003f8 	.word	0x200003f8
 8002068:	20000464 	.word	0x20000464
 800206c:	200004d0 	.word	0x200004d0
 8002070:	2000077c 	.word	0x2000077c
 8002074:	200027bc 	.word	0x200027bc
 8002078:	200027c4 	.word	0x200027c4
 800207c:	200027d4 	.word	0x200027d4
 8002080:	20000774 	.word	0x20000774
 8002084:	20000770 	.word	0x20000770
 8002088:	200027d8 	.word	0x200027d8
 800208c:	20000000 	.word	0x20000000
 8002090:	48000800 	.word	0x48000800

08002094 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002098:	b672      	cpsid	i
}
 800209a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800209c:	e7fe      	b.n	800209c <Error_Handler+0x8>
	...

080020a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a6:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <HAL_MspInit+0x54>)
 80020a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020aa:	4a12      	ldr	r2, [pc, #72]	; (80020f4 <HAL_MspInit+0x54>)
 80020ac:	f043 0301 	orr.w	r3, r3, #1
 80020b0:	6613      	str	r3, [r2, #96]	; 0x60
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <HAL_MspInit+0x54>)
 80020b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	607b      	str	r3, [r7, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_MspInit+0x54>)
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c2:	4a0c      	ldr	r2, [pc, #48]	; (80020f4 <HAL_MspInit+0x54>)
 80020c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c8:	6593      	str	r3, [r2, #88]	; 0x58
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <HAL_MspInit+0x54>)
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 80020d6:	2020      	movs	r0, #32
 80020d8:	f000 fcd2 	bl	8002a80 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80020dc:	f000 fcf8 	bl	8002ad0 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80020e0:	2000      	movs	r0, #0
 80020e2:	f000 fce1 	bl	8002aa8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80020e6:	f005 fec9 	bl	8007e7c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ea:	bf00      	nop
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40021000 	.word	0x40021000

080020f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b0a4      	sub	sp, #144	; 0x90
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002110:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002114:	2254      	movs	r2, #84	; 0x54
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f00c feda 	bl	800eed2 <memset>
  if(hadc->Instance==ADC1)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002126:	d16b      	bne.n	8002200 <HAL_ADC_MspInit+0x108>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800212e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002132:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002134:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002138:	4618      	mov	r0, r3
 800213a:	f006 fbb1 	bl	80088a0 <HAL_RCCEx_PeriphCLKConfig>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8002144:	f7ff ffa6 	bl	8002094 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002148:	4b9e      	ldr	r3, [pc, #632]	; (80023c4 <HAL_ADC_MspInit+0x2cc>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	3301      	adds	r3, #1
 800214e:	4a9d      	ldr	r2, [pc, #628]	; (80023c4 <HAL_ADC_MspInit+0x2cc>)
 8002150:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002152:	4b9c      	ldr	r3, [pc, #624]	; (80023c4 <HAL_ADC_MspInit+0x2cc>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d10b      	bne.n	8002172 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800215a:	4b9b      	ldr	r3, [pc, #620]	; (80023c8 <HAL_ADC_MspInit+0x2d0>)
 800215c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215e:	4a9a      	ldr	r2, [pc, #616]	; (80023c8 <HAL_ADC_MspInit+0x2d0>)
 8002160:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002166:	4b98      	ldr	r3, [pc, #608]	; (80023c8 <HAL_ADC_MspInit+0x2d0>)
 8002168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800216a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
 8002170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002172:	4b95      	ldr	r3, [pc, #596]	; (80023c8 <HAL_ADC_MspInit+0x2d0>)
 8002174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002176:	4a94      	ldr	r2, [pc, #592]	; (80023c8 <HAL_ADC_MspInit+0x2d0>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800217e:	4b92      	ldr	r3, [pc, #584]	; (80023c8 <HAL_ADC_MspInit+0x2d0>)
 8002180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	623b      	str	r3, [r7, #32]
 8002188:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800218a:	2301      	movs	r3, #1
 800218c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800218e:	2303      	movs	r3, #3
 8002190:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800219e:	4619      	mov	r1, r3
 80021a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a4:	f003 f8b2 	bl	800530c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80021a8:	4b88      	ldr	r3, [pc, #544]	; (80023cc <HAL_ADC_MspInit+0x2d4>)
 80021aa:	4a89      	ldr	r2, [pc, #548]	; (80023d0 <HAL_ADC_MspInit+0x2d8>)
 80021ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80021ae:	4b87      	ldr	r3, [pc, #540]	; (80023cc <HAL_ADC_MspInit+0x2d4>)
 80021b0:	2205      	movs	r2, #5
 80021b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021b4:	4b85      	ldr	r3, [pc, #532]	; (80023cc <HAL_ADC_MspInit+0x2d4>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ba:	4b84      	ldr	r3, [pc, #528]	; (80023cc <HAL_ADC_MspInit+0x2d4>)
 80021bc:	2200      	movs	r2, #0
 80021be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021c0:	4b82      	ldr	r3, [pc, #520]	; (80023cc <HAL_ADC_MspInit+0x2d4>)
 80021c2:	2280      	movs	r2, #128	; 0x80
 80021c4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021c6:	4b81      	ldr	r3, [pc, #516]	; (80023cc <HAL_ADC_MspInit+0x2d4>)
 80021c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021cc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021ce:	4b7f      	ldr	r3, [pc, #508]	; (80023cc <HAL_ADC_MspInit+0x2d4>)
 80021d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80021d6:	4b7d      	ldr	r3, [pc, #500]	; (80023cc <HAL_ADC_MspInit+0x2d4>)
 80021d8:	2220      	movs	r2, #32
 80021da:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80021dc:	4b7b      	ldr	r3, [pc, #492]	; (80023cc <HAL_ADC_MspInit+0x2d4>)
 80021de:	2200      	movs	r2, #0
 80021e0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80021e2:	487a      	ldr	r0, [pc, #488]	; (80023cc <HAL_ADC_MspInit+0x2d4>)
 80021e4:	f002 fdc6 	bl	8004d74 <HAL_DMA_Init>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80021ee:	f7ff ff51 	bl	8002094 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a75      	ldr	r2, [pc, #468]	; (80023cc <HAL_ADC_MspInit+0x2d4>)
 80021f6:	655a      	str	r2, [r3, #84]	; 0x54
 80021f8:	4a74      	ldr	r2, [pc, #464]	; (80023cc <HAL_ADC_MspInit+0x2d4>)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 80021fe:	e169      	b.n	80024d4 <HAL_ADC_MspInit+0x3dc>
  else if(hadc->Instance==ADC2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a73      	ldr	r2, [pc, #460]	; (80023d4 <HAL_ADC_MspInit+0x2dc>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d16b      	bne.n	80022e2 <HAL_ADC_MspInit+0x1ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800220a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8002210:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002214:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002216:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800221a:	4618      	mov	r0, r3
 800221c:	f006 fb40 	bl	80088a0 <HAL_RCCEx_PeriphCLKConfig>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <HAL_ADC_MspInit+0x132>
      Error_Handler();
 8002226:	f7ff ff35 	bl	8002094 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800222a:	4b66      	ldr	r3, [pc, #408]	; (80023c4 <HAL_ADC_MspInit+0x2cc>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	3301      	adds	r3, #1
 8002230:	4a64      	ldr	r2, [pc, #400]	; (80023c4 <HAL_ADC_MspInit+0x2cc>)
 8002232:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002234:	4b63      	ldr	r3, [pc, #396]	; (80023c4 <HAL_ADC_MspInit+0x2cc>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2b01      	cmp	r3, #1
 800223a:	d10b      	bne.n	8002254 <HAL_ADC_MspInit+0x15c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800223c:	4b62      	ldr	r3, [pc, #392]	; (80023c8 <HAL_ADC_MspInit+0x2d0>)
 800223e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002240:	4a61      	ldr	r2, [pc, #388]	; (80023c8 <HAL_ADC_MspInit+0x2d0>)
 8002242:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002246:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002248:	4b5f      	ldr	r3, [pc, #380]	; (80023c8 <HAL_ADC_MspInit+0x2d0>)
 800224a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002250:	61fb      	str	r3, [r7, #28]
 8002252:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002254:	4b5c      	ldr	r3, [pc, #368]	; (80023c8 <HAL_ADC_MspInit+0x2d0>)
 8002256:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002258:	4a5b      	ldr	r2, [pc, #364]	; (80023c8 <HAL_ADC_MspInit+0x2d0>)
 800225a:	f043 0301 	orr.w	r3, r3, #1
 800225e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002260:	4b59      	ldr	r3, [pc, #356]	; (80023c8 <HAL_ADC_MspInit+0x2d0>)
 8002262:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002264:	f003 0301 	and.w	r3, r3, #1
 8002268:	61bb      	str	r3, [r7, #24]
 800226a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800226c:	2340      	movs	r3, #64	; 0x40
 800226e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002270:	2303      	movs	r3, #3
 8002272:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002280:	4619      	mov	r1, r3
 8002282:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002286:	f003 f841 	bl	800530c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 800228a:	4b53      	ldr	r3, [pc, #332]	; (80023d8 <HAL_ADC_MspInit+0x2e0>)
 800228c:	4a53      	ldr	r2, [pc, #332]	; (80023dc <HAL_ADC_MspInit+0x2e4>)
 800228e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002290:	4b51      	ldr	r3, [pc, #324]	; (80023d8 <HAL_ADC_MspInit+0x2e0>)
 8002292:	2224      	movs	r2, #36	; 0x24
 8002294:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002296:	4b50      	ldr	r3, [pc, #320]	; (80023d8 <HAL_ADC_MspInit+0x2e0>)
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800229c:	4b4e      	ldr	r3, [pc, #312]	; (80023d8 <HAL_ADC_MspInit+0x2e0>)
 800229e:	2200      	movs	r2, #0
 80022a0:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80022a2:	4b4d      	ldr	r3, [pc, #308]	; (80023d8 <HAL_ADC_MspInit+0x2e0>)
 80022a4:	2280      	movs	r2, #128	; 0x80
 80022a6:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022a8:	4b4b      	ldr	r3, [pc, #300]	; (80023d8 <HAL_ADC_MspInit+0x2e0>)
 80022aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022ae:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022b0:	4b49      	ldr	r3, [pc, #292]	; (80023d8 <HAL_ADC_MspInit+0x2e0>)
 80022b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022b6:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 80022b8:	4b47      	ldr	r3, [pc, #284]	; (80023d8 <HAL_ADC_MspInit+0x2e0>)
 80022ba:	2220      	movs	r2, #32
 80022bc:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80022be:	4b46      	ldr	r3, [pc, #280]	; (80023d8 <HAL_ADC_MspInit+0x2e0>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80022c4:	4844      	ldr	r0, [pc, #272]	; (80023d8 <HAL_ADC_MspInit+0x2e0>)
 80022c6:	f002 fd55 	bl	8004d74 <HAL_DMA_Init>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_ADC_MspInit+0x1dc>
      Error_Handler();
 80022d0:	f7ff fee0 	bl	8002094 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	4a40      	ldr	r2, [pc, #256]	; (80023d8 <HAL_ADC_MspInit+0x2e0>)
 80022d8:	655a      	str	r2, [r3, #84]	; 0x54
 80022da:	4a3f      	ldr	r2, [pc, #252]	; (80023d8 <HAL_ADC_MspInit+0x2e0>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6293      	str	r3, [r2, #40]	; 0x28
}
 80022e0:	e0f8      	b.n	80024d4 <HAL_ADC_MspInit+0x3dc>
  else if(hadc->Instance==ADC3)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a3e      	ldr	r2, [pc, #248]	; (80023e0 <HAL_ADC_MspInit+0x2e8>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	f040 8083 	bne.w	80023f4 <HAL_ADC_MspInit+0x2fc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80022ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022f2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 80022f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80022f8:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022fe:	4618      	mov	r0, r3
 8002300:	f006 face 	bl	80088a0 <HAL_RCCEx_PeriphCLKConfig>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_ADC_MspInit+0x216>
      Error_Handler();
 800230a:	f7ff fec3 	bl	8002094 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800230e:	4b35      	ldr	r3, [pc, #212]	; (80023e4 <HAL_ADC_MspInit+0x2ec>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	3301      	adds	r3, #1
 8002314:	4a33      	ldr	r2, [pc, #204]	; (80023e4 <HAL_ADC_MspInit+0x2ec>)
 8002316:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8002318:	4b32      	ldr	r3, [pc, #200]	; (80023e4 <HAL_ADC_MspInit+0x2ec>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d10b      	bne.n	8002338 <HAL_ADC_MspInit+0x240>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8002320:	4b29      	ldr	r3, [pc, #164]	; (80023c8 <HAL_ADC_MspInit+0x2d0>)
 8002322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002324:	4a28      	ldr	r2, [pc, #160]	; (80023c8 <HAL_ADC_MspInit+0x2d0>)
 8002326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800232a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800232c:	4b26      	ldr	r3, [pc, #152]	; (80023c8 <HAL_ADC_MspInit+0x2d0>)
 800232e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002330:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002338:	4b23      	ldr	r3, [pc, #140]	; (80023c8 <HAL_ADC_MspInit+0x2d0>)
 800233a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233c:	4a22      	ldr	r2, [pc, #136]	; (80023c8 <HAL_ADC_MspInit+0x2d0>)
 800233e:	f043 0302 	orr.w	r3, r3, #2
 8002342:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002344:	4b20      	ldr	r3, [pc, #128]	; (80023c8 <HAL_ADC_MspInit+0x2d0>)
 8002346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002348:	f003 0302 	and.w	r3, r3, #2
 800234c:	613b      	str	r3, [r7, #16]
 800234e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002350:	2302      	movs	r3, #2
 8002352:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002354:	2303      	movs	r3, #3
 8002356:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002360:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002364:	4619      	mov	r1, r3
 8002366:	4820      	ldr	r0, [pc, #128]	; (80023e8 <HAL_ADC_MspInit+0x2f0>)
 8002368:	f002 ffd0 	bl	800530c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 800236c:	4b1f      	ldr	r3, [pc, #124]	; (80023ec <HAL_ADC_MspInit+0x2f4>)
 800236e:	4a20      	ldr	r2, [pc, #128]	; (80023f0 <HAL_ADC_MspInit+0x2f8>)
 8002370:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002372:	4b1e      	ldr	r3, [pc, #120]	; (80023ec <HAL_ADC_MspInit+0x2f4>)
 8002374:	2225      	movs	r2, #37	; 0x25
 8002376:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002378:	4b1c      	ldr	r3, [pc, #112]	; (80023ec <HAL_ADC_MspInit+0x2f4>)
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 800237e:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <HAL_ADC_MspInit+0x2f4>)
 8002380:	2200      	movs	r2, #0
 8002382:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002384:	4b19      	ldr	r3, [pc, #100]	; (80023ec <HAL_ADC_MspInit+0x2f4>)
 8002386:	2280      	movs	r2, #128	; 0x80
 8002388:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800238a:	4b18      	ldr	r3, [pc, #96]	; (80023ec <HAL_ADC_MspInit+0x2f4>)
 800238c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002390:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002392:	4b16      	ldr	r3, [pc, #88]	; (80023ec <HAL_ADC_MspInit+0x2f4>)
 8002394:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002398:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 800239a:	4b14      	ldr	r3, [pc, #80]	; (80023ec <HAL_ADC_MspInit+0x2f4>)
 800239c:	2220      	movs	r2, #32
 800239e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 80023a0:	4b12      	ldr	r3, [pc, #72]	; (80023ec <HAL_ADC_MspInit+0x2f4>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80023a6:	4811      	ldr	r0, [pc, #68]	; (80023ec <HAL_ADC_MspInit+0x2f4>)
 80023a8:	f002 fce4 	bl	8004d74 <HAL_DMA_Init>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <HAL_ADC_MspInit+0x2be>
      Error_Handler();
 80023b2:	f7ff fe6f 	bl	8002094 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a0c      	ldr	r2, [pc, #48]	; (80023ec <HAL_ADC_MspInit+0x2f4>)
 80023ba:	655a      	str	r2, [r3, #84]	; 0x54
 80023bc:	4a0b      	ldr	r2, [pc, #44]	; (80023ec <HAL_ADC_MspInit+0x2f4>)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6293      	str	r3, [r2, #40]	; 0x28
}
 80023c2:	e087      	b.n	80024d4 <HAL_ADC_MspInit+0x3dc>
 80023c4:	200027dc 	.word	0x200027dc
 80023c8:	40021000 	.word	0x40021000
 80023cc:	2000053c 	.word	0x2000053c
 80023d0:	40020008 	.word	0x40020008
 80023d4:	50000100 	.word	0x50000100
 80023d8:	2000059c 	.word	0x2000059c
 80023dc:	4002001c 	.word	0x4002001c
 80023e0:	50000400 	.word	0x50000400
 80023e4:	200027e0 	.word	0x200027e0
 80023e8:	48000400 	.word	0x48000400
 80023ec:	200005fc 	.word	0x200005fc
 80023f0:	40020030 	.word	0x40020030
  else if(hadc->Instance==ADC4)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a38      	ldr	r2, [pc, #224]	; (80024dc <HAL_ADC_MspInit+0x3e4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d16a      	bne.n	80024d4 <HAL_ADC_MspInit+0x3dc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 80023fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 8002404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002408:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800240a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800240e:	4618      	mov	r0, r3
 8002410:	f006 fa46 	bl	80088a0 <HAL_RCCEx_PeriphCLKConfig>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <HAL_ADC_MspInit+0x326>
      Error_Handler();
 800241a:	f7ff fe3b 	bl	8002094 <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 800241e:	4b30      	ldr	r3, [pc, #192]	; (80024e0 <HAL_ADC_MspInit+0x3e8>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	3301      	adds	r3, #1
 8002424:	4a2e      	ldr	r2, [pc, #184]	; (80024e0 <HAL_ADC_MspInit+0x3e8>)
 8002426:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 8002428:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_ADC_MspInit+0x3e8>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d10b      	bne.n	8002448 <HAL_ADC_MspInit+0x350>
      __HAL_RCC_ADC345_CLK_ENABLE();
 8002430:	4b2c      	ldr	r3, [pc, #176]	; (80024e4 <HAL_ADC_MspInit+0x3ec>)
 8002432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002434:	4a2b      	ldr	r2, [pc, #172]	; (80024e4 <HAL_ADC_MspInit+0x3ec>)
 8002436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800243a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800243c:	4b29      	ldr	r3, [pc, #164]	; (80024e4 <HAL_ADC_MspInit+0x3ec>)
 800243e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002440:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002444:	60fb      	str	r3, [r7, #12]
 8002446:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002448:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <HAL_ADC_MspInit+0x3ec>)
 800244a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800244c:	4a25      	ldr	r2, [pc, #148]	; (80024e4 <HAL_ADC_MspInit+0x3ec>)
 800244e:	f043 0302 	orr.w	r3, r3, #2
 8002452:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002454:	4b23      	ldr	r3, [pc, #140]	; (80024e4 <HAL_ADC_MspInit+0x3ec>)
 8002456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002460:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002464:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002466:	2303      	movs	r3, #3
 8002468:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800246c:	2300      	movs	r3, #0
 800246e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002472:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002476:	4619      	mov	r1, r3
 8002478:	481b      	ldr	r0, [pc, #108]	; (80024e8 <HAL_ADC_MspInit+0x3f0>)
 800247a:	f002 ff47 	bl	800530c <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 800247e:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <HAL_ADC_MspInit+0x3f4>)
 8002480:	4a1b      	ldr	r2, [pc, #108]	; (80024f0 <HAL_ADC_MspInit+0x3f8>)
 8002482:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 8002484:	4b19      	ldr	r3, [pc, #100]	; (80024ec <HAL_ADC_MspInit+0x3f4>)
 8002486:	2226      	movs	r2, #38	; 0x26
 8002488:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800248a:	4b18      	ldr	r3, [pc, #96]	; (80024ec <HAL_ADC_MspInit+0x3f4>)
 800248c:	2200      	movs	r2, #0
 800248e:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002490:	4b16      	ldr	r3, [pc, #88]	; (80024ec <HAL_ADC_MspInit+0x3f4>)
 8002492:	2200      	movs	r2, #0
 8002494:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 8002496:	4b15      	ldr	r3, [pc, #84]	; (80024ec <HAL_ADC_MspInit+0x3f4>)
 8002498:	2280      	movs	r2, #128	; 0x80
 800249a:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800249c:	4b13      	ldr	r3, [pc, #76]	; (80024ec <HAL_ADC_MspInit+0x3f4>)
 800249e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80024a2:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024a4:	4b11      	ldr	r3, [pc, #68]	; (80024ec <HAL_ADC_MspInit+0x3f4>)
 80024a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024aa:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 80024ac:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <HAL_ADC_MspInit+0x3f4>)
 80024ae:	2220      	movs	r2, #32
 80024b0:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 80024b2:	4b0e      	ldr	r3, [pc, #56]	; (80024ec <HAL_ADC_MspInit+0x3f4>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 80024b8:	480c      	ldr	r0, [pc, #48]	; (80024ec <HAL_ADC_MspInit+0x3f4>)
 80024ba:	f002 fc5b 	bl	8004d74 <HAL_DMA_Init>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d001      	beq.n	80024c8 <HAL_ADC_MspInit+0x3d0>
      Error_Handler();
 80024c4:	f7ff fde6 	bl	8002094 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4a08      	ldr	r2, [pc, #32]	; (80024ec <HAL_ADC_MspInit+0x3f4>)
 80024cc:	655a      	str	r2, [r3, #84]	; 0x54
 80024ce:	4a07      	ldr	r2, [pc, #28]	; (80024ec <HAL_ADC_MspInit+0x3f4>)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6293      	str	r3, [r2, #40]	; 0x28
}
 80024d4:	bf00      	nop
 80024d6:	3790      	adds	r7, #144	; 0x90
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	50000500 	.word	0x50000500
 80024e0:	200027e0 	.word	0x200027e0
 80024e4:	40021000 	.word	0x40021000
 80024e8:	48000400 	.word	0x48000400
 80024ec:	2000065c 	.word	0x2000065c
 80024f0:	40020044 	.word	0x40020044

080024f4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b08a      	sub	sp, #40	; 0x28
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	f107 0314 	add.w	r3, r7, #20
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a15      	ldr	r2, [pc, #84]	; (8002568 <HAL_DAC_MspInit+0x74>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d124      	bne.n	8002560 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <HAL_DAC_MspInit+0x78>)
 8002518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800251a:	4a14      	ldr	r2, [pc, #80]	; (800256c <HAL_DAC_MspInit+0x78>)
 800251c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002520:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002522:	4b12      	ldr	r3, [pc, #72]	; (800256c <HAL_DAC_MspInit+0x78>)
 8002524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252e:	4b0f      	ldr	r3, [pc, #60]	; (800256c <HAL_DAC_MspInit+0x78>)
 8002530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002532:	4a0e      	ldr	r2, [pc, #56]	; (800256c <HAL_DAC_MspInit+0x78>)
 8002534:	f043 0301 	orr.w	r3, r3, #1
 8002538:	64d3      	str	r3, [r2, #76]	; 0x4c
 800253a:	4b0c      	ldr	r3, [pc, #48]	; (800256c <HAL_DAC_MspInit+0x78>)
 800253c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800253e:	f003 0301 	and.w	r3, r3, #1
 8002542:	60fb      	str	r3, [r7, #12]
 8002544:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002546:	2310      	movs	r3, #16
 8002548:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800254a:	2303      	movs	r3, #3
 800254c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254e:	2300      	movs	r3, #0
 8002550:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002552:	f107 0314 	add.w	r3, r7, #20
 8002556:	4619      	mov	r1, r3
 8002558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800255c:	f002 fed6 	bl	800530c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002560:	bf00      	nop
 8002562:	3728      	adds	r7, #40	; 0x28
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	50000800 	.word	0x50000800
 800256c:	40021000 	.word	0x40021000

08002570 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b09e      	sub	sp, #120	; 0x78
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002578:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	605a      	str	r2, [r3, #4]
 8002582:	609a      	str	r2, [r3, #8]
 8002584:	60da      	str	r2, [r3, #12]
 8002586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002588:	f107 0310 	add.w	r3, r7, #16
 800258c:	2254      	movs	r2, #84	; 0x54
 800258e:	2100      	movs	r1, #0
 8002590:	4618      	mov	r0, r3
 8002592:	f00c fc9e 	bl	800eed2 <memset>
  if(hi2c->Instance==I2C3)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a1f      	ldr	r2, [pc, #124]	; (8002618 <HAL_I2C_MspInit+0xa8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d137      	bne.n	8002610 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80025a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80025a6:	2300      	movs	r3, #0
 80025a8:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025aa:	f107 0310 	add.w	r3, r7, #16
 80025ae:	4618      	mov	r0, r3
 80025b0:	f006 f976 	bl	80088a0 <HAL_RCCEx_PeriphCLKConfig>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80025ba:	f7ff fd6b 	bl	8002094 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025be:	4b17      	ldr	r3, [pc, #92]	; (800261c <HAL_I2C_MspInit+0xac>)
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	4a16      	ldr	r2, [pc, #88]	; (800261c <HAL_I2C_MspInit+0xac>)
 80025c4:	f043 0304 	orr.w	r3, r3, #4
 80025c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025ca:	4b14      	ldr	r3, [pc, #80]	; (800261c <HAL_I2C_MspInit+0xac>)
 80025cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = TEMP_SCL_Pin|TEMP_SDA_Pin;
 80025d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80025da:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025dc:	2312      	movs	r3, #18
 80025de:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e4:	2300      	movs	r3, #0
 80025e6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 80025e8:	2308      	movs	r3, #8
 80025ea:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80025f0:	4619      	mov	r1, r3
 80025f2:	480b      	ldr	r0, [pc, #44]	; (8002620 <HAL_I2C_MspInit+0xb0>)
 80025f4:	f002 fe8a 	bl	800530c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80025f8:	4b08      	ldr	r3, [pc, #32]	; (800261c <HAL_I2C_MspInit+0xac>)
 80025fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fc:	4a07      	ldr	r2, [pc, #28]	; (800261c <HAL_I2C_MspInit+0xac>)
 80025fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002602:	6593      	str	r3, [r2, #88]	; 0x58
 8002604:	4b05      	ldr	r3, [pc, #20]	; (800261c <HAL_I2C_MspInit+0xac>)
 8002606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002608:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002610:	bf00      	nop
 8002612:	3778      	adds	r7, #120	; 0x78
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40007800 	.word	0x40007800
 800261c:	40021000 	.word	0x40021000
 8002620:	48000800 	.word	0x48000800

08002624 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002634:	d113      	bne.n	800265e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002636:	4b0c      	ldr	r3, [pc, #48]	; (8002668 <HAL_TIM_Base_MspInit+0x44>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263a:	4a0b      	ldr	r2, [pc, #44]	; (8002668 <HAL_TIM_Base_MspInit+0x44>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6593      	str	r3, [r2, #88]	; 0x58
 8002642:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_TIM_Base_MspInit+0x44>)
 8002644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800264e:	2200      	movs	r2, #0
 8002650:	2100      	movs	r1, #0
 8002652:	201c      	movs	r0, #28
 8002654:	f002 f8e5 	bl	8004822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002658:	201c      	movs	r0, #28
 800265a:	f002 f8fc 	bl	8004856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800265e:	bf00      	nop
 8002660:	3710      	adds	r7, #16
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000

0800266c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002670:	e7fe      	b.n	8002670 <NMI_Handler+0x4>

08002672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002676:	e7fe      	b.n	8002676 <HardFault_Handler+0x4>

08002678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800267c:	e7fe      	b.n	800267c <MemManage_Handler+0x4>

0800267e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800267e:	b480      	push	{r7}
 8002680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002682:	e7fe      	b.n	8002682 <BusFault_Handler+0x4>

08002684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002688:	e7fe      	b.n	8002688 <UsageFault_Handler+0x4>

0800268a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800268a:	b480      	push	{r7}
 800268c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800269c:	bf00      	nop
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80026a6:	b480      	push	{r7}
 80026a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr

080026b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80026b8:	f000 f9c4 	bl	8002a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}

080026c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80026c4:	4802      	ldr	r0, [pc, #8]	; (80026d0 <DMA1_Channel1_IRQHandler+0x10>)
 80026c6:	f002 fcd1 	bl	800506c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80026ca:	bf00      	nop
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	2000053c 	.word	0x2000053c

080026d4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80026d8:	4802      	ldr	r0, [pc, #8]	; (80026e4 <DMA1_Channel2_IRQHandler+0x10>)
 80026da:	f002 fcc7 	bl	800506c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80026de:	bf00      	nop
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	2000059c 	.word	0x2000059c

080026e8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80026ec:	4802      	ldr	r0, [pc, #8]	; (80026f8 <DMA1_Channel3_IRQHandler+0x10>)
 80026ee:	f002 fcbd 	bl	800506c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80026f2:	bf00      	nop
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200005fc 	.word	0x200005fc

080026fc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8002700:	4802      	ldr	r0, [pc, #8]	; (800270c <DMA1_Channel4_IRQHandler+0x10>)
 8002702:	f002 fcb3 	bl	800506c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002706:	bf00      	nop
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	2000065c 	.word	0x2000065c

08002710 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002714:	4802      	ldr	r0, [pc, #8]	; (8002720 <USB_HP_IRQHandler+0x10>)
 8002716:	f003 fec8 	bl	80064aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	20003cc0 	.word	0x20003cc0

08002724 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002728:	4802      	ldr	r0, [pc, #8]	; (8002734 <USB_LP_IRQHandler+0x10>)
 800272a:	f003 febe 	bl	80064aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800272e:	bf00      	nop
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	20003cc0 	.word	0x20003cc0

08002738 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TRIG_SHORT_Pin);
 800273c:	2020      	movs	r0, #32
 800273e:	f002 ff7f 	bl	8005640 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TRIG_EXT_2_Pin);
 8002742:	2040      	movs	r0, #64	; 0x40
 8002744:	f002 ff7c 	bl	8005640 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TRIG_EXT_1_Pin);
 8002748:	2080      	movs	r0, #128	; 0x80
 800274a:	f002 ff79 	bl	8005640 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  measurement_activated = 1;
 800274e:	4b02      	ldr	r3, [pc, #8]	; (8002758 <EXTI9_5_IRQHandler+0x20>)
 8002750:	2201      	movs	r2, #1
 8002752:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002754:	bf00      	nop
 8002756:	bd80      	pop	{r7, pc}
 8002758:	200027d8 	.word	0x200027d8

0800275c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002760:	480a      	ldr	r0, [pc, #40]	; (800278c <TIM2_IRQHandler+0x30>)
 8002762:	f006 fbea 	bl	8008f3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  conv_count++;
 8002766:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <TIM2_IRQHandler+0x34>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	3301      	adds	r3, #1
 800276c:	4a08      	ldr	r2, [pc, #32]	; (8002790 <TIM2_IRQHandler+0x34>)
 800276e:	6013      	str	r3, [r2, #0]
  if(conv_count > target_conv_count + 10){
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <TIM2_IRQHandler+0x38>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f103 020a 	add.w	r2, r3, #10
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <TIM2_IRQHandler+0x34>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	429a      	cmp	r2, r3
 800277e:	da02      	bge.n	8002786 <TIM2_IRQHandler+0x2a>
	  conv_count_reached = 1;
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <TIM2_IRQHandler+0x3c>)
 8002782:	2201      	movs	r2, #1
 8002784:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	20000724 	.word	0x20000724
 8002790:	200027c4 	.word	0x200027c4
 8002794:	200027c0 	.word	0x200027c0
 8002798:	200027d4 	.word	0x200027d4

0800279c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  return 1;
 80027a0:	2301      	movs	r3, #1
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <_kill>:

int _kill(int pid, int sig)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80027b6:	f00c fbf1 	bl	800ef9c <__errno>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2216      	movs	r2, #22
 80027be:	601a      	str	r2, [r3, #0]
  return -1;
 80027c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <_exit>:

void _exit (int status)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80027d4:	f04f 31ff 	mov.w	r1, #4294967295
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f7ff ffe7 	bl	80027ac <_kill>
  while (1) {}    /* Make sure we hang here */
 80027de:	e7fe      	b.n	80027de <_exit+0x12>

080027e0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	60b9      	str	r1, [r7, #8]
 80027ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	e00a      	b.n	8002808 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027f2:	f3af 8000 	nop.w
 80027f6:	4601      	mov	r1, r0
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	1c5a      	adds	r2, r3, #1
 80027fc:	60ba      	str	r2, [r7, #8]
 80027fe:	b2ca      	uxtb	r2, r1
 8002800:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	3301      	adds	r3, #1
 8002806:	617b      	str	r3, [r7, #20]
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	429a      	cmp	r2, r3
 800280e:	dbf0      	blt.n	80027f2 <_read+0x12>
  }

  return len;
 8002810:	687b      	ldr	r3, [r7, #4]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	e009      	b.n	8002840 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	1c5a      	adds	r2, r3, #1
 8002830:	60ba      	str	r2, [r7, #8]
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	3301      	adds	r3, #1
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	429a      	cmp	r2, r3
 8002846:	dbf1      	blt.n	800282c <_write+0x12>
  }
  return len;
 8002848:	687b      	ldr	r3, [r7, #4]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3718      	adds	r7, #24
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <_close>:

int _close(int file)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800285a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800287a:	605a      	str	r2, [r3, #4]
  return 0;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr

0800288a <_isatty>:

int _isatty(int file)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002892:	2301      	movs	r3, #1
}
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3714      	adds	r7, #20
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b086      	sub	sp, #24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80028c4:	4a14      	ldr	r2, [pc, #80]	; (8002918 <_sbrk+0x5c>)
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <_sbrk+0x60>)
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80028d0:	4b13      	ldr	r3, [pc, #76]	; (8002920 <_sbrk+0x64>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d102      	bne.n	80028de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <_sbrk+0x64>)
 80028da:	4a12      	ldr	r2, [pc, #72]	; (8002924 <_sbrk+0x68>)
 80028dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80028de:	4b10      	ldr	r3, [pc, #64]	; (8002920 <_sbrk+0x64>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4413      	add	r3, r2
 80028e6:	693a      	ldr	r2, [r7, #16]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d207      	bcs.n	80028fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028ec:	f00c fb56 	bl	800ef9c <__errno>
 80028f0:	4603      	mov	r3, r0
 80028f2:	220c      	movs	r2, #12
 80028f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028f6:	f04f 33ff 	mov.w	r3, #4294967295
 80028fa:	e009      	b.n	8002910 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028fc:	4b08      	ldr	r3, [pc, #32]	; (8002920 <_sbrk+0x64>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002902:	4b07      	ldr	r3, [pc, #28]	; (8002920 <_sbrk+0x64>)
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4413      	add	r3, r2
 800290a:	4a05      	ldr	r2, [pc, #20]	; (8002920 <_sbrk+0x64>)
 800290c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800290e:	68fb      	ldr	r3, [r7, #12]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20020000 	.word	0x20020000
 800291c:	00001000 	.word	0x00001000
 8002920:	200027e4 	.word	0x200027e4
 8002924:	20004308 	.word	0x20004308

08002928 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800292c:	4b06      	ldr	r3, [pc, #24]	; (8002948 <SystemInit+0x20>)
 800292e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002932:	4a05      	ldr	r2, [pc, #20]	; (8002948 <SystemInit+0x20>)
 8002934:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002938:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800293c:	bf00      	nop
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800294c:	480d      	ldr	r0, [pc, #52]	; (8002984 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800294e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002950:	f7ff ffea 	bl	8002928 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002954:	480c      	ldr	r0, [pc, #48]	; (8002988 <LoopForever+0x6>)
  ldr r1, =_edata
 8002956:	490d      	ldr	r1, [pc, #52]	; (800298c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002958:	4a0d      	ldr	r2, [pc, #52]	; (8002990 <LoopForever+0xe>)
  movs r3, #0
 800295a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800295c:	e002      	b.n	8002964 <LoopCopyDataInit>

0800295e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800295e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002960:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002962:	3304      	adds	r3, #4

08002964 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002964:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002966:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002968:	d3f9      	bcc.n	800295e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800296a:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <LoopForever+0x12>)
  ldr r4, =_ebss
 800296c:	4c0a      	ldr	r4, [pc, #40]	; (8002998 <LoopForever+0x16>)
  movs r3, #0
 800296e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002970:	e001      	b.n	8002976 <LoopFillZerobss>

08002972 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002972:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002974:	3204      	adds	r2, #4

08002976 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002976:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002978:	d3fb      	bcc.n	8002972 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800297a:	f00c fb15 	bl	800efa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800297e:	f7fe f9bb 	bl	8000cf8 <main>

08002982 <LoopForever>:

LoopForever:
    b LoopForever
 8002982:	e7fe      	b.n	8002982 <LoopForever>
  ldr   r0, =_estack
 8002984:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002988:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800298c:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 8002990:	08012550 	.word	0x08012550
  ldr r2, =_sbss
 8002994:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 8002998:	20004308 	.word	0x20004308

0800299c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800299c:	e7fe      	b.n	800299c <ADC1_2_IRQHandler>

0800299e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800299e:	b580      	push	{r7, lr}
 80029a0:	b082      	sub	sp, #8
 80029a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029a8:	2003      	movs	r0, #3
 80029aa:	f001 ff2f 	bl	800480c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80029ae:	2000      	movs	r0, #0
 80029b0:	f000 f80e 	bl	80029d0 <HAL_InitTick>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d002      	beq.n	80029c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	71fb      	strb	r3, [r7, #7]
 80029be:	e001      	b.n	80029c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029c0:	f7ff fb6e 	bl	80020a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029c4:	79fb      	ldrb	r3, [r7, #7]

}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b084      	sub	sp, #16
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029d8:	2300      	movs	r3, #0
 80029da:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80029dc:	4b16      	ldr	r3, [pc, #88]	; (8002a38 <HAL_InitTick+0x68>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d022      	beq.n	8002a2a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80029e4:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <HAL_InitTick+0x6c>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <HAL_InitTick+0x68>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80029f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f8:	4618      	mov	r0, r3
 80029fa:	f001 ff3a 	bl	8004872 <HAL_SYSTICK_Config>
 80029fe:	4603      	mov	r3, r0
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d10f      	bne.n	8002a24 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2b0f      	cmp	r3, #15
 8002a08:	d809      	bhi.n	8002a1e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	f04f 30ff 	mov.w	r0, #4294967295
 8002a12:	f001 ff06 	bl	8004822 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a16:	4a0a      	ldr	r2, [pc, #40]	; (8002a40 <HAL_InitTick+0x70>)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6013      	str	r3, [r2, #0]
 8002a1c:	e007      	b.n	8002a2e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
 8002a22:	e004      	b.n	8002a2e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	73fb      	strb	r3, [r7, #15]
 8002a28:	e001      	b.n	8002a2e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20000018 	.word	0x20000018
 8002a3c:	20000010 	.word	0x20000010
 8002a40:	20000014 	.word	0x20000014

08002a44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a48:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <HAL_IncTick+0x1c>)
 8002a4a:	681a      	ldr	r2, [r3, #0]
 8002a4c:	4b05      	ldr	r3, [pc, #20]	; (8002a64 <HAL_IncTick+0x20>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4413      	add	r3, r2
 8002a52:	4a03      	ldr	r2, [pc, #12]	; (8002a60 <HAL_IncTick+0x1c>)
 8002a54:	6013      	str	r3, [r2, #0]
}
 8002a56:	bf00      	nop
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	200027e8 	.word	0x200027e8
 8002a64:	20000018 	.word	0x20000018

08002a68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a6c:	4b03      	ldr	r3, [pc, #12]	; (8002a7c <HAL_GetTick+0x14>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
 8002a7a:	bf00      	nop
 8002a7c:	200027e8 	.word	0x200027e8

08002a80 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a90:	4904      	ldr	r1, [pc, #16]	; (8002aa4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	600b      	str	r3, [r1, #0]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	40010030 	.word	0x40010030

08002aa8 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002ab0:	4b06      	ldr	r3, [pc, #24]	; (8002acc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f023 0202 	bic.w	r2, r3, #2
 8002ab8:	4904      	ldr	r1, [pc, #16]	; (8002acc <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	600b      	str	r3, [r1, #0]
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	40010030 	.word	0x40010030

08002ad0 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002ad6:	4b0f      	ldr	r3, [pc, #60]	; (8002b14 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a0e      	ldr	r2, [pc, #56]	; (8002b14 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002ae2:	f7ff ffc1 	bl	8002a68 <HAL_GetTick>
 8002ae6:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002ae8:	e008      	b.n	8002afc <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8002aea:	f7ff ffbd 	bl	8002a68 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b0a      	cmp	r3, #10
 8002af6:	d901      	bls.n	8002afc <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e006      	b.n	8002b0a <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002afc:	4b05      	ldr	r3, [pc, #20]	; (8002b14 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0308 	and.w	r3, r3, #8
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40010030 	.word	0x40010030

08002b18 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	431a      	orrs	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	609a      	str	r2, [r3, #8]
}
 8002b32:	bf00      	nop
 8002b34:	370c      	adds	r7, #12
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr

08002b3e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
 8002b46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	431a      	orrs	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	609a      	str	r2, [r3, #8]
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b087      	sub	sp, #28
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	3360      	adds	r3, #96	; 0x60
 8002b92:	461a      	mov	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	4413      	add	r3, r2
 8002b9a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4b08      	ldr	r3, [pc, #32]	; (8002bc4 <LL_ADC_SetOffset+0x44>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002baa:	683a      	ldr	r2, [r7, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002bb4:	697b      	ldr	r3, [r7, #20]
 8002bb6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002bb8:	bf00      	nop
 8002bba:	371c      	adds	r7, #28
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr
 8002bc4:	03fff000 	.word	0x03fff000

08002bc8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3360      	adds	r3, #96	; 0x60
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3714      	adds	r7, #20
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	3360      	adds	r3, #96	; 0x60
 8002c04:	461a      	mov	r2, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	4413      	add	r3, r2
 8002c0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002c1e:	bf00      	nop
 8002c20:	371c      	adds	r7, #28
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr

08002c2a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002c2a:	b480      	push	{r7}
 8002c2c:	b087      	sub	sp, #28
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	3360      	adds	r3, #96	; 0x60
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4413      	add	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	431a      	orrs	r2, r3
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002c54:	bf00      	nop
 8002c56:	371c      	adds	r7, #28
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	60b9      	str	r1, [r7, #8]
 8002c6a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3360      	adds	r3, #96	; 0x60
 8002c70:	461a      	mov	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	4413      	add	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	431a      	orrs	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002c8a:	bf00      	nop
 8002c8c:	371c      	adds	r7, #28
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002c96:	b480      	push	{r7}
 8002c98:	b083      	sub	sp, #12
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
 8002c9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	615a      	str	r2, [r3, #20]
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e000      	b.n	8002cd6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b087      	sub	sp, #28
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	60f8      	str	r0, [r7, #12]
 8002cea:	60b9      	str	r1, [r7, #8]
 8002cec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	3330      	adds	r3, #48	; 0x30
 8002cf2:	461a      	mov	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	0a1b      	lsrs	r3, r3, #8
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	f003 030c 	and.w	r3, r3, #12
 8002cfe:	4413      	add	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	f003 031f 	and.w	r3, r3, #31
 8002d0c:	211f      	movs	r1, #31
 8002d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d12:	43db      	mvns	r3, r3
 8002d14:	401a      	ands	r2, r3
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	0e9b      	lsrs	r3, r3, #26
 8002d1a:	f003 011f 	and.w	r1, r3, #31
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	f003 031f 	and.w	r3, r3, #31
 8002d24:	fa01 f303 	lsl.w	r3, r1, r3
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002d2e:	bf00      	nop
 8002d30:	371c      	adds	r7, #28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b087      	sub	sp, #28
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3314      	adds	r3, #20
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	0e5b      	lsrs	r3, r3, #25
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	f003 0304 	and.w	r3, r3, #4
 8002d56:	4413      	add	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	0d1b      	lsrs	r3, r3, #20
 8002d62:	f003 031f 	and.w	r3, r3, #31
 8002d66:	2107      	movs	r1, #7
 8002d68:	fa01 f303 	lsl.w	r3, r1, r3
 8002d6c:	43db      	mvns	r3, r3
 8002d6e:	401a      	ands	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	0d1b      	lsrs	r3, r3, #20
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d84:	bf00      	nop
 8002d86:	371c      	adds	r7, #28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b085      	sub	sp, #20
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da8:	43db      	mvns	r3, r3
 8002daa:	401a      	ands	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f003 0318 	and.w	r3, r3, #24
 8002db2:	4908      	ldr	r1, [pc, #32]	; (8002dd4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002db4:	40d9      	lsrs	r1, r3
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	400b      	ands	r3, r1
 8002dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dbe:	431a      	orrs	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002dc6:	bf00      	nop
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	0007ffff 	.word	0x0007ffff

08002dd8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	689b      	ldr	r3, [r3, #8]
 8002de4:	f003 031f 	and.w	r3, r3, #31
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002e04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6093      	str	r3, [r2, #8]
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e28:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e2c:	d101      	bne.n	8002e32 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002e50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e7c:	d101      	bne.n	8002e82 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e82:	2300      	movs	r3, #0
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ea0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ea4:	f043 0201 	orr.w	r2, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002eac:	bf00      	nop
 8002eae:	370c      	adds	r7, #12
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr

08002eb8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ec8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ecc:	f043 0202 	orr.w	r2, r3, #2
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <LL_ADC_IsEnabled+0x18>
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e000      	b.n	8002efa <LL_ADC_IsEnabled+0x1a>
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d101      	bne.n	8002f1e <LL_ADC_IsDisableOngoing+0x18>
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e000      	b.n	8002f20 <LL_ADC_IsDisableOngoing+0x1a>
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	370c      	adds	r7, #12
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f40:	f043 0204 	orr.w	r2, r3, #4
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b083      	sub	sp, #12
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f68:	f043 0210 	orr.w	r2, r3, #16
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr

08002f7c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f003 0304 	and.w	r3, r3, #4
 8002f8c:	2b04      	cmp	r3, #4
 8002f8e:	d101      	bne.n	8002f94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f90:	2301      	movs	r3, #1
 8002f92:	e000      	b.n	8002f96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr

08002fa2 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002fa2:	b480      	push	{r7}
 8002fa4:	b083      	sub	sp, #12
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fb2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fb6:	f043 0220 	orr.w	r2, r3, #32
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002fbe:	bf00      	nop
 8002fc0:	370c      	adds	r7, #12
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr

08002fca <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002fca:	b480      	push	{r7}
 8002fcc:	b083      	sub	sp, #12
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f003 0308 	and.w	r3, r3, #8
 8002fda:	2b08      	cmp	r3, #8
 8002fdc:	d101      	bne.n	8002fe2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e000      	b.n	8002fe4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002fe2:	2300      	movs	r3, #0
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ff0:	b590      	push	{r4, r7, lr}
 8002ff2:	b089      	sub	sp, #36	; 0x24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e1a9      	b.n	800335e <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003014:	2b00      	cmp	r3, #0
 8003016:	d109      	bne.n	800302c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff f86d 	bl	80020f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff fef1 	bl	8002e18 <LL_ADC_IsDeepPowerDownEnabled>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d004      	beq.n	8003046 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fed7 	bl	8002df4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff ff0c 	bl	8002e68 <LL_ADC_IsInternalRegulatorEnabled>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d115      	bne.n	8003082 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4618      	mov	r0, r3
 800305c:	f7ff fef0 	bl	8002e40 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003060:	4b9c      	ldr	r3, [pc, #624]	; (80032d4 <HAL_ADC_Init+0x2e4>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	099b      	lsrs	r3, r3, #6
 8003066:	4a9c      	ldr	r2, [pc, #624]	; (80032d8 <HAL_ADC_Init+0x2e8>)
 8003068:	fba2 2303 	umull	r2, r3, r2, r3
 800306c:	099b      	lsrs	r3, r3, #6
 800306e:	3301      	adds	r3, #1
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003074:	e002      	b.n	800307c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	3b01      	subs	r3, #1
 800307a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f9      	bne.n	8003076 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff feee 	bl	8002e68 <LL_ADC_IsInternalRegulatorEnabled>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10d      	bne.n	80030ae <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003096:	f043 0210 	orr.w	r2, r3, #16
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a2:	f043 0201 	orr.w	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7ff ff62 	bl	8002f7c <LL_ADC_REG_IsConversionOngoing>
 80030b8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	f040 8142 	bne.w	800334c <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f040 813e 	bne.w	800334c <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80030d8:	f043 0202 	orr.w	r2, r3, #2
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff fefb 	bl	8002ee0 <LL_ADC_IsEnabled>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d141      	bne.n	8003174 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030f8:	d004      	beq.n	8003104 <HAL_ADC_Init+0x114>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a77      	ldr	r2, [pc, #476]	; (80032dc <HAL_ADC_Init+0x2ec>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d10f      	bne.n	8003124 <HAL_ADC_Init+0x134>
 8003104:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003108:	f7ff feea 	bl	8002ee0 <LL_ADC_IsEnabled>
 800310c:	4604      	mov	r4, r0
 800310e:	4873      	ldr	r0, [pc, #460]	; (80032dc <HAL_ADC_Init+0x2ec>)
 8003110:	f7ff fee6 	bl	8002ee0 <LL_ADC_IsEnabled>
 8003114:	4603      	mov	r3, r0
 8003116:	4323      	orrs	r3, r4
 8003118:	2b00      	cmp	r3, #0
 800311a:	bf0c      	ite	eq
 800311c:	2301      	moveq	r3, #1
 800311e:	2300      	movne	r3, #0
 8003120:	b2db      	uxtb	r3, r3
 8003122:	e012      	b.n	800314a <HAL_ADC_Init+0x15a>
 8003124:	486e      	ldr	r0, [pc, #440]	; (80032e0 <HAL_ADC_Init+0x2f0>)
 8003126:	f7ff fedb 	bl	8002ee0 <LL_ADC_IsEnabled>
 800312a:	4604      	mov	r4, r0
 800312c:	486d      	ldr	r0, [pc, #436]	; (80032e4 <HAL_ADC_Init+0x2f4>)
 800312e:	f7ff fed7 	bl	8002ee0 <LL_ADC_IsEnabled>
 8003132:	4603      	mov	r3, r0
 8003134:	431c      	orrs	r4, r3
 8003136:	486c      	ldr	r0, [pc, #432]	; (80032e8 <HAL_ADC_Init+0x2f8>)
 8003138:	f7ff fed2 	bl	8002ee0 <LL_ADC_IsEnabled>
 800313c:	4603      	mov	r3, r0
 800313e:	4323      	orrs	r3, r4
 8003140:	2b00      	cmp	r3, #0
 8003142:	bf0c      	ite	eq
 8003144:	2301      	moveq	r3, #1
 8003146:	2300      	movne	r3, #0
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d012      	beq.n	8003174 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003156:	d004      	beq.n	8003162 <HAL_ADC_Init+0x172>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a5f      	ldr	r2, [pc, #380]	; (80032dc <HAL_ADC_Init+0x2ec>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d101      	bne.n	8003166 <HAL_ADC_Init+0x176>
 8003162:	4a62      	ldr	r2, [pc, #392]	; (80032ec <HAL_ADC_Init+0x2fc>)
 8003164:	e000      	b.n	8003168 <HAL_ADC_Init+0x178>
 8003166:	4a62      	ldr	r2, [pc, #392]	; (80032f0 <HAL_ADC_Init+0x300>)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	4619      	mov	r1, r3
 800316e:	4610      	mov	r0, r2
 8003170:	f7ff fcd2 	bl	8002b18 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	7f5b      	ldrb	r3, [r3, #29]
 8003178:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800317e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003184:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800318a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003192:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003194:	4313      	orrs	r3, r2
 8003196:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d106      	bne.n	80031b0 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a6:	3b01      	subs	r3, #1
 80031a8:	045b      	lsls	r3, r3, #17
 80031aa:	69ba      	ldr	r2, [r7, #24]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d009      	beq.n	80031cc <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031bc:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	4b48      	ldr	r3, [pc, #288]	; (80032f4 <HAL_ADC_Init+0x304>)
 80031d4:	4013      	ands	r3, r2
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6812      	ldr	r2, [r2, #0]
 80031da:	69b9      	ldr	r1, [r7, #24]
 80031dc:	430b      	orrs	r3, r1
 80031de:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	691b      	ldr	r3, [r3, #16]
 80031e6:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	430a      	orrs	r2, r1
 80031f4:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4618      	mov	r0, r3
 80031fc:	f7ff fee5 	bl	8002fca <LL_ADC_INJ_IsConversionOngoing>
 8003200:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d17f      	bne.n	8003308 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d17c      	bne.n	8003308 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003212:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800321a:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800322a:	f023 0302 	bic.w	r3, r3, #2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6812      	ldr	r2, [r2, #0]
 8003232:	69b9      	ldr	r1, [r7, #24]
 8003234:	430b      	orrs	r3, r1
 8003236:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	691b      	ldr	r3, [r3, #16]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d017      	beq.n	8003270 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800324e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003258:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800325c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	6911      	ldr	r1, [r2, #16]
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6812      	ldr	r2, [r2, #0]
 8003268:	430b      	orrs	r3, r1
 800326a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800326e:	e013      	b.n	8003298 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	691a      	ldr	r2, [r3, #16]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800327e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003290:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003294:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d12a      	bne.n	80032f8 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80032ac:	f023 0304 	bic.w	r3, r3, #4
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80032b8:	4311      	orrs	r1, r2
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80032be:	4311      	orrs	r1, r2
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80032c4:	430a      	orrs	r2, r1
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f042 0201 	orr.w	r2, r2, #1
 80032d0:	611a      	str	r2, [r3, #16]
 80032d2:	e019      	b.n	8003308 <HAL_ADC_Init+0x318>
 80032d4:	20000010 	.word	0x20000010
 80032d8:	053e2d63 	.word	0x053e2d63
 80032dc:	50000100 	.word	0x50000100
 80032e0:	50000400 	.word	0x50000400
 80032e4:	50000500 	.word	0x50000500
 80032e8:	50000600 	.word	0x50000600
 80032ec:	50000300 	.word	0x50000300
 80032f0:	50000700 	.word	0x50000700
 80032f4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	691a      	ldr	r2, [r3, #16]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f022 0201 	bic.w	r2, r2, #1
 8003306:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	695b      	ldr	r3, [r3, #20]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d10c      	bne.n	800332a <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f023 010f 	bic.w	r1, r3, #15
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	1e5a      	subs	r2, r3, #1
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	631a      	str	r2, [r3, #48]	; 0x30
 8003328:	e007      	b.n	800333a <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 020f 	bic.w	r2, r2, #15
 8003338:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800333e:	f023 0303 	bic.w	r3, r3, #3
 8003342:	f043 0201 	orr.w	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	65da      	str	r2, [r3, #92]	; 0x5c
 800334a:	e007      	b.n	800335c <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003350:	f043 0210 	orr.w	r2, r3, #16
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800335c:	7ffb      	ldrb	r3, [r7, #31]
}
 800335e:	4618      	mov	r0, r3
 8003360:	3724      	adds	r7, #36	; 0x24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd90      	pop	{r4, r7, pc}
 8003366:	bf00      	nop

08003368 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800337c:	d004      	beq.n	8003388 <HAL_ADC_Start_DMA+0x20>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a5a      	ldr	r2, [pc, #360]	; (80034ec <HAL_ADC_Start_DMA+0x184>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d101      	bne.n	800338c <HAL_ADC_Start_DMA+0x24>
 8003388:	4b59      	ldr	r3, [pc, #356]	; (80034f0 <HAL_ADC_Start_DMA+0x188>)
 800338a:	e000      	b.n	800338e <HAL_ADC_Start_DMA+0x26>
 800338c:	4b59      	ldr	r3, [pc, #356]	; (80034f4 <HAL_ADC_Start_DMA+0x18c>)
 800338e:	4618      	mov	r0, r3
 8003390:	f7ff fd22 	bl	8002dd8 <LL_ADC_GetMultimode>
 8003394:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff fdee 	bl	8002f7c <LL_ADC_REG_IsConversionOngoing>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	f040 809b 	bne.w	80034de <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_ADC_Start_DMA+0x4e>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e096      	b.n	80034e4 <HAL_ADC_Start_DMA+0x17c>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2201      	movs	r2, #1
 80033ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a4d      	ldr	r2, [pc, #308]	; (80034f8 <HAL_ADC_Start_DMA+0x190>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d008      	beq.n	80033da <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d005      	beq.n	80033da <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	2b05      	cmp	r3, #5
 80033d2:	d002      	beq.n	80033da <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	2b09      	cmp	r3, #9
 80033d8:	d17a      	bne.n	80034d0 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fe00 	bl	8003fe0 <ADC_Enable>
 80033e0:	4603      	mov	r3, r0
 80033e2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80033e4:	7dfb      	ldrb	r3, [r7, #23]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d16d      	bne.n	80034c6 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ee:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033f2:	f023 0301 	bic.w	r3, r3, #1
 80033f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a3a      	ldr	r2, [pc, #232]	; (80034ec <HAL_ADC_Start_DMA+0x184>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d009      	beq.n	800341c <HAL_ADC_Start_DMA+0xb4>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a3b      	ldr	r2, [pc, #236]	; (80034fc <HAL_ADC_Start_DMA+0x194>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d002      	beq.n	8003418 <HAL_ADC_Start_DMA+0xb0>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	e003      	b.n	8003420 <HAL_ADC_Start_DMA+0xb8>
 8003418:	4b39      	ldr	r3, [pc, #228]	; (8003500 <HAL_ADC_Start_DMA+0x198>)
 800341a:	e001      	b.n	8003420 <HAL_ADC_Start_DMA+0xb8>
 800341c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003420:	68fa      	ldr	r2, [r7, #12]
 8003422:	6812      	ldr	r2, [r2, #0]
 8003424:	4293      	cmp	r3, r2
 8003426:	d002      	beq.n	800342e <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d105      	bne.n	800343a <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003432:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d006      	beq.n	8003454 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800344a:	f023 0206 	bic.w	r2, r3, #6
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	661a      	str	r2, [r3, #96]	; 0x60
 8003452:	e002      	b.n	800345a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800345e:	4a29      	ldr	r2, [pc, #164]	; (8003504 <HAL_ADC_Start_DMA+0x19c>)
 8003460:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003466:	4a28      	ldr	r2, [pc, #160]	; (8003508 <HAL_ADC_Start_DMA+0x1a0>)
 8003468:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346e:	4a27      	ldr	r2, [pc, #156]	; (800350c <HAL_ADC_Start_DMA+0x1a4>)
 8003470:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	221c      	movs	r2, #28
 8003478:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f042 0210 	orr.w	r2, r2, #16
 8003490:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f042 0201 	orr.w	r2, r2, #1
 80034a0:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	3340      	adds	r3, #64	; 0x40
 80034ac:	4619      	mov	r1, r3
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f001 fd07 	bl	8004ec4 <HAL_DMA_Start_IT>
 80034b6:	4603      	mov	r3, r0
 80034b8:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4618      	mov	r0, r3
 80034c0:	f7ff fd34 	bl	8002f2c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80034c4:	e00d      	b.n	80034e2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80034ce:	e008      	b.n	80034e2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80034dc:	e001      	b.n	80034e2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034de:	2302      	movs	r3, #2
 80034e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80034e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3718      	adds	r7, #24
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	50000100 	.word	0x50000100
 80034f0:	50000300 	.word	0x50000300
 80034f4:	50000700 	.word	0x50000700
 80034f8:	50000600 	.word	0x50000600
 80034fc:	50000500 	.word	0x50000500
 8003500:	50000400 	.word	0x50000400
 8003504:	080041cb 	.word	0x080041cb
 8003508:	080042a3 	.word	0x080042a3
 800350c:	080042bf 	.word	0x080042bf

08003510 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <HAL_ADC_Stop_DMA+0x16>
 8003522:	2302      	movs	r3, #2
 8003524:	e051      	b.n	80035ca <HAL_ADC_Stop_DMA+0xba>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800352e:	2103      	movs	r1, #3
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 fc99 	bl	8003e68 <ADC_ConversionStop>
 8003536:	4603      	mov	r3, r0
 8003538:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800353a:	7bfb      	ldrb	r3, [r7, #15]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d13f      	bne.n	80035c0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f022 0201 	bic.w	r2, r2, #1
 800354e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003554:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d10f      	bne.n	800357e <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003562:	4618      	mov	r0, r3
 8003564:	f001 fd29 	bl	8004fba <HAL_DMA_Abort>
 8003568:	4603      	mov	r3, r0
 800356a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d005      	beq.n	800357e <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003576:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f022 0210 	bic.w	r2, r2, #16
 800358c:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 800358e:	7bfb      	ldrb	r3, [r7, #15]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d105      	bne.n	80035a0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 fdb9 	bl	800410c <ADC_Disable>
 800359a:	4603      	mov	r3, r0
 800359c:	73fb      	strb	r3, [r7, #15]
 800359e:	e002      	b.n	80035a6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 fdb3 	bl	800410c <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80035a6:	7bfb      	ldrb	r3, [r7, #15]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d109      	bne.n	80035c0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035b0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	f043 0201 	orr.w	r2, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80035c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3710      	adds	r7, #16
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80035da:	bf00      	nop
 80035dc:	370c      	adds	r7, #12
 80035de:	46bd      	mov	sp, r7
 80035e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e4:	4770      	bx	lr
	...

080035e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b0b6      	sub	sp, #216	; 0xd8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003602:	2b01      	cmp	r3, #1
 8003604:	d102      	bne.n	800360c <HAL_ADC_ConfigChannel+0x24>
 8003606:	2302      	movs	r3, #2
 8003608:	f000 bc13 	b.w	8003e32 <HAL_ADC_ConfigChannel+0x84a>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff fcaf 	bl	8002f7c <LL_ADC_REG_IsConversionOngoing>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	f040 83f3 	bne.w	8003e0c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	6859      	ldr	r1, [r3, #4]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	461a      	mov	r2, r3
 8003634:	f7ff fb55 	bl	8002ce2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff fc9d 	bl	8002f7c <LL_ADC_REG_IsConversionOngoing>
 8003642:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4618      	mov	r0, r3
 800364c:	f7ff fcbd 	bl	8002fca <LL_ADC_INJ_IsConversionOngoing>
 8003650:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003654:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003658:	2b00      	cmp	r3, #0
 800365a:	f040 81d9 	bne.w	8003a10 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800365e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003662:	2b00      	cmp	r3, #0
 8003664:	f040 81d4 	bne.w	8003a10 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003670:	d10f      	bne.n	8003692 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6818      	ldr	r0, [r3, #0]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2200      	movs	r2, #0
 800367c:	4619      	mov	r1, r3
 800367e:	f7ff fb5c 	bl	8002d3a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800368a:	4618      	mov	r0, r3
 800368c:	f7ff fb03 	bl	8002c96 <LL_ADC_SetSamplingTimeCommonConfig>
 8003690:	e00e      	b.n	80036b0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	6819      	ldr	r1, [r3, #0]
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	461a      	mov	r2, r3
 80036a0:	f7ff fb4b 	bl	8002d3a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2100      	movs	r1, #0
 80036aa:	4618      	mov	r0, r3
 80036ac:	f7ff faf3 	bl	8002c96 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	695a      	ldr	r2, [r3, #20]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	08db      	lsrs	r3, r3, #3
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	fa02 f303 	lsl.w	r3, r2, r3
 80036c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d022      	beq.n	8003718 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6818      	ldr	r0, [r3, #0]
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	6919      	ldr	r1, [r3, #16]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80036e2:	f7ff fa4d 	bl	8002b80 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6919      	ldr	r1, [r3, #16]
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	699b      	ldr	r3, [r3, #24]
 80036f2:	461a      	mov	r2, r3
 80036f4:	f7ff fa99 	bl	8002c2a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6818      	ldr	r0, [r3, #0]
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003704:	2b01      	cmp	r3, #1
 8003706:	d102      	bne.n	800370e <HAL_ADC_ConfigChannel+0x126>
 8003708:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800370c:	e000      	b.n	8003710 <HAL_ADC_ConfigChannel+0x128>
 800370e:	2300      	movs	r3, #0
 8003710:	461a      	mov	r2, r3
 8003712:	f7ff faa5 	bl	8002c60 <LL_ADC_SetOffsetSaturation>
 8003716:	e17b      	b.n	8003a10 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2100      	movs	r1, #0
 800371e:	4618      	mov	r0, r3
 8003720:	f7ff fa52 	bl	8002bc8 <LL_ADC_GetOffsetChannel>
 8003724:	4603      	mov	r3, r0
 8003726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10a      	bne.n	8003744 <HAL_ADC_ConfigChannel+0x15c>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2100      	movs	r1, #0
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff fa47 	bl	8002bc8 <LL_ADC_GetOffsetChannel>
 800373a:	4603      	mov	r3, r0
 800373c:	0e9b      	lsrs	r3, r3, #26
 800373e:	f003 021f 	and.w	r2, r3, #31
 8003742:	e01e      	b.n	8003782 <HAL_ADC_ConfigChannel+0x19a>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2100      	movs	r1, #0
 800374a:	4618      	mov	r0, r3
 800374c:	f7ff fa3c 	bl	8002bc8 <LL_ADC_GetOffsetChannel>
 8003750:	4603      	mov	r3, r0
 8003752:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003756:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800375a:	fa93 f3a3 	rbit	r3, r3
 800375e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003762:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003766:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800376a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003772:	2320      	movs	r3, #32
 8003774:	e004      	b.n	8003780 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003776:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800377a:	fab3 f383 	clz	r3, r3
 800377e:	b2db      	uxtb	r3, r3
 8003780:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800378a:	2b00      	cmp	r3, #0
 800378c:	d105      	bne.n	800379a <HAL_ADC_ConfigChannel+0x1b2>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	0e9b      	lsrs	r3, r3, #26
 8003794:	f003 031f 	and.w	r3, r3, #31
 8003798:	e018      	b.n	80037cc <HAL_ADC_ConfigChannel+0x1e4>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80037a6:	fa93 f3a3 	rbit	r3, r3
 80037aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80037ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80037b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80037b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80037be:	2320      	movs	r3, #32
 80037c0:	e004      	b.n	80037cc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80037c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80037c6:	fab3 f383 	clz	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d106      	bne.n	80037de <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2200      	movs	r2, #0
 80037d6:	2100      	movs	r1, #0
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fa0b 	bl	8002bf4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2101      	movs	r1, #1
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff f9ef 	bl	8002bc8 <LL_ADC_GetOffsetChannel>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10a      	bne.n	800380a <HAL_ADC_ConfigChannel+0x222>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2101      	movs	r1, #1
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff f9e4 	bl	8002bc8 <LL_ADC_GetOffsetChannel>
 8003800:	4603      	mov	r3, r0
 8003802:	0e9b      	lsrs	r3, r3, #26
 8003804:	f003 021f 	and.w	r2, r3, #31
 8003808:	e01e      	b.n	8003848 <HAL_ADC_ConfigChannel+0x260>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2101      	movs	r1, #1
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff f9d9 	bl	8002bc8 <LL_ADC_GetOffsetChannel>
 8003816:	4603      	mov	r3, r0
 8003818:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003820:	fa93 f3a3 	rbit	r3, r3
 8003824:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003828:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800382c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003830:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003838:	2320      	movs	r3, #32
 800383a:	e004      	b.n	8003846 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800383c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003840:	fab3 f383 	clz	r3, r3
 8003844:	b2db      	uxtb	r3, r3
 8003846:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003850:	2b00      	cmp	r3, #0
 8003852:	d105      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x278>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	0e9b      	lsrs	r3, r3, #26
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	e018      	b.n	8003892 <HAL_ADC_ConfigChannel+0x2aa>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003868:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800386c:	fa93 f3a3 	rbit	r3, r3
 8003870:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003874:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003878:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800387c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003884:	2320      	movs	r3, #32
 8003886:	e004      	b.n	8003892 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003888:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800388c:	fab3 f383 	clz	r3, r3
 8003890:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003892:	429a      	cmp	r2, r3
 8003894:	d106      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2200      	movs	r2, #0
 800389c:	2101      	movs	r1, #1
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff f9a8 	bl	8002bf4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2102      	movs	r1, #2
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff f98c 	bl	8002bc8 <LL_ADC_GetOffsetChannel>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10a      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x2e8>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2102      	movs	r1, #2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff f981 	bl	8002bc8 <LL_ADC_GetOffsetChannel>
 80038c6:	4603      	mov	r3, r0
 80038c8:	0e9b      	lsrs	r3, r3, #26
 80038ca:	f003 021f 	and.w	r2, r3, #31
 80038ce:	e01e      	b.n	800390e <HAL_ADC_ConfigChannel+0x326>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2102      	movs	r1, #2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff f976 	bl	8002bc8 <LL_ADC_GetOffsetChannel>
 80038dc:	4603      	mov	r3, r0
 80038de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038e6:	fa93 f3a3 	rbit	r3, r3
 80038ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80038ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80038f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80038f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80038fe:	2320      	movs	r3, #32
 8003900:	e004      	b.n	800390c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003902:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003906:	fab3 f383 	clz	r3, r3
 800390a:	b2db      	uxtb	r3, r3
 800390c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003916:	2b00      	cmp	r3, #0
 8003918:	d105      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x33e>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	0e9b      	lsrs	r3, r3, #26
 8003920:	f003 031f 	and.w	r3, r3, #31
 8003924:	e016      	b.n	8003954 <HAL_ADC_ConfigChannel+0x36c>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003932:	fa93 f3a3 	rbit	r3, r3
 8003936:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003938:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800393a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800393e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003946:	2320      	movs	r3, #32
 8003948:	e004      	b.n	8003954 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800394a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800394e:	fab3 f383 	clz	r3, r3
 8003952:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003954:	429a      	cmp	r2, r3
 8003956:	d106      	bne.n	8003966 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2200      	movs	r2, #0
 800395e:	2102      	movs	r1, #2
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff f947 	bl	8002bf4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2103      	movs	r1, #3
 800396c:	4618      	mov	r0, r3
 800396e:	f7ff f92b 	bl	8002bc8 <LL_ADC_GetOffsetChannel>
 8003972:	4603      	mov	r3, r0
 8003974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x3aa>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2103      	movs	r1, #3
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff f920 	bl	8002bc8 <LL_ADC_GetOffsetChannel>
 8003988:	4603      	mov	r3, r0
 800398a:	0e9b      	lsrs	r3, r3, #26
 800398c:	f003 021f 	and.w	r2, r3, #31
 8003990:	e017      	b.n	80039c2 <HAL_ADC_ConfigChannel+0x3da>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2103      	movs	r1, #3
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff f915 	bl	8002bc8 <LL_ADC_GetOffsetChannel>
 800399e:	4603      	mov	r3, r0
 80039a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80039a4:	fa93 f3a3 	rbit	r3, r3
 80039a8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80039aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80039ac:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80039ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80039b4:	2320      	movs	r3, #32
 80039b6:	e003      	b.n	80039c0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80039b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039ba:	fab3 f383 	clz	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d105      	bne.n	80039da <HAL_ADC_ConfigChannel+0x3f2>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	0e9b      	lsrs	r3, r3, #26
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	e011      	b.n	80039fe <HAL_ADC_ConfigChannel+0x416>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80039e2:	fa93 f3a3 	rbit	r3, r3
 80039e6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80039e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80039ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80039ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80039f2:	2320      	movs	r3, #32
 80039f4:	e003      	b.n	80039fe <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80039f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039f8:	fab3 f383 	clz	r3, r3
 80039fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d106      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	2200      	movs	r2, #0
 8003a08:	2103      	movs	r1, #3
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff f8f2 	bl	8002bf4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff fa63 	bl	8002ee0 <LL_ADC_IsEnabled>
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f040 813d 	bne.w	8003c9c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6818      	ldr	r0, [r3, #0]
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	6819      	ldr	r1, [r3, #0]
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	461a      	mov	r2, r3
 8003a30:	f7ff f9ae 	bl	8002d90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4aa2      	ldr	r2, [pc, #648]	; (8003cc4 <HAL_ADC_ConfigChannel+0x6dc>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	f040 812e 	bne.w	8003c9c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10b      	bne.n	8003a68 <HAL_ADC_ConfigChannel+0x480>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	0e9b      	lsrs	r3, r3, #26
 8003a56:	3301      	adds	r3, #1
 8003a58:	f003 031f 	and.w	r3, r3, #31
 8003a5c:	2b09      	cmp	r3, #9
 8003a5e:	bf94      	ite	ls
 8003a60:	2301      	movls	r3, #1
 8003a62:	2300      	movhi	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	e019      	b.n	8003a9c <HAL_ADC_ConfigChannel+0x4b4>
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a70:	fa93 f3a3 	rbit	r3, r3
 8003a74:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003a76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a78:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003a7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003a80:	2320      	movs	r3, #32
 8003a82:	e003      	b.n	8003a8c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003a84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a86:	fab3 f383 	clz	r3, r3
 8003a8a:	b2db      	uxtb	r3, r3
 8003a8c:	3301      	adds	r3, #1
 8003a8e:	f003 031f 	and.w	r3, r3, #31
 8003a92:	2b09      	cmp	r3, #9
 8003a94:	bf94      	ite	ls
 8003a96:	2301      	movls	r3, #1
 8003a98:	2300      	movhi	r3, #0
 8003a9a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d079      	beq.n	8003b94 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d107      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x4d4>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	0e9b      	lsrs	r3, r3, #26
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	069b      	lsls	r3, r3, #26
 8003ab6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aba:	e015      	b.n	8003ae8 <HAL_ADC_ConfigChannel+0x500>
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ac4:	fa93 f3a3 	rbit	r3, r3
 8003ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003aca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003acc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003ad4:	2320      	movs	r3, #32
 8003ad6:	e003      	b.n	8003ae0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ada:	fab3 f383 	clz	r3, r3
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	069b      	lsls	r3, r3, #26
 8003ae4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x520>
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	0e9b      	lsrs	r3, r3, #26
 8003afa:	3301      	adds	r3, #1
 8003afc:	f003 031f 	and.w	r3, r3, #31
 8003b00:	2101      	movs	r1, #1
 8003b02:	fa01 f303 	lsl.w	r3, r1, r3
 8003b06:	e017      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x550>
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b10:	fa93 f3a3 	rbit	r3, r3
 8003b14:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003b16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b18:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003b1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003b20:	2320      	movs	r3, #32
 8003b22:	e003      	b.n	8003b2c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b26:	fab3 f383 	clz	r3, r3
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	f003 031f 	and.w	r3, r3, #31
 8003b32:	2101      	movs	r1, #1
 8003b34:	fa01 f303 	lsl.w	r3, r1, r3
 8003b38:	ea42 0103 	orr.w	r1, r2, r3
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10a      	bne.n	8003b5e <HAL_ADC_ConfigChannel+0x576>
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	0e9b      	lsrs	r3, r3, #26
 8003b4e:	3301      	adds	r3, #1
 8003b50:	f003 021f 	and.w	r2, r3, #31
 8003b54:	4613      	mov	r3, r2
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	4413      	add	r3, r2
 8003b5a:	051b      	lsls	r3, r3, #20
 8003b5c:	e018      	b.n	8003b90 <HAL_ADC_ConfigChannel+0x5a8>
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b66:	fa93 f3a3 	rbit	r3, r3
 8003b6a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d101      	bne.n	8003b7a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003b76:	2320      	movs	r3, #32
 8003b78:	e003      	b.n	8003b82 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003b7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b7c:	fab3 f383 	clz	r3, r3
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	3301      	adds	r3, #1
 8003b84:	f003 021f 	and.w	r2, r3, #31
 8003b88:	4613      	mov	r3, r2
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	4413      	add	r3, r2
 8003b8e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b90:	430b      	orrs	r3, r1
 8003b92:	e07e      	b.n	8003c92 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d107      	bne.n	8003bb0 <HAL_ADC_ConfigChannel+0x5c8>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	0e9b      	lsrs	r3, r3, #26
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	069b      	lsls	r3, r3, #26
 8003baa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bae:	e015      	b.n	8003bdc <HAL_ADC_ConfigChannel+0x5f4>
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb8:	fa93 f3a3 	rbit	r3, r3
 8003bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003bc8:	2320      	movs	r3, #32
 8003bca:	e003      	b.n	8003bd4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bce:	fab3 f383 	clz	r3, r3
 8003bd2:	b2db      	uxtb	r3, r3
 8003bd4:	3301      	adds	r3, #1
 8003bd6:	069b      	lsls	r3, r3, #26
 8003bd8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d109      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x614>
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	0e9b      	lsrs	r3, r3, #26
 8003bee:	3301      	adds	r3, #1
 8003bf0:	f003 031f 	and.w	r3, r3, #31
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfa:	e017      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x644>
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	fa93 f3a3 	rbit	r3, r3
 8003c08:	61fb      	str	r3, [r7, #28]
  return result;
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003c14:	2320      	movs	r3, #32
 8003c16:	e003      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	fab3 f383 	clz	r3, r3
 8003c1e:	b2db      	uxtb	r3, r3
 8003c20:	3301      	adds	r3, #1
 8003c22:	f003 031f 	and.w	r3, r3, #31
 8003c26:	2101      	movs	r1, #1
 8003c28:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2c:	ea42 0103 	orr.w	r1, r2, r3
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d10d      	bne.n	8003c58 <HAL_ADC_ConfigChannel+0x670>
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	0e9b      	lsrs	r3, r3, #26
 8003c42:	3301      	adds	r3, #1
 8003c44:	f003 021f 	and.w	r2, r3, #31
 8003c48:	4613      	mov	r3, r2
 8003c4a:	005b      	lsls	r3, r3, #1
 8003c4c:	4413      	add	r3, r2
 8003c4e:	3b1e      	subs	r3, #30
 8003c50:	051b      	lsls	r3, r3, #20
 8003c52:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c56:	e01b      	b.n	8003c90 <HAL_ADC_ConfigChannel+0x6a8>
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	fa93 f3a3 	rbit	r3, r3
 8003c64:	613b      	str	r3, [r7, #16]
  return result;
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003c70:	2320      	movs	r3, #32
 8003c72:	e003      	b.n	8003c7c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	fab3 f383 	clz	r3, r3
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	f003 021f 	and.w	r2, r3, #31
 8003c82:	4613      	mov	r3, r2
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	4413      	add	r3, r2
 8003c88:	3b1e      	subs	r3, #30
 8003c8a:	051b      	lsls	r3, r3, #20
 8003c8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c90:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c96:	4619      	mov	r1, r3
 8003c98:	f7ff f84f 	bl	8002d3a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	4b09      	ldr	r3, [pc, #36]	; (8003cc8 <HAL_ADC_ConfigChannel+0x6e0>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80be 	beq.w	8003e26 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003cb2:	d004      	beq.n	8003cbe <HAL_ADC_ConfigChannel+0x6d6>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a04      	ldr	r2, [pc, #16]	; (8003ccc <HAL_ADC_ConfigChannel+0x6e4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d10a      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x6ec>
 8003cbe:	4b04      	ldr	r3, [pc, #16]	; (8003cd0 <HAL_ADC_ConfigChannel+0x6e8>)
 8003cc0:	e009      	b.n	8003cd6 <HAL_ADC_ConfigChannel+0x6ee>
 8003cc2:	bf00      	nop
 8003cc4:	407f0000 	.word	0x407f0000
 8003cc8:	80080000 	.word	0x80080000
 8003ccc:	50000100 	.word	0x50000100
 8003cd0:	50000300 	.word	0x50000300
 8003cd4:	4b59      	ldr	r3, [pc, #356]	; (8003e3c <HAL_ADC_ConfigChannel+0x854>)
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7fe ff44 	bl	8002b64 <LL_ADC_GetCommonPathInternalCh>
 8003cdc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a56      	ldr	r2, [pc, #344]	; (8003e40 <HAL_ADC_ConfigChannel+0x858>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d004      	beq.n	8003cf4 <HAL_ADC_ConfigChannel+0x70c>
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a55      	ldr	r2, [pc, #340]	; (8003e44 <HAL_ADC_ConfigChannel+0x85c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d13a      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003cf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d134      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d08:	d005      	beq.n	8003d16 <HAL_ADC_ConfigChannel+0x72e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a4e      	ldr	r2, [pc, #312]	; (8003e48 <HAL_ADC_ConfigChannel+0x860>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	f040 8085 	bne.w	8003e20 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d1e:	d004      	beq.n	8003d2a <HAL_ADC_ConfigChannel+0x742>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a49      	ldr	r2, [pc, #292]	; (8003e4c <HAL_ADC_ConfigChannel+0x864>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d101      	bne.n	8003d2e <HAL_ADC_ConfigChannel+0x746>
 8003d2a:	4a49      	ldr	r2, [pc, #292]	; (8003e50 <HAL_ADC_ConfigChannel+0x868>)
 8003d2c:	e000      	b.n	8003d30 <HAL_ADC_ConfigChannel+0x748>
 8003d2e:	4a43      	ldr	r2, [pc, #268]	; (8003e3c <HAL_ADC_ConfigChannel+0x854>)
 8003d30:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	f7fe feff 	bl	8002b3e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d40:	4b44      	ldr	r3, [pc, #272]	; (8003e54 <HAL_ADC_ConfigChannel+0x86c>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	099b      	lsrs	r3, r3, #6
 8003d46:	4a44      	ldr	r2, [pc, #272]	; (8003e58 <HAL_ADC_ConfigChannel+0x870>)
 8003d48:	fba2 2303 	umull	r2, r3, r2, r3
 8003d4c:	099b      	lsrs	r3, r3, #6
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	4613      	mov	r3, r2
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	4413      	add	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d5a:	e002      	b.n	8003d62 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d1f9      	bne.n	8003d5c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d68:	e05a      	b.n	8003e20 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a3b      	ldr	r2, [pc, #236]	; (8003e5c <HAL_ADC_ConfigChannel+0x874>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d125      	bne.n	8003dc0 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003d74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d11f      	bne.n	8003dc0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a31      	ldr	r2, [pc, #196]	; (8003e4c <HAL_ADC_ConfigChannel+0x864>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d104      	bne.n	8003d94 <HAL_ADC_ConfigChannel+0x7ac>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a34      	ldr	r2, [pc, #208]	; (8003e60 <HAL_ADC_ConfigChannel+0x878>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d047      	beq.n	8003e24 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d9c:	d004      	beq.n	8003da8 <HAL_ADC_ConfigChannel+0x7c0>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a2a      	ldr	r2, [pc, #168]	; (8003e4c <HAL_ADC_ConfigChannel+0x864>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d101      	bne.n	8003dac <HAL_ADC_ConfigChannel+0x7c4>
 8003da8:	4a29      	ldr	r2, [pc, #164]	; (8003e50 <HAL_ADC_ConfigChannel+0x868>)
 8003daa:	e000      	b.n	8003dae <HAL_ADC_ConfigChannel+0x7c6>
 8003dac:	4a23      	ldr	r2, [pc, #140]	; (8003e3c <HAL_ADC_ConfigChannel+0x854>)
 8003dae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003db6:	4619      	mov	r1, r3
 8003db8:	4610      	mov	r0, r2
 8003dba:	f7fe fec0 	bl	8002b3e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003dbe:	e031      	b.n	8003e24 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a27      	ldr	r2, [pc, #156]	; (8003e64 <HAL_ADC_ConfigChannel+0x87c>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d12d      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003dca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d127      	bne.n	8003e26 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a1c      	ldr	r2, [pc, #112]	; (8003e4c <HAL_ADC_ConfigChannel+0x864>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d022      	beq.n	8003e26 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003de8:	d004      	beq.n	8003df4 <HAL_ADC_ConfigChannel+0x80c>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a17      	ldr	r2, [pc, #92]	; (8003e4c <HAL_ADC_ConfigChannel+0x864>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d101      	bne.n	8003df8 <HAL_ADC_ConfigChannel+0x810>
 8003df4:	4a16      	ldr	r2, [pc, #88]	; (8003e50 <HAL_ADC_ConfigChannel+0x868>)
 8003df6:	e000      	b.n	8003dfa <HAL_ADC_ConfigChannel+0x812>
 8003df8:	4a10      	ldr	r2, [pc, #64]	; (8003e3c <HAL_ADC_ConfigChannel+0x854>)
 8003dfa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e02:	4619      	mov	r1, r3
 8003e04:	4610      	mov	r0, r2
 8003e06:	f7fe fe9a 	bl	8002b3e <LL_ADC_SetCommonPathInternalCh>
 8003e0a:	e00c      	b.n	8003e26 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e10:	f043 0220 	orr.w	r2, r3, #32
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003e1e:	e002      	b.n	8003e26 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e20:	bf00      	nop
 8003e22:	e000      	b.n	8003e26 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e24:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e2e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	37d8      	adds	r7, #216	; 0xd8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	50000700 	.word	0x50000700
 8003e40:	c3210000 	.word	0xc3210000
 8003e44:	90c00010 	.word	0x90c00010
 8003e48:	50000600 	.word	0x50000600
 8003e4c:	50000100 	.word	0x50000100
 8003e50:	50000300 	.word	0x50000300
 8003e54:	20000010 	.word	0x20000010
 8003e58:	053e2d63 	.word	0x053e2d63
 8003e5c:	c7520000 	.word	0xc7520000
 8003e60:	50000500 	.word	0x50000500
 8003e64:	cb840000 	.word	0xcb840000

08003e68 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
 8003e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff f87c 	bl	8002f7c <LL_ADC_REG_IsConversionOngoing>
 8003e84:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f7ff f89d 	bl	8002fca <LL_ADC_INJ_IsConversionOngoing>
 8003e90:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d103      	bne.n	8003ea0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	f000 8098 	beq.w	8003fd0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d02a      	beq.n	8003f04 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	7f5b      	ldrb	r3, [r3, #29]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d126      	bne.n	8003f04 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	7f1b      	ldrb	r3, [r3, #28]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d122      	bne.n	8003f04 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003ec2:	e014      	b.n	8003eee <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	4a45      	ldr	r2, [pc, #276]	; (8003fdc <ADC_ConversionStop+0x174>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d90d      	bls.n	8003ee8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ed0:	f043 0210 	orr.w	r2, r3, #16
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003edc:	f043 0201 	orr.w	r2, r3, #1
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e074      	b.n	8003fd2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	3301      	adds	r3, #1
 8003eec:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ef8:	2b40      	cmp	r3, #64	; 0x40
 8003efa:	d1e3      	bne.n	8003ec4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2240      	movs	r2, #64	; 0x40
 8003f02:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d014      	beq.n	8003f34 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff f834 	bl	8002f7c <LL_ADC_REG_IsConversionOngoing>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00c      	beq.n	8003f34 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fe fff1 	bl	8002f06 <LL_ADC_IsDisableOngoing>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d104      	bne.n	8003f34 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7ff f810 	bl	8002f54 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d014      	beq.n	8003f64 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f7ff f843 	bl	8002fca <LL_ADC_INJ_IsConversionOngoing>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00c      	beq.n	8003f64 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f7fe ffd9 	bl	8002f06 <LL_ADC_IsDisableOngoing>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d104      	bne.n	8003f64 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7ff f81f 	bl	8002fa2 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003f64:	69bb      	ldr	r3, [r7, #24]
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d005      	beq.n	8003f76 <ADC_ConversionStop+0x10e>
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	2b03      	cmp	r3, #3
 8003f6e:	d105      	bne.n	8003f7c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003f70:	230c      	movs	r3, #12
 8003f72:	617b      	str	r3, [r7, #20]
        break;
 8003f74:	e005      	b.n	8003f82 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003f76:	2308      	movs	r3, #8
 8003f78:	617b      	str	r3, [r7, #20]
        break;
 8003f7a:	e002      	b.n	8003f82 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003f7c:	2304      	movs	r3, #4
 8003f7e:	617b      	str	r3, [r7, #20]
        break;
 8003f80:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003f82:	f7fe fd71 	bl	8002a68 <HAL_GetTick>
 8003f86:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003f88:	e01b      	b.n	8003fc2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003f8a:	f7fe fd6d 	bl	8002a68 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b05      	cmp	r3, #5
 8003f96:	d914      	bls.n	8003fc2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689a      	ldr	r2, [r3, #8]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00d      	beq.n	8003fc2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003faa:	f043 0210 	orr.w	r2, r3, #16
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fb6:	f043 0201 	orr.w	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e007      	b.n	8003fd2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1dc      	bne.n	8003f8a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003fd0:	2300      	movs	r3, #0
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3720      	adds	r7, #32
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	a33fffff 	.word	0xa33fffff

08003fe0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fe ff75 	bl	8002ee0 <LL_ADC_IsEnabled>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d176      	bne.n	80040ea <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	4b3c      	ldr	r3, [pc, #240]	; (80040f4 <ADC_Enable+0x114>)
 8004004:	4013      	ands	r3, r2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00d      	beq.n	8004026 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400e:	f043 0210 	orr.w	r2, r3, #16
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800401a:	f043 0201 	orr.w	r2, r3, #1
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e062      	b.n	80040ec <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4618      	mov	r0, r3
 800402c:	f7fe ff30 	bl	8002e90 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004038:	d004      	beq.n	8004044 <ADC_Enable+0x64>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a2e      	ldr	r2, [pc, #184]	; (80040f8 <ADC_Enable+0x118>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d101      	bne.n	8004048 <ADC_Enable+0x68>
 8004044:	4b2d      	ldr	r3, [pc, #180]	; (80040fc <ADC_Enable+0x11c>)
 8004046:	e000      	b.n	800404a <ADC_Enable+0x6a>
 8004048:	4b2d      	ldr	r3, [pc, #180]	; (8004100 <ADC_Enable+0x120>)
 800404a:	4618      	mov	r0, r3
 800404c:	f7fe fd8a 	bl	8002b64 <LL_ADC_GetCommonPathInternalCh>
 8004050:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8004052:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004056:	2b00      	cmp	r3, #0
 8004058:	d013      	beq.n	8004082 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800405a:	4b2a      	ldr	r3, [pc, #168]	; (8004104 <ADC_Enable+0x124>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	099b      	lsrs	r3, r3, #6
 8004060:	4a29      	ldr	r2, [pc, #164]	; (8004108 <ADC_Enable+0x128>)
 8004062:	fba2 2303 	umull	r2, r3, r2, r3
 8004066:	099b      	lsrs	r3, r3, #6
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	4613      	mov	r3, r2
 800406c:	005b      	lsls	r3, r3, #1
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004074:	e002      	b.n	800407c <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	3b01      	subs	r3, #1
 800407a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f9      	bne.n	8004076 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004082:	f7fe fcf1 	bl	8002a68 <HAL_GetTick>
 8004086:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004088:	e028      	b.n	80040dc <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4618      	mov	r0, r3
 8004090:	f7fe ff26 	bl	8002ee0 <LL_ADC_IsEnabled>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d104      	bne.n	80040a4 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4618      	mov	r0, r3
 80040a0:	f7fe fef6 	bl	8002e90 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80040a4:	f7fe fce0 	bl	8002a68 <HAL_GetTick>
 80040a8:	4602      	mov	r2, r0
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	1ad3      	subs	r3, r2, r3
 80040ae:	2b02      	cmp	r3, #2
 80040b0:	d914      	bls.n	80040dc <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d00d      	beq.n	80040dc <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c4:	f043 0210 	orr.w	r2, r3, #16
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040d0:	f043 0201 	orr.w	r2, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e007      	b.n	80040ec <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0301 	and.w	r3, r3, #1
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d1cf      	bne.n	800408a <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	8000003f 	.word	0x8000003f
 80040f8:	50000100 	.word	0x50000100
 80040fc:	50000300 	.word	0x50000300
 8004100:	50000700 	.word	0x50000700
 8004104:	20000010 	.word	0x20000010
 8004108:	053e2d63 	.word	0x053e2d63

0800410c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4618      	mov	r0, r3
 800411a:	f7fe fef4 	bl	8002f06 <LL_ADC_IsDisableOngoing>
 800411e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4618      	mov	r0, r3
 8004126:	f7fe fedb 	bl	8002ee0 <LL_ADC_IsEnabled>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d047      	beq.n	80041c0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d144      	bne.n	80041c0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 030d 	and.w	r3, r3, #13
 8004140:	2b01      	cmp	r3, #1
 8004142:	d10c      	bne.n	800415e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4618      	mov	r0, r3
 800414a:	f7fe feb5 	bl	8002eb8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2203      	movs	r2, #3
 8004154:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004156:	f7fe fc87 	bl	8002a68 <HAL_GetTick>
 800415a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800415c:	e029      	b.n	80041b2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004162:	f043 0210 	orr.w	r2, r3, #16
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800416e:	f043 0201 	orr.w	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e023      	b.n	80041c2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800417a:	f7fe fc75 	bl	8002a68 <HAL_GetTick>
 800417e:	4602      	mov	r2, r0
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	2b02      	cmp	r3, #2
 8004186:	d914      	bls.n	80041b2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00d      	beq.n	80041b2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800419a:	f043 0210 	orr.w	r2, r3, #16
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a6:	f043 0201 	orr.w	r2, r3, #1
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e007      	b.n	80041c2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1dc      	bne.n	800417a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d14b      	bne.n	800427c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d021      	beq.n	8004242 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4618      	mov	r0, r3
 8004204:	f7fe fd5a 	bl	8002cbc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004208:	4603      	mov	r3, r0
 800420a:	2b00      	cmp	r3, #0
 800420c:	d032      	beq.n	8004274 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004218:	2b00      	cmp	r3, #0
 800421a:	d12b      	bne.n	8004274 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004220:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004230:	2b00      	cmp	r3, #0
 8004232:	d11f      	bne.n	8004274 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004238:	f043 0201 	orr.w	r2, r3, #1
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004240:	e018      	b.n	8004274 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 0302 	and.w	r3, r3, #2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d111      	bne.n	8004274 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004254:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004260:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d105      	bne.n	8004274 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800426c:	f043 0201 	orr.w	r2, r3, #1
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004274:	68f8      	ldr	r0, [r7, #12]
 8004276:	f7fd fdcd 	bl	8001e14 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800427a:	e00e      	b.n	800429a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b00      	cmp	r3, #0
 8004286:	d003      	beq.n	8004290 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004288:	68f8      	ldr	r0, [r7, #12]
 800428a:	f7ff f9a2 	bl	80035d2 <HAL_ADC_ErrorCallback>
}
 800428e:	e004      	b.n	800429a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	4798      	blx	r3
}
 800429a:	bf00      	nop
 800429c:	3710      	adds	r7, #16
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b084      	sub	sp, #16
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f7fd fd7b 	bl	8001dac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042b6:	bf00      	nop
 80042b8:	3710      	adds	r7, #16
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80042be:	b580      	push	{r7, lr}
 80042c0:	b084      	sub	sp, #16
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ca:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042dc:	f043 0204 	orr.w	r2, r3, #4
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f7ff f974 	bl	80035d2 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80042ea:	bf00      	nop
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <LL_ADC_IsEnabled>:
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	f003 0301 	and.w	r3, r3, #1
 8004302:	2b01      	cmp	r3, #1
 8004304:	d101      	bne.n	800430a <LL_ADC_IsEnabled+0x18>
 8004306:	2301      	movs	r3, #1
 8004308:	e000      	b.n	800430c <LL_ADC_IsEnabled+0x1a>
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	370c      	adds	r7, #12
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <LL_ADC_StartCalibration>:
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800432a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004334:	4313      	orrs	r3, r2
 8004336:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	609a      	str	r2, [r3, #8]
}
 800433e:	bf00      	nop
 8004340:	370c      	adds	r7, #12
 8004342:	46bd      	mov	sp, r7
 8004344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004348:	4770      	bx	lr

0800434a <LL_ADC_IsCalibrationOnGoing>:
{
 800434a:	b480      	push	{r7}
 800434c:	b083      	sub	sp, #12
 800434e:	af00      	add	r7, sp, #0
 8004350:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800435a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800435e:	d101      	bne.n	8004364 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004360:	2301      	movs	r3, #1
 8004362:	e000      	b.n	8004366 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr

08004372 <LL_ADC_REG_IsConversionOngoing>:
{
 8004372:	b480      	push	{r7}
 8004374:	b083      	sub	sp, #12
 8004376:	af00      	add	r7, sp, #0
 8004378:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f003 0304 	and.w	r3, r3, #4
 8004382:	2b04      	cmp	r3, #4
 8004384:	d101      	bne.n	800438a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d101      	bne.n	80043b4 <HAL_ADCEx_Calibration_Start+0x1c>
 80043b0:	2302      	movs	r3, #2
 80043b2:	e04d      	b.n	8004450 <HAL_ADCEx_Calibration_Start+0xb8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2201      	movs	r2, #1
 80043b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80043bc:	6878      	ldr	r0, [r7, #4]
 80043be:	f7ff fea5 	bl	800410c <ADC_Disable>
 80043c2:	4603      	mov	r3, r0
 80043c4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d136      	bne.n	800443a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80043d4:	f023 0302 	bic.w	r3, r3, #2
 80043d8:	f043 0202 	orr.w	r2, r3, #2
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	6839      	ldr	r1, [r7, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff ff96 	bl	8004318 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80043ec:	e014      	b.n	8004418 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	3301      	adds	r3, #1
 80043f2:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	4a18      	ldr	r2, [pc, #96]	; (8004458 <HAL_ADCEx_Calibration_Start+0xc0>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d90d      	bls.n	8004418 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004400:	f023 0312 	bic.w	r3, r3, #18
 8004404:	f043 0210 	orr.w	r2, r3, #16
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e01b      	b.n	8004450 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f7ff ff94 	bl	800434a <LL_ADC_IsCalibrationOnGoing>
 8004422:	4603      	mov	r3, r0
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e2      	bne.n	80043ee <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442c:	f023 0303 	bic.w	r3, r3, #3
 8004430:	f043 0201 	orr.w	r2, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	65da      	str	r2, [r3, #92]	; 0x5c
 8004438:	e005      	b.n	8004446 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443e:	f043 0210 	orr.w	r2, r3, #16
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800444e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	0004de01 	.word	0x0004de01

0800445c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800445c:	b590      	push	{r4, r7, lr}
 800445e:	b0a1      	sub	sp, #132	; 0x84
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004466:	2300      	movs	r3, #0
 8004468:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004472:	2b01      	cmp	r3, #1
 8004474:	d101      	bne.n	800447a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8004476:	2302      	movs	r3, #2
 8004478:	e0e7      	b.n	800464a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004482:	2300      	movs	r3, #0
 8004484:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8004486:	2300      	movs	r3, #0
 8004488:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004492:	d102      	bne.n	800449a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004494:	4b6f      	ldr	r3, [pc, #444]	; (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004496:	60bb      	str	r3, [r7, #8]
 8004498:	e009      	b.n	80044ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a6e      	ldr	r2, [pc, #440]	; (8004658 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d102      	bne.n	80044aa <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80044a4:	4b6d      	ldr	r3, [pc, #436]	; (800465c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80044a6:	60bb      	str	r3, [r7, #8]
 80044a8:	e001      	b.n	80044ae <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80044aa:	2300      	movs	r3, #0
 80044ac:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10b      	bne.n	80044cc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e0be      	b.n	800464a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7ff ff4f 	bl	8004372 <LL_ADC_REG_IsConversionOngoing>
 80044d4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4618      	mov	r0, r3
 80044dc:	f7ff ff49 	bl	8004372 <LL_ADC_REG_IsConversionOngoing>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	f040 80a0 	bne.w	8004628 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80044e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f040 809c 	bne.w	8004628 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044f8:	d004      	beq.n	8004504 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a55      	ldr	r2, [pc, #340]	; (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d101      	bne.n	8004508 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004504:	4b56      	ldr	r3, [pc, #344]	; (8004660 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004506:	e000      	b.n	800450a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004508:	4b56      	ldr	r3, [pc, #344]	; (8004664 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800450a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d04b      	beq.n	80045ac <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004514:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	6859      	ldr	r1, [r3, #4]
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004526:	035b      	lsls	r3, r3, #13
 8004528:	430b      	orrs	r3, r1
 800452a:	431a      	orrs	r2, r3
 800452c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800452e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004538:	d004      	beq.n	8004544 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a45      	ldr	r2, [pc, #276]	; (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d10f      	bne.n	8004564 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004544:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004548:	f7ff fed3 	bl	80042f2 <LL_ADC_IsEnabled>
 800454c:	4604      	mov	r4, r0
 800454e:	4841      	ldr	r0, [pc, #260]	; (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004550:	f7ff fecf 	bl	80042f2 <LL_ADC_IsEnabled>
 8004554:	4603      	mov	r3, r0
 8004556:	4323      	orrs	r3, r4
 8004558:	2b00      	cmp	r3, #0
 800455a:	bf0c      	ite	eq
 800455c:	2301      	moveq	r3, #1
 800455e:	2300      	movne	r3, #0
 8004560:	b2db      	uxtb	r3, r3
 8004562:	e012      	b.n	800458a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004564:	483c      	ldr	r0, [pc, #240]	; (8004658 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004566:	f7ff fec4 	bl	80042f2 <LL_ADC_IsEnabled>
 800456a:	4604      	mov	r4, r0
 800456c:	483b      	ldr	r0, [pc, #236]	; (800465c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800456e:	f7ff fec0 	bl	80042f2 <LL_ADC_IsEnabled>
 8004572:	4603      	mov	r3, r0
 8004574:	431c      	orrs	r4, r3
 8004576:	483c      	ldr	r0, [pc, #240]	; (8004668 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004578:	f7ff febb 	bl	80042f2 <LL_ADC_IsEnabled>
 800457c:	4603      	mov	r3, r0
 800457e:	4323      	orrs	r3, r4
 8004580:	2b00      	cmp	r3, #0
 8004582:	bf0c      	ite	eq
 8004584:	2301      	moveq	r3, #1
 8004586:	2300      	movne	r3, #0
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	d056      	beq.n	800463c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800458e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004596:	f023 030f 	bic.w	r3, r3, #15
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	6811      	ldr	r1, [r2, #0]
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	6892      	ldr	r2, [r2, #8]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	431a      	orrs	r2, r3
 80045a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a8:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80045aa:	e047      	b.n	800463c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80045ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045b6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045c0:	d004      	beq.n	80045cc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a23      	ldr	r2, [pc, #140]	; (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d10f      	bne.n	80045ec <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80045cc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80045d0:	f7ff fe8f 	bl	80042f2 <LL_ADC_IsEnabled>
 80045d4:	4604      	mov	r4, r0
 80045d6:	481f      	ldr	r0, [pc, #124]	; (8004654 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80045d8:	f7ff fe8b 	bl	80042f2 <LL_ADC_IsEnabled>
 80045dc:	4603      	mov	r3, r0
 80045de:	4323      	orrs	r3, r4
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	bf0c      	ite	eq
 80045e4:	2301      	moveq	r3, #1
 80045e6:	2300      	movne	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	e012      	b.n	8004612 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80045ec:	481a      	ldr	r0, [pc, #104]	; (8004658 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80045ee:	f7ff fe80 	bl	80042f2 <LL_ADC_IsEnabled>
 80045f2:	4604      	mov	r4, r0
 80045f4:	4819      	ldr	r0, [pc, #100]	; (800465c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80045f6:	f7ff fe7c 	bl	80042f2 <LL_ADC_IsEnabled>
 80045fa:	4603      	mov	r3, r0
 80045fc:	431c      	orrs	r4, r3
 80045fe:	481a      	ldr	r0, [pc, #104]	; (8004668 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004600:	f7ff fe77 	bl	80042f2 <LL_ADC_IsEnabled>
 8004604:	4603      	mov	r3, r0
 8004606:	4323      	orrs	r3, r4
 8004608:	2b00      	cmp	r3, #0
 800460a:	bf0c      	ite	eq
 800460c:	2301      	moveq	r3, #1
 800460e:	2300      	movne	r3, #0
 8004610:	b2db      	uxtb	r3, r3
 8004612:	2b00      	cmp	r3, #0
 8004614:	d012      	beq.n	800463c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004616:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800461e:	f023 030f 	bic.w	r3, r3, #15
 8004622:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004624:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004626:	e009      	b.n	800463c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462c:	f043 0220 	orr.w	r2, r3, #32
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800463a:	e000      	b.n	800463e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800463c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004646:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800464a:	4618      	mov	r0, r3
 800464c:	3784      	adds	r7, #132	; 0x84
 800464e:	46bd      	mov	sp, r7
 8004650:	bd90      	pop	{r4, r7, pc}
 8004652:	bf00      	nop
 8004654:	50000100 	.word	0x50000100
 8004658:	50000400 	.word	0x50000400
 800465c:	50000500 	.word	0x50000500
 8004660:	50000300 	.word	0x50000300
 8004664:	50000700 	.word	0x50000700
 8004668:	50000600 	.word	0x50000600

0800466c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800466c:	b480      	push	{r7}
 800466e:	b085      	sub	sp, #20
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800467c:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <__NVIC_SetPriorityGrouping+0x44>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004682:	68ba      	ldr	r2, [r7, #8]
 8004684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004688:	4013      	ands	r3, r2
 800468a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800469c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800469e:	4a04      	ldr	r2, [pc, #16]	; (80046b0 <__NVIC_SetPriorityGrouping+0x44>)
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	60d3      	str	r3, [r2, #12]
}
 80046a4:	bf00      	nop
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr
 80046b0:	e000ed00 	.word	0xe000ed00

080046b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80046b4:	b480      	push	{r7}
 80046b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80046b8:	4b04      	ldr	r3, [pc, #16]	; (80046cc <__NVIC_GetPriorityGrouping+0x18>)
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	0a1b      	lsrs	r3, r3, #8
 80046be:	f003 0307 	and.w	r3, r3, #7
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr
 80046cc:	e000ed00 	.word	0xe000ed00

080046d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	4603      	mov	r3, r0
 80046d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	db0b      	blt.n	80046fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046e2:	79fb      	ldrb	r3, [r7, #7]
 80046e4:	f003 021f 	and.w	r2, r3, #31
 80046e8:	4907      	ldr	r1, [pc, #28]	; (8004708 <__NVIC_EnableIRQ+0x38>)
 80046ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ee:	095b      	lsrs	r3, r3, #5
 80046f0:	2001      	movs	r0, #1
 80046f2:	fa00 f202 	lsl.w	r2, r0, r2
 80046f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80046fa:	bf00      	nop
 80046fc:	370c      	adds	r7, #12
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	e000e100 	.word	0xe000e100

0800470c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	4603      	mov	r3, r0
 8004714:	6039      	str	r1, [r7, #0]
 8004716:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800471c:	2b00      	cmp	r3, #0
 800471e:	db0a      	blt.n	8004736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	b2da      	uxtb	r2, r3
 8004724:	490c      	ldr	r1, [pc, #48]	; (8004758 <__NVIC_SetPriority+0x4c>)
 8004726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800472a:	0112      	lsls	r2, r2, #4
 800472c:	b2d2      	uxtb	r2, r2
 800472e:	440b      	add	r3, r1
 8004730:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004734:	e00a      	b.n	800474c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	b2da      	uxtb	r2, r3
 800473a:	4908      	ldr	r1, [pc, #32]	; (800475c <__NVIC_SetPriority+0x50>)
 800473c:	79fb      	ldrb	r3, [r7, #7]
 800473e:	f003 030f 	and.w	r3, r3, #15
 8004742:	3b04      	subs	r3, #4
 8004744:	0112      	lsls	r2, r2, #4
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	440b      	add	r3, r1
 800474a:	761a      	strb	r2, [r3, #24]
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	e000e100 	.word	0xe000e100
 800475c:	e000ed00 	.word	0xe000ed00

08004760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004760:	b480      	push	{r7}
 8004762:	b089      	sub	sp, #36	; 0x24
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f003 0307 	and.w	r3, r3, #7
 8004772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	f1c3 0307 	rsb	r3, r3, #7
 800477a:	2b04      	cmp	r3, #4
 800477c:	bf28      	it	cs
 800477e:	2304      	movcs	r3, #4
 8004780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	3304      	adds	r3, #4
 8004786:	2b06      	cmp	r3, #6
 8004788:	d902      	bls.n	8004790 <NVIC_EncodePriority+0x30>
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	3b03      	subs	r3, #3
 800478e:	e000      	b.n	8004792 <NVIC_EncodePriority+0x32>
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004794:	f04f 32ff 	mov.w	r2, #4294967295
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43da      	mvns	r2, r3
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	401a      	ands	r2, r3
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80047a8:	f04f 31ff 	mov.w	r1, #4294967295
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	fa01 f303 	lsl.w	r3, r1, r3
 80047b2:	43d9      	mvns	r1, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047b8:	4313      	orrs	r3, r2
         );
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3724      	adds	r7, #36	; 0x24
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
	...

080047c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047d8:	d301      	bcc.n	80047de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80047da:	2301      	movs	r3, #1
 80047dc:	e00f      	b.n	80047fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80047de:	4a0a      	ldr	r2, [pc, #40]	; (8004808 <SysTick_Config+0x40>)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3b01      	subs	r3, #1
 80047e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80047e6:	210f      	movs	r1, #15
 80047e8:	f04f 30ff 	mov.w	r0, #4294967295
 80047ec:	f7ff ff8e 	bl	800470c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80047f0:	4b05      	ldr	r3, [pc, #20]	; (8004808 <SysTick_Config+0x40>)
 80047f2:	2200      	movs	r2, #0
 80047f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80047f6:	4b04      	ldr	r3, [pc, #16]	; (8004808 <SysTick_Config+0x40>)
 80047f8:	2207      	movs	r2, #7
 80047fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3708      	adds	r7, #8
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	e000e010 	.word	0xe000e010

0800480c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f7ff ff29 	bl	800466c <__NVIC_SetPriorityGrouping>
}
 800481a:	bf00      	nop
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b086      	sub	sp, #24
 8004826:	af00      	add	r7, sp, #0
 8004828:	4603      	mov	r3, r0
 800482a:	60b9      	str	r1, [r7, #8]
 800482c:	607a      	str	r2, [r7, #4]
 800482e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004830:	f7ff ff40 	bl	80046b4 <__NVIC_GetPriorityGrouping>
 8004834:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	6978      	ldr	r0, [r7, #20]
 800483c:	f7ff ff90 	bl	8004760 <NVIC_EncodePriority>
 8004840:	4602      	mov	r2, r0
 8004842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004846:	4611      	mov	r1, r2
 8004848:	4618      	mov	r0, r3
 800484a:	f7ff ff5f 	bl	800470c <__NVIC_SetPriority>
}
 800484e:	bf00      	nop
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b082      	sub	sp, #8
 800485a:	af00      	add	r7, sp, #0
 800485c:	4603      	mov	r3, r0
 800485e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004864:	4618      	mov	r0, r3
 8004866:	f7ff ff33 	bl	80046d0 <__NVIC_EnableIRQ>
}
 800486a:	bf00      	nop
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b082      	sub	sp, #8
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff ffa4 	bl	80047c8 <SysTick_Config>
 8004880:	4603      	mov	r3, r0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b082      	sub	sp, #8
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e014      	b.n	80048c6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	791b      	ldrb	r3, [r3, #4]
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d105      	bne.n	80048b2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7fd fe21 	bl	80024f4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2202      	movs	r2, #2
 80048b6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d101      	bne.n	80048e4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e056      	b.n	8004992 <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	795b      	ldrb	r3, [r3, #5]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_DAC_Start+0x20>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e050      	b.n	8004992 <HAL_DAC_Start+0xc2>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2202      	movs	r2, #2
 80048fa:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6819      	ldr	r1, [r3, #0]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	f003 0310 	and.w	r3, r3, #16
 8004908:	2201      	movs	r2, #1
 800490a:	409a      	lsls	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	430a      	orrs	r2, r1
 8004912:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004914:	4b22      	ldr	r3, [pc, #136]	; (80049a0 <HAL_DAC_Start+0xd0>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	099b      	lsrs	r3, r3, #6
 800491a:	4a22      	ldr	r2, [pc, #136]	; (80049a4 <HAL_DAC_Start+0xd4>)
 800491c:	fba2 2303 	umull	r2, r3, r2, r3
 8004920:	099b      	lsrs	r3, r3, #6
 8004922:	3301      	adds	r3, #1
 8004924:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 8004926:	e002      	b.n	800492e <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	3b01      	subs	r3, #1
 800492c:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1f9      	bne.n	8004928 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10f      	bne.n	800495a <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004944:	2b02      	cmp	r3, #2
 8004946:	d11d      	bne.n	8004984 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f042 0201 	orr.w	r2, r2, #1
 8004956:	605a      	str	r2, [r3, #4]
 8004958:	e014      	b.n	8004984 <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	2102      	movs	r1, #2
 800496c:	fa01 f303 	lsl.w	r3, r1, r3
 8004970:	429a      	cmp	r2, r3
 8004972:	d107      	bne.n	8004984 <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0202 	orr.w	r2, r2, #2
 8004982:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	20000010 	.word	0x20000010
 80049a4:	053e2d63 	.word	0x053e2d63

080049a8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]
 80049b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e018      	b.n	80049f6 <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d105      	bne.n	80049e2 <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	4413      	add	r3, r2
 80049dc:	3308      	adds	r3, #8
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	e004      	b.n	80049ec <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80049e2:	697a      	ldr	r2, [r7, #20]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4413      	add	r3, r2
 80049e8:	3314      	adds	r3, #20
 80049ea:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	461a      	mov	r2, r3
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	371c      	adds	r7, #28
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
	...

08004a04 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b08a      	sub	sp, #40	; 0x28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a10:	2300      	movs	r3, #0
 8004a12:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <HAL_DAC_ConfigChannel+0x1c>
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d101      	bne.n	8004a24 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e19e      	b.n	8004d62 <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	795b      	ldrb	r3, [r3, #5]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d101      	bne.n	8004a30 <HAL_DAC_ConfigChannel+0x2c>
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e198      	b.n	8004d62 <HAL_DAC_ConfigChannel+0x35e>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2201      	movs	r2, #1
 8004a34:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d17a      	bne.n	8004b3a <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004a44:	f7fe f810 	bl	8002a68 <HAL_GetTick>
 8004a48:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d13d      	bne.n	8004acc <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004a50:	e018      	b.n	8004a84 <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004a52:	f7fe f809 	bl	8002a68 <HAL_GetTick>
 8004a56:	4602      	mov	r2, r0
 8004a58:	69bb      	ldr	r3, [r7, #24]
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d911      	bls.n	8004a84 <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f043 0208 	orr.w	r2, r3, #8
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2203      	movs	r2, #3
 8004a7e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e16e      	b.n	8004d62 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1df      	bne.n	8004a52 <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a9a:	641a      	str	r2, [r3, #64]	; 0x40
 8004a9c:	e020      	b.n	8004ae0 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004a9e:	f7fd ffe3 	bl	8002a68 <HAL_GetTick>
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d90f      	bls.n	8004acc <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	da0a      	bge.n	8004acc <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f043 0208 	orr.w	r2, r3, #8
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2203      	movs	r2, #3
 8004ac6:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e14a      	b.n	8004d62 <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	dbe3      	blt.n	8004a9e <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ade:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004af0:	fa01 f303 	lsl.w	r3, r1, r3
 8004af4:	43db      	mvns	r3, r3
 8004af6:	ea02 0103 	and.w	r1, r2, r3
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	f003 0310 	and.w	r3, r3, #16
 8004b04:	409a      	lsls	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	f003 0310 	and.w	r3, r3, #16
 8004b1a:	21ff      	movs	r1, #255	; 0xff
 8004b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b20:	43db      	mvns	r3, r3
 8004b22:	ea02 0103 	and.w	r1, r2, r3
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f003 0310 	and.w	r3, r3, #16
 8004b30:	409a      	lsls	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	430a      	orrs	r2, r1
 8004b38:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d11d      	bne.n	8004b7e <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b48:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f003 0310 	and.w	r3, r3, #16
 8004b50:	221f      	movs	r2, #31
 8004b52:	fa02 f303 	lsl.w	r3, r2, r3
 8004b56:	43db      	mvns	r3, r3
 8004b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b5a:	4013      	ands	r3, r2
 8004b5c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	f003 0310 	and.w	r3, r3, #16
 8004b6a:	697a      	ldr	r2, [r7, #20]
 8004b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b72:	4313      	orrs	r3, r2
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b84:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f003 0310 	and.w	r3, r3, #16
 8004b8c:	2207      	movs	r2, #7
 8004b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b92:	43db      	mvns	r3, r3
 8004b94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b96:	4013      	ands	r3, r2
 8004b98:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	699b      	ldr	r3, [r3, #24]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d102      	bne.n	8004ba8 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	623b      	str	r3, [r7, #32]
 8004ba6:	e00f      	b.n	8004bc8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d102      	bne.n	8004bb6 <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	623b      	str	r3, [r7, #32]
 8004bb4:	e008      	b.n	8004bc8 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d102      	bne.n	8004bc4 <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	623b      	str	r3, [r7, #32]
 8004bc2:	e001      	b.n	8004bc8 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	689a      	ldr	r2, [r3, #8]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	695b      	ldr	r3, [r3, #20]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	6a3a      	ldr	r2, [r7, #32]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f003 0310 	and.w	r3, r3, #16
 8004bde:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004be2:	fa02 f303 	lsl.w	r3, r2, r3
 8004be6:	43db      	mvns	r3, r3
 8004be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bea:	4013      	ands	r3, r2
 8004bec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	791b      	ldrb	r3, [r3, #4]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d102      	bne.n	8004bfc <HAL_DAC_ConfigChannel+0x1f8>
 8004bf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bfa:	e000      	b.n	8004bfe <HAL_DAC_ConfigChannel+0x1fa>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	697a      	ldr	r2, [r7, #20]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f003 0310 	and.w	r3, r3, #16
 8004c0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c12:	43db      	mvns	r3, r3
 8004c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c16:	4013      	ands	r3, r2
 8004c18:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	795b      	ldrb	r3, [r3, #5]
 8004c1e:	2b01      	cmp	r3, #1
 8004c20:	d102      	bne.n	8004c28 <HAL_DAC_ConfigChannel+0x224>
 8004c22:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c26:	e000      	b.n	8004c2a <HAL_DAC_ConfigChannel+0x226>
 8004c28:	2300      	movs	r3, #0
 8004c2a:	697a      	ldr	r2, [r7, #20]
 8004c2c:	4313      	orrs	r3, r2
 8004c2e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c32:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d114      	bne.n	8004c6a <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004c40:	f003 fddc 	bl	80087fc <HAL_RCC_GetHCLKFreq>
 8004c44:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	4a48      	ldr	r2, [pc, #288]	; (8004d6c <HAL_DAC_ConfigChannel+0x368>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d904      	bls.n	8004c58 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c54:	627b      	str	r3, [r7, #36]	; 0x24
 8004c56:	e00f      	b.n	8004c78 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	4a45      	ldr	r2, [pc, #276]	; (8004d70 <HAL_DAC_ConfigChannel+0x36c>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d90a      	bls.n	8004c76 <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c62:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
 8004c68:	e006      	b.n	8004c78 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c70:	4313      	orrs	r3, r2
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
 8004c74:	e000      	b.n	8004c78 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004c76:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f003 0310 	and.w	r3, r3, #16
 8004c7e:	697a      	ldr	r2, [r7, #20]
 8004c80:	fa02 f303 	lsl.w	r3, r2, r3
 8004c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c86:	4313      	orrs	r3, r2
 8004c88:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6819      	ldr	r1, [r3, #0]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f003 0310 	and.w	r3, r3, #16
 8004c9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca6:	43da      	mvns	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	400a      	ands	r2, r1
 8004cae:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f003 0310 	and.w	r3, r3, #16
 8004cbe:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc6:	43db      	mvns	r3, r3
 8004cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cca:	4013      	ands	r3, r2
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f003 0310 	and.w	r3, r3, #16
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	6819      	ldr	r1, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f003 0310 	and.w	r3, r3, #16
 8004cfa:	22c0      	movs	r2, #192	; 0xc0
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	43da      	mvns	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	400a      	ands	r2, r1
 8004d08:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004d0a:	68bb      	ldr	r3, [r7, #8]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	089b      	lsrs	r3, r3, #2
 8004d10:	f003 030f 	and.w	r3, r3, #15
 8004d14:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	089b      	lsrs	r3, r3, #2
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004d22:	697a      	ldr	r2, [r7, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	f003 0310 	and.w	r3, r3, #16
 8004d34:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004d38:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	ea02 0103 	and.w	r1, r2, r3
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f003 0310 	and.w	r3, r3, #16
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	409a      	lsls	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	430a      	orrs	r2, r1
 8004d52:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2201      	movs	r2, #1
 8004d58:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004d60:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3728      	adds	r7, #40	; 0x28
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}
 8004d6a:	bf00      	nop
 8004d6c:	09896800 	.word	0x09896800
 8004d70:	04c4b400 	.word	0x04c4b400

08004d74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e08d      	b.n	8004ea2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	4b47      	ldr	r3, [pc, #284]	; (8004eac <HAL_DMA_Init+0x138>)
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d80f      	bhi.n	8004db2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	4b45      	ldr	r3, [pc, #276]	; (8004eb0 <HAL_DMA_Init+0x13c>)
 8004d9a:	4413      	add	r3, r2
 8004d9c:	4a45      	ldr	r2, [pc, #276]	; (8004eb4 <HAL_DMA_Init+0x140>)
 8004d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004da2:	091b      	lsrs	r3, r3, #4
 8004da4:	009a      	lsls	r2, r3, #2
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a42      	ldr	r2, [pc, #264]	; (8004eb8 <HAL_DMA_Init+0x144>)
 8004dae:	641a      	str	r2, [r3, #64]	; 0x40
 8004db0:	e00e      	b.n	8004dd0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	4b40      	ldr	r3, [pc, #256]	; (8004ebc <HAL_DMA_Init+0x148>)
 8004dba:	4413      	add	r3, r2
 8004dbc:	4a3d      	ldr	r2, [pc, #244]	; (8004eb4 <HAL_DMA_Init+0x140>)
 8004dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc2:	091b      	lsrs	r3, r3, #4
 8004dc4:	009a      	lsls	r2, r3, #2
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a3c      	ldr	r2, [pc, #240]	; (8004ec0 <HAL_DMA_Init+0x14c>)
 8004dce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 fa10 	bl	8005248 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004e30:	d102      	bne.n	8004e38 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e4c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d010      	beq.n	8004e78 <HAL_DMA_Init+0x104>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d80c      	bhi.n	8004e78 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 fa30 	bl	80052c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e70:	687a      	ldr	r2, [r7, #4]
 8004e72:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e74:	605a      	str	r2, [r3, #4]
 8004e76:	e008      	b.n	8004e8a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2201      	movs	r2, #1
 8004e94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004ea0:	2300      	movs	r3, #0
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3710      	adds	r7, #16
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	40020407 	.word	0x40020407
 8004eb0:	bffdfff8 	.word	0xbffdfff8
 8004eb4:	cccccccd 	.word	0xcccccccd
 8004eb8:	40020000 	.word	0x40020000
 8004ebc:	bffdfbf8 	.word	0xbffdfbf8
 8004ec0:	40020400 	.word	0x40020400

08004ec4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b086      	sub	sp, #24
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
 8004ed0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d101      	bne.n	8004ee4 <HAL_DMA_Start_IT+0x20>
 8004ee0:	2302      	movs	r3, #2
 8004ee2:	e066      	b.n	8004fb2 <HAL_DMA_Start_IT+0xee>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d155      	bne.n	8004fa4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f022 0201 	bic.w	r2, r2, #1
 8004f14:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	68b9      	ldr	r1, [r7, #8]
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 f954 	bl	80051ca <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d008      	beq.n	8004f3c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f042 020e 	orr.w	r2, r2, #14
 8004f38:	601a      	str	r2, [r3, #0]
 8004f3a:	e00f      	b.n	8004f5c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f022 0204 	bic.w	r2, r2, #4
 8004f4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f042 020a 	orr.w	r2, r2, #10
 8004f5a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d007      	beq.n	8004f7a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f78:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d007      	beq.n	8004f92 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f90:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0201 	orr.w	r2, r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]
 8004fa2:	e005      	b.n	8004fb0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004fac:	2302      	movs	r3, #2
 8004fae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}

08004fba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004fcc:	b2db      	uxtb	r3, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d005      	beq.n	8004fde <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2204      	movs	r2, #4
 8004fd6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	73fb      	strb	r3, [r7, #15]
 8004fdc:	e037      	b.n	800504e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 020e 	bic.w	r2, r2, #14
 8004fec:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ff8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ffc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0201 	bic.w	r2, r2, #1
 800500c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005012:	f003 021f 	and.w	r2, r3, #31
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501a:	2101      	movs	r1, #1
 800501c:	fa01 f202 	lsl.w	r2, r1, r2
 8005020:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800502a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005030:	2b00      	cmp	r3, #0
 8005032:	d00c      	beq.n	800504e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005042:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800504c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800505e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005088:	f003 031f 	and.w	r3, r3, #31
 800508c:	2204      	movs	r2, #4
 800508e:	409a      	lsls	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4013      	ands	r3, r2
 8005094:	2b00      	cmp	r3, #0
 8005096:	d026      	beq.n	80050e6 <HAL_DMA_IRQHandler+0x7a>
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	f003 0304 	and.w	r3, r3, #4
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d021      	beq.n	80050e6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0320 	and.w	r3, r3, #32
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d107      	bne.n	80050c0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f022 0204 	bic.w	r2, r2, #4
 80050be:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c4:	f003 021f 	and.w	r2, r3, #31
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050cc:	2104      	movs	r1, #4
 80050ce:	fa01 f202 	lsl.w	r2, r1, r2
 80050d2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d071      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80050e4:	e06c      	b.n	80051c0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ea:	f003 031f 	and.w	r3, r3, #31
 80050ee:	2202      	movs	r2, #2
 80050f0:	409a      	lsls	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4013      	ands	r3, r2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d02e      	beq.n	8005158 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f003 0302 	and.w	r3, r3, #2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d029      	beq.n	8005158 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0320 	and.w	r3, r3, #32
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10b      	bne.n	800512a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 020a 	bic.w	r2, r2, #10
 8005120:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800512e:	f003 021f 	and.w	r2, r3, #31
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005136:	2102      	movs	r1, #2
 8005138:	fa01 f202 	lsl.w	r2, r1, r2
 800513c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514a:	2b00      	cmp	r3, #0
 800514c:	d038      	beq.n	80051c0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005156:	e033      	b.n	80051c0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800515c:	f003 031f 	and.w	r3, r3, #31
 8005160:	2208      	movs	r2, #8
 8005162:	409a      	lsls	r2, r3
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	4013      	ands	r3, r2
 8005168:	2b00      	cmp	r3, #0
 800516a:	d02a      	beq.n	80051c2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b00      	cmp	r3, #0
 8005174:	d025      	beq.n	80051c2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 020e 	bic.w	r2, r2, #14
 8005184:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518a:	f003 021f 	and.w	r2, r3, #31
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	2101      	movs	r1, #1
 8005194:	fa01 f202 	lsl.w	r2, r1, r2
 8005198:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2201      	movs	r2, #1
 800519e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d004      	beq.n	80051c2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80051c0:	bf00      	nop
 80051c2:	bf00      	nop
}
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b085      	sub	sp, #20
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	60b9      	str	r1, [r7, #8]
 80051d4:	607a      	str	r2, [r7, #4]
 80051d6:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80051e0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d004      	beq.n	80051f4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ee:	68fa      	ldr	r2, [r7, #12]
 80051f0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80051f2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051f8:	f003 021f 	and.w	r2, r3, #31
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005200:	2101      	movs	r1, #1
 8005202:	fa01 f202 	lsl.w	r2, r1, r2
 8005206:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	683a      	ldr	r2, [r7, #0]
 800520e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	2b10      	cmp	r3, #16
 8005216:	d108      	bne.n	800522a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005228:	e007      	b.n	800523a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	687a      	ldr	r2, [r7, #4]
 8005238:	60da      	str	r2, [r3, #12]
}
 800523a:	bf00      	nop
 800523c:	3714      	adds	r7, #20
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
	...

08005248 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	461a      	mov	r2, r3
 8005256:	4b16      	ldr	r3, [pc, #88]	; (80052b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005258:	429a      	cmp	r2, r3
 800525a:	d802      	bhi.n	8005262 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800525c:	4b15      	ldr	r3, [pc, #84]	; (80052b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	e001      	b.n	8005266 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8005262:	4b15      	ldr	r3, [pc, #84]	; (80052b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005264:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	b2db      	uxtb	r3, r3
 8005270:	3b08      	subs	r3, #8
 8005272:	4a12      	ldr	r2, [pc, #72]	; (80052bc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005274:	fba2 2303 	umull	r2, r3, r2, r3
 8005278:	091b      	lsrs	r3, r3, #4
 800527a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005280:	089b      	lsrs	r3, r3, #2
 8005282:	009a      	lsls	r2, r3, #2
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	4413      	add	r3, r2
 8005288:	461a      	mov	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a0b      	ldr	r2, [pc, #44]	; (80052c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8005292:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f003 031f 	and.w	r3, r3, #31
 800529a:	2201      	movs	r2, #1
 800529c:	409a      	lsls	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80052a2:	bf00      	nop
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	40020407 	.word	0x40020407
 80052b4:	40020800 	.word	0x40020800
 80052b8:	40020820 	.word	0x40020820
 80052bc:	cccccccd 	.word	0xcccccccd
 80052c0:	40020880 	.word	0x40020880

080052c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	4b0b      	ldr	r3, [pc, #44]	; (8005304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80052d8:	4413      	add	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	461a      	mov	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a08      	ldr	r2, [pc, #32]	; (8005308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80052e6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	3b01      	subs	r3, #1
 80052ec:	f003 031f 	and.w	r3, r3, #31
 80052f0:	2201      	movs	r2, #1
 80052f2:	409a      	lsls	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80052f8:	bf00      	nop
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	1000823f 	.word	0x1000823f
 8005308:	40020940 	.word	0x40020940

0800530c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800530c:	b480      	push	{r7}
 800530e:	b087      	sub	sp, #28
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800531a:	e15a      	b.n	80055d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	2101      	movs	r1, #1
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	fa01 f303 	lsl.w	r3, r1, r3
 8005328:	4013      	ands	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2b00      	cmp	r3, #0
 8005330:	f000 814c 	beq.w	80055cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f003 0303 	and.w	r3, r3, #3
 800533c:	2b01      	cmp	r3, #1
 800533e:	d005      	beq.n	800534c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005348:	2b02      	cmp	r3, #2
 800534a:	d130      	bne.n	80053ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	005b      	lsls	r3, r3, #1
 8005356:	2203      	movs	r2, #3
 8005358:	fa02 f303 	lsl.w	r3, r2, r3
 800535c:	43db      	mvns	r3, r3
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4013      	ands	r3, r2
 8005362:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	68da      	ldr	r2, [r3, #12]
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	fa02 f303 	lsl.w	r3, r2, r3
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005382:	2201      	movs	r2, #1
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	fa02 f303 	lsl.w	r3, r2, r3
 800538a:	43db      	mvns	r3, r3
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4013      	ands	r3, r2
 8005390:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	091b      	lsrs	r3, r3, #4
 8005398:	f003 0201 	and.w	r2, r3, #1
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	fa02 f303 	lsl.w	r3, r2, r3
 80053a2:	693a      	ldr	r2, [r7, #16]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	693a      	ldr	r2, [r7, #16]
 80053ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f003 0303 	and.w	r3, r3, #3
 80053b6:	2b03      	cmp	r3, #3
 80053b8:	d017      	beq.n	80053ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	68db      	ldr	r3, [r3, #12]
 80053be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	005b      	lsls	r3, r3, #1
 80053c4:	2203      	movs	r2, #3
 80053c6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ca:	43db      	mvns	r3, r3
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4013      	ands	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	689a      	ldr	r2, [r3, #8]
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	fa02 f303 	lsl.w	r3, r2, r3
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f003 0303 	and.w	r3, r3, #3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d123      	bne.n	800543e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	08da      	lsrs	r2, r3, #3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	3208      	adds	r2, #8
 80053fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005402:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f003 0307 	and.w	r3, r3, #7
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	220f      	movs	r2, #15
 800540e:	fa02 f303 	lsl.w	r3, r2, r3
 8005412:	43db      	mvns	r3, r3
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4013      	ands	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	691a      	ldr	r2, [r3, #16]
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	fa02 f303 	lsl.w	r3, r2, r3
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	4313      	orrs	r3, r2
 800542e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	08da      	lsrs	r2, r3, #3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	3208      	adds	r2, #8
 8005438:	6939      	ldr	r1, [r7, #16]
 800543a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	005b      	lsls	r3, r3, #1
 8005448:	2203      	movs	r2, #3
 800544a:	fa02 f303 	lsl.w	r3, r2, r3
 800544e:	43db      	mvns	r3, r3
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	4013      	ands	r3, r2
 8005454:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	f003 0203 	and.w	r2, r3, #3
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	fa02 f303 	lsl.w	r3, r2, r3
 8005466:	693a      	ldr	r2, [r7, #16]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800547a:	2b00      	cmp	r3, #0
 800547c:	f000 80a6 	beq.w	80055cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005480:	4b5b      	ldr	r3, [pc, #364]	; (80055f0 <HAL_GPIO_Init+0x2e4>)
 8005482:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005484:	4a5a      	ldr	r2, [pc, #360]	; (80055f0 <HAL_GPIO_Init+0x2e4>)
 8005486:	f043 0301 	orr.w	r3, r3, #1
 800548a:	6613      	str	r3, [r2, #96]	; 0x60
 800548c:	4b58      	ldr	r3, [pc, #352]	; (80055f0 <HAL_GPIO_Init+0x2e4>)
 800548e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	60bb      	str	r3, [r7, #8]
 8005496:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005498:	4a56      	ldr	r2, [pc, #344]	; (80055f4 <HAL_GPIO_Init+0x2e8>)
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	089b      	lsrs	r3, r3, #2
 800549e:	3302      	adds	r3, #2
 80054a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f003 0303 	and.w	r3, r3, #3
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	220f      	movs	r2, #15
 80054b0:	fa02 f303 	lsl.w	r3, r2, r3
 80054b4:	43db      	mvns	r3, r3
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4013      	ands	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80054c2:	d01f      	beq.n	8005504 <HAL_GPIO_Init+0x1f8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a4c      	ldr	r2, [pc, #304]	; (80055f8 <HAL_GPIO_Init+0x2ec>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d019      	beq.n	8005500 <HAL_GPIO_Init+0x1f4>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a4b      	ldr	r2, [pc, #300]	; (80055fc <HAL_GPIO_Init+0x2f0>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d013      	beq.n	80054fc <HAL_GPIO_Init+0x1f0>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a4a      	ldr	r2, [pc, #296]	; (8005600 <HAL_GPIO_Init+0x2f4>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d00d      	beq.n	80054f8 <HAL_GPIO_Init+0x1ec>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	4a49      	ldr	r2, [pc, #292]	; (8005604 <HAL_GPIO_Init+0x2f8>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d007      	beq.n	80054f4 <HAL_GPIO_Init+0x1e8>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a48      	ldr	r2, [pc, #288]	; (8005608 <HAL_GPIO_Init+0x2fc>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d101      	bne.n	80054f0 <HAL_GPIO_Init+0x1e4>
 80054ec:	2305      	movs	r3, #5
 80054ee:	e00a      	b.n	8005506 <HAL_GPIO_Init+0x1fa>
 80054f0:	2306      	movs	r3, #6
 80054f2:	e008      	b.n	8005506 <HAL_GPIO_Init+0x1fa>
 80054f4:	2304      	movs	r3, #4
 80054f6:	e006      	b.n	8005506 <HAL_GPIO_Init+0x1fa>
 80054f8:	2303      	movs	r3, #3
 80054fa:	e004      	b.n	8005506 <HAL_GPIO_Init+0x1fa>
 80054fc:	2302      	movs	r3, #2
 80054fe:	e002      	b.n	8005506 <HAL_GPIO_Init+0x1fa>
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <HAL_GPIO_Init+0x1fa>
 8005504:	2300      	movs	r3, #0
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	f002 0203 	and.w	r2, r2, #3
 800550c:	0092      	lsls	r2, r2, #2
 800550e:	4093      	lsls	r3, r2
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	4313      	orrs	r3, r2
 8005514:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005516:	4937      	ldr	r1, [pc, #220]	; (80055f4 <HAL_GPIO_Init+0x2e8>)
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	089b      	lsrs	r3, r3, #2
 800551c:	3302      	adds	r3, #2
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005524:	4b39      	ldr	r3, [pc, #228]	; (800560c <HAL_GPIO_Init+0x300>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	43db      	mvns	r3, r3
 800552e:	693a      	ldr	r2, [r7, #16]
 8005530:	4013      	ands	r3, r2
 8005532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005540:	693a      	ldr	r2, [r7, #16]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	4313      	orrs	r3, r2
 8005546:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005548:	4a30      	ldr	r2, [pc, #192]	; (800560c <HAL_GPIO_Init+0x300>)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800554e:	4b2f      	ldr	r3, [pc, #188]	; (800560c <HAL_GPIO_Init+0x300>)
 8005550:	68db      	ldr	r3, [r3, #12]
 8005552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	43db      	mvns	r3, r3
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4013      	ands	r3, r2
 800555c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005572:	4a26      	ldr	r2, [pc, #152]	; (800560c <HAL_GPIO_Init+0x300>)
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005578:	4b24      	ldr	r3, [pc, #144]	; (800560c <HAL_GPIO_Init+0x300>)
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	43db      	mvns	r3, r3
 8005582:	693a      	ldr	r2, [r7, #16]
 8005584:	4013      	ands	r3, r2
 8005586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d003      	beq.n	800559c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4313      	orrs	r3, r2
 800559a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800559c:	4a1b      	ldr	r2, [pc, #108]	; (800560c <HAL_GPIO_Init+0x300>)
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80055a2:	4b1a      	ldr	r3, [pc, #104]	; (800560c <HAL_GPIO_Init+0x300>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	43db      	mvns	r3, r3
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	4013      	ands	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685b      	ldr	r3, [r3, #4]
 80055b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d003      	beq.n	80055c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80055c6:	4a11      	ldr	r2, [pc, #68]	; (800560c <HAL_GPIO_Init+0x300>)
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	3301      	adds	r3, #1
 80055d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	fa22 f303 	lsr.w	r3, r2, r3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f47f ae9d 	bne.w	800531c <HAL_GPIO_Init+0x10>
  }
}
 80055e2:	bf00      	nop
 80055e4:	bf00      	nop
 80055e6:	371c      	adds	r7, #28
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	40021000 	.word	0x40021000
 80055f4:	40010000 	.word	0x40010000
 80055f8:	48000400 	.word	0x48000400
 80055fc:	48000800 	.word	0x48000800
 8005600:	48000c00 	.word	0x48000c00
 8005604:	48001000 	.word	0x48001000
 8005608:	48001400 	.word	0x48001400
 800560c:	40010400 	.word	0x40010400

08005610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
 8005618:	460b      	mov	r3, r1
 800561a:	807b      	strh	r3, [r7, #2]
 800561c:	4613      	mov	r3, r2
 800561e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005620:	787b      	ldrb	r3, [r7, #1]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005626:	887a      	ldrh	r2, [r7, #2]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800562c:	e002      	b.n	8005634 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800562e:	887a      	ldrh	r2, [r7, #2]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005634:	bf00      	nop
 8005636:	370c      	adds	r7, #12
 8005638:	46bd      	mov	sp, r7
 800563a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563e:	4770      	bx	lr

08005640 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	4603      	mov	r3, r0
 8005648:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800564a:	4b08      	ldr	r3, [pc, #32]	; (800566c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800564c:	695a      	ldr	r2, [r3, #20]
 800564e:	88fb      	ldrh	r3, [r7, #6]
 8005650:	4013      	ands	r3, r2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d006      	beq.n	8005664 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005656:	4a05      	ldr	r2, [pc, #20]	; (800566c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005658:	88fb      	ldrh	r3, [r7, #6]
 800565a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800565c:	88fb      	ldrh	r3, [r7, #6]
 800565e:	4618      	mov	r0, r3
 8005660:	f000 f806 	bl	8005670 <HAL_GPIO_EXTI_Callback>
  }
}
 8005664:	bf00      	nop
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	40010400 	.word	0x40010400

08005670 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	4603      	mov	r3, r0
 8005678:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr

08005686 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b082      	sub	sp, #8
 800568a:	af00      	add	r7, sp, #0
 800568c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d101      	bne.n	8005698 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	e08d      	b.n	80057b4 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d106      	bne.n	80056b2 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7fc ff5f 	bl	8002570 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2224      	movs	r2, #36	; 0x24
 80056b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f022 0201 	bic.w	r2, r2, #1
 80056c8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80056d6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689a      	ldr	r2, [r3, #8]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056e6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d107      	bne.n	8005700 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	689a      	ldr	r2, [r3, #8]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056fc:	609a      	str	r2, [r3, #8]
 80056fe:	e006      	b.n	800570e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800570c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	2b02      	cmp	r3, #2
 8005714:	d108      	bne.n	8005728 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005724:	605a      	str	r2, [r3, #4]
 8005726:	e007      	b.n	8005738 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005736:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6812      	ldr	r2, [r2, #0]
 8005742:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800574a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800575a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	691a      	ldr	r2, [r3, #16]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	699b      	ldr	r3, [r3, #24]
 800576c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	69d9      	ldr	r1, [r3, #28]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a1a      	ldr	r2, [r3, #32]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f042 0201 	orr.w	r2, r2, #1
 8005794:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2200      	movs	r2, #0
 800579a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b088      	sub	sp, #32
 80057c0:	af02      	add	r7, sp, #8
 80057c2:	60f8      	str	r0, [r7, #12]
 80057c4:	4608      	mov	r0, r1
 80057c6:	4611      	mov	r1, r2
 80057c8:	461a      	mov	r2, r3
 80057ca:	4603      	mov	r3, r0
 80057cc:	817b      	strh	r3, [r7, #10]
 80057ce:	460b      	mov	r3, r1
 80057d0:	813b      	strh	r3, [r7, #8]
 80057d2:	4613      	mov	r3, r2
 80057d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	2b20      	cmp	r3, #32
 80057e0:	f040 80f9 	bne.w	80059d6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d002      	beq.n	80057f0 <HAL_I2C_Mem_Write+0x34>
 80057ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d105      	bne.n	80057fc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80057f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e0ed      	b.n	80059d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005802:	2b01      	cmp	r3, #1
 8005804:	d101      	bne.n	800580a <HAL_I2C_Mem_Write+0x4e>
 8005806:	2302      	movs	r3, #2
 8005808:	e0e6      	b.n	80059d8 <HAL_I2C_Mem_Write+0x21c>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005812:	f7fd f929 	bl	8002a68 <HAL_GetTick>
 8005816:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	9300      	str	r3, [sp, #0]
 800581c:	2319      	movs	r3, #25
 800581e:	2201      	movs	r2, #1
 8005820:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005824:	68f8      	ldr	r0, [r7, #12]
 8005826:	f000 fac3 	bl	8005db0 <I2C_WaitOnFlagUntilTimeout>
 800582a:	4603      	mov	r3, r0
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	e0d1      	b.n	80059d8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2221      	movs	r2, #33	; 0x21
 8005838:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2240      	movs	r2, #64	; 0x40
 8005840:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6a3a      	ldr	r2, [r7, #32]
 800584e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005854:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800585c:	88f8      	ldrh	r0, [r7, #6]
 800585e:	893a      	ldrh	r2, [r7, #8]
 8005860:	8979      	ldrh	r1, [r7, #10]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	9301      	str	r3, [sp, #4]
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	9300      	str	r3, [sp, #0]
 800586a:	4603      	mov	r3, r0
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 f9d3 	bl	8005c18 <I2C_RequestMemoryWrite>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e0a9      	b.n	80059d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005888:	b29b      	uxth	r3, r3
 800588a:	2bff      	cmp	r3, #255	; 0xff
 800588c:	d90e      	bls.n	80058ac <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	22ff      	movs	r2, #255	; 0xff
 8005892:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005898:	b2da      	uxtb	r2, r3
 800589a:	8979      	ldrh	r1, [r7, #10]
 800589c:	2300      	movs	r3, #0
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f000 fc47 	bl	8006138 <I2C_TransferConfig>
 80058aa:	e00f      	b.n	80058cc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	8979      	ldrh	r1, [r7, #10]
 80058be:	2300      	movs	r3, #0
 80058c0:	9300      	str	r3, [sp, #0]
 80058c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 fc36 	bl	8006138 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058cc:	697a      	ldr	r2, [r7, #20]
 80058ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 fac6 	bl	8005e62 <I2C_WaitOnTXISFlagUntilTimeout>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d001      	beq.n	80058e0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e07b      	b.n	80059d8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e4:	781a      	ldrb	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f0:	1c5a      	adds	r2, r3, #1
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	3b01      	subs	r3, #1
 80058fe:	b29a      	uxth	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005908:	3b01      	subs	r3, #1
 800590a:	b29a      	uxth	r2, r3
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005914:	b29b      	uxth	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d034      	beq.n	8005984 <HAL_I2C_Mem_Write+0x1c8>
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800591e:	2b00      	cmp	r3, #0
 8005920:	d130      	bne.n	8005984 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	9300      	str	r3, [sp, #0]
 8005926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005928:	2200      	movs	r2, #0
 800592a:	2180      	movs	r1, #128	; 0x80
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 fa3f 	bl	8005db0 <I2C_WaitOnFlagUntilTimeout>
 8005932:	4603      	mov	r3, r0
 8005934:	2b00      	cmp	r3, #0
 8005936:	d001      	beq.n	800593c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e04d      	b.n	80059d8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005940:	b29b      	uxth	r3, r3
 8005942:	2bff      	cmp	r3, #255	; 0xff
 8005944:	d90e      	bls.n	8005964 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	22ff      	movs	r2, #255	; 0xff
 800594a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005950:	b2da      	uxtb	r2, r3
 8005952:	8979      	ldrh	r1, [r7, #10]
 8005954:	2300      	movs	r3, #0
 8005956:	9300      	str	r3, [sp, #0]
 8005958:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 fbeb 	bl	8006138 <I2C_TransferConfig>
 8005962:	e00f      	b.n	8005984 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005968:	b29a      	uxth	r2, r3
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005972:	b2da      	uxtb	r2, r3
 8005974:	8979      	ldrh	r1, [r7, #10]
 8005976:	2300      	movs	r3, #0
 8005978:	9300      	str	r3, [sp, #0]
 800597a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800597e:	68f8      	ldr	r0, [r7, #12]
 8005980:	f000 fbda 	bl	8006138 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005988:	b29b      	uxth	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d19e      	bne.n	80058cc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 faac 	bl	8005ef0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005998:	4603      	mov	r3, r0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d001      	beq.n	80059a2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e01a      	b.n	80059d8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2220      	movs	r2, #32
 80059a8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6859      	ldr	r1, [r3, #4]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	4b0a      	ldr	r3, [pc, #40]	; (80059e0 <HAL_I2C_Mem_Write+0x224>)
 80059b6:	400b      	ands	r3, r1
 80059b8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2220      	movs	r2, #32
 80059be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059d2:	2300      	movs	r3, #0
 80059d4:	e000      	b.n	80059d8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80059d6:	2302      	movs	r3, #2
  }
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3718      	adds	r7, #24
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}
 80059e0:	fe00e800 	.word	0xfe00e800

080059e4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	4608      	mov	r0, r1
 80059ee:	4611      	mov	r1, r2
 80059f0:	461a      	mov	r2, r3
 80059f2:	4603      	mov	r3, r0
 80059f4:	817b      	strh	r3, [r7, #10]
 80059f6:	460b      	mov	r3, r1
 80059f8:	813b      	strh	r3, [r7, #8]
 80059fa:	4613      	mov	r3, r2
 80059fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	2b20      	cmp	r3, #32
 8005a08:	f040 80fd 	bne.w	8005c06 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <HAL_I2C_Mem_Read+0x34>
 8005a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d105      	bne.n	8005a24 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005a1e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e0f1      	b.n	8005c08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	d101      	bne.n	8005a32 <HAL_I2C_Mem_Read+0x4e>
 8005a2e:	2302      	movs	r3, #2
 8005a30:	e0ea      	b.n	8005c08 <HAL_I2C_Mem_Read+0x224>
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005a3a:	f7fd f815 	bl	8002a68 <HAL_GetTick>
 8005a3e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	2319      	movs	r3, #25
 8005a46:	2201      	movs	r2, #1
 8005a48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a4c:	68f8      	ldr	r0, [r7, #12]
 8005a4e:	f000 f9af 	bl	8005db0 <I2C_WaitOnFlagUntilTimeout>
 8005a52:	4603      	mov	r3, r0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0d5      	b.n	8005c08 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2222      	movs	r2, #34	; 0x22
 8005a60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2240      	movs	r2, #64	; 0x40
 8005a68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	6a3a      	ldr	r2, [r7, #32]
 8005a76:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a7c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2200      	movs	r2, #0
 8005a82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a84:	88f8      	ldrh	r0, [r7, #6]
 8005a86:	893a      	ldrh	r2, [r7, #8]
 8005a88:	8979      	ldrh	r1, [r7, #10]
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	9301      	str	r3, [sp, #4]
 8005a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	4603      	mov	r3, r0
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 f913 	bl	8005cc0 <I2C_RequestMemoryRead>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d005      	beq.n	8005aac <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e0ad      	b.n	8005c08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2bff      	cmp	r3, #255	; 0xff
 8005ab4:	d90e      	bls.n	8005ad4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	22ff      	movs	r2, #255	; 0xff
 8005aba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	8979      	ldrh	r1, [r7, #10]
 8005ac4:	4b52      	ldr	r3, [pc, #328]	; (8005c10 <HAL_I2C_Mem_Read+0x22c>)
 8005ac6:	9300      	str	r3, [sp, #0]
 8005ac8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 fb33 	bl	8006138 <I2C_TransferConfig>
 8005ad2:	e00f      	b.n	8005af4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad8:	b29a      	uxth	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	8979      	ldrh	r1, [r7, #10]
 8005ae6:	4b4a      	ldr	r3, [pc, #296]	; (8005c10 <HAL_I2C_Mem_Read+0x22c>)
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005aee:	68f8      	ldr	r0, [r7, #12]
 8005af0:	f000 fb22 	bl	8006138 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afa:	2200      	movs	r2, #0
 8005afc:	2104      	movs	r1, #4
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f000 f956 	bl	8005db0 <I2C_WaitOnFlagUntilTimeout>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d001      	beq.n	8005b0e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e07c      	b.n	8005c08 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b18:	b2d2      	uxtb	r2, r2
 8005b1a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b20:	1c5a      	adds	r2, r3, #1
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b36:	b29b      	uxth	r3, r3
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	b29a      	uxth	r2, r3
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b44:	b29b      	uxth	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d034      	beq.n	8005bb4 <HAL_I2C_Mem_Read+0x1d0>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d130      	bne.n	8005bb4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b58:	2200      	movs	r2, #0
 8005b5a:	2180      	movs	r1, #128	; 0x80
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 f927 	bl	8005db0 <I2C_WaitOnFlagUntilTimeout>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e04d      	b.n	8005c08 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2bff      	cmp	r3, #255	; 0xff
 8005b74:	d90e      	bls.n	8005b94 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	22ff      	movs	r2, #255	; 0xff
 8005b7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b80:	b2da      	uxtb	r2, r3
 8005b82:	8979      	ldrh	r1, [r7, #10]
 8005b84:	2300      	movs	r3, #0
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f000 fad3 	bl	8006138 <I2C_TransferConfig>
 8005b92:	e00f      	b.n	8005bb4 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ba2:	b2da      	uxtb	r2, r3
 8005ba4:	8979      	ldrh	r1, [r7, #10]
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	9300      	str	r3, [sp, #0]
 8005baa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f000 fac2 	bl	8006138 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bb8:	b29b      	uxth	r3, r3
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d19a      	bne.n	8005af4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bc2:	68f8      	ldr	r0, [r7, #12]
 8005bc4:	f000 f994 	bl	8005ef0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005bc8:	4603      	mov	r3, r0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d001      	beq.n	8005bd2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e01a      	b.n	8005c08 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	2220      	movs	r2, #32
 8005bd8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	6859      	ldr	r1, [r3, #4]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	4b0b      	ldr	r3, [pc, #44]	; (8005c14 <HAL_I2C_Mem_Read+0x230>)
 8005be6:	400b      	ands	r3, r1
 8005be8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2220      	movs	r2, #32
 8005bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c02:	2300      	movs	r3, #0
 8005c04:	e000      	b.n	8005c08 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005c06:	2302      	movs	r3, #2
  }
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3718      	adds	r7, #24
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	80002400 	.word	0x80002400
 8005c14:	fe00e800 	.word	0xfe00e800

08005c18 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af02      	add	r7, sp, #8
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	4608      	mov	r0, r1
 8005c22:	4611      	mov	r1, r2
 8005c24:	461a      	mov	r2, r3
 8005c26:	4603      	mov	r3, r0
 8005c28:	817b      	strh	r3, [r7, #10]
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	813b      	strh	r3, [r7, #8]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005c32:	88fb      	ldrh	r3, [r7, #6]
 8005c34:	b2da      	uxtb	r2, r3
 8005c36:	8979      	ldrh	r1, [r7, #10]
 8005c38:	4b20      	ldr	r3, [pc, #128]	; (8005cbc <I2C_RequestMemoryWrite+0xa4>)
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 fa79 	bl	8006138 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c46:	69fa      	ldr	r2, [r7, #28]
 8005c48:	69b9      	ldr	r1, [r7, #24]
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f000 f909 	bl	8005e62 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e02c      	b.n	8005cb4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c5a:	88fb      	ldrh	r3, [r7, #6]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d105      	bne.n	8005c6c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c60:	893b      	ldrh	r3, [r7, #8]
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	629a      	str	r2, [r3, #40]	; 0x28
 8005c6a:	e015      	b.n	8005c98 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c6c:	893b      	ldrh	r3, [r7, #8]
 8005c6e:	0a1b      	lsrs	r3, r3, #8
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c7a:	69fa      	ldr	r2, [r7, #28]
 8005c7c:	69b9      	ldr	r1, [r7, #24]
 8005c7e:	68f8      	ldr	r0, [r7, #12]
 8005c80:	f000 f8ef 	bl	8005e62 <I2C_WaitOnTXISFlagUntilTimeout>
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e012      	b.n	8005cb4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c8e:	893b      	ldrh	r3, [r7, #8]
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	9300      	str	r3, [sp, #0]
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	2180      	movs	r1, #128	; 0x80
 8005ca2:	68f8      	ldr	r0, [r7, #12]
 8005ca4:	f000 f884 	bl	8005db0 <I2C_WaitOnFlagUntilTimeout>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e000      	b.n	8005cb4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	80002000 	.word	0x80002000

08005cc0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af02      	add	r7, sp, #8
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	4608      	mov	r0, r1
 8005cca:	4611      	mov	r1, r2
 8005ccc:	461a      	mov	r2, r3
 8005cce:	4603      	mov	r3, r0
 8005cd0:	817b      	strh	r3, [r7, #10]
 8005cd2:	460b      	mov	r3, r1
 8005cd4:	813b      	strh	r3, [r7, #8]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005cda:	88fb      	ldrh	r3, [r7, #6]
 8005cdc:	b2da      	uxtb	r2, r3
 8005cde:	8979      	ldrh	r1, [r7, #10]
 8005ce0:	4b20      	ldr	r3, [pc, #128]	; (8005d64 <I2C_RequestMemoryRead+0xa4>)
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f000 fa26 	bl	8006138 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cec:	69fa      	ldr	r2, [r7, #28]
 8005cee:	69b9      	ldr	r1, [r7, #24]
 8005cf0:	68f8      	ldr	r0, [r7, #12]
 8005cf2:	f000 f8b6 	bl	8005e62 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	e02c      	b.n	8005d5a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d00:	88fb      	ldrh	r3, [r7, #6]
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d105      	bne.n	8005d12 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d06:	893b      	ldrh	r3, [r7, #8]
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	629a      	str	r2, [r3, #40]	; 0x28
 8005d10:	e015      	b.n	8005d3e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d12:	893b      	ldrh	r3, [r7, #8]
 8005d14:	0a1b      	lsrs	r3, r3, #8
 8005d16:	b29b      	uxth	r3, r3
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d20:	69fa      	ldr	r2, [r7, #28]
 8005d22:	69b9      	ldr	r1, [r7, #24]
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 f89c 	bl	8005e62 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d001      	beq.n	8005d34 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e012      	b.n	8005d5a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d34:	893b      	ldrh	r3, [r7, #8]
 8005d36:	b2da      	uxtb	r2, r3
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	2200      	movs	r2, #0
 8005d46:	2140      	movs	r1, #64	; 0x40
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 f831 	bl	8005db0 <I2C_WaitOnFlagUntilTimeout>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d001      	beq.n	8005d58 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e000      	b.n	8005d5a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	80002000 	.word	0x80002000

08005d68 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	f003 0302 	and.w	r3, r3, #2
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d103      	bne.n	8005d86 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2200      	movs	r2, #0
 8005d84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	699b      	ldr	r3, [r3, #24]
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d007      	beq.n	8005da4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	699a      	ldr	r2, [r3, #24]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f042 0201 	orr.w	r2, r2, #1
 8005da2:	619a      	str	r2, [r3, #24]
  }
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	603b      	str	r3, [r7, #0]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dc0:	e03b      	b.n	8005e3a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	6839      	ldr	r1, [r7, #0]
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 f8d6 	bl	8005f78 <I2C_IsErrorOccurred>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d001      	beq.n	8005dd6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e041      	b.n	8005e5a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ddc:	d02d      	beq.n	8005e3a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005dde:	f7fc fe43 	bl	8002a68 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d302      	bcc.n	8005df4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d122      	bne.n	8005e3a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	699a      	ldr	r2, [r3, #24]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	4013      	ands	r3, r2
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	bf0c      	ite	eq
 8005e04:	2301      	moveq	r3, #1
 8005e06:	2300      	movne	r3, #0
 8005e08:	b2db      	uxtb	r3, r3
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	79fb      	ldrb	r3, [r7, #7]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d113      	bne.n	8005e3a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e16:	f043 0220 	orr.w	r2, r3, #32
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2220      	movs	r2, #32
 8005e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005e36:	2301      	movs	r3, #1
 8005e38:	e00f      	b.n	8005e5a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	699a      	ldr	r2, [r3, #24]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	4013      	ands	r3, r2
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	bf0c      	ite	eq
 8005e4a:	2301      	moveq	r3, #1
 8005e4c:	2300      	movne	r3, #0
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	461a      	mov	r2, r3
 8005e52:	79fb      	ldrb	r3, [r7, #7]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d0b4      	beq.n	8005dc2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3710      	adds	r7, #16
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b084      	sub	sp, #16
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	60f8      	str	r0, [r7, #12]
 8005e6a:	60b9      	str	r1, [r7, #8]
 8005e6c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e6e:	e033      	b.n	8005ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e70:	687a      	ldr	r2, [r7, #4]
 8005e72:	68b9      	ldr	r1, [r7, #8]
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 f87f 	bl	8005f78 <I2C_IsErrorOccurred>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	e031      	b.n	8005ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8a:	d025      	beq.n	8005ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e8c:	f7fc fdec 	bl	8002a68 <HAL_GetTick>
 8005e90:	4602      	mov	r2, r0
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	68ba      	ldr	r2, [r7, #8]
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d302      	bcc.n	8005ea2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d11a      	bne.n	8005ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	699b      	ldr	r3, [r3, #24]
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b02      	cmp	r3, #2
 8005eae:	d013      	beq.n	8005ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eb4:	f043 0220 	orr.w	r2, r3, #32
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005ed4:	2301      	movs	r3, #1
 8005ed6:	e007      	b.n	8005ee8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d1c4      	bne.n	8005e70 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3710      	adds	r7, #16
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005efc:	e02f      	b.n	8005f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	68b9      	ldr	r1, [r7, #8]
 8005f02:	68f8      	ldr	r0, [r7, #12]
 8005f04:	f000 f838 	bl	8005f78 <I2C_IsErrorOccurred>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d001      	beq.n	8005f12 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e02d      	b.n	8005f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f12:	f7fc fda9 	bl	8002a68 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d302      	bcc.n	8005f28 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d11a      	bne.n	8005f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	d013      	beq.n	8005f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3a:	f043 0220 	orr.w	r2, r3, #32
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2220      	movs	r2, #32
 8005f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2200      	movs	r2, #0
 8005f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e007      	b.n	8005f6e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	699b      	ldr	r3, [r3, #24]
 8005f64:	f003 0320 	and.w	r3, r3, #32
 8005f68:	2b20      	cmp	r3, #32
 8005f6a:	d1c8      	bne.n	8005efe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3710      	adds	r7, #16
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
	...

08005f78 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	; 0x28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	699b      	ldr	r3, [r3, #24]
 8005f90:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005f92:	2300      	movs	r3, #0
 8005f94:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	f003 0310 	and.w	r3, r3, #16
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d068      	beq.n	8006076 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	2210      	movs	r2, #16
 8005faa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005fac:	e049      	b.n	8006042 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb4:	d045      	beq.n	8006042 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005fb6:	f7fc fd57 	bl	8002a68 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	68ba      	ldr	r2, [r7, #8]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d302      	bcc.n	8005fcc <I2C_IsErrorOccurred+0x54>
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d13a      	bne.n	8006042 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fd6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005fde:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fee:	d121      	bne.n	8006034 <I2C_IsErrorOccurred+0xbc>
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ff6:	d01d      	beq.n	8006034 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005ff8:	7cfb      	ldrb	r3, [r7, #19]
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d01a      	beq.n	8006034 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800600c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800600e:	f7fc fd2b 	bl	8002a68 <HAL_GetTick>
 8006012:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006014:	e00e      	b.n	8006034 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006016:	f7fc fd27 	bl	8002a68 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	2b19      	cmp	r3, #25
 8006022:	d907      	bls.n	8006034 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	f043 0320 	orr.w	r3, r3, #32
 800602a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8006032:	e006      	b.n	8006042 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	f003 0320 	and.w	r3, r3, #32
 800603e:	2b20      	cmp	r3, #32
 8006040:	d1e9      	bne.n	8006016 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	699b      	ldr	r3, [r3, #24]
 8006048:	f003 0320 	and.w	r3, r3, #32
 800604c:	2b20      	cmp	r3, #32
 800604e:	d003      	beq.n	8006058 <I2C_IsErrorOccurred+0xe0>
 8006050:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006054:	2b00      	cmp	r3, #0
 8006056:	d0aa      	beq.n	8005fae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800605c:	2b00      	cmp	r3, #0
 800605e:	d103      	bne.n	8006068 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	2220      	movs	r2, #32
 8006066:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	f043 0304 	orr.w	r3, r3, #4
 800606e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00b      	beq.n	80060a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	f043 0301 	orr.w	r3, r3, #1
 800608e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006098:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00b      	beq.n	80060c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	f043 0308 	orr.w	r3, r3, #8
 80060b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80060ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060bc:	2301      	movs	r3, #1
 80060be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80060c2:	69bb      	ldr	r3, [r7, #24]
 80060c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00b      	beq.n	80060e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80060cc:	6a3b      	ldr	r3, [r7, #32]
 80060ce:	f043 0302 	orr.w	r3, r3, #2
 80060d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80060de:	2301      	movs	r3, #1
 80060e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80060e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d01c      	beq.n	8006126 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f7ff fe3b 	bl	8005d68 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	6859      	ldr	r1, [r3, #4]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	4b0d      	ldr	r3, [pc, #52]	; (8006134 <I2C_IsErrorOccurred+0x1bc>)
 80060fe:	400b      	ands	r3, r1
 8006100:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	431a      	orrs	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2220      	movs	r2, #32
 8006112:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006126:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800612a:	4618      	mov	r0, r3
 800612c:	3728      	adds	r7, #40	; 0x28
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	fe00e800 	.word	0xfe00e800

08006138 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	607b      	str	r3, [r7, #4]
 8006142:	460b      	mov	r3, r1
 8006144:	817b      	strh	r3, [r7, #10]
 8006146:	4613      	mov	r3, r2
 8006148:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800614a:	897b      	ldrh	r3, [r7, #10]
 800614c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006150:	7a7b      	ldrb	r3, [r7, #9]
 8006152:	041b      	lsls	r3, r3, #16
 8006154:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006158:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800615e:	6a3b      	ldr	r3, [r7, #32]
 8006160:	4313      	orrs	r3, r2
 8006162:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006166:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	0d5b      	lsrs	r3, r3, #21
 8006172:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006176:	4b08      	ldr	r3, [pc, #32]	; (8006198 <I2C_TransferConfig+0x60>)
 8006178:	430b      	orrs	r3, r1
 800617a:	43db      	mvns	r3, r3
 800617c:	ea02 0103 	and.w	r1, r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	697a      	ldr	r2, [r7, #20]
 8006186:	430a      	orrs	r2, r1
 8006188:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800618a:	bf00      	nop
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr
 8006196:	bf00      	nop
 8006198:	03ff63ff 	.word	0x03ff63ff

0800619c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b20      	cmp	r3, #32
 80061b0:	d138      	bne.n	8006224 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80061bc:	2302      	movs	r3, #2
 80061be:	e032      	b.n	8006226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2224      	movs	r2, #36	; 0x24
 80061cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	681a      	ldr	r2, [r3, #0]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0201 	bic.w	r2, r2, #1
 80061de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80061ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6819      	ldr	r1, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	683a      	ldr	r2, [r7, #0]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0201 	orr.w	r2, r2, #1
 800620e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2220      	movs	r2, #32
 8006214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	e000      	b.n	8006226 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006224:	2302      	movs	r3, #2
  }
}
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006232:	b480      	push	{r7}
 8006234:	b085      	sub	sp, #20
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006242:	b2db      	uxtb	r3, r3
 8006244:	2b20      	cmp	r3, #32
 8006246:	d139      	bne.n	80062bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800624e:	2b01      	cmp	r3, #1
 8006250:	d101      	bne.n	8006256 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006252:	2302      	movs	r3, #2
 8006254:	e033      	b.n	80062be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2224      	movs	r2, #36	; 0x24
 8006262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f022 0201 	bic.w	r2, r2, #1
 8006274:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006284:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	021b      	lsls	r3, r3, #8
 800628a:	68fa      	ldr	r2, [r7, #12]
 800628c:	4313      	orrs	r3, r2
 800628e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f042 0201 	orr.w	r2, r2, #1
 80062a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80062b8:	2300      	movs	r3, #0
 80062ba:	e000      	b.n	80062be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80062bc:	2302      	movs	r3, #2
  }
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3714      	adds	r7, #20
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr

080062ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d101      	bne.n	80062dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80062d8:	2301      	movs	r3, #1
 80062da:	e0c0      	b.n	800645e <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d106      	bne.n	80062f6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f007 fcc7 	bl	800dc84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2203      	movs	r2, #3
 80062fa:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4618      	mov	r0, r3
 8006304:	f003 faf3 	bl	80098ee <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006308:	2300      	movs	r3, #0
 800630a:	73fb      	strb	r3, [r7, #15]
 800630c:	e03e      	b.n	800638c <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800630e:	7bfa      	ldrb	r2, [r7, #15]
 8006310:	6879      	ldr	r1, [r7, #4]
 8006312:	4613      	mov	r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4413      	add	r3, r2
 8006318:	00db      	lsls	r3, r3, #3
 800631a:	440b      	add	r3, r1
 800631c:	3311      	adds	r3, #17
 800631e:	2201      	movs	r2, #1
 8006320:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006322:	7bfa      	ldrb	r2, [r7, #15]
 8006324:	6879      	ldr	r1, [r7, #4]
 8006326:	4613      	mov	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	00db      	lsls	r3, r3, #3
 800632e:	440b      	add	r3, r1
 8006330:	3310      	adds	r3, #16
 8006332:	7bfa      	ldrb	r2, [r7, #15]
 8006334:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006336:	7bfa      	ldrb	r2, [r7, #15]
 8006338:	6879      	ldr	r1, [r7, #4]
 800633a:	4613      	mov	r3, r2
 800633c:	009b      	lsls	r3, r3, #2
 800633e:	4413      	add	r3, r2
 8006340:	00db      	lsls	r3, r3, #3
 8006342:	440b      	add	r3, r1
 8006344:	3313      	adds	r3, #19
 8006346:	2200      	movs	r2, #0
 8006348:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800634a:	7bfa      	ldrb	r2, [r7, #15]
 800634c:	6879      	ldr	r1, [r7, #4]
 800634e:	4613      	mov	r3, r2
 8006350:	009b      	lsls	r3, r3, #2
 8006352:	4413      	add	r3, r2
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	440b      	add	r3, r1
 8006358:	3320      	adds	r3, #32
 800635a:	2200      	movs	r2, #0
 800635c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800635e:	7bfa      	ldrb	r2, [r7, #15]
 8006360:	6879      	ldr	r1, [r7, #4]
 8006362:	4613      	mov	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	4413      	add	r3, r2
 8006368:	00db      	lsls	r3, r3, #3
 800636a:	440b      	add	r3, r1
 800636c:	3324      	adds	r3, #36	; 0x24
 800636e:	2200      	movs	r2, #0
 8006370:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006372:	7bfb      	ldrb	r3, [r7, #15]
 8006374:	6879      	ldr	r1, [r7, #4]
 8006376:	1c5a      	adds	r2, r3, #1
 8006378:	4613      	mov	r3, r2
 800637a:	009b      	lsls	r3, r3, #2
 800637c:	4413      	add	r3, r2
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	440b      	add	r3, r1
 8006382:	2200      	movs	r2, #0
 8006384:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006386:	7bfb      	ldrb	r3, [r7, #15]
 8006388:	3301      	adds	r3, #1
 800638a:	73fb      	strb	r3, [r7, #15]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	791b      	ldrb	r3, [r3, #4]
 8006390:	7bfa      	ldrb	r2, [r7, #15]
 8006392:	429a      	cmp	r2, r3
 8006394:	d3bb      	bcc.n	800630e <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006396:	2300      	movs	r3, #0
 8006398:	73fb      	strb	r3, [r7, #15]
 800639a:	e044      	b.n	8006426 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800639c:	7bfa      	ldrb	r2, [r7, #15]
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	4613      	mov	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	440b      	add	r3, r1
 80063aa:	f203 1351 	addw	r3, r3, #337	; 0x151
 80063ae:	2200      	movs	r2, #0
 80063b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80063b2:	7bfa      	ldrb	r2, [r7, #15]
 80063b4:	6879      	ldr	r1, [r7, #4]
 80063b6:	4613      	mov	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	4413      	add	r3, r2
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	440b      	add	r3, r1
 80063c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80063c4:	7bfa      	ldrb	r2, [r7, #15]
 80063c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80063c8:	7bfa      	ldrb	r2, [r7, #15]
 80063ca:	6879      	ldr	r1, [r7, #4]
 80063cc:	4613      	mov	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	4413      	add	r3, r2
 80063d2:	00db      	lsls	r3, r3, #3
 80063d4:	440b      	add	r3, r1
 80063d6:	f203 1353 	addw	r3, r3, #339	; 0x153
 80063da:	2200      	movs	r2, #0
 80063dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80063de:	7bfa      	ldrb	r2, [r7, #15]
 80063e0:	6879      	ldr	r1, [r7, #4]
 80063e2:	4613      	mov	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	00db      	lsls	r3, r3, #3
 80063ea:	440b      	add	r3, r1
 80063ec:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80063f0:	2200      	movs	r2, #0
 80063f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80063f4:	7bfa      	ldrb	r2, [r7, #15]
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	4613      	mov	r3, r2
 80063fa:	009b      	lsls	r3, r3, #2
 80063fc:	4413      	add	r3, r2
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	440b      	add	r3, r1
 8006402:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006406:	2200      	movs	r2, #0
 8006408:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800640a:	7bfa      	ldrb	r2, [r7, #15]
 800640c:	6879      	ldr	r1, [r7, #4]
 800640e:	4613      	mov	r3, r2
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	4413      	add	r3, r2
 8006414:	00db      	lsls	r3, r3, #3
 8006416:	440b      	add	r3, r1
 8006418:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800641c:	2200      	movs	r2, #0
 800641e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006420:	7bfb      	ldrb	r3, [r7, #15]
 8006422:	3301      	adds	r3, #1
 8006424:	73fb      	strb	r3, [r7, #15]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	791b      	ldrb	r3, [r3, #4]
 800642a:	7bfa      	ldrb	r2, [r7, #15]
 800642c:	429a      	cmp	r2, r3
 800642e:	d3b5      	bcc.n	800639c <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6818      	ldr	r0, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	3304      	adds	r3, #4
 8006438:	e893 0006 	ldmia.w	r3, {r1, r2}
 800643c:	f003 fa72 	bl	8009924 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2200      	movs	r2, #0
 8006444:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2201      	movs	r2, #1
 800644a:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	7a9b      	ldrb	r3, [r3, #10]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d102      	bne.n	800645c <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f001 fc41 	bl	8007cde <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800645c:	2300      	movs	r3, #0
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}

08006466 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006466:	b580      	push	{r7, lr}
 8006468:	b082      	sub	sp, #8
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8006474:	2b01      	cmp	r3, #1
 8006476:	d101      	bne.n	800647c <HAL_PCD_Start+0x16>
 8006478:	2302      	movs	r3, #2
 800647a:	e012      	b.n	80064a2 <HAL_PCD_Start+0x3c>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4618      	mov	r0, r3
 800648a:	f003 fa19 	bl	80098c0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4618      	mov	r0, r3
 8006494:	f005 fcd9 	bl	800be4a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3708      	adds	r7, #8
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b084      	sub	sp, #16
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4618      	mov	r0, r3
 80064b8:	f005 fcde 	bl	800be78 <USB_ReadInterrupts>
 80064bc:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d003      	beq.n	80064d0 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f000 fb04 	bl	8006ad6 <PCD_EP_ISR_Handler>

    return;
 80064ce:	e110      	b.n	80066f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d013      	beq.n	8006502 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064ec:	b292      	uxth	r2, r2
 80064ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f007 fc5f 	bl	800ddb6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80064f8:	2100      	movs	r1, #0
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 f8fc 	bl	80066f8 <HAL_PCD_SetAddress>

    return;
 8006500:	e0f7      	b.n	80066f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00c      	beq.n	8006526 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006514:	b29a      	uxth	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800651e:	b292      	uxth	r2, r2
 8006520:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006524:	e0e5      	b.n	80066f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800652c:	2b00      	cmp	r3, #0
 800652e:	d00c      	beq.n	800654a <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006538:	b29a      	uxth	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006542:	b292      	uxth	r2, r2
 8006544:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006548:	e0d3      	b.n	80066f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d034      	beq.n	80065be <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800655c:	b29a      	uxth	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0204 	bic.w	r2, r2, #4
 8006566:	b292      	uxth	r2, r2
 8006568:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006574:	b29a      	uxth	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0208 	bic.w	r2, r2, #8
 800657e:	b292      	uxth	r2, r2
 8006580:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 800658a:	2b01      	cmp	r3, #1
 800658c:	d107      	bne.n	800659e <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006596:	2100      	movs	r1, #0
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f007 fdff 	bl	800e19c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f007 fc42 	bl	800de28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065b6:	b292      	uxth	r2, r2
 80065b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80065bc:	e099      	b.n	80066f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d027      	beq.n	8006618 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0208 	orr.w	r2, r2, #8
 80065da:	b292      	uxth	r2, r2
 80065dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065f2:	b292      	uxth	r2, r2
 80065f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006600:	b29a      	uxth	r2, r3
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f042 0204 	orr.w	r2, r2, #4
 800660a:	b292      	uxth	r2, r2
 800660c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f007 fbef 	bl	800ddf4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006616:	e06c      	b.n	80066f2 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800661e:	2b00      	cmp	r3, #0
 8006620:	d040      	beq.n	80066a4 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800662a:	b29a      	uxth	r2, r3
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006634:	b292      	uxth	r2, r2
 8006636:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8006640:	2b00      	cmp	r3, #0
 8006642:	d12b      	bne.n	800669c <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800664c:	b29a      	uxth	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 0204 	orr.w	r2, r2, #4
 8006656:	b292      	uxth	r2, r2
 8006658:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006664:	b29a      	uxth	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0208 	orr.w	r2, r2, #8
 800666e:	b292      	uxth	r2, r2
 8006670:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2201      	movs	r2, #1
 8006678:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8006684:	b29b      	uxth	r3, r3
 8006686:	089b      	lsrs	r3, r3, #2
 8006688:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006692:	2101      	movs	r1, #1
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f007 fd81 	bl	800e19c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800669a:	e02a      	b.n	80066f2 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f007 fba9 	bl	800ddf4 <HAL_PCD_SuspendCallback>
    return;
 80066a2:	e026      	b.n	80066f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00f      	beq.n	80066ce <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80066c0:	b292      	uxth	r2, r2
 80066c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f007 fb67 	bl	800dd9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 80066cc:	e011      	b.n	80066f2 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d00c      	beq.n	80066f2 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066e0:	b29a      	uxth	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066ea:	b292      	uxth	r2, r2
 80066ec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80066f0:	bf00      	nop
  }
}
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800670a:	2b01      	cmp	r3, #1
 800670c:	d101      	bne.n	8006712 <HAL_PCD_SetAddress+0x1a>
 800670e:	2302      	movs	r3, #2
 8006710:	e012      	b.n	8006738 <HAL_PCD_SetAddress+0x40>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	78fa      	ldrb	r2, [r7, #3]
 800671e:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	78fa      	ldrb	r2, [r7, #3]
 8006726:	4611      	mov	r1, r2
 8006728:	4618      	mov	r0, r3
 800672a:	f005 fb7a 	bl	800be22 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3708      	adds	r7, #8
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b084      	sub	sp, #16
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
 8006748:	4608      	mov	r0, r1
 800674a:	4611      	mov	r1, r2
 800674c:	461a      	mov	r2, r3
 800674e:	4603      	mov	r3, r0
 8006750:	70fb      	strb	r3, [r7, #3]
 8006752:	460b      	mov	r3, r1
 8006754:	803b      	strh	r3, [r7, #0]
 8006756:	4613      	mov	r3, r2
 8006758:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800675e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006762:	2b00      	cmp	r3, #0
 8006764:	da0e      	bge.n	8006784 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006766:	78fb      	ldrb	r3, [r7, #3]
 8006768:	f003 0207 	and.w	r2, r3, #7
 800676c:	4613      	mov	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	3310      	adds	r3, #16
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	4413      	add	r3, r2
 800677a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2201      	movs	r2, #1
 8006780:	705a      	strb	r2, [r3, #1]
 8006782:	e00e      	b.n	80067a2 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006784:	78fb      	ldrb	r3, [r7, #3]
 8006786:	f003 0207 	and.w	r2, r3, #7
 800678a:	4613      	mov	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	00db      	lsls	r3, r3, #3
 8006792:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	4413      	add	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80067a2:	78fb      	ldrb	r3, [r7, #3]
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80067ae:	883a      	ldrh	r2, [r7, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	78ba      	ldrb	r2, [r7, #2]
 80067b8:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80067ba:	78bb      	ldrb	r3, [r7, #2]
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d102      	bne.n	80067c6 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2200      	movs	r2, #0
 80067c4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d101      	bne.n	80067d4 <HAL_PCD_EP_Open+0x94>
 80067d0:	2302      	movs	r3, #2
 80067d2:	e00e      	b.n	80067f2 <HAL_PCD_EP_Open+0xb2>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2201      	movs	r2, #1
 80067d8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68f9      	ldr	r1, [r7, #12]
 80067e2:	4618      	mov	r0, r3
 80067e4:	f003 f8bc 	bl	8009960 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 80067f0:	7afb      	ldrb	r3, [r7, #11]
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}

080067fa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80067fa:	b580      	push	{r7, lr}
 80067fc:	b084      	sub	sp, #16
 80067fe:	af00      	add	r7, sp, #0
 8006800:	6078      	str	r0, [r7, #4]
 8006802:	460b      	mov	r3, r1
 8006804:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006806:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800680a:	2b00      	cmp	r3, #0
 800680c:	da0e      	bge.n	800682c <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800680e:	78fb      	ldrb	r3, [r7, #3]
 8006810:	f003 0207 	and.w	r2, r3, #7
 8006814:	4613      	mov	r3, r2
 8006816:	009b      	lsls	r3, r3, #2
 8006818:	4413      	add	r3, r2
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	3310      	adds	r3, #16
 800681e:	687a      	ldr	r2, [r7, #4]
 8006820:	4413      	add	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2201      	movs	r2, #1
 8006828:	705a      	strb	r2, [r3, #1]
 800682a:	e00e      	b.n	800684a <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800682c:	78fb      	ldrb	r3, [r7, #3]
 800682e:	f003 0207 	and.w	r2, r3, #7
 8006832:	4613      	mov	r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	4413      	add	r3, r2
 8006838:	00db      	lsls	r3, r3, #3
 800683a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	4413      	add	r3, r2
 8006842:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800684a:	78fb      	ldrb	r3, [r7, #3]
 800684c:	f003 0307 	and.w	r3, r3, #7
 8006850:	b2da      	uxtb	r2, r3
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800685c:	2b01      	cmp	r3, #1
 800685e:	d101      	bne.n	8006864 <HAL_PCD_EP_Close+0x6a>
 8006860:	2302      	movs	r3, #2
 8006862:	e00e      	b.n	8006882 <HAL_PCD_EP_Close+0x88>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	68f9      	ldr	r1, [r7, #12]
 8006872:	4618      	mov	r0, r3
 8006874:	f003 fc38 	bl	800a0e8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2200      	movs	r2, #0
 800687c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8006880:	2300      	movs	r3, #0
}
 8006882:	4618      	mov	r0, r3
 8006884:	3710      	adds	r7, #16
 8006886:	46bd      	mov	sp, r7
 8006888:	bd80      	pop	{r7, pc}

0800688a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800688a:	b580      	push	{r7, lr}
 800688c:	b086      	sub	sp, #24
 800688e:	af00      	add	r7, sp, #0
 8006890:	60f8      	str	r0, [r7, #12]
 8006892:	607a      	str	r2, [r7, #4]
 8006894:	603b      	str	r3, [r7, #0]
 8006896:	460b      	mov	r3, r1
 8006898:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800689a:	7afb      	ldrb	r3, [r7, #11]
 800689c:	f003 0207 	and.w	r2, r3, #7
 80068a0:	4613      	mov	r3, r2
 80068a2:	009b      	lsls	r3, r3, #2
 80068a4:	4413      	add	r3, r2
 80068a6:	00db      	lsls	r3, r3, #3
 80068a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	4413      	add	r3, r2
 80068b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2200      	movs	r2, #0
 80068c2:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	2200      	movs	r2, #0
 80068c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068ca:	7afb      	ldrb	r3, [r7, #11]
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	b2da      	uxtb	r2, r3
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	6979      	ldr	r1, [r7, #20]
 80068dc:	4618      	mov	r0, r3
 80068de:	f003 fdf0 	bl	800a4c2 <USB_EPStartXfer>

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3718      	adds	r7, #24
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	460b      	mov	r3, r1
 80068f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	f003 0207 	and.w	r2, r3, #7
 80068fe:	6879      	ldr	r1, [r7, #4]
 8006900:	4613      	mov	r3, r2
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	440b      	add	r3, r1
 800690a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800690e:	681b      	ldr	r3, [r3, #0]
}
 8006910:	4618      	mov	r0, r3
 8006912:	370c      	adds	r7, #12
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	607a      	str	r2, [r7, #4]
 8006926:	603b      	str	r3, [r7, #0]
 8006928:	460b      	mov	r3, r1
 800692a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800692c:	7afb      	ldrb	r3, [r7, #11]
 800692e:	f003 0207 	and.w	r2, r3, #7
 8006932:	4613      	mov	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	00db      	lsls	r3, r3, #3
 800693a:	3310      	adds	r3, #16
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	683a      	ldr	r2, [r7, #0]
 800694c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	2201      	movs	r2, #1
 8006952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	683a      	ldr	r2, [r7, #0]
 800695a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	2200      	movs	r2, #0
 8006960:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	2201      	movs	r2, #1
 8006966:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006968:	7afb      	ldrb	r3, [r7, #11]
 800696a:	f003 0307 	and.w	r3, r3, #7
 800696e:	b2da      	uxtb	r2, r3
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	6979      	ldr	r1, [r7, #20]
 800697a:	4618      	mov	r0, r3
 800697c:	f003 fda1 	bl	800a4c2 <USB_EPStartXfer>

  return HAL_OK;
 8006980:	2300      	movs	r3, #0
}
 8006982:	4618      	mov	r0, r3
 8006984:	3718      	adds	r7, #24
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b084      	sub	sp, #16
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	460b      	mov	r3, r1
 8006994:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006996:	78fb      	ldrb	r3, [r7, #3]
 8006998:	f003 0307 	and.w	r3, r3, #7
 800699c:	687a      	ldr	r2, [r7, #4]
 800699e:	7912      	ldrb	r2, [r2, #4]
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d901      	bls.n	80069a8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80069a4:	2301      	movs	r3, #1
 80069a6:	e03e      	b.n	8006a26 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80069a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	da0e      	bge.n	80069ce <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069b0:	78fb      	ldrb	r3, [r7, #3]
 80069b2:	f003 0207 	and.w	r2, r3, #7
 80069b6:	4613      	mov	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	00db      	lsls	r3, r3, #3
 80069be:	3310      	adds	r3, #16
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	4413      	add	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2201      	movs	r2, #1
 80069ca:	705a      	strb	r2, [r3, #1]
 80069cc:	e00c      	b.n	80069e8 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80069ce:	78fa      	ldrb	r2, [r7, #3]
 80069d0:	4613      	mov	r3, r2
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	00db      	lsls	r3, r3, #3
 80069d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	4413      	add	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2200      	movs	r2, #0
 80069e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2201      	movs	r2, #1
 80069ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80069ee:	78fb      	ldrb	r3, [r7, #3]
 80069f0:	f003 0307 	and.w	r3, r3, #7
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d101      	bne.n	8006a08 <HAL_PCD_EP_SetStall+0x7e>
 8006a04:	2302      	movs	r3, #2
 8006a06:	e00e      	b.n	8006a26 <HAL_PCD_EP_SetStall+0x9c>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68f9      	ldr	r1, [r7, #12]
 8006a16:	4618      	mov	r0, r3
 8006a18:	f005 f904 	bl	800bc24 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b084      	sub	sp, #16
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	460b      	mov	r3, r1
 8006a38:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006a3a:	78fb      	ldrb	r3, [r7, #3]
 8006a3c:	f003 030f 	and.w	r3, r3, #15
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	7912      	ldrb	r2, [r2, #4]
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d901      	bls.n	8006a4c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e040      	b.n	8006ace <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006a4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	da0e      	bge.n	8006a72 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006a54:	78fb      	ldrb	r3, [r7, #3]
 8006a56:	f003 0207 	and.w	r2, r3, #7
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	00db      	lsls	r3, r3, #3
 8006a62:	3310      	adds	r3, #16
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	4413      	add	r3, r2
 8006a68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	705a      	strb	r2, [r3, #1]
 8006a70:	e00e      	b.n	8006a90 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a72:	78fb      	ldrb	r3, [r7, #3]
 8006a74:	f003 0207 	and.w	r2, r3, #7
 8006a78:	4613      	mov	r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	4413      	add	r3, r2
 8006a7e:	00db      	lsls	r3, r3, #3
 8006a80:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a84:	687a      	ldr	r2, [r7, #4]
 8006a86:	4413      	add	r3, r2
 8006a88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	b2da      	uxtb	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d101      	bne.n	8006ab0 <HAL_PCD_EP_ClrStall+0x82>
 8006aac:	2302      	movs	r3, #2
 8006aae:	e00e      	b.n	8006ace <HAL_PCD_EP_ClrStall+0xa0>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68f9      	ldr	r1, [r7, #12]
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f005 f901 	bl	800bcc6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3710      	adds	r7, #16
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b096      	sub	sp, #88	; 0x58
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006ade:	e3ae      	b.n	800723e <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ae8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006aec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006af0:	b2db      	uxtb	r3, r3
 8006af2:	f003 030f 	and.w	r3, r3, #15
 8006af6:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8006afa:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	f040 8170 	bne.w	8006de4 <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006b04:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006b08:	f003 0310 	and.w	r3, r3, #16
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d14d      	bne.n	8006bac <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	881b      	ldrh	r3, [r3, #0]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b20:	81fb      	strh	r3, [r7, #14]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681a      	ldr	r2, [r3, #0]
 8006b26:	89fb      	ldrh	r3, [r7, #14]
 8006b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	3310      	adds	r3, #16
 8006b38:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b42:	b29b      	uxth	r3, r3
 8006b44:	461a      	mov	r2, r3
 8006b46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b48:	781b      	ldrb	r3, [r3, #0]
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	4413      	add	r3, r2
 8006b4e:	687a      	ldr	r2, [r7, #4]
 8006b50:	6812      	ldr	r2, [r2, #0]
 8006b52:	4413      	add	r3, r2
 8006b54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b58:	881b      	ldrh	r3, [r3, #0]
 8006b5a:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b60:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b64:	695a      	ldr	r2, [r3, #20]
 8006b66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	441a      	add	r2, r3
 8006b6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b6e:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006b70:	2100      	movs	r1, #0
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f007 f8f7 	bl	800dd66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	7b1b      	ldrb	r3, [r3, #12]
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f000 835d 	beq.w	800723e <PCD_EP_ISR_Handler+0x768>
 8006b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	f040 8358 	bne.w	800723e <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	7b1b      	ldrb	r3, [r3, #12]
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	b292      	uxth	r2, r2
 8006ba0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	731a      	strb	r2, [r3, #12]
 8006baa:	e348      	b.n	800723e <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006bb2:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006bbe:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006bc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d032      	beq.n	8006c30 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bd2:	b29b      	uxth	r3, r3
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	00db      	lsls	r3, r3, #3
 8006bdc:	4413      	add	r3, r2
 8006bde:	687a      	ldr	r2, [r7, #4]
 8006be0:	6812      	ldr	r2, [r2, #0]
 8006be2:	4413      	add	r3, r2
 8006be4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006be8:	881b      	ldrh	r3, [r3, #0]
 8006bea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bf0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6818      	ldr	r0, [r3, #0]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8006bfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bfe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006c00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c02:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	f005 f989 	bl	800bf1c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	881b      	ldrh	r3, [r3, #0]
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006c16:	4013      	ands	r3, r2
 8006c18:	823b      	strh	r3, [r7, #16]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	8a3a      	ldrh	r2, [r7, #16]
 8006c20:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c24:	b292      	uxth	r2, r2
 8006c26:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f007 f86f 	bl	800dd0c <HAL_PCD_SetupStageCallback>
 8006c2e:	e306      	b.n	800723e <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006c30:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	f280 8302 	bge.w	800723e <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	881b      	ldrh	r3, [r3, #0]
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006c46:	4013      	ands	r3, r2
 8006c48:	83fb      	strh	r3, [r7, #30]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	8bfa      	ldrh	r2, [r7, #30]
 8006c50:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006c54:	b292      	uxth	r2, r2
 8006c56:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	461a      	mov	r2, r3
 8006c64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	00db      	lsls	r3, r3, #3
 8006c6a:	4413      	add	r3, r2
 8006c6c:	687a      	ldr	r2, [r7, #4]
 8006c6e:	6812      	ldr	r2, [r2, #0]
 8006c70:	4413      	add	r3, r2
 8006c72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c76:	881b      	ldrh	r3, [r3, #0]
 8006c78:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006c7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c7e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006c80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c82:	69db      	ldr	r3, [r3, #28]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d019      	beq.n	8006cbc <PCD_EP_ISR_Handler+0x1e6>
 8006c88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c8a:	695b      	ldr	r3, [r3, #20]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d015      	beq.n	8006cbc <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6818      	ldr	r0, [r3, #0]
 8006c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c96:	6959      	ldr	r1, [r3, #20]
 8006c98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c9a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c9e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	f005 f93b 	bl	800bf1c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006ca6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ca8:	695a      	ldr	r2, [r3, #20]
 8006caa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cac:	69db      	ldr	r3, [r3, #28]
 8006cae:	441a      	add	r2, r3
 8006cb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cb2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006cb4:	2100      	movs	r1, #0
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f007 f83a 	bl	800dd30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006cc6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006cca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	f040 82b5 	bne.w	800723e <PCD_EP_ISR_Handler+0x768>
 8006cd4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006cd8:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006cdc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ce0:	f000 82ad 	beq.w	800723e <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	61bb      	str	r3, [r7, #24]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cf2:	b29b      	uxth	r3, r3
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	61bb      	str	r3, [r7, #24]
 8006cfc:	69bb      	ldr	r3, [r7, #24]
 8006cfe:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006d02:	617b      	str	r3, [r7, #20]
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	881b      	ldrh	r3, [r3, #0]
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006d0e:	b29a      	uxth	r2, r3
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	801a      	strh	r2, [r3, #0]
 8006d14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	2b3e      	cmp	r3, #62	; 0x3e
 8006d1a:	d91d      	bls.n	8006d58 <PCD_EP_ISR_Handler+0x282>
 8006d1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d1e:	691b      	ldr	r3, [r3, #16]
 8006d20:	095b      	lsrs	r3, r3, #5
 8006d22:	647b      	str	r3, [r7, #68]	; 0x44
 8006d24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d26:	691b      	ldr	r3, [r3, #16]
 8006d28:	f003 031f 	and.w	r3, r3, #31
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d102      	bne.n	8006d36 <PCD_EP_ISR_Handler+0x260>
 8006d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d32:	3b01      	subs	r3, #1
 8006d34:	647b      	str	r3, [r7, #68]	; 0x44
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	881b      	ldrh	r3, [r3, #0]
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d3e:	b29b      	uxth	r3, r3
 8006d40:	029b      	lsls	r3, r3, #10
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	4313      	orrs	r3, r2
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d50:	b29a      	uxth	r2, r3
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	801a      	strh	r2, [r3, #0]
 8006d56:	e026      	b.n	8006da6 <PCD_EP_ISR_Handler+0x2d0>
 8006d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d5a:	691b      	ldr	r3, [r3, #16]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10a      	bne.n	8006d76 <PCD_EP_ISR_Handler+0x2a0>
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	881b      	ldrh	r3, [r3, #0]
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	697b      	ldr	r3, [r7, #20]
 8006d72:	801a      	strh	r2, [r3, #0]
 8006d74:	e017      	b.n	8006da6 <PCD_EP_ISR_Handler+0x2d0>
 8006d76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d78:	691b      	ldr	r3, [r3, #16]
 8006d7a:	085b      	lsrs	r3, r3, #1
 8006d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8006d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d002      	beq.n	8006d90 <PCD_EP_ISR_Handler+0x2ba>
 8006d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	647b      	str	r3, [r7, #68]	; 0x44
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	881b      	ldrh	r3, [r3, #0]
 8006d94:	b29a      	uxth	r2, r3
 8006d96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d98:	b29b      	uxth	r3, r3
 8006d9a:	029b      	lsls	r3, r3, #10
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	881b      	ldrh	r3, [r3, #0]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006db6:	827b      	strh	r3, [r7, #18]
 8006db8:	8a7b      	ldrh	r3, [r7, #18]
 8006dba:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006dbe:	827b      	strh	r3, [r7, #18]
 8006dc0:	8a7b      	ldrh	r3, [r7, #18]
 8006dc2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006dc6:	827b      	strh	r3, [r7, #18]
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	8a7b      	ldrh	r3, [r7, #18]
 8006dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	8013      	strh	r3, [r2, #0]
 8006de2:	e22c      	b.n	800723e <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	461a      	mov	r2, r3
 8006dea:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4413      	add	r3, r2
 8006df2:	881b      	ldrh	r3, [r3, #0]
 8006df4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006df8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	f280 80f6 	bge.w	8006fee <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	461a      	mov	r2, r3
 8006e08:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	4413      	add	r3, r2
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	b29a      	uxth	r2, r3
 8006e14:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006e18:	4013      	ands	r3, r2
 8006e1a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	461a      	mov	r2, r3
 8006e24:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006e30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006e34:	b292      	uxth	r2, r2
 8006e36:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006e38:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	009b      	lsls	r3, r3, #2
 8006e40:	4413      	add	r3, r2
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006e4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e50:	7b1b      	ldrb	r3, [r3, #12]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d123      	bne.n	8006e9e <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	461a      	mov	r2, r3
 8006e62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	00db      	lsls	r3, r3, #3
 8006e68:	4413      	add	r3, r2
 8006e6a:	687a      	ldr	r2, [r7, #4]
 8006e6c:	6812      	ldr	r2, [r2, #0]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006e74:	881b      	ldrh	r3, [r3, #0]
 8006e76:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e7a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8006e7e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	f000 808e 	beq.w	8006fa4 <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6818      	ldr	r0, [r3, #0]
 8006e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e8e:	6959      	ldr	r1, [r3, #20]
 8006e90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e92:	88da      	ldrh	r2, [r3, #6]
 8006e94:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006e98:	f005 f840 	bl	800bf1c <USB_ReadPMA>
 8006e9c:	e082      	b.n	8006fa4 <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ea0:	78db      	ldrb	r3, [r3, #3]
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d10a      	bne.n	8006ebc <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006ea6:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006eaa:	461a      	mov	r2, r3
 8006eac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f9d3 	bl	800725a <HAL_PCD_EP_DB_Receive>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006eba:	e073      	b.n	8006fa4 <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	881b      	ldrh	r3, [r3, #0]
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ed2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ed6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	461a      	mov	r2, r3
 8006ee0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	009b      	lsls	r3, r3, #2
 8006ee6:	441a      	add	r2, r3
 8006ee8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006eec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ef8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	461a      	mov	r2, r3
 8006f06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	4413      	add	r3, r2
 8006f0e:	881b      	ldrh	r3, [r3, #0]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d022      	beq.n	8006f60 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	461a      	mov	r2, r3
 8006f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	4413      	add	r3, r2
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	6812      	ldr	r2, [r2, #0]
 8006f32:	4413      	add	r3, r2
 8006f34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f3e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8006f42:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d02c      	beq.n	8006fa4 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6818      	ldr	r0, [r3, #0]
 8006f4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f50:	6959      	ldr	r1, [r3, #20]
 8006f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f54:	891a      	ldrh	r2, [r3, #8]
 8006f56:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006f5a:	f004 ffdf 	bl	800bf1c <USB_ReadPMA>
 8006f5e:	e021      	b.n	8006fa4 <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	00db      	lsls	r3, r3, #3
 8006f72:	4413      	add	r3, r2
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	6812      	ldr	r2, [r2, #0]
 8006f78:	4413      	add	r3, r2
 8006f7a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f7e:	881b      	ldrh	r3, [r3, #0]
 8006f80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f84:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8006f88:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d009      	beq.n	8006fa4 <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6818      	ldr	r0, [r3, #0]
 8006f94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f96:	6959      	ldr	r1, [r3, #20]
 8006f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f9a:	895a      	ldrh	r2, [r3, #10]
 8006f9c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006fa0:	f004 ffbc 	bl	800bf1c <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fa6:	69da      	ldr	r2, [r3, #28]
 8006fa8:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006fac:	441a      	add	r2, r3
 8006fae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fb0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fb4:	695a      	ldr	r2, [r3, #20]
 8006fb6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006fba:	441a      	add	r2, r3
 8006fbc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fbe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006fc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fc2:	699b      	ldr	r3, [r3, #24]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d005      	beq.n	8006fd4 <PCD_EP_ISR_Handler+0x4fe>
 8006fc8:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8006fcc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d206      	bcs.n	8006fe2 <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	4619      	mov	r1, r3
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f006 fea8 	bl	800dd30 <HAL_PCD_DataOutStageCallback>
 8006fe0:	e005      	b.n	8006fee <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f003 fa6a 	bl	800a4c2 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006fee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	f000 8121 	beq.w	800723e <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8006ffc:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8007000:	4613      	mov	r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	4413      	add	r3, r2
 8007006:	00db      	lsls	r3, r3, #3
 8007008:	3310      	adds	r3, #16
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	4413      	add	r3, r2
 800700e:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	461a      	mov	r2, r3
 8007016:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4413      	add	r3, r2
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	b29b      	uxth	r3, r3
 8007022:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8007026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800702a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	461a      	mov	r2, r3
 8007034:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8007038:	009b      	lsls	r3, r3, #2
 800703a:	441a      	add	r2, r3
 800703c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007048:	b29b      	uxth	r3, r3
 800704a:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 800704c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800704e:	78db      	ldrb	r3, [r3, #3]
 8007050:	2b01      	cmp	r3, #1
 8007052:	f040 80a2 	bne.w	800719a <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8007056:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007058:	2200      	movs	r2, #0
 800705a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800705c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800705e:	7b1b      	ldrb	r3, [r3, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	f000 8093 	beq.w	800718c <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007066:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800706a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800706e:	2b00      	cmp	r3, #0
 8007070:	d046      	beq.n	8007100 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007074:	785b      	ldrb	r3, [r3, #1]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d126      	bne.n	80070c8 <PCD_EP_ISR_Handler+0x5f2>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	627b      	str	r3, [r7, #36]	; 0x24
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007088:	b29b      	uxth	r3, r3
 800708a:	461a      	mov	r2, r3
 800708c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708e:	4413      	add	r3, r2
 8007090:	627b      	str	r3, [r7, #36]	; 0x24
 8007092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	00da      	lsls	r2, r3, #3
 8007098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709a:	4413      	add	r3, r2
 800709c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070a0:	623b      	str	r3, [r7, #32]
 80070a2:	6a3b      	ldr	r3, [r7, #32]
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	801a      	strh	r2, [r3, #0]
 80070b2:	6a3b      	ldr	r3, [r7, #32]
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	b29b      	uxth	r3, r3
 80070b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070c0:	b29a      	uxth	r2, r3
 80070c2:	6a3b      	ldr	r3, [r7, #32]
 80070c4:	801a      	strh	r2, [r3, #0]
 80070c6:	e061      	b.n	800718c <PCD_EP_ISR_Handler+0x6b6>
 80070c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070ca:	785b      	ldrb	r3, [r3, #1]
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d15d      	bne.n	800718c <PCD_EP_ISR_Handler+0x6b6>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070de:	b29b      	uxth	r3, r3
 80070e0:	461a      	mov	r2, r3
 80070e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e4:	4413      	add	r3, r2
 80070e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80070e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070ea:	781b      	ldrb	r3, [r3, #0]
 80070ec:	00da      	lsls	r2, r3, #3
 80070ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070f0:	4413      	add	r3, r2
 80070f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80070f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80070f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fa:	2200      	movs	r2, #0
 80070fc:	801a      	strh	r2, [r3, #0]
 80070fe:	e045      	b.n	800718c <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007106:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007108:	785b      	ldrb	r3, [r3, #1]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d126      	bne.n	800715c <PCD_EP_ISR_Handler+0x686>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	637b      	str	r3, [r7, #52]	; 0x34
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800711c:	b29b      	uxth	r3, r3
 800711e:	461a      	mov	r2, r3
 8007120:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007122:	4413      	add	r3, r2
 8007124:	637b      	str	r3, [r7, #52]	; 0x34
 8007126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	00da      	lsls	r2, r3, #3
 800712c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800712e:	4413      	add	r3, r2
 8007130:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007134:	633b      	str	r3, [r7, #48]	; 0x30
 8007136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	b29b      	uxth	r3, r3
 800713c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007140:	b29a      	uxth	r2, r3
 8007142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007144:	801a      	strh	r2, [r3, #0]
 8007146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007148:	881b      	ldrh	r3, [r3, #0]
 800714a:	b29b      	uxth	r3, r3
 800714c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007150:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007154:	b29a      	uxth	r2, r3
 8007156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007158:	801a      	strh	r2, [r3, #0]
 800715a:	e017      	b.n	800718c <PCD_EP_ISR_Handler+0x6b6>
 800715c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800715e:	785b      	ldrb	r3, [r3, #1]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d113      	bne.n	800718c <PCD_EP_ISR_Handler+0x6b6>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800716c:	b29b      	uxth	r3, r3
 800716e:	461a      	mov	r2, r3
 8007170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007172:	4413      	add	r3, r2
 8007174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	00da      	lsls	r2, r3, #3
 800717c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800717e:	4413      	add	r3, r2
 8007180:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007184:	63bb      	str	r3, [r7, #56]	; 0x38
 8007186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007188:	2200      	movs	r2, #0
 800718a:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800718c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f006 fde7 	bl	800dd66 <HAL_PCD_DataInStageCallback>
 8007198:	e051      	b.n	800723e <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800719a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800719e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d144      	bne.n	8007230 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	461a      	mov	r2, r3
 80071b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	00db      	lsls	r3, r3, #3
 80071b8:	4413      	add	r3, r2
 80071ba:	687a      	ldr	r2, [r7, #4]
 80071bc:	6812      	ldr	r2, [r2, #0]
 80071be:	4413      	add	r3, r2
 80071c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071c4:	881b      	ldrh	r3, [r3, #0]
 80071c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80071ca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 80071ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071d0:	699a      	ldr	r2, [r3, #24]
 80071d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80071d6:	429a      	cmp	r2, r3
 80071d8:	d907      	bls.n	80071ea <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 80071da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071dc:	699a      	ldr	r2, [r3, #24]
 80071de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80071e2:	1ad2      	subs	r2, r2, r3
 80071e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071e6:	619a      	str	r2, [r3, #24]
 80071e8:	e002      	b.n	80071f0 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 80071ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071ec:	2200      	movs	r2, #0
 80071ee:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80071f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071f2:	699b      	ldr	r3, [r3, #24]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d106      	bne.n	8007206 <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80071f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	4619      	mov	r1, r3
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	f006 fdb1 	bl	800dd66 <HAL_PCD_DataInStageCallback>
 8007204:	e01b      	b.n	800723e <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8007206:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007208:	695a      	ldr	r2, [r3, #20]
 800720a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800720e:	441a      	add	r2, r3
 8007210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007212:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8007214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007216:	69da      	ldr	r2, [r3, #28]
 8007218:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800721c:	441a      	add	r2, r3
 800721e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007220:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007228:	4618      	mov	r0, r3
 800722a:	f003 f94a 	bl	800a4c2 <USB_EPStartXfer>
 800722e:	e006      	b.n	800723e <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8007230:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007234:	461a      	mov	r2, r3
 8007236:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f000 f917 	bl	800746c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007246:	b29b      	uxth	r3, r3
 8007248:	b21b      	sxth	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	f6ff ac48 	blt.w	8006ae0 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3758      	adds	r7, #88	; 0x58
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b088      	sub	sp, #32
 800725e:	af00      	add	r7, sp, #0
 8007260:	60f8      	str	r0, [r7, #12]
 8007262:	60b9      	str	r1, [r7, #8]
 8007264:	4613      	mov	r3, r2
 8007266:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007268:	88fb      	ldrh	r3, [r7, #6]
 800726a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d07c      	beq.n	800736c <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800727a:	b29b      	uxth	r3, r3
 800727c:	461a      	mov	r2, r3
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	00db      	lsls	r3, r3, #3
 8007284:	4413      	add	r3, r2
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	6812      	ldr	r2, [r2, #0]
 800728a:	4413      	add	r3, r2
 800728c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007290:	881b      	ldrh	r3, [r3, #0]
 8007292:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007296:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	699a      	ldr	r2, [r3, #24]
 800729c:	8b7b      	ldrh	r3, [r7, #26]
 800729e:	429a      	cmp	r2, r3
 80072a0:	d306      	bcc.n	80072b0 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	699a      	ldr	r2, [r3, #24]
 80072a6:	8b7b      	ldrh	r3, [r7, #26]
 80072a8:	1ad2      	subs	r2, r2, r3
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	619a      	str	r2, [r3, #24]
 80072ae:	e002      	b.n	80072b6 <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	2200      	movs	r2, #0
 80072b4:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	699b      	ldr	r3, [r3, #24]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d123      	bne.n	8007306 <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	881b      	ldrh	r3, [r3, #0]
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80072d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072d8:	833b      	strh	r3, [r7, #24]
 80072da:	8b3b      	ldrh	r3, [r7, #24]
 80072dc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80072e0:	833b      	strh	r3, [r7, #24]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	461a      	mov	r2, r3
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	781b      	ldrb	r3, [r3, #0]
 80072ec:	009b      	lsls	r3, r3, #2
 80072ee:	441a      	add	r2, r3
 80072f0:	8b3b      	ldrh	r3, [r7, #24]
 80072f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007302:	b29b      	uxth	r3, r3
 8007304:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007306:	88fb      	ldrh	r3, [r7, #6]
 8007308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800730c:	2b00      	cmp	r3, #0
 800730e:	d01f      	beq.n	8007350 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	461a      	mov	r2, r3
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	781b      	ldrb	r3, [r3, #0]
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	4413      	add	r3, r2
 800731e:	881b      	ldrh	r3, [r3, #0]
 8007320:	b29b      	uxth	r3, r3
 8007322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732a:	82fb      	strh	r3, [r7, #22]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	461a      	mov	r2, r3
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	441a      	add	r2, r3
 800733a:	8afb      	ldrh	r3, [r7, #22]
 800733c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007340:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007348:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800734c:	b29b      	uxth	r3, r3
 800734e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8007350:	8b7b      	ldrh	r3, [r7, #26]
 8007352:	2b00      	cmp	r3, #0
 8007354:	f000 8085 	beq.w	8007462 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6818      	ldr	r0, [r3, #0]
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	6959      	ldr	r1, [r3, #20]
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	891a      	ldrh	r2, [r3, #8]
 8007364:	8b7b      	ldrh	r3, [r7, #26]
 8007366:	f004 fdd9 	bl	800bf1c <USB_ReadPMA>
 800736a:	e07a      	b.n	8007462 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007374:	b29b      	uxth	r3, r3
 8007376:	461a      	mov	r2, r3
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	00db      	lsls	r3, r3, #3
 800737e:	4413      	add	r3, r2
 8007380:	68fa      	ldr	r2, [r7, #12]
 8007382:	6812      	ldr	r2, [r2, #0]
 8007384:	4413      	add	r3, r2
 8007386:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800738a:	881b      	ldrh	r3, [r3, #0]
 800738c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007390:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	699a      	ldr	r2, [r3, #24]
 8007396:	8b7b      	ldrh	r3, [r7, #26]
 8007398:	429a      	cmp	r2, r3
 800739a:	d306      	bcc.n	80073aa <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	699a      	ldr	r2, [r3, #24]
 80073a0:	8b7b      	ldrh	r3, [r7, #26]
 80073a2:	1ad2      	subs	r2, r2, r3
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	619a      	str	r2, [r3, #24]
 80073a8:	e002      	b.n	80073b0 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	2200      	movs	r2, #0
 80073ae:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d123      	bne.n	8007400 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	461a      	mov	r2, r3
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	781b      	ldrb	r3, [r3, #0]
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	4413      	add	r3, r2
 80073c6:	881b      	ldrh	r3, [r3, #0]
 80073c8:	b29b      	uxth	r3, r3
 80073ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80073ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073d2:	83fb      	strh	r3, [r7, #30]
 80073d4:	8bfb      	ldrh	r3, [r7, #30]
 80073d6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80073da:	83fb      	strh	r3, [r7, #30]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	461a      	mov	r2, r3
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	441a      	add	r2, r3
 80073ea:	8bfb      	ldrh	r3, [r7, #30]
 80073ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007400:	88fb      	ldrh	r3, [r7, #6]
 8007402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007406:	2b00      	cmp	r3, #0
 8007408:	d11f      	bne.n	800744a <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	461a      	mov	r2, r3
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4413      	add	r3, r2
 8007418:	881b      	ldrh	r3, [r3, #0]
 800741a:	b29b      	uxth	r3, r3
 800741c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007424:	83bb      	strh	r3, [r7, #28]
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	461a      	mov	r2, r3
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	441a      	add	r2, r3
 8007434:	8bbb      	ldrh	r3, [r7, #28]
 8007436:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800743a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800743e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007442:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007446:	b29b      	uxth	r3, r3
 8007448:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800744a:	8b7b      	ldrh	r3, [r7, #26]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d008      	beq.n	8007462 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	6818      	ldr	r0, [r3, #0]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	6959      	ldr	r1, [r3, #20]
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	895a      	ldrh	r2, [r3, #10]
 800745c:	8b7b      	ldrh	r3, [r7, #26]
 800745e:	f004 fd5d 	bl	800bf1c <USB_ReadPMA>
    }
  }

  return count;
 8007462:	8b7b      	ldrh	r3, [r7, #26]
}
 8007464:	4618      	mov	r0, r3
 8007466:	3720      	adds	r7, #32
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b0a4      	sub	sp, #144	; 0x90
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	4613      	mov	r3, r2
 8007478:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800747a:	88fb      	ldrh	r3, [r7, #6]
 800747c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007480:	2b00      	cmp	r3, #0
 8007482:	f000 81db 	beq.w	800783c <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800748e:	b29b      	uxth	r3, r3
 8007490:	461a      	mov	r2, r3
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	00db      	lsls	r3, r3, #3
 8007498:	4413      	add	r3, r2
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	6812      	ldr	r2, [r2, #0]
 800749e:	4413      	add	r3, r2
 80074a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074a4:	881b      	ldrh	r3, [r3, #0]
 80074a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074aa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	699a      	ldr	r2, [r3, #24]
 80074b2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d907      	bls.n	80074ca <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	699a      	ldr	r2, [r3, #24]
 80074be:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80074c2:	1ad2      	subs	r2, r2, r3
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	619a      	str	r2, [r3, #24]
 80074c8:	e002      	b.n	80074d0 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	2200      	movs	r2, #0
 80074ce:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	f040 80b9 	bne.w	800764c <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	785b      	ldrb	r3, [r3, #1]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d126      	bne.n	8007530 <HAL_PCD_EP_DB_Transmit+0xc4>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	461a      	mov	r2, r3
 80074f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074f6:	4413      	add	r3, r2
 80074f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	00da      	lsls	r2, r3, #3
 8007500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007502:	4413      	add	r3, r2
 8007504:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007508:	62bb      	str	r3, [r7, #40]	; 0x28
 800750a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750c:	881b      	ldrh	r3, [r3, #0]
 800750e:	b29b      	uxth	r3, r3
 8007510:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007514:	b29a      	uxth	r2, r3
 8007516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007518:	801a      	strh	r2, [r3, #0]
 800751a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751c:	881b      	ldrh	r3, [r3, #0]
 800751e:	b29b      	uxth	r3, r3
 8007520:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007524:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007528:	b29a      	uxth	r2, r3
 800752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752c:	801a      	strh	r2, [r3, #0]
 800752e:	e01a      	b.n	8007566 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	785b      	ldrb	r3, [r3, #1]
 8007534:	2b01      	cmp	r3, #1
 8007536:	d116      	bne.n	8007566 <HAL_PCD_EP_DB_Transmit+0xfa>
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	637b      	str	r3, [r7, #52]	; 0x34
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007546:	b29b      	uxth	r3, r3
 8007548:	461a      	mov	r2, r3
 800754a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800754c:	4413      	add	r3, r2
 800754e:	637b      	str	r3, [r7, #52]	; 0x34
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	00da      	lsls	r2, r3, #3
 8007556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007558:	4413      	add	r3, r2
 800755a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800755e:	633b      	str	r3, [r7, #48]	; 0x30
 8007560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007562:	2200      	movs	r2, #0
 8007564:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	627b      	str	r3, [r7, #36]	; 0x24
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	785b      	ldrb	r3, [r3, #1]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d126      	bne.n	80075c2 <HAL_PCD_EP_DB_Transmit+0x156>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	61fb      	str	r3, [r7, #28]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007582:	b29b      	uxth	r3, r3
 8007584:	461a      	mov	r2, r3
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	4413      	add	r3, r2
 800758a:	61fb      	str	r3, [r7, #28]
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	00da      	lsls	r2, r3, #3
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	4413      	add	r3, r2
 8007596:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800759a:	61bb      	str	r3, [r7, #24]
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	881b      	ldrh	r3, [r3, #0]
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	801a      	strh	r2, [r3, #0]
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	881b      	ldrh	r3, [r3, #0]
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	69bb      	ldr	r3, [r7, #24]
 80075be:	801a      	strh	r2, [r3, #0]
 80075c0:	e017      	b.n	80075f2 <HAL_PCD_EP_DB_Transmit+0x186>
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	785b      	ldrb	r3, [r3, #1]
 80075c6:	2b01      	cmp	r3, #1
 80075c8:	d113      	bne.n	80075f2 <HAL_PCD_EP_DB_Transmit+0x186>
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	461a      	mov	r2, r3
 80075d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d8:	4413      	add	r3, r2
 80075da:	627b      	str	r3, [r7, #36]	; 0x24
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	781b      	ldrb	r3, [r3, #0]
 80075e0:	00da      	lsls	r2, r3, #3
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e4:	4413      	add	r3, r2
 80075e6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80075ea:	623b      	str	r3, [r7, #32]
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	2200      	movs	r2, #0
 80075f0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	4619      	mov	r1, r3
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f006 fbb4 	bl	800dd66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80075fe:	88fb      	ldrh	r3, [r7, #6]
 8007600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007604:	2b00      	cmp	r3, #0
 8007606:	f000 82fa 	beq.w	8007bfe <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	461a      	mov	r2, r3
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	4413      	add	r3, r2
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	b29b      	uxth	r3, r3
 800761c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007624:	82fb      	strh	r3, [r7, #22]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	461a      	mov	r2, r3
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	441a      	add	r2, r3
 8007634:	8afb      	ldrh	r3, [r7, #22]
 8007636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800763a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800763e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007646:	b29b      	uxth	r3, r3
 8007648:	8013      	strh	r3, [r2, #0]
 800764a:	e2d8      	b.n	8007bfe <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800764c:	88fb      	ldrh	r3, [r7, #6]
 800764e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007652:	2b00      	cmp	r3, #0
 8007654:	d021      	beq.n	800769a <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	461a      	mov	r2, r3
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	781b      	ldrb	r3, [r3, #0]
 8007660:	009b      	lsls	r3, r3, #2
 8007662:	4413      	add	r3, r2
 8007664:	881b      	ldrh	r3, [r3, #0]
 8007666:	b29b      	uxth	r3, r3
 8007668:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800766c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007670:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	461a      	mov	r2, r3
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	441a      	add	r2, r3
 8007682:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007686:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800768a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800768e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007696:	b29b      	uxth	r3, r3
 8007698:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	f040 82ac 	bne.w	8007bfe <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	695a      	ldr	r2, [r3, #20]
 80076aa:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80076ae:	441a      	add	r2, r3
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	69da      	ldr	r2, [r3, #28]
 80076b8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80076bc:	441a      	add	r2, r3
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	6a1a      	ldr	r2, [r3, #32]
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d30b      	bcc.n	80076e6 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	691b      	ldr	r3, [r3, #16]
 80076d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	6a1a      	ldr	r2, [r3, #32]
 80076da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076de:	1ad2      	subs	r2, r2, r3
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	621a      	str	r2, [r3, #32]
 80076e4:	e017      	b.n	8007716 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	6a1b      	ldr	r3, [r3, #32]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d108      	bne.n	8007700 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 80076ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80076f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	2200      	movs	r2, #0
 80076fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80076fe:	e00a      	b.n	8007716 <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2200      	movs	r2, #0
 8007704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	6a1b      	ldr	r3, [r3, #32]
 800770c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	2200      	movs	r2, #0
 8007714:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	785b      	ldrb	r3, [r3, #1]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d165      	bne.n	80077ea <HAL_PCD_EP_DB_Transmit+0x37e>
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800772c:	b29b      	uxth	r3, r3
 800772e:	461a      	mov	r2, r3
 8007730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007732:	4413      	add	r3, r2
 8007734:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	00da      	lsls	r2, r3, #3
 800773c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800773e:	4413      	add	r3, r2
 8007740:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007744:	63bb      	str	r3, [r7, #56]	; 0x38
 8007746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	b29b      	uxth	r3, r3
 800774c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007750:	b29a      	uxth	r2, r3
 8007752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007754:	801a      	strh	r2, [r3, #0]
 8007756:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800775a:	2b3e      	cmp	r3, #62	; 0x3e
 800775c:	d91d      	bls.n	800779a <HAL_PCD_EP_DB_Transmit+0x32e>
 800775e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007762:	095b      	lsrs	r3, r3, #5
 8007764:	64bb      	str	r3, [r7, #72]	; 0x48
 8007766:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800776a:	f003 031f 	and.w	r3, r3, #31
 800776e:	2b00      	cmp	r3, #0
 8007770:	d102      	bne.n	8007778 <HAL_PCD_EP_DB_Transmit+0x30c>
 8007772:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007774:	3b01      	subs	r3, #1
 8007776:	64bb      	str	r3, [r7, #72]	; 0x48
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	881b      	ldrh	r3, [r3, #0]
 800777c:	b29a      	uxth	r2, r3
 800777e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007780:	b29b      	uxth	r3, r3
 8007782:	029b      	lsls	r3, r3, #10
 8007784:	b29b      	uxth	r3, r3
 8007786:	4313      	orrs	r3, r2
 8007788:	b29b      	uxth	r3, r3
 800778a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800778e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007792:	b29a      	uxth	r2, r3
 8007794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007796:	801a      	strh	r2, [r3, #0]
 8007798:	e044      	b.n	8007824 <HAL_PCD_EP_DB_Transmit+0x3b8>
 800779a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10a      	bne.n	80077b8 <HAL_PCD_EP_DB_Transmit+0x34c>
 80077a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a4:	881b      	ldrh	r3, [r3, #0]
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80077ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80077b0:	b29a      	uxth	r2, r3
 80077b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b4:	801a      	strh	r2, [r3, #0]
 80077b6:	e035      	b.n	8007824 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80077b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077bc:	085b      	lsrs	r3, r3, #1
 80077be:	64bb      	str	r3, [r7, #72]	; 0x48
 80077c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077c4:	f003 0301 	and.w	r3, r3, #1
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d002      	beq.n	80077d2 <HAL_PCD_EP_DB_Transmit+0x366>
 80077cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077ce:	3301      	adds	r3, #1
 80077d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80077d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d4:	881b      	ldrh	r3, [r3, #0]
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077da:	b29b      	uxth	r3, r3
 80077dc:	029b      	lsls	r3, r3, #10
 80077de:	b29b      	uxth	r3, r3
 80077e0:	4313      	orrs	r3, r2
 80077e2:	b29a      	uxth	r2, r3
 80077e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e6:	801a      	strh	r2, [r3, #0]
 80077e8:	e01c      	b.n	8007824 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	785b      	ldrb	r3, [r3, #1]
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d118      	bne.n	8007824 <HAL_PCD_EP_DB_Transmit+0x3b8>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	647b      	str	r3, [r7, #68]	; 0x44
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007800:	b29b      	uxth	r3, r3
 8007802:	461a      	mov	r2, r3
 8007804:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007806:	4413      	add	r3, r2
 8007808:	647b      	str	r3, [r7, #68]	; 0x44
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	00da      	lsls	r2, r3, #3
 8007810:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007812:	4413      	add	r3, r2
 8007814:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007818:	643b      	str	r3, [r7, #64]	; 0x40
 800781a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800781e:	b29a      	uxth	r2, r3
 8007820:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007822:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6818      	ldr	r0, [r3, #0]
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	6959      	ldr	r1, [r3, #20]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	891a      	ldrh	r2, [r3, #8]
 8007830:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007834:	b29b      	uxth	r3, r3
 8007836:	f004 fb2f 	bl	800be98 <USB_WritePMA>
 800783a:	e1e0      	b.n	8007bfe <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007844:	b29b      	uxth	r3, r3
 8007846:	461a      	mov	r2, r3
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	781b      	ldrb	r3, [r3, #0]
 800784c:	00db      	lsls	r3, r3, #3
 800784e:	4413      	add	r3, r2
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	6812      	ldr	r2, [r2, #0]
 8007854:	4413      	add	r3, r2
 8007856:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007860:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	699a      	ldr	r2, [r3, #24]
 8007868:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800786c:	429a      	cmp	r2, r3
 800786e:	d307      	bcc.n	8007880 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	699a      	ldr	r2, [r3, #24]
 8007874:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007878:	1ad2      	subs	r2, r2, r3
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	619a      	str	r2, [r3, #24]
 800787e:	e002      	b.n	8007886 <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	2200      	movs	r2, #0
 8007884:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	699b      	ldr	r3, [r3, #24]
 800788a:	2b00      	cmp	r3, #0
 800788c:	f040 80c0 	bne.w	8007a10 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	785b      	ldrb	r3, [r3, #1]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d126      	bne.n	80078e6 <HAL_PCD_EP_DB_Transmit+0x47a>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078a6:	b29b      	uxth	r3, r3
 80078a8:	461a      	mov	r2, r3
 80078aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80078ac:	4413      	add	r3, r2
 80078ae:	67fb      	str	r3, [r7, #124]	; 0x7c
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	00da      	lsls	r2, r3, #3
 80078b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80078b8:	4413      	add	r3, r2
 80078ba:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80078be:	67bb      	str	r3, [r7, #120]	; 0x78
 80078c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078c2:	881b      	ldrh	r3, [r3, #0]
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078ce:	801a      	strh	r2, [r3, #0]
 80078d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078d2:	881b      	ldrh	r3, [r3, #0]
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80078de:	b29a      	uxth	r2, r3
 80078e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078e2:	801a      	strh	r2, [r3, #0]
 80078e4:	e01a      	b.n	800791c <HAL_PCD_EP_DB_Transmit+0x4b0>
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	785b      	ldrb	r3, [r3, #1]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d116      	bne.n	800791c <HAL_PCD_EP_DB_Transmit+0x4b0>
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	667b      	str	r3, [r7, #100]	; 0x64
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	461a      	mov	r2, r3
 8007900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007902:	4413      	add	r3, r2
 8007904:	667b      	str	r3, [r7, #100]	; 0x64
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	00da      	lsls	r2, r3, #3
 800790c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800790e:	4413      	add	r3, r2
 8007910:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007914:	663b      	str	r3, [r7, #96]	; 0x60
 8007916:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007918:	2200      	movs	r2, #0
 800791a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	677b      	str	r3, [r7, #116]	; 0x74
 8007922:	68bb      	ldr	r3, [r7, #8]
 8007924:	785b      	ldrb	r3, [r3, #1]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d12b      	bne.n	8007982 <HAL_PCD_EP_DB_Transmit+0x516>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007938:	b29b      	uxth	r3, r3
 800793a:	461a      	mov	r2, r3
 800793c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800793e:	4413      	add	r3, r2
 8007940:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	00da      	lsls	r2, r3, #3
 8007948:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800794a:	4413      	add	r3, r2
 800794c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007950:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007954:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007958:	881b      	ldrh	r3, [r3, #0]
 800795a:	b29b      	uxth	r3, r3
 800795c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007960:	b29a      	uxth	r2, r3
 8007962:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007966:	801a      	strh	r2, [r3, #0]
 8007968:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800796c:	881b      	ldrh	r3, [r3, #0]
 800796e:	b29b      	uxth	r3, r3
 8007970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007978:	b29a      	uxth	r2, r3
 800797a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800797e:	801a      	strh	r2, [r3, #0]
 8007980:	e017      	b.n	80079b2 <HAL_PCD_EP_DB_Transmit+0x546>
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	785b      	ldrb	r3, [r3, #1]
 8007986:	2b01      	cmp	r3, #1
 8007988:	d113      	bne.n	80079b2 <HAL_PCD_EP_DB_Transmit+0x546>
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007992:	b29b      	uxth	r3, r3
 8007994:	461a      	mov	r2, r3
 8007996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007998:	4413      	add	r3, r2
 800799a:	677b      	str	r3, [r7, #116]	; 0x74
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	00da      	lsls	r2, r3, #3
 80079a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079a4:	4413      	add	r3, r2
 80079a6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80079aa:	673b      	str	r3, [r7, #112]	; 0x70
 80079ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079ae:	2200      	movs	r2, #0
 80079b0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	4619      	mov	r1, r3
 80079b8:	68f8      	ldr	r0, [r7, #12]
 80079ba:	f006 f9d4 	bl	800dd66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80079be:	88fb      	ldrh	r3, [r7, #6]
 80079c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f040 811a 	bne.w	8007bfe <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	461a      	mov	r2, r3
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	4413      	add	r3, r2
 80079d8:	881b      	ldrh	r3, [r3, #0]
 80079da:	b29b      	uxth	r3, r3
 80079dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e4:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	461a      	mov	r2, r3
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	781b      	ldrb	r3, [r3, #0]
 80079f2:	009b      	lsls	r3, r3, #2
 80079f4:	441a      	add	r2, r3
 80079f6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 80079fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	8013      	strh	r3, [r2, #0]
 8007a0e:	e0f6      	b.n	8007bfe <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007a10:	88fb      	ldrh	r3, [r7, #6]
 8007a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d121      	bne.n	8007a5e <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	009b      	lsls	r3, r3, #2
 8007a26:	4413      	add	r3, r2
 8007a28:	881b      	ldrh	r3, [r3, #0]
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a34:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	781b      	ldrb	r3, [r3, #0]
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	441a      	add	r2, r3
 8007a46:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007a52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	f040 80ca 	bne.w	8007bfe <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	695a      	ldr	r2, [r3, #20]
 8007a6e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007a72:	441a      	add	r2, r3
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	69da      	ldr	r2, [r3, #28]
 8007a7c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007a80:	441a      	add	r2, r3
 8007a82:	68bb      	ldr	r3, [r7, #8]
 8007a84:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	6a1a      	ldr	r2, [r3, #32]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	429a      	cmp	r2, r3
 8007a90:	d30b      	bcc.n	8007aaa <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	6a1a      	ldr	r2, [r3, #32]
 8007a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007aa2:	1ad2      	subs	r2, r2, r3
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	621a      	str	r2, [r3, #32]
 8007aa8:	e017      	b.n	8007ada <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	6a1b      	ldr	r3, [r3, #32]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d108      	bne.n	8007ac4 <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8007ab2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007ab6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007ac2:	e00a      	b.n	8007ada <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	6a1b      	ldr	r3, [r3, #32]
 8007ac8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	2200      	movs	r2, #0
 8007ad0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007ad2:	68bb      	ldr	r3, [r7, #8]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	657b      	str	r3, [r7, #84]	; 0x54
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	785b      	ldrb	r3, [r3, #1]
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d165      	bne.n	8007bb4 <HAL_PCD_EP_DB_Transmit+0x748>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007af6:	b29b      	uxth	r3, r3
 8007af8:	461a      	mov	r2, r3
 8007afa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007afc:	4413      	add	r3, r2
 8007afe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b00:	68bb      	ldr	r3, [r7, #8]
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	00da      	lsls	r2, r3, #3
 8007b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b08:	4413      	add	r3, r2
 8007b0a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8007b10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b12:	881b      	ldrh	r3, [r3, #0]
 8007b14:	b29b      	uxth	r3, r3
 8007b16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b1e:	801a      	strh	r2, [r3, #0]
 8007b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b24:	2b3e      	cmp	r3, #62	; 0x3e
 8007b26:	d91d      	bls.n	8007b64 <HAL_PCD_EP_DB_Transmit+0x6f8>
 8007b28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b2c:	095b      	lsrs	r3, r3, #5
 8007b2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b34:	f003 031f 	and.w	r3, r3, #31
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d102      	bne.n	8007b42 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8007b3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b44:	881b      	ldrh	r3, [r3, #0]
 8007b46:	b29a      	uxth	r2, r3
 8007b48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b4a:	b29b      	uxth	r3, r3
 8007b4c:	029b      	lsls	r3, r3, #10
 8007b4e:	b29b      	uxth	r3, r3
 8007b50:	4313      	orrs	r3, r2
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b58:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b5c:	b29a      	uxth	r2, r3
 8007b5e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b60:	801a      	strh	r2, [r3, #0]
 8007b62:	e041      	b.n	8007be8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007b64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d10a      	bne.n	8007b82 <HAL_PCD_EP_DB_Transmit+0x716>
 8007b6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b6e:	881b      	ldrh	r3, [r3, #0]
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b7a:	b29a      	uxth	r2, r3
 8007b7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b7e:	801a      	strh	r2, [r3, #0]
 8007b80:	e032      	b.n	8007be8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007b82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b86:	085b      	lsrs	r3, r3, #1
 8007b88:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b8e:	f003 0301 	and.w	r3, r3, #1
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <HAL_PCD_EP_DB_Transmit+0x730>
 8007b96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b98:	3301      	adds	r3, #1
 8007b9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b9e:	881b      	ldrh	r3, [r3, #0]
 8007ba0:	b29a      	uxth	r2, r3
 8007ba2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	029b      	lsls	r3, r3, #10
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	4313      	orrs	r3, r2
 8007bac:	b29a      	uxth	r2, r3
 8007bae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007bb0:	801a      	strh	r2, [r3, #0]
 8007bb2:	e019      	b.n	8007be8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	785b      	ldrb	r3, [r3, #1]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d115      	bne.n	8007be8 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007bc4:	b29b      	uxth	r3, r3
 8007bc6:	461a      	mov	r2, r3
 8007bc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bca:	4413      	add	r3, r2
 8007bcc:	657b      	str	r3, [r7, #84]	; 0x54
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	00da      	lsls	r2, r3, #3
 8007bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bd6:	4413      	add	r3, r2
 8007bd8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007bdc:	653b      	str	r3, [r7, #80]	; 0x50
 8007bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007be2:	b29a      	uxth	r2, r3
 8007be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007be6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6818      	ldr	r0, [r3, #0]
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	6959      	ldr	r1, [r3, #20]
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	895a      	ldrh	r2, [r3, #10]
 8007bf4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	f004 f94d 	bl	800be98 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	461a      	mov	r2, r3
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	009b      	lsls	r3, r3, #2
 8007c0a:	4413      	add	r3, r2
 8007c0c:	881b      	ldrh	r3, [r3, #0]
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007c14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c18:	82bb      	strh	r3, [r7, #20]
 8007c1a:	8abb      	ldrh	r3, [r7, #20]
 8007c1c:	f083 0310 	eor.w	r3, r3, #16
 8007c20:	82bb      	strh	r3, [r7, #20]
 8007c22:	8abb      	ldrh	r3, [r7, #20]
 8007c24:	f083 0320 	eor.w	r3, r3, #32
 8007c28:	82bb      	strh	r3, [r7, #20]
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	461a      	mov	r2, r3
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	009b      	lsls	r3, r3, #2
 8007c36:	441a      	add	r2, r3
 8007c38:	8abb      	ldrh	r3, [r7, #20]
 8007c3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007c3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007c42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	3790      	adds	r7, #144	; 0x90
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}

08007c58 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b087      	sub	sp, #28
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	607b      	str	r3, [r7, #4]
 8007c62:	460b      	mov	r3, r1
 8007c64:	817b      	strh	r3, [r7, #10]
 8007c66:	4613      	mov	r3, r2
 8007c68:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007c6a:	897b      	ldrh	r3, [r7, #10]
 8007c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c70:	b29b      	uxth	r3, r3
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00b      	beq.n	8007c8e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007c76:	897b      	ldrh	r3, [r7, #10]
 8007c78:	f003 0207 	and.w	r2, r3, #7
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	009b      	lsls	r3, r3, #2
 8007c80:	4413      	add	r3, r2
 8007c82:	00db      	lsls	r3, r3, #3
 8007c84:	3310      	adds	r3, #16
 8007c86:	68fa      	ldr	r2, [r7, #12]
 8007c88:	4413      	add	r3, r2
 8007c8a:	617b      	str	r3, [r7, #20]
 8007c8c:	e009      	b.n	8007ca2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007c8e:	897a      	ldrh	r2, [r7, #10]
 8007c90:	4613      	mov	r3, r2
 8007c92:	009b      	lsls	r3, r3, #2
 8007c94:	4413      	add	r3, r2
 8007c96:	00db      	lsls	r3, r3, #3
 8007c98:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	4413      	add	r3, r2
 8007ca0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007ca2:	893b      	ldrh	r3, [r7, #8]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d107      	bne.n	8007cb8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	2200      	movs	r2, #0
 8007cac:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	b29a      	uxth	r2, r3
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	80da      	strh	r2, [r3, #6]
 8007cb6:	e00b      	b.n	8007cd0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	0c1b      	lsrs	r3, r3, #16
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	371c      	adds	r7, #28
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cdc:	4770      	bx	lr

08007cde <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007cde:	b480      	push	{r7}
 8007ce0:	b085      	sub	sp, #20
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2201      	movs	r2, #1
 8007cf0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	f043 0301 	orr.w	r3, r3, #1
 8007d08:	b29a      	uxth	r2, r3
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007d16:	b29b      	uxth	r3, r3
 8007d18:	f043 0302 	orr.w	r3, r3, #2
 8007d1c:	b29a      	uxth	r2, r3
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
	...

08007d34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d141      	bne.n	8007dc6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007d42:	4b4b      	ldr	r3, [pc, #300]	; (8007e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d4e:	d131      	bne.n	8007db4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d50:	4b47      	ldr	r3, [pc, #284]	; (8007e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d56:	4a46      	ldr	r2, [pc, #280]	; (8007e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d60:	4b43      	ldr	r3, [pc, #268]	; (8007e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007d68:	4a41      	ldr	r2, [pc, #260]	; (8007e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d6e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007d70:	4b40      	ldr	r3, [pc, #256]	; (8007e74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2232      	movs	r2, #50	; 0x32
 8007d76:	fb02 f303 	mul.w	r3, r2, r3
 8007d7a:	4a3f      	ldr	r2, [pc, #252]	; (8007e78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d80:	0c9b      	lsrs	r3, r3, #18
 8007d82:	3301      	adds	r3, #1
 8007d84:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d86:	e002      	b.n	8007d8e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d8e:	4b38      	ldr	r3, [pc, #224]	; (8007e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d90:	695b      	ldr	r3, [r3, #20]
 8007d92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d9a:	d102      	bne.n	8007da2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d1f2      	bne.n	8007d88 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007da2:	4b33      	ldr	r3, [pc, #204]	; (8007e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dae:	d158      	bne.n	8007e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007db0:	2303      	movs	r3, #3
 8007db2:	e057      	b.n	8007e64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007db4:	4b2e      	ldr	r3, [pc, #184]	; (8007e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dba:	4a2d      	ldr	r2, [pc, #180]	; (8007e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007dc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007dc4:	e04d      	b.n	8007e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dcc:	d141      	bne.n	8007e52 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007dce:	4b28      	ldr	r3, [pc, #160]	; (8007e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dda:	d131      	bne.n	8007e40 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007ddc:	4b24      	ldr	r3, [pc, #144]	; (8007e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007de2:	4a23      	ldr	r2, [pc, #140]	; (8007e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007de8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007dec:	4b20      	ldr	r3, [pc, #128]	; (8007e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007df4:	4a1e      	ldr	r2, [pc, #120]	; (8007e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007dfa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007dfc:	4b1d      	ldr	r3, [pc, #116]	; (8007e74 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2232      	movs	r2, #50	; 0x32
 8007e02:	fb02 f303 	mul.w	r3, r2, r3
 8007e06:	4a1c      	ldr	r2, [pc, #112]	; (8007e78 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007e08:	fba2 2303 	umull	r2, r3, r2, r3
 8007e0c:	0c9b      	lsrs	r3, r3, #18
 8007e0e:	3301      	adds	r3, #1
 8007e10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e12:	e002      	b.n	8007e1a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	3b01      	subs	r3, #1
 8007e18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e1a:	4b15      	ldr	r3, [pc, #84]	; (8007e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e26:	d102      	bne.n	8007e2e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1f2      	bne.n	8007e14 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007e2e:	4b10      	ldr	r3, [pc, #64]	; (8007e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e3a:	d112      	bne.n	8007e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e011      	b.n	8007e64 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e40:	4b0b      	ldr	r3, [pc, #44]	; (8007e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e46:	4a0a      	ldr	r2, [pc, #40]	; (8007e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007e50:	e007      	b.n	8007e62 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007e52:	4b07      	ldr	r3, [pc, #28]	; (8007e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007e5a:	4a05      	ldr	r2, [pc, #20]	; (8007e70 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007e5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007e60:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007e62:	2300      	movs	r3, #0
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr
 8007e70:	40007000 	.word	0x40007000
 8007e74:	20000010 	.word	0x20000010
 8007e78:	431bde83 	.word	0x431bde83

08007e7c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007e80:	4b05      	ldr	r3, [pc, #20]	; (8007e98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007e82:	689b      	ldr	r3, [r3, #8]
 8007e84:	4a04      	ldr	r2, [pc, #16]	; (8007e98 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007e86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e8a:	6093      	str	r3, [r2, #8]
}
 8007e8c:	bf00      	nop
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	40007000 	.word	0x40007000

08007e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b088      	sub	sp, #32
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d101      	bne.n	8007eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e2fe      	b.n	80084ac <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 0301 	and.w	r3, r3, #1
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d075      	beq.n	8007fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007eba:	4b97      	ldr	r3, [pc, #604]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	f003 030c 	and.w	r3, r3, #12
 8007ec2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ec4:	4b94      	ldr	r3, [pc, #592]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	f003 0303 	and.w	r3, r3, #3
 8007ecc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	2b0c      	cmp	r3, #12
 8007ed2:	d102      	bne.n	8007eda <HAL_RCC_OscConfig+0x3e>
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	2b03      	cmp	r3, #3
 8007ed8:	d002      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x44>
 8007eda:	69bb      	ldr	r3, [r7, #24]
 8007edc:	2b08      	cmp	r3, #8
 8007ede:	d10b      	bne.n	8007ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ee0:	4b8d      	ldr	r3, [pc, #564]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d05b      	beq.n	8007fa4 <HAL_RCC_OscConfig+0x108>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	685b      	ldr	r3, [r3, #4]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d157      	bne.n	8007fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e2d9      	b.n	80084ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f00:	d106      	bne.n	8007f10 <HAL_RCC_OscConfig+0x74>
 8007f02:	4b85      	ldr	r3, [pc, #532]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	4a84      	ldr	r2, [pc, #528]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8007f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f0c:	6013      	str	r3, [r2, #0]
 8007f0e:	e01d      	b.n	8007f4c <HAL_RCC_OscConfig+0xb0>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f18:	d10c      	bne.n	8007f34 <HAL_RCC_OscConfig+0x98>
 8007f1a:	4b7f      	ldr	r3, [pc, #508]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a7e      	ldr	r2, [pc, #504]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8007f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f24:	6013      	str	r3, [r2, #0]
 8007f26:	4b7c      	ldr	r3, [pc, #496]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a7b      	ldr	r2, [pc, #492]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8007f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f30:	6013      	str	r3, [r2, #0]
 8007f32:	e00b      	b.n	8007f4c <HAL_RCC_OscConfig+0xb0>
 8007f34:	4b78      	ldr	r3, [pc, #480]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a77      	ldr	r2, [pc, #476]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8007f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f3e:	6013      	str	r3, [r2, #0]
 8007f40:	4b75      	ldr	r3, [pc, #468]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	4a74      	ldr	r2, [pc, #464]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8007f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d013      	beq.n	8007f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f54:	f7fa fd88 	bl	8002a68 <HAL_GetTick>
 8007f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f5a:	e008      	b.n	8007f6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f5c:	f7fa fd84 	bl	8002a68 <HAL_GetTick>
 8007f60:	4602      	mov	r2, r0
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	1ad3      	subs	r3, r2, r3
 8007f66:	2b64      	cmp	r3, #100	; 0x64
 8007f68:	d901      	bls.n	8007f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007f6a:	2303      	movs	r3, #3
 8007f6c:	e29e      	b.n	80084ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f6e:	4b6a      	ldr	r3, [pc, #424]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d0f0      	beq.n	8007f5c <HAL_RCC_OscConfig+0xc0>
 8007f7a:	e014      	b.n	8007fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f7c:	f7fa fd74 	bl	8002a68 <HAL_GetTick>
 8007f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f82:	e008      	b.n	8007f96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f84:	f7fa fd70 	bl	8002a68 <HAL_GetTick>
 8007f88:	4602      	mov	r2, r0
 8007f8a:	693b      	ldr	r3, [r7, #16]
 8007f8c:	1ad3      	subs	r3, r2, r3
 8007f8e:	2b64      	cmp	r3, #100	; 0x64
 8007f90:	d901      	bls.n	8007f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f92:	2303      	movs	r3, #3
 8007f94:	e28a      	b.n	80084ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f96:	4b60      	ldr	r3, [pc, #384]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d1f0      	bne.n	8007f84 <HAL_RCC_OscConfig+0xe8>
 8007fa2:	e000      	b.n	8007fa6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f003 0302 	and.w	r3, r3, #2
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d075      	beq.n	800809e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007fb2:	4b59      	ldr	r3, [pc, #356]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f003 030c 	and.w	r3, r3, #12
 8007fba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007fbc:	4b56      	ldr	r3, [pc, #344]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8007fbe:	68db      	ldr	r3, [r3, #12]
 8007fc0:	f003 0303 	and.w	r3, r3, #3
 8007fc4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	2b0c      	cmp	r3, #12
 8007fca:	d102      	bne.n	8007fd2 <HAL_RCC_OscConfig+0x136>
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	2b02      	cmp	r3, #2
 8007fd0:	d002      	beq.n	8007fd8 <HAL_RCC_OscConfig+0x13c>
 8007fd2:	69bb      	ldr	r3, [r7, #24]
 8007fd4:	2b04      	cmp	r3, #4
 8007fd6:	d11f      	bne.n	8008018 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fd8:	4b4f      	ldr	r3, [pc, #316]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d005      	beq.n	8007ff0 <HAL_RCC_OscConfig+0x154>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	68db      	ldr	r3, [r3, #12]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d101      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007fec:	2301      	movs	r3, #1
 8007fee:	e25d      	b.n	80084ac <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ff0:	4b49      	ldr	r3, [pc, #292]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	061b      	lsls	r3, r3, #24
 8007ffe:	4946      	ldr	r1, [pc, #280]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8008000:	4313      	orrs	r3, r2
 8008002:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008004:	4b45      	ldr	r3, [pc, #276]	; (800811c <HAL_RCC_OscConfig+0x280>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4618      	mov	r0, r3
 800800a:	f7fa fce1 	bl	80029d0 <HAL_InitTick>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d043      	beq.n	800809c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e249      	b.n	80084ac <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d023      	beq.n	8008068 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008020:	4b3d      	ldr	r3, [pc, #244]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a3c      	ldr	r2, [pc, #240]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8008026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800802a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800802c:	f7fa fd1c 	bl	8002a68 <HAL_GetTick>
 8008030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008032:	e008      	b.n	8008046 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008034:	f7fa fd18 	bl	8002a68 <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b02      	cmp	r3, #2
 8008040:	d901      	bls.n	8008046 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e232      	b.n	80084ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008046:	4b34      	ldr	r3, [pc, #208]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800804e:	2b00      	cmp	r3, #0
 8008050:	d0f0      	beq.n	8008034 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008052:	4b31      	ldr	r3, [pc, #196]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8008054:	685b      	ldr	r3, [r3, #4]
 8008056:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	061b      	lsls	r3, r3, #24
 8008060:	492d      	ldr	r1, [pc, #180]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8008062:	4313      	orrs	r3, r2
 8008064:	604b      	str	r3, [r1, #4]
 8008066:	e01a      	b.n	800809e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008068:	4b2b      	ldr	r3, [pc, #172]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	4a2a      	ldr	r2, [pc, #168]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 800806e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008074:	f7fa fcf8 	bl	8002a68 <HAL_GetTick>
 8008078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800807a:	e008      	b.n	800808e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800807c:	f7fa fcf4 	bl	8002a68 <HAL_GetTick>
 8008080:	4602      	mov	r2, r0
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	1ad3      	subs	r3, r2, r3
 8008086:	2b02      	cmp	r3, #2
 8008088:	d901      	bls.n	800808e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e20e      	b.n	80084ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800808e:	4b22      	ldr	r3, [pc, #136]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008096:	2b00      	cmp	r3, #0
 8008098:	d1f0      	bne.n	800807c <HAL_RCC_OscConfig+0x1e0>
 800809a:	e000      	b.n	800809e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800809c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0308 	and.w	r3, r3, #8
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d041      	beq.n	800812e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	695b      	ldr	r3, [r3, #20]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d01c      	beq.n	80080ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080b2:	4b19      	ldr	r3, [pc, #100]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 80080b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080b8:	4a17      	ldr	r2, [pc, #92]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 80080ba:	f043 0301 	orr.w	r3, r3, #1
 80080be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080c2:	f7fa fcd1 	bl	8002a68 <HAL_GetTick>
 80080c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080c8:	e008      	b.n	80080dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080ca:	f7fa fccd 	bl	8002a68 <HAL_GetTick>
 80080ce:	4602      	mov	r2, r0
 80080d0:	693b      	ldr	r3, [r7, #16]
 80080d2:	1ad3      	subs	r3, r2, r3
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	d901      	bls.n	80080dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	e1e7      	b.n	80084ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80080dc:	4b0e      	ldr	r3, [pc, #56]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 80080de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080e2:	f003 0302 	and.w	r3, r3, #2
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d0ef      	beq.n	80080ca <HAL_RCC_OscConfig+0x22e>
 80080ea:	e020      	b.n	800812e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080ec:	4b0a      	ldr	r3, [pc, #40]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 80080ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080f2:	4a09      	ldr	r2, [pc, #36]	; (8008118 <HAL_RCC_OscConfig+0x27c>)
 80080f4:	f023 0301 	bic.w	r3, r3, #1
 80080f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080fc:	f7fa fcb4 	bl	8002a68 <HAL_GetTick>
 8008100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008102:	e00d      	b.n	8008120 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008104:	f7fa fcb0 	bl	8002a68 <HAL_GetTick>
 8008108:	4602      	mov	r2, r0
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	1ad3      	subs	r3, r2, r3
 800810e:	2b02      	cmp	r3, #2
 8008110:	d906      	bls.n	8008120 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008112:	2303      	movs	r3, #3
 8008114:	e1ca      	b.n	80084ac <HAL_RCC_OscConfig+0x610>
 8008116:	bf00      	nop
 8008118:	40021000 	.word	0x40021000
 800811c:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008120:	4b8c      	ldr	r3, [pc, #560]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 8008122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	2b00      	cmp	r3, #0
 800812c:	d1ea      	bne.n	8008104 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0304 	and.w	r3, r3, #4
 8008136:	2b00      	cmp	r3, #0
 8008138:	f000 80a6 	beq.w	8008288 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800813c:	2300      	movs	r3, #0
 800813e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008140:	4b84      	ldr	r3, [pc, #528]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 8008142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008148:	2b00      	cmp	r3, #0
 800814a:	d101      	bne.n	8008150 <HAL_RCC_OscConfig+0x2b4>
 800814c:	2301      	movs	r3, #1
 800814e:	e000      	b.n	8008152 <HAL_RCC_OscConfig+0x2b6>
 8008150:	2300      	movs	r3, #0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d00d      	beq.n	8008172 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008156:	4b7f      	ldr	r3, [pc, #508]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 8008158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800815a:	4a7e      	ldr	r2, [pc, #504]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 800815c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008160:	6593      	str	r3, [r2, #88]	; 0x58
 8008162:	4b7c      	ldr	r3, [pc, #496]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 8008164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800816a:	60fb      	str	r3, [r7, #12]
 800816c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800816e:	2301      	movs	r3, #1
 8008170:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008172:	4b79      	ldr	r3, [pc, #484]	; (8008358 <HAL_RCC_OscConfig+0x4bc>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800817a:	2b00      	cmp	r3, #0
 800817c:	d118      	bne.n	80081b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800817e:	4b76      	ldr	r3, [pc, #472]	; (8008358 <HAL_RCC_OscConfig+0x4bc>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a75      	ldr	r2, [pc, #468]	; (8008358 <HAL_RCC_OscConfig+0x4bc>)
 8008184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800818a:	f7fa fc6d 	bl	8002a68 <HAL_GetTick>
 800818e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008190:	e008      	b.n	80081a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008192:	f7fa fc69 	bl	8002a68 <HAL_GetTick>
 8008196:	4602      	mov	r2, r0
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	1ad3      	subs	r3, r2, r3
 800819c:	2b02      	cmp	r3, #2
 800819e:	d901      	bls.n	80081a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80081a0:	2303      	movs	r3, #3
 80081a2:	e183      	b.n	80084ac <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081a4:	4b6c      	ldr	r3, [pc, #432]	; (8008358 <HAL_RCC_OscConfig+0x4bc>)
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d0f0      	beq.n	8008192 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	2b01      	cmp	r3, #1
 80081b6:	d108      	bne.n	80081ca <HAL_RCC_OscConfig+0x32e>
 80081b8:	4b66      	ldr	r3, [pc, #408]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 80081ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081be:	4a65      	ldr	r2, [pc, #404]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 80081c0:	f043 0301 	orr.w	r3, r3, #1
 80081c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80081c8:	e024      	b.n	8008214 <HAL_RCC_OscConfig+0x378>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	2b05      	cmp	r3, #5
 80081d0:	d110      	bne.n	80081f4 <HAL_RCC_OscConfig+0x358>
 80081d2:	4b60      	ldr	r3, [pc, #384]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 80081d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081d8:	4a5e      	ldr	r2, [pc, #376]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 80081da:	f043 0304 	orr.w	r3, r3, #4
 80081de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80081e2:	4b5c      	ldr	r3, [pc, #368]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 80081e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081e8:	4a5a      	ldr	r2, [pc, #360]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 80081ea:	f043 0301 	orr.w	r3, r3, #1
 80081ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80081f2:	e00f      	b.n	8008214 <HAL_RCC_OscConfig+0x378>
 80081f4:	4b57      	ldr	r3, [pc, #348]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 80081f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081fa:	4a56      	ldr	r2, [pc, #344]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 80081fc:	f023 0301 	bic.w	r3, r3, #1
 8008200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008204:	4b53      	ldr	r3, [pc, #332]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 8008206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800820a:	4a52      	ldr	r2, [pc, #328]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 800820c:	f023 0304 	bic.w	r3, r3, #4
 8008210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d016      	beq.n	800824a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800821c:	f7fa fc24 	bl	8002a68 <HAL_GetTick>
 8008220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008222:	e00a      	b.n	800823a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008224:	f7fa fc20 	bl	8002a68 <HAL_GetTick>
 8008228:	4602      	mov	r2, r0
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	1ad3      	subs	r3, r2, r3
 800822e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008232:	4293      	cmp	r3, r2
 8008234:	d901      	bls.n	800823a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e138      	b.n	80084ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800823a:	4b46      	ldr	r3, [pc, #280]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 800823c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008240:	f003 0302 	and.w	r3, r3, #2
 8008244:	2b00      	cmp	r3, #0
 8008246:	d0ed      	beq.n	8008224 <HAL_RCC_OscConfig+0x388>
 8008248:	e015      	b.n	8008276 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800824a:	f7fa fc0d 	bl	8002a68 <HAL_GetTick>
 800824e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008250:	e00a      	b.n	8008268 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008252:	f7fa fc09 	bl	8002a68 <HAL_GetTick>
 8008256:	4602      	mov	r2, r0
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008260:	4293      	cmp	r3, r2
 8008262:	d901      	bls.n	8008268 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	e121      	b.n	80084ac <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008268:	4b3a      	ldr	r3, [pc, #232]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 800826a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800826e:	f003 0302 	and.w	r3, r3, #2
 8008272:	2b00      	cmp	r3, #0
 8008274:	d1ed      	bne.n	8008252 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008276:	7ffb      	ldrb	r3, [r7, #31]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d105      	bne.n	8008288 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800827c:	4b35      	ldr	r3, [pc, #212]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 800827e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008280:	4a34      	ldr	r2, [pc, #208]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 8008282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008286:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f003 0320 	and.w	r3, r3, #32
 8008290:	2b00      	cmp	r3, #0
 8008292:	d03c      	beq.n	800830e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	2b00      	cmp	r3, #0
 800829a:	d01c      	beq.n	80082d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800829c:	4b2d      	ldr	r3, [pc, #180]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 800829e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082a2:	4a2c      	ldr	r2, [pc, #176]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 80082a4:	f043 0301 	orr.w	r3, r3, #1
 80082a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082ac:	f7fa fbdc 	bl	8002a68 <HAL_GetTick>
 80082b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80082b2:	e008      	b.n	80082c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082b4:	f7fa fbd8 	bl	8002a68 <HAL_GetTick>
 80082b8:	4602      	mov	r2, r0
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	1ad3      	subs	r3, r2, r3
 80082be:	2b02      	cmp	r3, #2
 80082c0:	d901      	bls.n	80082c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80082c2:	2303      	movs	r3, #3
 80082c4:	e0f2      	b.n	80084ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80082c6:	4b23      	ldr	r3, [pc, #140]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 80082c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082cc:	f003 0302 	and.w	r3, r3, #2
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d0ef      	beq.n	80082b4 <HAL_RCC_OscConfig+0x418>
 80082d4:	e01b      	b.n	800830e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80082d6:	4b1f      	ldr	r3, [pc, #124]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 80082d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082dc:	4a1d      	ldr	r2, [pc, #116]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 80082de:	f023 0301 	bic.w	r3, r3, #1
 80082e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80082e6:	f7fa fbbf 	bl	8002a68 <HAL_GetTick>
 80082ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80082ec:	e008      	b.n	8008300 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80082ee:	f7fa fbbb 	bl	8002a68 <HAL_GetTick>
 80082f2:	4602      	mov	r2, r0
 80082f4:	693b      	ldr	r3, [r7, #16]
 80082f6:	1ad3      	subs	r3, r2, r3
 80082f8:	2b02      	cmp	r3, #2
 80082fa:	d901      	bls.n	8008300 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80082fc:	2303      	movs	r3, #3
 80082fe:	e0d5      	b.n	80084ac <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008300:	4b14      	ldr	r3, [pc, #80]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 8008302:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008306:	f003 0302 	and.w	r3, r3, #2
 800830a:	2b00      	cmp	r3, #0
 800830c:	d1ef      	bne.n	80082ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	69db      	ldr	r3, [r3, #28]
 8008312:	2b00      	cmp	r3, #0
 8008314:	f000 80c9 	beq.w	80084aa <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008318:	4b0e      	ldr	r3, [pc, #56]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f003 030c 	and.w	r3, r3, #12
 8008320:	2b0c      	cmp	r3, #12
 8008322:	f000 8083 	beq.w	800842c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	69db      	ldr	r3, [r3, #28]
 800832a:	2b02      	cmp	r3, #2
 800832c:	d15e      	bne.n	80083ec <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800832e:	4b09      	ldr	r3, [pc, #36]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a08      	ldr	r2, [pc, #32]	; (8008354 <HAL_RCC_OscConfig+0x4b8>)
 8008334:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800833a:	f7fa fb95 	bl	8002a68 <HAL_GetTick>
 800833e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008340:	e00c      	b.n	800835c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008342:	f7fa fb91 	bl	8002a68 <HAL_GetTick>
 8008346:	4602      	mov	r2, r0
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	1ad3      	subs	r3, r2, r3
 800834c:	2b02      	cmp	r3, #2
 800834e:	d905      	bls.n	800835c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8008350:	2303      	movs	r3, #3
 8008352:	e0ab      	b.n	80084ac <HAL_RCC_OscConfig+0x610>
 8008354:	40021000 	.word	0x40021000
 8008358:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800835c:	4b55      	ldr	r3, [pc, #340]	; (80084b4 <HAL_RCC_OscConfig+0x618>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d1ec      	bne.n	8008342 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008368:	4b52      	ldr	r3, [pc, #328]	; (80084b4 <HAL_RCC_OscConfig+0x618>)
 800836a:	68da      	ldr	r2, [r3, #12]
 800836c:	4b52      	ldr	r3, [pc, #328]	; (80084b8 <HAL_RCC_OscConfig+0x61c>)
 800836e:	4013      	ands	r3, r2
 8008370:	687a      	ldr	r2, [r7, #4]
 8008372:	6a11      	ldr	r1, [r2, #32]
 8008374:	687a      	ldr	r2, [r7, #4]
 8008376:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008378:	3a01      	subs	r2, #1
 800837a:	0112      	lsls	r2, r2, #4
 800837c:	4311      	orrs	r1, r2
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008382:	0212      	lsls	r2, r2, #8
 8008384:	4311      	orrs	r1, r2
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800838a:	0852      	lsrs	r2, r2, #1
 800838c:	3a01      	subs	r2, #1
 800838e:	0552      	lsls	r2, r2, #21
 8008390:	4311      	orrs	r1, r2
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008396:	0852      	lsrs	r2, r2, #1
 8008398:	3a01      	subs	r2, #1
 800839a:	0652      	lsls	r2, r2, #25
 800839c:	4311      	orrs	r1, r2
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80083a2:	06d2      	lsls	r2, r2, #27
 80083a4:	430a      	orrs	r2, r1
 80083a6:	4943      	ldr	r1, [pc, #268]	; (80084b4 <HAL_RCC_OscConfig+0x618>)
 80083a8:	4313      	orrs	r3, r2
 80083aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80083ac:	4b41      	ldr	r3, [pc, #260]	; (80084b4 <HAL_RCC_OscConfig+0x618>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a40      	ldr	r2, [pc, #256]	; (80084b4 <HAL_RCC_OscConfig+0x618>)
 80083b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80083b8:	4b3e      	ldr	r3, [pc, #248]	; (80084b4 <HAL_RCC_OscConfig+0x618>)
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	4a3d      	ldr	r2, [pc, #244]	; (80084b4 <HAL_RCC_OscConfig+0x618>)
 80083be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80083c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083c4:	f7fa fb50 	bl	8002a68 <HAL_GetTick>
 80083c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083ca:	e008      	b.n	80083de <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083cc:	f7fa fb4c 	bl	8002a68 <HAL_GetTick>
 80083d0:	4602      	mov	r2, r0
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	1ad3      	subs	r3, r2, r3
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d901      	bls.n	80083de <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e066      	b.n	80084ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80083de:	4b35      	ldr	r3, [pc, #212]	; (80084b4 <HAL_RCC_OscConfig+0x618>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d0f0      	beq.n	80083cc <HAL_RCC_OscConfig+0x530>
 80083ea:	e05e      	b.n	80084aa <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083ec:	4b31      	ldr	r3, [pc, #196]	; (80084b4 <HAL_RCC_OscConfig+0x618>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	4a30      	ldr	r2, [pc, #192]	; (80084b4 <HAL_RCC_OscConfig+0x618>)
 80083f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083f8:	f7fa fb36 	bl	8002a68 <HAL_GetTick>
 80083fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083fe:	e008      	b.n	8008412 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008400:	f7fa fb32 	bl	8002a68 <HAL_GetTick>
 8008404:	4602      	mov	r2, r0
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	2b02      	cmp	r3, #2
 800840c:	d901      	bls.n	8008412 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800840e:	2303      	movs	r3, #3
 8008410:	e04c      	b.n	80084ac <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008412:	4b28      	ldr	r3, [pc, #160]	; (80084b4 <HAL_RCC_OscConfig+0x618>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800841a:	2b00      	cmp	r3, #0
 800841c:	d1f0      	bne.n	8008400 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800841e:	4b25      	ldr	r3, [pc, #148]	; (80084b4 <HAL_RCC_OscConfig+0x618>)
 8008420:	68da      	ldr	r2, [r3, #12]
 8008422:	4924      	ldr	r1, [pc, #144]	; (80084b4 <HAL_RCC_OscConfig+0x618>)
 8008424:	4b25      	ldr	r3, [pc, #148]	; (80084bc <HAL_RCC_OscConfig+0x620>)
 8008426:	4013      	ands	r3, r2
 8008428:	60cb      	str	r3, [r1, #12]
 800842a:	e03e      	b.n	80084aa <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	2b01      	cmp	r3, #1
 8008432:	d101      	bne.n	8008438 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e039      	b.n	80084ac <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008438:	4b1e      	ldr	r3, [pc, #120]	; (80084b4 <HAL_RCC_OscConfig+0x618>)
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800843e:	697b      	ldr	r3, [r7, #20]
 8008440:	f003 0203 	and.w	r2, r3, #3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a1b      	ldr	r3, [r3, #32]
 8008448:	429a      	cmp	r2, r3
 800844a:	d12c      	bne.n	80084a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008456:	3b01      	subs	r3, #1
 8008458:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800845a:	429a      	cmp	r2, r3
 800845c:	d123      	bne.n	80084a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008468:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800846a:	429a      	cmp	r2, r3
 800846c:	d11b      	bne.n	80084a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008478:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800847a:	429a      	cmp	r2, r3
 800847c:	d113      	bne.n	80084a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008488:	085b      	lsrs	r3, r3, #1
 800848a:	3b01      	subs	r3, #1
 800848c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800848e:	429a      	cmp	r2, r3
 8008490:	d109      	bne.n	80084a6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008492:	697b      	ldr	r3, [r7, #20]
 8008494:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800849c:	085b      	lsrs	r3, r3, #1
 800849e:	3b01      	subs	r3, #1
 80084a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d001      	beq.n	80084aa <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e000      	b.n	80084ac <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	3720      	adds	r7, #32
 80084b0:	46bd      	mov	sp, r7
 80084b2:	bd80      	pop	{r7, pc}
 80084b4:	40021000 	.word	0x40021000
 80084b8:	019f800c 	.word	0x019f800c
 80084bc:	feeefffc 	.word	0xfeeefffc

080084c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80084ca:	2300      	movs	r3, #0
 80084cc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e11e      	b.n	8008716 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80084d8:	4b91      	ldr	r3, [pc, #580]	; (8008720 <HAL_RCC_ClockConfig+0x260>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	f003 030f 	and.w	r3, r3, #15
 80084e0:	683a      	ldr	r2, [r7, #0]
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d910      	bls.n	8008508 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084e6:	4b8e      	ldr	r3, [pc, #568]	; (8008720 <HAL_RCC_ClockConfig+0x260>)
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f023 020f 	bic.w	r2, r3, #15
 80084ee:	498c      	ldr	r1, [pc, #560]	; (8008720 <HAL_RCC_ClockConfig+0x260>)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	4313      	orrs	r3, r2
 80084f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084f6:	4b8a      	ldr	r3, [pc, #552]	; (8008720 <HAL_RCC_ClockConfig+0x260>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	f003 030f 	and.w	r3, r3, #15
 80084fe:	683a      	ldr	r2, [r7, #0]
 8008500:	429a      	cmp	r2, r3
 8008502:	d001      	beq.n	8008508 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008504:	2301      	movs	r3, #1
 8008506:	e106      	b.n	8008716 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0301 	and.w	r3, r3, #1
 8008510:	2b00      	cmp	r3, #0
 8008512:	d073      	beq.n	80085fc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	685b      	ldr	r3, [r3, #4]
 8008518:	2b03      	cmp	r3, #3
 800851a:	d129      	bne.n	8008570 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800851c:	4b81      	ldr	r3, [pc, #516]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d101      	bne.n	800852c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e0f4      	b.n	8008716 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800852c:	f000 f972 	bl	8008814 <RCC_GetSysClockFreqFromPLLSource>
 8008530:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	4a7c      	ldr	r2, [pc, #496]	; (8008728 <HAL_RCC_ClockConfig+0x268>)
 8008536:	4293      	cmp	r3, r2
 8008538:	d93f      	bls.n	80085ba <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800853a:	4b7a      	ldr	r3, [pc, #488]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 800853c:	689b      	ldr	r3, [r3, #8]
 800853e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d009      	beq.n	800855a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800854e:	2b00      	cmp	r3, #0
 8008550:	d033      	beq.n	80085ba <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008556:	2b00      	cmp	r3, #0
 8008558:	d12f      	bne.n	80085ba <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800855a:	4b72      	ldr	r3, [pc, #456]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 800855c:	689b      	ldr	r3, [r3, #8]
 800855e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008562:	4a70      	ldr	r2, [pc, #448]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 8008564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008568:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800856a:	2380      	movs	r3, #128	; 0x80
 800856c:	617b      	str	r3, [r7, #20]
 800856e:	e024      	b.n	80085ba <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	2b02      	cmp	r3, #2
 8008576:	d107      	bne.n	8008588 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008578:	4b6a      	ldr	r3, [pc, #424]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008580:	2b00      	cmp	r3, #0
 8008582:	d109      	bne.n	8008598 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008584:	2301      	movs	r3, #1
 8008586:	e0c6      	b.n	8008716 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008588:	4b66      	ldr	r3, [pc, #408]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008590:	2b00      	cmp	r3, #0
 8008592:	d101      	bne.n	8008598 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008594:	2301      	movs	r3, #1
 8008596:	e0be      	b.n	8008716 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008598:	f000 f8ce 	bl	8008738 <HAL_RCC_GetSysClockFreq>
 800859c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	4a61      	ldr	r2, [pc, #388]	; (8008728 <HAL_RCC_ClockConfig+0x268>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d909      	bls.n	80085ba <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80085a6:	4b5f      	ldr	r3, [pc, #380]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085ae:	4a5d      	ldr	r2, [pc, #372]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 80085b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085b4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80085b6:	2380      	movs	r3, #128	; 0x80
 80085b8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80085ba:	4b5a      	ldr	r3, [pc, #360]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	f023 0203 	bic.w	r2, r3, #3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	4957      	ldr	r1, [pc, #348]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 80085c8:	4313      	orrs	r3, r2
 80085ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085cc:	f7fa fa4c 	bl	8002a68 <HAL_GetTick>
 80085d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085d2:	e00a      	b.n	80085ea <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085d4:	f7fa fa48 	bl	8002a68 <HAL_GetTick>
 80085d8:	4602      	mov	r2, r0
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	f241 3288 	movw	r2, #5000	; 0x1388
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d901      	bls.n	80085ea <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e095      	b.n	8008716 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085ea:	4b4e      	ldr	r3, [pc, #312]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f003 020c 	and.w	r2, r3, #12
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d1eb      	bne.n	80085d4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f003 0302 	and.w	r3, r3, #2
 8008604:	2b00      	cmp	r3, #0
 8008606:	d023      	beq.n	8008650 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0304 	and.w	r3, r3, #4
 8008610:	2b00      	cmp	r3, #0
 8008612:	d005      	beq.n	8008620 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008614:	4b43      	ldr	r3, [pc, #268]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	4a42      	ldr	r2, [pc, #264]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 800861a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800861e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0308 	and.w	r3, r3, #8
 8008628:	2b00      	cmp	r3, #0
 800862a:	d007      	beq.n	800863c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800862c:	4b3d      	ldr	r3, [pc, #244]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 800862e:	689b      	ldr	r3, [r3, #8]
 8008630:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008634:	4a3b      	ldr	r2, [pc, #236]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 8008636:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800863a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800863c:	4b39      	ldr	r3, [pc, #228]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 800863e:	689b      	ldr	r3, [r3, #8]
 8008640:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	4936      	ldr	r1, [pc, #216]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 800864a:	4313      	orrs	r3, r2
 800864c:	608b      	str	r3, [r1, #8]
 800864e:	e008      	b.n	8008662 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008650:	697b      	ldr	r3, [r7, #20]
 8008652:	2b80      	cmp	r3, #128	; 0x80
 8008654:	d105      	bne.n	8008662 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008656:	4b33      	ldr	r3, [pc, #204]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	4a32      	ldr	r2, [pc, #200]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 800865c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008660:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008662:	4b2f      	ldr	r3, [pc, #188]	; (8008720 <HAL_RCC_ClockConfig+0x260>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f003 030f 	and.w	r3, r3, #15
 800866a:	683a      	ldr	r2, [r7, #0]
 800866c:	429a      	cmp	r2, r3
 800866e:	d21d      	bcs.n	80086ac <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008670:	4b2b      	ldr	r3, [pc, #172]	; (8008720 <HAL_RCC_ClockConfig+0x260>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f023 020f 	bic.w	r2, r3, #15
 8008678:	4929      	ldr	r1, [pc, #164]	; (8008720 <HAL_RCC_ClockConfig+0x260>)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	4313      	orrs	r3, r2
 800867e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008680:	f7fa f9f2 	bl	8002a68 <HAL_GetTick>
 8008684:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008686:	e00a      	b.n	800869e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008688:	f7fa f9ee 	bl	8002a68 <HAL_GetTick>
 800868c:	4602      	mov	r2, r0
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	f241 3288 	movw	r2, #5000	; 0x1388
 8008696:	4293      	cmp	r3, r2
 8008698:	d901      	bls.n	800869e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e03b      	b.n	8008716 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800869e:	4b20      	ldr	r3, [pc, #128]	; (8008720 <HAL_RCC_ClockConfig+0x260>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f003 030f 	and.w	r3, r3, #15
 80086a6:	683a      	ldr	r2, [r7, #0]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d1ed      	bne.n	8008688 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 0304 	and.w	r3, r3, #4
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d008      	beq.n	80086ca <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086b8:	4b1a      	ldr	r3, [pc, #104]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	4917      	ldr	r1, [pc, #92]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 80086c6:	4313      	orrs	r3, r2
 80086c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 0308 	and.w	r3, r3, #8
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d009      	beq.n	80086ea <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80086d6:	4b13      	ldr	r3, [pc, #76]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	490f      	ldr	r1, [pc, #60]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80086ea:	f000 f825 	bl	8008738 <HAL_RCC_GetSysClockFreq>
 80086ee:	4602      	mov	r2, r0
 80086f0:	4b0c      	ldr	r3, [pc, #48]	; (8008724 <HAL_RCC_ClockConfig+0x264>)
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	091b      	lsrs	r3, r3, #4
 80086f6:	f003 030f 	and.w	r3, r3, #15
 80086fa:	490c      	ldr	r1, [pc, #48]	; (800872c <HAL_RCC_ClockConfig+0x26c>)
 80086fc:	5ccb      	ldrb	r3, [r1, r3]
 80086fe:	f003 031f 	and.w	r3, r3, #31
 8008702:	fa22 f303 	lsr.w	r3, r2, r3
 8008706:	4a0a      	ldr	r2, [pc, #40]	; (8008730 <HAL_RCC_ClockConfig+0x270>)
 8008708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800870a:	4b0a      	ldr	r3, [pc, #40]	; (8008734 <HAL_RCC_ClockConfig+0x274>)
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	4618      	mov	r0, r3
 8008710:	f7fa f95e 	bl	80029d0 <HAL_InitTick>
 8008714:	4603      	mov	r3, r0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3718      	adds	r7, #24
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	40022000 	.word	0x40022000
 8008724:	40021000 	.word	0x40021000
 8008728:	04c4b400 	.word	0x04c4b400
 800872c:	08012190 	.word	0x08012190
 8008730:	20000010 	.word	0x20000010
 8008734:	20000014 	.word	0x20000014

08008738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008738:	b480      	push	{r7}
 800873a:	b087      	sub	sp, #28
 800873c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800873e:	4b2c      	ldr	r3, [pc, #176]	; (80087f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008740:	689b      	ldr	r3, [r3, #8]
 8008742:	f003 030c 	and.w	r3, r3, #12
 8008746:	2b04      	cmp	r3, #4
 8008748:	d102      	bne.n	8008750 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800874a:	4b2a      	ldr	r3, [pc, #168]	; (80087f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800874c:	613b      	str	r3, [r7, #16]
 800874e:	e047      	b.n	80087e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008750:	4b27      	ldr	r3, [pc, #156]	; (80087f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008752:	689b      	ldr	r3, [r3, #8]
 8008754:	f003 030c 	and.w	r3, r3, #12
 8008758:	2b08      	cmp	r3, #8
 800875a:	d102      	bne.n	8008762 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800875c:	4b26      	ldr	r3, [pc, #152]	; (80087f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800875e:	613b      	str	r3, [r7, #16]
 8008760:	e03e      	b.n	80087e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008762:	4b23      	ldr	r3, [pc, #140]	; (80087f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f003 030c 	and.w	r3, r3, #12
 800876a:	2b0c      	cmp	r3, #12
 800876c:	d136      	bne.n	80087dc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800876e:	4b20      	ldr	r3, [pc, #128]	; (80087f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	f003 0303 	and.w	r3, r3, #3
 8008776:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008778:	4b1d      	ldr	r3, [pc, #116]	; (80087f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800877a:	68db      	ldr	r3, [r3, #12]
 800877c:	091b      	lsrs	r3, r3, #4
 800877e:	f003 030f 	and.w	r3, r3, #15
 8008782:	3301      	adds	r3, #1
 8008784:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2b03      	cmp	r3, #3
 800878a:	d10c      	bne.n	80087a6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800878c:	4a1a      	ldr	r2, [pc, #104]	; (80087f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	fbb2 f3f3 	udiv	r3, r2, r3
 8008794:	4a16      	ldr	r2, [pc, #88]	; (80087f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008796:	68d2      	ldr	r2, [r2, #12]
 8008798:	0a12      	lsrs	r2, r2, #8
 800879a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800879e:	fb02 f303 	mul.w	r3, r2, r3
 80087a2:	617b      	str	r3, [r7, #20]
      break;
 80087a4:	e00c      	b.n	80087c0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80087a6:	4a13      	ldr	r2, [pc, #76]	; (80087f4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80087ae:	4a10      	ldr	r2, [pc, #64]	; (80087f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80087b0:	68d2      	ldr	r2, [r2, #12]
 80087b2:	0a12      	lsrs	r2, r2, #8
 80087b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80087b8:	fb02 f303 	mul.w	r3, r2, r3
 80087bc:	617b      	str	r3, [r7, #20]
      break;
 80087be:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80087c0:	4b0b      	ldr	r3, [pc, #44]	; (80087f0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	0e5b      	lsrs	r3, r3, #25
 80087c6:	f003 0303 	and.w	r3, r3, #3
 80087ca:	3301      	adds	r3, #1
 80087cc:	005b      	lsls	r3, r3, #1
 80087ce:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80087d0:	697a      	ldr	r2, [r7, #20]
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d8:	613b      	str	r3, [r7, #16]
 80087da:	e001      	b.n	80087e0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80087dc:	2300      	movs	r3, #0
 80087de:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80087e0:	693b      	ldr	r3, [r7, #16]
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	371c      	adds	r7, #28
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr
 80087ee:	bf00      	nop
 80087f0:	40021000 	.word	0x40021000
 80087f4:	00f42400 	.word	0x00f42400
 80087f8:	007a1200 	.word	0x007a1200

080087fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80087fc:	b480      	push	{r7}
 80087fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008800:	4b03      	ldr	r3, [pc, #12]	; (8008810 <HAL_RCC_GetHCLKFreq+0x14>)
 8008802:	681b      	ldr	r3, [r3, #0]
}
 8008804:	4618      	mov	r0, r3
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	20000010 	.word	0x20000010

08008814 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008814:	b480      	push	{r7}
 8008816:	b087      	sub	sp, #28
 8008818:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800881a:	4b1e      	ldr	r3, [pc, #120]	; (8008894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	f003 0303 	and.w	r3, r3, #3
 8008822:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008824:	4b1b      	ldr	r3, [pc, #108]	; (8008894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	091b      	lsrs	r3, r3, #4
 800882a:	f003 030f 	and.w	r3, r3, #15
 800882e:	3301      	adds	r3, #1
 8008830:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	2b03      	cmp	r3, #3
 8008836:	d10c      	bne.n	8008852 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008838:	4a17      	ldr	r2, [pc, #92]	; (8008898 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008840:	4a14      	ldr	r2, [pc, #80]	; (8008894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008842:	68d2      	ldr	r2, [r2, #12]
 8008844:	0a12      	lsrs	r2, r2, #8
 8008846:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800884a:	fb02 f303 	mul.w	r3, r2, r3
 800884e:	617b      	str	r3, [r7, #20]
    break;
 8008850:	e00c      	b.n	800886c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008852:	4a12      	ldr	r2, [pc, #72]	; (800889c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	fbb2 f3f3 	udiv	r3, r2, r3
 800885a:	4a0e      	ldr	r2, [pc, #56]	; (8008894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800885c:	68d2      	ldr	r2, [r2, #12]
 800885e:	0a12      	lsrs	r2, r2, #8
 8008860:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008864:	fb02 f303 	mul.w	r3, r2, r3
 8008868:	617b      	str	r3, [r7, #20]
    break;
 800886a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800886c:	4b09      	ldr	r3, [pc, #36]	; (8008894 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	0e5b      	lsrs	r3, r3, #25
 8008872:	f003 0303 	and.w	r3, r3, #3
 8008876:	3301      	adds	r3, #1
 8008878:	005b      	lsls	r3, r3, #1
 800887a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800887c:	697a      	ldr	r2, [r7, #20]
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	fbb2 f3f3 	udiv	r3, r2, r3
 8008884:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008886:	687b      	ldr	r3, [r7, #4]
}
 8008888:	4618      	mov	r0, r3
 800888a:	371c      	adds	r7, #28
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr
 8008894:	40021000 	.word	0x40021000
 8008898:	007a1200 	.word	0x007a1200
 800889c:	00f42400 	.word	0x00f42400

080088a0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80088a8:	2300      	movs	r3, #0
 80088aa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80088ac:	2300      	movs	r3, #0
 80088ae:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	f000 8098 	beq.w	80089ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80088be:	2300      	movs	r3, #0
 80088c0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80088c2:	4b43      	ldr	r3, [pc, #268]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10d      	bne.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80088ce:	4b40      	ldr	r3, [pc, #256]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088d2:	4a3f      	ldr	r2, [pc, #252]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088d8:	6593      	str	r3, [r2, #88]	; 0x58
 80088da:	4b3d      	ldr	r3, [pc, #244]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088e2:	60bb      	str	r3, [r7, #8]
 80088e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80088e6:	2301      	movs	r3, #1
 80088e8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80088ea:	4b3a      	ldr	r3, [pc, #232]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	4a39      	ldr	r2, [pc, #228]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80088f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80088f6:	f7fa f8b7 	bl	8002a68 <HAL_GetTick>
 80088fa:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80088fc:	e009      	b.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088fe:	f7fa f8b3 	bl	8002a68 <HAL_GetTick>
 8008902:	4602      	mov	r2, r0
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	2b02      	cmp	r3, #2
 800890a:	d902      	bls.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800890c:	2303      	movs	r3, #3
 800890e:	74fb      	strb	r3, [r7, #19]
        break;
 8008910:	e005      	b.n	800891e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008912:	4b30      	ldr	r3, [pc, #192]	; (80089d4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800891a:	2b00      	cmp	r3, #0
 800891c:	d0ef      	beq.n	80088fe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800891e:	7cfb      	ldrb	r3, [r7, #19]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d159      	bne.n	80089d8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008924:	4b2a      	ldr	r3, [pc, #168]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800892a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800892e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d01e      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800893a:	697a      	ldr	r2, [r7, #20]
 800893c:	429a      	cmp	r2, r3
 800893e:	d019      	beq.n	8008974 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008940:	4b23      	ldr	r3, [pc, #140]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800894a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800894c:	4b20      	ldr	r3, [pc, #128]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800894e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008952:	4a1f      	ldr	r2, [pc, #124]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008954:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800895c:	4b1c      	ldr	r3, [pc, #112]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800895e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008962:	4a1b      	ldr	r2, [pc, #108]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008964:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800896c:	4a18      	ldr	r2, [pc, #96]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	f003 0301 	and.w	r3, r3, #1
 800897a:	2b00      	cmp	r3, #0
 800897c:	d016      	beq.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800897e:	f7fa f873 	bl	8002a68 <HAL_GetTick>
 8008982:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008984:	e00b      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008986:	f7fa f86f 	bl	8002a68 <HAL_GetTick>
 800898a:	4602      	mov	r2, r0
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	1ad3      	subs	r3, r2, r3
 8008990:	f241 3288 	movw	r2, #5000	; 0x1388
 8008994:	4293      	cmp	r3, r2
 8008996:	d902      	bls.n	800899e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008998:	2303      	movs	r3, #3
 800899a:	74fb      	strb	r3, [r7, #19]
            break;
 800899c:	e006      	b.n	80089ac <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800899e:	4b0c      	ldr	r3, [pc, #48]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089a4:	f003 0302 	and.w	r3, r3, #2
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d0ec      	beq.n	8008986 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80089ac:	7cfb      	ldrb	r3, [r7, #19]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d10b      	bne.n	80089ca <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80089b2:	4b07      	ldr	r3, [pc, #28]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089c0:	4903      	ldr	r1, [pc, #12]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80089c2:	4313      	orrs	r3, r2
 80089c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80089c8:	e008      	b.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80089ca:	7cfb      	ldrb	r3, [r7, #19]
 80089cc:	74bb      	strb	r3, [r7, #18]
 80089ce:	e005      	b.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80089d0:	40021000 	.word	0x40021000
 80089d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089d8:	7cfb      	ldrb	r3, [r7, #19]
 80089da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80089dc:	7c7b      	ldrb	r3, [r7, #17]
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d105      	bne.n	80089ee <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80089e2:	4ba7      	ldr	r3, [pc, #668]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089e6:	4aa6      	ldr	r2, [pc, #664]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0301 	and.w	r3, r3, #1
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00a      	beq.n	8008a10 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80089fa:	4ba1      	ldr	r3, [pc, #644]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a00:	f023 0203 	bic.w	r2, r3, #3
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	499d      	ldr	r1, [pc, #628]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	f003 0302 	and.w	r3, r3, #2
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d00a      	beq.n	8008a32 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008a1c:	4b98      	ldr	r3, [pc, #608]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a22:	f023 020c 	bic.w	r2, r3, #12
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	4995      	ldr	r1, [pc, #596]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 0304 	and.w	r3, r3, #4
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d00a      	beq.n	8008a54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008a3e:	4b90      	ldr	r3, [pc, #576]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a44:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	498c      	ldr	r1, [pc, #560]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f003 0308 	and.w	r3, r3, #8
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d00a      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008a60:	4b87      	ldr	r3, [pc, #540]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	691b      	ldr	r3, [r3, #16]
 8008a6e:	4984      	ldr	r1, [pc, #528]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a70:	4313      	orrs	r3, r2
 8008a72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f003 0310 	and.w	r3, r3, #16
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00a      	beq.n	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008a82:	4b7f      	ldr	r3, [pc, #508]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	695b      	ldr	r3, [r3, #20]
 8008a90:	497b      	ldr	r1, [pc, #492]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a92:	4313      	orrs	r3, r2
 8008a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	f003 0320 	and.w	r3, r3, #32
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d00a      	beq.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008aa4:	4b76      	ldr	r3, [pc, #472]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aaa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	4973      	ldr	r1, [pc, #460]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00a      	beq.n	8008adc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008ac6:	4b6e      	ldr	r3, [pc, #440]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008acc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	496a      	ldr	r1, [pc, #424]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00a      	beq.n	8008afe <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008ae8:	4b65      	ldr	r3, [pc, #404]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6a1b      	ldr	r3, [r3, #32]
 8008af6:	4962      	ldr	r1, [pc, #392]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008af8:	4313      	orrs	r3, r2
 8008afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d00a      	beq.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008b0a:	4b5d      	ldr	r3, [pc, #372]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b18:	4959      	ldr	r1, [pc, #356]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00a      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008b2c:	4b54      	ldr	r3, [pc, #336]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b32:	f023 0203 	bic.w	r2, r3, #3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b3a:	4951      	ldr	r1, [pc, #324]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b3c:	4313      	orrs	r3, r2
 8008b3e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d00a      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008b4e:	4b4c      	ldr	r3, [pc, #304]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5c:	4948      	ldr	r1, [pc, #288]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d015      	beq.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b70:	4b43      	ldr	r3, [pc, #268]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7e:	4940      	ldr	r1, [pc, #256]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b80:	4313      	orrs	r3, r2
 8008b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b8e:	d105      	bne.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b90:	4b3b      	ldr	r3, [pc, #236]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	4a3a      	ldr	r2, [pc, #232]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b9a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d015      	beq.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008ba8:	4b35      	ldr	r3, [pc, #212]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb6:	4932      	ldr	r1, [pc, #200]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bc6:	d105      	bne.n	8008bd4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bc8:	4b2d      	ldr	r3, [pc, #180]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	4a2c      	ldr	r2, [pc, #176]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bd2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d015      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008be0:	4b27      	ldr	r3, [pc, #156]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008be6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bee:	4924      	ldr	r1, [pc, #144]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bf0:	4313      	orrs	r3, r2
 8008bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bfa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008bfe:	d105      	bne.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c00:	4b1f      	ldr	r3, [pc, #124]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	4a1e      	ldr	r2, [pc, #120]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c06:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c0a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d015      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008c18:	4b19      	ldr	r3, [pc, #100]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c1e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c26:	4916      	ldr	r1, [pc, #88]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c32:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c36:	d105      	bne.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c38:	4b11      	ldr	r3, [pc, #68]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	4a10      	ldr	r2, [pc, #64]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c42:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d019      	beq.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008c50:	4b0b      	ldr	r3, [pc, #44]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5e:	4908      	ldr	r1, [pc, #32]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c60:	4313      	orrs	r3, r2
 8008c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008c6e:	d109      	bne.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008c70:	4b03      	ldr	r3, [pc, #12]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	4a02      	ldr	r2, [pc, #8]	; (8008c80 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008c76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c7a:	60d3      	str	r3, [r2, #12]
 8008c7c:	e002      	b.n	8008c84 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008c7e:	bf00      	nop
 8008c80:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d015      	beq.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008c90:	4b29      	ldr	r3, [pc, #164]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c96:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c9e:	4926      	ldr	r1, [pc, #152]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008caa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008cae:	d105      	bne.n	8008cbc <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008cb0:	4b21      	ldr	r3, [pc, #132]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	4a20      	ldr	r2, [pc, #128]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d015      	beq.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008cc8:	4b1b      	ldr	r3, [pc, #108]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cce:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008cd6:	4918      	ldr	r1, [pc, #96]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ce6:	d105      	bne.n	8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008ce8:	4b13      	ldr	r3, [pc, #76]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	4a12      	ldr	r2, [pc, #72]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cf2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d015      	beq.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008d00:	4b0d      	ldr	r3, [pc, #52]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008d06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d0e:	490a      	ldr	r1, [pc, #40]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d10:	4313      	orrs	r3, r2
 8008d12:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d1e:	d105      	bne.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008d20:	4b05      	ldr	r3, [pc, #20]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d22:	68db      	ldr	r3, [r3, #12]
 8008d24:	4a04      	ldr	r2, [pc, #16]	; (8008d38 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008d26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d2a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008d2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3718      	adds	r7, #24
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	40021000 	.word	0x40021000

08008d3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d101      	bne.n	8008d4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e049      	b.n	8008de2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d106      	bne.n	8008d68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f7f9 fc5e 	bl	8002624 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2202      	movs	r2, #2
 8008d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	3304      	adds	r3, #4
 8008d78:	4619      	mov	r1, r3
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	f000 fb74 	bl	8009468 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2201      	movs	r2, #1
 8008d84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2201      	movs	r2, #1
 8008da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2201      	movs	r2, #1
 8008dac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2201      	movs	r2, #1
 8008db4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2201      	movs	r2, #1
 8008ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
	...

08008dec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b085      	sub	sp, #20
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d001      	beq.n	8008e04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e054      	b.n	8008eae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2202      	movs	r2, #2
 8008e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68da      	ldr	r2, [r3, #12]
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f042 0201 	orr.w	r2, r2, #1
 8008e1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	4a26      	ldr	r2, [pc, #152]	; (8008ebc <HAL_TIM_Base_Start_IT+0xd0>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d022      	beq.n	8008e6c <HAL_TIM_Base_Start_IT+0x80>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e2e:	d01d      	beq.n	8008e6c <HAL_TIM_Base_Start_IT+0x80>
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	4a22      	ldr	r2, [pc, #136]	; (8008ec0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d018      	beq.n	8008e6c <HAL_TIM_Base_Start_IT+0x80>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a21      	ldr	r2, [pc, #132]	; (8008ec4 <HAL_TIM_Base_Start_IT+0xd8>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d013      	beq.n	8008e6c <HAL_TIM_Base_Start_IT+0x80>
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a1f      	ldr	r2, [pc, #124]	; (8008ec8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d00e      	beq.n	8008e6c <HAL_TIM_Base_Start_IT+0x80>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a1e      	ldr	r2, [pc, #120]	; (8008ecc <HAL_TIM_Base_Start_IT+0xe0>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d009      	beq.n	8008e6c <HAL_TIM_Base_Start_IT+0x80>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a1c      	ldr	r2, [pc, #112]	; (8008ed0 <HAL_TIM_Base_Start_IT+0xe4>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d004      	beq.n	8008e6c <HAL_TIM_Base_Start_IT+0x80>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a1b      	ldr	r2, [pc, #108]	; (8008ed4 <HAL_TIM_Base_Start_IT+0xe8>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d115      	bne.n	8008e98 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	689a      	ldr	r2, [r3, #8]
 8008e72:	4b19      	ldr	r3, [pc, #100]	; (8008ed8 <HAL_TIM_Base_Start_IT+0xec>)
 8008e74:	4013      	ands	r3, r2
 8008e76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2b06      	cmp	r3, #6
 8008e7c:	d015      	beq.n	8008eaa <HAL_TIM_Base_Start_IT+0xbe>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e84:	d011      	beq.n	8008eaa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	681a      	ldr	r2, [r3, #0]
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	f042 0201 	orr.w	r2, r2, #1
 8008e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e96:	e008      	b.n	8008eaa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	681a      	ldr	r2, [r3, #0]
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f042 0201 	orr.w	r2, r2, #1
 8008ea6:	601a      	str	r2, [r3, #0]
 8008ea8:	e000      	b.n	8008eac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eaa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008eac:	2300      	movs	r3, #0
}
 8008eae:	4618      	mov	r0, r3
 8008eb0:	3714      	adds	r7, #20
 8008eb2:	46bd      	mov	sp, r7
 8008eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	40012c00 	.word	0x40012c00
 8008ec0:	40000400 	.word	0x40000400
 8008ec4:	40000800 	.word	0x40000800
 8008ec8:	40000c00 	.word	0x40000c00
 8008ecc:	40013400 	.word	0x40013400
 8008ed0:	40014000 	.word	0x40014000
 8008ed4:	40015000 	.word	0x40015000
 8008ed8:	00010007 	.word	0x00010007

08008edc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b083      	sub	sp, #12
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	68da      	ldr	r2, [r3, #12]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f022 0201 	bic.w	r2, r2, #1
 8008ef2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	6a1a      	ldr	r2, [r3, #32]
 8008efa:	f241 1311 	movw	r3, #4369	; 0x1111
 8008efe:	4013      	ands	r3, r2
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10f      	bne.n	8008f24 <HAL_TIM_Base_Stop_IT+0x48>
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	6a1a      	ldr	r2, [r3, #32]
 8008f0a:	f244 4344 	movw	r3, #17476	; 0x4444
 8008f0e:	4013      	ands	r3, r2
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d107      	bne.n	8008f24 <HAL_TIM_Base_Stop_IT+0x48>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	681a      	ldr	r2, [r3, #0]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f022 0201 	bic.w	r2, r2, #1
 8008f22:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2201      	movs	r2, #1
 8008f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	370c      	adds	r7, #12
 8008f32:	46bd      	mov	sp, r7
 8008f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f38:	4770      	bx	lr

08008f3a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008f3a:	b580      	push	{r7, lr}
 8008f3c:	b084      	sub	sp, #16
 8008f3e:	af00      	add	r7, sp, #0
 8008f40:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	68db      	ldr	r3, [r3, #12]
 8008f48:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	691b      	ldr	r3, [r3, #16]
 8008f50:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f003 0302 	and.w	r3, r3, #2
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d020      	beq.n	8008f9e <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f003 0302 	and.w	r3, r3, #2
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d01b      	beq.n	8008f9e <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	f06f 0202 	mvn.w	r2, #2
 8008f6e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2201      	movs	r2, #1
 8008f74:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	f003 0303 	and.w	r3, r3, #3
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d003      	beq.n	8008f8c <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fa51 	bl	800942c <HAL_TIM_IC_CaptureCallback>
 8008f8a:	e005      	b.n	8008f98 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f8c:	6878      	ldr	r0, [r7, #4]
 8008f8e:	f000 fa43 	bl	8009418 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f000 fa54 	bl	8009440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	f003 0304 	and.w	r3, r3, #4
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d020      	beq.n	8008fea <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f003 0304 	and.w	r3, r3, #4
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d01b      	beq.n	8008fea <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f06f 0204 	mvn.w	r2, #4
 8008fba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	699b      	ldr	r3, [r3, #24]
 8008fc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d003      	beq.n	8008fd8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 fa2b 	bl	800942c <HAL_TIM_IC_CaptureCallback>
 8008fd6:	e005      	b.n	8008fe4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fa1d 	bl	8009418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fa2e 	bl	8009440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	f003 0308 	and.w	r3, r3, #8
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d020      	beq.n	8009036 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	f003 0308 	and.w	r3, r3, #8
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d01b      	beq.n	8009036 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f06f 0208 	mvn.w	r2, #8
 8009006:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2204      	movs	r2, #4
 800900c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	69db      	ldr	r3, [r3, #28]
 8009014:	f003 0303 	and.w	r3, r3, #3
 8009018:	2b00      	cmp	r3, #0
 800901a:	d003      	beq.n	8009024 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fa05 	bl	800942c <HAL_TIM_IC_CaptureCallback>
 8009022:	e005      	b.n	8009030 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 f9f7 	bl	8009418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fa08 	bl	8009440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	f003 0310 	and.w	r3, r3, #16
 800903c:	2b00      	cmp	r3, #0
 800903e:	d020      	beq.n	8009082 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f003 0310 	and.w	r3, r3, #16
 8009046:	2b00      	cmp	r3, #0
 8009048:	d01b      	beq.n	8009082 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f06f 0210 	mvn.w	r2, #16
 8009052:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2208      	movs	r2, #8
 8009058:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	69db      	ldr	r3, [r3, #28]
 8009060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009064:	2b00      	cmp	r3, #0
 8009066:	d003      	beq.n	8009070 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009068:	6878      	ldr	r0, [r7, #4]
 800906a:	f000 f9df 	bl	800942c <HAL_TIM_IC_CaptureCallback>
 800906e:	e005      	b.n	800907c <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f9d1 	bl	8009418 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009076:	6878      	ldr	r0, [r7, #4]
 8009078:	f000 f9e2 	bl	8009440 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	f003 0301 	and.w	r3, r3, #1
 8009088:	2b00      	cmp	r3, #0
 800908a:	d00c      	beq.n	80090a6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f003 0301 	and.w	r3, r3, #1
 8009092:	2b00      	cmp	r3, #0
 8009094:	d007      	beq.n	80090a6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	f06f 0201 	mvn.w	r2, #1
 800909e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f000 f9af 	bl	8009404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d104      	bne.n	80090ba <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00c      	beq.n	80090d4 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d007      	beq.n	80090d4 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80090cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f000 fbba 	bl	8009848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00c      	beq.n	80090f8 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d007      	beq.n	80090f8 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80090f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fbb2 	bl	800985c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00c      	beq.n	800911c <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009108:	2b00      	cmp	r3, #0
 800910a:	d007      	beq.n	800911c <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 f99c 	bl	8009454 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f003 0320 	and.w	r3, r3, #32
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00c      	beq.n	8009140 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f003 0320 	and.w	r3, r3, #32
 800912c:	2b00      	cmp	r3, #0
 800912e:	d007      	beq.n	8009140 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f06f 0220 	mvn.w	r2, #32
 8009138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800913a:	6878      	ldr	r0, [r7, #4]
 800913c:	f000 fb7a 	bl	8009834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00c      	beq.n	8009164 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009150:	2b00      	cmp	r3, #0
 8009152:	d007      	beq.n	8009164 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800915c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fb86 	bl	8009870 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800916a:	2b00      	cmp	r3, #0
 800916c:	d00c      	beq.n	8009188 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d007      	beq.n	8009188 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fb7e 	bl	8009884 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009188:	68bb      	ldr	r3, [r7, #8]
 800918a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00c      	beq.n	80091ac <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d007      	beq.n	80091ac <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80091a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fb76 	bl	8009898 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00c      	beq.n	80091d0 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d007      	beq.n	80091d0 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80091c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fb6e 	bl	80098ac <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091d0:	bf00      	nop
 80091d2:	3710      	adds	r7, #16
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b084      	sub	sp, #16
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
 80091e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80091e2:	2300      	movs	r3, #0
 80091e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d101      	bne.n	80091f4 <HAL_TIM_ConfigClockSource+0x1c>
 80091f0:	2302      	movs	r3, #2
 80091f2:	e0f6      	b.n	80093e2 <HAL_TIM_ConfigClockSource+0x20a>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2202      	movs	r2, #2
 8009200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009212:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009216:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800921e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	68ba      	ldr	r2, [r7, #8]
 8009226:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009228:	683b      	ldr	r3, [r7, #0]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a6f      	ldr	r2, [pc, #444]	; (80093ec <HAL_TIM_ConfigClockSource+0x214>)
 800922e:	4293      	cmp	r3, r2
 8009230:	f000 80c1 	beq.w	80093b6 <HAL_TIM_ConfigClockSource+0x1de>
 8009234:	4a6d      	ldr	r2, [pc, #436]	; (80093ec <HAL_TIM_ConfigClockSource+0x214>)
 8009236:	4293      	cmp	r3, r2
 8009238:	f200 80c6 	bhi.w	80093c8 <HAL_TIM_ConfigClockSource+0x1f0>
 800923c:	4a6c      	ldr	r2, [pc, #432]	; (80093f0 <HAL_TIM_ConfigClockSource+0x218>)
 800923e:	4293      	cmp	r3, r2
 8009240:	f000 80b9 	beq.w	80093b6 <HAL_TIM_ConfigClockSource+0x1de>
 8009244:	4a6a      	ldr	r2, [pc, #424]	; (80093f0 <HAL_TIM_ConfigClockSource+0x218>)
 8009246:	4293      	cmp	r3, r2
 8009248:	f200 80be 	bhi.w	80093c8 <HAL_TIM_ConfigClockSource+0x1f0>
 800924c:	4a69      	ldr	r2, [pc, #420]	; (80093f4 <HAL_TIM_ConfigClockSource+0x21c>)
 800924e:	4293      	cmp	r3, r2
 8009250:	f000 80b1 	beq.w	80093b6 <HAL_TIM_ConfigClockSource+0x1de>
 8009254:	4a67      	ldr	r2, [pc, #412]	; (80093f4 <HAL_TIM_ConfigClockSource+0x21c>)
 8009256:	4293      	cmp	r3, r2
 8009258:	f200 80b6 	bhi.w	80093c8 <HAL_TIM_ConfigClockSource+0x1f0>
 800925c:	4a66      	ldr	r2, [pc, #408]	; (80093f8 <HAL_TIM_ConfigClockSource+0x220>)
 800925e:	4293      	cmp	r3, r2
 8009260:	f000 80a9 	beq.w	80093b6 <HAL_TIM_ConfigClockSource+0x1de>
 8009264:	4a64      	ldr	r2, [pc, #400]	; (80093f8 <HAL_TIM_ConfigClockSource+0x220>)
 8009266:	4293      	cmp	r3, r2
 8009268:	f200 80ae 	bhi.w	80093c8 <HAL_TIM_ConfigClockSource+0x1f0>
 800926c:	4a63      	ldr	r2, [pc, #396]	; (80093fc <HAL_TIM_ConfigClockSource+0x224>)
 800926e:	4293      	cmp	r3, r2
 8009270:	f000 80a1 	beq.w	80093b6 <HAL_TIM_ConfigClockSource+0x1de>
 8009274:	4a61      	ldr	r2, [pc, #388]	; (80093fc <HAL_TIM_ConfigClockSource+0x224>)
 8009276:	4293      	cmp	r3, r2
 8009278:	f200 80a6 	bhi.w	80093c8 <HAL_TIM_ConfigClockSource+0x1f0>
 800927c:	4a60      	ldr	r2, [pc, #384]	; (8009400 <HAL_TIM_ConfigClockSource+0x228>)
 800927e:	4293      	cmp	r3, r2
 8009280:	f000 8099 	beq.w	80093b6 <HAL_TIM_ConfigClockSource+0x1de>
 8009284:	4a5e      	ldr	r2, [pc, #376]	; (8009400 <HAL_TIM_ConfigClockSource+0x228>)
 8009286:	4293      	cmp	r3, r2
 8009288:	f200 809e 	bhi.w	80093c8 <HAL_TIM_ConfigClockSource+0x1f0>
 800928c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009290:	f000 8091 	beq.w	80093b6 <HAL_TIM_ConfigClockSource+0x1de>
 8009294:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009298:	f200 8096 	bhi.w	80093c8 <HAL_TIM_ConfigClockSource+0x1f0>
 800929c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092a0:	f000 8089 	beq.w	80093b6 <HAL_TIM_ConfigClockSource+0x1de>
 80092a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092a8:	f200 808e 	bhi.w	80093c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80092ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092b0:	d03e      	beq.n	8009330 <HAL_TIM_ConfigClockSource+0x158>
 80092b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092b6:	f200 8087 	bhi.w	80093c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80092ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092be:	f000 8086 	beq.w	80093ce <HAL_TIM_ConfigClockSource+0x1f6>
 80092c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092c6:	d87f      	bhi.n	80093c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80092c8:	2b70      	cmp	r3, #112	; 0x70
 80092ca:	d01a      	beq.n	8009302 <HAL_TIM_ConfigClockSource+0x12a>
 80092cc:	2b70      	cmp	r3, #112	; 0x70
 80092ce:	d87b      	bhi.n	80093c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80092d0:	2b60      	cmp	r3, #96	; 0x60
 80092d2:	d050      	beq.n	8009376 <HAL_TIM_ConfigClockSource+0x19e>
 80092d4:	2b60      	cmp	r3, #96	; 0x60
 80092d6:	d877      	bhi.n	80093c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80092d8:	2b50      	cmp	r3, #80	; 0x50
 80092da:	d03c      	beq.n	8009356 <HAL_TIM_ConfigClockSource+0x17e>
 80092dc:	2b50      	cmp	r3, #80	; 0x50
 80092de:	d873      	bhi.n	80093c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80092e0:	2b40      	cmp	r3, #64	; 0x40
 80092e2:	d058      	beq.n	8009396 <HAL_TIM_ConfigClockSource+0x1be>
 80092e4:	2b40      	cmp	r3, #64	; 0x40
 80092e6:	d86f      	bhi.n	80093c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80092e8:	2b30      	cmp	r3, #48	; 0x30
 80092ea:	d064      	beq.n	80093b6 <HAL_TIM_ConfigClockSource+0x1de>
 80092ec:	2b30      	cmp	r3, #48	; 0x30
 80092ee:	d86b      	bhi.n	80093c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80092f0:	2b20      	cmp	r3, #32
 80092f2:	d060      	beq.n	80093b6 <HAL_TIM_ConfigClockSource+0x1de>
 80092f4:	2b20      	cmp	r3, #32
 80092f6:	d867      	bhi.n	80093c8 <HAL_TIM_ConfigClockSource+0x1f0>
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d05c      	beq.n	80093b6 <HAL_TIM_ConfigClockSource+0x1de>
 80092fc:	2b10      	cmp	r3, #16
 80092fe:	d05a      	beq.n	80093b6 <HAL_TIM_ConfigClockSource+0x1de>
 8009300:	e062      	b.n	80093c8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800930a:	683b      	ldr	r3, [r7, #0]
 800930c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009312:	f000 f9d9 	bl	80096c8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009324:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68ba      	ldr	r2, [r7, #8]
 800932c:	609a      	str	r2, [r3, #8]
      break;
 800932e:	e04f      	b.n	80093d0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009340:	f000 f9c2 	bl	80096c8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	689a      	ldr	r2, [r3, #8]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009352:	609a      	str	r2, [r3, #8]
      break;
 8009354:	e03c      	b.n	80093d0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009362:	461a      	mov	r2, r3
 8009364:	f000 f934 	bl	80095d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2150      	movs	r1, #80	; 0x50
 800936e:	4618      	mov	r0, r3
 8009370:	f000 f98d 	bl	800968e <TIM_ITRx_SetConfig>
      break;
 8009374:	e02c      	b.n	80093d0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009382:	461a      	mov	r2, r3
 8009384:	f000 f953 	bl	800962e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2160      	movs	r1, #96	; 0x60
 800938e:	4618      	mov	r0, r3
 8009390:	f000 f97d 	bl	800968e <TIM_ITRx_SetConfig>
      break;
 8009394:	e01c      	b.n	80093d0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80093a2:	461a      	mov	r2, r3
 80093a4:	f000 f914 	bl	80095d0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2140      	movs	r1, #64	; 0x40
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 f96d 	bl	800968e <TIM_ITRx_SetConfig>
      break;
 80093b4:	e00c      	b.n	80093d0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4619      	mov	r1, r3
 80093c0:	4610      	mov	r0, r2
 80093c2:	f000 f964 	bl	800968e <TIM_ITRx_SetConfig>
      break;
 80093c6:	e003      	b.n	80093d0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80093c8:	2301      	movs	r3, #1
 80093ca:	73fb      	strb	r3, [r7, #15]
      break;
 80093cc:	e000      	b.n	80093d0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80093ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2200      	movs	r2, #0
 80093dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80093e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	3710      	adds	r7, #16
 80093e6:	46bd      	mov	sp, r7
 80093e8:	bd80      	pop	{r7, pc}
 80093ea:	bf00      	nop
 80093ec:	00100070 	.word	0x00100070
 80093f0:	00100060 	.word	0x00100060
 80093f4:	00100050 	.word	0x00100050
 80093f8:	00100040 	.word	0x00100040
 80093fc:	00100030 	.word	0x00100030
 8009400:	00100020 	.word	0x00100020

08009404 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
 800940a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800940c:	bf00      	nop
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr

08009418 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009418:	b480      	push	{r7}
 800941a:	b083      	sub	sp, #12
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009420:	bf00      	nop
 8009422:	370c      	adds	r7, #12
 8009424:	46bd      	mov	sp, r7
 8009426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942a:	4770      	bx	lr

0800942c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009434:	bf00      	nop
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009448:	bf00      	nop
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a4c      	ldr	r2, [pc, #304]	; (80095ac <TIM_Base_SetConfig+0x144>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d017      	beq.n	80094b0 <TIM_Base_SetConfig+0x48>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009486:	d013      	beq.n	80094b0 <TIM_Base_SetConfig+0x48>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a49      	ldr	r2, [pc, #292]	; (80095b0 <TIM_Base_SetConfig+0x148>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d00f      	beq.n	80094b0 <TIM_Base_SetConfig+0x48>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a48      	ldr	r2, [pc, #288]	; (80095b4 <TIM_Base_SetConfig+0x14c>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d00b      	beq.n	80094b0 <TIM_Base_SetConfig+0x48>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a47      	ldr	r2, [pc, #284]	; (80095b8 <TIM_Base_SetConfig+0x150>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d007      	beq.n	80094b0 <TIM_Base_SetConfig+0x48>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a46      	ldr	r2, [pc, #280]	; (80095bc <TIM_Base_SetConfig+0x154>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d003      	beq.n	80094b0 <TIM_Base_SetConfig+0x48>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a45      	ldr	r2, [pc, #276]	; (80095c0 <TIM_Base_SetConfig+0x158>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d108      	bne.n	80094c2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	4313      	orrs	r3, r2
 80094c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a39      	ldr	r2, [pc, #228]	; (80095ac <TIM_Base_SetConfig+0x144>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d023      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094d0:	d01f      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a36      	ldr	r2, [pc, #216]	; (80095b0 <TIM_Base_SetConfig+0x148>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d01b      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a35      	ldr	r2, [pc, #212]	; (80095b4 <TIM_Base_SetConfig+0x14c>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d017      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a34      	ldr	r2, [pc, #208]	; (80095b8 <TIM_Base_SetConfig+0x150>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d013      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	4a33      	ldr	r2, [pc, #204]	; (80095bc <TIM_Base_SetConfig+0x154>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d00f      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	4a33      	ldr	r2, [pc, #204]	; (80095c4 <TIM_Base_SetConfig+0x15c>)
 80094f6:	4293      	cmp	r3, r2
 80094f8:	d00b      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	4a32      	ldr	r2, [pc, #200]	; (80095c8 <TIM_Base_SetConfig+0x160>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d007      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	4a31      	ldr	r2, [pc, #196]	; (80095cc <TIM_Base_SetConfig+0x164>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d003      	beq.n	8009512 <TIM_Base_SetConfig+0xaa>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	4a2c      	ldr	r2, [pc, #176]	; (80095c0 <TIM_Base_SetConfig+0x158>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d108      	bne.n	8009524 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009518:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800951a:	683b      	ldr	r3, [r7, #0]
 800951c:	68db      	ldr	r3, [r3, #12]
 800951e:	68fa      	ldr	r2, [r7, #12]
 8009520:	4313      	orrs	r3, r2
 8009522:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800952a:	683b      	ldr	r3, [r7, #0]
 800952c:	695b      	ldr	r3, [r3, #20]
 800952e:	4313      	orrs	r3, r2
 8009530:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	68fa      	ldr	r2, [r7, #12]
 8009536:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	689a      	ldr	r2, [r3, #8]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	681a      	ldr	r2, [r3, #0]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	4a18      	ldr	r2, [pc, #96]	; (80095ac <TIM_Base_SetConfig+0x144>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d013      	beq.n	8009578 <TIM_Base_SetConfig+0x110>
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	4a1a      	ldr	r2, [pc, #104]	; (80095bc <TIM_Base_SetConfig+0x154>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d00f      	beq.n	8009578 <TIM_Base_SetConfig+0x110>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	4a1a      	ldr	r2, [pc, #104]	; (80095c4 <TIM_Base_SetConfig+0x15c>)
 800955c:	4293      	cmp	r3, r2
 800955e:	d00b      	beq.n	8009578 <TIM_Base_SetConfig+0x110>
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	4a19      	ldr	r2, [pc, #100]	; (80095c8 <TIM_Base_SetConfig+0x160>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d007      	beq.n	8009578 <TIM_Base_SetConfig+0x110>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a18      	ldr	r2, [pc, #96]	; (80095cc <TIM_Base_SetConfig+0x164>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d003      	beq.n	8009578 <TIM_Base_SetConfig+0x110>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a13      	ldr	r2, [pc, #76]	; (80095c0 <TIM_Base_SetConfig+0x158>)
 8009574:	4293      	cmp	r3, r2
 8009576:	d103      	bne.n	8009580 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	691a      	ldr	r2, [r3, #16]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2201      	movs	r2, #1
 8009584:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	691b      	ldr	r3, [r3, #16]
 800958a:	f003 0301 	and.w	r3, r3, #1
 800958e:	2b01      	cmp	r3, #1
 8009590:	d105      	bne.n	800959e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	691b      	ldr	r3, [r3, #16]
 8009596:	f023 0201 	bic.w	r2, r3, #1
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	611a      	str	r2, [r3, #16]
  }
}
 800959e:	bf00      	nop
 80095a0:	3714      	adds	r7, #20
 80095a2:	46bd      	mov	sp, r7
 80095a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a8:	4770      	bx	lr
 80095aa:	bf00      	nop
 80095ac:	40012c00 	.word	0x40012c00
 80095b0:	40000400 	.word	0x40000400
 80095b4:	40000800 	.word	0x40000800
 80095b8:	40000c00 	.word	0x40000c00
 80095bc:	40013400 	.word	0x40013400
 80095c0:	40015000 	.word	0x40015000
 80095c4:	40014000 	.word	0x40014000
 80095c8:	40014400 	.word	0x40014400
 80095cc:	40014800 	.word	0x40014800

080095d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b087      	sub	sp, #28
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	6a1b      	ldr	r3, [r3, #32]
 80095e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	6a1b      	ldr	r3, [r3, #32]
 80095e6:	f023 0201 	bic.w	r2, r3, #1
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	699b      	ldr	r3, [r3, #24]
 80095f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80095fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	011b      	lsls	r3, r3, #4
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	4313      	orrs	r3, r2
 8009604:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	f023 030a 	bic.w	r3, r3, #10
 800960c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800960e:	697a      	ldr	r2, [r7, #20]
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	4313      	orrs	r3, r2
 8009614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	693a      	ldr	r2, [r7, #16]
 800961a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	697a      	ldr	r2, [r7, #20]
 8009620:	621a      	str	r2, [r3, #32]
}
 8009622:	bf00      	nop
 8009624:	371c      	adds	r7, #28
 8009626:	46bd      	mov	sp, r7
 8009628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962c:	4770      	bx	lr

0800962e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800962e:	b480      	push	{r7}
 8009630:	b087      	sub	sp, #28
 8009632:	af00      	add	r7, sp, #0
 8009634:	60f8      	str	r0, [r7, #12]
 8009636:	60b9      	str	r1, [r7, #8]
 8009638:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	6a1b      	ldr	r3, [r3, #32]
 800963e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	6a1b      	ldr	r3, [r3, #32]
 8009644:	f023 0210 	bic.w	r2, r3, #16
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009658:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	031b      	lsls	r3, r3, #12
 800965e:	693a      	ldr	r2, [r7, #16]
 8009660:	4313      	orrs	r3, r2
 8009662:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800966a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	011b      	lsls	r3, r3, #4
 8009670:	697a      	ldr	r2, [r7, #20]
 8009672:	4313      	orrs	r3, r2
 8009674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	693a      	ldr	r2, [r7, #16]
 800967a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	697a      	ldr	r2, [r7, #20]
 8009680:	621a      	str	r2, [r3, #32]
}
 8009682:	bf00      	nop
 8009684:	371c      	adds	r7, #28
 8009686:	46bd      	mov	sp, r7
 8009688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968c:	4770      	bx	lr

0800968e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800968e:	b480      	push	{r7}
 8009690:	b085      	sub	sp, #20
 8009692:	af00      	add	r7, sp, #0
 8009694:	6078      	str	r0, [r7, #4]
 8009696:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80096a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80096a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80096aa:	683a      	ldr	r2, [r7, #0]
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	4313      	orrs	r3, r2
 80096b0:	f043 0307 	orr.w	r3, r3, #7
 80096b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	68fa      	ldr	r2, [r7, #12]
 80096ba:	609a      	str	r2, [r3, #8]
}
 80096bc:	bf00      	nop
 80096be:	3714      	adds	r7, #20
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b087      	sub	sp, #28
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]
 80096d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	689b      	ldr	r3, [r3, #8]
 80096da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	021a      	lsls	r2, r3, #8
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	431a      	orrs	r2, r3
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	4313      	orrs	r3, r2
 80096f0:	697a      	ldr	r2, [r7, #20]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	697a      	ldr	r2, [r7, #20]
 80096fa:	609a      	str	r2, [r3, #8]
}
 80096fc:	bf00      	nop
 80096fe:	371c      	adds	r7, #28
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
 8009710:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009718:	2b01      	cmp	r3, #1
 800971a:	d101      	bne.n	8009720 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800971c:	2302      	movs	r3, #2
 800971e:	e074      	b.n	800980a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2201      	movs	r2, #1
 8009724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2202      	movs	r2, #2
 800972c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a34      	ldr	r2, [pc, #208]	; (8009818 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d009      	beq.n	800975e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a33      	ldr	r2, [pc, #204]	; (800981c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d004      	beq.n	800975e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a31      	ldr	r2, [pc, #196]	; (8009820 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d108      	bne.n	8009770 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009764:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	4313      	orrs	r3, r2
 800976e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8009776:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800977a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	68fa      	ldr	r2, [r7, #12]
 8009782:	4313      	orrs	r3, r2
 8009784:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a21      	ldr	r2, [pc, #132]	; (8009818 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d022      	beq.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097a0:	d01d      	beq.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a1f      	ldr	r2, [pc, #124]	; (8009824 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d018      	beq.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a1d      	ldr	r2, [pc, #116]	; (8009828 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d013      	beq.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a1c      	ldr	r2, [pc, #112]	; (800982c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d00e      	beq.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a15      	ldr	r2, [pc, #84]	; (800981c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d009      	beq.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a18      	ldr	r2, [pc, #96]	; (8009830 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d004      	beq.n	80097de <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a11      	ldr	r2, [pc, #68]	; (8009820 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d10c      	bne.n	80097f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097e6:	683b      	ldr	r3, [r7, #0]
 80097e8:	689b      	ldr	r3, [r3, #8]
 80097ea:	68ba      	ldr	r2, [r7, #8]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68ba      	ldr	r2, [r7, #8]
 80097f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3714      	adds	r7, #20
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	40012c00 	.word	0x40012c00
 800981c:	40013400 	.word	0x40013400
 8009820:	40015000 	.word	0x40015000
 8009824:	40000400 	.word	0x40000400
 8009828:	40000800 	.word	0x40000800
 800982c:	40000c00 	.word	0x40000c00
 8009830:	40014000 	.word	0x40014000

08009834 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800983c:	bf00      	nop
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr

0800985c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009864:	bf00      	nop
 8009866:	370c      	adds	r7, #12
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr

08009870 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009870:	b480      	push	{r7}
 8009872:	b083      	sub	sp, #12
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009878:	bf00      	nop
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr

08009884 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009884:	b480      	push	{r7}
 8009886:	b083      	sub	sp, #12
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800988c:	bf00      	nop
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009896:	4770      	bx	lr

08009898 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009898:	b480      	push	{r7}
 800989a:	b083      	sub	sp, #12
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80098a0:	bf00      	nop
 80098a2:	370c      	adds	r7, #12
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b083      	sub	sp, #12
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80098b4:	bf00      	nop
 80098b6:	370c      	adds	r7, #12
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b085      	sub	sp, #20
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80098d0:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80098d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	b29a      	uxth	r2, r3
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80098e0:	2300      	movs	r3, #0
}
 80098e2:	4618      	mov	r0, r3
 80098e4:	3714      	adds	r7, #20
 80098e6:	46bd      	mov	sp, r7
 80098e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ec:	4770      	bx	lr

080098ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80098ee:	b480      	push	{r7}
 80098f0:	b085      	sub	sp, #20
 80098f2:	af00      	add	r7, sp, #0
 80098f4:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80098f6:	f64b 7380 	movw	r3, #49024	; 0xbf80
 80098fa:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009902:	b29a      	uxth	r2, r3
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	b29b      	uxth	r3, r3
 8009908:	43db      	mvns	r3, r3
 800990a:	b29b      	uxth	r3, r3
 800990c:	4013      	ands	r3, r2
 800990e:	b29a      	uxth	r2, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3714      	adds	r7, #20
 800991c:	46bd      	mov	sp, r7
 800991e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009922:	4770      	bx	lr

08009924 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8009924:	b480      	push	{r7}
 8009926:	b085      	sub	sp, #20
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	1d3b      	adds	r3, r7, #4
 800992e:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2201      	movs	r2, #1
 8009936:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	2200      	movs	r2, #0
 800993e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	2200      	movs	r2, #0
 8009946:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	2200      	movs	r2, #0
 800994e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009952:	2300      	movs	r3, #0
}
 8009954:	4618      	mov	r0, r3
 8009956:	3714      	adds	r7, #20
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009960:	b480      	push	{r7}
 8009962:	b09d      	sub	sp, #116	; 0x74
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
 8009968:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800996a:	2300      	movs	r3, #0
 800996c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	781b      	ldrb	r3, [r3, #0]
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4413      	add	r3, r2
 800997a:	881b      	ldrh	r3, [r3, #0]
 800997c:	b29b      	uxth	r3, r3
 800997e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009986:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	78db      	ldrb	r3, [r3, #3]
 800998e:	2b03      	cmp	r3, #3
 8009990:	d81f      	bhi.n	80099d2 <USB_ActivateEndpoint+0x72>
 8009992:	a201      	add	r2, pc, #4	; (adr r2, 8009998 <USB_ActivateEndpoint+0x38>)
 8009994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009998:	080099a9 	.word	0x080099a9
 800999c:	080099c5 	.word	0x080099c5
 80099a0:	080099db 	.word	0x080099db
 80099a4:	080099b7 	.word	0x080099b7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80099a8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80099ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80099b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80099b4:	e012      	b.n	80099dc <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80099b6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80099ba:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80099be:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80099c2:	e00b      	b.n	80099dc <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80099c4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80099c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80099cc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 80099d0:	e004      	b.n	80099dc <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 80099d8:	e000      	b.n	80099dc <USB_ActivateEndpoint+0x7c>
      break;
 80099da:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	441a      	add	r2, r3
 80099e6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80099ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	4413      	add	r3, r2
 8009a08:	881b      	ldrh	r3, [r3, #0]
 8009a0a:	b29b      	uxth	r3, r3
 8009a0c:	b21b      	sxth	r3, r3
 8009a0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a16:	b21a      	sxth	r2, r3
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	781b      	ldrb	r3, [r3, #0]
 8009a1c:	b21b      	sxth	r3, r3
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	b21b      	sxth	r3, r3
 8009a22:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8009a26:	687a      	ldr	r2, [r7, #4]
 8009a28:	683b      	ldr	r3, [r7, #0]
 8009a2a:	781b      	ldrb	r3, [r3, #0]
 8009a2c:	009b      	lsls	r3, r3, #2
 8009a2e:	441a      	add	r2, r3
 8009a30:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8009a34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a44:	b29b      	uxth	r3, r3
 8009a46:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	7b1b      	ldrb	r3, [r3, #12]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	f040 8178 	bne.w	8009d42 <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	785b      	ldrb	r3, [r3, #1]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	f000 8084 	beq.w	8009b64 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	61bb      	str	r3, [r7, #24]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a66:	b29b      	uxth	r3, r3
 8009a68:	461a      	mov	r2, r3
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	61bb      	str	r3, [r7, #24]
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	00da      	lsls	r2, r3, #3
 8009a76:	69bb      	ldr	r3, [r7, #24]
 8009a78:	4413      	add	r3, r2
 8009a7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a7e:	617b      	str	r3, [r7, #20]
 8009a80:	683b      	ldr	r3, [r7, #0]
 8009a82:	88db      	ldrh	r3, [r3, #6]
 8009a84:	085b      	lsrs	r3, r3, #1
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	005b      	lsls	r3, r3, #1
 8009a8a:	b29a      	uxth	r2, r3
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	4413      	add	r3, r2
 8009a9a:	881b      	ldrh	r3, [r3, #0]
 8009a9c:	827b      	strh	r3, [r7, #18]
 8009a9e:	8a7b      	ldrh	r3, [r7, #18]
 8009aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d01b      	beq.n	8009ae0 <USB_ActivateEndpoint+0x180>
 8009aa8:	687a      	ldr	r2, [r7, #4]
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	781b      	ldrb	r3, [r3, #0]
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	881b      	ldrh	r3, [r3, #0]
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009abe:	823b      	strh	r3, [r7, #16]
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	441a      	add	r2, r3
 8009aca:	8a3b      	ldrh	r3, [r7, #16]
 8009acc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ad0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ad4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ad8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009adc:	b29b      	uxth	r3, r3
 8009ade:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	78db      	ldrb	r3, [r3, #3]
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d020      	beq.n	8009b2a <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	4413      	add	r3, r2
 8009af2:	881b      	ldrh	r3, [r3, #0]
 8009af4:	b29b      	uxth	r3, r3
 8009af6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009afe:	81bb      	strh	r3, [r7, #12]
 8009b00:	89bb      	ldrh	r3, [r7, #12]
 8009b02:	f083 0320 	eor.w	r3, r3, #32
 8009b06:	81bb      	strh	r3, [r7, #12]
 8009b08:	687a      	ldr	r2, [r7, #4]
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	441a      	add	r2, r3
 8009b12:	89bb      	ldrh	r3, [r7, #12]
 8009b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b24:	b29b      	uxth	r3, r3
 8009b26:	8013      	strh	r3, [r2, #0]
 8009b28:	e2d5      	b.n	800a0d6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	781b      	ldrb	r3, [r3, #0]
 8009b30:	009b      	lsls	r3, r3, #2
 8009b32:	4413      	add	r3, r2
 8009b34:	881b      	ldrh	r3, [r3, #0]
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b40:	81fb      	strh	r3, [r7, #14]
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	441a      	add	r2, r3
 8009b4c:	89fb      	ldrh	r3, [r7, #14]
 8009b4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b5e:	b29b      	uxth	r3, r3
 8009b60:	8013      	strh	r3, [r2, #0]
 8009b62:	e2b8      	b.n	800a0d6 <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	633b      	str	r3, [r7, #48]	; 0x30
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	461a      	mov	r2, r3
 8009b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b74:	4413      	add	r3, r2
 8009b76:	633b      	str	r3, [r7, #48]	; 0x30
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	781b      	ldrb	r3, [r3, #0]
 8009b7c:	00da      	lsls	r2, r3, #3
 8009b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b80:	4413      	add	r3, r2
 8009b82:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	88db      	ldrh	r3, [r3, #6]
 8009b8c:	085b      	lsrs	r3, r3, #1
 8009b8e:	b29b      	uxth	r3, r3
 8009b90:	005b      	lsls	r3, r3, #1
 8009b92:	b29a      	uxth	r2, r3
 8009b94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b96:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009ba2:	b29b      	uxth	r3, r3
 8009ba4:	461a      	mov	r2, r3
 8009ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba8:	4413      	add	r3, r2
 8009baa:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	781b      	ldrb	r3, [r3, #0]
 8009bb0:	00da      	lsls	r2, r3, #3
 8009bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009bba:	627b      	str	r3, [r7, #36]	; 0x24
 8009bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbe:	881b      	ldrh	r3, [r3, #0]
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009bc6:	b29a      	uxth	r2, r3
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	801a      	strh	r2, [r3, #0]
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	691b      	ldr	r3, [r3, #16]
 8009bd0:	2b3e      	cmp	r3, #62	; 0x3e
 8009bd2:	d91d      	bls.n	8009c10 <USB_ActivateEndpoint+0x2b0>
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	095b      	lsrs	r3, r3, #5
 8009bda:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	691b      	ldr	r3, [r3, #16]
 8009be0:	f003 031f 	and.w	r3, r3, #31
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d102      	bne.n	8009bee <USB_ActivateEndpoint+0x28e>
 8009be8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009bea:	3b01      	subs	r3, #1
 8009bec:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf0:	881b      	ldrh	r3, [r3, #0]
 8009bf2:	b29a      	uxth	r2, r3
 8009bf4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009bf6:	b29b      	uxth	r3, r3
 8009bf8:	029b      	lsls	r3, r3, #10
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	b29b      	uxth	r3, r3
 8009c00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c08:	b29a      	uxth	r2, r3
 8009c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0c:	801a      	strh	r2, [r3, #0]
 8009c0e:	e026      	b.n	8009c5e <USB_ActivateEndpoint+0x2fe>
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	691b      	ldr	r3, [r3, #16]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10a      	bne.n	8009c2e <USB_ActivateEndpoint+0x2ce>
 8009c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	b29b      	uxth	r3, r3
 8009c1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009c22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009c26:	b29a      	uxth	r2, r3
 8009c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c2a:	801a      	strh	r2, [r3, #0]
 8009c2c:	e017      	b.n	8009c5e <USB_ActivateEndpoint+0x2fe>
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	691b      	ldr	r3, [r3, #16]
 8009c32:	085b      	lsrs	r3, r3, #1
 8009c34:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	691b      	ldr	r3, [r3, #16]
 8009c3a:	f003 0301 	and.w	r3, r3, #1
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d002      	beq.n	8009c48 <USB_ActivateEndpoint+0x2e8>
 8009c42:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c44:	3301      	adds	r3, #1
 8009c46:	66bb      	str	r3, [r7, #104]	; 0x68
 8009c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4a:	881b      	ldrh	r3, [r3, #0]
 8009c4c:	b29a      	uxth	r2, r3
 8009c4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	029b      	lsls	r3, r3, #10
 8009c54:	b29b      	uxth	r3, r3
 8009c56:	4313      	orrs	r3, r2
 8009c58:	b29a      	uxth	r2, r3
 8009c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c5c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	009b      	lsls	r3, r3, #2
 8009c66:	4413      	add	r3, r2
 8009c68:	881b      	ldrh	r3, [r3, #0]
 8009c6a:	847b      	strh	r3, [r7, #34]	; 0x22
 8009c6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009c6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d01b      	beq.n	8009cae <USB_ActivateEndpoint+0x34e>
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	881b      	ldrh	r3, [r3, #0]
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c8c:	843b      	strh	r3, [r7, #32]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	441a      	add	r2, r3
 8009c98:	8c3b      	ldrh	r3, [r7, #32]
 8009c9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ca2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	781b      	ldrb	r3, [r3, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d124      	bne.n	8009d00 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009cb6:	687a      	ldr	r2, [r7, #4]
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	781b      	ldrb	r3, [r3, #0]
 8009cbc:	009b      	lsls	r3, r3, #2
 8009cbe:	4413      	add	r3, r2
 8009cc0:	881b      	ldrh	r3, [r3, #0]
 8009cc2:	b29b      	uxth	r3, r3
 8009cc4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ccc:	83bb      	strh	r3, [r7, #28]
 8009cce:	8bbb      	ldrh	r3, [r7, #28]
 8009cd0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009cd4:	83bb      	strh	r3, [r7, #28]
 8009cd6:	8bbb      	ldrh	r3, [r7, #28]
 8009cd8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009cdc:	83bb      	strh	r3, [r7, #28]
 8009cde:	687a      	ldr	r2, [r7, #4]
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	781b      	ldrb	r3, [r3, #0]
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	441a      	add	r2, r3
 8009ce8:	8bbb      	ldrh	r3, [r7, #28]
 8009cea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cfa:	b29b      	uxth	r3, r3
 8009cfc:	8013      	strh	r3, [r2, #0]
 8009cfe:	e1ea      	b.n	800a0d6 <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	4413      	add	r3, r2
 8009d0a:	881b      	ldrh	r3, [r3, #0]
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d16:	83fb      	strh	r3, [r7, #30]
 8009d18:	8bfb      	ldrh	r3, [r7, #30]
 8009d1a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009d1e:	83fb      	strh	r3, [r7, #30]
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	683b      	ldr	r3, [r7, #0]
 8009d24:	781b      	ldrb	r3, [r3, #0]
 8009d26:	009b      	lsls	r3, r3, #2
 8009d28:	441a      	add	r2, r3
 8009d2a:	8bfb      	ldrh	r3, [r7, #30]
 8009d2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d3c:	b29b      	uxth	r3, r3
 8009d3e:	8013      	strh	r3, [r2, #0]
 8009d40:	e1c9      	b.n	800a0d6 <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	78db      	ldrb	r3, [r3, #3]
 8009d46:	2b02      	cmp	r3, #2
 8009d48:	d11e      	bne.n	8009d88 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	4413      	add	r3, r2
 8009d54:	881b      	ldrh	r3, [r3, #0]
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d60:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	441a      	add	r2, r3
 8009d6e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009d72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d7a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009d7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d82:	b29b      	uxth	r3, r3
 8009d84:	8013      	strh	r3, [r2, #0]
 8009d86:	e01d      	b.n	8009dc4 <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009d88:	687a      	ldr	r2, [r7, #4]
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	009b      	lsls	r3, r3, #2
 8009d90:	4413      	add	r3, r2
 8009d92:	881b      	ldrh	r3, [r3, #0]
 8009d94:	b29b      	uxth	r3, r3
 8009d96:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d9e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	009b      	lsls	r3, r3, #2
 8009daa:	441a      	add	r2, r3
 8009dac:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009db0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009db4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009db8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009dce:	b29b      	uxth	r3, r3
 8009dd0:	461a      	mov	r2, r3
 8009dd2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009dd4:	4413      	add	r3, r2
 8009dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	781b      	ldrb	r3, [r3, #0]
 8009ddc:	00da      	lsls	r2, r3, #3
 8009dde:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009de0:	4413      	add	r3, r2
 8009de2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009de6:	65bb      	str	r3, [r7, #88]	; 0x58
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	891b      	ldrh	r3, [r3, #8]
 8009dec:	085b      	lsrs	r3, r3, #1
 8009dee:	b29b      	uxth	r3, r3
 8009df0:	005b      	lsls	r3, r3, #1
 8009df2:	b29a      	uxth	r2, r3
 8009df4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009df6:	801a      	strh	r2, [r3, #0]
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	657b      	str	r3, [r7, #84]	; 0x54
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	461a      	mov	r2, r3
 8009e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e08:	4413      	add	r3, r2
 8009e0a:	657b      	str	r3, [r7, #84]	; 0x54
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	781b      	ldrb	r3, [r3, #0]
 8009e10:	00da      	lsls	r2, r3, #3
 8009e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009e14:	4413      	add	r3, r2
 8009e16:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009e1a:	653b      	str	r3, [r7, #80]	; 0x50
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	895b      	ldrh	r3, [r3, #10]
 8009e20:	085b      	lsrs	r3, r3, #1
 8009e22:	b29b      	uxth	r3, r3
 8009e24:	005b      	lsls	r3, r3, #1
 8009e26:	b29a      	uxth	r2, r3
 8009e28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009e2a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	785b      	ldrb	r3, [r3, #1]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f040 8093 	bne.w	8009f5c <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009e36:	687a      	ldr	r2, [r7, #4]
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	781b      	ldrb	r3, [r3, #0]
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	4413      	add	r3, r2
 8009e40:	881b      	ldrh	r3, [r3, #0]
 8009e42:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009e46:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d01b      	beq.n	8009e8a <USB_ActivateEndpoint+0x52a>
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	781b      	ldrb	r3, [r3, #0]
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	4413      	add	r3, r2
 8009e5c:	881b      	ldrh	r3, [r3, #0]
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e68:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009e6a:	687a      	ldr	r2, [r7, #4]
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	009b      	lsls	r3, r3, #2
 8009e72:	441a      	add	r2, r3
 8009e74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e7e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e86:	b29b      	uxth	r3, r3
 8009e88:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	4413      	add	r3, r2
 8009e94:	881b      	ldrh	r3, [r3, #0]
 8009e96:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009e98:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d01b      	beq.n	8009eda <USB_ActivateEndpoint+0x57a>
 8009ea2:	687a      	ldr	r2, [r7, #4]
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	4413      	add	r3, r2
 8009eac:	881b      	ldrh	r3, [r3, #0]
 8009eae:	b29b      	uxth	r3, r3
 8009eb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eb8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	441a      	add	r2, r3
 8009ec4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009ec6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009eca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ece:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ed2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	009b      	lsls	r3, r3, #2
 8009ee2:	4413      	add	r3, r2
 8009ee4:	881b      	ldrh	r3, [r3, #0]
 8009ee6:	b29b      	uxth	r3, r3
 8009ee8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ef0:	873b      	strh	r3, [r7, #56]	; 0x38
 8009ef2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009ef4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009ef8:	873b      	strh	r3, [r7, #56]	; 0x38
 8009efa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009efc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009f00:	873b      	strh	r3, [r7, #56]	; 0x38
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	441a      	add	r2, r3
 8009f0c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	4413      	add	r3, r2
 8009f2c:	881b      	ldrh	r3, [r3, #0]
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f38:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	441a      	add	r2, r3
 8009f44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	8013      	strh	r3, [r2, #0]
 8009f5a:	e0bc      	b.n	800a0d6 <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4413      	add	r3, r2
 8009f66:	881b      	ldrh	r3, [r3, #0]
 8009f68:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009f6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d01d      	beq.n	8009fb4 <USB_ActivateEndpoint+0x654>
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	781b      	ldrb	r3, [r3, #0]
 8009f7e:	009b      	lsls	r3, r3, #2
 8009f80:	4413      	add	r3, r2
 8009f82:	881b      	ldrh	r3, [r3, #0]
 8009f84:	b29b      	uxth	r3, r3
 8009f86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f8e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	441a      	add	r2, r3
 8009f9c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009fa0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fa4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fa8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fb0:	b29b      	uxth	r3, r3
 8009fb2:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	781b      	ldrb	r3, [r3, #0]
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	4413      	add	r3, r2
 8009fbe:	881b      	ldrh	r3, [r3, #0]
 8009fc0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009fc4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009fc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d01d      	beq.n	800a00c <USB_ActivateEndpoint+0x6ac>
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	683b      	ldr	r3, [r7, #0]
 8009fd4:	781b      	ldrb	r3, [r3, #0]
 8009fd6:	009b      	lsls	r3, r3, #2
 8009fd8:	4413      	add	r3, r2
 8009fda:	881b      	ldrh	r3, [r3, #0]
 8009fdc:	b29b      	uxth	r3, r3
 8009fde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fe6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009fea:	687a      	ldr	r2, [r7, #4]
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	009b      	lsls	r3, r3, #2
 8009ff2:	441a      	add	r2, r3
 8009ff4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009ff8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ffc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a000:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a004:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a008:	b29b      	uxth	r3, r3
 800a00a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	78db      	ldrb	r3, [r3, #3]
 800a010:	2b01      	cmp	r3, #1
 800a012:	d024      	beq.n	800a05e <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a014:	687a      	ldr	r2, [r7, #4]
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	009b      	lsls	r3, r3, #2
 800a01c:	4413      	add	r3, r2
 800a01e:	881b      	ldrh	r3, [r3, #0]
 800a020:	b29b      	uxth	r3, r3
 800a022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a026:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a02a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a02e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a032:	f083 0320 	eor.w	r3, r3, #32
 800a036:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	781b      	ldrb	r3, [r3, #0]
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	441a      	add	r2, r3
 800a044:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800a048:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a04c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a050:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a054:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a058:	b29b      	uxth	r3, r3
 800a05a:	8013      	strh	r3, [r2, #0]
 800a05c:	e01d      	b.n	800a09a <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	781b      	ldrb	r3, [r3, #0]
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	4413      	add	r3, r2
 800a068:	881b      	ldrh	r3, [r3, #0]
 800a06a:	b29b      	uxth	r3, r3
 800a06c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a074:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	781b      	ldrb	r3, [r3, #0]
 800a07e:	009b      	lsls	r3, r3, #2
 800a080:	441a      	add	r2, r3
 800a082:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a086:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a08a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a08e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a092:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a096:	b29b      	uxth	r3, r3
 800a098:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a09a:	687a      	ldr	r2, [r7, #4]
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	4413      	add	r3, r2
 800a0a4:	881b      	ldrh	r3, [r3, #0]
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0b0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a0b4:	687a      	ldr	r2, [r7, #4]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	781b      	ldrb	r3, [r3, #0]
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	441a      	add	r2, r3
 800a0be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a0c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a0d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3774      	adds	r7, #116	; 0x74
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e4:	4770      	bx	lr
 800a0e6:	bf00      	nop

0800a0e8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b08d      	sub	sp, #52	; 0x34
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
 800a0f0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	7b1b      	ldrb	r3, [r3, #12]
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	f040 808e 	bne.w	800a218 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	785b      	ldrb	r3, [r3, #1]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d044      	beq.n	800a18e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a104:	687a      	ldr	r2, [r7, #4]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	781b      	ldrb	r3, [r3, #0]
 800a10a:	009b      	lsls	r3, r3, #2
 800a10c:	4413      	add	r3, r2
 800a10e:	881b      	ldrh	r3, [r3, #0]
 800a110:	81bb      	strh	r3, [r7, #12]
 800a112:	89bb      	ldrh	r3, [r7, #12]
 800a114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d01b      	beq.n	800a154 <USB_DeactivateEndpoint+0x6c>
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	781b      	ldrb	r3, [r3, #0]
 800a122:	009b      	lsls	r3, r3, #2
 800a124:	4413      	add	r3, r2
 800a126:	881b      	ldrh	r3, [r3, #0]
 800a128:	b29b      	uxth	r3, r3
 800a12a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a12e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a132:	817b      	strh	r3, [r7, #10]
 800a134:	687a      	ldr	r2, [r7, #4]
 800a136:	683b      	ldr	r3, [r7, #0]
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	009b      	lsls	r3, r3, #2
 800a13c:	441a      	add	r2, r3
 800a13e:	897b      	ldrh	r3, [r7, #10]
 800a140:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a144:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a148:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a14c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a150:	b29b      	uxth	r3, r3
 800a152:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a154:	687a      	ldr	r2, [r7, #4]
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	781b      	ldrb	r3, [r3, #0]
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	4413      	add	r3, r2
 800a15e:	881b      	ldrh	r3, [r3, #0]
 800a160:	b29b      	uxth	r3, r3
 800a162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a166:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a16a:	813b      	strh	r3, [r7, #8]
 800a16c:	687a      	ldr	r2, [r7, #4]
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	009b      	lsls	r3, r3, #2
 800a174:	441a      	add	r2, r3
 800a176:	893b      	ldrh	r3, [r7, #8]
 800a178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a17c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a188:	b29b      	uxth	r3, r3
 800a18a:	8013      	strh	r3, [r2, #0]
 800a18c:	e192      	b.n	800a4b4 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4413      	add	r3, r2
 800a198:	881b      	ldrh	r3, [r3, #0]
 800a19a:	827b      	strh	r3, [r7, #18]
 800a19c:	8a7b      	ldrh	r3, [r7, #18]
 800a19e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d01b      	beq.n	800a1de <USB_DeactivateEndpoint+0xf6>
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	781b      	ldrb	r3, [r3, #0]
 800a1ac:	009b      	lsls	r3, r3, #2
 800a1ae:	4413      	add	r3, r2
 800a1b0:	881b      	ldrh	r3, [r3, #0]
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1bc:	823b      	strh	r3, [r7, #16]
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	781b      	ldrb	r3, [r3, #0]
 800a1c4:	009b      	lsls	r3, r3, #2
 800a1c6:	441a      	add	r2, r3
 800a1c8:	8a3b      	ldrh	r3, [r7, #16]
 800a1ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a1d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	781b      	ldrb	r3, [r3, #0]
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4413      	add	r3, r2
 800a1e8:	881b      	ldrh	r3, [r3, #0]
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a1f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1f4:	81fb      	strh	r3, [r7, #14]
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	781b      	ldrb	r3, [r3, #0]
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	441a      	add	r2, r3
 800a200:	89fb      	ldrh	r3, [r7, #14]
 800a202:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a206:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a20a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a20e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a212:	b29b      	uxth	r3, r3
 800a214:	8013      	strh	r3, [r2, #0]
 800a216:	e14d      	b.n	800a4b4 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	785b      	ldrb	r3, [r3, #1]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	f040 80a5 	bne.w	800a36c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a222:	687a      	ldr	r2, [r7, #4]
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	009b      	lsls	r3, r3, #2
 800a22a:	4413      	add	r3, r2
 800a22c:	881b      	ldrh	r3, [r3, #0]
 800a22e:	843b      	strh	r3, [r7, #32]
 800a230:	8c3b      	ldrh	r3, [r7, #32]
 800a232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a236:	2b00      	cmp	r3, #0
 800a238:	d01b      	beq.n	800a272 <USB_DeactivateEndpoint+0x18a>
 800a23a:	687a      	ldr	r2, [r7, #4]
 800a23c:	683b      	ldr	r3, [r7, #0]
 800a23e:	781b      	ldrb	r3, [r3, #0]
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	4413      	add	r3, r2
 800a244:	881b      	ldrh	r3, [r3, #0]
 800a246:	b29b      	uxth	r3, r3
 800a248:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a24c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a250:	83fb      	strh	r3, [r7, #30]
 800a252:	687a      	ldr	r2, [r7, #4]
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	009b      	lsls	r3, r3, #2
 800a25a:	441a      	add	r2, r3
 800a25c:	8bfb      	ldrh	r3, [r7, #30]
 800a25e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a262:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a266:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a26a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a26e:	b29b      	uxth	r3, r3
 800a270:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	781b      	ldrb	r3, [r3, #0]
 800a278:	009b      	lsls	r3, r3, #2
 800a27a:	4413      	add	r3, r2
 800a27c:	881b      	ldrh	r3, [r3, #0]
 800a27e:	83bb      	strh	r3, [r7, #28]
 800a280:	8bbb      	ldrh	r3, [r7, #28]
 800a282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a286:	2b00      	cmp	r3, #0
 800a288:	d01b      	beq.n	800a2c2 <USB_DeactivateEndpoint+0x1da>
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	781b      	ldrb	r3, [r3, #0]
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	4413      	add	r3, r2
 800a294:	881b      	ldrh	r3, [r3, #0]
 800a296:	b29b      	uxth	r3, r3
 800a298:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a29c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2a0:	837b      	strh	r3, [r7, #26]
 800a2a2:	687a      	ldr	r2, [r7, #4]
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	781b      	ldrb	r3, [r3, #0]
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	441a      	add	r2, r3
 800a2ac:	8b7b      	ldrh	r3, [r7, #26]
 800a2ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a2be:	b29b      	uxth	r3, r3
 800a2c0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	4413      	add	r3, r2
 800a2cc:	881b      	ldrh	r3, [r3, #0]
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2d8:	833b      	strh	r3, [r7, #24]
 800a2da:	687a      	ldr	r2, [r7, #4]
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	781b      	ldrb	r3, [r3, #0]
 800a2e0:	009b      	lsls	r3, r3, #2
 800a2e2:	441a      	add	r2, r3
 800a2e4:	8b3b      	ldrh	r3, [r7, #24]
 800a2e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a2f6:	b29b      	uxth	r3, r3
 800a2f8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a2fa:	687a      	ldr	r2, [r7, #4]
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	4413      	add	r3, r2
 800a304:	881b      	ldrh	r3, [r3, #0]
 800a306:	b29b      	uxth	r3, r3
 800a308:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a30c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a310:	82fb      	strh	r3, [r7, #22]
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	683b      	ldr	r3, [r7, #0]
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	009b      	lsls	r3, r3, #2
 800a31a:	441a      	add	r2, r3
 800a31c:	8afb      	ldrh	r3, [r7, #22]
 800a31e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a322:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a326:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a32a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a32e:	b29b      	uxth	r3, r3
 800a330:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a332:	687a      	ldr	r2, [r7, #4]
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	781b      	ldrb	r3, [r3, #0]
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4413      	add	r3, r2
 800a33c:	881b      	ldrh	r3, [r3, #0]
 800a33e:	b29b      	uxth	r3, r3
 800a340:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a344:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a348:	82bb      	strh	r3, [r7, #20]
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	683b      	ldr	r3, [r7, #0]
 800a34e:	781b      	ldrb	r3, [r3, #0]
 800a350:	009b      	lsls	r3, r3, #2
 800a352:	441a      	add	r2, r3
 800a354:	8abb      	ldrh	r3, [r7, #20]
 800a356:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a35a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a35e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a366:	b29b      	uxth	r3, r3
 800a368:	8013      	strh	r3, [r2, #0]
 800a36a:	e0a3      	b.n	800a4b4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a36c:	687a      	ldr	r2, [r7, #4]
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	009b      	lsls	r3, r3, #2
 800a374:	4413      	add	r3, r2
 800a376:	881b      	ldrh	r3, [r3, #0]
 800a378:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a37a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a37c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a380:	2b00      	cmp	r3, #0
 800a382:	d01b      	beq.n	800a3bc <USB_DeactivateEndpoint+0x2d4>
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	781b      	ldrb	r3, [r3, #0]
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	4413      	add	r3, r2
 800a38e:	881b      	ldrh	r3, [r3, #0]
 800a390:	b29b      	uxth	r3, r3
 800a392:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a39a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a39c:	687a      	ldr	r2, [r7, #4]
 800a39e:	683b      	ldr	r3, [r7, #0]
 800a3a0:	781b      	ldrb	r3, [r3, #0]
 800a3a2:	009b      	lsls	r3, r3, #2
 800a3a4:	441a      	add	r2, r3
 800a3a6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a3a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a3b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3b8:	b29b      	uxth	r3, r3
 800a3ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	4413      	add	r3, r2
 800a3c6:	881b      	ldrh	r3, [r3, #0]
 800a3c8:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a3ca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a3cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d01b      	beq.n	800a40c <USB_DeactivateEndpoint+0x324>
 800a3d4:	687a      	ldr	r2, [r7, #4]
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	009b      	lsls	r3, r3, #2
 800a3dc:	4413      	add	r3, r2
 800a3de:	881b      	ldrh	r3, [r3, #0]
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3ea:	853b      	strh	r3, [r7, #40]	; 0x28
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	441a      	add	r2, r3
 800a3f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a3f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3fc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a400:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a404:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a408:	b29b      	uxth	r3, r3
 800a40a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	781b      	ldrb	r3, [r3, #0]
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	4413      	add	r3, r2
 800a416:	881b      	ldrh	r3, [r3, #0]
 800a418:	b29b      	uxth	r3, r3
 800a41a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a41e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a422:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	781b      	ldrb	r3, [r3, #0]
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	441a      	add	r2, r3
 800a42e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a430:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a434:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a438:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a43c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a440:	b29b      	uxth	r3, r3
 800a442:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a444:	687a      	ldr	r2, [r7, #4]
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	4413      	add	r3, r2
 800a44e:	881b      	ldrh	r3, [r3, #0]
 800a450:	b29b      	uxth	r3, r3
 800a452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a456:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a45a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a45c:	687a      	ldr	r2, [r7, #4]
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	009b      	lsls	r3, r3, #2
 800a464:	441a      	add	r2, r3
 800a466:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a468:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a46c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a470:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a478:	b29b      	uxth	r3, r3
 800a47a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a47c:	687a      	ldr	r2, [r7, #4]
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	4413      	add	r3, r2
 800a486:	881b      	ldrh	r3, [r3, #0]
 800a488:	b29b      	uxth	r3, r3
 800a48a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a48e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a492:	847b      	strh	r3, [r7, #34]	; 0x22
 800a494:	687a      	ldr	r2, [r7, #4]
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	009b      	lsls	r3, r3, #2
 800a49c:	441a      	add	r2, r3
 800a49e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a4a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a4a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a4a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a4ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4b0:	b29b      	uxth	r3, r3
 800a4b2:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3734      	adds	r7, #52	; 0x34
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	b0c2      	sub	sp, #264	; 0x108
 800a4c6:	af00      	add	r7, sp, #0
 800a4c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4d0:	6018      	str	r0, [r3, #0]
 800a4d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4da:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a4dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	785b      	ldrb	r3, [r3, #1]
 800a4e8:	2b01      	cmp	r3, #1
 800a4ea:	f040 86b7 	bne.w	800b25c <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a4ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	699a      	ldr	r2, [r3, #24]
 800a4fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	429a      	cmp	r2, r3
 800a508:	d908      	bls.n	800a51c <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a50a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a50e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	691b      	ldr	r3, [r3, #16]
 800a516:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a51a:	e007      	b.n	800a52c <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a51c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a520:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	699b      	ldr	r3, [r3, #24]
 800a528:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a52c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a530:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	7b1b      	ldrb	r3, [r3, #12]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d13a      	bne.n	800a5b2 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a53c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	6959      	ldr	r1, [r3, #20]
 800a548:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a54c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	88da      	ldrh	r2, [r3, #6]
 800a554:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a558:	b29b      	uxth	r3, r3
 800a55a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a55e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a562:	6800      	ldr	r0, [r0, #0]
 800a564:	f001 fc98 	bl	800be98 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a56c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	613b      	str	r3, [r7, #16]
 800a574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a578:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a582:	b29b      	uxth	r3, r3
 800a584:	461a      	mov	r2, r3
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	4413      	add	r3, r2
 800a58a:	613b      	str	r3, [r7, #16]
 800a58c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a590:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	781b      	ldrb	r3, [r3, #0]
 800a598:	00da      	lsls	r2, r3, #3
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	4413      	add	r3, r2
 800a59e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a5a2:	60fb      	str	r3, [r7, #12]
 800a5a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5a8:	b29a      	uxth	r2, r3
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	801a      	strh	r2, [r3, #0]
 800a5ae:	f000 be1f 	b.w	800b1f0 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a5b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	78db      	ldrb	r3, [r3, #3]
 800a5be:	2b02      	cmp	r3, #2
 800a5c0:	f040 8462 	bne.w	800ae88 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a5c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	6a1a      	ldr	r2, [r3, #32]
 800a5d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	691b      	ldr	r3, [r3, #16]
 800a5dc:	429a      	cmp	r2, r3
 800a5de:	f240 83df 	bls.w	800ada0 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a5e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5e6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5ea:	681a      	ldr	r2, [r3, #0]
 800a5ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	781b      	ldrb	r3, [r3, #0]
 800a5f8:	009b      	lsls	r3, r3, #2
 800a5fa:	4413      	add	r3, r2
 800a5fc:	881b      	ldrh	r3, [r3, #0]
 800a5fe:	b29b      	uxth	r3, r3
 800a600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a608:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a60c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a610:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a61a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	441a      	add	r2, r3
 800a626:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a62a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a62e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a632:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a63e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a642:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	6a1a      	ldr	r2, [r3, #32]
 800a64a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a64e:	1ad2      	subs	r2, r2, r3
 800a650:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a654:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a65c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a660:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a664:	681a      	ldr	r2, [r3, #0]
 800a666:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a66a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	781b      	ldrb	r3, [r3, #0]
 800a672:	009b      	lsls	r3, r3, #2
 800a674:	4413      	add	r3, r2
 800a676:	881b      	ldrh	r3, [r3, #0]
 800a678:	b29b      	uxth	r3, r3
 800a67a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a67e:	2b00      	cmp	r3, #0
 800a680:	f000 81c7 	beq.w	800aa12 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a684:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a688:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	633b      	str	r3, [r7, #48]	; 0x30
 800a690:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a694:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	785b      	ldrb	r3, [r3, #1]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d177      	bne.n	800a790 <USB_EPStartXfer+0x2ce>
 800a6a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	461a      	mov	r2, r3
 800a6be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6c0:	4413      	add	r3, r2
 800a6c2:	62bb      	str	r3, [r7, #40]	; 0x28
 800a6c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a6c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	00da      	lsls	r2, r3, #3
 800a6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d4:	4413      	add	r3, r2
 800a6d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a6da:	627b      	str	r3, [r7, #36]	; 0x24
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6de:	881b      	ldrh	r3, [r3, #0]
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a6e6:	b29a      	uxth	r2, r3
 800a6e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ea:	801a      	strh	r2, [r3, #0]
 800a6ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f0:	2b3e      	cmp	r3, #62	; 0x3e
 800a6f2:	d921      	bls.n	800a738 <USB_EPStartXfer+0x276>
 800a6f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6f8:	095b      	lsrs	r3, r3, #5
 800a6fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a6fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a702:	f003 031f 	and.w	r3, r3, #31
 800a706:	2b00      	cmp	r3, #0
 800a708:	d104      	bne.n	800a714 <USB_EPStartXfer+0x252>
 800a70a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a70e:	3b01      	subs	r3, #1
 800a710:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a716:	881b      	ldrh	r3, [r3, #0]
 800a718:	b29a      	uxth	r2, r3
 800a71a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a71e:	b29b      	uxth	r3, r3
 800a720:	029b      	lsls	r3, r3, #10
 800a722:	b29b      	uxth	r3, r3
 800a724:	4313      	orrs	r3, r2
 800a726:	b29b      	uxth	r3, r3
 800a728:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a72c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a730:	b29a      	uxth	r2, r3
 800a732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a734:	801a      	strh	r2, [r3, #0]
 800a736:	e050      	b.n	800a7da <USB_EPStartXfer+0x318>
 800a738:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d10a      	bne.n	800a756 <USB_EPStartXfer+0x294>
 800a740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a742:	881b      	ldrh	r3, [r3, #0]
 800a744:	b29b      	uxth	r3, r3
 800a746:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a74a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a74e:	b29a      	uxth	r2, r3
 800a750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a752:	801a      	strh	r2, [r3, #0]
 800a754:	e041      	b.n	800a7da <USB_EPStartXfer+0x318>
 800a756:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a75a:	085b      	lsrs	r3, r3, #1
 800a75c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a760:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a764:	f003 0301 	and.w	r3, r3, #1
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d004      	beq.n	800a776 <USB_EPStartXfer+0x2b4>
 800a76c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a770:	3301      	adds	r3, #1
 800a772:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a778:	881b      	ldrh	r3, [r3, #0]
 800a77a:	b29a      	uxth	r2, r3
 800a77c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a780:	b29b      	uxth	r3, r3
 800a782:	029b      	lsls	r3, r3, #10
 800a784:	b29b      	uxth	r3, r3
 800a786:	4313      	orrs	r3, r2
 800a788:	b29a      	uxth	r2, r3
 800a78a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78c:	801a      	strh	r2, [r3, #0]
 800a78e:	e024      	b.n	800a7da <USB_EPStartXfer+0x318>
 800a790:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a794:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	785b      	ldrb	r3, [r3, #1]
 800a79c:	2b01      	cmp	r3, #1
 800a79e:	d11c      	bne.n	800a7da <USB_EPStartXfer+0x318>
 800a7a0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7a4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7ae:	b29b      	uxth	r3, r3
 800a7b0:	461a      	mov	r2, r3
 800a7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7b4:	4413      	add	r3, r2
 800a7b6:	633b      	str	r3, [r7, #48]	; 0x30
 800a7b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	00da      	lsls	r2, r3, #3
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c8:	4413      	add	r3, r2
 800a7ca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a7ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a7d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7d4:	b29a      	uxth	r2, r3
 800a7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a7da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	895b      	ldrh	r3, [r3, #10]
 800a7e6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a7ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	6959      	ldr	r1, [r3, #20]
 800a7f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7fa:	b29b      	uxth	r3, r3
 800a7fc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a800:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a804:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a808:	6800      	ldr	r0, [r0, #0]
 800a80a:	f001 fb45 	bl	800be98 <USB_WritePMA>
            ep->xfer_buff += len;
 800a80e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	695a      	ldr	r2, [r3, #20]
 800a81a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a81e:	441a      	add	r2, r3
 800a820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a824:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a82c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	6a1a      	ldr	r2, [r3, #32]
 800a838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a83c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	691b      	ldr	r3, [r3, #16]
 800a844:	429a      	cmp	r2, r3
 800a846:	d90f      	bls.n	800a868 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a84c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	6a1a      	ldr	r2, [r3, #32]
 800a854:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a858:	1ad2      	subs	r2, r2, r3
 800a85a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a85e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	621a      	str	r2, [r3, #32]
 800a866:	e00e      	b.n	800a886 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a868:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a86c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	6a1b      	ldr	r3, [r3, #32]
 800a874:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a878:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a87c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2200      	movs	r2, #0
 800a884:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a886:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a88a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	785b      	ldrb	r3, [r3, #1]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d177      	bne.n	800a986 <USB_EPStartXfer+0x4c4>
 800a896:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a89a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	61bb      	str	r3, [r7, #24]
 800a8a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	461a      	mov	r2, r3
 800a8b4:	69bb      	ldr	r3, [r7, #24]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	61bb      	str	r3, [r7, #24]
 800a8ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a8be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	00da      	lsls	r2, r3, #3
 800a8c8:	69bb      	ldr	r3, [r7, #24]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a8d0:	617b      	str	r3, [r7, #20]
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	881b      	ldrh	r3, [r3, #0]
 800a8d6:	b29b      	uxth	r3, r3
 800a8d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a8dc:	b29a      	uxth	r2, r3
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	801a      	strh	r2, [r3, #0]
 800a8e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8e6:	2b3e      	cmp	r3, #62	; 0x3e
 800a8e8:	d921      	bls.n	800a92e <USB_EPStartXfer+0x46c>
 800a8ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ee:	095b      	lsrs	r3, r3, #5
 800a8f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a8f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8f8:	f003 031f 	and.w	r3, r3, #31
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d104      	bne.n	800a90a <USB_EPStartXfer+0x448>
 800a900:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a904:	3b01      	subs	r3, #1
 800a906:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	881b      	ldrh	r3, [r3, #0]
 800a90e:	b29a      	uxth	r2, r3
 800a910:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a914:	b29b      	uxth	r3, r3
 800a916:	029b      	lsls	r3, r3, #10
 800a918:	b29b      	uxth	r3, r3
 800a91a:	4313      	orrs	r3, r2
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a922:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a926:	b29a      	uxth	r2, r3
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	801a      	strh	r2, [r3, #0]
 800a92c:	e056      	b.n	800a9dc <USB_EPStartXfer+0x51a>
 800a92e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a932:	2b00      	cmp	r3, #0
 800a934:	d10a      	bne.n	800a94c <USB_EPStartXfer+0x48a>
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	881b      	ldrh	r3, [r3, #0]
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a940:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a944:	b29a      	uxth	r2, r3
 800a946:	697b      	ldr	r3, [r7, #20]
 800a948:	801a      	strh	r2, [r3, #0]
 800a94a:	e047      	b.n	800a9dc <USB_EPStartXfer+0x51a>
 800a94c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a950:	085b      	lsrs	r3, r3, #1
 800a952:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a956:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a95a:	f003 0301 	and.w	r3, r3, #1
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d004      	beq.n	800a96c <USB_EPStartXfer+0x4aa>
 800a962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a966:	3301      	adds	r3, #1
 800a968:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	881b      	ldrh	r3, [r3, #0]
 800a970:	b29a      	uxth	r2, r3
 800a972:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a976:	b29b      	uxth	r3, r3
 800a978:	029b      	lsls	r3, r3, #10
 800a97a:	b29b      	uxth	r3, r3
 800a97c:	4313      	orrs	r3, r2
 800a97e:	b29a      	uxth	r2, r3
 800a980:	697b      	ldr	r3, [r7, #20]
 800a982:	801a      	strh	r2, [r3, #0]
 800a984:	e02a      	b.n	800a9dc <USB_EPStartXfer+0x51a>
 800a986:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a98a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	785b      	ldrb	r3, [r3, #1]
 800a992:	2b01      	cmp	r3, #1
 800a994:	d122      	bne.n	800a9dc <USB_EPStartXfer+0x51a>
 800a996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a99a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	623b      	str	r3, [r7, #32]
 800a9a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	6a3b      	ldr	r3, [r7, #32]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	623b      	str	r3, [r7, #32]
 800a9ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	00da      	lsls	r2, r3, #3
 800a9c8:	6a3b      	ldr	r3, [r7, #32]
 800a9ca:	4413      	add	r3, r2
 800a9cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a9d0:	61fb      	str	r3, [r7, #28]
 800a9d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9d6:	b29a      	uxth	r2, r3
 800a9d8:	69fb      	ldr	r3, [r7, #28]
 800a9da:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a9dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	891b      	ldrh	r3, [r3, #8]
 800a9e8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a9ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	6959      	ldr	r1, [r3, #20]
 800a9f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800aa02:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800aa06:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800aa0a:	6800      	ldr	r0, [r0, #0]
 800aa0c:	f001 fa44 	bl	800be98 <USB_WritePMA>
 800aa10:	e3ee      	b.n	800b1f0 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800aa12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	785b      	ldrb	r3, [r3, #1]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d177      	bne.n	800ab12 <USB_EPStartXfer+0x650>
 800aa22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	461a      	mov	r2, r3
 800aa40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa42:	4413      	add	r3, r2
 800aa44:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	781b      	ldrb	r3, [r3, #0]
 800aa52:	00da      	lsls	r2, r3, #3
 800aa54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa56:	4413      	add	r3, r2
 800aa58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aa5c:	647b      	str	r3, [r7, #68]	; 0x44
 800aa5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa60:	881b      	ldrh	r3, [r3, #0]
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa6c:	801a      	strh	r2, [r3, #0]
 800aa6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa72:	2b3e      	cmp	r3, #62	; 0x3e
 800aa74:	d921      	bls.n	800aaba <USB_EPStartXfer+0x5f8>
 800aa76:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa7a:	095b      	lsrs	r3, r3, #5
 800aa7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa84:	f003 031f 	and.w	r3, r3, #31
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d104      	bne.n	800aa96 <USB_EPStartXfer+0x5d4>
 800aa8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa90:	3b01      	subs	r3, #1
 800aa92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa98:	881b      	ldrh	r3, [r3, #0]
 800aa9a:	b29a      	uxth	r2, r3
 800aa9c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aaa0:	b29b      	uxth	r3, r3
 800aaa2:	029b      	lsls	r3, r3, #10
 800aaa4:	b29b      	uxth	r3, r3
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aaae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aab2:	b29a      	uxth	r2, r3
 800aab4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aab6:	801a      	strh	r2, [r3, #0]
 800aab8:	e056      	b.n	800ab68 <USB_EPStartXfer+0x6a6>
 800aaba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	d10a      	bne.n	800aad8 <USB_EPStartXfer+0x616>
 800aac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aac4:	881b      	ldrh	r3, [r3, #0]
 800aac6:	b29b      	uxth	r3, r3
 800aac8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aacc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aad0:	b29a      	uxth	r2, r3
 800aad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aad4:	801a      	strh	r2, [r3, #0]
 800aad6:	e047      	b.n	800ab68 <USB_EPStartXfer+0x6a6>
 800aad8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aadc:	085b      	lsrs	r3, r3, #1
 800aade:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aae2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aae6:	f003 0301 	and.w	r3, r3, #1
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d004      	beq.n	800aaf8 <USB_EPStartXfer+0x636>
 800aaee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aaf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aafa:	881b      	ldrh	r3, [r3, #0]
 800aafc:	b29a      	uxth	r2, r3
 800aafe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ab02:	b29b      	uxth	r3, r3
 800ab04:	029b      	lsls	r3, r3, #10
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	b29a      	uxth	r2, r3
 800ab0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab0e:	801a      	strh	r2, [r3, #0]
 800ab10:	e02a      	b.n	800ab68 <USB_EPStartXfer+0x6a6>
 800ab12:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab16:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	785b      	ldrb	r3, [r3, #1]
 800ab1e:	2b01      	cmp	r3, #1
 800ab20:	d122      	bne.n	800ab68 <USB_EPStartXfer+0x6a6>
 800ab22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab26:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	653b      	str	r3, [r7, #80]	; 0x50
 800ab2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab3c:	b29b      	uxth	r3, r3
 800ab3e:	461a      	mov	r2, r3
 800ab40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab42:	4413      	add	r3, r2
 800ab44:	653b      	str	r3, [r7, #80]	; 0x50
 800ab46:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab4a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	00da      	lsls	r2, r3, #3
 800ab54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab56:	4413      	add	r3, r2
 800ab58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ab5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab62:	b29a      	uxth	r2, r3
 800ab64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab66:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ab68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab6c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	891b      	ldrh	r3, [r3, #8]
 800ab74:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	6959      	ldr	r1, [r3, #20]
 800ab84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab88:	b29b      	uxth	r3, r3
 800ab8a:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ab8e:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ab92:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ab96:	6800      	ldr	r0, [r0, #0]
 800ab98:	f001 f97e 	bl	800be98 <USB_WritePMA>
            ep->xfer_buff += len;
 800ab9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aba0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	695a      	ldr	r2, [r3, #20]
 800aba8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abac:	441a      	add	r2, r3
 800abae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800abba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	6a1a      	ldr	r2, [r3, #32]
 800abc6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	691b      	ldr	r3, [r3, #16]
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d90f      	bls.n	800abf6 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800abd6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abda:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	6a1a      	ldr	r2, [r3, #32]
 800abe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800abe6:	1ad2      	subs	r2, r2, r3
 800abe8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	621a      	str	r2, [r3, #32]
 800abf4:	e00e      	b.n	800ac14 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800abf6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abfa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	6a1b      	ldr	r3, [r3, #32]
 800ac02:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ac06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2200      	movs	r2, #0
 800ac12:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ac14:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac18:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	643b      	str	r3, [r7, #64]	; 0x40
 800ac20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	785b      	ldrb	r3, [r3, #1]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d177      	bne.n	800ad20 <USB_EPStartXfer+0x85e>
 800ac30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac3c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac40:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac50:	4413      	add	r3, r2
 800ac52:	63bb      	str	r3, [r7, #56]	; 0x38
 800ac54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ac58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	00da      	lsls	r2, r3, #3
 800ac62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac64:	4413      	add	r3, r2
 800ac66:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ac6a:	637b      	str	r3, [r7, #52]	; 0x34
 800ac6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac6e:	881b      	ldrh	r3, [r3, #0]
 800ac70:	b29b      	uxth	r3, r3
 800ac72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ac76:	b29a      	uxth	r2, r3
 800ac78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac7a:	801a      	strh	r2, [r3, #0]
 800ac7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac80:	2b3e      	cmp	r3, #62	; 0x3e
 800ac82:	d921      	bls.n	800acc8 <USB_EPStartXfer+0x806>
 800ac84:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac88:	095b      	lsrs	r3, r3, #5
 800ac8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ac8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac92:	f003 031f 	and.w	r3, r3, #31
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d104      	bne.n	800aca4 <USB_EPStartXfer+0x7e2>
 800ac9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac9e:	3b01      	subs	r3, #1
 800aca0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800aca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca6:	881b      	ldrh	r3, [r3, #0]
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800acae:	b29b      	uxth	r3, r3
 800acb0:	029b      	lsls	r3, r3, #10
 800acb2:	b29b      	uxth	r3, r3
 800acb4:	4313      	orrs	r3, r2
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acc0:	b29a      	uxth	r2, r3
 800acc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acc4:	801a      	strh	r2, [r3, #0]
 800acc6:	e050      	b.n	800ad6a <USB_EPStartXfer+0x8a8>
 800acc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800accc:	2b00      	cmp	r3, #0
 800acce:	d10a      	bne.n	800ace6 <USB_EPStartXfer+0x824>
 800acd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800acd2:	881b      	ldrh	r3, [r3, #0]
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800acde:	b29a      	uxth	r2, r3
 800ace0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ace2:	801a      	strh	r2, [r3, #0]
 800ace4:	e041      	b.n	800ad6a <USB_EPStartXfer+0x8a8>
 800ace6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acea:	085b      	lsrs	r3, r3, #1
 800acec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800acf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acf4:	f003 0301 	and.w	r3, r3, #1
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d004      	beq.n	800ad06 <USB_EPStartXfer+0x844>
 800acfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad00:	3301      	adds	r3, #1
 800ad02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ad06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad08:	881b      	ldrh	r3, [r3, #0]
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	029b      	lsls	r3, r3, #10
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	4313      	orrs	r3, r2
 800ad18:	b29a      	uxth	r2, r3
 800ad1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad1c:	801a      	strh	r2, [r3, #0]
 800ad1e:	e024      	b.n	800ad6a <USB_EPStartXfer+0x8a8>
 800ad20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad24:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	785b      	ldrb	r3, [r3, #1]
 800ad2c:	2b01      	cmp	r3, #1
 800ad2e:	d11c      	bne.n	800ad6a <USB_EPStartXfer+0x8a8>
 800ad30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad34:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad3e:	b29b      	uxth	r3, r3
 800ad40:	461a      	mov	r2, r3
 800ad42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad44:	4413      	add	r3, r2
 800ad46:	643b      	str	r3, [r7, #64]	; 0x40
 800ad48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	00da      	lsls	r2, r3, #3
 800ad56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad58:	4413      	add	r3, r2
 800ad5a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ad5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad64:	b29a      	uxth	r2, r3
 800ad66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad68:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ad6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	895b      	ldrh	r3, [r3, #10]
 800ad76:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad7a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad7e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	6959      	ldr	r1, [r3, #20]
 800ad86:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ad90:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ad94:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ad98:	6800      	ldr	r0, [r0, #0]
 800ad9a:	f001 f87d 	bl	800be98 <USB_WritePMA>
 800ad9e:	e227      	b.n	800b1f0 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ada0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ada4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	6a1b      	ldr	r3, [r3, #32]
 800adac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800adb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adb4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	009b      	lsls	r3, r3, #2
 800adc8:	4413      	add	r3, r2
 800adca:	881b      	ldrh	r3, [r3, #0]
 800adcc:	b29b      	uxth	r3, r3
 800adce:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800add2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800add6:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800adda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adde:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ade8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	781b      	ldrb	r3, [r3, #0]
 800adf0:	009b      	lsls	r3, r3, #2
 800adf2:	441a      	add	r2, r3
 800adf4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800adf8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800adfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ae00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae08:	b29b      	uxth	r3, r3
 800ae0a:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ae0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae18:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae1c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae26:	b29b      	uxth	r3, r3
 800ae28:	461a      	mov	r2, r3
 800ae2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae2c:	4413      	add	r3, r2
 800ae2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	00da      	lsls	r2, r3, #3
 800ae3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ae40:	4413      	add	r3, r2
 800ae42:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ae46:	65bb      	str	r3, [r7, #88]	; 0x58
 800ae48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae4c:	b29a      	uxth	r2, r3
 800ae4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae50:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800ae52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae56:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	891b      	ldrh	r3, [r3, #8]
 800ae5e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ae62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	6959      	ldr	r1, [r3, #20]
 800ae6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ae78:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ae7c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ae80:	6800      	ldr	r0, [r0, #0]
 800ae82:	f001 f809 	bl	800be98 <USB_WritePMA>
 800ae86:	e1b3      	b.n	800b1f0 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ae88:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae8c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	6a1a      	ldr	r2, [r3, #32]
 800ae94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae98:	1ad2      	subs	r2, r2, r3
 800ae9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800aea6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeaa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aeae:	681a      	ldr	r2, [r3, #0]
 800aeb0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeb4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	009b      	lsls	r3, r3, #2
 800aebe:	4413      	add	r3, r2
 800aec0:	881b      	ldrh	r3, [r3, #0]
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	f000 80c6 	beq.w	800b05a <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aece:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aed2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	673b      	str	r3, [r7, #112]	; 0x70
 800aeda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aede:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	785b      	ldrb	r3, [r3, #1]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d177      	bne.n	800afda <USB_EPStartXfer+0xb18>
 800aeea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aeee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	66bb      	str	r3, [r7, #104]	; 0x68
 800aef6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aefa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af04:	b29b      	uxth	r3, r3
 800af06:	461a      	mov	r2, r3
 800af08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af0a:	4413      	add	r3, r2
 800af0c:	66bb      	str	r3, [r7, #104]	; 0x68
 800af0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	00da      	lsls	r2, r3, #3
 800af1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af1e:	4413      	add	r3, r2
 800af20:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800af24:	667b      	str	r3, [r7, #100]	; 0x64
 800af26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af28:	881b      	ldrh	r3, [r3, #0]
 800af2a:	b29b      	uxth	r3, r3
 800af2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800af30:	b29a      	uxth	r2, r3
 800af32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af34:	801a      	strh	r2, [r3, #0]
 800af36:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af3a:	2b3e      	cmp	r3, #62	; 0x3e
 800af3c:	d921      	bls.n	800af82 <USB_EPStartXfer+0xac0>
 800af3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af42:	095b      	lsrs	r3, r3, #5
 800af44:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800af48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af4c:	f003 031f 	and.w	r3, r3, #31
 800af50:	2b00      	cmp	r3, #0
 800af52:	d104      	bne.n	800af5e <USB_EPStartXfer+0xa9c>
 800af54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800af58:	3b01      	subs	r3, #1
 800af5a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800af5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af60:	881b      	ldrh	r3, [r3, #0]
 800af62:	b29a      	uxth	r2, r3
 800af64:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800af68:	b29b      	uxth	r3, r3
 800af6a:	029b      	lsls	r3, r3, #10
 800af6c:	b29b      	uxth	r3, r3
 800af6e:	4313      	orrs	r3, r2
 800af70:	b29b      	uxth	r3, r3
 800af72:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af76:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af7a:	b29a      	uxth	r2, r3
 800af7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af7e:	801a      	strh	r2, [r3, #0]
 800af80:	e050      	b.n	800b024 <USB_EPStartXfer+0xb62>
 800af82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af86:	2b00      	cmp	r3, #0
 800af88:	d10a      	bne.n	800afa0 <USB_EPStartXfer+0xade>
 800af8a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af8c:	881b      	ldrh	r3, [r3, #0]
 800af8e:	b29b      	uxth	r3, r3
 800af90:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af94:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af98:	b29a      	uxth	r2, r3
 800af9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af9c:	801a      	strh	r2, [r3, #0]
 800af9e:	e041      	b.n	800b024 <USB_EPStartXfer+0xb62>
 800afa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afa4:	085b      	lsrs	r3, r3, #1
 800afa6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800afaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afae:	f003 0301 	and.w	r3, r3, #1
 800afb2:	2b00      	cmp	r3, #0
 800afb4:	d004      	beq.n	800afc0 <USB_EPStartXfer+0xafe>
 800afb6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800afba:	3301      	adds	r3, #1
 800afbc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800afc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afc2:	881b      	ldrh	r3, [r3, #0]
 800afc4:	b29a      	uxth	r2, r3
 800afc6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800afca:	b29b      	uxth	r3, r3
 800afcc:	029b      	lsls	r3, r3, #10
 800afce:	b29b      	uxth	r3, r3
 800afd0:	4313      	orrs	r3, r2
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afd6:	801a      	strh	r2, [r3, #0]
 800afd8:	e024      	b.n	800b024 <USB_EPStartXfer+0xb62>
 800afda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	785b      	ldrb	r3, [r3, #1]
 800afe6:	2b01      	cmp	r3, #1
 800afe8:	d11c      	bne.n	800b024 <USB_EPStartXfer+0xb62>
 800afea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aff8:	b29b      	uxth	r3, r3
 800affa:	461a      	mov	r2, r3
 800affc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800affe:	4413      	add	r3, r2
 800b000:	673b      	str	r3, [r7, #112]	; 0x70
 800b002:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b006:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	00da      	lsls	r2, r3, #3
 800b010:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b012:	4413      	add	r3, r2
 800b014:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b018:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b01a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b01e:	b29a      	uxth	r2, r3
 800b020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b022:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b024:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b028:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	895b      	ldrh	r3, [r3, #10]
 800b030:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b034:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b038:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	6959      	ldr	r1, [r3, #20]
 800b040:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b044:	b29b      	uxth	r3, r3
 800b046:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b04a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b04e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b052:	6800      	ldr	r0, [r0, #0]
 800b054:	f000 ff20 	bl	800be98 <USB_WritePMA>
 800b058:	e0ca      	b.n	800b1f0 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b05a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b05e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	785b      	ldrb	r3, [r3, #1]
 800b066:	2b00      	cmp	r3, #0
 800b068:	d177      	bne.n	800b15a <USB_EPStartXfer+0xc98>
 800b06a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b06e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b076:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b07a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b084:	b29b      	uxth	r3, r3
 800b086:	461a      	mov	r2, r3
 800b088:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b08a:	4413      	add	r3, r2
 800b08c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b08e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b092:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	781b      	ldrb	r3, [r3, #0]
 800b09a:	00da      	lsls	r2, r3, #3
 800b09c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b09e:	4413      	add	r3, r2
 800b0a0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b0a4:	67bb      	str	r3, [r7, #120]	; 0x78
 800b0a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0a8:	881b      	ldrh	r3, [r3, #0]
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b0b0:	b29a      	uxth	r2, r3
 800b0b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0b4:	801a      	strh	r2, [r3, #0]
 800b0b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ba:	2b3e      	cmp	r3, #62	; 0x3e
 800b0bc:	d921      	bls.n	800b102 <USB_EPStartXfer+0xc40>
 800b0be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0c2:	095b      	lsrs	r3, r3, #5
 800b0c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b0c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0cc:	f003 031f 	and.w	r3, r3, #31
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d104      	bne.n	800b0de <USB_EPStartXfer+0xc1c>
 800b0d4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b0de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0e0:	881b      	ldrh	r3, [r3, #0]
 800b0e2:	b29a      	uxth	r2, r3
 800b0e4:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b0e8:	b29b      	uxth	r3, r3
 800b0ea:	029b      	lsls	r3, r3, #10
 800b0ec:	b29b      	uxth	r3, r3
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	b29b      	uxth	r3, r3
 800b0f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0fa:	b29a      	uxth	r2, r3
 800b0fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0fe:	801a      	strh	r2, [r3, #0]
 800b100:	e05c      	b.n	800b1bc <USB_EPStartXfer+0xcfa>
 800b102:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b106:	2b00      	cmp	r3, #0
 800b108:	d10a      	bne.n	800b120 <USB_EPStartXfer+0xc5e>
 800b10a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b10c:	881b      	ldrh	r3, [r3, #0]
 800b10e:	b29b      	uxth	r3, r3
 800b110:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b114:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b118:	b29a      	uxth	r2, r3
 800b11a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b11c:	801a      	strh	r2, [r3, #0]
 800b11e:	e04d      	b.n	800b1bc <USB_EPStartXfer+0xcfa>
 800b120:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b124:	085b      	lsrs	r3, r3, #1
 800b126:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b12a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b12e:	f003 0301 	and.w	r3, r3, #1
 800b132:	2b00      	cmp	r3, #0
 800b134:	d004      	beq.n	800b140 <USB_EPStartXfer+0xc7e>
 800b136:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b13a:	3301      	adds	r3, #1
 800b13c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b142:	881b      	ldrh	r3, [r3, #0]
 800b144:	b29a      	uxth	r2, r3
 800b146:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b14a:	b29b      	uxth	r3, r3
 800b14c:	029b      	lsls	r3, r3, #10
 800b14e:	b29b      	uxth	r3, r3
 800b150:	4313      	orrs	r3, r2
 800b152:	b29a      	uxth	r2, r3
 800b154:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b156:	801a      	strh	r2, [r3, #0]
 800b158:	e030      	b.n	800b1bc <USB_EPStartXfer+0xcfa>
 800b15a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b15e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	785b      	ldrb	r3, [r3, #1]
 800b166:	2b01      	cmp	r3, #1
 800b168:	d128      	bne.n	800b1bc <USB_EPStartXfer+0xcfa>
 800b16a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b16e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b17c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b186:	b29b      	uxth	r3, r3
 800b188:	461a      	mov	r2, r3
 800b18a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b18e:	4413      	add	r3, r2
 800b190:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b194:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b198:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	781b      	ldrb	r3, [r3, #0]
 800b1a0:	00da      	lsls	r2, r3, #3
 800b1a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b1a6:	4413      	add	r3, r2
 800b1a8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b1ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b1b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b1ba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b1bc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	891b      	ldrh	r3, [r3, #8]
 800b1c8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b1cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	6959      	ldr	r1, [r3, #20]
 800b1d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b1e2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b1e6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b1ea:	6800      	ldr	r0, [r0, #0]
 800b1ec:	f000 fe54 	bl	800be98 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b1f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1f8:	681a      	ldr	r2, [r3, #0]
 800b1fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	781b      	ldrb	r3, [r3, #0]
 800b206:	009b      	lsls	r3, r3, #2
 800b208:	4413      	add	r3, r2
 800b20a:	881b      	ldrh	r3, [r3, #0]
 800b20c:	b29b      	uxth	r3, r3
 800b20e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b212:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b216:	817b      	strh	r3, [r7, #10]
 800b218:	897b      	ldrh	r3, [r7, #10]
 800b21a:	f083 0310 	eor.w	r3, r3, #16
 800b21e:	817b      	strh	r3, [r7, #10]
 800b220:	897b      	ldrh	r3, [r7, #10]
 800b222:	f083 0320 	eor.w	r3, r3, #32
 800b226:	817b      	strh	r3, [r7, #10]
 800b228:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b22c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b230:	681a      	ldr	r2, [r3, #0]
 800b232:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b236:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	009b      	lsls	r3, r3, #2
 800b240:	441a      	add	r2, r3
 800b242:	897b      	ldrh	r3, [r7, #10]
 800b244:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b248:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b24c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b254:	b29b      	uxth	r3, r3
 800b256:	8013      	strh	r3, [r2, #0]
 800b258:	f000 bcde 	b.w	800bc18 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b25c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b260:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	7b1b      	ldrb	r3, [r3, #12]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	f040 80bb 	bne.w	800b3e4 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b26e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b272:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	699a      	ldr	r2, [r3, #24]
 800b27a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b27e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	691b      	ldr	r3, [r3, #16]
 800b286:	429a      	cmp	r2, r3
 800b288:	d917      	bls.n	800b2ba <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b28a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b28e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800b29a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b29e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	699a      	ldr	r2, [r3, #24]
 800b2a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2aa:	1ad2      	subs	r2, r2, r3
 800b2ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	619a      	str	r2, [r3, #24]
 800b2b8:	e00e      	b.n	800b2d8 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b2ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	699b      	ldr	r3, [r3, #24]
 800b2c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800b2ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b2d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b2e6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b2ea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	461a      	mov	r2, r3
 800b2f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b2fc:	4413      	add	r3, r2
 800b2fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b302:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b306:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	00da      	lsls	r2, r3, #3
 800b310:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b314:	4413      	add	r3, r2
 800b316:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b31a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b31e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b322:	881b      	ldrh	r3, [r3, #0]
 800b324:	b29b      	uxth	r3, r3
 800b326:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b32a:	b29a      	uxth	r2, r3
 800b32c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b330:	801a      	strh	r2, [r3, #0]
 800b332:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b336:	2b3e      	cmp	r3, #62	; 0x3e
 800b338:	d924      	bls.n	800b384 <USB_EPStartXfer+0xec2>
 800b33a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b33e:	095b      	lsrs	r3, r3, #5
 800b340:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b344:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b348:	f003 031f 	and.w	r3, r3, #31
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d104      	bne.n	800b35a <USB_EPStartXfer+0xe98>
 800b350:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b354:	3b01      	subs	r3, #1
 800b356:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b35a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b35e:	881b      	ldrh	r3, [r3, #0]
 800b360:	b29a      	uxth	r2, r3
 800b362:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b366:	b29b      	uxth	r3, r3
 800b368:	029b      	lsls	r3, r3, #10
 800b36a:	b29b      	uxth	r3, r3
 800b36c:	4313      	orrs	r3, r2
 800b36e:	b29b      	uxth	r3, r3
 800b370:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b374:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b378:	b29a      	uxth	r2, r3
 800b37a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b37e:	801a      	strh	r2, [r3, #0]
 800b380:	f000 bc10 	b.w	800bba4 <USB_EPStartXfer+0x16e2>
 800b384:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d10c      	bne.n	800b3a6 <USB_EPStartXfer+0xee4>
 800b38c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b390:	881b      	ldrh	r3, [r3, #0]
 800b392:	b29b      	uxth	r3, r3
 800b394:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b398:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b39c:	b29a      	uxth	r2, r3
 800b39e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3a2:	801a      	strh	r2, [r3, #0]
 800b3a4:	e3fe      	b.n	800bba4 <USB_EPStartXfer+0x16e2>
 800b3a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3aa:	085b      	lsrs	r3, r3, #1
 800b3ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b3b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b3b4:	f003 0301 	and.w	r3, r3, #1
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d004      	beq.n	800b3c6 <USB_EPStartXfer+0xf04>
 800b3bc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b3c0:	3301      	adds	r3, #1
 800b3c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b3c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3ca:	881b      	ldrh	r3, [r3, #0]
 800b3cc:	b29a      	uxth	r2, r3
 800b3ce:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	029b      	lsls	r3, r3, #10
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	4313      	orrs	r3, r2
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b3e0:	801a      	strh	r2, [r3, #0]
 800b3e2:	e3df      	b.n	800bba4 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b3e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	78db      	ldrb	r3, [r3, #3]
 800b3f0:	2b02      	cmp	r3, #2
 800b3f2:	f040 8218 	bne.w	800b826 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b3f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	785b      	ldrb	r3, [r3, #1]
 800b402:	2b00      	cmp	r3, #0
 800b404:	f040 809d 	bne.w	800b542 <USB_EPStartXfer+0x1080>
 800b408:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b40c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b416:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b41a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b424:	b29b      	uxth	r3, r3
 800b426:	461a      	mov	r2, r3
 800b428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b42c:	4413      	add	r3, r2
 800b42e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b432:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b436:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	00da      	lsls	r2, r3, #3
 800b440:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b444:	4413      	add	r3, r2
 800b446:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b44a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b44e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b452:	881b      	ldrh	r3, [r3, #0]
 800b454:	b29b      	uxth	r3, r3
 800b456:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b45a:	b29a      	uxth	r2, r3
 800b45c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b460:	801a      	strh	r2, [r3, #0]
 800b462:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	2b3e      	cmp	r3, #62	; 0x3e
 800b470:	d92b      	bls.n	800b4ca <USB_EPStartXfer+0x1008>
 800b472:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b476:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	691b      	ldr	r3, [r3, #16]
 800b47e:	095b      	lsrs	r3, r3, #5
 800b480:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b484:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b488:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	691b      	ldr	r3, [r3, #16]
 800b490:	f003 031f 	and.w	r3, r3, #31
 800b494:	2b00      	cmp	r3, #0
 800b496:	d104      	bne.n	800b4a2 <USB_EPStartXfer+0xfe0>
 800b498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b49c:	3b01      	subs	r3, #1
 800b49e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b4a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4a6:	881b      	ldrh	r3, [r3, #0]
 800b4a8:	b29a      	uxth	r2, r3
 800b4aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4ae:	b29b      	uxth	r3, r3
 800b4b0:	029b      	lsls	r3, r3, #10
 800b4b2:	b29b      	uxth	r3, r3
 800b4b4:	4313      	orrs	r3, r2
 800b4b6:	b29b      	uxth	r3, r3
 800b4b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4c6:	801a      	strh	r2, [r3, #0]
 800b4c8:	e070      	b.n	800b5ac <USB_EPStartXfer+0x10ea>
 800b4ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	691b      	ldr	r3, [r3, #16]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d10c      	bne.n	800b4f4 <USB_EPStartXfer+0x1032>
 800b4da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4de:	881b      	ldrh	r3, [r3, #0]
 800b4e0:	b29b      	uxth	r3, r3
 800b4e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b4e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b4ea:	b29a      	uxth	r2, r3
 800b4ec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4f0:	801a      	strh	r2, [r3, #0]
 800b4f2:	e05b      	b.n	800b5ac <USB_EPStartXfer+0x10ea>
 800b4f4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4f8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	691b      	ldr	r3, [r3, #16]
 800b500:	085b      	lsrs	r3, r3, #1
 800b502:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b506:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b50a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	f003 0301 	and.w	r3, r3, #1
 800b516:	2b00      	cmp	r3, #0
 800b518:	d004      	beq.n	800b524 <USB_EPStartXfer+0x1062>
 800b51a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b51e:	3301      	adds	r3, #1
 800b520:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b524:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b528:	881b      	ldrh	r3, [r3, #0]
 800b52a:	b29a      	uxth	r2, r3
 800b52c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b530:	b29b      	uxth	r3, r3
 800b532:	029b      	lsls	r3, r3, #10
 800b534:	b29b      	uxth	r3, r3
 800b536:	4313      	orrs	r3, r2
 800b538:	b29a      	uxth	r2, r3
 800b53a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b53e:	801a      	strh	r2, [r3, #0]
 800b540:	e034      	b.n	800b5ac <USB_EPStartXfer+0x10ea>
 800b542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	785b      	ldrb	r3, [r3, #1]
 800b54e:	2b01      	cmp	r3, #1
 800b550:	d12c      	bne.n	800b5ac <USB_EPStartXfer+0x10ea>
 800b552:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b556:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b560:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b564:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b56e:	b29b      	uxth	r3, r3
 800b570:	461a      	mov	r2, r3
 800b572:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b576:	4413      	add	r3, r2
 800b578:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b57c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b580:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	00da      	lsls	r2, r3, #3
 800b58a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b58e:	4413      	add	r3, r2
 800b590:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b594:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b598:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b59c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	691b      	ldr	r3, [r3, #16]
 800b5a4:	b29a      	uxth	r2, r3
 800b5a6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b5aa:	801a      	strh	r2, [r3, #0]
 800b5ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5b0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b5ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	785b      	ldrb	r3, [r3, #1]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	f040 809d 	bne.w	800b706 <USB_EPStartXfer+0x1244>
 800b5cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b5da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5e8:	b29b      	uxth	r3, r3
 800b5ea:	461a      	mov	r2, r3
 800b5ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b5f0:	4413      	add	r3, r2
 800b5f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b5f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	00da      	lsls	r2, r3, #3
 800b604:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b608:	4413      	add	r3, r2
 800b60a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b60e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b612:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b616:	881b      	ldrh	r3, [r3, #0]
 800b618:	b29b      	uxth	r3, r3
 800b61a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b61e:	b29a      	uxth	r2, r3
 800b620:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b624:	801a      	strh	r2, [r3, #0]
 800b626:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b62a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	691b      	ldr	r3, [r3, #16]
 800b632:	2b3e      	cmp	r3, #62	; 0x3e
 800b634:	d92b      	bls.n	800b68e <USB_EPStartXfer+0x11cc>
 800b636:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b63a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	691b      	ldr	r3, [r3, #16]
 800b642:	095b      	lsrs	r3, r3, #5
 800b644:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b648:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b64c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	691b      	ldr	r3, [r3, #16]
 800b654:	f003 031f 	and.w	r3, r3, #31
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d104      	bne.n	800b666 <USB_EPStartXfer+0x11a4>
 800b65c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b660:	3b01      	subs	r3, #1
 800b662:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b666:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b66a:	881b      	ldrh	r3, [r3, #0]
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b672:	b29b      	uxth	r3, r3
 800b674:	029b      	lsls	r3, r3, #10
 800b676:	b29b      	uxth	r3, r3
 800b678:	4313      	orrs	r3, r2
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b680:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b684:	b29a      	uxth	r2, r3
 800b686:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b68a:	801a      	strh	r2, [r3, #0]
 800b68c:	e069      	b.n	800b762 <USB_EPStartXfer+0x12a0>
 800b68e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	691b      	ldr	r3, [r3, #16]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d10c      	bne.n	800b6b8 <USB_EPStartXfer+0x11f6>
 800b69e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b6a2:	881b      	ldrh	r3, [r3, #0]
 800b6a4:	b29b      	uxth	r3, r3
 800b6a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6ae:	b29a      	uxth	r2, r3
 800b6b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b6b4:	801a      	strh	r2, [r3, #0]
 800b6b6:	e054      	b.n	800b762 <USB_EPStartXfer+0x12a0>
 800b6b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	085b      	lsrs	r3, r3, #1
 800b6c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b6ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	691b      	ldr	r3, [r3, #16]
 800b6d6:	f003 0301 	and.w	r3, r3, #1
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d004      	beq.n	800b6e8 <USB_EPStartXfer+0x1226>
 800b6de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b6e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b6ec:	881b      	ldrh	r3, [r3, #0]
 800b6ee:	b29a      	uxth	r2, r3
 800b6f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6f4:	b29b      	uxth	r3, r3
 800b6f6:	029b      	lsls	r3, r3, #10
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	b29a      	uxth	r2, r3
 800b6fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b702:	801a      	strh	r2, [r3, #0]
 800b704:	e02d      	b.n	800b762 <USB_EPStartXfer+0x12a0>
 800b706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b70a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	785b      	ldrb	r3, [r3, #1]
 800b712:	2b01      	cmp	r3, #1
 800b714:	d125      	bne.n	800b762 <USB_EPStartXfer+0x12a0>
 800b716:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b71a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b724:	b29b      	uxth	r3, r3
 800b726:	461a      	mov	r2, r3
 800b728:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b72c:	4413      	add	r3, r2
 800b72e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b732:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b736:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	00da      	lsls	r2, r3, #3
 800b740:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b744:	4413      	add	r3, r2
 800b746:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b74a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b74e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	691b      	ldr	r3, [r3, #16]
 800b75a:	b29a      	uxth	r2, r3
 800b75c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b760:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	69db      	ldr	r3, [r3, #28]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f000 8218 	beq.w	800bba4 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b774:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b778:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b782:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	781b      	ldrb	r3, [r3, #0]
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	4413      	add	r3, r2
 800b78e:	881b      	ldrh	r3, [r3, #0]
 800b790:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b794:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b798:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d005      	beq.n	800b7ac <USB_EPStartXfer+0x12ea>
 800b7a0:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b7a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d10d      	bne.n	800b7c8 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b7ac:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b7b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	f040 81f5 	bne.w	800bba4 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b7ba:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b7be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	f040 81ee 	bne.w	800bba4 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b7c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7d0:	681a      	ldr	r2, [r3, #0]
 800b7d2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	781b      	ldrb	r3, [r3, #0]
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	4413      	add	r3, r2
 800b7e2:	881b      	ldrh	r3, [r3, #0]
 800b7e4:	b29b      	uxth	r3, r3
 800b7e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b7ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b7ee:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b7f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b800:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	781b      	ldrb	r3, [r3, #0]
 800b808:	009b      	lsls	r3, r3, #2
 800b80a:	441a      	add	r2, r3
 800b80c:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b810:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b814:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b818:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b81c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b820:	b29b      	uxth	r3, r3
 800b822:	8013      	strh	r3, [r2, #0]
 800b824:	e1be      	b.n	800bba4 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b826:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b82a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	78db      	ldrb	r3, [r3, #3]
 800b832:	2b01      	cmp	r3, #1
 800b834:	f040 81b4 	bne.w	800bba0 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b838:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b83c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	699a      	ldr	r2, [r3, #24]
 800b844:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b848:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	691b      	ldr	r3, [r3, #16]
 800b850:	429a      	cmp	r2, r3
 800b852:	d917      	bls.n	800b884 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b854:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b858:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	691b      	ldr	r3, [r3, #16]
 800b860:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b864:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b868:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	699a      	ldr	r2, [r3, #24]
 800b870:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b874:	1ad2      	subs	r2, r2, r3
 800b876:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b87a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	619a      	str	r2, [r3, #24]
 800b882:	e00e      	b.n	800b8a2 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b884:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b888:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	699b      	ldr	r3, [r3, #24]
 800b890:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b894:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b898:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2200      	movs	r2, #0
 800b8a0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b8a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8a6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	785b      	ldrb	r3, [r3, #1]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	f040 8085 	bne.w	800b9be <USB_EPStartXfer+0x14fc>
 800b8b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8b8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b8c2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b8d8:	4413      	add	r3, r2
 800b8da:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b8de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b8e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	781b      	ldrb	r3, [r3, #0]
 800b8ea:	00da      	lsls	r2, r3, #3
 800b8ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b8f0:	4413      	add	r3, r2
 800b8f2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b8f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b8fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b8fe:	881b      	ldrh	r3, [r3, #0]
 800b900:	b29b      	uxth	r3, r3
 800b902:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b906:	b29a      	uxth	r2, r3
 800b908:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b90c:	801a      	strh	r2, [r3, #0]
 800b90e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b912:	2b3e      	cmp	r3, #62	; 0x3e
 800b914:	d923      	bls.n	800b95e <USB_EPStartXfer+0x149c>
 800b916:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b91a:	095b      	lsrs	r3, r3, #5
 800b91c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b920:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b924:	f003 031f 	and.w	r3, r3, #31
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d104      	bne.n	800b936 <USB_EPStartXfer+0x1474>
 800b92c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b930:	3b01      	subs	r3, #1
 800b932:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b936:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b93a:	881b      	ldrh	r3, [r3, #0]
 800b93c:	b29a      	uxth	r2, r3
 800b93e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b942:	b29b      	uxth	r3, r3
 800b944:	029b      	lsls	r3, r3, #10
 800b946:	b29b      	uxth	r3, r3
 800b948:	4313      	orrs	r3, r2
 800b94a:	b29b      	uxth	r3, r3
 800b94c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b954:	b29a      	uxth	r2, r3
 800b956:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b95a:	801a      	strh	r2, [r3, #0]
 800b95c:	e060      	b.n	800ba20 <USB_EPStartXfer+0x155e>
 800b95e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b962:	2b00      	cmp	r3, #0
 800b964:	d10c      	bne.n	800b980 <USB_EPStartXfer+0x14be>
 800b966:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b96a:	881b      	ldrh	r3, [r3, #0]
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b972:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b976:	b29a      	uxth	r2, r3
 800b978:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b97c:	801a      	strh	r2, [r3, #0]
 800b97e:	e04f      	b.n	800ba20 <USB_EPStartXfer+0x155e>
 800b980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b984:	085b      	lsrs	r3, r3, #1
 800b986:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b98a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b98e:	f003 0301 	and.w	r3, r3, #1
 800b992:	2b00      	cmp	r3, #0
 800b994:	d004      	beq.n	800b9a0 <USB_EPStartXfer+0x14de>
 800b996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b99a:	3301      	adds	r3, #1
 800b99c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b9a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b9a4:	881b      	ldrh	r3, [r3, #0]
 800b9a6:	b29a      	uxth	r2, r3
 800b9a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9ac:	b29b      	uxth	r3, r3
 800b9ae:	029b      	lsls	r3, r3, #10
 800b9b0:	b29b      	uxth	r3, r3
 800b9b2:	4313      	orrs	r3, r2
 800b9b4:	b29a      	uxth	r2, r3
 800b9b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b9ba:	801a      	strh	r2, [r3, #0]
 800b9bc:	e030      	b.n	800ba20 <USB_EPStartXfer+0x155e>
 800b9be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	785b      	ldrb	r3, [r3, #1]
 800b9ca:	2b01      	cmp	r3, #1
 800b9cc:	d128      	bne.n	800ba20 <USB_EPStartXfer+0x155e>
 800b9ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b9dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9e0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	461a      	mov	r2, r3
 800b9ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b9f2:	4413      	add	r3, r2
 800b9f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b9f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	00da      	lsls	r2, r3, #3
 800ba06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba0a:	4413      	add	r3, r2
 800ba0c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800ba10:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ba14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba18:	b29a      	uxth	r2, r3
 800ba1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800ba1e:	801a      	strh	r2, [r3, #0]
 800ba20:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba24:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ba2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	785b      	ldrb	r3, [r3, #1]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	f040 8085 	bne.w	800bb4a <USB_EPStartXfer+0x1688>
 800ba40:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba44:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ba4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba52:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba5c:	b29b      	uxth	r3, r3
 800ba5e:	461a      	mov	r2, r3
 800ba60:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ba64:	4413      	add	r3, r2
 800ba66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ba6a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ba6e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	00da      	lsls	r2, r3, #3
 800ba78:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ba7c:	4413      	add	r3, r2
 800ba7e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba82:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba8a:	881b      	ldrh	r3, [r3, #0]
 800ba8c:	b29b      	uxth	r3, r3
 800ba8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba92:	b29a      	uxth	r2, r3
 800ba94:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba98:	801a      	strh	r2, [r3, #0]
 800ba9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba9e:	2b3e      	cmp	r3, #62	; 0x3e
 800baa0:	d923      	bls.n	800baea <USB_EPStartXfer+0x1628>
 800baa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baa6:	095b      	lsrs	r3, r3, #5
 800baa8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800baac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bab0:	f003 031f 	and.w	r3, r3, #31
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d104      	bne.n	800bac2 <USB_EPStartXfer+0x1600>
 800bab8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800babc:	3b01      	subs	r3, #1
 800babe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bac2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bac6:	881b      	ldrh	r3, [r3, #0]
 800bac8:	b29a      	uxth	r2, r3
 800baca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bace:	b29b      	uxth	r3, r3
 800bad0:	029b      	lsls	r3, r3, #10
 800bad2:	b29b      	uxth	r3, r3
 800bad4:	4313      	orrs	r3, r2
 800bad6:	b29b      	uxth	r3, r3
 800bad8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800badc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bae0:	b29a      	uxth	r2, r3
 800bae2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bae6:	801a      	strh	r2, [r3, #0]
 800bae8:	e05c      	b.n	800bba4 <USB_EPStartXfer+0x16e2>
 800baea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d10c      	bne.n	800bb0c <USB_EPStartXfer+0x164a>
 800baf2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800baf6:	881b      	ldrh	r3, [r3, #0]
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bafe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb02:	b29a      	uxth	r2, r3
 800bb04:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bb08:	801a      	strh	r2, [r3, #0]
 800bb0a:	e04b      	b.n	800bba4 <USB_EPStartXfer+0x16e2>
 800bb0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb10:	085b      	lsrs	r3, r3, #1
 800bb12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bb16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb1a:	f003 0301 	and.w	r3, r3, #1
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d004      	beq.n	800bb2c <USB_EPStartXfer+0x166a>
 800bb22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb26:	3301      	adds	r3, #1
 800bb28:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bb2c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bb30:	881b      	ldrh	r3, [r3, #0]
 800bb32:	b29a      	uxth	r2, r3
 800bb34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bb38:	b29b      	uxth	r3, r3
 800bb3a:	029b      	lsls	r3, r3, #10
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	b29a      	uxth	r2, r3
 800bb42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bb46:	801a      	strh	r2, [r3, #0]
 800bb48:	e02c      	b.n	800bba4 <USB_EPStartXfer+0x16e2>
 800bb4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb4e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	785b      	ldrb	r3, [r3, #1]
 800bb56:	2b01      	cmp	r3, #1
 800bb58:	d124      	bne.n	800bba4 <USB_EPStartXfer+0x16e2>
 800bb5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb68:	b29b      	uxth	r3, r3
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bb70:	4413      	add	r3, r2
 800bb72:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bb76:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb7a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	781b      	ldrb	r3, [r3, #0]
 800bb82:	00da      	lsls	r2, r3, #3
 800bb84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bb88:	4413      	add	r3, r2
 800bb8a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bb8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bb9c:	801a      	strh	r2, [r3, #0]
 800bb9e:	e001      	b.n	800bba4 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800bba0:	2301      	movs	r3, #1
 800bba2:	e03a      	b.n	800bc1a <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bba4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bba8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbac:	681a      	ldr	r2, [r3, #0]
 800bbae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	4413      	add	r3, r2
 800bbbe:	881b      	ldrh	r3, [r3, #0]
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bbc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbca:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bbce:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bbd2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bbd6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bbda:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bbde:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bbe2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bbe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbea:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bbee:	681a      	ldr	r2, [r3, #0]
 800bbf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bbf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	781b      	ldrb	r3, [r3, #0]
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	441a      	add	r2, r3
 800bc00:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bc04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc14:	b29b      	uxth	r3, r3
 800bc16:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bc18:	2300      	movs	r3, #0
}
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bc24:	b480      	push	{r7}
 800bc26:	b085      	sub	sp, #20
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	785b      	ldrb	r3, [r3, #1]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d020      	beq.n	800bc78 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bc36:	687a      	ldr	r2, [r7, #4]
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	781b      	ldrb	r3, [r3, #0]
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	4413      	add	r3, r2
 800bc40:	881b      	ldrh	r3, [r3, #0]
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc4c:	81bb      	strh	r3, [r7, #12]
 800bc4e:	89bb      	ldrh	r3, [r7, #12]
 800bc50:	f083 0310 	eor.w	r3, r3, #16
 800bc54:	81bb      	strh	r3, [r7, #12]
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	781b      	ldrb	r3, [r3, #0]
 800bc5c:	009b      	lsls	r3, r3, #2
 800bc5e:	441a      	add	r2, r3
 800bc60:	89bb      	ldrh	r3, [r7, #12]
 800bc62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	8013      	strh	r3, [r2, #0]
 800bc76:	e01f      	b.n	800bcb8 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800bc78:	687a      	ldr	r2, [r7, #4]
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	781b      	ldrb	r3, [r3, #0]
 800bc7e:	009b      	lsls	r3, r3, #2
 800bc80:	4413      	add	r3, r2
 800bc82:	881b      	ldrh	r3, [r3, #0]
 800bc84:	b29b      	uxth	r3, r3
 800bc86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc8e:	81fb      	strh	r3, [r7, #14]
 800bc90:	89fb      	ldrh	r3, [r7, #14]
 800bc92:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bc96:	81fb      	strh	r3, [r7, #14]
 800bc98:	687a      	ldr	r2, [r7, #4]
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	781b      	ldrb	r3, [r3, #0]
 800bc9e:	009b      	lsls	r3, r3, #2
 800bca0:	441a      	add	r2, r3
 800bca2:	89fb      	ldrh	r3, [r7, #14]
 800bca4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bca8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bcb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcb4:	b29b      	uxth	r3, r3
 800bcb6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bcb8:	2300      	movs	r3, #0
}
 800bcba:	4618      	mov	r0, r3
 800bcbc:	3714      	adds	r7, #20
 800bcbe:	46bd      	mov	sp, r7
 800bcc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc4:	4770      	bx	lr

0800bcc6 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bcc6:	b480      	push	{r7}
 800bcc8:	b087      	sub	sp, #28
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
 800bcce:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	7b1b      	ldrb	r3, [r3, #12]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	f040 809d 	bne.w	800be14 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	785b      	ldrb	r3, [r3, #1]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d04c      	beq.n	800bd7c <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	4413      	add	r3, r2
 800bcec:	881b      	ldrh	r3, [r3, #0]
 800bcee:	823b      	strh	r3, [r7, #16]
 800bcf0:	8a3b      	ldrh	r3, [r7, #16]
 800bcf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d01b      	beq.n	800bd32 <USB_EPClearStall+0x6c>
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	4413      	add	r3, r2
 800bd04:	881b      	ldrh	r3, [r3, #0]
 800bd06:	b29b      	uxth	r3, r3
 800bd08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd10:	81fb      	strh	r3, [r7, #14]
 800bd12:	687a      	ldr	r2, [r7, #4]
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	009b      	lsls	r3, r3, #2
 800bd1a:	441a      	add	r2, r3
 800bd1c:	89fb      	ldrh	r3, [r7, #14]
 800bd1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bd2e:	b29b      	uxth	r3, r3
 800bd30:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	78db      	ldrb	r3, [r3, #3]
 800bd36:	2b01      	cmp	r3, #1
 800bd38:	d06c      	beq.n	800be14 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bd3a:	687a      	ldr	r2, [r7, #4]
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	009b      	lsls	r3, r3, #2
 800bd42:	4413      	add	r3, r2
 800bd44:	881b      	ldrh	r3, [r3, #0]
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd50:	81bb      	strh	r3, [r7, #12]
 800bd52:	89bb      	ldrh	r3, [r7, #12]
 800bd54:	f083 0320 	eor.w	r3, r3, #32
 800bd58:	81bb      	strh	r3, [r7, #12]
 800bd5a:	687a      	ldr	r2, [r7, #4]
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	009b      	lsls	r3, r3, #2
 800bd62:	441a      	add	r2, r3
 800bd64:	89bb      	ldrh	r3, [r7, #12]
 800bd66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd76:	b29b      	uxth	r3, r3
 800bd78:	8013      	strh	r3, [r2, #0]
 800bd7a:	e04b      	b.n	800be14 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	4413      	add	r3, r2
 800bd86:	881b      	ldrh	r3, [r3, #0]
 800bd88:	82fb      	strh	r3, [r7, #22]
 800bd8a:	8afb      	ldrh	r3, [r7, #22]
 800bd8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d01b      	beq.n	800bdcc <USB_EPClearStall+0x106>
 800bd94:	687a      	ldr	r2, [r7, #4]
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	4413      	add	r3, r2
 800bd9e:	881b      	ldrh	r3, [r3, #0]
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bda6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdaa:	82bb      	strh	r3, [r7, #20]
 800bdac:	687a      	ldr	r2, [r7, #4]
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	781b      	ldrb	r3, [r3, #0]
 800bdb2:	009b      	lsls	r3, r3, #2
 800bdb4:	441a      	add	r2, r3
 800bdb6:	8abb      	ldrh	r3, [r7, #20]
 800bdb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bdc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bdcc:	687a      	ldr	r2, [r7, #4]
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	009b      	lsls	r3, r3, #2
 800bdd4:	4413      	add	r3, r2
 800bdd6:	881b      	ldrh	r3, [r3, #0]
 800bdd8:	b29b      	uxth	r3, r3
 800bdda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bdde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bde2:	827b      	strh	r3, [r7, #18]
 800bde4:	8a7b      	ldrh	r3, [r7, #18]
 800bde6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bdea:	827b      	strh	r3, [r7, #18]
 800bdec:	8a7b      	ldrh	r3, [r7, #18]
 800bdee:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bdf2:	827b      	strh	r3, [r7, #18]
 800bdf4:	687a      	ldr	r2, [r7, #4]
 800bdf6:	683b      	ldr	r3, [r7, #0]
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	009b      	lsls	r3, r3, #2
 800bdfc:	441a      	add	r2, r3
 800bdfe:	8a7b      	ldrh	r3, [r7, #18]
 800be00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be10:	b29b      	uxth	r3, r3
 800be12:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800be14:	2300      	movs	r3, #0
}
 800be16:	4618      	mov	r0, r3
 800be18:	371c      	adds	r7, #28
 800be1a:	46bd      	mov	sp, r7
 800be1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be20:	4770      	bx	lr

0800be22 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800be22:	b480      	push	{r7}
 800be24:	b083      	sub	sp, #12
 800be26:	af00      	add	r7, sp, #0
 800be28:	6078      	str	r0, [r7, #4]
 800be2a:	460b      	mov	r3, r1
 800be2c:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800be2e:	78fb      	ldrb	r3, [r7, #3]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d103      	bne.n	800be3c <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2280      	movs	r2, #128	; 0x80
 800be38:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800be3c:	2300      	movs	r3, #0
}
 800be3e:	4618      	mov	r0, r3
 800be40:	370c      	adds	r7, #12
 800be42:	46bd      	mov	sp, r7
 800be44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be48:	4770      	bx	lr

0800be4a <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800be4a:	b480      	push	{r7}
 800be4c:	b083      	sub	sp, #12
 800be4e:	af00      	add	r7, sp, #0
 800be50:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800be58:	b29b      	uxth	r3, r3
 800be5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800be5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800be62:	b29a      	uxth	r2, r3
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800be6a:	2300      	movs	r3, #0
}
 800be6c:	4618      	mov	r0, r3
 800be6e:	370c      	adds	r7, #12
 800be70:	46bd      	mov	sp, r7
 800be72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be76:	4770      	bx	lr

0800be78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800be86:	b29b      	uxth	r3, r3
 800be88:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800be8a:	68fb      	ldr	r3, [r7, #12]
}
 800be8c:	4618      	mov	r0, r3
 800be8e:	3714      	adds	r7, #20
 800be90:	46bd      	mov	sp, r7
 800be92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be96:	4770      	bx	lr

0800be98 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800be98:	b480      	push	{r7}
 800be9a:	b08b      	sub	sp, #44	; 0x2c
 800be9c:	af00      	add	r7, sp, #0
 800be9e:	60f8      	str	r0, [r7, #12]
 800bea0:	60b9      	str	r1, [r7, #8]
 800bea2:	4611      	mov	r1, r2
 800bea4:	461a      	mov	r2, r3
 800bea6:	460b      	mov	r3, r1
 800bea8:	80fb      	strh	r3, [r7, #6]
 800beaa:	4613      	mov	r3, r2
 800beac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800beae:	88bb      	ldrh	r3, [r7, #4]
 800beb0:	3301      	adds	r3, #1
 800beb2:	085b      	lsrs	r3, r3, #1
 800beb4:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bebe:	88fa      	ldrh	r2, [r7, #6]
 800bec0:	697b      	ldr	r3, [r7, #20]
 800bec2:	4413      	add	r3, r2
 800bec4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bec8:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800beca:	69bb      	ldr	r3, [r7, #24]
 800becc:	627b      	str	r3, [r7, #36]	; 0x24
 800bece:	e01b      	b.n	800bf08 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800bed0:	69fb      	ldr	r3, [r7, #28]
 800bed2:	781b      	ldrb	r3, [r3, #0]
 800bed4:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800bed6:	69fb      	ldr	r3, [r7, #28]
 800bed8:	3301      	adds	r3, #1
 800beda:	781b      	ldrb	r3, [r3, #0]
 800bedc:	021b      	lsls	r3, r3, #8
 800bede:	b21a      	sxth	r2, r3
 800bee0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bee4:	4313      	orrs	r3, r2
 800bee6:	b21b      	sxth	r3, r3
 800bee8:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800beea:	6a3b      	ldr	r3, [r7, #32]
 800beec:	8a7a      	ldrh	r2, [r7, #18]
 800beee:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bef0:	6a3b      	ldr	r3, [r7, #32]
 800bef2:	3302      	adds	r3, #2
 800bef4:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800bef6:	69fb      	ldr	r3, [r7, #28]
 800bef8:	3301      	adds	r3, #1
 800befa:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800befc:	69fb      	ldr	r3, [r7, #28]
 800befe:	3301      	adds	r3, #1
 800bf00:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bf02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf04:	3b01      	subs	r3, #1
 800bf06:	627b      	str	r3, [r7, #36]	; 0x24
 800bf08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d1e0      	bne.n	800bed0 <USB_WritePMA+0x38>
  }
}
 800bf0e:	bf00      	nop
 800bf10:	bf00      	nop
 800bf12:	372c      	adds	r7, #44	; 0x2c
 800bf14:	46bd      	mov	sp, r7
 800bf16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf1a:	4770      	bx	lr

0800bf1c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bf1c:	b480      	push	{r7}
 800bf1e:	b08b      	sub	sp, #44	; 0x2c
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	4611      	mov	r1, r2
 800bf28:	461a      	mov	r2, r3
 800bf2a:	460b      	mov	r3, r1
 800bf2c:	80fb      	strh	r3, [r7, #6]
 800bf2e:	4613      	mov	r3, r2
 800bf30:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800bf32:	88bb      	ldrh	r3, [r7, #4]
 800bf34:	085b      	lsrs	r3, r3, #1
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bf3e:	68bb      	ldr	r3, [r7, #8]
 800bf40:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bf42:	88fa      	ldrh	r2, [r7, #6]
 800bf44:	697b      	ldr	r3, [r7, #20]
 800bf46:	4413      	add	r3, r2
 800bf48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf4c:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bf4e:	69bb      	ldr	r3, [r7, #24]
 800bf50:	627b      	str	r3, [r7, #36]	; 0x24
 800bf52:	e018      	b.n	800bf86 <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800bf54:	6a3b      	ldr	r3, [r7, #32]
 800bf56:	881b      	ldrh	r3, [r3, #0]
 800bf58:	b29b      	uxth	r3, r3
 800bf5a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bf5c:	6a3b      	ldr	r3, [r7, #32]
 800bf5e:	3302      	adds	r3, #2
 800bf60:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bf62:	693b      	ldr	r3, [r7, #16]
 800bf64:	b2da      	uxtb	r2, r3
 800bf66:	69fb      	ldr	r3, [r7, #28]
 800bf68:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bf6a:	69fb      	ldr	r3, [r7, #28]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800bf70:	693b      	ldr	r3, [r7, #16]
 800bf72:	0a1b      	lsrs	r3, r3, #8
 800bf74:	b2da      	uxtb	r2, r3
 800bf76:	69fb      	ldr	r3, [r7, #28]
 800bf78:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bf7a:	69fb      	ldr	r3, [r7, #28]
 800bf7c:	3301      	adds	r3, #1
 800bf7e:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bf80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf82:	3b01      	subs	r3, #1
 800bf84:	627b      	str	r3, [r7, #36]	; 0x24
 800bf86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d1e3      	bne.n	800bf54 <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bf8c:	88bb      	ldrh	r3, [r7, #4]
 800bf8e:	f003 0301 	and.w	r3, r3, #1
 800bf92:	b29b      	uxth	r3, r3
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d007      	beq.n	800bfa8 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800bf98:	6a3b      	ldr	r3, [r7, #32]
 800bf9a:	881b      	ldrh	r3, [r3, #0]
 800bf9c:	b29b      	uxth	r3, r3
 800bf9e:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bfa0:	693b      	ldr	r3, [r7, #16]
 800bfa2:	b2da      	uxtb	r2, r3
 800bfa4:	69fb      	ldr	r3, [r7, #28]
 800bfa6:	701a      	strb	r2, [r3, #0]
  }
}
 800bfa8:	bf00      	nop
 800bfaa:	372c      	adds	r7, #44	; 0x2c
 800bfac:	46bd      	mov	sp, r7
 800bfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb2:	4770      	bx	lr

0800bfb4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bfc0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bfc4:	f002 f920 	bl	800e208 <USBD_static_malloc>
 800bfc8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d105      	bne.n	800bfdc <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bfd8:	2302      	movs	r3, #2
 800bfda:	e066      	b.n	800c0aa <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	68fa      	ldr	r2, [r7, #12]
 800bfe0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	7c1b      	ldrb	r3, [r3, #16]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d119      	bne.n	800c020 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bfec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bff0:	2202      	movs	r2, #2
 800bff2:	2181      	movs	r1, #129	; 0x81
 800bff4:	6878      	ldr	r0, [r7, #4]
 800bff6:	f001 ffae 	bl	800df56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	2201      	movs	r2, #1
 800bffe:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c000:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c004:	2202      	movs	r2, #2
 800c006:	2101      	movs	r1, #1
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f001 ffa4 	bl	800df56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2201      	movs	r2, #1
 800c012:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	2210      	movs	r2, #16
 800c01a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800c01e:	e016      	b.n	800c04e <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c020:	2340      	movs	r3, #64	; 0x40
 800c022:	2202      	movs	r2, #2
 800c024:	2181      	movs	r1, #129	; 0x81
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f001 ff95 	bl	800df56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2201      	movs	r2, #1
 800c030:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c032:	2340      	movs	r3, #64	; 0x40
 800c034:	2202      	movs	r2, #2
 800c036:	2101      	movs	r1, #1
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f001 ff8c 	bl	800df56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2201      	movs	r2, #1
 800c042:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2210      	movs	r2, #16
 800c04a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c04e:	2308      	movs	r3, #8
 800c050:	2203      	movs	r2, #3
 800c052:	2182      	movs	r1, #130	; 0x82
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f001 ff7e 	bl	800df56 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2201      	movs	r2, #1
 800c05e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	2200      	movs	r2, #0
 800c070:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2200      	movs	r2, #0
 800c078:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	7c1b      	ldrb	r3, [r3, #16]
 800c080:	2b00      	cmp	r3, #0
 800c082:	d109      	bne.n	800c098 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c08a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c08e:	2101      	movs	r1, #1
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f002 f84f 	bl	800e134 <USBD_LL_PrepareReceive>
 800c096:	e007      	b.n	800c0a8 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c09e:	2340      	movs	r3, #64	; 0x40
 800c0a0:	2101      	movs	r1, #1
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f002 f846 	bl	800e134 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c0a8:	2300      	movs	r3, #0
}
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	3710      	adds	r7, #16
 800c0ae:	46bd      	mov	sp, r7
 800c0b0:	bd80      	pop	{r7, pc}

0800c0b2 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0b2:	b580      	push	{r7, lr}
 800c0b4:	b082      	sub	sp, #8
 800c0b6:	af00      	add	r7, sp, #0
 800c0b8:	6078      	str	r0, [r7, #4]
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c0be:	2181      	movs	r1, #129	; 0x81
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f001 ff6e 	bl	800dfa2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2200      	movs	r2, #0
 800c0ca:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c0cc:	2101      	movs	r1, #1
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f001 ff67 	bl	800dfa2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c0dc:	2182      	movs	r1, #130	; 0x82
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f001 ff5f 	bl	800dfa2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d00e      	beq.n	800c11c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c104:	685b      	ldr	r3, [r3, #4]
 800c106:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c10e:	4618      	mov	r0, r3
 800c110:	f002 f888 	bl	800e224 <USBD_static_free>
    pdev->pClassData = NULL;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c11c:	2300      	movs	r3, #0
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3708      	adds	r7, #8
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
	...

0800c128 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b086      	sub	sp, #24
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	6078      	str	r0, [r7, #4]
 800c130:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c138:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c13a:	2300      	movs	r3, #0
 800c13c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c13e:	2300      	movs	r3, #0
 800c140:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c142:	2300      	movs	r3, #0
 800c144:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d101      	bne.n	800c150 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c14c:	2303      	movs	r3, #3
 800c14e:	e0af      	b.n	800c2b0 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	781b      	ldrb	r3, [r3, #0]
 800c154:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c158:	2b00      	cmp	r3, #0
 800c15a:	d03f      	beq.n	800c1dc <USBD_CDC_Setup+0xb4>
 800c15c:	2b20      	cmp	r3, #32
 800c15e:	f040 809f 	bne.w	800c2a0 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	88db      	ldrh	r3, [r3, #6]
 800c166:	2b00      	cmp	r3, #0
 800c168:	d02e      	beq.n	800c1c8 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c16a:	683b      	ldr	r3, [r7, #0]
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	b25b      	sxtb	r3, r3
 800c170:	2b00      	cmp	r3, #0
 800c172:	da16      	bge.n	800c1a2 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c17a:	689b      	ldr	r3, [r3, #8]
 800c17c:	683a      	ldr	r2, [r7, #0]
 800c17e:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c180:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c182:	683a      	ldr	r2, [r7, #0]
 800c184:	88d2      	ldrh	r2, [r2, #6]
 800c186:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	88db      	ldrh	r3, [r3, #6]
 800c18c:	2b07      	cmp	r3, #7
 800c18e:	bf28      	it	cs
 800c190:	2307      	movcs	r3, #7
 800c192:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	89fa      	ldrh	r2, [r7, #14]
 800c198:	4619      	mov	r1, r3
 800c19a:	6878      	ldr	r0, [r7, #4]
 800c19c:	f001 facf 	bl	800d73e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c1a0:	e085      	b.n	800c2ae <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	785a      	ldrb	r2, [r3, #1]
 800c1a6:	693b      	ldr	r3, [r7, #16]
 800c1a8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	88db      	ldrh	r3, [r3, #6]
 800c1b0:	b2da      	uxtb	r2, r3
 800c1b2:	693b      	ldr	r3, [r7, #16]
 800c1b4:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c1b8:	6939      	ldr	r1, [r7, #16]
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	88db      	ldrh	r3, [r3, #6]
 800c1be:	461a      	mov	r2, r3
 800c1c0:	6878      	ldr	r0, [r7, #4]
 800c1c2:	f001 fae8 	bl	800d796 <USBD_CtlPrepareRx>
      break;
 800c1c6:	e072      	b.n	800c2ae <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c1ce:	689b      	ldr	r3, [r3, #8]
 800c1d0:	683a      	ldr	r2, [r7, #0]
 800c1d2:	7850      	ldrb	r0, [r2, #1]
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	6839      	ldr	r1, [r7, #0]
 800c1d8:	4798      	blx	r3
      break;
 800c1da:	e068      	b.n	800c2ae <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	785b      	ldrb	r3, [r3, #1]
 800c1e0:	2b0b      	cmp	r3, #11
 800c1e2:	d852      	bhi.n	800c28a <USBD_CDC_Setup+0x162>
 800c1e4:	a201      	add	r2, pc, #4	; (adr r2, 800c1ec <USBD_CDC_Setup+0xc4>)
 800c1e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1ea:	bf00      	nop
 800c1ec:	0800c21d 	.word	0x0800c21d
 800c1f0:	0800c299 	.word	0x0800c299
 800c1f4:	0800c28b 	.word	0x0800c28b
 800c1f8:	0800c28b 	.word	0x0800c28b
 800c1fc:	0800c28b 	.word	0x0800c28b
 800c200:	0800c28b 	.word	0x0800c28b
 800c204:	0800c28b 	.word	0x0800c28b
 800c208:	0800c28b 	.word	0x0800c28b
 800c20c:	0800c28b 	.word	0x0800c28b
 800c210:	0800c28b 	.word	0x0800c28b
 800c214:	0800c247 	.word	0x0800c247
 800c218:	0800c271 	.word	0x0800c271
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c222:	b2db      	uxtb	r3, r3
 800c224:	2b03      	cmp	r3, #3
 800c226:	d107      	bne.n	800c238 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c228:	f107 030a 	add.w	r3, r7, #10
 800c22c:	2202      	movs	r2, #2
 800c22e:	4619      	mov	r1, r3
 800c230:	6878      	ldr	r0, [r7, #4]
 800c232:	f001 fa84 	bl	800d73e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c236:	e032      	b.n	800c29e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c238:	6839      	ldr	r1, [r7, #0]
 800c23a:	6878      	ldr	r0, [r7, #4]
 800c23c:	f001 fa0e 	bl	800d65c <USBD_CtlError>
            ret = USBD_FAIL;
 800c240:	2303      	movs	r3, #3
 800c242:	75fb      	strb	r3, [r7, #23]
          break;
 800c244:	e02b      	b.n	800c29e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c24c:	b2db      	uxtb	r3, r3
 800c24e:	2b03      	cmp	r3, #3
 800c250:	d107      	bne.n	800c262 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c252:	f107 030d 	add.w	r3, r7, #13
 800c256:	2201      	movs	r2, #1
 800c258:	4619      	mov	r1, r3
 800c25a:	6878      	ldr	r0, [r7, #4]
 800c25c:	f001 fa6f 	bl	800d73e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c260:	e01d      	b.n	800c29e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c262:	6839      	ldr	r1, [r7, #0]
 800c264:	6878      	ldr	r0, [r7, #4]
 800c266:	f001 f9f9 	bl	800d65c <USBD_CtlError>
            ret = USBD_FAIL;
 800c26a:	2303      	movs	r3, #3
 800c26c:	75fb      	strb	r3, [r7, #23]
          break;
 800c26e:	e016      	b.n	800c29e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c276:	b2db      	uxtb	r3, r3
 800c278:	2b03      	cmp	r3, #3
 800c27a:	d00f      	beq.n	800c29c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c27c:	6839      	ldr	r1, [r7, #0]
 800c27e:	6878      	ldr	r0, [r7, #4]
 800c280:	f001 f9ec 	bl	800d65c <USBD_CtlError>
            ret = USBD_FAIL;
 800c284:	2303      	movs	r3, #3
 800c286:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c288:	e008      	b.n	800c29c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c28a:	6839      	ldr	r1, [r7, #0]
 800c28c:	6878      	ldr	r0, [r7, #4]
 800c28e:	f001 f9e5 	bl	800d65c <USBD_CtlError>
          ret = USBD_FAIL;
 800c292:	2303      	movs	r3, #3
 800c294:	75fb      	strb	r3, [r7, #23]
          break;
 800c296:	e002      	b.n	800c29e <USBD_CDC_Setup+0x176>
          break;
 800c298:	bf00      	nop
 800c29a:	e008      	b.n	800c2ae <USBD_CDC_Setup+0x186>
          break;
 800c29c:	bf00      	nop
      }
      break;
 800c29e:	e006      	b.n	800c2ae <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c2a0:	6839      	ldr	r1, [r7, #0]
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f001 f9da 	bl	800d65c <USBD_CtlError>
      ret = USBD_FAIL;
 800c2a8:	2303      	movs	r3, #3
 800c2aa:	75fb      	strb	r3, [r7, #23]
      break;
 800c2ac:	bf00      	nop
  }

  return (uint8_t)ret;
 800c2ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	3718      	adds	r7, #24
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	bd80      	pop	{r7, pc}

0800c2b8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
 800c2c0:	460b      	mov	r3, r1
 800c2c2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c2ca:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d101      	bne.n	800c2da <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c2d6:	2303      	movs	r3, #3
 800c2d8:	e04f      	b.n	800c37a <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c2e0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c2e2:	78fa      	ldrb	r2, [r7, #3]
 800c2e4:	6879      	ldr	r1, [r7, #4]
 800c2e6:	4613      	mov	r3, r2
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	4413      	add	r3, r2
 800c2ec:	009b      	lsls	r3, r3, #2
 800c2ee:	440b      	add	r3, r1
 800c2f0:	3318      	adds	r3, #24
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d029      	beq.n	800c34c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c2f8:	78fa      	ldrb	r2, [r7, #3]
 800c2fa:	6879      	ldr	r1, [r7, #4]
 800c2fc:	4613      	mov	r3, r2
 800c2fe:	009b      	lsls	r3, r3, #2
 800c300:	4413      	add	r3, r2
 800c302:	009b      	lsls	r3, r3, #2
 800c304:	440b      	add	r3, r1
 800c306:	3318      	adds	r3, #24
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	78f9      	ldrb	r1, [r7, #3]
 800c30c:	68f8      	ldr	r0, [r7, #12]
 800c30e:	460b      	mov	r3, r1
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	440b      	add	r3, r1
 800c314:	00db      	lsls	r3, r3, #3
 800c316:	4403      	add	r3, r0
 800c318:	3320      	adds	r3, #32
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	fbb2 f1f3 	udiv	r1, r2, r3
 800c320:	fb01 f303 	mul.w	r3, r1, r3
 800c324:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c326:	2b00      	cmp	r3, #0
 800c328:	d110      	bne.n	800c34c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c32a:	78fa      	ldrb	r2, [r7, #3]
 800c32c:	6879      	ldr	r1, [r7, #4]
 800c32e:	4613      	mov	r3, r2
 800c330:	009b      	lsls	r3, r3, #2
 800c332:	4413      	add	r3, r2
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	440b      	add	r3, r1
 800c338:	3318      	adds	r3, #24
 800c33a:	2200      	movs	r2, #0
 800c33c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c33e:	78f9      	ldrb	r1, [r7, #3]
 800c340:	2300      	movs	r3, #0
 800c342:	2200      	movs	r2, #0
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	f001 fed4 	bl	800e0f2 <USBD_LL_Transmit>
 800c34a:	e015      	b.n	800c378 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	2200      	movs	r2, #0
 800c350:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c35a:	691b      	ldr	r3, [r3, #16]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d00b      	beq.n	800c378 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c366:	691b      	ldr	r3, [r3, #16]
 800c368:	68ba      	ldr	r2, [r7, #8]
 800c36a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c36e:	68ba      	ldr	r2, [r7, #8]
 800c370:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c374:	78fa      	ldrb	r2, [r7, #3]
 800c376:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c378:	2300      	movs	r3, #0
}
 800c37a:	4618      	mov	r0, r3
 800c37c:	3710      	adds	r7, #16
 800c37e:	46bd      	mov	sp, r7
 800c380:	bd80      	pop	{r7, pc}

0800c382 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c382:	b580      	push	{r7, lr}
 800c384:	b084      	sub	sp, #16
 800c386:	af00      	add	r7, sp, #0
 800c388:	6078      	str	r0, [r7, #4]
 800c38a:	460b      	mov	r3, r1
 800c38c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c394:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d101      	bne.n	800c3a4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c3a0:	2303      	movs	r3, #3
 800c3a2:	e015      	b.n	800c3d0 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c3a4:	78fb      	ldrb	r3, [r7, #3]
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f001 fee4 	bl	800e176 <USBD_LL_GetRxDataSize>
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3bc:	68db      	ldr	r3, [r3, #12]
 800c3be:	68fa      	ldr	r2, [r7, #12]
 800c3c0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c3c4:	68fa      	ldr	r2, [r7, #12]
 800c3c6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c3ca:	4611      	mov	r1, r2
 800c3cc:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c3e6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d101      	bne.n	800c3f2 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c3ee:	2303      	movs	r3, #3
 800c3f0:	e01b      	b.n	800c42a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d015      	beq.n	800c428 <USBD_CDC_EP0_RxReady+0x50>
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c402:	2bff      	cmp	r3, #255	; 0xff
 800c404:	d010      	beq.n	800c428 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c40c:	689b      	ldr	r3, [r3, #8]
 800c40e:	68fa      	ldr	r2, [r7, #12]
 800c410:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c414:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c416:	68fa      	ldr	r2, [r7, #12]
 800c418:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c41c:	b292      	uxth	r2, r2
 800c41e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	22ff      	movs	r2, #255	; 0xff
 800c424:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c428:	2300      	movs	r3, #0
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}
	...

0800c434 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c434:	b480      	push	{r7}
 800c436:	b083      	sub	sp, #12
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2243      	movs	r2, #67	; 0x43
 800c440:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c442:	4b03      	ldr	r3, [pc, #12]	; (800c450 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c444:	4618      	mov	r0, r3
 800c446:	370c      	adds	r7, #12
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr
 800c450:	200000a4 	.word	0x200000a4

0800c454 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c454:	b480      	push	{r7}
 800c456:	b083      	sub	sp, #12
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2243      	movs	r2, #67	; 0x43
 800c460:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c462:	4b03      	ldr	r3, [pc, #12]	; (800c470 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c464:	4618      	mov	r0, r3
 800c466:	370c      	adds	r7, #12
 800c468:	46bd      	mov	sp, r7
 800c46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46e:	4770      	bx	lr
 800c470:	20000060 	.word	0x20000060

0800c474 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c474:	b480      	push	{r7}
 800c476:	b083      	sub	sp, #12
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2243      	movs	r2, #67	; 0x43
 800c480:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c482:	4b03      	ldr	r3, [pc, #12]	; (800c490 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c484:	4618      	mov	r0, r3
 800c486:	370c      	adds	r7, #12
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr
 800c490:	200000e8 	.word	0x200000e8

0800c494 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c494:	b480      	push	{r7}
 800c496:	b083      	sub	sp, #12
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	220a      	movs	r2, #10
 800c4a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c4a2:	4b03      	ldr	r3, [pc, #12]	; (800c4b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr
 800c4b0:	2000001c 	.word	0x2000001c

0800c4b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
 800c4bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d101      	bne.n	800c4c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c4c4:	2303      	movs	r3, #3
 800c4c6:	e004      	b.n	800c4d2 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	683a      	ldr	r2, [r7, #0]
 800c4cc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c4d0:	2300      	movs	r3, #0
}
 800c4d2:	4618      	mov	r0, r3
 800c4d4:	370c      	adds	r7, #12
 800c4d6:	46bd      	mov	sp, r7
 800c4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4dc:	4770      	bx	lr

0800c4de <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c4de:	b480      	push	{r7}
 800c4e0:	b087      	sub	sp, #28
 800c4e2:	af00      	add	r7, sp, #0
 800c4e4:	60f8      	str	r0, [r7, #12]
 800c4e6:	60b9      	str	r1, [r7, #8]
 800c4e8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c4f0:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c4f2:	697b      	ldr	r3, [r7, #20]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d101      	bne.n	800c4fc <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c4f8:	2303      	movs	r3, #3
 800c4fa:	e008      	b.n	800c50e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c4fc:	697b      	ldr	r3, [r7, #20]
 800c4fe:	68ba      	ldr	r2, [r7, #8]
 800c500:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c50c:	2300      	movs	r3, #0
}
 800c50e:	4618      	mov	r0, r3
 800c510:	371c      	adds	r7, #28
 800c512:	46bd      	mov	sp, r7
 800c514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c518:	4770      	bx	lr

0800c51a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c51a:	b480      	push	{r7}
 800c51c:	b085      	sub	sp, #20
 800c51e:	af00      	add	r7, sp, #0
 800c520:	6078      	str	r0, [r7, #4]
 800c522:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c52a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d101      	bne.n	800c536 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c532:	2303      	movs	r3, #3
 800c534:	e004      	b.n	800c540 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	683a      	ldr	r2, [r7, #0]
 800c53a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c53e:	2300      	movs	r3, #0
}
 800c540:	4618      	mov	r0, r3
 800c542:	3714      	adds	r7, #20
 800c544:	46bd      	mov	sp, r7
 800c546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c54a:	4770      	bx	lr

0800c54c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c55a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c55c:	2301      	movs	r3, #1
 800c55e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c566:	2b00      	cmp	r3, #0
 800c568:	d101      	bne.n	800c56e <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c56a:	2303      	movs	r3, #3
 800c56c:	e01a      	b.n	800c5a4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c574:	2b00      	cmp	r3, #0
 800c576:	d114      	bne.n	800c5a2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	2201      	movs	r2, #1
 800c57c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c580:	68bb      	ldr	r3, [r7, #8]
 800c582:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c596:	2181      	movs	r1, #129	; 0x81
 800c598:	6878      	ldr	r0, [r7, #4]
 800c59a:	f001 fdaa 	bl	800e0f2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c5a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3710      	adds	r7, #16
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b084      	sub	sp, #16
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c5ba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d101      	bne.n	800c5ca <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c5c6:	2303      	movs	r3, #3
 800c5c8:	e016      	b.n	800c5f8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	7c1b      	ldrb	r3, [r3, #16]
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d109      	bne.n	800c5e6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c5d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c5dc:	2101      	movs	r1, #1
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f001 fda8 	bl	800e134 <USBD_LL_PrepareReceive>
 800c5e4:	e007      	b.n	800c5f6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c5ec:	2340      	movs	r3, #64	; 0x40
 800c5ee:	2101      	movs	r1, #1
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f001 fd9f 	bl	800e134 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c5f6:	2300      	movs	r3, #0
}
 800c5f8:	4618      	mov	r0, r3
 800c5fa:	3710      	adds	r7, #16
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	bd80      	pop	{r7, pc}

0800c600 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b086      	sub	sp, #24
 800c604:	af00      	add	r7, sp, #0
 800c606:	60f8      	str	r0, [r7, #12]
 800c608:	60b9      	str	r1, [r7, #8]
 800c60a:	4613      	mov	r3, r2
 800c60c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d101      	bne.n	800c618 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c614:	2303      	movs	r3, #3
 800c616:	e01f      	b.n	800c658 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	2200      	movs	r2, #0
 800c624:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	2200      	movs	r2, #0
 800c62c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d003      	beq.n	800c63e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	68ba      	ldr	r2, [r7, #8]
 800c63a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	2201      	movs	r2, #1
 800c642:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	79fa      	ldrb	r2, [r7, #7]
 800c64a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c64c:	68f8      	ldr	r0, [r7, #12]
 800c64e:	f001 fc07 	bl	800de60 <USBD_LL_Init>
 800c652:	4603      	mov	r3, r0
 800c654:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c656:	7dfb      	ldrb	r3, [r7, #23]
}
 800c658:	4618      	mov	r0, r3
 800c65a:	3718      	adds	r7, #24
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b084      	sub	sp, #16
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c66a:	2300      	movs	r3, #0
 800c66c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d101      	bne.n	800c678 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c674:	2303      	movs	r3, #3
 800c676:	e016      	b.n	800c6a6 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	683a      	ldr	r2, [r7, #0]
 800c67c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d00b      	beq.n	800c6a4 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c694:	f107 020e 	add.w	r2, r7, #14
 800c698:	4610      	mov	r0, r2
 800c69a:	4798      	blx	r3
 800c69c:	4602      	mov	r2, r0
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c6a4:	2300      	movs	r3, #0
}
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	3710      	adds	r7, #16
 800c6aa:	46bd      	mov	sp, r7
 800c6ac:	bd80      	pop	{r7, pc}

0800c6ae <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c6ae:	b580      	push	{r7, lr}
 800c6b0:	b082      	sub	sp, #8
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c6b6:	6878      	ldr	r0, [r7, #4]
 800c6b8:	f001 fc32 	bl	800df20 <USBD_LL_Start>
 800c6bc:	4603      	mov	r3, r0
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	3708      	adds	r7, #8
 800c6c2:	46bd      	mov	sp, r7
 800c6c4:	bd80      	pop	{r7, pc}

0800c6c6 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c6c6:	b480      	push	{r7}
 800c6c8:	b083      	sub	sp, #12
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c6ce:	2300      	movs	r3, #0
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	370c      	adds	r7, #12
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr

0800c6dc <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c6e8:	2303      	movs	r3, #3
 800c6ea:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d009      	beq.n	800c70a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	78fa      	ldrb	r2, [r7, #3]
 800c700:	4611      	mov	r1, r2
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	4798      	blx	r3
 800c706:	4603      	mov	r3, r0
 800c708:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c70a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3710      	adds	r7, #16
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}

0800c714 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	460b      	mov	r3, r1
 800c71e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c726:	2b00      	cmp	r3, #0
 800c728:	d007      	beq.n	800c73a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c730:	685b      	ldr	r3, [r3, #4]
 800c732:	78fa      	ldrb	r2, [r7, #3]
 800c734:	4611      	mov	r1, r2
 800c736:	6878      	ldr	r0, [r7, #4]
 800c738:	4798      	blx	r3
  }

  return USBD_OK;
 800c73a:	2300      	movs	r3, #0
}
 800c73c:	4618      	mov	r0, r3
 800c73e:	3708      	adds	r7, #8
 800c740:	46bd      	mov	sp, r7
 800c742:	bd80      	pop	{r7, pc}

0800c744 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c744:	b580      	push	{r7, lr}
 800c746:	b084      	sub	sp, #16
 800c748:	af00      	add	r7, sp, #0
 800c74a:	6078      	str	r0, [r7, #4]
 800c74c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c754:	6839      	ldr	r1, [r7, #0]
 800c756:	4618      	mov	r0, r3
 800c758:	f000 ff46 	bl	800d5e8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2201      	movs	r2, #1
 800c760:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c76a:	461a      	mov	r2, r3
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c778:	f003 031f 	and.w	r3, r3, #31
 800c77c:	2b02      	cmp	r3, #2
 800c77e:	d01a      	beq.n	800c7b6 <USBD_LL_SetupStage+0x72>
 800c780:	2b02      	cmp	r3, #2
 800c782:	d822      	bhi.n	800c7ca <USBD_LL_SetupStage+0x86>
 800c784:	2b00      	cmp	r3, #0
 800c786:	d002      	beq.n	800c78e <USBD_LL_SetupStage+0x4a>
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d00a      	beq.n	800c7a2 <USBD_LL_SetupStage+0x5e>
 800c78c:	e01d      	b.n	800c7ca <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c794:	4619      	mov	r1, r3
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f000 f9ee 	bl	800cb78 <USBD_StdDevReq>
 800c79c:	4603      	mov	r3, r0
 800c79e:	73fb      	strb	r3, [r7, #15]
      break;
 800c7a0:	e020      	b.n	800c7e4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f000 fa52 	bl	800cc54 <USBD_StdItfReq>
 800c7b0:	4603      	mov	r3, r0
 800c7b2:	73fb      	strb	r3, [r7, #15]
      break;
 800c7b4:	e016      	b.n	800c7e4 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c7bc:	4619      	mov	r1, r3
 800c7be:	6878      	ldr	r0, [r7, #4]
 800c7c0:	f000 fa91 	bl	800cce6 <USBD_StdEPReq>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	73fb      	strb	r3, [r7, #15]
      break;
 800c7c8:	e00c      	b.n	800c7e4 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c7d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c7d4:	b2db      	uxtb	r3, r3
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f001 fc01 	bl	800dfe0 <USBD_LL_StallEP>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	73fb      	strb	r3, [r7, #15]
      break;
 800c7e2:	bf00      	nop
  }

  return ret;
 800c7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c7ee:	b580      	push	{r7, lr}
 800c7f0:	b086      	sub	sp, #24
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	60f8      	str	r0, [r7, #12]
 800c7f6:	460b      	mov	r3, r1
 800c7f8:	607a      	str	r2, [r7, #4]
 800c7fa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c7fc:	7afb      	ldrb	r3, [r7, #11]
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d138      	bne.n	800c874 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c808:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c810:	2b03      	cmp	r3, #3
 800c812:	d14a      	bne.n	800c8aa <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	689a      	ldr	r2, [r3, #8]
 800c818:	693b      	ldr	r3, [r7, #16]
 800c81a:	68db      	ldr	r3, [r3, #12]
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d913      	bls.n	800c848 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	689a      	ldr	r2, [r3, #8]
 800c824:	693b      	ldr	r3, [r7, #16]
 800c826:	68db      	ldr	r3, [r3, #12]
 800c828:	1ad2      	subs	r2, r2, r3
 800c82a:	693b      	ldr	r3, [r7, #16]
 800c82c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	68da      	ldr	r2, [r3, #12]
 800c832:	693b      	ldr	r3, [r7, #16]
 800c834:	689b      	ldr	r3, [r3, #8]
 800c836:	4293      	cmp	r3, r2
 800c838:	bf28      	it	cs
 800c83a:	4613      	movcs	r3, r2
 800c83c:	461a      	mov	r2, r3
 800c83e:	6879      	ldr	r1, [r7, #4]
 800c840:	68f8      	ldr	r0, [r7, #12]
 800c842:	f000 ffc5 	bl	800d7d0 <USBD_CtlContinueRx>
 800c846:	e030      	b.n	800c8aa <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c84e:	b2db      	uxtb	r3, r3
 800c850:	2b03      	cmp	r3, #3
 800c852:	d10b      	bne.n	800c86c <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c85a:	691b      	ldr	r3, [r3, #16]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d005      	beq.n	800c86c <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c866:	691b      	ldr	r3, [r3, #16]
 800c868:	68f8      	ldr	r0, [r7, #12]
 800c86a:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c86c:	68f8      	ldr	r0, [r7, #12]
 800c86e:	f000 ffc0 	bl	800d7f2 <USBD_CtlSendStatus>
 800c872:	e01a      	b.n	800c8aa <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	2b03      	cmp	r3, #3
 800c87e:	d114      	bne.n	800c8aa <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c886:	699b      	ldr	r3, [r3, #24]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d00e      	beq.n	800c8aa <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c892:	699b      	ldr	r3, [r3, #24]
 800c894:	7afa      	ldrb	r2, [r7, #11]
 800c896:	4611      	mov	r1, r2
 800c898:	68f8      	ldr	r0, [r7, #12]
 800c89a:	4798      	blx	r3
 800c89c:	4603      	mov	r3, r0
 800c89e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c8a0:	7dfb      	ldrb	r3, [r7, #23]
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d001      	beq.n	800c8aa <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c8a6:	7dfb      	ldrb	r3, [r7, #23]
 800c8a8:	e000      	b.n	800c8ac <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c8aa:	2300      	movs	r3, #0
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	3718      	adds	r7, #24
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	bd80      	pop	{r7, pc}

0800c8b4 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c8b4:	b580      	push	{r7, lr}
 800c8b6:	b086      	sub	sp, #24
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	460b      	mov	r3, r1
 800c8be:	607a      	str	r2, [r7, #4]
 800c8c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c8c2:	7afb      	ldrb	r3, [r7, #11]
 800c8c4:	2b00      	cmp	r3, #0
 800c8c6:	d16b      	bne.n	800c9a0 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	3314      	adds	r3, #20
 800c8cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c8d4:	2b02      	cmp	r3, #2
 800c8d6:	d156      	bne.n	800c986 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	689a      	ldr	r2, [r3, #8]
 800c8dc:	693b      	ldr	r3, [r7, #16]
 800c8de:	68db      	ldr	r3, [r3, #12]
 800c8e0:	429a      	cmp	r2, r3
 800c8e2:	d914      	bls.n	800c90e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c8e4:	693b      	ldr	r3, [r7, #16]
 800c8e6:	689a      	ldr	r2, [r3, #8]
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	1ad2      	subs	r2, r2, r3
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c8f2:	693b      	ldr	r3, [r7, #16]
 800c8f4:	689b      	ldr	r3, [r3, #8]
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	6879      	ldr	r1, [r7, #4]
 800c8fa:	68f8      	ldr	r0, [r7, #12]
 800c8fc:	f000 ff3a 	bl	800d774 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c900:	2300      	movs	r3, #0
 800c902:	2200      	movs	r2, #0
 800c904:	2100      	movs	r1, #0
 800c906:	68f8      	ldr	r0, [r7, #12]
 800c908:	f001 fc14 	bl	800e134 <USBD_LL_PrepareReceive>
 800c90c:	e03b      	b.n	800c986 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	68da      	ldr	r2, [r3, #12]
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	689b      	ldr	r3, [r3, #8]
 800c916:	429a      	cmp	r2, r3
 800c918:	d11c      	bne.n	800c954 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c91a:	693b      	ldr	r3, [r7, #16]
 800c91c:	685a      	ldr	r2, [r3, #4]
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c922:	429a      	cmp	r2, r3
 800c924:	d316      	bcc.n	800c954 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c926:	693b      	ldr	r3, [r7, #16]
 800c928:	685a      	ldr	r2, [r3, #4]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c930:	429a      	cmp	r2, r3
 800c932:	d20f      	bcs.n	800c954 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c934:	2200      	movs	r2, #0
 800c936:	2100      	movs	r1, #0
 800c938:	68f8      	ldr	r0, [r7, #12]
 800c93a:	f000 ff1b 	bl	800d774 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	2200      	movs	r2, #0
 800c942:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c946:	2300      	movs	r3, #0
 800c948:	2200      	movs	r2, #0
 800c94a:	2100      	movs	r1, #0
 800c94c:	68f8      	ldr	r0, [r7, #12]
 800c94e:	f001 fbf1 	bl	800e134 <USBD_LL_PrepareReceive>
 800c952:	e018      	b.n	800c986 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c95a:	b2db      	uxtb	r3, r3
 800c95c:	2b03      	cmp	r3, #3
 800c95e:	d10b      	bne.n	800c978 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c966:	68db      	ldr	r3, [r3, #12]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d005      	beq.n	800c978 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c972:	68db      	ldr	r3, [r3, #12]
 800c974:	68f8      	ldr	r0, [r7, #12]
 800c976:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c978:	2180      	movs	r1, #128	; 0x80
 800c97a:	68f8      	ldr	r0, [r7, #12]
 800c97c:	f001 fb30 	bl	800dfe0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c980:	68f8      	ldr	r0, [r7, #12]
 800c982:	f000 ff49 	bl	800d818 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c98c:	2b01      	cmp	r3, #1
 800c98e:	d122      	bne.n	800c9d6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c990:	68f8      	ldr	r0, [r7, #12]
 800c992:	f7ff fe98 	bl	800c6c6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2200      	movs	r2, #0
 800c99a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c99e:	e01a      	b.n	800c9d6 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	2b03      	cmp	r3, #3
 800c9aa:	d114      	bne.n	800c9d6 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9b2:	695b      	ldr	r3, [r3, #20]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d00e      	beq.n	800c9d6 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9be:	695b      	ldr	r3, [r3, #20]
 800c9c0:	7afa      	ldrb	r2, [r7, #11]
 800c9c2:	4611      	mov	r1, r2
 800c9c4:	68f8      	ldr	r0, [r7, #12]
 800c9c6:	4798      	blx	r3
 800c9c8:	4603      	mov	r3, r0
 800c9ca:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c9cc:	7dfb      	ldrb	r3, [r7, #23]
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d001      	beq.n	800c9d6 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c9d2:	7dfb      	ldrb	r3, [r7, #23]
 800c9d4:	e000      	b.n	800c9d8 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3718      	adds	r7, #24
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2201      	movs	r2, #1
 800c9ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2200      	movs	r2, #0
 800ca02:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d101      	bne.n	800ca14 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800ca10:	2303      	movs	r3, #3
 800ca12:	e02f      	b.n	800ca74 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d00f      	beq.n	800ca3e <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca24:	685b      	ldr	r3, [r3, #4]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d009      	beq.n	800ca3e <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca30:	685b      	ldr	r3, [r3, #4]
 800ca32:	687a      	ldr	r2, [r7, #4]
 800ca34:	6852      	ldr	r2, [r2, #4]
 800ca36:	b2d2      	uxtb	r2, r2
 800ca38:	4611      	mov	r1, r2
 800ca3a:	6878      	ldr	r0, [r7, #4]
 800ca3c:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ca3e:	2340      	movs	r3, #64	; 0x40
 800ca40:	2200      	movs	r2, #0
 800ca42:	2100      	movs	r1, #0
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f001 fa86 	bl	800df56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2201      	movs	r2, #1
 800ca4e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2240      	movs	r2, #64	; 0x40
 800ca56:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ca5a:	2340      	movs	r3, #64	; 0x40
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	2180      	movs	r1, #128	; 0x80
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f001 fa78 	bl	800df56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2201      	movs	r2, #1
 800ca6a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2240      	movs	r2, #64	; 0x40
 800ca70:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800ca72:	2300      	movs	r3, #0
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3708      	adds	r7, #8
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ca7c:	b480      	push	{r7}
 800ca7e:	b083      	sub	sp, #12
 800ca80:	af00      	add	r7, sp, #0
 800ca82:	6078      	str	r0, [r7, #4]
 800ca84:	460b      	mov	r3, r1
 800ca86:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	78fa      	ldrb	r2, [r7, #3]
 800ca8c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ca8e:	2300      	movs	r3, #0
}
 800ca90:	4618      	mov	r0, r3
 800ca92:	370c      	adds	r7, #12
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr

0800ca9c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ca9c:	b480      	push	{r7}
 800ca9e:	b083      	sub	sp, #12
 800caa0:	af00      	add	r7, sp, #0
 800caa2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caaa:	b2da      	uxtb	r2, r3
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	2204      	movs	r2, #4
 800cab6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800caba:	2300      	movs	r3, #0
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	370c      	adds	r7, #12
 800cac0:	46bd      	mov	sp, r7
 800cac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac6:	4770      	bx	lr

0800cac8 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cac8:	b480      	push	{r7}
 800caca:	b083      	sub	sp, #12
 800cacc:	af00      	add	r7, sp, #0
 800cace:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	2b04      	cmp	r3, #4
 800cada:	d106      	bne.n	800caea <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cae2:	b2da      	uxtb	r2, r3
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800caea:	2300      	movs	r3, #0
}
 800caec:	4618      	mov	r0, r3
 800caee:	370c      	adds	r7, #12
 800caf0:	46bd      	mov	sp, r7
 800caf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf6:	4770      	bx	lr

0800caf8 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d101      	bne.n	800cb0e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800cb0a:	2303      	movs	r3, #3
 800cb0c:	e012      	b.n	800cb34 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb14:	b2db      	uxtb	r3, r3
 800cb16:	2b03      	cmp	r3, #3
 800cb18:	d10b      	bne.n	800cb32 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb20:	69db      	ldr	r3, [r3, #28]
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d005      	beq.n	800cb32 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb2c:	69db      	ldr	r3, [r3, #28]
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cb32:	2300      	movs	r3, #0
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3708      	adds	r7, #8
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b087      	sub	sp, #28
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cb48:	697b      	ldr	r3, [r7, #20]
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cb4e:	697b      	ldr	r3, [r7, #20]
 800cb50:	3301      	adds	r3, #1
 800cb52:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cb54:	697b      	ldr	r3, [r7, #20]
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cb5a:	8a3b      	ldrh	r3, [r7, #16]
 800cb5c:	021b      	lsls	r3, r3, #8
 800cb5e:	b21a      	sxth	r2, r3
 800cb60:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cb64:	4313      	orrs	r3, r2
 800cb66:	b21b      	sxth	r3, r3
 800cb68:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cb6a:	89fb      	ldrh	r3, [r7, #14]
}
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	371c      	adds	r7, #28
 800cb70:	46bd      	mov	sp, r7
 800cb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb76:	4770      	bx	lr

0800cb78 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b084      	sub	sp, #16
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb82:	2300      	movs	r3, #0
 800cb84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb86:	683b      	ldr	r3, [r7, #0]
 800cb88:	781b      	ldrb	r3, [r3, #0]
 800cb8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb8e:	2b40      	cmp	r3, #64	; 0x40
 800cb90:	d005      	beq.n	800cb9e <USBD_StdDevReq+0x26>
 800cb92:	2b40      	cmp	r3, #64	; 0x40
 800cb94:	d853      	bhi.n	800cc3e <USBD_StdDevReq+0xc6>
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d00b      	beq.n	800cbb2 <USBD_StdDevReq+0x3a>
 800cb9a:	2b20      	cmp	r3, #32
 800cb9c:	d14f      	bne.n	800cc3e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cba4:	689b      	ldr	r3, [r3, #8]
 800cba6:	6839      	ldr	r1, [r7, #0]
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	4798      	blx	r3
 800cbac:	4603      	mov	r3, r0
 800cbae:	73fb      	strb	r3, [r7, #15]
      break;
 800cbb0:	e04a      	b.n	800cc48 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cbb2:	683b      	ldr	r3, [r7, #0]
 800cbb4:	785b      	ldrb	r3, [r3, #1]
 800cbb6:	2b09      	cmp	r3, #9
 800cbb8:	d83b      	bhi.n	800cc32 <USBD_StdDevReq+0xba>
 800cbba:	a201      	add	r2, pc, #4	; (adr r2, 800cbc0 <USBD_StdDevReq+0x48>)
 800cbbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbc0:	0800cc15 	.word	0x0800cc15
 800cbc4:	0800cc29 	.word	0x0800cc29
 800cbc8:	0800cc33 	.word	0x0800cc33
 800cbcc:	0800cc1f 	.word	0x0800cc1f
 800cbd0:	0800cc33 	.word	0x0800cc33
 800cbd4:	0800cbf3 	.word	0x0800cbf3
 800cbd8:	0800cbe9 	.word	0x0800cbe9
 800cbdc:	0800cc33 	.word	0x0800cc33
 800cbe0:	0800cc0b 	.word	0x0800cc0b
 800cbe4:	0800cbfd 	.word	0x0800cbfd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cbe8:	6839      	ldr	r1, [r7, #0]
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 f9de 	bl	800cfac <USBD_GetDescriptor>
          break;
 800cbf0:	e024      	b.n	800cc3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cbf2:	6839      	ldr	r1, [r7, #0]
 800cbf4:	6878      	ldr	r0, [r7, #4]
 800cbf6:	f000 fb6d 	bl	800d2d4 <USBD_SetAddress>
          break;
 800cbfa:	e01f      	b.n	800cc3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cbfc:	6839      	ldr	r1, [r7, #0]
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 fbac 	bl	800d35c <USBD_SetConfig>
 800cc04:	4603      	mov	r3, r0
 800cc06:	73fb      	strb	r3, [r7, #15]
          break;
 800cc08:	e018      	b.n	800cc3c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cc0a:	6839      	ldr	r1, [r7, #0]
 800cc0c:	6878      	ldr	r0, [r7, #4]
 800cc0e:	f000 fc4b 	bl	800d4a8 <USBD_GetConfig>
          break;
 800cc12:	e013      	b.n	800cc3c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cc14:	6839      	ldr	r1, [r7, #0]
 800cc16:	6878      	ldr	r0, [r7, #4]
 800cc18:	f000 fc7c 	bl	800d514 <USBD_GetStatus>
          break;
 800cc1c:	e00e      	b.n	800cc3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cc1e:	6839      	ldr	r1, [r7, #0]
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f000 fcab 	bl	800d57c <USBD_SetFeature>
          break;
 800cc26:	e009      	b.n	800cc3c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cc28:	6839      	ldr	r1, [r7, #0]
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f000 fcba 	bl	800d5a4 <USBD_ClrFeature>
          break;
 800cc30:	e004      	b.n	800cc3c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800cc32:	6839      	ldr	r1, [r7, #0]
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f000 fd11 	bl	800d65c <USBD_CtlError>
          break;
 800cc3a:	bf00      	nop
      }
      break;
 800cc3c:	e004      	b.n	800cc48 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800cc3e:	6839      	ldr	r1, [r7, #0]
 800cc40:	6878      	ldr	r0, [r7, #4]
 800cc42:	f000 fd0b 	bl	800d65c <USBD_CtlError>
      break;
 800cc46:	bf00      	nop
  }

  return ret;
 800cc48:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3710      	adds	r7, #16
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop

0800cc54 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc5e:	2300      	movs	r3, #0
 800cc60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc62:	683b      	ldr	r3, [r7, #0]
 800cc64:	781b      	ldrb	r3, [r3, #0]
 800cc66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cc6a:	2b40      	cmp	r3, #64	; 0x40
 800cc6c:	d005      	beq.n	800cc7a <USBD_StdItfReq+0x26>
 800cc6e:	2b40      	cmp	r3, #64	; 0x40
 800cc70:	d82f      	bhi.n	800ccd2 <USBD_StdItfReq+0x7e>
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d001      	beq.n	800cc7a <USBD_StdItfReq+0x26>
 800cc76:	2b20      	cmp	r3, #32
 800cc78:	d12b      	bne.n	800ccd2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	3b01      	subs	r3, #1
 800cc84:	2b02      	cmp	r3, #2
 800cc86:	d81d      	bhi.n	800ccc4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	889b      	ldrh	r3, [r3, #4]
 800cc8c:	b2db      	uxtb	r3, r3
 800cc8e:	2b01      	cmp	r3, #1
 800cc90:	d813      	bhi.n	800ccba <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc98:	689b      	ldr	r3, [r3, #8]
 800cc9a:	6839      	ldr	r1, [r7, #0]
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	4798      	blx	r3
 800cca0:	4603      	mov	r3, r0
 800cca2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	88db      	ldrh	r3, [r3, #6]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d110      	bne.n	800ccce <USBD_StdItfReq+0x7a>
 800ccac:	7bfb      	ldrb	r3, [r7, #15]
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d10d      	bne.n	800ccce <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f000 fd9d 	bl	800d7f2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ccb8:	e009      	b.n	800ccce <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ccba:	6839      	ldr	r1, [r7, #0]
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f000 fccd 	bl	800d65c <USBD_CtlError>
          break;
 800ccc2:	e004      	b.n	800ccce <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ccc4:	6839      	ldr	r1, [r7, #0]
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f000 fcc8 	bl	800d65c <USBD_CtlError>
          break;
 800cccc:	e000      	b.n	800ccd0 <USBD_StdItfReq+0x7c>
          break;
 800ccce:	bf00      	nop
      }
      break;
 800ccd0:	e004      	b.n	800ccdc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ccd2:	6839      	ldr	r1, [r7, #0]
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f000 fcc1 	bl	800d65c <USBD_CtlError>
      break;
 800ccda:	bf00      	nop
  }

  return ret;
 800ccdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	3710      	adds	r7, #16
 800cce2:	46bd      	mov	sp, r7
 800cce4:	bd80      	pop	{r7, pc}

0800cce6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cce6:	b580      	push	{r7, lr}
 800cce8:	b084      	sub	sp, #16
 800ccea:	af00      	add	r7, sp, #0
 800ccec:	6078      	str	r0, [r7, #4]
 800ccee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	889b      	ldrh	r3, [r3, #4]
 800ccf8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd02:	2b40      	cmp	r3, #64	; 0x40
 800cd04:	d007      	beq.n	800cd16 <USBD_StdEPReq+0x30>
 800cd06:	2b40      	cmp	r3, #64	; 0x40
 800cd08:	f200 8145 	bhi.w	800cf96 <USBD_StdEPReq+0x2b0>
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d00c      	beq.n	800cd2a <USBD_StdEPReq+0x44>
 800cd10:	2b20      	cmp	r3, #32
 800cd12:	f040 8140 	bne.w	800cf96 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd1c:	689b      	ldr	r3, [r3, #8]
 800cd1e:	6839      	ldr	r1, [r7, #0]
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	4798      	blx	r3
 800cd24:	4603      	mov	r3, r0
 800cd26:	73fb      	strb	r3, [r7, #15]
      break;
 800cd28:	e13a      	b.n	800cfa0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	785b      	ldrb	r3, [r3, #1]
 800cd2e:	2b03      	cmp	r3, #3
 800cd30:	d007      	beq.n	800cd42 <USBD_StdEPReq+0x5c>
 800cd32:	2b03      	cmp	r3, #3
 800cd34:	f300 8129 	bgt.w	800cf8a <USBD_StdEPReq+0x2a4>
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d07f      	beq.n	800ce3c <USBD_StdEPReq+0x156>
 800cd3c:	2b01      	cmp	r3, #1
 800cd3e:	d03c      	beq.n	800cdba <USBD_StdEPReq+0xd4>
 800cd40:	e123      	b.n	800cf8a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	2b02      	cmp	r3, #2
 800cd4c:	d002      	beq.n	800cd54 <USBD_StdEPReq+0x6e>
 800cd4e:	2b03      	cmp	r3, #3
 800cd50:	d016      	beq.n	800cd80 <USBD_StdEPReq+0x9a>
 800cd52:	e02c      	b.n	800cdae <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd54:	7bbb      	ldrb	r3, [r7, #14]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d00d      	beq.n	800cd76 <USBD_StdEPReq+0x90>
 800cd5a:	7bbb      	ldrb	r3, [r7, #14]
 800cd5c:	2b80      	cmp	r3, #128	; 0x80
 800cd5e:	d00a      	beq.n	800cd76 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd60:	7bbb      	ldrb	r3, [r7, #14]
 800cd62:	4619      	mov	r1, r3
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f001 f93b 	bl	800dfe0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd6a:	2180      	movs	r1, #128	; 0x80
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f001 f937 	bl	800dfe0 <USBD_LL_StallEP>
 800cd72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cd74:	e020      	b.n	800cdb8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800cd76:	6839      	ldr	r1, [r7, #0]
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f000 fc6f 	bl	800d65c <USBD_CtlError>
              break;
 800cd7e:	e01b      	b.n	800cdb8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	885b      	ldrh	r3, [r3, #2]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d10e      	bne.n	800cda6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cd88:	7bbb      	ldrb	r3, [r7, #14]
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d00b      	beq.n	800cda6 <USBD_StdEPReq+0xc0>
 800cd8e:	7bbb      	ldrb	r3, [r7, #14]
 800cd90:	2b80      	cmp	r3, #128	; 0x80
 800cd92:	d008      	beq.n	800cda6 <USBD_StdEPReq+0xc0>
 800cd94:	683b      	ldr	r3, [r7, #0]
 800cd96:	88db      	ldrh	r3, [r3, #6]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d104      	bne.n	800cda6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd9c:	7bbb      	ldrb	r3, [r7, #14]
 800cd9e:	4619      	mov	r1, r3
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f001 f91d 	bl	800dfe0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cda6:	6878      	ldr	r0, [r7, #4]
 800cda8:	f000 fd23 	bl	800d7f2 <USBD_CtlSendStatus>

              break;
 800cdac:	e004      	b.n	800cdb8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cdae:	6839      	ldr	r1, [r7, #0]
 800cdb0:	6878      	ldr	r0, [r7, #4]
 800cdb2:	f000 fc53 	bl	800d65c <USBD_CtlError>
              break;
 800cdb6:	bf00      	nop
          }
          break;
 800cdb8:	e0ec      	b.n	800cf94 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdc0:	b2db      	uxtb	r3, r3
 800cdc2:	2b02      	cmp	r3, #2
 800cdc4:	d002      	beq.n	800cdcc <USBD_StdEPReq+0xe6>
 800cdc6:	2b03      	cmp	r3, #3
 800cdc8:	d016      	beq.n	800cdf8 <USBD_StdEPReq+0x112>
 800cdca:	e030      	b.n	800ce2e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cdcc:	7bbb      	ldrb	r3, [r7, #14]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d00d      	beq.n	800cdee <USBD_StdEPReq+0x108>
 800cdd2:	7bbb      	ldrb	r3, [r7, #14]
 800cdd4:	2b80      	cmp	r3, #128	; 0x80
 800cdd6:	d00a      	beq.n	800cdee <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cdd8:	7bbb      	ldrb	r3, [r7, #14]
 800cdda:	4619      	mov	r1, r3
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	f001 f8ff 	bl	800dfe0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cde2:	2180      	movs	r1, #128	; 0x80
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f001 f8fb 	bl	800dfe0 <USBD_LL_StallEP>
 800cdea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cdec:	e025      	b.n	800ce3a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800cdee:	6839      	ldr	r1, [r7, #0]
 800cdf0:	6878      	ldr	r0, [r7, #4]
 800cdf2:	f000 fc33 	bl	800d65c <USBD_CtlError>
              break;
 800cdf6:	e020      	b.n	800ce3a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	885b      	ldrh	r3, [r3, #2]
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d11b      	bne.n	800ce38 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ce00:	7bbb      	ldrb	r3, [r7, #14]
 800ce02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d004      	beq.n	800ce14 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ce0a:	7bbb      	ldrb	r3, [r7, #14]
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f001 f905 	bl	800e01e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f000 fcec 	bl	800d7f2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce20:	689b      	ldr	r3, [r3, #8]
 800ce22:	6839      	ldr	r1, [r7, #0]
 800ce24:	6878      	ldr	r0, [r7, #4]
 800ce26:	4798      	blx	r3
 800ce28:	4603      	mov	r3, r0
 800ce2a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ce2c:	e004      	b.n	800ce38 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ce2e:	6839      	ldr	r1, [r7, #0]
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f000 fc13 	bl	800d65c <USBD_CtlError>
              break;
 800ce36:	e000      	b.n	800ce3a <USBD_StdEPReq+0x154>
              break;
 800ce38:	bf00      	nop
          }
          break;
 800ce3a:	e0ab      	b.n	800cf94 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce42:	b2db      	uxtb	r3, r3
 800ce44:	2b02      	cmp	r3, #2
 800ce46:	d002      	beq.n	800ce4e <USBD_StdEPReq+0x168>
 800ce48:	2b03      	cmp	r3, #3
 800ce4a:	d032      	beq.n	800ceb2 <USBD_StdEPReq+0x1cc>
 800ce4c:	e097      	b.n	800cf7e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce4e:	7bbb      	ldrb	r3, [r7, #14]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d007      	beq.n	800ce64 <USBD_StdEPReq+0x17e>
 800ce54:	7bbb      	ldrb	r3, [r7, #14]
 800ce56:	2b80      	cmp	r3, #128	; 0x80
 800ce58:	d004      	beq.n	800ce64 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ce5a:	6839      	ldr	r1, [r7, #0]
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 fbfd 	bl	800d65c <USBD_CtlError>
                break;
 800ce62:	e091      	b.n	800cf88 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	da0b      	bge.n	800ce84 <USBD_StdEPReq+0x19e>
 800ce6c:	7bbb      	ldrb	r3, [r7, #14]
 800ce6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce72:	4613      	mov	r3, r2
 800ce74:	009b      	lsls	r3, r3, #2
 800ce76:	4413      	add	r3, r2
 800ce78:	009b      	lsls	r3, r3, #2
 800ce7a:	3310      	adds	r3, #16
 800ce7c:	687a      	ldr	r2, [r7, #4]
 800ce7e:	4413      	add	r3, r2
 800ce80:	3304      	adds	r3, #4
 800ce82:	e00b      	b.n	800ce9c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ce84:	7bbb      	ldrb	r3, [r7, #14]
 800ce86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce8a:	4613      	mov	r3, r2
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	4413      	add	r3, r2
 800ce90:	009b      	lsls	r3, r3, #2
 800ce92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ce96:	687a      	ldr	r2, [r7, #4]
 800ce98:	4413      	add	r3, r2
 800ce9a:	3304      	adds	r3, #4
 800ce9c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	2200      	movs	r2, #0
 800cea2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	2202      	movs	r2, #2
 800cea8:	4619      	mov	r1, r3
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f000 fc47 	bl	800d73e <USBD_CtlSendData>
              break;
 800ceb0:	e06a      	b.n	800cf88 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ceb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	da11      	bge.n	800cede <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ceba:	7bbb      	ldrb	r3, [r7, #14]
 800cebc:	f003 020f 	and.w	r2, r3, #15
 800cec0:	6879      	ldr	r1, [r7, #4]
 800cec2:	4613      	mov	r3, r2
 800cec4:	009b      	lsls	r3, r3, #2
 800cec6:	4413      	add	r3, r2
 800cec8:	009b      	lsls	r3, r3, #2
 800ceca:	440b      	add	r3, r1
 800cecc:	3324      	adds	r3, #36	; 0x24
 800cece:	881b      	ldrh	r3, [r3, #0]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d117      	bne.n	800cf04 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ced4:	6839      	ldr	r1, [r7, #0]
 800ced6:	6878      	ldr	r0, [r7, #4]
 800ced8:	f000 fbc0 	bl	800d65c <USBD_CtlError>
                  break;
 800cedc:	e054      	b.n	800cf88 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cede:	7bbb      	ldrb	r3, [r7, #14]
 800cee0:	f003 020f 	and.w	r2, r3, #15
 800cee4:	6879      	ldr	r1, [r7, #4]
 800cee6:	4613      	mov	r3, r2
 800cee8:	009b      	lsls	r3, r3, #2
 800ceea:	4413      	add	r3, r2
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	440b      	add	r3, r1
 800cef0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cef4:	881b      	ldrh	r3, [r3, #0]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d104      	bne.n	800cf04 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cefa:	6839      	ldr	r1, [r7, #0]
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f000 fbad 	bl	800d65c <USBD_CtlError>
                  break;
 800cf02:	e041      	b.n	800cf88 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	da0b      	bge.n	800cf24 <USBD_StdEPReq+0x23e>
 800cf0c:	7bbb      	ldrb	r3, [r7, #14]
 800cf0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf12:	4613      	mov	r3, r2
 800cf14:	009b      	lsls	r3, r3, #2
 800cf16:	4413      	add	r3, r2
 800cf18:	009b      	lsls	r3, r3, #2
 800cf1a:	3310      	adds	r3, #16
 800cf1c:	687a      	ldr	r2, [r7, #4]
 800cf1e:	4413      	add	r3, r2
 800cf20:	3304      	adds	r3, #4
 800cf22:	e00b      	b.n	800cf3c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cf24:	7bbb      	ldrb	r3, [r7, #14]
 800cf26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf2a:	4613      	mov	r3, r2
 800cf2c:	009b      	lsls	r3, r3, #2
 800cf2e:	4413      	add	r3, r2
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	4413      	add	r3, r2
 800cf3a:	3304      	adds	r3, #4
 800cf3c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cf3e:	7bbb      	ldrb	r3, [r7, #14]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d002      	beq.n	800cf4a <USBD_StdEPReq+0x264>
 800cf44:	7bbb      	ldrb	r3, [r7, #14]
 800cf46:	2b80      	cmp	r3, #128	; 0x80
 800cf48:	d103      	bne.n	800cf52 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	601a      	str	r2, [r3, #0]
 800cf50:	e00e      	b.n	800cf70 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cf52:	7bbb      	ldrb	r3, [r7, #14]
 800cf54:	4619      	mov	r1, r3
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f001 f880 	bl	800e05c <USBD_LL_IsStallEP>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d003      	beq.n	800cf6a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	2201      	movs	r2, #1
 800cf66:	601a      	str	r2, [r3, #0]
 800cf68:	e002      	b.n	800cf70 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	2202      	movs	r2, #2
 800cf74:	4619      	mov	r1, r3
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f000 fbe1 	bl	800d73e <USBD_CtlSendData>
              break;
 800cf7c:	e004      	b.n	800cf88 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cf7e:	6839      	ldr	r1, [r7, #0]
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f000 fb6b 	bl	800d65c <USBD_CtlError>
              break;
 800cf86:	bf00      	nop
          }
          break;
 800cf88:	e004      	b.n	800cf94 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cf8a:	6839      	ldr	r1, [r7, #0]
 800cf8c:	6878      	ldr	r0, [r7, #4]
 800cf8e:	f000 fb65 	bl	800d65c <USBD_CtlError>
          break;
 800cf92:	bf00      	nop
      }
      break;
 800cf94:	e004      	b.n	800cfa0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cf96:	6839      	ldr	r1, [r7, #0]
 800cf98:	6878      	ldr	r0, [r7, #4]
 800cf9a:	f000 fb5f 	bl	800d65c <USBD_CtlError>
      break;
 800cf9e:	bf00      	nop
  }

  return ret;
 800cfa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3710      	adds	r7, #16
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
	...

0800cfac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfac:	b580      	push	{r7, lr}
 800cfae:	b084      	sub	sp, #16
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
 800cfb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cfc2:	683b      	ldr	r3, [r7, #0]
 800cfc4:	885b      	ldrh	r3, [r3, #2]
 800cfc6:	0a1b      	lsrs	r3, r3, #8
 800cfc8:	b29b      	uxth	r3, r3
 800cfca:	3b01      	subs	r3, #1
 800cfcc:	2b0e      	cmp	r3, #14
 800cfce:	f200 8152 	bhi.w	800d276 <USBD_GetDescriptor+0x2ca>
 800cfd2:	a201      	add	r2, pc, #4	; (adr r2, 800cfd8 <USBD_GetDescriptor+0x2c>)
 800cfd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfd8:	0800d049 	.word	0x0800d049
 800cfdc:	0800d061 	.word	0x0800d061
 800cfe0:	0800d0a1 	.word	0x0800d0a1
 800cfe4:	0800d277 	.word	0x0800d277
 800cfe8:	0800d277 	.word	0x0800d277
 800cfec:	0800d217 	.word	0x0800d217
 800cff0:	0800d243 	.word	0x0800d243
 800cff4:	0800d277 	.word	0x0800d277
 800cff8:	0800d277 	.word	0x0800d277
 800cffc:	0800d277 	.word	0x0800d277
 800d000:	0800d277 	.word	0x0800d277
 800d004:	0800d277 	.word	0x0800d277
 800d008:	0800d277 	.word	0x0800d277
 800d00c:	0800d277 	.word	0x0800d277
 800d010:	0800d015 	.word	0x0800d015
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d01a:	69db      	ldr	r3, [r3, #28]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d00b      	beq.n	800d038 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d026:	69db      	ldr	r3, [r3, #28]
 800d028:	687a      	ldr	r2, [r7, #4]
 800d02a:	7c12      	ldrb	r2, [r2, #16]
 800d02c:	f107 0108 	add.w	r1, r7, #8
 800d030:	4610      	mov	r0, r2
 800d032:	4798      	blx	r3
 800d034:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d036:	e126      	b.n	800d286 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d038:	6839      	ldr	r1, [r7, #0]
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f000 fb0e 	bl	800d65c <USBD_CtlError>
        err++;
 800d040:	7afb      	ldrb	r3, [r7, #11]
 800d042:	3301      	adds	r3, #1
 800d044:	72fb      	strb	r3, [r7, #11]
      break;
 800d046:	e11e      	b.n	800d286 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	7c12      	ldrb	r2, [r2, #16]
 800d054:	f107 0108 	add.w	r1, r7, #8
 800d058:	4610      	mov	r0, r2
 800d05a:	4798      	blx	r3
 800d05c:	60f8      	str	r0, [r7, #12]
      break;
 800d05e:	e112      	b.n	800d286 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	7c1b      	ldrb	r3, [r3, #16]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d10d      	bne.n	800d084 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d070:	f107 0208 	add.w	r2, r7, #8
 800d074:	4610      	mov	r0, r2
 800d076:	4798      	blx	r3
 800d078:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	3301      	adds	r3, #1
 800d07e:	2202      	movs	r2, #2
 800d080:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d082:	e100      	b.n	800d286 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d084:	687b      	ldr	r3, [r7, #4]
 800d086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d08a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d08c:	f107 0208 	add.w	r2, r7, #8
 800d090:	4610      	mov	r0, r2
 800d092:	4798      	blx	r3
 800d094:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	3301      	adds	r3, #1
 800d09a:	2202      	movs	r2, #2
 800d09c:	701a      	strb	r2, [r3, #0]
      break;
 800d09e:	e0f2      	b.n	800d286 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	885b      	ldrh	r3, [r3, #2]
 800d0a4:	b2db      	uxtb	r3, r3
 800d0a6:	2b05      	cmp	r3, #5
 800d0a8:	f200 80ac 	bhi.w	800d204 <USBD_GetDescriptor+0x258>
 800d0ac:	a201      	add	r2, pc, #4	; (adr r2, 800d0b4 <USBD_GetDescriptor+0x108>)
 800d0ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b2:	bf00      	nop
 800d0b4:	0800d0cd 	.word	0x0800d0cd
 800d0b8:	0800d101 	.word	0x0800d101
 800d0bc:	0800d135 	.word	0x0800d135
 800d0c0:	0800d169 	.word	0x0800d169
 800d0c4:	0800d19d 	.word	0x0800d19d
 800d0c8:	0800d1d1 	.word	0x0800d1d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0d2:	685b      	ldr	r3, [r3, #4]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d00b      	beq.n	800d0f0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	7c12      	ldrb	r2, [r2, #16]
 800d0e4:	f107 0108 	add.w	r1, r7, #8
 800d0e8:	4610      	mov	r0, r2
 800d0ea:	4798      	blx	r3
 800d0ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0ee:	e091      	b.n	800d214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d0f0:	6839      	ldr	r1, [r7, #0]
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 fab2 	bl	800d65c <USBD_CtlError>
            err++;
 800d0f8:	7afb      	ldrb	r3, [r7, #11]
 800d0fa:	3301      	adds	r3, #1
 800d0fc:	72fb      	strb	r3, [r7, #11]
          break;
 800d0fe:	e089      	b.n	800d214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d106:	689b      	ldr	r3, [r3, #8]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	d00b      	beq.n	800d124 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d112:	689b      	ldr	r3, [r3, #8]
 800d114:	687a      	ldr	r2, [r7, #4]
 800d116:	7c12      	ldrb	r2, [r2, #16]
 800d118:	f107 0108 	add.w	r1, r7, #8
 800d11c:	4610      	mov	r0, r2
 800d11e:	4798      	blx	r3
 800d120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d122:	e077      	b.n	800d214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d124:	6839      	ldr	r1, [r7, #0]
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 fa98 	bl	800d65c <USBD_CtlError>
            err++;
 800d12c:	7afb      	ldrb	r3, [r7, #11]
 800d12e:	3301      	adds	r3, #1
 800d130:	72fb      	strb	r3, [r7, #11]
          break;
 800d132:	e06f      	b.n	800d214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d13a:	68db      	ldr	r3, [r3, #12]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d00b      	beq.n	800d158 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d146:	68db      	ldr	r3, [r3, #12]
 800d148:	687a      	ldr	r2, [r7, #4]
 800d14a:	7c12      	ldrb	r2, [r2, #16]
 800d14c:	f107 0108 	add.w	r1, r7, #8
 800d150:	4610      	mov	r0, r2
 800d152:	4798      	blx	r3
 800d154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d156:	e05d      	b.n	800d214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d158:	6839      	ldr	r1, [r7, #0]
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 fa7e 	bl	800d65c <USBD_CtlError>
            err++;
 800d160:	7afb      	ldrb	r3, [r7, #11]
 800d162:	3301      	adds	r3, #1
 800d164:	72fb      	strb	r3, [r7, #11]
          break;
 800d166:	e055      	b.n	800d214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d16e:	691b      	ldr	r3, [r3, #16]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d00b      	beq.n	800d18c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d17a:	691b      	ldr	r3, [r3, #16]
 800d17c:	687a      	ldr	r2, [r7, #4]
 800d17e:	7c12      	ldrb	r2, [r2, #16]
 800d180:	f107 0108 	add.w	r1, r7, #8
 800d184:	4610      	mov	r0, r2
 800d186:	4798      	blx	r3
 800d188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d18a:	e043      	b.n	800d214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d18c:	6839      	ldr	r1, [r7, #0]
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f000 fa64 	bl	800d65c <USBD_CtlError>
            err++;
 800d194:	7afb      	ldrb	r3, [r7, #11]
 800d196:	3301      	adds	r3, #1
 800d198:	72fb      	strb	r3, [r7, #11]
          break;
 800d19a:	e03b      	b.n	800d214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1a2:	695b      	ldr	r3, [r3, #20]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d00b      	beq.n	800d1c0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1ae:	695b      	ldr	r3, [r3, #20]
 800d1b0:	687a      	ldr	r2, [r7, #4]
 800d1b2:	7c12      	ldrb	r2, [r2, #16]
 800d1b4:	f107 0108 	add.w	r1, r7, #8
 800d1b8:	4610      	mov	r0, r2
 800d1ba:	4798      	blx	r3
 800d1bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1be:	e029      	b.n	800d214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d1c0:	6839      	ldr	r1, [r7, #0]
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f000 fa4a 	bl	800d65c <USBD_CtlError>
            err++;
 800d1c8:	7afb      	ldrb	r3, [r7, #11]
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	72fb      	strb	r3, [r7, #11]
          break;
 800d1ce:	e021      	b.n	800d214 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1d6:	699b      	ldr	r3, [r3, #24]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d00b      	beq.n	800d1f4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1e2:	699b      	ldr	r3, [r3, #24]
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	7c12      	ldrb	r2, [r2, #16]
 800d1e8:	f107 0108 	add.w	r1, r7, #8
 800d1ec:	4610      	mov	r0, r2
 800d1ee:	4798      	blx	r3
 800d1f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1f2:	e00f      	b.n	800d214 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d1f4:	6839      	ldr	r1, [r7, #0]
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f000 fa30 	bl	800d65c <USBD_CtlError>
            err++;
 800d1fc:	7afb      	ldrb	r3, [r7, #11]
 800d1fe:	3301      	adds	r3, #1
 800d200:	72fb      	strb	r3, [r7, #11]
          break;
 800d202:	e007      	b.n	800d214 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d204:	6839      	ldr	r1, [r7, #0]
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 fa28 	bl	800d65c <USBD_CtlError>
          err++;
 800d20c:	7afb      	ldrb	r3, [r7, #11]
 800d20e:	3301      	adds	r3, #1
 800d210:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d212:	bf00      	nop
      }
      break;
 800d214:	e037      	b.n	800d286 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	7c1b      	ldrb	r3, [r3, #16]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d109      	bne.n	800d232 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d226:	f107 0208 	add.w	r2, r7, #8
 800d22a:	4610      	mov	r0, r2
 800d22c:	4798      	blx	r3
 800d22e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d230:	e029      	b.n	800d286 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d232:	6839      	ldr	r1, [r7, #0]
 800d234:	6878      	ldr	r0, [r7, #4]
 800d236:	f000 fa11 	bl	800d65c <USBD_CtlError>
        err++;
 800d23a:	7afb      	ldrb	r3, [r7, #11]
 800d23c:	3301      	adds	r3, #1
 800d23e:	72fb      	strb	r3, [r7, #11]
      break;
 800d240:	e021      	b.n	800d286 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	7c1b      	ldrb	r3, [r3, #16]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d10d      	bne.n	800d266 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d252:	f107 0208 	add.w	r2, r7, #8
 800d256:	4610      	mov	r0, r2
 800d258:	4798      	blx	r3
 800d25a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	3301      	adds	r3, #1
 800d260:	2207      	movs	r2, #7
 800d262:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d264:	e00f      	b.n	800d286 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d266:	6839      	ldr	r1, [r7, #0]
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 f9f7 	bl	800d65c <USBD_CtlError>
        err++;
 800d26e:	7afb      	ldrb	r3, [r7, #11]
 800d270:	3301      	adds	r3, #1
 800d272:	72fb      	strb	r3, [r7, #11]
      break;
 800d274:	e007      	b.n	800d286 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d276:	6839      	ldr	r1, [r7, #0]
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f000 f9ef 	bl	800d65c <USBD_CtlError>
      err++;
 800d27e:	7afb      	ldrb	r3, [r7, #11]
 800d280:	3301      	adds	r3, #1
 800d282:	72fb      	strb	r3, [r7, #11]
      break;
 800d284:	bf00      	nop
  }

  if (err != 0U)
 800d286:	7afb      	ldrb	r3, [r7, #11]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d11e      	bne.n	800d2ca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d28c:	683b      	ldr	r3, [r7, #0]
 800d28e:	88db      	ldrh	r3, [r3, #6]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d016      	beq.n	800d2c2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d294:	893b      	ldrh	r3, [r7, #8]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d00e      	beq.n	800d2b8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d29a:	683b      	ldr	r3, [r7, #0]
 800d29c:	88da      	ldrh	r2, [r3, #6]
 800d29e:	893b      	ldrh	r3, [r7, #8]
 800d2a0:	4293      	cmp	r3, r2
 800d2a2:	bf28      	it	cs
 800d2a4:	4613      	movcs	r3, r2
 800d2a6:	b29b      	uxth	r3, r3
 800d2a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d2aa:	893b      	ldrh	r3, [r7, #8]
 800d2ac:	461a      	mov	r2, r3
 800d2ae:	68f9      	ldr	r1, [r7, #12]
 800d2b0:	6878      	ldr	r0, [r7, #4]
 800d2b2:	f000 fa44 	bl	800d73e <USBD_CtlSendData>
 800d2b6:	e009      	b.n	800d2cc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d2b8:	6839      	ldr	r1, [r7, #0]
 800d2ba:	6878      	ldr	r0, [r7, #4]
 800d2bc:	f000 f9ce 	bl	800d65c <USBD_CtlError>
 800d2c0:	e004      	b.n	800d2cc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f000 fa95 	bl	800d7f2 <USBD_CtlSendStatus>
 800d2c8:	e000      	b.n	800d2cc <USBD_GetDescriptor+0x320>
    return;
 800d2ca:	bf00      	nop
  }
}
 800d2cc:	3710      	adds	r7, #16
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	bd80      	pop	{r7, pc}
 800d2d2:	bf00      	nop

0800d2d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b084      	sub	sp, #16
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
 800d2dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	889b      	ldrh	r3, [r3, #4]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d131      	bne.n	800d34a <USBD_SetAddress+0x76>
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	88db      	ldrh	r3, [r3, #6]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d12d      	bne.n	800d34a <USBD_SetAddress+0x76>
 800d2ee:	683b      	ldr	r3, [r7, #0]
 800d2f0:	885b      	ldrh	r3, [r3, #2]
 800d2f2:	2b7f      	cmp	r3, #127	; 0x7f
 800d2f4:	d829      	bhi.n	800d34a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	885b      	ldrh	r3, [r3, #2]
 800d2fa:	b2db      	uxtb	r3, r3
 800d2fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d300:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	2b03      	cmp	r3, #3
 800d30c:	d104      	bne.n	800d318 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d30e:	6839      	ldr	r1, [r7, #0]
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f000 f9a3 	bl	800d65c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d316:	e01d      	b.n	800d354 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	7bfa      	ldrb	r2, [r7, #15]
 800d31c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d320:	7bfb      	ldrb	r3, [r7, #15]
 800d322:	4619      	mov	r1, r3
 800d324:	6878      	ldr	r0, [r7, #4]
 800d326:	f000 fec5 	bl	800e0b4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f000 fa61 	bl	800d7f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d330:	7bfb      	ldrb	r3, [r7, #15]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d004      	beq.n	800d340 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2202      	movs	r2, #2
 800d33a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d33e:	e009      	b.n	800d354 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	2201      	movs	r2, #1
 800d344:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d348:	e004      	b.n	800d354 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d34a:	6839      	ldr	r1, [r7, #0]
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 f985 	bl	800d65c <USBD_CtlError>
  }
}
 800d352:	bf00      	nop
 800d354:	bf00      	nop
 800d356:	3710      	adds	r7, #16
 800d358:	46bd      	mov	sp, r7
 800d35a:	bd80      	pop	{r7, pc}

0800d35c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b084      	sub	sp, #16
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
 800d364:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d366:	2300      	movs	r3, #0
 800d368:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	885b      	ldrh	r3, [r3, #2]
 800d36e:	b2da      	uxtb	r2, r3
 800d370:	4b4c      	ldr	r3, [pc, #304]	; (800d4a4 <USBD_SetConfig+0x148>)
 800d372:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d374:	4b4b      	ldr	r3, [pc, #300]	; (800d4a4 <USBD_SetConfig+0x148>)
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	2b01      	cmp	r3, #1
 800d37a:	d905      	bls.n	800d388 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d37c:	6839      	ldr	r1, [r7, #0]
 800d37e:	6878      	ldr	r0, [r7, #4]
 800d380:	f000 f96c 	bl	800d65c <USBD_CtlError>
    return USBD_FAIL;
 800d384:	2303      	movs	r3, #3
 800d386:	e088      	b.n	800d49a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d38e:	b2db      	uxtb	r3, r3
 800d390:	2b02      	cmp	r3, #2
 800d392:	d002      	beq.n	800d39a <USBD_SetConfig+0x3e>
 800d394:	2b03      	cmp	r3, #3
 800d396:	d025      	beq.n	800d3e4 <USBD_SetConfig+0x88>
 800d398:	e071      	b.n	800d47e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d39a:	4b42      	ldr	r3, [pc, #264]	; (800d4a4 <USBD_SetConfig+0x148>)
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d01c      	beq.n	800d3dc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d3a2:	4b40      	ldr	r3, [pc, #256]	; (800d4a4 <USBD_SetConfig+0x148>)
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	461a      	mov	r2, r3
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d3ac:	4b3d      	ldr	r3, [pc, #244]	; (800d4a4 <USBD_SetConfig+0x148>)
 800d3ae:	781b      	ldrb	r3, [r3, #0]
 800d3b0:	4619      	mov	r1, r3
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f7ff f992 	bl	800c6dc <USBD_SetClassConfig>
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d3bc:	7bfb      	ldrb	r3, [r7, #15]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d004      	beq.n	800d3cc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d3c2:	6839      	ldr	r1, [r7, #0]
 800d3c4:	6878      	ldr	r0, [r7, #4]
 800d3c6:	f000 f949 	bl	800d65c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d3ca:	e065      	b.n	800d498 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f000 fa10 	bl	800d7f2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2203      	movs	r2, #3
 800d3d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d3da:	e05d      	b.n	800d498 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d3dc:	6878      	ldr	r0, [r7, #4]
 800d3de:	f000 fa08 	bl	800d7f2 <USBD_CtlSendStatus>
      break;
 800d3e2:	e059      	b.n	800d498 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d3e4:	4b2f      	ldr	r3, [pc, #188]	; (800d4a4 <USBD_SetConfig+0x148>)
 800d3e6:	781b      	ldrb	r3, [r3, #0]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d112      	bne.n	800d412 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2202      	movs	r2, #2
 800d3f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d3f4:	4b2b      	ldr	r3, [pc, #172]	; (800d4a4 <USBD_SetConfig+0x148>)
 800d3f6:	781b      	ldrb	r3, [r3, #0]
 800d3f8:	461a      	mov	r2, r3
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d3fe:	4b29      	ldr	r3, [pc, #164]	; (800d4a4 <USBD_SetConfig+0x148>)
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	4619      	mov	r1, r3
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f7ff f985 	bl	800c714 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f000 f9f1 	bl	800d7f2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d410:	e042      	b.n	800d498 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d412:	4b24      	ldr	r3, [pc, #144]	; (800d4a4 <USBD_SetConfig+0x148>)
 800d414:	781b      	ldrb	r3, [r3, #0]
 800d416:	461a      	mov	r2, r3
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	685b      	ldr	r3, [r3, #4]
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d02a      	beq.n	800d476 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	685b      	ldr	r3, [r3, #4]
 800d424:	b2db      	uxtb	r3, r3
 800d426:	4619      	mov	r1, r3
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f7ff f973 	bl	800c714 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d42e:	4b1d      	ldr	r3, [pc, #116]	; (800d4a4 <USBD_SetConfig+0x148>)
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	461a      	mov	r2, r3
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d438:	4b1a      	ldr	r3, [pc, #104]	; (800d4a4 <USBD_SetConfig+0x148>)
 800d43a:	781b      	ldrb	r3, [r3, #0]
 800d43c:	4619      	mov	r1, r3
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f7ff f94c 	bl	800c6dc <USBD_SetClassConfig>
 800d444:	4603      	mov	r3, r0
 800d446:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d448:	7bfb      	ldrb	r3, [r7, #15]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d00f      	beq.n	800d46e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d44e:	6839      	ldr	r1, [r7, #0]
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 f903 	bl	800d65c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	b2db      	uxtb	r3, r3
 800d45c:	4619      	mov	r1, r3
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f7ff f958 	bl	800c714 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2202      	movs	r2, #2
 800d468:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d46c:	e014      	b.n	800d498 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f000 f9bf 	bl	800d7f2 <USBD_CtlSendStatus>
      break;
 800d474:	e010      	b.n	800d498 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 f9bb 	bl	800d7f2 <USBD_CtlSendStatus>
      break;
 800d47c:	e00c      	b.n	800d498 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d47e:	6839      	ldr	r1, [r7, #0]
 800d480:	6878      	ldr	r0, [r7, #4]
 800d482:	f000 f8eb 	bl	800d65c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d486:	4b07      	ldr	r3, [pc, #28]	; (800d4a4 <USBD_SetConfig+0x148>)
 800d488:	781b      	ldrb	r3, [r3, #0]
 800d48a:	4619      	mov	r1, r3
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f7ff f941 	bl	800c714 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d492:	2303      	movs	r3, #3
 800d494:	73fb      	strb	r3, [r7, #15]
      break;
 800d496:	bf00      	nop
  }

  return ret;
 800d498:	7bfb      	ldrb	r3, [r7, #15]
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3710      	adds	r7, #16
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	200027ec 	.word	0x200027ec

0800d4a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4a8:	b580      	push	{r7, lr}
 800d4aa:	b082      	sub	sp, #8
 800d4ac:	af00      	add	r7, sp, #0
 800d4ae:	6078      	str	r0, [r7, #4]
 800d4b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d4b2:	683b      	ldr	r3, [r7, #0]
 800d4b4:	88db      	ldrh	r3, [r3, #6]
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	d004      	beq.n	800d4c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d4ba:	6839      	ldr	r1, [r7, #0]
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 f8cd 	bl	800d65c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d4c2:	e023      	b.n	800d50c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4ca:	b2db      	uxtb	r3, r3
 800d4cc:	2b02      	cmp	r3, #2
 800d4ce:	dc02      	bgt.n	800d4d6 <USBD_GetConfig+0x2e>
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	dc03      	bgt.n	800d4dc <USBD_GetConfig+0x34>
 800d4d4:	e015      	b.n	800d502 <USBD_GetConfig+0x5a>
 800d4d6:	2b03      	cmp	r3, #3
 800d4d8:	d00b      	beq.n	800d4f2 <USBD_GetConfig+0x4a>
 800d4da:	e012      	b.n	800d502 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	3308      	adds	r3, #8
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f000 f927 	bl	800d73e <USBD_CtlSendData>
        break;
 800d4f0:	e00c      	b.n	800d50c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	3304      	adds	r3, #4
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	4619      	mov	r1, r3
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 f91f 	bl	800d73e <USBD_CtlSendData>
        break;
 800d500:	e004      	b.n	800d50c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d502:	6839      	ldr	r1, [r7, #0]
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f000 f8a9 	bl	800d65c <USBD_CtlError>
        break;
 800d50a:	bf00      	nop
}
 800d50c:	bf00      	nop
 800d50e:	3708      	adds	r7, #8
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}

0800d514 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d514:	b580      	push	{r7, lr}
 800d516:	b082      	sub	sp, #8
 800d518:	af00      	add	r7, sp, #0
 800d51a:	6078      	str	r0, [r7, #4]
 800d51c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d524:	b2db      	uxtb	r3, r3
 800d526:	3b01      	subs	r3, #1
 800d528:	2b02      	cmp	r3, #2
 800d52a:	d81e      	bhi.n	800d56a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	88db      	ldrh	r3, [r3, #6]
 800d530:	2b02      	cmp	r3, #2
 800d532:	d004      	beq.n	800d53e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d534:	6839      	ldr	r1, [r7, #0]
 800d536:	6878      	ldr	r0, [r7, #4]
 800d538:	f000 f890 	bl	800d65c <USBD_CtlError>
        break;
 800d53c:	e01a      	b.n	800d574 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2201      	movs	r2, #1
 800d542:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d005      	beq.n	800d55a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	68db      	ldr	r3, [r3, #12]
 800d552:	f043 0202 	orr.w	r2, r3, #2
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	330c      	adds	r3, #12
 800d55e:	2202      	movs	r2, #2
 800d560:	4619      	mov	r1, r3
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 f8eb 	bl	800d73e <USBD_CtlSendData>
      break;
 800d568:	e004      	b.n	800d574 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d56a:	6839      	ldr	r1, [r7, #0]
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f000 f875 	bl	800d65c <USBD_CtlError>
      break;
 800d572:	bf00      	nop
  }
}
 800d574:	bf00      	nop
 800d576:	3708      	adds	r7, #8
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d57c:	b580      	push	{r7, lr}
 800d57e:	b082      	sub	sp, #8
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
 800d584:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d586:	683b      	ldr	r3, [r7, #0]
 800d588:	885b      	ldrh	r3, [r3, #2]
 800d58a:	2b01      	cmp	r3, #1
 800d58c:	d106      	bne.n	800d59c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2201      	movs	r2, #1
 800d592:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d596:	6878      	ldr	r0, [r7, #4]
 800d598:	f000 f92b 	bl	800d7f2 <USBD_CtlSendStatus>
  }
}
 800d59c:	bf00      	nop
 800d59e:	3708      	adds	r7, #8
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b082      	sub	sp, #8
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
 800d5ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5b4:	b2db      	uxtb	r3, r3
 800d5b6:	3b01      	subs	r3, #1
 800d5b8:	2b02      	cmp	r3, #2
 800d5ba:	d80b      	bhi.n	800d5d4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d5bc:	683b      	ldr	r3, [r7, #0]
 800d5be:	885b      	ldrh	r3, [r3, #2]
 800d5c0:	2b01      	cmp	r3, #1
 800d5c2:	d10c      	bne.n	800d5de <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d5cc:	6878      	ldr	r0, [r7, #4]
 800d5ce:	f000 f910 	bl	800d7f2 <USBD_CtlSendStatus>
      }
      break;
 800d5d2:	e004      	b.n	800d5de <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d5d4:	6839      	ldr	r1, [r7, #0]
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 f840 	bl	800d65c <USBD_CtlError>
      break;
 800d5dc:	e000      	b.n	800d5e0 <USBD_ClrFeature+0x3c>
      break;
 800d5de:	bf00      	nop
  }
}
 800d5e0:	bf00      	nop
 800d5e2:	3708      	adds	r7, #8
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}

0800d5e8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b084      	sub	sp, #16
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
 800d5f0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	781a      	ldrb	r2, [r3, #0]
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	3301      	adds	r3, #1
 800d602:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d604:	68fb      	ldr	r3, [r7, #12]
 800d606:	781a      	ldrb	r2, [r3, #0]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	3301      	adds	r3, #1
 800d610:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d612:	68f8      	ldr	r0, [r7, #12]
 800d614:	f7ff fa92 	bl	800cb3c <SWAPBYTE>
 800d618:	4603      	mov	r3, r0
 800d61a:	461a      	mov	r2, r3
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	3301      	adds	r3, #1
 800d624:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	3301      	adds	r3, #1
 800d62a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d62c:	68f8      	ldr	r0, [r7, #12]
 800d62e:	f7ff fa85 	bl	800cb3c <SWAPBYTE>
 800d632:	4603      	mov	r3, r0
 800d634:	461a      	mov	r2, r3
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	3301      	adds	r3, #1
 800d63e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	3301      	adds	r3, #1
 800d644:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d646:	68f8      	ldr	r0, [r7, #12]
 800d648:	f7ff fa78 	bl	800cb3c <SWAPBYTE>
 800d64c:	4603      	mov	r3, r0
 800d64e:	461a      	mov	r2, r3
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	80da      	strh	r2, [r3, #6]
}
 800d654:	bf00      	nop
 800d656:	3710      	adds	r7, #16
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d666:	2180      	movs	r1, #128	; 0x80
 800d668:	6878      	ldr	r0, [r7, #4]
 800d66a:	f000 fcb9 	bl	800dfe0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d66e:	2100      	movs	r1, #0
 800d670:	6878      	ldr	r0, [r7, #4]
 800d672:	f000 fcb5 	bl	800dfe0 <USBD_LL_StallEP>
}
 800d676:	bf00      	nop
 800d678:	3708      	adds	r7, #8
 800d67a:	46bd      	mov	sp, r7
 800d67c:	bd80      	pop	{r7, pc}

0800d67e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d67e:	b580      	push	{r7, lr}
 800d680:	b086      	sub	sp, #24
 800d682:	af00      	add	r7, sp, #0
 800d684:	60f8      	str	r0, [r7, #12]
 800d686:	60b9      	str	r1, [r7, #8]
 800d688:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d68a:	2300      	movs	r3, #0
 800d68c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d036      	beq.n	800d702 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d698:	6938      	ldr	r0, [r7, #16]
 800d69a:	f000 f836 	bl	800d70a <USBD_GetLen>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	b29b      	uxth	r3, r3
 800d6a4:	005b      	lsls	r3, r3, #1
 800d6a6:	b29a      	uxth	r2, r3
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d6ac:	7dfb      	ldrb	r3, [r7, #23]
 800d6ae:	68ba      	ldr	r2, [r7, #8]
 800d6b0:	4413      	add	r3, r2
 800d6b2:	687a      	ldr	r2, [r7, #4]
 800d6b4:	7812      	ldrb	r2, [r2, #0]
 800d6b6:	701a      	strb	r2, [r3, #0]
  idx++;
 800d6b8:	7dfb      	ldrb	r3, [r7, #23]
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d6be:	7dfb      	ldrb	r3, [r7, #23]
 800d6c0:	68ba      	ldr	r2, [r7, #8]
 800d6c2:	4413      	add	r3, r2
 800d6c4:	2203      	movs	r2, #3
 800d6c6:	701a      	strb	r2, [r3, #0]
  idx++;
 800d6c8:	7dfb      	ldrb	r3, [r7, #23]
 800d6ca:	3301      	adds	r3, #1
 800d6cc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d6ce:	e013      	b.n	800d6f8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d6d0:	7dfb      	ldrb	r3, [r7, #23]
 800d6d2:	68ba      	ldr	r2, [r7, #8]
 800d6d4:	4413      	add	r3, r2
 800d6d6:	693a      	ldr	r2, [r7, #16]
 800d6d8:	7812      	ldrb	r2, [r2, #0]
 800d6da:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d6dc:	693b      	ldr	r3, [r7, #16]
 800d6de:	3301      	adds	r3, #1
 800d6e0:	613b      	str	r3, [r7, #16]
    idx++;
 800d6e2:	7dfb      	ldrb	r3, [r7, #23]
 800d6e4:	3301      	adds	r3, #1
 800d6e6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d6e8:	7dfb      	ldrb	r3, [r7, #23]
 800d6ea:	68ba      	ldr	r2, [r7, #8]
 800d6ec:	4413      	add	r3, r2
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	701a      	strb	r2, [r3, #0]
    idx++;
 800d6f2:	7dfb      	ldrb	r3, [r7, #23]
 800d6f4:	3301      	adds	r3, #1
 800d6f6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	781b      	ldrb	r3, [r3, #0]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d1e7      	bne.n	800d6d0 <USBD_GetString+0x52>
 800d700:	e000      	b.n	800d704 <USBD_GetString+0x86>
    return;
 800d702:	bf00      	nop
  }
}
 800d704:	3718      	adds	r7, #24
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}

0800d70a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d70a:	b480      	push	{r7}
 800d70c:	b085      	sub	sp, #20
 800d70e:	af00      	add	r7, sp, #0
 800d710:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d712:	2300      	movs	r3, #0
 800d714:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d71a:	e005      	b.n	800d728 <USBD_GetLen+0x1e>
  {
    len++;
 800d71c:	7bfb      	ldrb	r3, [r7, #15]
 800d71e:	3301      	adds	r3, #1
 800d720:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d722:	68bb      	ldr	r3, [r7, #8]
 800d724:	3301      	adds	r3, #1
 800d726:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d728:	68bb      	ldr	r3, [r7, #8]
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d1f5      	bne.n	800d71c <USBD_GetLen+0x12>
  }

  return len;
 800d730:	7bfb      	ldrb	r3, [r7, #15]
}
 800d732:	4618      	mov	r0, r3
 800d734:	3714      	adds	r7, #20
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr

0800d73e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d73e:	b580      	push	{r7, lr}
 800d740:	b084      	sub	sp, #16
 800d742:	af00      	add	r7, sp, #0
 800d744:	60f8      	str	r0, [r7, #12]
 800d746:	60b9      	str	r1, [r7, #8]
 800d748:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	2202      	movs	r2, #2
 800d74e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	687a      	ldr	r2, [r7, #4]
 800d756:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	687a      	ldr	r2, [r7, #4]
 800d75c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	68ba      	ldr	r2, [r7, #8]
 800d762:	2100      	movs	r1, #0
 800d764:	68f8      	ldr	r0, [r7, #12]
 800d766:	f000 fcc4 	bl	800e0f2 <USBD_LL_Transmit>

  return USBD_OK;
 800d76a:	2300      	movs	r3, #0
}
 800d76c:	4618      	mov	r0, r3
 800d76e:	3710      	adds	r7, #16
 800d770:	46bd      	mov	sp, r7
 800d772:	bd80      	pop	{r7, pc}

0800d774 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	60f8      	str	r0, [r7, #12]
 800d77c:	60b9      	str	r1, [r7, #8]
 800d77e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	68ba      	ldr	r2, [r7, #8]
 800d784:	2100      	movs	r1, #0
 800d786:	68f8      	ldr	r0, [r7, #12]
 800d788:	f000 fcb3 	bl	800e0f2 <USBD_LL_Transmit>

  return USBD_OK;
 800d78c:	2300      	movs	r3, #0
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3710      	adds	r7, #16
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}

0800d796 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d796:	b580      	push	{r7, lr}
 800d798:	b084      	sub	sp, #16
 800d79a:	af00      	add	r7, sp, #0
 800d79c:	60f8      	str	r0, [r7, #12]
 800d79e:	60b9      	str	r1, [r7, #8]
 800d7a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	2203      	movs	r2, #3
 800d7a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	687a      	ldr	r2, [r7, #4]
 800d7ae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	687a      	ldr	r2, [r7, #4]
 800d7b6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	68ba      	ldr	r2, [r7, #8]
 800d7be:	2100      	movs	r1, #0
 800d7c0:	68f8      	ldr	r0, [r7, #12]
 800d7c2:	f000 fcb7 	bl	800e134 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d7c6:	2300      	movs	r3, #0
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3710      	adds	r7, #16
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	60f8      	str	r0, [r7, #12]
 800d7d8:	60b9      	str	r1, [r7, #8]
 800d7da:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	68ba      	ldr	r2, [r7, #8]
 800d7e0:	2100      	movs	r1, #0
 800d7e2:	68f8      	ldr	r0, [r7, #12]
 800d7e4:	f000 fca6 	bl	800e134 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d7e8:	2300      	movs	r3, #0
}
 800d7ea:	4618      	mov	r0, r3
 800d7ec:	3710      	adds	r7, #16
 800d7ee:	46bd      	mov	sp, r7
 800d7f0:	bd80      	pop	{r7, pc}

0800d7f2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d7f2:	b580      	push	{r7, lr}
 800d7f4:	b082      	sub	sp, #8
 800d7f6:	af00      	add	r7, sp, #0
 800d7f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	2204      	movs	r2, #4
 800d7fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d802:	2300      	movs	r3, #0
 800d804:	2200      	movs	r2, #0
 800d806:	2100      	movs	r1, #0
 800d808:	6878      	ldr	r0, [r7, #4]
 800d80a:	f000 fc72 	bl	800e0f2 <USBD_LL_Transmit>

  return USBD_OK;
 800d80e:	2300      	movs	r3, #0
}
 800d810:	4618      	mov	r0, r3
 800d812:	3708      	adds	r7, #8
 800d814:	46bd      	mov	sp, r7
 800d816:	bd80      	pop	{r7, pc}

0800d818 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b082      	sub	sp, #8
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	2205      	movs	r2, #5
 800d824:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d828:	2300      	movs	r3, #0
 800d82a:	2200      	movs	r2, #0
 800d82c:	2100      	movs	r1, #0
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f000 fc80 	bl	800e134 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d834:	2300      	movs	r3, #0
}
 800d836:	4618      	mov	r0, r3
 800d838:	3708      	adds	r7, #8
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
	...

0800d840 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d844:	2200      	movs	r2, #0
 800d846:	4912      	ldr	r1, [pc, #72]	; (800d890 <MX_USB_Device_Init+0x50>)
 800d848:	4812      	ldr	r0, [pc, #72]	; (800d894 <MX_USB_Device_Init+0x54>)
 800d84a:	f7fe fed9 	bl	800c600 <USBD_Init>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b00      	cmp	r3, #0
 800d852:	d001      	beq.n	800d858 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d854:	f7f4 fc1e 	bl	8002094 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d858:	490f      	ldr	r1, [pc, #60]	; (800d898 <MX_USB_Device_Init+0x58>)
 800d85a:	480e      	ldr	r0, [pc, #56]	; (800d894 <MX_USB_Device_Init+0x54>)
 800d85c:	f7fe ff00 	bl	800c660 <USBD_RegisterClass>
 800d860:	4603      	mov	r3, r0
 800d862:	2b00      	cmp	r3, #0
 800d864:	d001      	beq.n	800d86a <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d866:	f7f4 fc15 	bl	8002094 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d86a:	490c      	ldr	r1, [pc, #48]	; (800d89c <MX_USB_Device_Init+0x5c>)
 800d86c:	4809      	ldr	r0, [pc, #36]	; (800d894 <MX_USB_Device_Init+0x54>)
 800d86e:	f7fe fe21 	bl	800c4b4 <USBD_CDC_RegisterInterface>
 800d872:	4603      	mov	r3, r0
 800d874:	2b00      	cmp	r3, #0
 800d876:	d001      	beq.n	800d87c <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d878:	f7f4 fc0c 	bl	8002094 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d87c:	4805      	ldr	r0, [pc, #20]	; (800d894 <MX_USB_Device_Init+0x54>)
 800d87e:	f7fe ff16 	bl	800c6ae <USBD_Start>
 800d882:	4603      	mov	r3, r0
 800d884:	2b00      	cmp	r3, #0
 800d886:	d001      	beq.n	800d88c <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d888:	f7f4 fc04 	bl	8002094 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d88c:	bf00      	nop
 800d88e:	bd80      	pop	{r7, pc}
 800d890:	20000140 	.word	0x20000140
 800d894:	200027f0 	.word	0x200027f0
 800d898:	20000028 	.word	0x20000028
 800d89c:	2000012c 	.word	0x2000012c

0800d8a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	4905      	ldr	r1, [pc, #20]	; (800d8bc <CDC_Init_FS+0x1c>)
 800d8a8:	4805      	ldr	r0, [pc, #20]	; (800d8c0 <CDC_Init_FS+0x20>)
 800d8aa:	f7fe fe18 	bl	800c4de <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d8ae:	4905      	ldr	r1, [pc, #20]	; (800d8c4 <CDC_Init_FS+0x24>)
 800d8b0:	4803      	ldr	r0, [pc, #12]	; (800d8c0 <CDC_Init_FS+0x20>)
 800d8b2:	f7fe fe32 	bl	800c51a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d8b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d8b8:	4618      	mov	r0, r3
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	200032c0 	.word	0x200032c0
 800d8c0:	200027f0 	.word	0x200027f0
 800d8c4:	20002ac0 	.word	0x20002ac0

0800d8c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d8cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr

0800d8d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b083      	sub	sp, #12
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	4603      	mov	r3, r0
 800d8e0:	6039      	str	r1, [r7, #0]
 800d8e2:	71fb      	strb	r3, [r7, #7]
 800d8e4:	4613      	mov	r3, r2
 800d8e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d8e8:	79fb      	ldrb	r3, [r7, #7]
 800d8ea:	2b23      	cmp	r3, #35	; 0x23
 800d8ec:	d84a      	bhi.n	800d984 <CDC_Control_FS+0xac>
 800d8ee:	a201      	add	r2, pc, #4	; (adr r2, 800d8f4 <CDC_Control_FS+0x1c>)
 800d8f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8f4:	0800d985 	.word	0x0800d985
 800d8f8:	0800d985 	.word	0x0800d985
 800d8fc:	0800d985 	.word	0x0800d985
 800d900:	0800d985 	.word	0x0800d985
 800d904:	0800d985 	.word	0x0800d985
 800d908:	0800d985 	.word	0x0800d985
 800d90c:	0800d985 	.word	0x0800d985
 800d910:	0800d985 	.word	0x0800d985
 800d914:	0800d985 	.word	0x0800d985
 800d918:	0800d985 	.word	0x0800d985
 800d91c:	0800d985 	.word	0x0800d985
 800d920:	0800d985 	.word	0x0800d985
 800d924:	0800d985 	.word	0x0800d985
 800d928:	0800d985 	.word	0x0800d985
 800d92c:	0800d985 	.word	0x0800d985
 800d930:	0800d985 	.word	0x0800d985
 800d934:	0800d985 	.word	0x0800d985
 800d938:	0800d985 	.word	0x0800d985
 800d93c:	0800d985 	.word	0x0800d985
 800d940:	0800d985 	.word	0x0800d985
 800d944:	0800d985 	.word	0x0800d985
 800d948:	0800d985 	.word	0x0800d985
 800d94c:	0800d985 	.word	0x0800d985
 800d950:	0800d985 	.word	0x0800d985
 800d954:	0800d985 	.word	0x0800d985
 800d958:	0800d985 	.word	0x0800d985
 800d95c:	0800d985 	.word	0x0800d985
 800d960:	0800d985 	.word	0x0800d985
 800d964:	0800d985 	.word	0x0800d985
 800d968:	0800d985 	.word	0x0800d985
 800d96c:	0800d985 	.word	0x0800d985
 800d970:	0800d985 	.word	0x0800d985
 800d974:	0800d985 	.word	0x0800d985
 800d978:	0800d985 	.word	0x0800d985
 800d97c:	0800d985 	.word	0x0800d985
 800d980:	0800d985 	.word	0x0800d985
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d984:	bf00      	nop
  }

  return (USBD_OK);
 800d986:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d988:	4618      	mov	r0, r3
 800d98a:	370c      	adds	r7, #12
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr

0800d994 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
 800d99c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d99e:	6879      	ldr	r1, [r7, #4]
 800d9a0:	4811      	ldr	r0, [pc, #68]	; (800d9e8 <CDC_Receive_FS+0x54>)
 800d9a2:	f7fe fdba 	bl	800c51a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d9a6:	4810      	ldr	r0, [pc, #64]	; (800d9e8 <CDC_Receive_FS+0x54>)
 800d9a8:	f7fe fe00 	bl	800c5ac <USBD_CDC_ReceivePacket>

  memset (rx_buffer, '\0', USB_RX_BUFFER_SIZE);  // clear the buffer
 800d9ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d9b0:	2100      	movs	r1, #0
 800d9b2:	480e      	ldr	r0, [pc, #56]	; (800d9ec <CDC_Receive_FS+0x58>)
 800d9b4:	f001 fa8d 	bl	800eed2 <memset>
  uint8_t len = (uint8_t)*Len;
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	73fb      	strb	r3, [r7, #15]
  memcpy(rx_buffer, Buf, len);  // copy the data to the buffer
 800d9be:	7bfb      	ldrb	r3, [r7, #15]
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	6879      	ldr	r1, [r7, #4]
 800d9c4:	4809      	ldr	r0, [pc, #36]	; (800d9ec <CDC_Receive_FS+0x58>)
 800d9c6:	f001 fb16 	bl	800eff6 <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800d9ca:	7bfb      	ldrb	r3, [r7, #15]
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	2100      	movs	r1, #0
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f001 fa7e 	bl	800eed2 <memset>

  conv_state = CFG_RECEIVED;
 800d9d6:	4b06      	ldr	r3, [pc, #24]	; (800d9f0 <CDC_Receive_FS+0x5c>)
 800d9d8:	2201      	movs	r2, #1
 800d9da:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800d9dc:	2300      	movs	r3, #0

  /* USER CODE END 6 */
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3710      	adds	r7, #16
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd80      	pop	{r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	200027f0 	.word	0x200027f0
 800d9ec:	200026bc 	.word	0x200026bc
 800d9f0:	200027bc 	.word	0x200027bc

0800d9f4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d9f4:	b580      	push	{r7, lr}
 800d9f6:	b084      	sub	sp, #16
 800d9f8:	af00      	add	r7, sp, #0
 800d9fa:	6078      	str	r0, [r7, #4]
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800da00:	2300      	movs	r3, #0
 800da02:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800da04:	4b0d      	ldr	r3, [pc, #52]	; (800da3c <CDC_Transmit_FS+0x48>)
 800da06:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da0a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800da0c:	68bb      	ldr	r3, [r7, #8]
 800da0e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800da12:	2b00      	cmp	r3, #0
 800da14:	d001      	beq.n	800da1a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800da16:	2301      	movs	r3, #1
 800da18:	e00b      	b.n	800da32 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800da1a:	887b      	ldrh	r3, [r7, #2]
 800da1c:	461a      	mov	r2, r3
 800da1e:	6879      	ldr	r1, [r7, #4]
 800da20:	4806      	ldr	r0, [pc, #24]	; (800da3c <CDC_Transmit_FS+0x48>)
 800da22:	f7fe fd5c 	bl	800c4de <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800da26:	4805      	ldr	r0, [pc, #20]	; (800da3c <CDC_Transmit_FS+0x48>)
 800da28:	f7fe fd90 	bl	800c54c <USBD_CDC_TransmitPacket>
 800da2c:	4603      	mov	r3, r0
 800da2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800da30:	7bfb      	ldrb	r3, [r7, #15]
}
 800da32:	4618      	mov	r0, r3
 800da34:	3710      	adds	r7, #16
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	200027f0 	.word	0x200027f0

0800da40 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800da40:	b480      	push	{r7}
 800da42:	b087      	sub	sp, #28
 800da44:	af00      	add	r7, sp, #0
 800da46:	60f8      	str	r0, [r7, #12]
 800da48:	60b9      	str	r1, [r7, #8]
 800da4a:	4613      	mov	r3, r2
 800da4c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800da4e:	2300      	movs	r3, #0
 800da50:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800da52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800da56:	4618      	mov	r0, r3
 800da58:	371c      	adds	r7, #28
 800da5a:	46bd      	mov	sp, r7
 800da5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da60:	4770      	bx	lr
	...

0800da64 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da64:	b480      	push	{r7}
 800da66:	b083      	sub	sp, #12
 800da68:	af00      	add	r7, sp, #0
 800da6a:	4603      	mov	r3, r0
 800da6c:	6039      	str	r1, [r7, #0]
 800da6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800da70:	683b      	ldr	r3, [r7, #0]
 800da72:	2212      	movs	r2, #18
 800da74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800da76:	4b03      	ldr	r3, [pc, #12]	; (800da84 <USBD_CDC_DeviceDescriptor+0x20>)
}
 800da78:	4618      	mov	r0, r3
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr
 800da84:	20000160 	.word	0x20000160

0800da88 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da88:	b480      	push	{r7}
 800da8a:	b083      	sub	sp, #12
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	4603      	mov	r3, r0
 800da90:	6039      	str	r1, [r7, #0]
 800da92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800da94:	683b      	ldr	r3, [r7, #0]
 800da96:	2204      	movs	r2, #4
 800da98:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800da9a:	4b03      	ldr	r3, [pc, #12]	; (800daa8 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	370c      	adds	r7, #12
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr
 800daa8:	20000174 	.word	0x20000174

0800daac <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b082      	sub	sp, #8
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	4603      	mov	r3, r0
 800dab4:	6039      	str	r1, [r7, #0]
 800dab6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dab8:	79fb      	ldrb	r3, [r7, #7]
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d105      	bne.n	800daca <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800dabe:	683a      	ldr	r2, [r7, #0]
 800dac0:	4907      	ldr	r1, [pc, #28]	; (800dae0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800dac2:	4808      	ldr	r0, [pc, #32]	; (800dae4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800dac4:	f7ff fddb 	bl	800d67e <USBD_GetString>
 800dac8:	e004      	b.n	800dad4 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800daca:	683a      	ldr	r2, [r7, #0]
 800dacc:	4904      	ldr	r1, [pc, #16]	; (800dae0 <USBD_CDC_ProductStrDescriptor+0x34>)
 800dace:	4805      	ldr	r0, [pc, #20]	; (800dae4 <USBD_CDC_ProductStrDescriptor+0x38>)
 800dad0:	f7ff fdd5 	bl	800d67e <USBD_GetString>
  }
  return USBD_StrDesc;
 800dad4:	4b02      	ldr	r3, [pc, #8]	; (800dae0 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800dad6:	4618      	mov	r0, r3
 800dad8:	3708      	adds	r7, #8
 800dada:	46bd      	mov	sp, r7
 800dadc:	bd80      	pop	{r7, pc}
 800dade:	bf00      	nop
 800dae0:	20003ac0 	.word	0x20003ac0
 800dae4:	08011fd4 	.word	0x08011fd4

0800dae8 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dae8:	b580      	push	{r7, lr}
 800daea:	b082      	sub	sp, #8
 800daec:	af00      	add	r7, sp, #0
 800daee:	4603      	mov	r3, r0
 800daf0:	6039      	str	r1, [r7, #0]
 800daf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800daf4:	683a      	ldr	r2, [r7, #0]
 800daf6:	4904      	ldr	r1, [pc, #16]	; (800db08 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800daf8:	4804      	ldr	r0, [pc, #16]	; (800db0c <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800dafa:	f7ff fdc0 	bl	800d67e <USBD_GetString>
  return USBD_StrDesc;
 800dafe:	4b02      	ldr	r3, [pc, #8]	; (800db08 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800db00:	4618      	mov	r0, r3
 800db02:	3708      	adds	r7, #8
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}
 800db08:	20003ac0 	.word	0x20003ac0
 800db0c:	08011fe4 	.word	0x08011fe4

0800db10 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b082      	sub	sp, #8
 800db14:	af00      	add	r7, sp, #0
 800db16:	4603      	mov	r3, r0
 800db18:	6039      	str	r1, [r7, #0]
 800db1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	221a      	movs	r2, #26
 800db20:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800db22:	f000 f843 	bl	800dbac <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800db26:	4b02      	ldr	r3, [pc, #8]	; (800db30 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800db28:	4618      	mov	r0, r3
 800db2a:	3708      	adds	r7, #8
 800db2c:	46bd      	mov	sp, r7
 800db2e:	bd80      	pop	{r7, pc}
 800db30:	20000178 	.word	0x20000178

0800db34 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b082      	sub	sp, #8
 800db38:	af00      	add	r7, sp, #0
 800db3a:	4603      	mov	r3, r0
 800db3c:	6039      	str	r1, [r7, #0]
 800db3e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800db40:	79fb      	ldrb	r3, [r7, #7]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d105      	bne.n	800db52 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800db46:	683a      	ldr	r2, [r7, #0]
 800db48:	4907      	ldr	r1, [pc, #28]	; (800db68 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800db4a:	4808      	ldr	r0, [pc, #32]	; (800db6c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800db4c:	f7ff fd97 	bl	800d67e <USBD_GetString>
 800db50:	e004      	b.n	800db5c <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800db52:	683a      	ldr	r2, [r7, #0]
 800db54:	4904      	ldr	r1, [pc, #16]	; (800db68 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800db56:	4805      	ldr	r0, [pc, #20]	; (800db6c <USBD_CDC_ConfigStrDescriptor+0x38>)
 800db58:	f7ff fd91 	bl	800d67e <USBD_GetString>
  }
  return USBD_StrDesc;
 800db5c:	4b02      	ldr	r3, [pc, #8]	; (800db68 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3708      	adds	r7, #8
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}
 800db66:	bf00      	nop
 800db68:	20003ac0 	.word	0x20003ac0
 800db6c:	08011fe8 	.word	0x08011fe8

0800db70 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b082      	sub	sp, #8
 800db74:	af00      	add	r7, sp, #0
 800db76:	4603      	mov	r3, r0
 800db78:	6039      	str	r1, [r7, #0]
 800db7a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800db7c:	79fb      	ldrb	r3, [r7, #7]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d105      	bne.n	800db8e <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800db82:	683a      	ldr	r2, [r7, #0]
 800db84:	4907      	ldr	r1, [pc, #28]	; (800dba4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800db86:	4808      	ldr	r0, [pc, #32]	; (800dba8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800db88:	f7ff fd79 	bl	800d67e <USBD_GetString>
 800db8c:	e004      	b.n	800db98 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800db8e:	683a      	ldr	r2, [r7, #0]
 800db90:	4904      	ldr	r1, [pc, #16]	; (800dba4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800db92:	4805      	ldr	r0, [pc, #20]	; (800dba8 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800db94:	f7ff fd73 	bl	800d67e <USBD_GetString>
  }
  return USBD_StrDesc;
 800db98:	4b02      	ldr	r3, [pc, #8]	; (800dba4 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3708      	adds	r7, #8
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
 800dba2:	bf00      	nop
 800dba4:	20003ac0 	.word	0x20003ac0
 800dba8:	08011ff4 	.word	0x08011ff4

0800dbac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dbac:	b580      	push	{r7, lr}
 800dbae:	b084      	sub	sp, #16
 800dbb0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dbb2:	4b0f      	ldr	r3, [pc, #60]	; (800dbf0 <Get_SerialNum+0x44>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dbb8:	4b0e      	ldr	r3, [pc, #56]	; (800dbf4 <Get_SerialNum+0x48>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dbbe:	4b0e      	ldr	r3, [pc, #56]	; (800dbf8 <Get_SerialNum+0x4c>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dbc4:	68fa      	ldr	r2, [r7, #12]
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	4413      	add	r3, r2
 800dbca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dbcc:	68fb      	ldr	r3, [r7, #12]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d009      	beq.n	800dbe6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dbd2:	2208      	movs	r2, #8
 800dbd4:	4909      	ldr	r1, [pc, #36]	; (800dbfc <Get_SerialNum+0x50>)
 800dbd6:	68f8      	ldr	r0, [r7, #12]
 800dbd8:	f000 f814 	bl	800dc04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dbdc:	2204      	movs	r2, #4
 800dbde:	4908      	ldr	r1, [pc, #32]	; (800dc00 <Get_SerialNum+0x54>)
 800dbe0:	68b8      	ldr	r0, [r7, #8]
 800dbe2:	f000 f80f 	bl	800dc04 <IntToUnicode>
  }
}
 800dbe6:	bf00      	nop
 800dbe8:	3710      	adds	r7, #16
 800dbea:	46bd      	mov	sp, r7
 800dbec:	bd80      	pop	{r7, pc}
 800dbee:	bf00      	nop
 800dbf0:	1fff7590 	.word	0x1fff7590
 800dbf4:	1fff7594 	.word	0x1fff7594
 800dbf8:	1fff7598 	.word	0x1fff7598
 800dbfc:	2000017a 	.word	0x2000017a
 800dc00:	2000018a 	.word	0x2000018a

0800dc04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800dc04:	b480      	push	{r7}
 800dc06:	b087      	sub	sp, #28
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	4613      	mov	r3, r2
 800dc10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800dc12:	2300      	movs	r3, #0
 800dc14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dc16:	2300      	movs	r3, #0
 800dc18:	75fb      	strb	r3, [r7, #23]
 800dc1a:	e027      	b.n	800dc6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	0f1b      	lsrs	r3, r3, #28
 800dc20:	2b09      	cmp	r3, #9
 800dc22:	d80b      	bhi.n	800dc3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	0f1b      	lsrs	r3, r3, #28
 800dc28:	b2da      	uxtb	r2, r3
 800dc2a:	7dfb      	ldrb	r3, [r7, #23]
 800dc2c:	005b      	lsls	r3, r3, #1
 800dc2e:	4619      	mov	r1, r3
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	440b      	add	r3, r1
 800dc34:	3230      	adds	r2, #48	; 0x30
 800dc36:	b2d2      	uxtb	r2, r2
 800dc38:	701a      	strb	r2, [r3, #0]
 800dc3a:	e00a      	b.n	800dc52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	0f1b      	lsrs	r3, r3, #28
 800dc40:	b2da      	uxtb	r2, r3
 800dc42:	7dfb      	ldrb	r3, [r7, #23]
 800dc44:	005b      	lsls	r3, r3, #1
 800dc46:	4619      	mov	r1, r3
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	440b      	add	r3, r1
 800dc4c:	3237      	adds	r2, #55	; 0x37
 800dc4e:	b2d2      	uxtb	r2, r2
 800dc50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	011b      	lsls	r3, r3, #4
 800dc56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dc58:	7dfb      	ldrb	r3, [r7, #23]
 800dc5a:	005b      	lsls	r3, r3, #1
 800dc5c:	3301      	adds	r3, #1
 800dc5e:	68ba      	ldr	r2, [r7, #8]
 800dc60:	4413      	add	r3, r2
 800dc62:	2200      	movs	r2, #0
 800dc64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dc66:	7dfb      	ldrb	r3, [r7, #23]
 800dc68:	3301      	adds	r3, #1
 800dc6a:	75fb      	strb	r3, [r7, #23]
 800dc6c:	7dfa      	ldrb	r2, [r7, #23]
 800dc6e:	79fb      	ldrb	r3, [r7, #7]
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d3d3      	bcc.n	800dc1c <IntToUnicode+0x18>
  }
}
 800dc74:	bf00      	nop
 800dc76:	bf00      	nop
 800dc78:	371c      	adds	r7, #28
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc80:	4770      	bx	lr
	...

0800dc84 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b098      	sub	sp, #96	; 0x60
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800dc8c:	f107 030c 	add.w	r3, r7, #12
 800dc90:	2254      	movs	r2, #84	; 0x54
 800dc92:	2100      	movs	r1, #0
 800dc94:	4618      	mov	r0, r3
 800dc96:	f001 f91c 	bl	800eed2 <memset>
  if(pcdHandle->Instance==USB)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	4a19      	ldr	r2, [pc, #100]	; (800dd04 <HAL_PCD_MspInit+0x80>)
 800dca0:	4293      	cmp	r3, r2
 800dca2:	d12a      	bne.n	800dcfa <HAL_PCD_MspInit+0x76>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800dca4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dca8:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800dcaa:	2300      	movs	r3, #0
 800dcac:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800dcae:	f107 030c 	add.w	r3, r7, #12
 800dcb2:	4618      	mov	r0, r3
 800dcb4:	f7fa fdf4 	bl	80088a0 <HAL_RCCEx_PeriphCLKConfig>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d001      	beq.n	800dcc2 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800dcbe:	f7f4 f9e9 	bl	8002094 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800dcc2:	4b11      	ldr	r3, [pc, #68]	; (800dd08 <HAL_PCD_MspInit+0x84>)
 800dcc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcc6:	4a10      	ldr	r2, [pc, #64]	; (800dd08 <HAL_PCD_MspInit+0x84>)
 800dcc8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dccc:	6593      	str	r3, [r2, #88]	; 0x58
 800dcce:	4b0e      	ldr	r3, [pc, #56]	; (800dd08 <HAL_PCD_MspInit+0x84>)
 800dcd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dcd6:	60bb      	str	r3, [r7, #8]
 800dcd8:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800dcda:	2200      	movs	r2, #0
 800dcdc:	2100      	movs	r1, #0
 800dcde:	2013      	movs	r0, #19
 800dce0:	f7f6 fd9f 	bl	8004822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800dce4:	2013      	movs	r0, #19
 800dce6:	f7f6 fdb6 	bl	8004856 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800dcea:	2200      	movs	r2, #0
 800dcec:	2100      	movs	r1, #0
 800dcee:	2014      	movs	r0, #20
 800dcf0:	f7f6 fd97 	bl	8004822 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800dcf4:	2014      	movs	r0, #20
 800dcf6:	f7f6 fdae 	bl	8004856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800dcfa:	bf00      	nop
 800dcfc:	3760      	adds	r7, #96	; 0x60
 800dcfe:	46bd      	mov	sp, r7
 800dd00:	bd80      	pop	{r7, pc}
 800dd02:	bf00      	nop
 800dd04:	40005c00 	.word	0x40005c00
 800dd08:	40021000 	.word	0x40021000

0800dd0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b082      	sub	sp, #8
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800dd20:	4619      	mov	r1, r3
 800dd22:	4610      	mov	r0, r2
 800dd24:	f7fe fd0e 	bl	800c744 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800dd28:	bf00      	nop
 800dd2a:	3708      	adds	r7, #8
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd30:	b580      	push	{r7, lr}
 800dd32:	b082      	sub	sp, #8
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	6078      	str	r0, [r7, #4]
 800dd38:	460b      	mov	r3, r1
 800dd3a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800dd42:	78fa      	ldrb	r2, [r7, #3]
 800dd44:	6879      	ldr	r1, [r7, #4]
 800dd46:	4613      	mov	r3, r2
 800dd48:	009b      	lsls	r3, r3, #2
 800dd4a:	4413      	add	r3, r2
 800dd4c:	00db      	lsls	r3, r3, #3
 800dd4e:	440b      	add	r3, r1
 800dd50:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dd54:	681a      	ldr	r2, [r3, #0]
 800dd56:	78fb      	ldrb	r3, [r7, #3]
 800dd58:	4619      	mov	r1, r3
 800dd5a:	f7fe fd48 	bl	800c7ee <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800dd5e:	bf00      	nop
 800dd60:	3708      	adds	r7, #8
 800dd62:	46bd      	mov	sp, r7
 800dd64:	bd80      	pop	{r7, pc}

0800dd66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd66:	b580      	push	{r7, lr}
 800dd68:	b082      	sub	sp, #8
 800dd6a:	af00      	add	r7, sp, #0
 800dd6c:	6078      	str	r0, [r7, #4]
 800dd6e:	460b      	mov	r3, r1
 800dd70:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800dd78:	78fa      	ldrb	r2, [r7, #3]
 800dd7a:	6879      	ldr	r1, [r7, #4]
 800dd7c:	4613      	mov	r3, r2
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	4413      	add	r3, r2
 800dd82:	00db      	lsls	r3, r3, #3
 800dd84:	440b      	add	r3, r1
 800dd86:	3324      	adds	r3, #36	; 0x24
 800dd88:	681a      	ldr	r2, [r3, #0]
 800dd8a:	78fb      	ldrb	r3, [r7, #3]
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	f7fe fd91 	bl	800c8b4 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800dd92:	bf00      	nop
 800dd94:	3708      	adds	r7, #8
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}

0800dd9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd9a:	b580      	push	{r7, lr}
 800dd9c:	b082      	sub	sp, #8
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f7fe fea5 	bl	800caf8 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800ddae:	bf00      	nop
 800ddb0:	3708      	adds	r7, #8
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}

0800ddb6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddb6:	b580      	push	{r7, lr}
 800ddb8:	b084      	sub	sp, #16
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	795b      	ldrb	r3, [r3, #5]
 800ddc6:	2b02      	cmp	r3, #2
 800ddc8:	d001      	beq.n	800ddce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ddca:	f7f4 f963 	bl	8002094 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ddd4:	7bfa      	ldrb	r2, [r7, #15]
 800ddd6:	4611      	mov	r1, r2
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f7fe fe4f 	bl	800ca7c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dde4:	4618      	mov	r0, r3
 800dde6:	f7fe fdfb 	bl	800c9e0 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800ddea:	bf00      	nop
 800ddec:	3710      	adds	r7, #16
 800ddee:	46bd      	mov	sp, r7
 800ddf0:	bd80      	pop	{r7, pc}
	...

0800ddf4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b082      	sub	sp, #8
 800ddf8:	af00      	add	r7, sp, #0
 800ddfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800de02:	4618      	mov	r0, r3
 800de04:	f7fe fe4a 	bl	800ca9c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	7a5b      	ldrb	r3, [r3, #9]
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	d005      	beq.n	800de1c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800de10:	4b04      	ldr	r3, [pc, #16]	; (800de24 <HAL_PCD_SuspendCallback+0x30>)
 800de12:	691b      	ldr	r3, [r3, #16]
 800de14:	4a03      	ldr	r2, [pc, #12]	; (800de24 <HAL_PCD_SuspendCallback+0x30>)
 800de16:	f043 0306 	orr.w	r3, r3, #6
 800de1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800de1c:	bf00      	nop
 800de1e:	3708      	adds	r7, #8
 800de20:	46bd      	mov	sp, r7
 800de22:	bd80      	pop	{r7, pc}
 800de24:	e000ed00 	.word	0xe000ed00

0800de28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	7a5b      	ldrb	r3, [r3, #9]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d007      	beq.n	800de48 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800de38:	4b08      	ldr	r3, [pc, #32]	; (800de5c <HAL_PCD_ResumeCallback+0x34>)
 800de3a:	691b      	ldr	r3, [r3, #16]
 800de3c:	4a07      	ldr	r2, [pc, #28]	; (800de5c <HAL_PCD_ResumeCallback+0x34>)
 800de3e:	f023 0306 	bic.w	r3, r3, #6
 800de42:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800de44:	f000 f9f8 	bl	800e238 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800de4e:	4618      	mov	r0, r3
 800de50:	f7fe fe3a 	bl	800cac8 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800de54:	bf00      	nop
 800de56:	3708      	adds	r7, #8
 800de58:	46bd      	mov	sp, r7
 800de5a:	bd80      	pop	{r7, pc}
 800de5c:	e000ed00 	.word	0xe000ed00

0800de60 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b082      	sub	sp, #8
 800de64:	af00      	add	r7, sp, #0
 800de66:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800de68:	4a2b      	ldr	r2, [pc, #172]	; (800df18 <USBD_LL_Init+0xb8>)
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	4a29      	ldr	r2, [pc, #164]	; (800df18 <USBD_LL_Init+0xb8>)
 800de74:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800de78:	4b27      	ldr	r3, [pc, #156]	; (800df18 <USBD_LL_Init+0xb8>)
 800de7a:	4a28      	ldr	r2, [pc, #160]	; (800df1c <USBD_LL_Init+0xbc>)
 800de7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800de7e:	4b26      	ldr	r3, [pc, #152]	; (800df18 <USBD_LL_Init+0xb8>)
 800de80:	2208      	movs	r2, #8
 800de82:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800de84:	4b24      	ldr	r3, [pc, #144]	; (800df18 <USBD_LL_Init+0xb8>)
 800de86:	2202      	movs	r2, #2
 800de88:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800de8a:	4b23      	ldr	r3, [pc, #140]	; (800df18 <USBD_LL_Init+0xb8>)
 800de8c:	2202      	movs	r2, #2
 800de8e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800de90:	4b21      	ldr	r3, [pc, #132]	; (800df18 <USBD_LL_Init+0xb8>)
 800de92:	2200      	movs	r2, #0
 800de94:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800de96:	4b20      	ldr	r3, [pc, #128]	; (800df18 <USBD_LL_Init+0xb8>)
 800de98:	2200      	movs	r2, #0
 800de9a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800de9c:	4b1e      	ldr	r3, [pc, #120]	; (800df18 <USBD_LL_Init+0xb8>)
 800de9e:	2200      	movs	r2, #0
 800dea0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800dea2:	4b1d      	ldr	r3, [pc, #116]	; (800df18 <USBD_LL_Init+0xb8>)
 800dea4:	2200      	movs	r2, #0
 800dea6:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800dea8:	481b      	ldr	r0, [pc, #108]	; (800df18 <USBD_LL_Init+0xb8>)
 800deaa:	f7f8 fa0e 	bl	80062ca <HAL_PCD_Init>
 800deae:	4603      	mov	r3, r0
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d001      	beq.n	800deb8 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800deb4:	f7f4 f8ee 	bl	8002094 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800debe:	2318      	movs	r3, #24
 800dec0:	2200      	movs	r2, #0
 800dec2:	2100      	movs	r1, #0
 800dec4:	f7f9 fec8 	bl	8007c58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dece:	2358      	movs	r3, #88	; 0x58
 800ded0:	2200      	movs	r2, #0
 800ded2:	2180      	movs	r1, #128	; 0x80
 800ded4:	f7f9 fec0 	bl	8007c58 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800dede:	23c0      	movs	r3, #192	; 0xc0
 800dee0:	2200      	movs	r2, #0
 800dee2:	2181      	movs	r1, #129	; 0x81
 800dee4:	f7f9 feb8 	bl	8007c58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800deee:	f44f 7388 	mov.w	r3, #272	; 0x110
 800def2:	2200      	movs	r2, #0
 800def4:	2101      	movs	r1, #1
 800def6:	f7f9 feaf 	bl	8007c58 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800df00:	f44f 7380 	mov.w	r3, #256	; 0x100
 800df04:	2200      	movs	r2, #0
 800df06:	2182      	movs	r1, #130	; 0x82
 800df08:	f7f9 fea6 	bl	8007c58 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800df0c:	2300      	movs	r3, #0
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3708      	adds	r7, #8
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}
 800df16:	bf00      	nop
 800df18:	20003cc0 	.word	0x20003cc0
 800df1c:	40005c00 	.word	0x40005c00

0800df20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800df20:	b580      	push	{r7, lr}
 800df22:	b084      	sub	sp, #16
 800df24:	af00      	add	r7, sp, #0
 800df26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df28:	2300      	movs	r3, #0
 800df2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df2c:	2300      	movs	r3, #0
 800df2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800df36:	4618      	mov	r0, r3
 800df38:	f7f8 fa95 	bl	8006466 <HAL_PCD_Start>
 800df3c:	4603      	mov	r3, r0
 800df3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df40:	7bfb      	ldrb	r3, [r7, #15]
 800df42:	4618      	mov	r0, r3
 800df44:	f000 f97e 	bl	800e244 <USBD_Get_USB_Status>
 800df48:	4603      	mov	r3, r0
 800df4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800df4e:	4618      	mov	r0, r3
 800df50:	3710      	adds	r7, #16
 800df52:	46bd      	mov	sp, r7
 800df54:	bd80      	pop	{r7, pc}

0800df56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800df56:	b580      	push	{r7, lr}
 800df58:	b084      	sub	sp, #16
 800df5a:	af00      	add	r7, sp, #0
 800df5c:	6078      	str	r0, [r7, #4]
 800df5e:	4608      	mov	r0, r1
 800df60:	4611      	mov	r1, r2
 800df62:	461a      	mov	r2, r3
 800df64:	4603      	mov	r3, r0
 800df66:	70fb      	strb	r3, [r7, #3]
 800df68:	460b      	mov	r3, r1
 800df6a:	70bb      	strb	r3, [r7, #2]
 800df6c:	4613      	mov	r3, r2
 800df6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df70:	2300      	movs	r3, #0
 800df72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df74:	2300      	movs	r3, #0
 800df76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800df7e:	78bb      	ldrb	r3, [r7, #2]
 800df80:	883a      	ldrh	r2, [r7, #0]
 800df82:	78f9      	ldrb	r1, [r7, #3]
 800df84:	f7f8 fbdc 	bl	8006740 <HAL_PCD_EP_Open>
 800df88:	4603      	mov	r3, r0
 800df8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df8c:	7bfb      	ldrb	r3, [r7, #15]
 800df8e:	4618      	mov	r0, r3
 800df90:	f000 f958 	bl	800e244 <USBD_Get_USB_Status>
 800df94:	4603      	mov	r3, r0
 800df96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df98:	7bbb      	ldrb	r3, [r7, #14]
}
 800df9a:	4618      	mov	r0, r3
 800df9c:	3710      	adds	r7, #16
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}

0800dfa2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfa2:	b580      	push	{r7, lr}
 800dfa4:	b084      	sub	sp, #16
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	6078      	str	r0, [r7, #4]
 800dfaa:	460b      	mov	r3, r1
 800dfac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dfbc:	78fa      	ldrb	r2, [r7, #3]
 800dfbe:	4611      	mov	r1, r2
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	f7f8 fc1a 	bl	80067fa <HAL_PCD_EP_Close>
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfca:	7bfb      	ldrb	r3, [r7, #15]
 800dfcc:	4618      	mov	r0, r3
 800dfce:	f000 f939 	bl	800e244 <USBD_Get_USB_Status>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfd6:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3710      	adds	r7, #16
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	460b      	mov	r3, r1
 800dfea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfec:	2300      	movs	r3, #0
 800dfee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dff0:	2300      	movs	r3, #0
 800dff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dffa:	78fa      	ldrb	r2, [r7, #3]
 800dffc:	4611      	mov	r1, r2
 800dffe:	4618      	mov	r0, r3
 800e000:	f7f8 fcc3 	bl	800698a <HAL_PCD_EP_SetStall>
 800e004:	4603      	mov	r3, r0
 800e006:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e008:	7bfb      	ldrb	r3, [r7, #15]
 800e00a:	4618      	mov	r0, r3
 800e00c:	f000 f91a 	bl	800e244 <USBD_Get_USB_Status>
 800e010:	4603      	mov	r3, r0
 800e012:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e014:	7bbb      	ldrb	r3, [r7, #14]
}
 800e016:	4618      	mov	r0, r3
 800e018:	3710      	adds	r7, #16
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}

0800e01e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e01e:	b580      	push	{r7, lr}
 800e020:	b084      	sub	sp, #16
 800e022:	af00      	add	r7, sp, #0
 800e024:	6078      	str	r0, [r7, #4]
 800e026:	460b      	mov	r3, r1
 800e028:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e02a:	2300      	movs	r3, #0
 800e02c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e02e:	2300      	movs	r3, #0
 800e030:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e038:	78fa      	ldrb	r2, [r7, #3]
 800e03a:	4611      	mov	r1, r2
 800e03c:	4618      	mov	r0, r3
 800e03e:	f7f8 fcf6 	bl	8006a2e <HAL_PCD_EP_ClrStall>
 800e042:	4603      	mov	r3, r0
 800e044:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e046:	7bfb      	ldrb	r3, [r7, #15]
 800e048:	4618      	mov	r0, r3
 800e04a:	f000 f8fb 	bl	800e244 <USBD_Get_USB_Status>
 800e04e:	4603      	mov	r3, r0
 800e050:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e052:	7bbb      	ldrb	r3, [r7, #14]
}
 800e054:	4618      	mov	r0, r3
 800e056:	3710      	adds	r7, #16
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}

0800e05c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e05c:	b480      	push	{r7}
 800e05e:	b085      	sub	sp, #20
 800e060:	af00      	add	r7, sp, #0
 800e062:	6078      	str	r0, [r7, #4]
 800e064:	460b      	mov	r3, r1
 800e066:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e06e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e074:	2b00      	cmp	r3, #0
 800e076:	da0b      	bge.n	800e090 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e078:	78fb      	ldrb	r3, [r7, #3]
 800e07a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e07e:	68f9      	ldr	r1, [r7, #12]
 800e080:	4613      	mov	r3, r2
 800e082:	009b      	lsls	r3, r3, #2
 800e084:	4413      	add	r3, r2
 800e086:	00db      	lsls	r3, r3, #3
 800e088:	440b      	add	r3, r1
 800e08a:	3312      	adds	r3, #18
 800e08c:	781b      	ldrb	r3, [r3, #0]
 800e08e:	e00b      	b.n	800e0a8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e090:	78fb      	ldrb	r3, [r7, #3]
 800e092:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e096:	68f9      	ldr	r1, [r7, #12]
 800e098:	4613      	mov	r3, r2
 800e09a:	009b      	lsls	r3, r3, #2
 800e09c:	4413      	add	r3, r2
 800e09e:	00db      	lsls	r3, r3, #3
 800e0a0:	440b      	add	r3, r1
 800e0a2:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800e0a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3714      	adds	r7, #20
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b2:	4770      	bx	lr

0800e0b4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b084      	sub	sp, #16
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
 800e0bc:	460b      	mov	r3, r1
 800e0be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0c0:	2300      	movs	r3, #0
 800e0c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0c4:	2300      	movs	r3, #0
 800e0c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e0ce:	78fa      	ldrb	r2, [r7, #3]
 800e0d0:	4611      	mov	r1, r2
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	f7f8 fb10 	bl	80066f8 <HAL_PCD_SetAddress>
 800e0d8:	4603      	mov	r3, r0
 800e0da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0dc:	7bfb      	ldrb	r3, [r7, #15]
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f000 f8b0 	bl	800e244 <USBD_Get_USB_Status>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e0e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3710      	adds	r7, #16
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}

0800e0f2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e0f2:	b580      	push	{r7, lr}
 800e0f4:	b086      	sub	sp, #24
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	60f8      	str	r0, [r7, #12]
 800e0fa:	607a      	str	r2, [r7, #4]
 800e0fc:	603b      	str	r3, [r7, #0]
 800e0fe:	460b      	mov	r3, r1
 800e100:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e102:	2300      	movs	r3, #0
 800e104:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e106:	2300      	movs	r3, #0
 800e108:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e110:	7af9      	ldrb	r1, [r7, #11]
 800e112:	683b      	ldr	r3, [r7, #0]
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	f7f8 fc01 	bl	800691c <HAL_PCD_EP_Transmit>
 800e11a:	4603      	mov	r3, r0
 800e11c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e11e:	7dfb      	ldrb	r3, [r7, #23]
 800e120:	4618      	mov	r0, r3
 800e122:	f000 f88f 	bl	800e244 <USBD_Get_USB_Status>
 800e126:	4603      	mov	r3, r0
 800e128:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e12a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e12c:	4618      	mov	r0, r3
 800e12e:	3718      	adds	r7, #24
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b086      	sub	sp, #24
 800e138:	af00      	add	r7, sp, #0
 800e13a:	60f8      	str	r0, [r7, #12]
 800e13c:	607a      	str	r2, [r7, #4]
 800e13e:	603b      	str	r3, [r7, #0]
 800e140:	460b      	mov	r3, r1
 800e142:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e144:	2300      	movs	r3, #0
 800e146:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e148:	2300      	movs	r3, #0
 800e14a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e152:	7af9      	ldrb	r1, [r7, #11]
 800e154:	683b      	ldr	r3, [r7, #0]
 800e156:	687a      	ldr	r2, [r7, #4]
 800e158:	f7f8 fb97 	bl	800688a <HAL_PCD_EP_Receive>
 800e15c:	4603      	mov	r3, r0
 800e15e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e160:	7dfb      	ldrb	r3, [r7, #23]
 800e162:	4618      	mov	r0, r3
 800e164:	f000 f86e 	bl	800e244 <USBD_Get_USB_Status>
 800e168:	4603      	mov	r3, r0
 800e16a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e16c:	7dbb      	ldrb	r3, [r7, #22]
}
 800e16e:	4618      	mov	r0, r3
 800e170:	3718      	adds	r7, #24
 800e172:	46bd      	mov	sp, r7
 800e174:	bd80      	pop	{r7, pc}

0800e176 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e176:	b580      	push	{r7, lr}
 800e178:	b082      	sub	sp, #8
 800e17a:	af00      	add	r7, sp, #0
 800e17c:	6078      	str	r0, [r7, #4]
 800e17e:	460b      	mov	r3, r1
 800e180:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e188:	78fa      	ldrb	r2, [r7, #3]
 800e18a:	4611      	mov	r1, r2
 800e18c:	4618      	mov	r0, r3
 800e18e:	f7f8 fbad 	bl	80068ec <HAL_PCD_EP_GetRxCount>
 800e192:	4603      	mov	r3, r0
}
 800e194:	4618      	mov	r0, r3
 800e196:	3708      	adds	r7, #8
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}

0800e19c <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b082      	sub	sp, #8
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	6078      	str	r0, [r7, #4]
 800e1a4:	460b      	mov	r3, r1
 800e1a6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800e1a8:	78fb      	ldrb	r3, [r7, #3]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d002      	beq.n	800e1b4 <HAL_PCDEx_LPM_Callback+0x18>
 800e1ae:	2b01      	cmp	r3, #1
 800e1b0:	d013      	beq.n	800e1da <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800e1b2:	e023      	b.n	800e1fc <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	7a5b      	ldrb	r3, [r3, #9]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d007      	beq.n	800e1cc <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e1bc:	f000 f83c 	bl	800e238 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e1c0:	4b10      	ldr	r3, [pc, #64]	; (800e204 <HAL_PCDEx_LPM_Callback+0x68>)
 800e1c2:	691b      	ldr	r3, [r3, #16]
 800e1c4:	4a0f      	ldr	r2, [pc, #60]	; (800e204 <HAL_PCDEx_LPM_Callback+0x68>)
 800e1c6:	f023 0306 	bic.w	r3, r3, #6
 800e1ca:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7fe fc78 	bl	800cac8 <USBD_LL_Resume>
    break;
 800e1d8:	e010      	b.n	800e1fc <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	f7fe fc5b 	bl	800ca9c <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	7a5b      	ldrb	r3, [r3, #9]
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d005      	beq.n	800e1fa <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e1ee:	4b05      	ldr	r3, [pc, #20]	; (800e204 <HAL_PCDEx_LPM_Callback+0x68>)
 800e1f0:	691b      	ldr	r3, [r3, #16]
 800e1f2:	4a04      	ldr	r2, [pc, #16]	; (800e204 <HAL_PCDEx_LPM_Callback+0x68>)
 800e1f4:	f043 0306 	orr.w	r3, r3, #6
 800e1f8:	6113      	str	r3, [r2, #16]
    break;
 800e1fa:	bf00      	nop
}
 800e1fc:	bf00      	nop
 800e1fe:	3708      	adds	r7, #8
 800e200:	46bd      	mov	sp, r7
 800e202:	bd80      	pop	{r7, pc}
 800e204:	e000ed00 	.word	0xe000ed00

0800e208 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e208:	b480      	push	{r7}
 800e20a:	b083      	sub	sp, #12
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e210:	4b03      	ldr	r3, [pc, #12]	; (800e220 <USBD_static_malloc+0x18>)
}
 800e212:	4618      	mov	r0, r3
 800e214:	370c      	adds	r7, #12
 800e216:	46bd      	mov	sp, r7
 800e218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21c:	4770      	bx	lr
 800e21e:	bf00      	nop
 800e220:	20003f9c 	.word	0x20003f9c

0800e224 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e224:	b480      	push	{r7}
 800e226:	b083      	sub	sp, #12
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]

}
 800e22c:	bf00      	nop
 800e22e:	370c      	adds	r7, #12
 800e230:	46bd      	mov	sp, r7
 800e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e236:	4770      	bx	lr

0800e238 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e23c:	f7f2 fe18 	bl	8000e70 <SystemClock_Config>
}
 800e240:	bf00      	nop
 800e242:	bd80      	pop	{r7, pc}

0800e244 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e244:	b480      	push	{r7}
 800e246:	b085      	sub	sp, #20
 800e248:	af00      	add	r7, sp, #0
 800e24a:	4603      	mov	r3, r0
 800e24c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e24e:	2300      	movs	r3, #0
 800e250:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e252:	79fb      	ldrb	r3, [r7, #7]
 800e254:	2b03      	cmp	r3, #3
 800e256:	d817      	bhi.n	800e288 <USBD_Get_USB_Status+0x44>
 800e258:	a201      	add	r2, pc, #4	; (adr r2, 800e260 <USBD_Get_USB_Status+0x1c>)
 800e25a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e25e:	bf00      	nop
 800e260:	0800e271 	.word	0x0800e271
 800e264:	0800e277 	.word	0x0800e277
 800e268:	0800e27d 	.word	0x0800e27d
 800e26c:	0800e283 	.word	0x0800e283
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e270:	2300      	movs	r3, #0
 800e272:	73fb      	strb	r3, [r7, #15]
    break;
 800e274:	e00b      	b.n	800e28e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e276:	2303      	movs	r3, #3
 800e278:	73fb      	strb	r3, [r7, #15]
    break;
 800e27a:	e008      	b.n	800e28e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e27c:	2301      	movs	r3, #1
 800e27e:	73fb      	strb	r3, [r7, #15]
    break;
 800e280:	e005      	b.n	800e28e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e282:	2303      	movs	r3, #3
 800e284:	73fb      	strb	r3, [r7, #15]
    break;
 800e286:	e002      	b.n	800e28e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e288:	2303      	movs	r3, #3
 800e28a:	73fb      	strb	r3, [r7, #15]
    break;
 800e28c:	bf00      	nop
  }
  return usb_status;
 800e28e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e290:	4618      	mov	r0, r3
 800e292:	3714      	adds	r7, #20
 800e294:	46bd      	mov	sp, r7
 800e296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29a:	4770      	bx	lr

0800e29c <atoi>:
 800e29c:	220a      	movs	r2, #10
 800e29e:	2100      	movs	r1, #0
 800e2a0:	f000 b882 	b.w	800e3a8 <strtol>

0800e2a4 <_strtol_l.constprop.0>:
 800e2a4:	2b01      	cmp	r3, #1
 800e2a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2aa:	d001      	beq.n	800e2b0 <_strtol_l.constprop.0+0xc>
 800e2ac:	2b24      	cmp	r3, #36	; 0x24
 800e2ae:	d906      	bls.n	800e2be <_strtol_l.constprop.0+0x1a>
 800e2b0:	f000 fe74 	bl	800ef9c <__errno>
 800e2b4:	2316      	movs	r3, #22
 800e2b6:	6003      	str	r3, [r0, #0]
 800e2b8:	2000      	movs	r0, #0
 800e2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e3a4 <_strtol_l.constprop.0+0x100>
 800e2c2:	460d      	mov	r5, r1
 800e2c4:	462e      	mov	r6, r5
 800e2c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2ca:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e2ce:	f017 0708 	ands.w	r7, r7, #8
 800e2d2:	d1f7      	bne.n	800e2c4 <_strtol_l.constprop.0+0x20>
 800e2d4:	2c2d      	cmp	r4, #45	; 0x2d
 800e2d6:	d132      	bne.n	800e33e <_strtol_l.constprop.0+0x9a>
 800e2d8:	782c      	ldrb	r4, [r5, #0]
 800e2da:	2701      	movs	r7, #1
 800e2dc:	1cb5      	adds	r5, r6, #2
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d05b      	beq.n	800e39a <_strtol_l.constprop.0+0xf6>
 800e2e2:	2b10      	cmp	r3, #16
 800e2e4:	d109      	bne.n	800e2fa <_strtol_l.constprop.0+0x56>
 800e2e6:	2c30      	cmp	r4, #48	; 0x30
 800e2e8:	d107      	bne.n	800e2fa <_strtol_l.constprop.0+0x56>
 800e2ea:	782c      	ldrb	r4, [r5, #0]
 800e2ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e2f0:	2c58      	cmp	r4, #88	; 0x58
 800e2f2:	d14d      	bne.n	800e390 <_strtol_l.constprop.0+0xec>
 800e2f4:	786c      	ldrb	r4, [r5, #1]
 800e2f6:	2310      	movs	r3, #16
 800e2f8:	3502      	adds	r5, #2
 800e2fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e2fe:	f108 38ff 	add.w	r8, r8, #4294967295
 800e302:	f04f 0e00 	mov.w	lr, #0
 800e306:	fbb8 f9f3 	udiv	r9, r8, r3
 800e30a:	4676      	mov	r6, lr
 800e30c:	fb03 8a19 	mls	sl, r3, r9, r8
 800e310:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e314:	f1bc 0f09 	cmp.w	ip, #9
 800e318:	d816      	bhi.n	800e348 <_strtol_l.constprop.0+0xa4>
 800e31a:	4664      	mov	r4, ip
 800e31c:	42a3      	cmp	r3, r4
 800e31e:	dd24      	ble.n	800e36a <_strtol_l.constprop.0+0xc6>
 800e320:	f1be 3fff 	cmp.w	lr, #4294967295
 800e324:	d008      	beq.n	800e338 <_strtol_l.constprop.0+0x94>
 800e326:	45b1      	cmp	r9, r6
 800e328:	d31c      	bcc.n	800e364 <_strtol_l.constprop.0+0xc0>
 800e32a:	d101      	bne.n	800e330 <_strtol_l.constprop.0+0x8c>
 800e32c:	45a2      	cmp	sl, r4
 800e32e:	db19      	blt.n	800e364 <_strtol_l.constprop.0+0xc0>
 800e330:	fb06 4603 	mla	r6, r6, r3, r4
 800e334:	f04f 0e01 	mov.w	lr, #1
 800e338:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e33c:	e7e8      	b.n	800e310 <_strtol_l.constprop.0+0x6c>
 800e33e:	2c2b      	cmp	r4, #43	; 0x2b
 800e340:	bf04      	itt	eq
 800e342:	782c      	ldrbeq	r4, [r5, #0]
 800e344:	1cb5      	addeq	r5, r6, #2
 800e346:	e7ca      	b.n	800e2de <_strtol_l.constprop.0+0x3a>
 800e348:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e34c:	f1bc 0f19 	cmp.w	ip, #25
 800e350:	d801      	bhi.n	800e356 <_strtol_l.constprop.0+0xb2>
 800e352:	3c37      	subs	r4, #55	; 0x37
 800e354:	e7e2      	b.n	800e31c <_strtol_l.constprop.0+0x78>
 800e356:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e35a:	f1bc 0f19 	cmp.w	ip, #25
 800e35e:	d804      	bhi.n	800e36a <_strtol_l.constprop.0+0xc6>
 800e360:	3c57      	subs	r4, #87	; 0x57
 800e362:	e7db      	b.n	800e31c <_strtol_l.constprop.0+0x78>
 800e364:	f04f 3eff 	mov.w	lr, #4294967295
 800e368:	e7e6      	b.n	800e338 <_strtol_l.constprop.0+0x94>
 800e36a:	f1be 3fff 	cmp.w	lr, #4294967295
 800e36e:	d105      	bne.n	800e37c <_strtol_l.constprop.0+0xd8>
 800e370:	2322      	movs	r3, #34	; 0x22
 800e372:	6003      	str	r3, [r0, #0]
 800e374:	4646      	mov	r6, r8
 800e376:	b942      	cbnz	r2, 800e38a <_strtol_l.constprop.0+0xe6>
 800e378:	4630      	mov	r0, r6
 800e37a:	e79e      	b.n	800e2ba <_strtol_l.constprop.0+0x16>
 800e37c:	b107      	cbz	r7, 800e380 <_strtol_l.constprop.0+0xdc>
 800e37e:	4276      	negs	r6, r6
 800e380:	2a00      	cmp	r2, #0
 800e382:	d0f9      	beq.n	800e378 <_strtol_l.constprop.0+0xd4>
 800e384:	f1be 0f00 	cmp.w	lr, #0
 800e388:	d000      	beq.n	800e38c <_strtol_l.constprop.0+0xe8>
 800e38a:	1e69      	subs	r1, r5, #1
 800e38c:	6011      	str	r1, [r2, #0]
 800e38e:	e7f3      	b.n	800e378 <_strtol_l.constprop.0+0xd4>
 800e390:	2430      	movs	r4, #48	; 0x30
 800e392:	2b00      	cmp	r3, #0
 800e394:	d1b1      	bne.n	800e2fa <_strtol_l.constprop.0+0x56>
 800e396:	2308      	movs	r3, #8
 800e398:	e7af      	b.n	800e2fa <_strtol_l.constprop.0+0x56>
 800e39a:	2c30      	cmp	r4, #48	; 0x30
 800e39c:	d0a5      	beq.n	800e2ea <_strtol_l.constprop.0+0x46>
 800e39e:	230a      	movs	r3, #10
 800e3a0:	e7ab      	b.n	800e2fa <_strtol_l.constprop.0+0x56>
 800e3a2:	bf00      	nop
 800e3a4:	080121a1 	.word	0x080121a1

0800e3a8 <strtol>:
 800e3a8:	4613      	mov	r3, r2
 800e3aa:	460a      	mov	r2, r1
 800e3ac:	4601      	mov	r1, r0
 800e3ae:	4802      	ldr	r0, [pc, #8]	; (800e3b8 <strtol+0x10>)
 800e3b0:	6800      	ldr	r0, [r0, #0]
 800e3b2:	f7ff bf77 	b.w	800e2a4 <_strtol_l.constprop.0>
 800e3b6:	bf00      	nop
 800e3b8:	200001ec 	.word	0x200001ec

0800e3bc <__cvt>:
 800e3bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e3c0:	ec55 4b10 	vmov	r4, r5, d0
 800e3c4:	2d00      	cmp	r5, #0
 800e3c6:	460e      	mov	r6, r1
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	462b      	mov	r3, r5
 800e3cc:	bfbb      	ittet	lt
 800e3ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e3d2:	461d      	movlt	r5, r3
 800e3d4:	2300      	movge	r3, #0
 800e3d6:	232d      	movlt	r3, #45	; 0x2d
 800e3d8:	700b      	strb	r3, [r1, #0]
 800e3da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e3dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e3e0:	4691      	mov	r9, r2
 800e3e2:	f023 0820 	bic.w	r8, r3, #32
 800e3e6:	bfbc      	itt	lt
 800e3e8:	4622      	movlt	r2, r4
 800e3ea:	4614      	movlt	r4, r2
 800e3ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e3f0:	d005      	beq.n	800e3fe <__cvt+0x42>
 800e3f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e3f6:	d100      	bne.n	800e3fa <__cvt+0x3e>
 800e3f8:	3601      	adds	r6, #1
 800e3fa:	2102      	movs	r1, #2
 800e3fc:	e000      	b.n	800e400 <__cvt+0x44>
 800e3fe:	2103      	movs	r1, #3
 800e400:	ab03      	add	r3, sp, #12
 800e402:	9301      	str	r3, [sp, #4]
 800e404:	ab02      	add	r3, sp, #8
 800e406:	9300      	str	r3, [sp, #0]
 800e408:	ec45 4b10 	vmov	d0, r4, r5
 800e40c:	4653      	mov	r3, sl
 800e40e:	4632      	mov	r2, r6
 800e410:	f000 fe8a 	bl	800f128 <_dtoa_r>
 800e414:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e418:	4607      	mov	r7, r0
 800e41a:	d102      	bne.n	800e422 <__cvt+0x66>
 800e41c:	f019 0f01 	tst.w	r9, #1
 800e420:	d022      	beq.n	800e468 <__cvt+0xac>
 800e422:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e426:	eb07 0906 	add.w	r9, r7, r6
 800e42a:	d110      	bne.n	800e44e <__cvt+0x92>
 800e42c:	783b      	ldrb	r3, [r7, #0]
 800e42e:	2b30      	cmp	r3, #48	; 0x30
 800e430:	d10a      	bne.n	800e448 <__cvt+0x8c>
 800e432:	2200      	movs	r2, #0
 800e434:	2300      	movs	r3, #0
 800e436:	4620      	mov	r0, r4
 800e438:	4629      	mov	r1, r5
 800e43a:	f7f2 fb7d 	bl	8000b38 <__aeabi_dcmpeq>
 800e43e:	b918      	cbnz	r0, 800e448 <__cvt+0x8c>
 800e440:	f1c6 0601 	rsb	r6, r6, #1
 800e444:	f8ca 6000 	str.w	r6, [sl]
 800e448:	f8da 3000 	ldr.w	r3, [sl]
 800e44c:	4499      	add	r9, r3
 800e44e:	2200      	movs	r2, #0
 800e450:	2300      	movs	r3, #0
 800e452:	4620      	mov	r0, r4
 800e454:	4629      	mov	r1, r5
 800e456:	f7f2 fb6f 	bl	8000b38 <__aeabi_dcmpeq>
 800e45a:	b108      	cbz	r0, 800e460 <__cvt+0xa4>
 800e45c:	f8cd 900c 	str.w	r9, [sp, #12]
 800e460:	2230      	movs	r2, #48	; 0x30
 800e462:	9b03      	ldr	r3, [sp, #12]
 800e464:	454b      	cmp	r3, r9
 800e466:	d307      	bcc.n	800e478 <__cvt+0xbc>
 800e468:	9b03      	ldr	r3, [sp, #12]
 800e46a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e46c:	1bdb      	subs	r3, r3, r7
 800e46e:	4638      	mov	r0, r7
 800e470:	6013      	str	r3, [r2, #0]
 800e472:	b004      	add	sp, #16
 800e474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e478:	1c59      	adds	r1, r3, #1
 800e47a:	9103      	str	r1, [sp, #12]
 800e47c:	701a      	strb	r2, [r3, #0]
 800e47e:	e7f0      	b.n	800e462 <__cvt+0xa6>

0800e480 <__exponent>:
 800e480:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e482:	4603      	mov	r3, r0
 800e484:	2900      	cmp	r1, #0
 800e486:	bfb8      	it	lt
 800e488:	4249      	neglt	r1, r1
 800e48a:	f803 2b02 	strb.w	r2, [r3], #2
 800e48e:	bfb4      	ite	lt
 800e490:	222d      	movlt	r2, #45	; 0x2d
 800e492:	222b      	movge	r2, #43	; 0x2b
 800e494:	2909      	cmp	r1, #9
 800e496:	7042      	strb	r2, [r0, #1]
 800e498:	dd2a      	ble.n	800e4f0 <__exponent+0x70>
 800e49a:	f10d 0207 	add.w	r2, sp, #7
 800e49e:	4617      	mov	r7, r2
 800e4a0:	260a      	movs	r6, #10
 800e4a2:	4694      	mov	ip, r2
 800e4a4:	fb91 f5f6 	sdiv	r5, r1, r6
 800e4a8:	fb06 1415 	mls	r4, r6, r5, r1
 800e4ac:	3430      	adds	r4, #48	; 0x30
 800e4ae:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e4b2:	460c      	mov	r4, r1
 800e4b4:	2c63      	cmp	r4, #99	; 0x63
 800e4b6:	f102 32ff 	add.w	r2, r2, #4294967295
 800e4ba:	4629      	mov	r1, r5
 800e4bc:	dcf1      	bgt.n	800e4a2 <__exponent+0x22>
 800e4be:	3130      	adds	r1, #48	; 0x30
 800e4c0:	f1ac 0402 	sub.w	r4, ip, #2
 800e4c4:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e4c8:	1c41      	adds	r1, r0, #1
 800e4ca:	4622      	mov	r2, r4
 800e4cc:	42ba      	cmp	r2, r7
 800e4ce:	d30a      	bcc.n	800e4e6 <__exponent+0x66>
 800e4d0:	f10d 0209 	add.w	r2, sp, #9
 800e4d4:	eba2 020c 	sub.w	r2, r2, ip
 800e4d8:	42bc      	cmp	r4, r7
 800e4da:	bf88      	it	hi
 800e4dc:	2200      	movhi	r2, #0
 800e4de:	4413      	add	r3, r2
 800e4e0:	1a18      	subs	r0, r3, r0
 800e4e2:	b003      	add	sp, #12
 800e4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e4e6:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e4ea:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e4ee:	e7ed      	b.n	800e4cc <__exponent+0x4c>
 800e4f0:	2330      	movs	r3, #48	; 0x30
 800e4f2:	3130      	adds	r1, #48	; 0x30
 800e4f4:	7083      	strb	r3, [r0, #2]
 800e4f6:	70c1      	strb	r1, [r0, #3]
 800e4f8:	1d03      	adds	r3, r0, #4
 800e4fa:	e7f1      	b.n	800e4e0 <__exponent+0x60>

0800e4fc <_printf_float>:
 800e4fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e500:	ed2d 8b02 	vpush	{d8}
 800e504:	b08d      	sub	sp, #52	; 0x34
 800e506:	460c      	mov	r4, r1
 800e508:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e50c:	4616      	mov	r6, r2
 800e50e:	461f      	mov	r7, r3
 800e510:	4605      	mov	r5, r0
 800e512:	f000 fcf9 	bl	800ef08 <_localeconv_r>
 800e516:	f8d0 a000 	ldr.w	sl, [r0]
 800e51a:	4650      	mov	r0, sl
 800e51c:	f7f1 fee0 	bl	80002e0 <strlen>
 800e520:	2300      	movs	r3, #0
 800e522:	930a      	str	r3, [sp, #40]	; 0x28
 800e524:	6823      	ldr	r3, [r4, #0]
 800e526:	9305      	str	r3, [sp, #20]
 800e528:	f8d8 3000 	ldr.w	r3, [r8]
 800e52c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e530:	3307      	adds	r3, #7
 800e532:	f023 0307 	bic.w	r3, r3, #7
 800e536:	f103 0208 	add.w	r2, r3, #8
 800e53a:	f8c8 2000 	str.w	r2, [r8]
 800e53e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e542:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e546:	9307      	str	r3, [sp, #28]
 800e548:	f8cd 8018 	str.w	r8, [sp, #24]
 800e54c:	ee08 0a10 	vmov	s16, r0
 800e550:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e554:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e558:	4b9e      	ldr	r3, [pc, #632]	; (800e7d4 <_printf_float+0x2d8>)
 800e55a:	f04f 32ff 	mov.w	r2, #4294967295
 800e55e:	f7f2 fb1d 	bl	8000b9c <__aeabi_dcmpun>
 800e562:	bb88      	cbnz	r0, 800e5c8 <_printf_float+0xcc>
 800e564:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e568:	4b9a      	ldr	r3, [pc, #616]	; (800e7d4 <_printf_float+0x2d8>)
 800e56a:	f04f 32ff 	mov.w	r2, #4294967295
 800e56e:	f7f2 faf7 	bl	8000b60 <__aeabi_dcmple>
 800e572:	bb48      	cbnz	r0, 800e5c8 <_printf_float+0xcc>
 800e574:	2200      	movs	r2, #0
 800e576:	2300      	movs	r3, #0
 800e578:	4640      	mov	r0, r8
 800e57a:	4649      	mov	r1, r9
 800e57c:	f7f2 fae6 	bl	8000b4c <__aeabi_dcmplt>
 800e580:	b110      	cbz	r0, 800e588 <_printf_float+0x8c>
 800e582:	232d      	movs	r3, #45	; 0x2d
 800e584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e588:	4a93      	ldr	r2, [pc, #588]	; (800e7d8 <_printf_float+0x2dc>)
 800e58a:	4b94      	ldr	r3, [pc, #592]	; (800e7dc <_printf_float+0x2e0>)
 800e58c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e590:	bf94      	ite	ls
 800e592:	4690      	movls	r8, r2
 800e594:	4698      	movhi	r8, r3
 800e596:	2303      	movs	r3, #3
 800e598:	6123      	str	r3, [r4, #16]
 800e59a:	9b05      	ldr	r3, [sp, #20]
 800e59c:	f023 0304 	bic.w	r3, r3, #4
 800e5a0:	6023      	str	r3, [r4, #0]
 800e5a2:	f04f 0900 	mov.w	r9, #0
 800e5a6:	9700      	str	r7, [sp, #0]
 800e5a8:	4633      	mov	r3, r6
 800e5aa:	aa0b      	add	r2, sp, #44	; 0x2c
 800e5ac:	4621      	mov	r1, r4
 800e5ae:	4628      	mov	r0, r5
 800e5b0:	f000 f9da 	bl	800e968 <_printf_common>
 800e5b4:	3001      	adds	r0, #1
 800e5b6:	f040 8090 	bne.w	800e6da <_printf_float+0x1de>
 800e5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e5be:	b00d      	add	sp, #52	; 0x34
 800e5c0:	ecbd 8b02 	vpop	{d8}
 800e5c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5c8:	4642      	mov	r2, r8
 800e5ca:	464b      	mov	r3, r9
 800e5cc:	4640      	mov	r0, r8
 800e5ce:	4649      	mov	r1, r9
 800e5d0:	f7f2 fae4 	bl	8000b9c <__aeabi_dcmpun>
 800e5d4:	b140      	cbz	r0, 800e5e8 <_printf_float+0xec>
 800e5d6:	464b      	mov	r3, r9
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	bfbc      	itt	lt
 800e5dc:	232d      	movlt	r3, #45	; 0x2d
 800e5de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e5e2:	4a7f      	ldr	r2, [pc, #508]	; (800e7e0 <_printf_float+0x2e4>)
 800e5e4:	4b7f      	ldr	r3, [pc, #508]	; (800e7e4 <_printf_float+0x2e8>)
 800e5e6:	e7d1      	b.n	800e58c <_printf_float+0x90>
 800e5e8:	6863      	ldr	r3, [r4, #4]
 800e5ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e5ee:	9206      	str	r2, [sp, #24]
 800e5f0:	1c5a      	adds	r2, r3, #1
 800e5f2:	d13f      	bne.n	800e674 <_printf_float+0x178>
 800e5f4:	2306      	movs	r3, #6
 800e5f6:	6063      	str	r3, [r4, #4]
 800e5f8:	9b05      	ldr	r3, [sp, #20]
 800e5fa:	6861      	ldr	r1, [r4, #4]
 800e5fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e600:	2300      	movs	r3, #0
 800e602:	9303      	str	r3, [sp, #12]
 800e604:	ab0a      	add	r3, sp, #40	; 0x28
 800e606:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e60a:	ab09      	add	r3, sp, #36	; 0x24
 800e60c:	ec49 8b10 	vmov	d0, r8, r9
 800e610:	9300      	str	r3, [sp, #0]
 800e612:	6022      	str	r2, [r4, #0]
 800e614:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e618:	4628      	mov	r0, r5
 800e61a:	f7ff fecf 	bl	800e3bc <__cvt>
 800e61e:	9b06      	ldr	r3, [sp, #24]
 800e620:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e622:	2b47      	cmp	r3, #71	; 0x47
 800e624:	4680      	mov	r8, r0
 800e626:	d108      	bne.n	800e63a <_printf_float+0x13e>
 800e628:	1cc8      	adds	r0, r1, #3
 800e62a:	db02      	blt.n	800e632 <_printf_float+0x136>
 800e62c:	6863      	ldr	r3, [r4, #4]
 800e62e:	4299      	cmp	r1, r3
 800e630:	dd41      	ble.n	800e6b6 <_printf_float+0x1ba>
 800e632:	f1ab 0302 	sub.w	r3, fp, #2
 800e636:	fa5f fb83 	uxtb.w	fp, r3
 800e63a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e63e:	d820      	bhi.n	800e682 <_printf_float+0x186>
 800e640:	3901      	subs	r1, #1
 800e642:	465a      	mov	r2, fp
 800e644:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e648:	9109      	str	r1, [sp, #36]	; 0x24
 800e64a:	f7ff ff19 	bl	800e480 <__exponent>
 800e64e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e650:	1813      	adds	r3, r2, r0
 800e652:	2a01      	cmp	r2, #1
 800e654:	4681      	mov	r9, r0
 800e656:	6123      	str	r3, [r4, #16]
 800e658:	dc02      	bgt.n	800e660 <_printf_float+0x164>
 800e65a:	6822      	ldr	r2, [r4, #0]
 800e65c:	07d2      	lsls	r2, r2, #31
 800e65e:	d501      	bpl.n	800e664 <_printf_float+0x168>
 800e660:	3301      	adds	r3, #1
 800e662:	6123      	str	r3, [r4, #16]
 800e664:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d09c      	beq.n	800e5a6 <_printf_float+0xaa>
 800e66c:	232d      	movs	r3, #45	; 0x2d
 800e66e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e672:	e798      	b.n	800e5a6 <_printf_float+0xaa>
 800e674:	9a06      	ldr	r2, [sp, #24]
 800e676:	2a47      	cmp	r2, #71	; 0x47
 800e678:	d1be      	bne.n	800e5f8 <_printf_float+0xfc>
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d1bc      	bne.n	800e5f8 <_printf_float+0xfc>
 800e67e:	2301      	movs	r3, #1
 800e680:	e7b9      	b.n	800e5f6 <_printf_float+0xfa>
 800e682:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e686:	d118      	bne.n	800e6ba <_printf_float+0x1be>
 800e688:	2900      	cmp	r1, #0
 800e68a:	6863      	ldr	r3, [r4, #4]
 800e68c:	dd0b      	ble.n	800e6a6 <_printf_float+0x1aa>
 800e68e:	6121      	str	r1, [r4, #16]
 800e690:	b913      	cbnz	r3, 800e698 <_printf_float+0x19c>
 800e692:	6822      	ldr	r2, [r4, #0]
 800e694:	07d0      	lsls	r0, r2, #31
 800e696:	d502      	bpl.n	800e69e <_printf_float+0x1a2>
 800e698:	3301      	adds	r3, #1
 800e69a:	440b      	add	r3, r1
 800e69c:	6123      	str	r3, [r4, #16]
 800e69e:	65a1      	str	r1, [r4, #88]	; 0x58
 800e6a0:	f04f 0900 	mov.w	r9, #0
 800e6a4:	e7de      	b.n	800e664 <_printf_float+0x168>
 800e6a6:	b913      	cbnz	r3, 800e6ae <_printf_float+0x1b2>
 800e6a8:	6822      	ldr	r2, [r4, #0]
 800e6aa:	07d2      	lsls	r2, r2, #31
 800e6ac:	d501      	bpl.n	800e6b2 <_printf_float+0x1b6>
 800e6ae:	3302      	adds	r3, #2
 800e6b0:	e7f4      	b.n	800e69c <_printf_float+0x1a0>
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	e7f2      	b.n	800e69c <_printf_float+0x1a0>
 800e6b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e6ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6bc:	4299      	cmp	r1, r3
 800e6be:	db05      	blt.n	800e6cc <_printf_float+0x1d0>
 800e6c0:	6823      	ldr	r3, [r4, #0]
 800e6c2:	6121      	str	r1, [r4, #16]
 800e6c4:	07d8      	lsls	r0, r3, #31
 800e6c6:	d5ea      	bpl.n	800e69e <_printf_float+0x1a2>
 800e6c8:	1c4b      	adds	r3, r1, #1
 800e6ca:	e7e7      	b.n	800e69c <_printf_float+0x1a0>
 800e6cc:	2900      	cmp	r1, #0
 800e6ce:	bfd4      	ite	le
 800e6d0:	f1c1 0202 	rsble	r2, r1, #2
 800e6d4:	2201      	movgt	r2, #1
 800e6d6:	4413      	add	r3, r2
 800e6d8:	e7e0      	b.n	800e69c <_printf_float+0x1a0>
 800e6da:	6823      	ldr	r3, [r4, #0]
 800e6dc:	055a      	lsls	r2, r3, #21
 800e6de:	d407      	bmi.n	800e6f0 <_printf_float+0x1f4>
 800e6e0:	6923      	ldr	r3, [r4, #16]
 800e6e2:	4642      	mov	r2, r8
 800e6e4:	4631      	mov	r1, r6
 800e6e6:	4628      	mov	r0, r5
 800e6e8:	47b8      	blx	r7
 800e6ea:	3001      	adds	r0, #1
 800e6ec:	d12c      	bne.n	800e748 <_printf_float+0x24c>
 800e6ee:	e764      	b.n	800e5ba <_printf_float+0xbe>
 800e6f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e6f4:	f240 80e0 	bls.w	800e8b8 <_printf_float+0x3bc>
 800e6f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e6fc:	2200      	movs	r2, #0
 800e6fe:	2300      	movs	r3, #0
 800e700:	f7f2 fa1a 	bl	8000b38 <__aeabi_dcmpeq>
 800e704:	2800      	cmp	r0, #0
 800e706:	d034      	beq.n	800e772 <_printf_float+0x276>
 800e708:	4a37      	ldr	r2, [pc, #220]	; (800e7e8 <_printf_float+0x2ec>)
 800e70a:	2301      	movs	r3, #1
 800e70c:	4631      	mov	r1, r6
 800e70e:	4628      	mov	r0, r5
 800e710:	47b8      	blx	r7
 800e712:	3001      	adds	r0, #1
 800e714:	f43f af51 	beq.w	800e5ba <_printf_float+0xbe>
 800e718:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e71c:	429a      	cmp	r2, r3
 800e71e:	db02      	blt.n	800e726 <_printf_float+0x22a>
 800e720:	6823      	ldr	r3, [r4, #0]
 800e722:	07d8      	lsls	r0, r3, #31
 800e724:	d510      	bpl.n	800e748 <_printf_float+0x24c>
 800e726:	ee18 3a10 	vmov	r3, s16
 800e72a:	4652      	mov	r2, sl
 800e72c:	4631      	mov	r1, r6
 800e72e:	4628      	mov	r0, r5
 800e730:	47b8      	blx	r7
 800e732:	3001      	adds	r0, #1
 800e734:	f43f af41 	beq.w	800e5ba <_printf_float+0xbe>
 800e738:	f04f 0800 	mov.w	r8, #0
 800e73c:	f104 091a 	add.w	r9, r4, #26
 800e740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e742:	3b01      	subs	r3, #1
 800e744:	4543      	cmp	r3, r8
 800e746:	dc09      	bgt.n	800e75c <_printf_float+0x260>
 800e748:	6823      	ldr	r3, [r4, #0]
 800e74a:	079b      	lsls	r3, r3, #30
 800e74c:	f100 8107 	bmi.w	800e95e <_printf_float+0x462>
 800e750:	68e0      	ldr	r0, [r4, #12]
 800e752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e754:	4298      	cmp	r0, r3
 800e756:	bfb8      	it	lt
 800e758:	4618      	movlt	r0, r3
 800e75a:	e730      	b.n	800e5be <_printf_float+0xc2>
 800e75c:	2301      	movs	r3, #1
 800e75e:	464a      	mov	r2, r9
 800e760:	4631      	mov	r1, r6
 800e762:	4628      	mov	r0, r5
 800e764:	47b8      	blx	r7
 800e766:	3001      	adds	r0, #1
 800e768:	f43f af27 	beq.w	800e5ba <_printf_float+0xbe>
 800e76c:	f108 0801 	add.w	r8, r8, #1
 800e770:	e7e6      	b.n	800e740 <_printf_float+0x244>
 800e772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e774:	2b00      	cmp	r3, #0
 800e776:	dc39      	bgt.n	800e7ec <_printf_float+0x2f0>
 800e778:	4a1b      	ldr	r2, [pc, #108]	; (800e7e8 <_printf_float+0x2ec>)
 800e77a:	2301      	movs	r3, #1
 800e77c:	4631      	mov	r1, r6
 800e77e:	4628      	mov	r0, r5
 800e780:	47b8      	blx	r7
 800e782:	3001      	adds	r0, #1
 800e784:	f43f af19 	beq.w	800e5ba <_printf_float+0xbe>
 800e788:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e78c:	4313      	orrs	r3, r2
 800e78e:	d102      	bne.n	800e796 <_printf_float+0x29a>
 800e790:	6823      	ldr	r3, [r4, #0]
 800e792:	07d9      	lsls	r1, r3, #31
 800e794:	d5d8      	bpl.n	800e748 <_printf_float+0x24c>
 800e796:	ee18 3a10 	vmov	r3, s16
 800e79a:	4652      	mov	r2, sl
 800e79c:	4631      	mov	r1, r6
 800e79e:	4628      	mov	r0, r5
 800e7a0:	47b8      	blx	r7
 800e7a2:	3001      	adds	r0, #1
 800e7a4:	f43f af09 	beq.w	800e5ba <_printf_float+0xbe>
 800e7a8:	f04f 0900 	mov.w	r9, #0
 800e7ac:	f104 0a1a 	add.w	sl, r4, #26
 800e7b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7b2:	425b      	negs	r3, r3
 800e7b4:	454b      	cmp	r3, r9
 800e7b6:	dc01      	bgt.n	800e7bc <_printf_float+0x2c0>
 800e7b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7ba:	e792      	b.n	800e6e2 <_printf_float+0x1e6>
 800e7bc:	2301      	movs	r3, #1
 800e7be:	4652      	mov	r2, sl
 800e7c0:	4631      	mov	r1, r6
 800e7c2:	4628      	mov	r0, r5
 800e7c4:	47b8      	blx	r7
 800e7c6:	3001      	adds	r0, #1
 800e7c8:	f43f aef7 	beq.w	800e5ba <_printf_float+0xbe>
 800e7cc:	f109 0901 	add.w	r9, r9, #1
 800e7d0:	e7ee      	b.n	800e7b0 <_printf_float+0x2b4>
 800e7d2:	bf00      	nop
 800e7d4:	7fefffff 	.word	0x7fefffff
 800e7d8:	080122a1 	.word	0x080122a1
 800e7dc:	080122a5 	.word	0x080122a5
 800e7e0:	080122a9 	.word	0x080122a9
 800e7e4:	080122ad 	.word	0x080122ad
 800e7e8:	080122b1 	.word	0x080122b1
 800e7ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e7ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e7f0:	429a      	cmp	r2, r3
 800e7f2:	bfa8      	it	ge
 800e7f4:	461a      	movge	r2, r3
 800e7f6:	2a00      	cmp	r2, #0
 800e7f8:	4691      	mov	r9, r2
 800e7fa:	dc37      	bgt.n	800e86c <_printf_float+0x370>
 800e7fc:	f04f 0b00 	mov.w	fp, #0
 800e800:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e804:	f104 021a 	add.w	r2, r4, #26
 800e808:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e80a:	9305      	str	r3, [sp, #20]
 800e80c:	eba3 0309 	sub.w	r3, r3, r9
 800e810:	455b      	cmp	r3, fp
 800e812:	dc33      	bgt.n	800e87c <_printf_float+0x380>
 800e814:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e818:	429a      	cmp	r2, r3
 800e81a:	db3b      	blt.n	800e894 <_printf_float+0x398>
 800e81c:	6823      	ldr	r3, [r4, #0]
 800e81e:	07da      	lsls	r2, r3, #31
 800e820:	d438      	bmi.n	800e894 <_printf_float+0x398>
 800e822:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e826:	eba2 0903 	sub.w	r9, r2, r3
 800e82a:	9b05      	ldr	r3, [sp, #20]
 800e82c:	1ad2      	subs	r2, r2, r3
 800e82e:	4591      	cmp	r9, r2
 800e830:	bfa8      	it	ge
 800e832:	4691      	movge	r9, r2
 800e834:	f1b9 0f00 	cmp.w	r9, #0
 800e838:	dc35      	bgt.n	800e8a6 <_printf_float+0x3aa>
 800e83a:	f04f 0800 	mov.w	r8, #0
 800e83e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e842:	f104 0a1a 	add.w	sl, r4, #26
 800e846:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e84a:	1a9b      	subs	r3, r3, r2
 800e84c:	eba3 0309 	sub.w	r3, r3, r9
 800e850:	4543      	cmp	r3, r8
 800e852:	f77f af79 	ble.w	800e748 <_printf_float+0x24c>
 800e856:	2301      	movs	r3, #1
 800e858:	4652      	mov	r2, sl
 800e85a:	4631      	mov	r1, r6
 800e85c:	4628      	mov	r0, r5
 800e85e:	47b8      	blx	r7
 800e860:	3001      	adds	r0, #1
 800e862:	f43f aeaa 	beq.w	800e5ba <_printf_float+0xbe>
 800e866:	f108 0801 	add.w	r8, r8, #1
 800e86a:	e7ec      	b.n	800e846 <_printf_float+0x34a>
 800e86c:	4613      	mov	r3, r2
 800e86e:	4631      	mov	r1, r6
 800e870:	4642      	mov	r2, r8
 800e872:	4628      	mov	r0, r5
 800e874:	47b8      	blx	r7
 800e876:	3001      	adds	r0, #1
 800e878:	d1c0      	bne.n	800e7fc <_printf_float+0x300>
 800e87a:	e69e      	b.n	800e5ba <_printf_float+0xbe>
 800e87c:	2301      	movs	r3, #1
 800e87e:	4631      	mov	r1, r6
 800e880:	4628      	mov	r0, r5
 800e882:	9205      	str	r2, [sp, #20]
 800e884:	47b8      	blx	r7
 800e886:	3001      	adds	r0, #1
 800e888:	f43f ae97 	beq.w	800e5ba <_printf_float+0xbe>
 800e88c:	9a05      	ldr	r2, [sp, #20]
 800e88e:	f10b 0b01 	add.w	fp, fp, #1
 800e892:	e7b9      	b.n	800e808 <_printf_float+0x30c>
 800e894:	ee18 3a10 	vmov	r3, s16
 800e898:	4652      	mov	r2, sl
 800e89a:	4631      	mov	r1, r6
 800e89c:	4628      	mov	r0, r5
 800e89e:	47b8      	blx	r7
 800e8a0:	3001      	adds	r0, #1
 800e8a2:	d1be      	bne.n	800e822 <_printf_float+0x326>
 800e8a4:	e689      	b.n	800e5ba <_printf_float+0xbe>
 800e8a6:	9a05      	ldr	r2, [sp, #20]
 800e8a8:	464b      	mov	r3, r9
 800e8aa:	4442      	add	r2, r8
 800e8ac:	4631      	mov	r1, r6
 800e8ae:	4628      	mov	r0, r5
 800e8b0:	47b8      	blx	r7
 800e8b2:	3001      	adds	r0, #1
 800e8b4:	d1c1      	bne.n	800e83a <_printf_float+0x33e>
 800e8b6:	e680      	b.n	800e5ba <_printf_float+0xbe>
 800e8b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e8ba:	2a01      	cmp	r2, #1
 800e8bc:	dc01      	bgt.n	800e8c2 <_printf_float+0x3c6>
 800e8be:	07db      	lsls	r3, r3, #31
 800e8c0:	d53a      	bpl.n	800e938 <_printf_float+0x43c>
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	4642      	mov	r2, r8
 800e8c6:	4631      	mov	r1, r6
 800e8c8:	4628      	mov	r0, r5
 800e8ca:	47b8      	blx	r7
 800e8cc:	3001      	adds	r0, #1
 800e8ce:	f43f ae74 	beq.w	800e5ba <_printf_float+0xbe>
 800e8d2:	ee18 3a10 	vmov	r3, s16
 800e8d6:	4652      	mov	r2, sl
 800e8d8:	4631      	mov	r1, r6
 800e8da:	4628      	mov	r0, r5
 800e8dc:	47b8      	blx	r7
 800e8de:	3001      	adds	r0, #1
 800e8e0:	f43f ae6b 	beq.w	800e5ba <_printf_float+0xbe>
 800e8e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e8f0:	f7f2 f922 	bl	8000b38 <__aeabi_dcmpeq>
 800e8f4:	b9d8      	cbnz	r0, 800e92e <_printf_float+0x432>
 800e8f6:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e8fa:	f108 0201 	add.w	r2, r8, #1
 800e8fe:	4631      	mov	r1, r6
 800e900:	4628      	mov	r0, r5
 800e902:	47b8      	blx	r7
 800e904:	3001      	adds	r0, #1
 800e906:	d10e      	bne.n	800e926 <_printf_float+0x42a>
 800e908:	e657      	b.n	800e5ba <_printf_float+0xbe>
 800e90a:	2301      	movs	r3, #1
 800e90c:	4652      	mov	r2, sl
 800e90e:	4631      	mov	r1, r6
 800e910:	4628      	mov	r0, r5
 800e912:	47b8      	blx	r7
 800e914:	3001      	adds	r0, #1
 800e916:	f43f ae50 	beq.w	800e5ba <_printf_float+0xbe>
 800e91a:	f108 0801 	add.w	r8, r8, #1
 800e91e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e920:	3b01      	subs	r3, #1
 800e922:	4543      	cmp	r3, r8
 800e924:	dcf1      	bgt.n	800e90a <_printf_float+0x40e>
 800e926:	464b      	mov	r3, r9
 800e928:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e92c:	e6da      	b.n	800e6e4 <_printf_float+0x1e8>
 800e92e:	f04f 0800 	mov.w	r8, #0
 800e932:	f104 0a1a 	add.w	sl, r4, #26
 800e936:	e7f2      	b.n	800e91e <_printf_float+0x422>
 800e938:	2301      	movs	r3, #1
 800e93a:	4642      	mov	r2, r8
 800e93c:	e7df      	b.n	800e8fe <_printf_float+0x402>
 800e93e:	2301      	movs	r3, #1
 800e940:	464a      	mov	r2, r9
 800e942:	4631      	mov	r1, r6
 800e944:	4628      	mov	r0, r5
 800e946:	47b8      	blx	r7
 800e948:	3001      	adds	r0, #1
 800e94a:	f43f ae36 	beq.w	800e5ba <_printf_float+0xbe>
 800e94e:	f108 0801 	add.w	r8, r8, #1
 800e952:	68e3      	ldr	r3, [r4, #12]
 800e954:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e956:	1a5b      	subs	r3, r3, r1
 800e958:	4543      	cmp	r3, r8
 800e95a:	dcf0      	bgt.n	800e93e <_printf_float+0x442>
 800e95c:	e6f8      	b.n	800e750 <_printf_float+0x254>
 800e95e:	f04f 0800 	mov.w	r8, #0
 800e962:	f104 0919 	add.w	r9, r4, #25
 800e966:	e7f4      	b.n	800e952 <_printf_float+0x456>

0800e968 <_printf_common>:
 800e968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e96c:	4616      	mov	r6, r2
 800e96e:	4699      	mov	r9, r3
 800e970:	688a      	ldr	r2, [r1, #8]
 800e972:	690b      	ldr	r3, [r1, #16]
 800e974:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e978:	4293      	cmp	r3, r2
 800e97a:	bfb8      	it	lt
 800e97c:	4613      	movlt	r3, r2
 800e97e:	6033      	str	r3, [r6, #0]
 800e980:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e984:	4607      	mov	r7, r0
 800e986:	460c      	mov	r4, r1
 800e988:	b10a      	cbz	r2, 800e98e <_printf_common+0x26>
 800e98a:	3301      	adds	r3, #1
 800e98c:	6033      	str	r3, [r6, #0]
 800e98e:	6823      	ldr	r3, [r4, #0]
 800e990:	0699      	lsls	r1, r3, #26
 800e992:	bf42      	ittt	mi
 800e994:	6833      	ldrmi	r3, [r6, #0]
 800e996:	3302      	addmi	r3, #2
 800e998:	6033      	strmi	r3, [r6, #0]
 800e99a:	6825      	ldr	r5, [r4, #0]
 800e99c:	f015 0506 	ands.w	r5, r5, #6
 800e9a0:	d106      	bne.n	800e9b0 <_printf_common+0x48>
 800e9a2:	f104 0a19 	add.w	sl, r4, #25
 800e9a6:	68e3      	ldr	r3, [r4, #12]
 800e9a8:	6832      	ldr	r2, [r6, #0]
 800e9aa:	1a9b      	subs	r3, r3, r2
 800e9ac:	42ab      	cmp	r3, r5
 800e9ae:	dc26      	bgt.n	800e9fe <_printf_common+0x96>
 800e9b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e9b4:	1e13      	subs	r3, r2, #0
 800e9b6:	6822      	ldr	r2, [r4, #0]
 800e9b8:	bf18      	it	ne
 800e9ba:	2301      	movne	r3, #1
 800e9bc:	0692      	lsls	r2, r2, #26
 800e9be:	d42b      	bmi.n	800ea18 <_printf_common+0xb0>
 800e9c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e9c4:	4649      	mov	r1, r9
 800e9c6:	4638      	mov	r0, r7
 800e9c8:	47c0      	blx	r8
 800e9ca:	3001      	adds	r0, #1
 800e9cc:	d01e      	beq.n	800ea0c <_printf_common+0xa4>
 800e9ce:	6823      	ldr	r3, [r4, #0]
 800e9d0:	6922      	ldr	r2, [r4, #16]
 800e9d2:	f003 0306 	and.w	r3, r3, #6
 800e9d6:	2b04      	cmp	r3, #4
 800e9d8:	bf02      	ittt	eq
 800e9da:	68e5      	ldreq	r5, [r4, #12]
 800e9dc:	6833      	ldreq	r3, [r6, #0]
 800e9de:	1aed      	subeq	r5, r5, r3
 800e9e0:	68a3      	ldr	r3, [r4, #8]
 800e9e2:	bf0c      	ite	eq
 800e9e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e9e8:	2500      	movne	r5, #0
 800e9ea:	4293      	cmp	r3, r2
 800e9ec:	bfc4      	itt	gt
 800e9ee:	1a9b      	subgt	r3, r3, r2
 800e9f0:	18ed      	addgt	r5, r5, r3
 800e9f2:	2600      	movs	r6, #0
 800e9f4:	341a      	adds	r4, #26
 800e9f6:	42b5      	cmp	r5, r6
 800e9f8:	d11a      	bne.n	800ea30 <_printf_common+0xc8>
 800e9fa:	2000      	movs	r0, #0
 800e9fc:	e008      	b.n	800ea10 <_printf_common+0xa8>
 800e9fe:	2301      	movs	r3, #1
 800ea00:	4652      	mov	r2, sl
 800ea02:	4649      	mov	r1, r9
 800ea04:	4638      	mov	r0, r7
 800ea06:	47c0      	blx	r8
 800ea08:	3001      	adds	r0, #1
 800ea0a:	d103      	bne.n	800ea14 <_printf_common+0xac>
 800ea0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ea10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea14:	3501      	adds	r5, #1
 800ea16:	e7c6      	b.n	800e9a6 <_printf_common+0x3e>
 800ea18:	18e1      	adds	r1, r4, r3
 800ea1a:	1c5a      	adds	r2, r3, #1
 800ea1c:	2030      	movs	r0, #48	; 0x30
 800ea1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ea22:	4422      	add	r2, r4
 800ea24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ea28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ea2c:	3302      	adds	r3, #2
 800ea2e:	e7c7      	b.n	800e9c0 <_printf_common+0x58>
 800ea30:	2301      	movs	r3, #1
 800ea32:	4622      	mov	r2, r4
 800ea34:	4649      	mov	r1, r9
 800ea36:	4638      	mov	r0, r7
 800ea38:	47c0      	blx	r8
 800ea3a:	3001      	adds	r0, #1
 800ea3c:	d0e6      	beq.n	800ea0c <_printf_common+0xa4>
 800ea3e:	3601      	adds	r6, #1
 800ea40:	e7d9      	b.n	800e9f6 <_printf_common+0x8e>
	...

0800ea44 <_printf_i>:
 800ea44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ea48:	7e0f      	ldrb	r7, [r1, #24]
 800ea4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ea4c:	2f78      	cmp	r7, #120	; 0x78
 800ea4e:	4691      	mov	r9, r2
 800ea50:	4680      	mov	r8, r0
 800ea52:	460c      	mov	r4, r1
 800ea54:	469a      	mov	sl, r3
 800ea56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ea5a:	d807      	bhi.n	800ea6c <_printf_i+0x28>
 800ea5c:	2f62      	cmp	r7, #98	; 0x62
 800ea5e:	d80a      	bhi.n	800ea76 <_printf_i+0x32>
 800ea60:	2f00      	cmp	r7, #0
 800ea62:	f000 80d4 	beq.w	800ec0e <_printf_i+0x1ca>
 800ea66:	2f58      	cmp	r7, #88	; 0x58
 800ea68:	f000 80c0 	beq.w	800ebec <_printf_i+0x1a8>
 800ea6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ea74:	e03a      	b.n	800eaec <_printf_i+0xa8>
 800ea76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ea7a:	2b15      	cmp	r3, #21
 800ea7c:	d8f6      	bhi.n	800ea6c <_printf_i+0x28>
 800ea7e:	a101      	add	r1, pc, #4	; (adr r1, 800ea84 <_printf_i+0x40>)
 800ea80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ea84:	0800eadd 	.word	0x0800eadd
 800ea88:	0800eaf1 	.word	0x0800eaf1
 800ea8c:	0800ea6d 	.word	0x0800ea6d
 800ea90:	0800ea6d 	.word	0x0800ea6d
 800ea94:	0800ea6d 	.word	0x0800ea6d
 800ea98:	0800ea6d 	.word	0x0800ea6d
 800ea9c:	0800eaf1 	.word	0x0800eaf1
 800eaa0:	0800ea6d 	.word	0x0800ea6d
 800eaa4:	0800ea6d 	.word	0x0800ea6d
 800eaa8:	0800ea6d 	.word	0x0800ea6d
 800eaac:	0800ea6d 	.word	0x0800ea6d
 800eab0:	0800ebf5 	.word	0x0800ebf5
 800eab4:	0800eb1d 	.word	0x0800eb1d
 800eab8:	0800ebaf 	.word	0x0800ebaf
 800eabc:	0800ea6d 	.word	0x0800ea6d
 800eac0:	0800ea6d 	.word	0x0800ea6d
 800eac4:	0800ec17 	.word	0x0800ec17
 800eac8:	0800ea6d 	.word	0x0800ea6d
 800eacc:	0800eb1d 	.word	0x0800eb1d
 800ead0:	0800ea6d 	.word	0x0800ea6d
 800ead4:	0800ea6d 	.word	0x0800ea6d
 800ead8:	0800ebb7 	.word	0x0800ebb7
 800eadc:	682b      	ldr	r3, [r5, #0]
 800eade:	1d1a      	adds	r2, r3, #4
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	602a      	str	r2, [r5, #0]
 800eae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eae8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eaec:	2301      	movs	r3, #1
 800eaee:	e09f      	b.n	800ec30 <_printf_i+0x1ec>
 800eaf0:	6820      	ldr	r0, [r4, #0]
 800eaf2:	682b      	ldr	r3, [r5, #0]
 800eaf4:	0607      	lsls	r7, r0, #24
 800eaf6:	f103 0104 	add.w	r1, r3, #4
 800eafa:	6029      	str	r1, [r5, #0]
 800eafc:	d501      	bpl.n	800eb02 <_printf_i+0xbe>
 800eafe:	681e      	ldr	r6, [r3, #0]
 800eb00:	e003      	b.n	800eb0a <_printf_i+0xc6>
 800eb02:	0646      	lsls	r6, r0, #25
 800eb04:	d5fb      	bpl.n	800eafe <_printf_i+0xba>
 800eb06:	f9b3 6000 	ldrsh.w	r6, [r3]
 800eb0a:	2e00      	cmp	r6, #0
 800eb0c:	da03      	bge.n	800eb16 <_printf_i+0xd2>
 800eb0e:	232d      	movs	r3, #45	; 0x2d
 800eb10:	4276      	negs	r6, r6
 800eb12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800eb16:	485a      	ldr	r0, [pc, #360]	; (800ec80 <_printf_i+0x23c>)
 800eb18:	230a      	movs	r3, #10
 800eb1a:	e012      	b.n	800eb42 <_printf_i+0xfe>
 800eb1c:	682b      	ldr	r3, [r5, #0]
 800eb1e:	6820      	ldr	r0, [r4, #0]
 800eb20:	1d19      	adds	r1, r3, #4
 800eb22:	6029      	str	r1, [r5, #0]
 800eb24:	0605      	lsls	r5, r0, #24
 800eb26:	d501      	bpl.n	800eb2c <_printf_i+0xe8>
 800eb28:	681e      	ldr	r6, [r3, #0]
 800eb2a:	e002      	b.n	800eb32 <_printf_i+0xee>
 800eb2c:	0641      	lsls	r1, r0, #25
 800eb2e:	d5fb      	bpl.n	800eb28 <_printf_i+0xe4>
 800eb30:	881e      	ldrh	r6, [r3, #0]
 800eb32:	4853      	ldr	r0, [pc, #332]	; (800ec80 <_printf_i+0x23c>)
 800eb34:	2f6f      	cmp	r7, #111	; 0x6f
 800eb36:	bf0c      	ite	eq
 800eb38:	2308      	moveq	r3, #8
 800eb3a:	230a      	movne	r3, #10
 800eb3c:	2100      	movs	r1, #0
 800eb3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eb42:	6865      	ldr	r5, [r4, #4]
 800eb44:	60a5      	str	r5, [r4, #8]
 800eb46:	2d00      	cmp	r5, #0
 800eb48:	bfa2      	ittt	ge
 800eb4a:	6821      	ldrge	r1, [r4, #0]
 800eb4c:	f021 0104 	bicge.w	r1, r1, #4
 800eb50:	6021      	strge	r1, [r4, #0]
 800eb52:	b90e      	cbnz	r6, 800eb58 <_printf_i+0x114>
 800eb54:	2d00      	cmp	r5, #0
 800eb56:	d04b      	beq.n	800ebf0 <_printf_i+0x1ac>
 800eb58:	4615      	mov	r5, r2
 800eb5a:	fbb6 f1f3 	udiv	r1, r6, r3
 800eb5e:	fb03 6711 	mls	r7, r3, r1, r6
 800eb62:	5dc7      	ldrb	r7, [r0, r7]
 800eb64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eb68:	4637      	mov	r7, r6
 800eb6a:	42bb      	cmp	r3, r7
 800eb6c:	460e      	mov	r6, r1
 800eb6e:	d9f4      	bls.n	800eb5a <_printf_i+0x116>
 800eb70:	2b08      	cmp	r3, #8
 800eb72:	d10b      	bne.n	800eb8c <_printf_i+0x148>
 800eb74:	6823      	ldr	r3, [r4, #0]
 800eb76:	07de      	lsls	r6, r3, #31
 800eb78:	d508      	bpl.n	800eb8c <_printf_i+0x148>
 800eb7a:	6923      	ldr	r3, [r4, #16]
 800eb7c:	6861      	ldr	r1, [r4, #4]
 800eb7e:	4299      	cmp	r1, r3
 800eb80:	bfde      	ittt	le
 800eb82:	2330      	movle	r3, #48	; 0x30
 800eb84:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eb88:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eb8c:	1b52      	subs	r2, r2, r5
 800eb8e:	6122      	str	r2, [r4, #16]
 800eb90:	f8cd a000 	str.w	sl, [sp]
 800eb94:	464b      	mov	r3, r9
 800eb96:	aa03      	add	r2, sp, #12
 800eb98:	4621      	mov	r1, r4
 800eb9a:	4640      	mov	r0, r8
 800eb9c:	f7ff fee4 	bl	800e968 <_printf_common>
 800eba0:	3001      	adds	r0, #1
 800eba2:	d14a      	bne.n	800ec3a <_printf_i+0x1f6>
 800eba4:	f04f 30ff 	mov.w	r0, #4294967295
 800eba8:	b004      	add	sp, #16
 800ebaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebae:	6823      	ldr	r3, [r4, #0]
 800ebb0:	f043 0320 	orr.w	r3, r3, #32
 800ebb4:	6023      	str	r3, [r4, #0]
 800ebb6:	4833      	ldr	r0, [pc, #204]	; (800ec84 <_printf_i+0x240>)
 800ebb8:	2778      	movs	r7, #120	; 0x78
 800ebba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ebbe:	6823      	ldr	r3, [r4, #0]
 800ebc0:	6829      	ldr	r1, [r5, #0]
 800ebc2:	061f      	lsls	r7, r3, #24
 800ebc4:	f851 6b04 	ldr.w	r6, [r1], #4
 800ebc8:	d402      	bmi.n	800ebd0 <_printf_i+0x18c>
 800ebca:	065f      	lsls	r7, r3, #25
 800ebcc:	bf48      	it	mi
 800ebce:	b2b6      	uxthmi	r6, r6
 800ebd0:	07df      	lsls	r7, r3, #31
 800ebd2:	bf48      	it	mi
 800ebd4:	f043 0320 	orrmi.w	r3, r3, #32
 800ebd8:	6029      	str	r1, [r5, #0]
 800ebda:	bf48      	it	mi
 800ebdc:	6023      	strmi	r3, [r4, #0]
 800ebde:	b91e      	cbnz	r6, 800ebe8 <_printf_i+0x1a4>
 800ebe0:	6823      	ldr	r3, [r4, #0]
 800ebe2:	f023 0320 	bic.w	r3, r3, #32
 800ebe6:	6023      	str	r3, [r4, #0]
 800ebe8:	2310      	movs	r3, #16
 800ebea:	e7a7      	b.n	800eb3c <_printf_i+0xf8>
 800ebec:	4824      	ldr	r0, [pc, #144]	; (800ec80 <_printf_i+0x23c>)
 800ebee:	e7e4      	b.n	800ebba <_printf_i+0x176>
 800ebf0:	4615      	mov	r5, r2
 800ebf2:	e7bd      	b.n	800eb70 <_printf_i+0x12c>
 800ebf4:	682b      	ldr	r3, [r5, #0]
 800ebf6:	6826      	ldr	r6, [r4, #0]
 800ebf8:	6961      	ldr	r1, [r4, #20]
 800ebfa:	1d18      	adds	r0, r3, #4
 800ebfc:	6028      	str	r0, [r5, #0]
 800ebfe:	0635      	lsls	r5, r6, #24
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	d501      	bpl.n	800ec08 <_printf_i+0x1c4>
 800ec04:	6019      	str	r1, [r3, #0]
 800ec06:	e002      	b.n	800ec0e <_printf_i+0x1ca>
 800ec08:	0670      	lsls	r0, r6, #25
 800ec0a:	d5fb      	bpl.n	800ec04 <_printf_i+0x1c0>
 800ec0c:	8019      	strh	r1, [r3, #0]
 800ec0e:	2300      	movs	r3, #0
 800ec10:	6123      	str	r3, [r4, #16]
 800ec12:	4615      	mov	r5, r2
 800ec14:	e7bc      	b.n	800eb90 <_printf_i+0x14c>
 800ec16:	682b      	ldr	r3, [r5, #0]
 800ec18:	1d1a      	adds	r2, r3, #4
 800ec1a:	602a      	str	r2, [r5, #0]
 800ec1c:	681d      	ldr	r5, [r3, #0]
 800ec1e:	6862      	ldr	r2, [r4, #4]
 800ec20:	2100      	movs	r1, #0
 800ec22:	4628      	mov	r0, r5
 800ec24:	f7f1 fb0c 	bl	8000240 <memchr>
 800ec28:	b108      	cbz	r0, 800ec2e <_printf_i+0x1ea>
 800ec2a:	1b40      	subs	r0, r0, r5
 800ec2c:	6060      	str	r0, [r4, #4]
 800ec2e:	6863      	ldr	r3, [r4, #4]
 800ec30:	6123      	str	r3, [r4, #16]
 800ec32:	2300      	movs	r3, #0
 800ec34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ec38:	e7aa      	b.n	800eb90 <_printf_i+0x14c>
 800ec3a:	6923      	ldr	r3, [r4, #16]
 800ec3c:	462a      	mov	r2, r5
 800ec3e:	4649      	mov	r1, r9
 800ec40:	4640      	mov	r0, r8
 800ec42:	47d0      	blx	sl
 800ec44:	3001      	adds	r0, #1
 800ec46:	d0ad      	beq.n	800eba4 <_printf_i+0x160>
 800ec48:	6823      	ldr	r3, [r4, #0]
 800ec4a:	079b      	lsls	r3, r3, #30
 800ec4c:	d413      	bmi.n	800ec76 <_printf_i+0x232>
 800ec4e:	68e0      	ldr	r0, [r4, #12]
 800ec50:	9b03      	ldr	r3, [sp, #12]
 800ec52:	4298      	cmp	r0, r3
 800ec54:	bfb8      	it	lt
 800ec56:	4618      	movlt	r0, r3
 800ec58:	e7a6      	b.n	800eba8 <_printf_i+0x164>
 800ec5a:	2301      	movs	r3, #1
 800ec5c:	4632      	mov	r2, r6
 800ec5e:	4649      	mov	r1, r9
 800ec60:	4640      	mov	r0, r8
 800ec62:	47d0      	blx	sl
 800ec64:	3001      	adds	r0, #1
 800ec66:	d09d      	beq.n	800eba4 <_printf_i+0x160>
 800ec68:	3501      	adds	r5, #1
 800ec6a:	68e3      	ldr	r3, [r4, #12]
 800ec6c:	9903      	ldr	r1, [sp, #12]
 800ec6e:	1a5b      	subs	r3, r3, r1
 800ec70:	42ab      	cmp	r3, r5
 800ec72:	dcf2      	bgt.n	800ec5a <_printf_i+0x216>
 800ec74:	e7eb      	b.n	800ec4e <_printf_i+0x20a>
 800ec76:	2500      	movs	r5, #0
 800ec78:	f104 0619 	add.w	r6, r4, #25
 800ec7c:	e7f5      	b.n	800ec6a <_printf_i+0x226>
 800ec7e:	bf00      	nop
 800ec80:	080122b3 	.word	0x080122b3
 800ec84:	080122c4 	.word	0x080122c4

0800ec88 <std>:
 800ec88:	2300      	movs	r3, #0
 800ec8a:	b510      	push	{r4, lr}
 800ec8c:	4604      	mov	r4, r0
 800ec8e:	e9c0 3300 	strd	r3, r3, [r0]
 800ec92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec96:	6083      	str	r3, [r0, #8]
 800ec98:	8181      	strh	r1, [r0, #12]
 800ec9a:	6643      	str	r3, [r0, #100]	; 0x64
 800ec9c:	81c2      	strh	r2, [r0, #14]
 800ec9e:	6183      	str	r3, [r0, #24]
 800eca0:	4619      	mov	r1, r3
 800eca2:	2208      	movs	r2, #8
 800eca4:	305c      	adds	r0, #92	; 0x5c
 800eca6:	f000 f914 	bl	800eed2 <memset>
 800ecaa:	4b0d      	ldr	r3, [pc, #52]	; (800ece0 <std+0x58>)
 800ecac:	6263      	str	r3, [r4, #36]	; 0x24
 800ecae:	4b0d      	ldr	r3, [pc, #52]	; (800ece4 <std+0x5c>)
 800ecb0:	62a3      	str	r3, [r4, #40]	; 0x28
 800ecb2:	4b0d      	ldr	r3, [pc, #52]	; (800ece8 <std+0x60>)
 800ecb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ecb6:	4b0d      	ldr	r3, [pc, #52]	; (800ecec <std+0x64>)
 800ecb8:	6323      	str	r3, [r4, #48]	; 0x30
 800ecba:	4b0d      	ldr	r3, [pc, #52]	; (800ecf0 <std+0x68>)
 800ecbc:	6224      	str	r4, [r4, #32]
 800ecbe:	429c      	cmp	r4, r3
 800ecc0:	d006      	beq.n	800ecd0 <std+0x48>
 800ecc2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ecc6:	4294      	cmp	r4, r2
 800ecc8:	d002      	beq.n	800ecd0 <std+0x48>
 800ecca:	33d0      	adds	r3, #208	; 0xd0
 800eccc:	429c      	cmp	r4, r3
 800ecce:	d105      	bne.n	800ecdc <std+0x54>
 800ecd0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ecd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecd8:	f000 b98a 	b.w	800eff0 <__retarget_lock_init_recursive>
 800ecdc:	bd10      	pop	{r4, pc}
 800ecde:	bf00      	nop
 800ece0:	0800ee4d 	.word	0x0800ee4d
 800ece4:	0800ee6f 	.word	0x0800ee6f
 800ece8:	0800eea7 	.word	0x0800eea7
 800ecec:	0800eecb 	.word	0x0800eecb
 800ecf0:	200041bc 	.word	0x200041bc

0800ecf4 <stdio_exit_handler>:
 800ecf4:	4a02      	ldr	r2, [pc, #8]	; (800ed00 <stdio_exit_handler+0xc>)
 800ecf6:	4903      	ldr	r1, [pc, #12]	; (800ed04 <stdio_exit_handler+0x10>)
 800ecf8:	4803      	ldr	r0, [pc, #12]	; (800ed08 <stdio_exit_handler+0x14>)
 800ecfa:	f000 b869 	b.w	800edd0 <_fwalk_sglue>
 800ecfe:	bf00      	nop
 800ed00:	20000194 	.word	0x20000194
 800ed04:	080109c1 	.word	0x080109c1
 800ed08:	200001a0 	.word	0x200001a0

0800ed0c <cleanup_stdio>:
 800ed0c:	6841      	ldr	r1, [r0, #4]
 800ed0e:	4b0c      	ldr	r3, [pc, #48]	; (800ed40 <cleanup_stdio+0x34>)
 800ed10:	4299      	cmp	r1, r3
 800ed12:	b510      	push	{r4, lr}
 800ed14:	4604      	mov	r4, r0
 800ed16:	d001      	beq.n	800ed1c <cleanup_stdio+0x10>
 800ed18:	f001 fe52 	bl	80109c0 <_fflush_r>
 800ed1c:	68a1      	ldr	r1, [r4, #8]
 800ed1e:	4b09      	ldr	r3, [pc, #36]	; (800ed44 <cleanup_stdio+0x38>)
 800ed20:	4299      	cmp	r1, r3
 800ed22:	d002      	beq.n	800ed2a <cleanup_stdio+0x1e>
 800ed24:	4620      	mov	r0, r4
 800ed26:	f001 fe4b 	bl	80109c0 <_fflush_r>
 800ed2a:	68e1      	ldr	r1, [r4, #12]
 800ed2c:	4b06      	ldr	r3, [pc, #24]	; (800ed48 <cleanup_stdio+0x3c>)
 800ed2e:	4299      	cmp	r1, r3
 800ed30:	d004      	beq.n	800ed3c <cleanup_stdio+0x30>
 800ed32:	4620      	mov	r0, r4
 800ed34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed38:	f001 be42 	b.w	80109c0 <_fflush_r>
 800ed3c:	bd10      	pop	{r4, pc}
 800ed3e:	bf00      	nop
 800ed40:	200041bc 	.word	0x200041bc
 800ed44:	20004224 	.word	0x20004224
 800ed48:	2000428c 	.word	0x2000428c

0800ed4c <global_stdio_init.part.0>:
 800ed4c:	b510      	push	{r4, lr}
 800ed4e:	4b0b      	ldr	r3, [pc, #44]	; (800ed7c <global_stdio_init.part.0+0x30>)
 800ed50:	4c0b      	ldr	r4, [pc, #44]	; (800ed80 <global_stdio_init.part.0+0x34>)
 800ed52:	4a0c      	ldr	r2, [pc, #48]	; (800ed84 <global_stdio_init.part.0+0x38>)
 800ed54:	601a      	str	r2, [r3, #0]
 800ed56:	4620      	mov	r0, r4
 800ed58:	2200      	movs	r2, #0
 800ed5a:	2104      	movs	r1, #4
 800ed5c:	f7ff ff94 	bl	800ec88 <std>
 800ed60:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ed64:	2201      	movs	r2, #1
 800ed66:	2109      	movs	r1, #9
 800ed68:	f7ff ff8e 	bl	800ec88 <std>
 800ed6c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ed70:	2202      	movs	r2, #2
 800ed72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed76:	2112      	movs	r1, #18
 800ed78:	f7ff bf86 	b.w	800ec88 <std>
 800ed7c:	200042f4 	.word	0x200042f4
 800ed80:	200041bc 	.word	0x200041bc
 800ed84:	0800ecf5 	.word	0x0800ecf5

0800ed88 <__sfp_lock_acquire>:
 800ed88:	4801      	ldr	r0, [pc, #4]	; (800ed90 <__sfp_lock_acquire+0x8>)
 800ed8a:	f000 b932 	b.w	800eff2 <__retarget_lock_acquire_recursive>
 800ed8e:	bf00      	nop
 800ed90:	200042fd 	.word	0x200042fd

0800ed94 <__sfp_lock_release>:
 800ed94:	4801      	ldr	r0, [pc, #4]	; (800ed9c <__sfp_lock_release+0x8>)
 800ed96:	f000 b92d 	b.w	800eff4 <__retarget_lock_release_recursive>
 800ed9a:	bf00      	nop
 800ed9c:	200042fd 	.word	0x200042fd

0800eda0 <__sinit>:
 800eda0:	b510      	push	{r4, lr}
 800eda2:	4604      	mov	r4, r0
 800eda4:	f7ff fff0 	bl	800ed88 <__sfp_lock_acquire>
 800eda8:	6a23      	ldr	r3, [r4, #32]
 800edaa:	b11b      	cbz	r3, 800edb4 <__sinit+0x14>
 800edac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800edb0:	f7ff bff0 	b.w	800ed94 <__sfp_lock_release>
 800edb4:	4b04      	ldr	r3, [pc, #16]	; (800edc8 <__sinit+0x28>)
 800edb6:	6223      	str	r3, [r4, #32]
 800edb8:	4b04      	ldr	r3, [pc, #16]	; (800edcc <__sinit+0x2c>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d1f5      	bne.n	800edac <__sinit+0xc>
 800edc0:	f7ff ffc4 	bl	800ed4c <global_stdio_init.part.0>
 800edc4:	e7f2      	b.n	800edac <__sinit+0xc>
 800edc6:	bf00      	nop
 800edc8:	0800ed0d 	.word	0x0800ed0d
 800edcc:	200042f4 	.word	0x200042f4

0800edd0 <_fwalk_sglue>:
 800edd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edd4:	4607      	mov	r7, r0
 800edd6:	4688      	mov	r8, r1
 800edd8:	4614      	mov	r4, r2
 800edda:	2600      	movs	r6, #0
 800eddc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ede0:	f1b9 0901 	subs.w	r9, r9, #1
 800ede4:	d505      	bpl.n	800edf2 <_fwalk_sglue+0x22>
 800ede6:	6824      	ldr	r4, [r4, #0]
 800ede8:	2c00      	cmp	r4, #0
 800edea:	d1f7      	bne.n	800eddc <_fwalk_sglue+0xc>
 800edec:	4630      	mov	r0, r6
 800edee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edf2:	89ab      	ldrh	r3, [r5, #12]
 800edf4:	2b01      	cmp	r3, #1
 800edf6:	d907      	bls.n	800ee08 <_fwalk_sglue+0x38>
 800edf8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800edfc:	3301      	adds	r3, #1
 800edfe:	d003      	beq.n	800ee08 <_fwalk_sglue+0x38>
 800ee00:	4629      	mov	r1, r5
 800ee02:	4638      	mov	r0, r7
 800ee04:	47c0      	blx	r8
 800ee06:	4306      	orrs	r6, r0
 800ee08:	3568      	adds	r5, #104	; 0x68
 800ee0a:	e7e9      	b.n	800ede0 <_fwalk_sglue+0x10>

0800ee0c <siprintf>:
 800ee0c:	b40e      	push	{r1, r2, r3}
 800ee0e:	b500      	push	{lr}
 800ee10:	b09c      	sub	sp, #112	; 0x70
 800ee12:	ab1d      	add	r3, sp, #116	; 0x74
 800ee14:	9002      	str	r0, [sp, #8]
 800ee16:	9006      	str	r0, [sp, #24]
 800ee18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ee1c:	4809      	ldr	r0, [pc, #36]	; (800ee44 <siprintf+0x38>)
 800ee1e:	9107      	str	r1, [sp, #28]
 800ee20:	9104      	str	r1, [sp, #16]
 800ee22:	4909      	ldr	r1, [pc, #36]	; (800ee48 <siprintf+0x3c>)
 800ee24:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee28:	9105      	str	r1, [sp, #20]
 800ee2a:	6800      	ldr	r0, [r0, #0]
 800ee2c:	9301      	str	r3, [sp, #4]
 800ee2e:	a902      	add	r1, sp, #8
 800ee30:	f001 fc42 	bl	80106b8 <_svfiprintf_r>
 800ee34:	9b02      	ldr	r3, [sp, #8]
 800ee36:	2200      	movs	r2, #0
 800ee38:	701a      	strb	r2, [r3, #0]
 800ee3a:	b01c      	add	sp, #112	; 0x70
 800ee3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ee40:	b003      	add	sp, #12
 800ee42:	4770      	bx	lr
 800ee44:	200001ec 	.word	0x200001ec
 800ee48:	ffff0208 	.word	0xffff0208

0800ee4c <__sread>:
 800ee4c:	b510      	push	{r4, lr}
 800ee4e:	460c      	mov	r4, r1
 800ee50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee54:	f000 f87e 	bl	800ef54 <_read_r>
 800ee58:	2800      	cmp	r0, #0
 800ee5a:	bfab      	itete	ge
 800ee5c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ee5e:	89a3      	ldrhlt	r3, [r4, #12]
 800ee60:	181b      	addge	r3, r3, r0
 800ee62:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ee66:	bfac      	ite	ge
 800ee68:	6563      	strge	r3, [r4, #84]	; 0x54
 800ee6a:	81a3      	strhlt	r3, [r4, #12]
 800ee6c:	bd10      	pop	{r4, pc}

0800ee6e <__swrite>:
 800ee6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee72:	461f      	mov	r7, r3
 800ee74:	898b      	ldrh	r3, [r1, #12]
 800ee76:	05db      	lsls	r3, r3, #23
 800ee78:	4605      	mov	r5, r0
 800ee7a:	460c      	mov	r4, r1
 800ee7c:	4616      	mov	r6, r2
 800ee7e:	d505      	bpl.n	800ee8c <__swrite+0x1e>
 800ee80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee84:	2302      	movs	r3, #2
 800ee86:	2200      	movs	r2, #0
 800ee88:	f000 f852 	bl	800ef30 <_lseek_r>
 800ee8c:	89a3      	ldrh	r3, [r4, #12]
 800ee8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee92:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee96:	81a3      	strh	r3, [r4, #12]
 800ee98:	4632      	mov	r2, r6
 800ee9a:	463b      	mov	r3, r7
 800ee9c:	4628      	mov	r0, r5
 800ee9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eea2:	f000 b869 	b.w	800ef78 <_write_r>

0800eea6 <__sseek>:
 800eea6:	b510      	push	{r4, lr}
 800eea8:	460c      	mov	r4, r1
 800eeaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eeae:	f000 f83f 	bl	800ef30 <_lseek_r>
 800eeb2:	1c43      	adds	r3, r0, #1
 800eeb4:	89a3      	ldrh	r3, [r4, #12]
 800eeb6:	bf15      	itete	ne
 800eeb8:	6560      	strne	r0, [r4, #84]	; 0x54
 800eeba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800eebe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800eec2:	81a3      	strheq	r3, [r4, #12]
 800eec4:	bf18      	it	ne
 800eec6:	81a3      	strhne	r3, [r4, #12]
 800eec8:	bd10      	pop	{r4, pc}

0800eeca <__sclose>:
 800eeca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eece:	f000 b81f 	b.w	800ef10 <_close_r>

0800eed2 <memset>:
 800eed2:	4402      	add	r2, r0
 800eed4:	4603      	mov	r3, r0
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d100      	bne.n	800eedc <memset+0xa>
 800eeda:	4770      	bx	lr
 800eedc:	f803 1b01 	strb.w	r1, [r3], #1
 800eee0:	e7f9      	b.n	800eed6 <memset+0x4>

0800eee2 <strncpy>:
 800eee2:	b510      	push	{r4, lr}
 800eee4:	3901      	subs	r1, #1
 800eee6:	4603      	mov	r3, r0
 800eee8:	b132      	cbz	r2, 800eef8 <strncpy+0x16>
 800eeea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eeee:	f803 4b01 	strb.w	r4, [r3], #1
 800eef2:	3a01      	subs	r2, #1
 800eef4:	2c00      	cmp	r4, #0
 800eef6:	d1f7      	bne.n	800eee8 <strncpy+0x6>
 800eef8:	441a      	add	r2, r3
 800eefa:	2100      	movs	r1, #0
 800eefc:	4293      	cmp	r3, r2
 800eefe:	d100      	bne.n	800ef02 <strncpy+0x20>
 800ef00:	bd10      	pop	{r4, pc}
 800ef02:	f803 1b01 	strb.w	r1, [r3], #1
 800ef06:	e7f9      	b.n	800eefc <strncpy+0x1a>

0800ef08 <_localeconv_r>:
 800ef08:	4800      	ldr	r0, [pc, #0]	; (800ef0c <_localeconv_r+0x4>)
 800ef0a:	4770      	bx	lr
 800ef0c:	200002e0 	.word	0x200002e0

0800ef10 <_close_r>:
 800ef10:	b538      	push	{r3, r4, r5, lr}
 800ef12:	4d06      	ldr	r5, [pc, #24]	; (800ef2c <_close_r+0x1c>)
 800ef14:	2300      	movs	r3, #0
 800ef16:	4604      	mov	r4, r0
 800ef18:	4608      	mov	r0, r1
 800ef1a:	602b      	str	r3, [r5, #0]
 800ef1c:	f7f3 fc99 	bl	8002852 <_close>
 800ef20:	1c43      	adds	r3, r0, #1
 800ef22:	d102      	bne.n	800ef2a <_close_r+0x1a>
 800ef24:	682b      	ldr	r3, [r5, #0]
 800ef26:	b103      	cbz	r3, 800ef2a <_close_r+0x1a>
 800ef28:	6023      	str	r3, [r4, #0]
 800ef2a:	bd38      	pop	{r3, r4, r5, pc}
 800ef2c:	200042f8 	.word	0x200042f8

0800ef30 <_lseek_r>:
 800ef30:	b538      	push	{r3, r4, r5, lr}
 800ef32:	4d07      	ldr	r5, [pc, #28]	; (800ef50 <_lseek_r+0x20>)
 800ef34:	4604      	mov	r4, r0
 800ef36:	4608      	mov	r0, r1
 800ef38:	4611      	mov	r1, r2
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	602a      	str	r2, [r5, #0]
 800ef3e:	461a      	mov	r2, r3
 800ef40:	f7f3 fcae 	bl	80028a0 <_lseek>
 800ef44:	1c43      	adds	r3, r0, #1
 800ef46:	d102      	bne.n	800ef4e <_lseek_r+0x1e>
 800ef48:	682b      	ldr	r3, [r5, #0]
 800ef4a:	b103      	cbz	r3, 800ef4e <_lseek_r+0x1e>
 800ef4c:	6023      	str	r3, [r4, #0]
 800ef4e:	bd38      	pop	{r3, r4, r5, pc}
 800ef50:	200042f8 	.word	0x200042f8

0800ef54 <_read_r>:
 800ef54:	b538      	push	{r3, r4, r5, lr}
 800ef56:	4d07      	ldr	r5, [pc, #28]	; (800ef74 <_read_r+0x20>)
 800ef58:	4604      	mov	r4, r0
 800ef5a:	4608      	mov	r0, r1
 800ef5c:	4611      	mov	r1, r2
 800ef5e:	2200      	movs	r2, #0
 800ef60:	602a      	str	r2, [r5, #0]
 800ef62:	461a      	mov	r2, r3
 800ef64:	f7f3 fc3c 	bl	80027e0 <_read>
 800ef68:	1c43      	adds	r3, r0, #1
 800ef6a:	d102      	bne.n	800ef72 <_read_r+0x1e>
 800ef6c:	682b      	ldr	r3, [r5, #0]
 800ef6e:	b103      	cbz	r3, 800ef72 <_read_r+0x1e>
 800ef70:	6023      	str	r3, [r4, #0]
 800ef72:	bd38      	pop	{r3, r4, r5, pc}
 800ef74:	200042f8 	.word	0x200042f8

0800ef78 <_write_r>:
 800ef78:	b538      	push	{r3, r4, r5, lr}
 800ef7a:	4d07      	ldr	r5, [pc, #28]	; (800ef98 <_write_r+0x20>)
 800ef7c:	4604      	mov	r4, r0
 800ef7e:	4608      	mov	r0, r1
 800ef80:	4611      	mov	r1, r2
 800ef82:	2200      	movs	r2, #0
 800ef84:	602a      	str	r2, [r5, #0]
 800ef86:	461a      	mov	r2, r3
 800ef88:	f7f3 fc47 	bl	800281a <_write>
 800ef8c:	1c43      	adds	r3, r0, #1
 800ef8e:	d102      	bne.n	800ef96 <_write_r+0x1e>
 800ef90:	682b      	ldr	r3, [r5, #0]
 800ef92:	b103      	cbz	r3, 800ef96 <_write_r+0x1e>
 800ef94:	6023      	str	r3, [r4, #0]
 800ef96:	bd38      	pop	{r3, r4, r5, pc}
 800ef98:	200042f8 	.word	0x200042f8

0800ef9c <__errno>:
 800ef9c:	4b01      	ldr	r3, [pc, #4]	; (800efa4 <__errno+0x8>)
 800ef9e:	6818      	ldr	r0, [r3, #0]
 800efa0:	4770      	bx	lr
 800efa2:	bf00      	nop
 800efa4:	200001ec 	.word	0x200001ec

0800efa8 <__libc_init_array>:
 800efa8:	b570      	push	{r4, r5, r6, lr}
 800efaa:	4d0d      	ldr	r5, [pc, #52]	; (800efe0 <__libc_init_array+0x38>)
 800efac:	4c0d      	ldr	r4, [pc, #52]	; (800efe4 <__libc_init_array+0x3c>)
 800efae:	1b64      	subs	r4, r4, r5
 800efb0:	10a4      	asrs	r4, r4, #2
 800efb2:	2600      	movs	r6, #0
 800efb4:	42a6      	cmp	r6, r4
 800efb6:	d109      	bne.n	800efcc <__libc_init_array+0x24>
 800efb8:	4d0b      	ldr	r5, [pc, #44]	; (800efe8 <__libc_init_array+0x40>)
 800efba:	4c0c      	ldr	r4, [pc, #48]	; (800efec <__libc_init_array+0x44>)
 800efbc:	f002 ffd0 	bl	8011f60 <_init>
 800efc0:	1b64      	subs	r4, r4, r5
 800efc2:	10a4      	asrs	r4, r4, #2
 800efc4:	2600      	movs	r6, #0
 800efc6:	42a6      	cmp	r6, r4
 800efc8:	d105      	bne.n	800efd6 <__libc_init_array+0x2e>
 800efca:	bd70      	pop	{r4, r5, r6, pc}
 800efcc:	f855 3b04 	ldr.w	r3, [r5], #4
 800efd0:	4798      	blx	r3
 800efd2:	3601      	adds	r6, #1
 800efd4:	e7ee      	b.n	800efb4 <__libc_init_array+0xc>
 800efd6:	f855 3b04 	ldr.w	r3, [r5], #4
 800efda:	4798      	blx	r3
 800efdc:	3601      	adds	r6, #1
 800efde:	e7f2      	b.n	800efc6 <__libc_init_array+0x1e>
 800efe0:	08012548 	.word	0x08012548
 800efe4:	08012548 	.word	0x08012548
 800efe8:	08012548 	.word	0x08012548
 800efec:	0801254c 	.word	0x0801254c

0800eff0 <__retarget_lock_init_recursive>:
 800eff0:	4770      	bx	lr

0800eff2 <__retarget_lock_acquire_recursive>:
 800eff2:	4770      	bx	lr

0800eff4 <__retarget_lock_release_recursive>:
 800eff4:	4770      	bx	lr

0800eff6 <memcpy>:
 800eff6:	440a      	add	r2, r1
 800eff8:	4291      	cmp	r1, r2
 800effa:	f100 33ff 	add.w	r3, r0, #4294967295
 800effe:	d100      	bne.n	800f002 <memcpy+0xc>
 800f000:	4770      	bx	lr
 800f002:	b510      	push	{r4, lr}
 800f004:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f008:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f00c:	4291      	cmp	r1, r2
 800f00e:	d1f9      	bne.n	800f004 <memcpy+0xe>
 800f010:	bd10      	pop	{r4, pc}

0800f012 <quorem>:
 800f012:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f016:	6903      	ldr	r3, [r0, #16]
 800f018:	690c      	ldr	r4, [r1, #16]
 800f01a:	42a3      	cmp	r3, r4
 800f01c:	4607      	mov	r7, r0
 800f01e:	db7e      	blt.n	800f11e <quorem+0x10c>
 800f020:	3c01      	subs	r4, #1
 800f022:	f101 0814 	add.w	r8, r1, #20
 800f026:	f100 0514 	add.w	r5, r0, #20
 800f02a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f02e:	9301      	str	r3, [sp, #4]
 800f030:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f034:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f038:	3301      	adds	r3, #1
 800f03a:	429a      	cmp	r2, r3
 800f03c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f040:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f044:	fbb2 f6f3 	udiv	r6, r2, r3
 800f048:	d331      	bcc.n	800f0ae <quorem+0x9c>
 800f04a:	f04f 0e00 	mov.w	lr, #0
 800f04e:	4640      	mov	r0, r8
 800f050:	46ac      	mov	ip, r5
 800f052:	46f2      	mov	sl, lr
 800f054:	f850 2b04 	ldr.w	r2, [r0], #4
 800f058:	b293      	uxth	r3, r2
 800f05a:	fb06 e303 	mla	r3, r6, r3, lr
 800f05e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f062:	0c1a      	lsrs	r2, r3, #16
 800f064:	b29b      	uxth	r3, r3
 800f066:	ebaa 0303 	sub.w	r3, sl, r3
 800f06a:	f8dc a000 	ldr.w	sl, [ip]
 800f06e:	fa13 f38a 	uxtah	r3, r3, sl
 800f072:	fb06 220e 	mla	r2, r6, lr, r2
 800f076:	9300      	str	r3, [sp, #0]
 800f078:	9b00      	ldr	r3, [sp, #0]
 800f07a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f07e:	b292      	uxth	r2, r2
 800f080:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f084:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f088:	f8bd 3000 	ldrh.w	r3, [sp]
 800f08c:	4581      	cmp	r9, r0
 800f08e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f092:	f84c 3b04 	str.w	r3, [ip], #4
 800f096:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f09a:	d2db      	bcs.n	800f054 <quorem+0x42>
 800f09c:	f855 300b 	ldr.w	r3, [r5, fp]
 800f0a0:	b92b      	cbnz	r3, 800f0ae <quorem+0x9c>
 800f0a2:	9b01      	ldr	r3, [sp, #4]
 800f0a4:	3b04      	subs	r3, #4
 800f0a6:	429d      	cmp	r5, r3
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	d32c      	bcc.n	800f106 <quorem+0xf4>
 800f0ac:	613c      	str	r4, [r7, #16]
 800f0ae:	4638      	mov	r0, r7
 800f0b0:	f001 f9a8 	bl	8010404 <__mcmp>
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	db22      	blt.n	800f0fe <quorem+0xec>
 800f0b8:	3601      	adds	r6, #1
 800f0ba:	4629      	mov	r1, r5
 800f0bc:	2000      	movs	r0, #0
 800f0be:	f858 2b04 	ldr.w	r2, [r8], #4
 800f0c2:	f8d1 c000 	ldr.w	ip, [r1]
 800f0c6:	b293      	uxth	r3, r2
 800f0c8:	1ac3      	subs	r3, r0, r3
 800f0ca:	0c12      	lsrs	r2, r2, #16
 800f0cc:	fa13 f38c 	uxtah	r3, r3, ip
 800f0d0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f0d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f0d8:	b29b      	uxth	r3, r3
 800f0da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f0de:	45c1      	cmp	r9, r8
 800f0e0:	f841 3b04 	str.w	r3, [r1], #4
 800f0e4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f0e8:	d2e9      	bcs.n	800f0be <quorem+0xac>
 800f0ea:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f0ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f0f2:	b922      	cbnz	r2, 800f0fe <quorem+0xec>
 800f0f4:	3b04      	subs	r3, #4
 800f0f6:	429d      	cmp	r5, r3
 800f0f8:	461a      	mov	r2, r3
 800f0fa:	d30a      	bcc.n	800f112 <quorem+0x100>
 800f0fc:	613c      	str	r4, [r7, #16]
 800f0fe:	4630      	mov	r0, r6
 800f100:	b003      	add	sp, #12
 800f102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f106:	6812      	ldr	r2, [r2, #0]
 800f108:	3b04      	subs	r3, #4
 800f10a:	2a00      	cmp	r2, #0
 800f10c:	d1ce      	bne.n	800f0ac <quorem+0x9a>
 800f10e:	3c01      	subs	r4, #1
 800f110:	e7c9      	b.n	800f0a6 <quorem+0x94>
 800f112:	6812      	ldr	r2, [r2, #0]
 800f114:	3b04      	subs	r3, #4
 800f116:	2a00      	cmp	r2, #0
 800f118:	d1f0      	bne.n	800f0fc <quorem+0xea>
 800f11a:	3c01      	subs	r4, #1
 800f11c:	e7eb      	b.n	800f0f6 <quorem+0xe4>
 800f11e:	2000      	movs	r0, #0
 800f120:	e7ee      	b.n	800f100 <quorem+0xee>
 800f122:	0000      	movs	r0, r0
 800f124:	0000      	movs	r0, r0
	...

0800f128 <_dtoa_r>:
 800f128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f12c:	ed2d 8b04 	vpush	{d8-d9}
 800f130:	69c5      	ldr	r5, [r0, #28]
 800f132:	b093      	sub	sp, #76	; 0x4c
 800f134:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f138:	ec57 6b10 	vmov	r6, r7, d0
 800f13c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f140:	9107      	str	r1, [sp, #28]
 800f142:	4604      	mov	r4, r0
 800f144:	920a      	str	r2, [sp, #40]	; 0x28
 800f146:	930d      	str	r3, [sp, #52]	; 0x34
 800f148:	b975      	cbnz	r5, 800f168 <_dtoa_r+0x40>
 800f14a:	2010      	movs	r0, #16
 800f14c:	f000 fe2a 	bl	800fda4 <malloc>
 800f150:	4602      	mov	r2, r0
 800f152:	61e0      	str	r0, [r4, #28]
 800f154:	b920      	cbnz	r0, 800f160 <_dtoa_r+0x38>
 800f156:	4bae      	ldr	r3, [pc, #696]	; (800f410 <_dtoa_r+0x2e8>)
 800f158:	21ef      	movs	r1, #239	; 0xef
 800f15a:	48ae      	ldr	r0, [pc, #696]	; (800f414 <_dtoa_r+0x2ec>)
 800f15c:	f001 fc82 	bl	8010a64 <__assert_func>
 800f160:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f164:	6005      	str	r5, [r0, #0]
 800f166:	60c5      	str	r5, [r0, #12]
 800f168:	69e3      	ldr	r3, [r4, #28]
 800f16a:	6819      	ldr	r1, [r3, #0]
 800f16c:	b151      	cbz	r1, 800f184 <_dtoa_r+0x5c>
 800f16e:	685a      	ldr	r2, [r3, #4]
 800f170:	604a      	str	r2, [r1, #4]
 800f172:	2301      	movs	r3, #1
 800f174:	4093      	lsls	r3, r2
 800f176:	608b      	str	r3, [r1, #8]
 800f178:	4620      	mov	r0, r4
 800f17a:	f000 ff07 	bl	800ff8c <_Bfree>
 800f17e:	69e3      	ldr	r3, [r4, #28]
 800f180:	2200      	movs	r2, #0
 800f182:	601a      	str	r2, [r3, #0]
 800f184:	1e3b      	subs	r3, r7, #0
 800f186:	bfbb      	ittet	lt
 800f188:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f18c:	9303      	strlt	r3, [sp, #12]
 800f18e:	2300      	movge	r3, #0
 800f190:	2201      	movlt	r2, #1
 800f192:	bfac      	ite	ge
 800f194:	f8c8 3000 	strge.w	r3, [r8]
 800f198:	f8c8 2000 	strlt.w	r2, [r8]
 800f19c:	4b9e      	ldr	r3, [pc, #632]	; (800f418 <_dtoa_r+0x2f0>)
 800f19e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f1a2:	ea33 0308 	bics.w	r3, r3, r8
 800f1a6:	d11b      	bne.n	800f1e0 <_dtoa_r+0xb8>
 800f1a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f1aa:	f242 730f 	movw	r3, #9999	; 0x270f
 800f1ae:	6013      	str	r3, [r2, #0]
 800f1b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f1b4:	4333      	orrs	r3, r6
 800f1b6:	f000 8593 	beq.w	800fce0 <_dtoa_r+0xbb8>
 800f1ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1bc:	b963      	cbnz	r3, 800f1d8 <_dtoa_r+0xb0>
 800f1be:	4b97      	ldr	r3, [pc, #604]	; (800f41c <_dtoa_r+0x2f4>)
 800f1c0:	e027      	b.n	800f212 <_dtoa_r+0xea>
 800f1c2:	4b97      	ldr	r3, [pc, #604]	; (800f420 <_dtoa_r+0x2f8>)
 800f1c4:	9300      	str	r3, [sp, #0]
 800f1c6:	3308      	adds	r3, #8
 800f1c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f1ca:	6013      	str	r3, [r2, #0]
 800f1cc:	9800      	ldr	r0, [sp, #0]
 800f1ce:	b013      	add	sp, #76	; 0x4c
 800f1d0:	ecbd 8b04 	vpop	{d8-d9}
 800f1d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1d8:	4b90      	ldr	r3, [pc, #576]	; (800f41c <_dtoa_r+0x2f4>)
 800f1da:	9300      	str	r3, [sp, #0]
 800f1dc:	3303      	adds	r3, #3
 800f1de:	e7f3      	b.n	800f1c8 <_dtoa_r+0xa0>
 800f1e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f1e4:	2200      	movs	r2, #0
 800f1e6:	ec51 0b17 	vmov	r0, r1, d7
 800f1ea:	eeb0 8a47 	vmov.f32	s16, s14
 800f1ee:	eef0 8a67 	vmov.f32	s17, s15
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	f7f1 fca0 	bl	8000b38 <__aeabi_dcmpeq>
 800f1f8:	4681      	mov	r9, r0
 800f1fa:	b160      	cbz	r0, 800f216 <_dtoa_r+0xee>
 800f1fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f1fe:	2301      	movs	r3, #1
 800f200:	6013      	str	r3, [r2, #0]
 800f202:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f204:	2b00      	cmp	r3, #0
 800f206:	f000 8568 	beq.w	800fcda <_dtoa_r+0xbb2>
 800f20a:	4b86      	ldr	r3, [pc, #536]	; (800f424 <_dtoa_r+0x2fc>)
 800f20c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f20e:	6013      	str	r3, [r2, #0]
 800f210:	3b01      	subs	r3, #1
 800f212:	9300      	str	r3, [sp, #0]
 800f214:	e7da      	b.n	800f1cc <_dtoa_r+0xa4>
 800f216:	aa10      	add	r2, sp, #64	; 0x40
 800f218:	a911      	add	r1, sp, #68	; 0x44
 800f21a:	4620      	mov	r0, r4
 800f21c:	eeb0 0a48 	vmov.f32	s0, s16
 800f220:	eef0 0a68 	vmov.f32	s1, s17
 800f224:	f001 f994 	bl	8010550 <__d2b>
 800f228:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f22c:	4682      	mov	sl, r0
 800f22e:	2d00      	cmp	r5, #0
 800f230:	d07f      	beq.n	800f332 <_dtoa_r+0x20a>
 800f232:	ee18 3a90 	vmov	r3, s17
 800f236:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f23a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f23e:	ec51 0b18 	vmov	r0, r1, d8
 800f242:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f246:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f24a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f24e:	4619      	mov	r1, r3
 800f250:	2200      	movs	r2, #0
 800f252:	4b75      	ldr	r3, [pc, #468]	; (800f428 <_dtoa_r+0x300>)
 800f254:	f7f1 f850 	bl	80002f8 <__aeabi_dsub>
 800f258:	a367      	add	r3, pc, #412	; (adr r3, 800f3f8 <_dtoa_r+0x2d0>)
 800f25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f25e:	f7f1 fa03 	bl	8000668 <__aeabi_dmul>
 800f262:	a367      	add	r3, pc, #412	; (adr r3, 800f400 <_dtoa_r+0x2d8>)
 800f264:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f268:	f7f1 f848 	bl	80002fc <__adddf3>
 800f26c:	4606      	mov	r6, r0
 800f26e:	4628      	mov	r0, r5
 800f270:	460f      	mov	r7, r1
 800f272:	f7f1 f98f 	bl	8000594 <__aeabi_i2d>
 800f276:	a364      	add	r3, pc, #400	; (adr r3, 800f408 <_dtoa_r+0x2e0>)
 800f278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f27c:	f7f1 f9f4 	bl	8000668 <__aeabi_dmul>
 800f280:	4602      	mov	r2, r0
 800f282:	460b      	mov	r3, r1
 800f284:	4630      	mov	r0, r6
 800f286:	4639      	mov	r1, r7
 800f288:	f7f1 f838 	bl	80002fc <__adddf3>
 800f28c:	4606      	mov	r6, r0
 800f28e:	460f      	mov	r7, r1
 800f290:	f7f1 fc9a 	bl	8000bc8 <__aeabi_d2iz>
 800f294:	2200      	movs	r2, #0
 800f296:	4683      	mov	fp, r0
 800f298:	2300      	movs	r3, #0
 800f29a:	4630      	mov	r0, r6
 800f29c:	4639      	mov	r1, r7
 800f29e:	f7f1 fc55 	bl	8000b4c <__aeabi_dcmplt>
 800f2a2:	b148      	cbz	r0, 800f2b8 <_dtoa_r+0x190>
 800f2a4:	4658      	mov	r0, fp
 800f2a6:	f7f1 f975 	bl	8000594 <__aeabi_i2d>
 800f2aa:	4632      	mov	r2, r6
 800f2ac:	463b      	mov	r3, r7
 800f2ae:	f7f1 fc43 	bl	8000b38 <__aeabi_dcmpeq>
 800f2b2:	b908      	cbnz	r0, 800f2b8 <_dtoa_r+0x190>
 800f2b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f2b8:	f1bb 0f16 	cmp.w	fp, #22
 800f2bc:	d857      	bhi.n	800f36e <_dtoa_r+0x246>
 800f2be:	4b5b      	ldr	r3, [pc, #364]	; (800f42c <_dtoa_r+0x304>)
 800f2c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c8:	ec51 0b18 	vmov	r0, r1, d8
 800f2cc:	f7f1 fc3e 	bl	8000b4c <__aeabi_dcmplt>
 800f2d0:	2800      	cmp	r0, #0
 800f2d2:	d04e      	beq.n	800f372 <_dtoa_r+0x24a>
 800f2d4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f2d8:	2300      	movs	r3, #0
 800f2da:	930c      	str	r3, [sp, #48]	; 0x30
 800f2dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f2de:	1b5b      	subs	r3, r3, r5
 800f2e0:	1e5a      	subs	r2, r3, #1
 800f2e2:	bf45      	ittet	mi
 800f2e4:	f1c3 0301 	rsbmi	r3, r3, #1
 800f2e8:	9305      	strmi	r3, [sp, #20]
 800f2ea:	2300      	movpl	r3, #0
 800f2ec:	2300      	movmi	r3, #0
 800f2ee:	9206      	str	r2, [sp, #24]
 800f2f0:	bf54      	ite	pl
 800f2f2:	9305      	strpl	r3, [sp, #20]
 800f2f4:	9306      	strmi	r3, [sp, #24]
 800f2f6:	f1bb 0f00 	cmp.w	fp, #0
 800f2fa:	db3c      	blt.n	800f376 <_dtoa_r+0x24e>
 800f2fc:	9b06      	ldr	r3, [sp, #24]
 800f2fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f302:	445b      	add	r3, fp
 800f304:	9306      	str	r3, [sp, #24]
 800f306:	2300      	movs	r3, #0
 800f308:	9308      	str	r3, [sp, #32]
 800f30a:	9b07      	ldr	r3, [sp, #28]
 800f30c:	2b09      	cmp	r3, #9
 800f30e:	d868      	bhi.n	800f3e2 <_dtoa_r+0x2ba>
 800f310:	2b05      	cmp	r3, #5
 800f312:	bfc4      	itt	gt
 800f314:	3b04      	subgt	r3, #4
 800f316:	9307      	strgt	r3, [sp, #28]
 800f318:	9b07      	ldr	r3, [sp, #28]
 800f31a:	f1a3 0302 	sub.w	r3, r3, #2
 800f31e:	bfcc      	ite	gt
 800f320:	2500      	movgt	r5, #0
 800f322:	2501      	movle	r5, #1
 800f324:	2b03      	cmp	r3, #3
 800f326:	f200 8085 	bhi.w	800f434 <_dtoa_r+0x30c>
 800f32a:	e8df f003 	tbb	[pc, r3]
 800f32e:	3b2e      	.short	0x3b2e
 800f330:	5839      	.short	0x5839
 800f332:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f336:	441d      	add	r5, r3
 800f338:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f33c:	2b20      	cmp	r3, #32
 800f33e:	bfc1      	itttt	gt
 800f340:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f344:	fa08 f803 	lslgt.w	r8, r8, r3
 800f348:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f34c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f350:	bfd6      	itet	le
 800f352:	f1c3 0320 	rsble	r3, r3, #32
 800f356:	ea48 0003 	orrgt.w	r0, r8, r3
 800f35a:	fa06 f003 	lslle.w	r0, r6, r3
 800f35e:	f7f1 f909 	bl	8000574 <__aeabi_ui2d>
 800f362:	2201      	movs	r2, #1
 800f364:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f368:	3d01      	subs	r5, #1
 800f36a:	920e      	str	r2, [sp, #56]	; 0x38
 800f36c:	e76f      	b.n	800f24e <_dtoa_r+0x126>
 800f36e:	2301      	movs	r3, #1
 800f370:	e7b3      	b.n	800f2da <_dtoa_r+0x1b2>
 800f372:	900c      	str	r0, [sp, #48]	; 0x30
 800f374:	e7b2      	b.n	800f2dc <_dtoa_r+0x1b4>
 800f376:	9b05      	ldr	r3, [sp, #20]
 800f378:	eba3 030b 	sub.w	r3, r3, fp
 800f37c:	9305      	str	r3, [sp, #20]
 800f37e:	f1cb 0300 	rsb	r3, fp, #0
 800f382:	9308      	str	r3, [sp, #32]
 800f384:	2300      	movs	r3, #0
 800f386:	930b      	str	r3, [sp, #44]	; 0x2c
 800f388:	e7bf      	b.n	800f30a <_dtoa_r+0x1e2>
 800f38a:	2300      	movs	r3, #0
 800f38c:	9309      	str	r3, [sp, #36]	; 0x24
 800f38e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f390:	2b00      	cmp	r3, #0
 800f392:	dc52      	bgt.n	800f43a <_dtoa_r+0x312>
 800f394:	2301      	movs	r3, #1
 800f396:	9301      	str	r3, [sp, #4]
 800f398:	9304      	str	r3, [sp, #16]
 800f39a:	461a      	mov	r2, r3
 800f39c:	920a      	str	r2, [sp, #40]	; 0x28
 800f39e:	e00b      	b.n	800f3b8 <_dtoa_r+0x290>
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	e7f3      	b.n	800f38c <_dtoa_r+0x264>
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	9309      	str	r3, [sp, #36]	; 0x24
 800f3a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3aa:	445b      	add	r3, fp
 800f3ac:	9301      	str	r3, [sp, #4]
 800f3ae:	3301      	adds	r3, #1
 800f3b0:	2b01      	cmp	r3, #1
 800f3b2:	9304      	str	r3, [sp, #16]
 800f3b4:	bfb8      	it	lt
 800f3b6:	2301      	movlt	r3, #1
 800f3b8:	69e0      	ldr	r0, [r4, #28]
 800f3ba:	2100      	movs	r1, #0
 800f3bc:	2204      	movs	r2, #4
 800f3be:	f102 0614 	add.w	r6, r2, #20
 800f3c2:	429e      	cmp	r6, r3
 800f3c4:	d93d      	bls.n	800f442 <_dtoa_r+0x31a>
 800f3c6:	6041      	str	r1, [r0, #4]
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	f000 fd9f 	bl	800ff0c <_Balloc>
 800f3ce:	9000      	str	r0, [sp, #0]
 800f3d0:	2800      	cmp	r0, #0
 800f3d2:	d139      	bne.n	800f448 <_dtoa_r+0x320>
 800f3d4:	4b16      	ldr	r3, [pc, #88]	; (800f430 <_dtoa_r+0x308>)
 800f3d6:	4602      	mov	r2, r0
 800f3d8:	f240 11af 	movw	r1, #431	; 0x1af
 800f3dc:	e6bd      	b.n	800f15a <_dtoa_r+0x32>
 800f3de:	2301      	movs	r3, #1
 800f3e0:	e7e1      	b.n	800f3a6 <_dtoa_r+0x27e>
 800f3e2:	2501      	movs	r5, #1
 800f3e4:	2300      	movs	r3, #0
 800f3e6:	9307      	str	r3, [sp, #28]
 800f3e8:	9509      	str	r5, [sp, #36]	; 0x24
 800f3ea:	f04f 33ff 	mov.w	r3, #4294967295
 800f3ee:	9301      	str	r3, [sp, #4]
 800f3f0:	9304      	str	r3, [sp, #16]
 800f3f2:	2200      	movs	r2, #0
 800f3f4:	2312      	movs	r3, #18
 800f3f6:	e7d1      	b.n	800f39c <_dtoa_r+0x274>
 800f3f8:	636f4361 	.word	0x636f4361
 800f3fc:	3fd287a7 	.word	0x3fd287a7
 800f400:	8b60c8b3 	.word	0x8b60c8b3
 800f404:	3fc68a28 	.word	0x3fc68a28
 800f408:	509f79fb 	.word	0x509f79fb
 800f40c:	3fd34413 	.word	0x3fd34413
 800f410:	080122e2 	.word	0x080122e2
 800f414:	080122f9 	.word	0x080122f9
 800f418:	7ff00000 	.word	0x7ff00000
 800f41c:	080122de 	.word	0x080122de
 800f420:	080122d5 	.word	0x080122d5
 800f424:	080122b2 	.word	0x080122b2
 800f428:	3ff80000 	.word	0x3ff80000
 800f42c:	080123e8 	.word	0x080123e8
 800f430:	08012351 	.word	0x08012351
 800f434:	2301      	movs	r3, #1
 800f436:	9309      	str	r3, [sp, #36]	; 0x24
 800f438:	e7d7      	b.n	800f3ea <_dtoa_r+0x2c2>
 800f43a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f43c:	9301      	str	r3, [sp, #4]
 800f43e:	9304      	str	r3, [sp, #16]
 800f440:	e7ba      	b.n	800f3b8 <_dtoa_r+0x290>
 800f442:	3101      	adds	r1, #1
 800f444:	0052      	lsls	r2, r2, #1
 800f446:	e7ba      	b.n	800f3be <_dtoa_r+0x296>
 800f448:	69e3      	ldr	r3, [r4, #28]
 800f44a:	9a00      	ldr	r2, [sp, #0]
 800f44c:	601a      	str	r2, [r3, #0]
 800f44e:	9b04      	ldr	r3, [sp, #16]
 800f450:	2b0e      	cmp	r3, #14
 800f452:	f200 80a8 	bhi.w	800f5a6 <_dtoa_r+0x47e>
 800f456:	2d00      	cmp	r5, #0
 800f458:	f000 80a5 	beq.w	800f5a6 <_dtoa_r+0x47e>
 800f45c:	f1bb 0f00 	cmp.w	fp, #0
 800f460:	dd38      	ble.n	800f4d4 <_dtoa_r+0x3ac>
 800f462:	4bc0      	ldr	r3, [pc, #768]	; (800f764 <_dtoa_r+0x63c>)
 800f464:	f00b 020f 	and.w	r2, fp, #15
 800f468:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f46c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f470:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f474:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f478:	d019      	beq.n	800f4ae <_dtoa_r+0x386>
 800f47a:	4bbb      	ldr	r3, [pc, #748]	; (800f768 <_dtoa_r+0x640>)
 800f47c:	ec51 0b18 	vmov	r0, r1, d8
 800f480:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f484:	f7f1 fa1a 	bl	80008bc <__aeabi_ddiv>
 800f488:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f48c:	f008 080f 	and.w	r8, r8, #15
 800f490:	2503      	movs	r5, #3
 800f492:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f768 <_dtoa_r+0x640>
 800f496:	f1b8 0f00 	cmp.w	r8, #0
 800f49a:	d10a      	bne.n	800f4b2 <_dtoa_r+0x38a>
 800f49c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f4a0:	4632      	mov	r2, r6
 800f4a2:	463b      	mov	r3, r7
 800f4a4:	f7f1 fa0a 	bl	80008bc <__aeabi_ddiv>
 800f4a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4ac:	e02b      	b.n	800f506 <_dtoa_r+0x3de>
 800f4ae:	2502      	movs	r5, #2
 800f4b0:	e7ef      	b.n	800f492 <_dtoa_r+0x36a>
 800f4b2:	f018 0f01 	tst.w	r8, #1
 800f4b6:	d008      	beq.n	800f4ca <_dtoa_r+0x3a2>
 800f4b8:	4630      	mov	r0, r6
 800f4ba:	4639      	mov	r1, r7
 800f4bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f4c0:	f7f1 f8d2 	bl	8000668 <__aeabi_dmul>
 800f4c4:	3501      	adds	r5, #1
 800f4c6:	4606      	mov	r6, r0
 800f4c8:	460f      	mov	r7, r1
 800f4ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f4ce:	f109 0908 	add.w	r9, r9, #8
 800f4d2:	e7e0      	b.n	800f496 <_dtoa_r+0x36e>
 800f4d4:	f000 809f 	beq.w	800f616 <_dtoa_r+0x4ee>
 800f4d8:	f1cb 0600 	rsb	r6, fp, #0
 800f4dc:	4ba1      	ldr	r3, [pc, #644]	; (800f764 <_dtoa_r+0x63c>)
 800f4de:	4fa2      	ldr	r7, [pc, #648]	; (800f768 <_dtoa_r+0x640>)
 800f4e0:	f006 020f 	and.w	r2, r6, #15
 800f4e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f4e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4ec:	ec51 0b18 	vmov	r0, r1, d8
 800f4f0:	f7f1 f8ba 	bl	8000668 <__aeabi_dmul>
 800f4f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4f8:	1136      	asrs	r6, r6, #4
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	2502      	movs	r5, #2
 800f4fe:	2e00      	cmp	r6, #0
 800f500:	d17e      	bne.n	800f600 <_dtoa_r+0x4d8>
 800f502:	2b00      	cmp	r3, #0
 800f504:	d1d0      	bne.n	800f4a8 <_dtoa_r+0x380>
 800f506:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f508:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	f000 8084 	beq.w	800f61a <_dtoa_r+0x4f2>
 800f512:	4b96      	ldr	r3, [pc, #600]	; (800f76c <_dtoa_r+0x644>)
 800f514:	2200      	movs	r2, #0
 800f516:	4640      	mov	r0, r8
 800f518:	4649      	mov	r1, r9
 800f51a:	f7f1 fb17 	bl	8000b4c <__aeabi_dcmplt>
 800f51e:	2800      	cmp	r0, #0
 800f520:	d07b      	beq.n	800f61a <_dtoa_r+0x4f2>
 800f522:	9b04      	ldr	r3, [sp, #16]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d078      	beq.n	800f61a <_dtoa_r+0x4f2>
 800f528:	9b01      	ldr	r3, [sp, #4]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	dd39      	ble.n	800f5a2 <_dtoa_r+0x47a>
 800f52e:	4b90      	ldr	r3, [pc, #576]	; (800f770 <_dtoa_r+0x648>)
 800f530:	2200      	movs	r2, #0
 800f532:	4640      	mov	r0, r8
 800f534:	4649      	mov	r1, r9
 800f536:	f7f1 f897 	bl	8000668 <__aeabi_dmul>
 800f53a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f53e:	9e01      	ldr	r6, [sp, #4]
 800f540:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f544:	3501      	adds	r5, #1
 800f546:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f54a:	4628      	mov	r0, r5
 800f54c:	f7f1 f822 	bl	8000594 <__aeabi_i2d>
 800f550:	4642      	mov	r2, r8
 800f552:	464b      	mov	r3, r9
 800f554:	f7f1 f888 	bl	8000668 <__aeabi_dmul>
 800f558:	4b86      	ldr	r3, [pc, #536]	; (800f774 <_dtoa_r+0x64c>)
 800f55a:	2200      	movs	r2, #0
 800f55c:	f7f0 fece 	bl	80002fc <__adddf3>
 800f560:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f564:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f568:	9303      	str	r3, [sp, #12]
 800f56a:	2e00      	cmp	r6, #0
 800f56c:	d158      	bne.n	800f620 <_dtoa_r+0x4f8>
 800f56e:	4b82      	ldr	r3, [pc, #520]	; (800f778 <_dtoa_r+0x650>)
 800f570:	2200      	movs	r2, #0
 800f572:	4640      	mov	r0, r8
 800f574:	4649      	mov	r1, r9
 800f576:	f7f0 febf 	bl	80002f8 <__aeabi_dsub>
 800f57a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f57e:	4680      	mov	r8, r0
 800f580:	4689      	mov	r9, r1
 800f582:	f7f1 fb01 	bl	8000b88 <__aeabi_dcmpgt>
 800f586:	2800      	cmp	r0, #0
 800f588:	f040 8296 	bne.w	800fab8 <_dtoa_r+0x990>
 800f58c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f590:	4640      	mov	r0, r8
 800f592:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f596:	4649      	mov	r1, r9
 800f598:	f7f1 fad8 	bl	8000b4c <__aeabi_dcmplt>
 800f59c:	2800      	cmp	r0, #0
 800f59e:	f040 8289 	bne.w	800fab4 <_dtoa_r+0x98c>
 800f5a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f5a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	f2c0 814e 	blt.w	800f84a <_dtoa_r+0x722>
 800f5ae:	f1bb 0f0e 	cmp.w	fp, #14
 800f5b2:	f300 814a 	bgt.w	800f84a <_dtoa_r+0x722>
 800f5b6:	4b6b      	ldr	r3, [pc, #428]	; (800f764 <_dtoa_r+0x63c>)
 800f5b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f5bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f5c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	f280 80dc 	bge.w	800f780 <_dtoa_r+0x658>
 800f5c8:	9b04      	ldr	r3, [sp, #16]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	f300 80d8 	bgt.w	800f780 <_dtoa_r+0x658>
 800f5d0:	f040 826f 	bne.w	800fab2 <_dtoa_r+0x98a>
 800f5d4:	4b68      	ldr	r3, [pc, #416]	; (800f778 <_dtoa_r+0x650>)
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	4640      	mov	r0, r8
 800f5da:	4649      	mov	r1, r9
 800f5dc:	f7f1 f844 	bl	8000668 <__aeabi_dmul>
 800f5e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f5e4:	f7f1 fac6 	bl	8000b74 <__aeabi_dcmpge>
 800f5e8:	9e04      	ldr	r6, [sp, #16]
 800f5ea:	4637      	mov	r7, r6
 800f5ec:	2800      	cmp	r0, #0
 800f5ee:	f040 8245 	bne.w	800fa7c <_dtoa_r+0x954>
 800f5f2:	9d00      	ldr	r5, [sp, #0]
 800f5f4:	2331      	movs	r3, #49	; 0x31
 800f5f6:	f805 3b01 	strb.w	r3, [r5], #1
 800f5fa:	f10b 0b01 	add.w	fp, fp, #1
 800f5fe:	e241      	b.n	800fa84 <_dtoa_r+0x95c>
 800f600:	07f2      	lsls	r2, r6, #31
 800f602:	d505      	bpl.n	800f610 <_dtoa_r+0x4e8>
 800f604:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f608:	f7f1 f82e 	bl	8000668 <__aeabi_dmul>
 800f60c:	3501      	adds	r5, #1
 800f60e:	2301      	movs	r3, #1
 800f610:	1076      	asrs	r6, r6, #1
 800f612:	3708      	adds	r7, #8
 800f614:	e773      	b.n	800f4fe <_dtoa_r+0x3d6>
 800f616:	2502      	movs	r5, #2
 800f618:	e775      	b.n	800f506 <_dtoa_r+0x3de>
 800f61a:	9e04      	ldr	r6, [sp, #16]
 800f61c:	465f      	mov	r7, fp
 800f61e:	e792      	b.n	800f546 <_dtoa_r+0x41e>
 800f620:	9900      	ldr	r1, [sp, #0]
 800f622:	4b50      	ldr	r3, [pc, #320]	; (800f764 <_dtoa_r+0x63c>)
 800f624:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f628:	4431      	add	r1, r6
 800f62a:	9102      	str	r1, [sp, #8]
 800f62c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f62e:	eeb0 9a47 	vmov.f32	s18, s14
 800f632:	eef0 9a67 	vmov.f32	s19, s15
 800f636:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f63a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f63e:	2900      	cmp	r1, #0
 800f640:	d044      	beq.n	800f6cc <_dtoa_r+0x5a4>
 800f642:	494e      	ldr	r1, [pc, #312]	; (800f77c <_dtoa_r+0x654>)
 800f644:	2000      	movs	r0, #0
 800f646:	f7f1 f939 	bl	80008bc <__aeabi_ddiv>
 800f64a:	ec53 2b19 	vmov	r2, r3, d9
 800f64e:	f7f0 fe53 	bl	80002f8 <__aeabi_dsub>
 800f652:	9d00      	ldr	r5, [sp, #0]
 800f654:	ec41 0b19 	vmov	d9, r0, r1
 800f658:	4649      	mov	r1, r9
 800f65a:	4640      	mov	r0, r8
 800f65c:	f7f1 fab4 	bl	8000bc8 <__aeabi_d2iz>
 800f660:	4606      	mov	r6, r0
 800f662:	f7f0 ff97 	bl	8000594 <__aeabi_i2d>
 800f666:	4602      	mov	r2, r0
 800f668:	460b      	mov	r3, r1
 800f66a:	4640      	mov	r0, r8
 800f66c:	4649      	mov	r1, r9
 800f66e:	f7f0 fe43 	bl	80002f8 <__aeabi_dsub>
 800f672:	3630      	adds	r6, #48	; 0x30
 800f674:	f805 6b01 	strb.w	r6, [r5], #1
 800f678:	ec53 2b19 	vmov	r2, r3, d9
 800f67c:	4680      	mov	r8, r0
 800f67e:	4689      	mov	r9, r1
 800f680:	f7f1 fa64 	bl	8000b4c <__aeabi_dcmplt>
 800f684:	2800      	cmp	r0, #0
 800f686:	d164      	bne.n	800f752 <_dtoa_r+0x62a>
 800f688:	4642      	mov	r2, r8
 800f68a:	464b      	mov	r3, r9
 800f68c:	4937      	ldr	r1, [pc, #220]	; (800f76c <_dtoa_r+0x644>)
 800f68e:	2000      	movs	r0, #0
 800f690:	f7f0 fe32 	bl	80002f8 <__aeabi_dsub>
 800f694:	ec53 2b19 	vmov	r2, r3, d9
 800f698:	f7f1 fa58 	bl	8000b4c <__aeabi_dcmplt>
 800f69c:	2800      	cmp	r0, #0
 800f69e:	f040 80b6 	bne.w	800f80e <_dtoa_r+0x6e6>
 800f6a2:	9b02      	ldr	r3, [sp, #8]
 800f6a4:	429d      	cmp	r5, r3
 800f6a6:	f43f af7c 	beq.w	800f5a2 <_dtoa_r+0x47a>
 800f6aa:	4b31      	ldr	r3, [pc, #196]	; (800f770 <_dtoa_r+0x648>)
 800f6ac:	ec51 0b19 	vmov	r0, r1, d9
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	f7f0 ffd9 	bl	8000668 <__aeabi_dmul>
 800f6b6:	4b2e      	ldr	r3, [pc, #184]	; (800f770 <_dtoa_r+0x648>)
 800f6b8:	ec41 0b19 	vmov	d9, r0, r1
 800f6bc:	2200      	movs	r2, #0
 800f6be:	4640      	mov	r0, r8
 800f6c0:	4649      	mov	r1, r9
 800f6c2:	f7f0 ffd1 	bl	8000668 <__aeabi_dmul>
 800f6c6:	4680      	mov	r8, r0
 800f6c8:	4689      	mov	r9, r1
 800f6ca:	e7c5      	b.n	800f658 <_dtoa_r+0x530>
 800f6cc:	ec51 0b17 	vmov	r0, r1, d7
 800f6d0:	f7f0 ffca 	bl	8000668 <__aeabi_dmul>
 800f6d4:	9b02      	ldr	r3, [sp, #8]
 800f6d6:	9d00      	ldr	r5, [sp, #0]
 800f6d8:	930f      	str	r3, [sp, #60]	; 0x3c
 800f6da:	ec41 0b19 	vmov	d9, r0, r1
 800f6de:	4649      	mov	r1, r9
 800f6e0:	4640      	mov	r0, r8
 800f6e2:	f7f1 fa71 	bl	8000bc8 <__aeabi_d2iz>
 800f6e6:	4606      	mov	r6, r0
 800f6e8:	f7f0 ff54 	bl	8000594 <__aeabi_i2d>
 800f6ec:	3630      	adds	r6, #48	; 0x30
 800f6ee:	4602      	mov	r2, r0
 800f6f0:	460b      	mov	r3, r1
 800f6f2:	4640      	mov	r0, r8
 800f6f4:	4649      	mov	r1, r9
 800f6f6:	f7f0 fdff 	bl	80002f8 <__aeabi_dsub>
 800f6fa:	f805 6b01 	strb.w	r6, [r5], #1
 800f6fe:	9b02      	ldr	r3, [sp, #8]
 800f700:	429d      	cmp	r5, r3
 800f702:	4680      	mov	r8, r0
 800f704:	4689      	mov	r9, r1
 800f706:	f04f 0200 	mov.w	r2, #0
 800f70a:	d124      	bne.n	800f756 <_dtoa_r+0x62e>
 800f70c:	4b1b      	ldr	r3, [pc, #108]	; (800f77c <_dtoa_r+0x654>)
 800f70e:	ec51 0b19 	vmov	r0, r1, d9
 800f712:	f7f0 fdf3 	bl	80002fc <__adddf3>
 800f716:	4602      	mov	r2, r0
 800f718:	460b      	mov	r3, r1
 800f71a:	4640      	mov	r0, r8
 800f71c:	4649      	mov	r1, r9
 800f71e:	f7f1 fa33 	bl	8000b88 <__aeabi_dcmpgt>
 800f722:	2800      	cmp	r0, #0
 800f724:	d173      	bne.n	800f80e <_dtoa_r+0x6e6>
 800f726:	ec53 2b19 	vmov	r2, r3, d9
 800f72a:	4914      	ldr	r1, [pc, #80]	; (800f77c <_dtoa_r+0x654>)
 800f72c:	2000      	movs	r0, #0
 800f72e:	f7f0 fde3 	bl	80002f8 <__aeabi_dsub>
 800f732:	4602      	mov	r2, r0
 800f734:	460b      	mov	r3, r1
 800f736:	4640      	mov	r0, r8
 800f738:	4649      	mov	r1, r9
 800f73a:	f7f1 fa07 	bl	8000b4c <__aeabi_dcmplt>
 800f73e:	2800      	cmp	r0, #0
 800f740:	f43f af2f 	beq.w	800f5a2 <_dtoa_r+0x47a>
 800f744:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f746:	1e6b      	subs	r3, r5, #1
 800f748:	930f      	str	r3, [sp, #60]	; 0x3c
 800f74a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f74e:	2b30      	cmp	r3, #48	; 0x30
 800f750:	d0f8      	beq.n	800f744 <_dtoa_r+0x61c>
 800f752:	46bb      	mov	fp, r7
 800f754:	e04a      	b.n	800f7ec <_dtoa_r+0x6c4>
 800f756:	4b06      	ldr	r3, [pc, #24]	; (800f770 <_dtoa_r+0x648>)
 800f758:	f7f0 ff86 	bl	8000668 <__aeabi_dmul>
 800f75c:	4680      	mov	r8, r0
 800f75e:	4689      	mov	r9, r1
 800f760:	e7bd      	b.n	800f6de <_dtoa_r+0x5b6>
 800f762:	bf00      	nop
 800f764:	080123e8 	.word	0x080123e8
 800f768:	080123c0 	.word	0x080123c0
 800f76c:	3ff00000 	.word	0x3ff00000
 800f770:	40240000 	.word	0x40240000
 800f774:	401c0000 	.word	0x401c0000
 800f778:	40140000 	.word	0x40140000
 800f77c:	3fe00000 	.word	0x3fe00000
 800f780:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f784:	9d00      	ldr	r5, [sp, #0]
 800f786:	4642      	mov	r2, r8
 800f788:	464b      	mov	r3, r9
 800f78a:	4630      	mov	r0, r6
 800f78c:	4639      	mov	r1, r7
 800f78e:	f7f1 f895 	bl	80008bc <__aeabi_ddiv>
 800f792:	f7f1 fa19 	bl	8000bc8 <__aeabi_d2iz>
 800f796:	9001      	str	r0, [sp, #4]
 800f798:	f7f0 fefc 	bl	8000594 <__aeabi_i2d>
 800f79c:	4642      	mov	r2, r8
 800f79e:	464b      	mov	r3, r9
 800f7a0:	f7f0 ff62 	bl	8000668 <__aeabi_dmul>
 800f7a4:	4602      	mov	r2, r0
 800f7a6:	460b      	mov	r3, r1
 800f7a8:	4630      	mov	r0, r6
 800f7aa:	4639      	mov	r1, r7
 800f7ac:	f7f0 fda4 	bl	80002f8 <__aeabi_dsub>
 800f7b0:	9e01      	ldr	r6, [sp, #4]
 800f7b2:	9f04      	ldr	r7, [sp, #16]
 800f7b4:	3630      	adds	r6, #48	; 0x30
 800f7b6:	f805 6b01 	strb.w	r6, [r5], #1
 800f7ba:	9e00      	ldr	r6, [sp, #0]
 800f7bc:	1bae      	subs	r6, r5, r6
 800f7be:	42b7      	cmp	r7, r6
 800f7c0:	4602      	mov	r2, r0
 800f7c2:	460b      	mov	r3, r1
 800f7c4:	d134      	bne.n	800f830 <_dtoa_r+0x708>
 800f7c6:	f7f0 fd99 	bl	80002fc <__adddf3>
 800f7ca:	4642      	mov	r2, r8
 800f7cc:	464b      	mov	r3, r9
 800f7ce:	4606      	mov	r6, r0
 800f7d0:	460f      	mov	r7, r1
 800f7d2:	f7f1 f9d9 	bl	8000b88 <__aeabi_dcmpgt>
 800f7d6:	b9c8      	cbnz	r0, 800f80c <_dtoa_r+0x6e4>
 800f7d8:	4642      	mov	r2, r8
 800f7da:	464b      	mov	r3, r9
 800f7dc:	4630      	mov	r0, r6
 800f7de:	4639      	mov	r1, r7
 800f7e0:	f7f1 f9aa 	bl	8000b38 <__aeabi_dcmpeq>
 800f7e4:	b110      	cbz	r0, 800f7ec <_dtoa_r+0x6c4>
 800f7e6:	9b01      	ldr	r3, [sp, #4]
 800f7e8:	07db      	lsls	r3, r3, #31
 800f7ea:	d40f      	bmi.n	800f80c <_dtoa_r+0x6e4>
 800f7ec:	4651      	mov	r1, sl
 800f7ee:	4620      	mov	r0, r4
 800f7f0:	f000 fbcc 	bl	800ff8c <_Bfree>
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f7f8:	702b      	strb	r3, [r5, #0]
 800f7fa:	f10b 0301 	add.w	r3, fp, #1
 800f7fe:	6013      	str	r3, [r2, #0]
 800f800:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f802:	2b00      	cmp	r3, #0
 800f804:	f43f ace2 	beq.w	800f1cc <_dtoa_r+0xa4>
 800f808:	601d      	str	r5, [r3, #0]
 800f80a:	e4df      	b.n	800f1cc <_dtoa_r+0xa4>
 800f80c:	465f      	mov	r7, fp
 800f80e:	462b      	mov	r3, r5
 800f810:	461d      	mov	r5, r3
 800f812:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f816:	2a39      	cmp	r2, #57	; 0x39
 800f818:	d106      	bne.n	800f828 <_dtoa_r+0x700>
 800f81a:	9a00      	ldr	r2, [sp, #0]
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d1f7      	bne.n	800f810 <_dtoa_r+0x6e8>
 800f820:	9900      	ldr	r1, [sp, #0]
 800f822:	2230      	movs	r2, #48	; 0x30
 800f824:	3701      	adds	r7, #1
 800f826:	700a      	strb	r2, [r1, #0]
 800f828:	781a      	ldrb	r2, [r3, #0]
 800f82a:	3201      	adds	r2, #1
 800f82c:	701a      	strb	r2, [r3, #0]
 800f82e:	e790      	b.n	800f752 <_dtoa_r+0x62a>
 800f830:	4ba3      	ldr	r3, [pc, #652]	; (800fac0 <_dtoa_r+0x998>)
 800f832:	2200      	movs	r2, #0
 800f834:	f7f0 ff18 	bl	8000668 <__aeabi_dmul>
 800f838:	2200      	movs	r2, #0
 800f83a:	2300      	movs	r3, #0
 800f83c:	4606      	mov	r6, r0
 800f83e:	460f      	mov	r7, r1
 800f840:	f7f1 f97a 	bl	8000b38 <__aeabi_dcmpeq>
 800f844:	2800      	cmp	r0, #0
 800f846:	d09e      	beq.n	800f786 <_dtoa_r+0x65e>
 800f848:	e7d0      	b.n	800f7ec <_dtoa_r+0x6c4>
 800f84a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f84c:	2a00      	cmp	r2, #0
 800f84e:	f000 80ca 	beq.w	800f9e6 <_dtoa_r+0x8be>
 800f852:	9a07      	ldr	r2, [sp, #28]
 800f854:	2a01      	cmp	r2, #1
 800f856:	f300 80ad 	bgt.w	800f9b4 <_dtoa_r+0x88c>
 800f85a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f85c:	2a00      	cmp	r2, #0
 800f85e:	f000 80a5 	beq.w	800f9ac <_dtoa_r+0x884>
 800f862:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f866:	9e08      	ldr	r6, [sp, #32]
 800f868:	9d05      	ldr	r5, [sp, #20]
 800f86a:	9a05      	ldr	r2, [sp, #20]
 800f86c:	441a      	add	r2, r3
 800f86e:	9205      	str	r2, [sp, #20]
 800f870:	9a06      	ldr	r2, [sp, #24]
 800f872:	2101      	movs	r1, #1
 800f874:	441a      	add	r2, r3
 800f876:	4620      	mov	r0, r4
 800f878:	9206      	str	r2, [sp, #24]
 800f87a:	f000 fc3d 	bl	80100f8 <__i2b>
 800f87e:	4607      	mov	r7, r0
 800f880:	b165      	cbz	r5, 800f89c <_dtoa_r+0x774>
 800f882:	9b06      	ldr	r3, [sp, #24]
 800f884:	2b00      	cmp	r3, #0
 800f886:	dd09      	ble.n	800f89c <_dtoa_r+0x774>
 800f888:	42ab      	cmp	r3, r5
 800f88a:	9a05      	ldr	r2, [sp, #20]
 800f88c:	bfa8      	it	ge
 800f88e:	462b      	movge	r3, r5
 800f890:	1ad2      	subs	r2, r2, r3
 800f892:	9205      	str	r2, [sp, #20]
 800f894:	9a06      	ldr	r2, [sp, #24]
 800f896:	1aed      	subs	r5, r5, r3
 800f898:	1ad3      	subs	r3, r2, r3
 800f89a:	9306      	str	r3, [sp, #24]
 800f89c:	9b08      	ldr	r3, [sp, #32]
 800f89e:	b1f3      	cbz	r3, 800f8de <_dtoa_r+0x7b6>
 800f8a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	f000 80a3 	beq.w	800f9ee <_dtoa_r+0x8c6>
 800f8a8:	2e00      	cmp	r6, #0
 800f8aa:	dd10      	ble.n	800f8ce <_dtoa_r+0x7a6>
 800f8ac:	4639      	mov	r1, r7
 800f8ae:	4632      	mov	r2, r6
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	f000 fce1 	bl	8010278 <__pow5mult>
 800f8b6:	4652      	mov	r2, sl
 800f8b8:	4601      	mov	r1, r0
 800f8ba:	4607      	mov	r7, r0
 800f8bc:	4620      	mov	r0, r4
 800f8be:	f000 fc31 	bl	8010124 <__multiply>
 800f8c2:	4651      	mov	r1, sl
 800f8c4:	4680      	mov	r8, r0
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	f000 fb60 	bl	800ff8c <_Bfree>
 800f8cc:	46c2      	mov	sl, r8
 800f8ce:	9b08      	ldr	r3, [sp, #32]
 800f8d0:	1b9a      	subs	r2, r3, r6
 800f8d2:	d004      	beq.n	800f8de <_dtoa_r+0x7b6>
 800f8d4:	4651      	mov	r1, sl
 800f8d6:	4620      	mov	r0, r4
 800f8d8:	f000 fcce 	bl	8010278 <__pow5mult>
 800f8dc:	4682      	mov	sl, r0
 800f8de:	2101      	movs	r1, #1
 800f8e0:	4620      	mov	r0, r4
 800f8e2:	f000 fc09 	bl	80100f8 <__i2b>
 800f8e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	4606      	mov	r6, r0
 800f8ec:	f340 8081 	ble.w	800f9f2 <_dtoa_r+0x8ca>
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	4601      	mov	r1, r0
 800f8f4:	4620      	mov	r0, r4
 800f8f6:	f000 fcbf 	bl	8010278 <__pow5mult>
 800f8fa:	9b07      	ldr	r3, [sp, #28]
 800f8fc:	2b01      	cmp	r3, #1
 800f8fe:	4606      	mov	r6, r0
 800f900:	dd7a      	ble.n	800f9f8 <_dtoa_r+0x8d0>
 800f902:	f04f 0800 	mov.w	r8, #0
 800f906:	6933      	ldr	r3, [r6, #16]
 800f908:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f90c:	6918      	ldr	r0, [r3, #16]
 800f90e:	f000 fba5 	bl	801005c <__hi0bits>
 800f912:	f1c0 0020 	rsb	r0, r0, #32
 800f916:	9b06      	ldr	r3, [sp, #24]
 800f918:	4418      	add	r0, r3
 800f91a:	f010 001f 	ands.w	r0, r0, #31
 800f91e:	f000 8094 	beq.w	800fa4a <_dtoa_r+0x922>
 800f922:	f1c0 0320 	rsb	r3, r0, #32
 800f926:	2b04      	cmp	r3, #4
 800f928:	f340 8085 	ble.w	800fa36 <_dtoa_r+0x90e>
 800f92c:	9b05      	ldr	r3, [sp, #20]
 800f92e:	f1c0 001c 	rsb	r0, r0, #28
 800f932:	4403      	add	r3, r0
 800f934:	9305      	str	r3, [sp, #20]
 800f936:	9b06      	ldr	r3, [sp, #24]
 800f938:	4403      	add	r3, r0
 800f93a:	4405      	add	r5, r0
 800f93c:	9306      	str	r3, [sp, #24]
 800f93e:	9b05      	ldr	r3, [sp, #20]
 800f940:	2b00      	cmp	r3, #0
 800f942:	dd05      	ble.n	800f950 <_dtoa_r+0x828>
 800f944:	4651      	mov	r1, sl
 800f946:	461a      	mov	r2, r3
 800f948:	4620      	mov	r0, r4
 800f94a:	f000 fcef 	bl	801032c <__lshift>
 800f94e:	4682      	mov	sl, r0
 800f950:	9b06      	ldr	r3, [sp, #24]
 800f952:	2b00      	cmp	r3, #0
 800f954:	dd05      	ble.n	800f962 <_dtoa_r+0x83a>
 800f956:	4631      	mov	r1, r6
 800f958:	461a      	mov	r2, r3
 800f95a:	4620      	mov	r0, r4
 800f95c:	f000 fce6 	bl	801032c <__lshift>
 800f960:	4606      	mov	r6, r0
 800f962:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f964:	2b00      	cmp	r3, #0
 800f966:	d072      	beq.n	800fa4e <_dtoa_r+0x926>
 800f968:	4631      	mov	r1, r6
 800f96a:	4650      	mov	r0, sl
 800f96c:	f000 fd4a 	bl	8010404 <__mcmp>
 800f970:	2800      	cmp	r0, #0
 800f972:	da6c      	bge.n	800fa4e <_dtoa_r+0x926>
 800f974:	2300      	movs	r3, #0
 800f976:	4651      	mov	r1, sl
 800f978:	220a      	movs	r2, #10
 800f97a:	4620      	mov	r0, r4
 800f97c:	f000 fb28 	bl	800ffd0 <__multadd>
 800f980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f982:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f986:	4682      	mov	sl, r0
 800f988:	2b00      	cmp	r3, #0
 800f98a:	f000 81b0 	beq.w	800fcee <_dtoa_r+0xbc6>
 800f98e:	2300      	movs	r3, #0
 800f990:	4639      	mov	r1, r7
 800f992:	220a      	movs	r2, #10
 800f994:	4620      	mov	r0, r4
 800f996:	f000 fb1b 	bl	800ffd0 <__multadd>
 800f99a:	9b01      	ldr	r3, [sp, #4]
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	4607      	mov	r7, r0
 800f9a0:	f300 8096 	bgt.w	800fad0 <_dtoa_r+0x9a8>
 800f9a4:	9b07      	ldr	r3, [sp, #28]
 800f9a6:	2b02      	cmp	r3, #2
 800f9a8:	dc59      	bgt.n	800fa5e <_dtoa_r+0x936>
 800f9aa:	e091      	b.n	800fad0 <_dtoa_r+0x9a8>
 800f9ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f9ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f9b2:	e758      	b.n	800f866 <_dtoa_r+0x73e>
 800f9b4:	9b04      	ldr	r3, [sp, #16]
 800f9b6:	1e5e      	subs	r6, r3, #1
 800f9b8:	9b08      	ldr	r3, [sp, #32]
 800f9ba:	42b3      	cmp	r3, r6
 800f9bc:	bfbf      	itttt	lt
 800f9be:	9b08      	ldrlt	r3, [sp, #32]
 800f9c0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f9c2:	9608      	strlt	r6, [sp, #32]
 800f9c4:	1af3      	sublt	r3, r6, r3
 800f9c6:	bfb4      	ite	lt
 800f9c8:	18d2      	addlt	r2, r2, r3
 800f9ca:	1b9e      	subge	r6, r3, r6
 800f9cc:	9b04      	ldr	r3, [sp, #16]
 800f9ce:	bfbc      	itt	lt
 800f9d0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f9d2:	2600      	movlt	r6, #0
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	bfb7      	itett	lt
 800f9d8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f9dc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f9e0:	1a9d      	sublt	r5, r3, r2
 800f9e2:	2300      	movlt	r3, #0
 800f9e4:	e741      	b.n	800f86a <_dtoa_r+0x742>
 800f9e6:	9e08      	ldr	r6, [sp, #32]
 800f9e8:	9d05      	ldr	r5, [sp, #20]
 800f9ea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f9ec:	e748      	b.n	800f880 <_dtoa_r+0x758>
 800f9ee:	9a08      	ldr	r2, [sp, #32]
 800f9f0:	e770      	b.n	800f8d4 <_dtoa_r+0x7ac>
 800f9f2:	9b07      	ldr	r3, [sp, #28]
 800f9f4:	2b01      	cmp	r3, #1
 800f9f6:	dc19      	bgt.n	800fa2c <_dtoa_r+0x904>
 800f9f8:	9b02      	ldr	r3, [sp, #8]
 800f9fa:	b9bb      	cbnz	r3, 800fa2c <_dtoa_r+0x904>
 800f9fc:	9b03      	ldr	r3, [sp, #12]
 800f9fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fa02:	b99b      	cbnz	r3, 800fa2c <_dtoa_r+0x904>
 800fa04:	9b03      	ldr	r3, [sp, #12]
 800fa06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fa0a:	0d1b      	lsrs	r3, r3, #20
 800fa0c:	051b      	lsls	r3, r3, #20
 800fa0e:	b183      	cbz	r3, 800fa32 <_dtoa_r+0x90a>
 800fa10:	9b05      	ldr	r3, [sp, #20]
 800fa12:	3301      	adds	r3, #1
 800fa14:	9305      	str	r3, [sp, #20]
 800fa16:	9b06      	ldr	r3, [sp, #24]
 800fa18:	3301      	adds	r3, #1
 800fa1a:	9306      	str	r3, [sp, #24]
 800fa1c:	f04f 0801 	mov.w	r8, #1
 800fa20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	f47f af6f 	bne.w	800f906 <_dtoa_r+0x7de>
 800fa28:	2001      	movs	r0, #1
 800fa2a:	e774      	b.n	800f916 <_dtoa_r+0x7ee>
 800fa2c:	f04f 0800 	mov.w	r8, #0
 800fa30:	e7f6      	b.n	800fa20 <_dtoa_r+0x8f8>
 800fa32:	4698      	mov	r8, r3
 800fa34:	e7f4      	b.n	800fa20 <_dtoa_r+0x8f8>
 800fa36:	d082      	beq.n	800f93e <_dtoa_r+0x816>
 800fa38:	9a05      	ldr	r2, [sp, #20]
 800fa3a:	331c      	adds	r3, #28
 800fa3c:	441a      	add	r2, r3
 800fa3e:	9205      	str	r2, [sp, #20]
 800fa40:	9a06      	ldr	r2, [sp, #24]
 800fa42:	441a      	add	r2, r3
 800fa44:	441d      	add	r5, r3
 800fa46:	9206      	str	r2, [sp, #24]
 800fa48:	e779      	b.n	800f93e <_dtoa_r+0x816>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	e7f4      	b.n	800fa38 <_dtoa_r+0x910>
 800fa4e:	9b04      	ldr	r3, [sp, #16]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	dc37      	bgt.n	800fac4 <_dtoa_r+0x99c>
 800fa54:	9b07      	ldr	r3, [sp, #28]
 800fa56:	2b02      	cmp	r3, #2
 800fa58:	dd34      	ble.n	800fac4 <_dtoa_r+0x99c>
 800fa5a:	9b04      	ldr	r3, [sp, #16]
 800fa5c:	9301      	str	r3, [sp, #4]
 800fa5e:	9b01      	ldr	r3, [sp, #4]
 800fa60:	b963      	cbnz	r3, 800fa7c <_dtoa_r+0x954>
 800fa62:	4631      	mov	r1, r6
 800fa64:	2205      	movs	r2, #5
 800fa66:	4620      	mov	r0, r4
 800fa68:	f000 fab2 	bl	800ffd0 <__multadd>
 800fa6c:	4601      	mov	r1, r0
 800fa6e:	4606      	mov	r6, r0
 800fa70:	4650      	mov	r0, sl
 800fa72:	f000 fcc7 	bl	8010404 <__mcmp>
 800fa76:	2800      	cmp	r0, #0
 800fa78:	f73f adbb 	bgt.w	800f5f2 <_dtoa_r+0x4ca>
 800fa7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa7e:	9d00      	ldr	r5, [sp, #0]
 800fa80:	ea6f 0b03 	mvn.w	fp, r3
 800fa84:	f04f 0800 	mov.w	r8, #0
 800fa88:	4631      	mov	r1, r6
 800fa8a:	4620      	mov	r0, r4
 800fa8c:	f000 fa7e 	bl	800ff8c <_Bfree>
 800fa90:	2f00      	cmp	r7, #0
 800fa92:	f43f aeab 	beq.w	800f7ec <_dtoa_r+0x6c4>
 800fa96:	f1b8 0f00 	cmp.w	r8, #0
 800fa9a:	d005      	beq.n	800faa8 <_dtoa_r+0x980>
 800fa9c:	45b8      	cmp	r8, r7
 800fa9e:	d003      	beq.n	800faa8 <_dtoa_r+0x980>
 800faa0:	4641      	mov	r1, r8
 800faa2:	4620      	mov	r0, r4
 800faa4:	f000 fa72 	bl	800ff8c <_Bfree>
 800faa8:	4639      	mov	r1, r7
 800faaa:	4620      	mov	r0, r4
 800faac:	f000 fa6e 	bl	800ff8c <_Bfree>
 800fab0:	e69c      	b.n	800f7ec <_dtoa_r+0x6c4>
 800fab2:	2600      	movs	r6, #0
 800fab4:	4637      	mov	r7, r6
 800fab6:	e7e1      	b.n	800fa7c <_dtoa_r+0x954>
 800fab8:	46bb      	mov	fp, r7
 800faba:	4637      	mov	r7, r6
 800fabc:	e599      	b.n	800f5f2 <_dtoa_r+0x4ca>
 800fabe:	bf00      	nop
 800fac0:	40240000 	.word	0x40240000
 800fac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	f000 80c8 	beq.w	800fc5c <_dtoa_r+0xb34>
 800facc:	9b04      	ldr	r3, [sp, #16]
 800face:	9301      	str	r3, [sp, #4]
 800fad0:	2d00      	cmp	r5, #0
 800fad2:	dd05      	ble.n	800fae0 <_dtoa_r+0x9b8>
 800fad4:	4639      	mov	r1, r7
 800fad6:	462a      	mov	r2, r5
 800fad8:	4620      	mov	r0, r4
 800fada:	f000 fc27 	bl	801032c <__lshift>
 800fade:	4607      	mov	r7, r0
 800fae0:	f1b8 0f00 	cmp.w	r8, #0
 800fae4:	d05b      	beq.n	800fb9e <_dtoa_r+0xa76>
 800fae6:	6879      	ldr	r1, [r7, #4]
 800fae8:	4620      	mov	r0, r4
 800faea:	f000 fa0f 	bl	800ff0c <_Balloc>
 800faee:	4605      	mov	r5, r0
 800faf0:	b928      	cbnz	r0, 800fafe <_dtoa_r+0x9d6>
 800faf2:	4b83      	ldr	r3, [pc, #524]	; (800fd00 <_dtoa_r+0xbd8>)
 800faf4:	4602      	mov	r2, r0
 800faf6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800fafa:	f7ff bb2e 	b.w	800f15a <_dtoa_r+0x32>
 800fafe:	693a      	ldr	r2, [r7, #16]
 800fb00:	3202      	adds	r2, #2
 800fb02:	0092      	lsls	r2, r2, #2
 800fb04:	f107 010c 	add.w	r1, r7, #12
 800fb08:	300c      	adds	r0, #12
 800fb0a:	f7ff fa74 	bl	800eff6 <memcpy>
 800fb0e:	2201      	movs	r2, #1
 800fb10:	4629      	mov	r1, r5
 800fb12:	4620      	mov	r0, r4
 800fb14:	f000 fc0a 	bl	801032c <__lshift>
 800fb18:	9b00      	ldr	r3, [sp, #0]
 800fb1a:	3301      	adds	r3, #1
 800fb1c:	9304      	str	r3, [sp, #16]
 800fb1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb22:	4413      	add	r3, r2
 800fb24:	9308      	str	r3, [sp, #32]
 800fb26:	9b02      	ldr	r3, [sp, #8]
 800fb28:	f003 0301 	and.w	r3, r3, #1
 800fb2c:	46b8      	mov	r8, r7
 800fb2e:	9306      	str	r3, [sp, #24]
 800fb30:	4607      	mov	r7, r0
 800fb32:	9b04      	ldr	r3, [sp, #16]
 800fb34:	4631      	mov	r1, r6
 800fb36:	3b01      	subs	r3, #1
 800fb38:	4650      	mov	r0, sl
 800fb3a:	9301      	str	r3, [sp, #4]
 800fb3c:	f7ff fa69 	bl	800f012 <quorem>
 800fb40:	4641      	mov	r1, r8
 800fb42:	9002      	str	r0, [sp, #8]
 800fb44:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fb48:	4650      	mov	r0, sl
 800fb4a:	f000 fc5b 	bl	8010404 <__mcmp>
 800fb4e:	463a      	mov	r2, r7
 800fb50:	9005      	str	r0, [sp, #20]
 800fb52:	4631      	mov	r1, r6
 800fb54:	4620      	mov	r0, r4
 800fb56:	f000 fc71 	bl	801043c <__mdiff>
 800fb5a:	68c2      	ldr	r2, [r0, #12]
 800fb5c:	4605      	mov	r5, r0
 800fb5e:	bb02      	cbnz	r2, 800fba2 <_dtoa_r+0xa7a>
 800fb60:	4601      	mov	r1, r0
 800fb62:	4650      	mov	r0, sl
 800fb64:	f000 fc4e 	bl	8010404 <__mcmp>
 800fb68:	4602      	mov	r2, r0
 800fb6a:	4629      	mov	r1, r5
 800fb6c:	4620      	mov	r0, r4
 800fb6e:	9209      	str	r2, [sp, #36]	; 0x24
 800fb70:	f000 fa0c 	bl	800ff8c <_Bfree>
 800fb74:	9b07      	ldr	r3, [sp, #28]
 800fb76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb78:	9d04      	ldr	r5, [sp, #16]
 800fb7a:	ea43 0102 	orr.w	r1, r3, r2
 800fb7e:	9b06      	ldr	r3, [sp, #24]
 800fb80:	4319      	orrs	r1, r3
 800fb82:	d110      	bne.n	800fba6 <_dtoa_r+0xa7e>
 800fb84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fb88:	d029      	beq.n	800fbde <_dtoa_r+0xab6>
 800fb8a:	9b05      	ldr	r3, [sp, #20]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	dd02      	ble.n	800fb96 <_dtoa_r+0xa6e>
 800fb90:	9b02      	ldr	r3, [sp, #8]
 800fb92:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800fb96:	9b01      	ldr	r3, [sp, #4]
 800fb98:	f883 9000 	strb.w	r9, [r3]
 800fb9c:	e774      	b.n	800fa88 <_dtoa_r+0x960>
 800fb9e:	4638      	mov	r0, r7
 800fba0:	e7ba      	b.n	800fb18 <_dtoa_r+0x9f0>
 800fba2:	2201      	movs	r2, #1
 800fba4:	e7e1      	b.n	800fb6a <_dtoa_r+0xa42>
 800fba6:	9b05      	ldr	r3, [sp, #20]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	db04      	blt.n	800fbb6 <_dtoa_r+0xa8e>
 800fbac:	9907      	ldr	r1, [sp, #28]
 800fbae:	430b      	orrs	r3, r1
 800fbb0:	9906      	ldr	r1, [sp, #24]
 800fbb2:	430b      	orrs	r3, r1
 800fbb4:	d120      	bne.n	800fbf8 <_dtoa_r+0xad0>
 800fbb6:	2a00      	cmp	r2, #0
 800fbb8:	dded      	ble.n	800fb96 <_dtoa_r+0xa6e>
 800fbba:	4651      	mov	r1, sl
 800fbbc:	2201      	movs	r2, #1
 800fbbe:	4620      	mov	r0, r4
 800fbc0:	f000 fbb4 	bl	801032c <__lshift>
 800fbc4:	4631      	mov	r1, r6
 800fbc6:	4682      	mov	sl, r0
 800fbc8:	f000 fc1c 	bl	8010404 <__mcmp>
 800fbcc:	2800      	cmp	r0, #0
 800fbce:	dc03      	bgt.n	800fbd8 <_dtoa_r+0xab0>
 800fbd0:	d1e1      	bne.n	800fb96 <_dtoa_r+0xa6e>
 800fbd2:	f019 0f01 	tst.w	r9, #1
 800fbd6:	d0de      	beq.n	800fb96 <_dtoa_r+0xa6e>
 800fbd8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fbdc:	d1d8      	bne.n	800fb90 <_dtoa_r+0xa68>
 800fbde:	9a01      	ldr	r2, [sp, #4]
 800fbe0:	2339      	movs	r3, #57	; 0x39
 800fbe2:	7013      	strb	r3, [r2, #0]
 800fbe4:	462b      	mov	r3, r5
 800fbe6:	461d      	mov	r5, r3
 800fbe8:	3b01      	subs	r3, #1
 800fbea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fbee:	2a39      	cmp	r2, #57	; 0x39
 800fbf0:	d06c      	beq.n	800fccc <_dtoa_r+0xba4>
 800fbf2:	3201      	adds	r2, #1
 800fbf4:	701a      	strb	r2, [r3, #0]
 800fbf6:	e747      	b.n	800fa88 <_dtoa_r+0x960>
 800fbf8:	2a00      	cmp	r2, #0
 800fbfa:	dd07      	ble.n	800fc0c <_dtoa_r+0xae4>
 800fbfc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fc00:	d0ed      	beq.n	800fbde <_dtoa_r+0xab6>
 800fc02:	9a01      	ldr	r2, [sp, #4]
 800fc04:	f109 0301 	add.w	r3, r9, #1
 800fc08:	7013      	strb	r3, [r2, #0]
 800fc0a:	e73d      	b.n	800fa88 <_dtoa_r+0x960>
 800fc0c:	9b04      	ldr	r3, [sp, #16]
 800fc0e:	9a08      	ldr	r2, [sp, #32]
 800fc10:	f803 9c01 	strb.w	r9, [r3, #-1]
 800fc14:	4293      	cmp	r3, r2
 800fc16:	d043      	beq.n	800fca0 <_dtoa_r+0xb78>
 800fc18:	4651      	mov	r1, sl
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	220a      	movs	r2, #10
 800fc1e:	4620      	mov	r0, r4
 800fc20:	f000 f9d6 	bl	800ffd0 <__multadd>
 800fc24:	45b8      	cmp	r8, r7
 800fc26:	4682      	mov	sl, r0
 800fc28:	f04f 0300 	mov.w	r3, #0
 800fc2c:	f04f 020a 	mov.w	r2, #10
 800fc30:	4641      	mov	r1, r8
 800fc32:	4620      	mov	r0, r4
 800fc34:	d107      	bne.n	800fc46 <_dtoa_r+0xb1e>
 800fc36:	f000 f9cb 	bl	800ffd0 <__multadd>
 800fc3a:	4680      	mov	r8, r0
 800fc3c:	4607      	mov	r7, r0
 800fc3e:	9b04      	ldr	r3, [sp, #16]
 800fc40:	3301      	adds	r3, #1
 800fc42:	9304      	str	r3, [sp, #16]
 800fc44:	e775      	b.n	800fb32 <_dtoa_r+0xa0a>
 800fc46:	f000 f9c3 	bl	800ffd0 <__multadd>
 800fc4a:	4639      	mov	r1, r7
 800fc4c:	4680      	mov	r8, r0
 800fc4e:	2300      	movs	r3, #0
 800fc50:	220a      	movs	r2, #10
 800fc52:	4620      	mov	r0, r4
 800fc54:	f000 f9bc 	bl	800ffd0 <__multadd>
 800fc58:	4607      	mov	r7, r0
 800fc5a:	e7f0      	b.n	800fc3e <_dtoa_r+0xb16>
 800fc5c:	9b04      	ldr	r3, [sp, #16]
 800fc5e:	9301      	str	r3, [sp, #4]
 800fc60:	9d00      	ldr	r5, [sp, #0]
 800fc62:	4631      	mov	r1, r6
 800fc64:	4650      	mov	r0, sl
 800fc66:	f7ff f9d4 	bl	800f012 <quorem>
 800fc6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fc6e:	9b00      	ldr	r3, [sp, #0]
 800fc70:	f805 9b01 	strb.w	r9, [r5], #1
 800fc74:	1aea      	subs	r2, r5, r3
 800fc76:	9b01      	ldr	r3, [sp, #4]
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	dd07      	ble.n	800fc8c <_dtoa_r+0xb64>
 800fc7c:	4651      	mov	r1, sl
 800fc7e:	2300      	movs	r3, #0
 800fc80:	220a      	movs	r2, #10
 800fc82:	4620      	mov	r0, r4
 800fc84:	f000 f9a4 	bl	800ffd0 <__multadd>
 800fc88:	4682      	mov	sl, r0
 800fc8a:	e7ea      	b.n	800fc62 <_dtoa_r+0xb3a>
 800fc8c:	9b01      	ldr	r3, [sp, #4]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	bfc8      	it	gt
 800fc92:	461d      	movgt	r5, r3
 800fc94:	9b00      	ldr	r3, [sp, #0]
 800fc96:	bfd8      	it	le
 800fc98:	2501      	movle	r5, #1
 800fc9a:	441d      	add	r5, r3
 800fc9c:	f04f 0800 	mov.w	r8, #0
 800fca0:	4651      	mov	r1, sl
 800fca2:	2201      	movs	r2, #1
 800fca4:	4620      	mov	r0, r4
 800fca6:	f000 fb41 	bl	801032c <__lshift>
 800fcaa:	4631      	mov	r1, r6
 800fcac:	4682      	mov	sl, r0
 800fcae:	f000 fba9 	bl	8010404 <__mcmp>
 800fcb2:	2800      	cmp	r0, #0
 800fcb4:	dc96      	bgt.n	800fbe4 <_dtoa_r+0xabc>
 800fcb6:	d102      	bne.n	800fcbe <_dtoa_r+0xb96>
 800fcb8:	f019 0f01 	tst.w	r9, #1
 800fcbc:	d192      	bne.n	800fbe4 <_dtoa_r+0xabc>
 800fcbe:	462b      	mov	r3, r5
 800fcc0:	461d      	mov	r5, r3
 800fcc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fcc6:	2a30      	cmp	r2, #48	; 0x30
 800fcc8:	d0fa      	beq.n	800fcc0 <_dtoa_r+0xb98>
 800fcca:	e6dd      	b.n	800fa88 <_dtoa_r+0x960>
 800fccc:	9a00      	ldr	r2, [sp, #0]
 800fcce:	429a      	cmp	r2, r3
 800fcd0:	d189      	bne.n	800fbe6 <_dtoa_r+0xabe>
 800fcd2:	f10b 0b01 	add.w	fp, fp, #1
 800fcd6:	2331      	movs	r3, #49	; 0x31
 800fcd8:	e796      	b.n	800fc08 <_dtoa_r+0xae0>
 800fcda:	4b0a      	ldr	r3, [pc, #40]	; (800fd04 <_dtoa_r+0xbdc>)
 800fcdc:	f7ff ba99 	b.w	800f212 <_dtoa_r+0xea>
 800fce0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	f47f aa6d 	bne.w	800f1c2 <_dtoa_r+0x9a>
 800fce8:	4b07      	ldr	r3, [pc, #28]	; (800fd08 <_dtoa_r+0xbe0>)
 800fcea:	f7ff ba92 	b.w	800f212 <_dtoa_r+0xea>
 800fcee:	9b01      	ldr	r3, [sp, #4]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	dcb5      	bgt.n	800fc60 <_dtoa_r+0xb38>
 800fcf4:	9b07      	ldr	r3, [sp, #28]
 800fcf6:	2b02      	cmp	r3, #2
 800fcf8:	f73f aeb1 	bgt.w	800fa5e <_dtoa_r+0x936>
 800fcfc:	e7b0      	b.n	800fc60 <_dtoa_r+0xb38>
 800fcfe:	bf00      	nop
 800fd00:	08012351 	.word	0x08012351
 800fd04:	080122b1 	.word	0x080122b1
 800fd08:	080122d5 	.word	0x080122d5

0800fd0c <_free_r>:
 800fd0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fd0e:	2900      	cmp	r1, #0
 800fd10:	d044      	beq.n	800fd9c <_free_r+0x90>
 800fd12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd16:	9001      	str	r0, [sp, #4]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	f1a1 0404 	sub.w	r4, r1, #4
 800fd1e:	bfb8      	it	lt
 800fd20:	18e4      	addlt	r4, r4, r3
 800fd22:	f000 f8e7 	bl	800fef4 <__malloc_lock>
 800fd26:	4a1e      	ldr	r2, [pc, #120]	; (800fda0 <_free_r+0x94>)
 800fd28:	9801      	ldr	r0, [sp, #4]
 800fd2a:	6813      	ldr	r3, [r2, #0]
 800fd2c:	b933      	cbnz	r3, 800fd3c <_free_r+0x30>
 800fd2e:	6063      	str	r3, [r4, #4]
 800fd30:	6014      	str	r4, [r2, #0]
 800fd32:	b003      	add	sp, #12
 800fd34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fd38:	f000 b8e2 	b.w	800ff00 <__malloc_unlock>
 800fd3c:	42a3      	cmp	r3, r4
 800fd3e:	d908      	bls.n	800fd52 <_free_r+0x46>
 800fd40:	6825      	ldr	r5, [r4, #0]
 800fd42:	1961      	adds	r1, r4, r5
 800fd44:	428b      	cmp	r3, r1
 800fd46:	bf01      	itttt	eq
 800fd48:	6819      	ldreq	r1, [r3, #0]
 800fd4a:	685b      	ldreq	r3, [r3, #4]
 800fd4c:	1949      	addeq	r1, r1, r5
 800fd4e:	6021      	streq	r1, [r4, #0]
 800fd50:	e7ed      	b.n	800fd2e <_free_r+0x22>
 800fd52:	461a      	mov	r2, r3
 800fd54:	685b      	ldr	r3, [r3, #4]
 800fd56:	b10b      	cbz	r3, 800fd5c <_free_r+0x50>
 800fd58:	42a3      	cmp	r3, r4
 800fd5a:	d9fa      	bls.n	800fd52 <_free_r+0x46>
 800fd5c:	6811      	ldr	r1, [r2, #0]
 800fd5e:	1855      	adds	r5, r2, r1
 800fd60:	42a5      	cmp	r5, r4
 800fd62:	d10b      	bne.n	800fd7c <_free_r+0x70>
 800fd64:	6824      	ldr	r4, [r4, #0]
 800fd66:	4421      	add	r1, r4
 800fd68:	1854      	adds	r4, r2, r1
 800fd6a:	42a3      	cmp	r3, r4
 800fd6c:	6011      	str	r1, [r2, #0]
 800fd6e:	d1e0      	bne.n	800fd32 <_free_r+0x26>
 800fd70:	681c      	ldr	r4, [r3, #0]
 800fd72:	685b      	ldr	r3, [r3, #4]
 800fd74:	6053      	str	r3, [r2, #4]
 800fd76:	440c      	add	r4, r1
 800fd78:	6014      	str	r4, [r2, #0]
 800fd7a:	e7da      	b.n	800fd32 <_free_r+0x26>
 800fd7c:	d902      	bls.n	800fd84 <_free_r+0x78>
 800fd7e:	230c      	movs	r3, #12
 800fd80:	6003      	str	r3, [r0, #0]
 800fd82:	e7d6      	b.n	800fd32 <_free_r+0x26>
 800fd84:	6825      	ldr	r5, [r4, #0]
 800fd86:	1961      	adds	r1, r4, r5
 800fd88:	428b      	cmp	r3, r1
 800fd8a:	bf04      	itt	eq
 800fd8c:	6819      	ldreq	r1, [r3, #0]
 800fd8e:	685b      	ldreq	r3, [r3, #4]
 800fd90:	6063      	str	r3, [r4, #4]
 800fd92:	bf04      	itt	eq
 800fd94:	1949      	addeq	r1, r1, r5
 800fd96:	6021      	streq	r1, [r4, #0]
 800fd98:	6054      	str	r4, [r2, #4]
 800fd9a:	e7ca      	b.n	800fd32 <_free_r+0x26>
 800fd9c:	b003      	add	sp, #12
 800fd9e:	bd30      	pop	{r4, r5, pc}
 800fda0:	20004300 	.word	0x20004300

0800fda4 <malloc>:
 800fda4:	4b02      	ldr	r3, [pc, #8]	; (800fdb0 <malloc+0xc>)
 800fda6:	4601      	mov	r1, r0
 800fda8:	6818      	ldr	r0, [r3, #0]
 800fdaa:	f000 b823 	b.w	800fdf4 <_malloc_r>
 800fdae:	bf00      	nop
 800fdb0:	200001ec 	.word	0x200001ec

0800fdb4 <sbrk_aligned>:
 800fdb4:	b570      	push	{r4, r5, r6, lr}
 800fdb6:	4e0e      	ldr	r6, [pc, #56]	; (800fdf0 <sbrk_aligned+0x3c>)
 800fdb8:	460c      	mov	r4, r1
 800fdba:	6831      	ldr	r1, [r6, #0]
 800fdbc:	4605      	mov	r5, r0
 800fdbe:	b911      	cbnz	r1, 800fdc6 <sbrk_aligned+0x12>
 800fdc0:	f000 fe40 	bl	8010a44 <_sbrk_r>
 800fdc4:	6030      	str	r0, [r6, #0]
 800fdc6:	4621      	mov	r1, r4
 800fdc8:	4628      	mov	r0, r5
 800fdca:	f000 fe3b 	bl	8010a44 <_sbrk_r>
 800fdce:	1c43      	adds	r3, r0, #1
 800fdd0:	d00a      	beq.n	800fde8 <sbrk_aligned+0x34>
 800fdd2:	1cc4      	adds	r4, r0, #3
 800fdd4:	f024 0403 	bic.w	r4, r4, #3
 800fdd8:	42a0      	cmp	r0, r4
 800fdda:	d007      	beq.n	800fdec <sbrk_aligned+0x38>
 800fddc:	1a21      	subs	r1, r4, r0
 800fdde:	4628      	mov	r0, r5
 800fde0:	f000 fe30 	bl	8010a44 <_sbrk_r>
 800fde4:	3001      	adds	r0, #1
 800fde6:	d101      	bne.n	800fdec <sbrk_aligned+0x38>
 800fde8:	f04f 34ff 	mov.w	r4, #4294967295
 800fdec:	4620      	mov	r0, r4
 800fdee:	bd70      	pop	{r4, r5, r6, pc}
 800fdf0:	20004304 	.word	0x20004304

0800fdf4 <_malloc_r>:
 800fdf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdf8:	1ccd      	adds	r5, r1, #3
 800fdfa:	f025 0503 	bic.w	r5, r5, #3
 800fdfe:	3508      	adds	r5, #8
 800fe00:	2d0c      	cmp	r5, #12
 800fe02:	bf38      	it	cc
 800fe04:	250c      	movcc	r5, #12
 800fe06:	2d00      	cmp	r5, #0
 800fe08:	4607      	mov	r7, r0
 800fe0a:	db01      	blt.n	800fe10 <_malloc_r+0x1c>
 800fe0c:	42a9      	cmp	r1, r5
 800fe0e:	d905      	bls.n	800fe1c <_malloc_r+0x28>
 800fe10:	230c      	movs	r3, #12
 800fe12:	603b      	str	r3, [r7, #0]
 800fe14:	2600      	movs	r6, #0
 800fe16:	4630      	mov	r0, r6
 800fe18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fef0 <_malloc_r+0xfc>
 800fe20:	f000 f868 	bl	800fef4 <__malloc_lock>
 800fe24:	f8d8 3000 	ldr.w	r3, [r8]
 800fe28:	461c      	mov	r4, r3
 800fe2a:	bb5c      	cbnz	r4, 800fe84 <_malloc_r+0x90>
 800fe2c:	4629      	mov	r1, r5
 800fe2e:	4638      	mov	r0, r7
 800fe30:	f7ff ffc0 	bl	800fdb4 <sbrk_aligned>
 800fe34:	1c43      	adds	r3, r0, #1
 800fe36:	4604      	mov	r4, r0
 800fe38:	d155      	bne.n	800fee6 <_malloc_r+0xf2>
 800fe3a:	f8d8 4000 	ldr.w	r4, [r8]
 800fe3e:	4626      	mov	r6, r4
 800fe40:	2e00      	cmp	r6, #0
 800fe42:	d145      	bne.n	800fed0 <_malloc_r+0xdc>
 800fe44:	2c00      	cmp	r4, #0
 800fe46:	d048      	beq.n	800feda <_malloc_r+0xe6>
 800fe48:	6823      	ldr	r3, [r4, #0]
 800fe4a:	4631      	mov	r1, r6
 800fe4c:	4638      	mov	r0, r7
 800fe4e:	eb04 0903 	add.w	r9, r4, r3
 800fe52:	f000 fdf7 	bl	8010a44 <_sbrk_r>
 800fe56:	4581      	cmp	r9, r0
 800fe58:	d13f      	bne.n	800feda <_malloc_r+0xe6>
 800fe5a:	6821      	ldr	r1, [r4, #0]
 800fe5c:	1a6d      	subs	r5, r5, r1
 800fe5e:	4629      	mov	r1, r5
 800fe60:	4638      	mov	r0, r7
 800fe62:	f7ff ffa7 	bl	800fdb4 <sbrk_aligned>
 800fe66:	3001      	adds	r0, #1
 800fe68:	d037      	beq.n	800feda <_malloc_r+0xe6>
 800fe6a:	6823      	ldr	r3, [r4, #0]
 800fe6c:	442b      	add	r3, r5
 800fe6e:	6023      	str	r3, [r4, #0]
 800fe70:	f8d8 3000 	ldr.w	r3, [r8]
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d038      	beq.n	800feea <_malloc_r+0xf6>
 800fe78:	685a      	ldr	r2, [r3, #4]
 800fe7a:	42a2      	cmp	r2, r4
 800fe7c:	d12b      	bne.n	800fed6 <_malloc_r+0xe2>
 800fe7e:	2200      	movs	r2, #0
 800fe80:	605a      	str	r2, [r3, #4]
 800fe82:	e00f      	b.n	800fea4 <_malloc_r+0xb0>
 800fe84:	6822      	ldr	r2, [r4, #0]
 800fe86:	1b52      	subs	r2, r2, r5
 800fe88:	d41f      	bmi.n	800feca <_malloc_r+0xd6>
 800fe8a:	2a0b      	cmp	r2, #11
 800fe8c:	d917      	bls.n	800febe <_malloc_r+0xca>
 800fe8e:	1961      	adds	r1, r4, r5
 800fe90:	42a3      	cmp	r3, r4
 800fe92:	6025      	str	r5, [r4, #0]
 800fe94:	bf18      	it	ne
 800fe96:	6059      	strne	r1, [r3, #4]
 800fe98:	6863      	ldr	r3, [r4, #4]
 800fe9a:	bf08      	it	eq
 800fe9c:	f8c8 1000 	streq.w	r1, [r8]
 800fea0:	5162      	str	r2, [r4, r5]
 800fea2:	604b      	str	r3, [r1, #4]
 800fea4:	4638      	mov	r0, r7
 800fea6:	f104 060b 	add.w	r6, r4, #11
 800feaa:	f000 f829 	bl	800ff00 <__malloc_unlock>
 800feae:	f026 0607 	bic.w	r6, r6, #7
 800feb2:	1d23      	adds	r3, r4, #4
 800feb4:	1af2      	subs	r2, r6, r3
 800feb6:	d0ae      	beq.n	800fe16 <_malloc_r+0x22>
 800feb8:	1b9b      	subs	r3, r3, r6
 800feba:	50a3      	str	r3, [r4, r2]
 800febc:	e7ab      	b.n	800fe16 <_malloc_r+0x22>
 800febe:	42a3      	cmp	r3, r4
 800fec0:	6862      	ldr	r2, [r4, #4]
 800fec2:	d1dd      	bne.n	800fe80 <_malloc_r+0x8c>
 800fec4:	f8c8 2000 	str.w	r2, [r8]
 800fec8:	e7ec      	b.n	800fea4 <_malloc_r+0xb0>
 800feca:	4623      	mov	r3, r4
 800fecc:	6864      	ldr	r4, [r4, #4]
 800fece:	e7ac      	b.n	800fe2a <_malloc_r+0x36>
 800fed0:	4634      	mov	r4, r6
 800fed2:	6876      	ldr	r6, [r6, #4]
 800fed4:	e7b4      	b.n	800fe40 <_malloc_r+0x4c>
 800fed6:	4613      	mov	r3, r2
 800fed8:	e7cc      	b.n	800fe74 <_malloc_r+0x80>
 800feda:	230c      	movs	r3, #12
 800fedc:	603b      	str	r3, [r7, #0]
 800fede:	4638      	mov	r0, r7
 800fee0:	f000 f80e 	bl	800ff00 <__malloc_unlock>
 800fee4:	e797      	b.n	800fe16 <_malloc_r+0x22>
 800fee6:	6025      	str	r5, [r4, #0]
 800fee8:	e7dc      	b.n	800fea4 <_malloc_r+0xb0>
 800feea:	605b      	str	r3, [r3, #4]
 800feec:	deff      	udf	#255	; 0xff
 800feee:	bf00      	nop
 800fef0:	20004300 	.word	0x20004300

0800fef4 <__malloc_lock>:
 800fef4:	4801      	ldr	r0, [pc, #4]	; (800fefc <__malloc_lock+0x8>)
 800fef6:	f7ff b87c 	b.w	800eff2 <__retarget_lock_acquire_recursive>
 800fefa:	bf00      	nop
 800fefc:	200042fc 	.word	0x200042fc

0800ff00 <__malloc_unlock>:
 800ff00:	4801      	ldr	r0, [pc, #4]	; (800ff08 <__malloc_unlock+0x8>)
 800ff02:	f7ff b877 	b.w	800eff4 <__retarget_lock_release_recursive>
 800ff06:	bf00      	nop
 800ff08:	200042fc 	.word	0x200042fc

0800ff0c <_Balloc>:
 800ff0c:	b570      	push	{r4, r5, r6, lr}
 800ff0e:	69c6      	ldr	r6, [r0, #28]
 800ff10:	4604      	mov	r4, r0
 800ff12:	460d      	mov	r5, r1
 800ff14:	b976      	cbnz	r6, 800ff34 <_Balloc+0x28>
 800ff16:	2010      	movs	r0, #16
 800ff18:	f7ff ff44 	bl	800fda4 <malloc>
 800ff1c:	4602      	mov	r2, r0
 800ff1e:	61e0      	str	r0, [r4, #28]
 800ff20:	b920      	cbnz	r0, 800ff2c <_Balloc+0x20>
 800ff22:	4b18      	ldr	r3, [pc, #96]	; (800ff84 <_Balloc+0x78>)
 800ff24:	4818      	ldr	r0, [pc, #96]	; (800ff88 <_Balloc+0x7c>)
 800ff26:	216b      	movs	r1, #107	; 0x6b
 800ff28:	f000 fd9c 	bl	8010a64 <__assert_func>
 800ff2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff30:	6006      	str	r6, [r0, #0]
 800ff32:	60c6      	str	r6, [r0, #12]
 800ff34:	69e6      	ldr	r6, [r4, #28]
 800ff36:	68f3      	ldr	r3, [r6, #12]
 800ff38:	b183      	cbz	r3, 800ff5c <_Balloc+0x50>
 800ff3a:	69e3      	ldr	r3, [r4, #28]
 800ff3c:	68db      	ldr	r3, [r3, #12]
 800ff3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ff42:	b9b8      	cbnz	r0, 800ff74 <_Balloc+0x68>
 800ff44:	2101      	movs	r1, #1
 800ff46:	fa01 f605 	lsl.w	r6, r1, r5
 800ff4a:	1d72      	adds	r2, r6, #5
 800ff4c:	0092      	lsls	r2, r2, #2
 800ff4e:	4620      	mov	r0, r4
 800ff50:	f000 fda6 	bl	8010aa0 <_calloc_r>
 800ff54:	b160      	cbz	r0, 800ff70 <_Balloc+0x64>
 800ff56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ff5a:	e00e      	b.n	800ff7a <_Balloc+0x6e>
 800ff5c:	2221      	movs	r2, #33	; 0x21
 800ff5e:	2104      	movs	r1, #4
 800ff60:	4620      	mov	r0, r4
 800ff62:	f000 fd9d 	bl	8010aa0 <_calloc_r>
 800ff66:	69e3      	ldr	r3, [r4, #28]
 800ff68:	60f0      	str	r0, [r6, #12]
 800ff6a:	68db      	ldr	r3, [r3, #12]
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d1e4      	bne.n	800ff3a <_Balloc+0x2e>
 800ff70:	2000      	movs	r0, #0
 800ff72:	bd70      	pop	{r4, r5, r6, pc}
 800ff74:	6802      	ldr	r2, [r0, #0]
 800ff76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ff7a:	2300      	movs	r3, #0
 800ff7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ff80:	e7f7      	b.n	800ff72 <_Balloc+0x66>
 800ff82:	bf00      	nop
 800ff84:	080122e2 	.word	0x080122e2
 800ff88:	08012362 	.word	0x08012362

0800ff8c <_Bfree>:
 800ff8c:	b570      	push	{r4, r5, r6, lr}
 800ff8e:	69c6      	ldr	r6, [r0, #28]
 800ff90:	4605      	mov	r5, r0
 800ff92:	460c      	mov	r4, r1
 800ff94:	b976      	cbnz	r6, 800ffb4 <_Bfree+0x28>
 800ff96:	2010      	movs	r0, #16
 800ff98:	f7ff ff04 	bl	800fda4 <malloc>
 800ff9c:	4602      	mov	r2, r0
 800ff9e:	61e8      	str	r0, [r5, #28]
 800ffa0:	b920      	cbnz	r0, 800ffac <_Bfree+0x20>
 800ffa2:	4b09      	ldr	r3, [pc, #36]	; (800ffc8 <_Bfree+0x3c>)
 800ffa4:	4809      	ldr	r0, [pc, #36]	; (800ffcc <_Bfree+0x40>)
 800ffa6:	218f      	movs	r1, #143	; 0x8f
 800ffa8:	f000 fd5c 	bl	8010a64 <__assert_func>
 800ffac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ffb0:	6006      	str	r6, [r0, #0]
 800ffb2:	60c6      	str	r6, [r0, #12]
 800ffb4:	b13c      	cbz	r4, 800ffc6 <_Bfree+0x3a>
 800ffb6:	69eb      	ldr	r3, [r5, #28]
 800ffb8:	6862      	ldr	r2, [r4, #4]
 800ffba:	68db      	ldr	r3, [r3, #12]
 800ffbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ffc0:	6021      	str	r1, [r4, #0]
 800ffc2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ffc6:	bd70      	pop	{r4, r5, r6, pc}
 800ffc8:	080122e2 	.word	0x080122e2
 800ffcc:	08012362 	.word	0x08012362

0800ffd0 <__multadd>:
 800ffd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffd4:	690d      	ldr	r5, [r1, #16]
 800ffd6:	4607      	mov	r7, r0
 800ffd8:	460c      	mov	r4, r1
 800ffda:	461e      	mov	r6, r3
 800ffdc:	f101 0c14 	add.w	ip, r1, #20
 800ffe0:	2000      	movs	r0, #0
 800ffe2:	f8dc 3000 	ldr.w	r3, [ip]
 800ffe6:	b299      	uxth	r1, r3
 800ffe8:	fb02 6101 	mla	r1, r2, r1, r6
 800ffec:	0c1e      	lsrs	r6, r3, #16
 800ffee:	0c0b      	lsrs	r3, r1, #16
 800fff0:	fb02 3306 	mla	r3, r2, r6, r3
 800fff4:	b289      	uxth	r1, r1
 800fff6:	3001      	adds	r0, #1
 800fff8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fffc:	4285      	cmp	r5, r0
 800fffe:	f84c 1b04 	str.w	r1, [ip], #4
 8010002:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010006:	dcec      	bgt.n	800ffe2 <__multadd+0x12>
 8010008:	b30e      	cbz	r6, 801004e <__multadd+0x7e>
 801000a:	68a3      	ldr	r3, [r4, #8]
 801000c:	42ab      	cmp	r3, r5
 801000e:	dc19      	bgt.n	8010044 <__multadd+0x74>
 8010010:	6861      	ldr	r1, [r4, #4]
 8010012:	4638      	mov	r0, r7
 8010014:	3101      	adds	r1, #1
 8010016:	f7ff ff79 	bl	800ff0c <_Balloc>
 801001a:	4680      	mov	r8, r0
 801001c:	b928      	cbnz	r0, 801002a <__multadd+0x5a>
 801001e:	4602      	mov	r2, r0
 8010020:	4b0c      	ldr	r3, [pc, #48]	; (8010054 <__multadd+0x84>)
 8010022:	480d      	ldr	r0, [pc, #52]	; (8010058 <__multadd+0x88>)
 8010024:	21ba      	movs	r1, #186	; 0xba
 8010026:	f000 fd1d 	bl	8010a64 <__assert_func>
 801002a:	6922      	ldr	r2, [r4, #16]
 801002c:	3202      	adds	r2, #2
 801002e:	f104 010c 	add.w	r1, r4, #12
 8010032:	0092      	lsls	r2, r2, #2
 8010034:	300c      	adds	r0, #12
 8010036:	f7fe ffde 	bl	800eff6 <memcpy>
 801003a:	4621      	mov	r1, r4
 801003c:	4638      	mov	r0, r7
 801003e:	f7ff ffa5 	bl	800ff8c <_Bfree>
 8010042:	4644      	mov	r4, r8
 8010044:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010048:	3501      	adds	r5, #1
 801004a:	615e      	str	r6, [r3, #20]
 801004c:	6125      	str	r5, [r4, #16]
 801004e:	4620      	mov	r0, r4
 8010050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010054:	08012351 	.word	0x08012351
 8010058:	08012362 	.word	0x08012362

0801005c <__hi0bits>:
 801005c:	0c03      	lsrs	r3, r0, #16
 801005e:	041b      	lsls	r3, r3, #16
 8010060:	b9d3      	cbnz	r3, 8010098 <__hi0bits+0x3c>
 8010062:	0400      	lsls	r0, r0, #16
 8010064:	2310      	movs	r3, #16
 8010066:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801006a:	bf04      	itt	eq
 801006c:	0200      	lsleq	r0, r0, #8
 801006e:	3308      	addeq	r3, #8
 8010070:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010074:	bf04      	itt	eq
 8010076:	0100      	lsleq	r0, r0, #4
 8010078:	3304      	addeq	r3, #4
 801007a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801007e:	bf04      	itt	eq
 8010080:	0080      	lsleq	r0, r0, #2
 8010082:	3302      	addeq	r3, #2
 8010084:	2800      	cmp	r0, #0
 8010086:	db05      	blt.n	8010094 <__hi0bits+0x38>
 8010088:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801008c:	f103 0301 	add.w	r3, r3, #1
 8010090:	bf08      	it	eq
 8010092:	2320      	moveq	r3, #32
 8010094:	4618      	mov	r0, r3
 8010096:	4770      	bx	lr
 8010098:	2300      	movs	r3, #0
 801009a:	e7e4      	b.n	8010066 <__hi0bits+0xa>

0801009c <__lo0bits>:
 801009c:	6803      	ldr	r3, [r0, #0]
 801009e:	f013 0207 	ands.w	r2, r3, #7
 80100a2:	d00c      	beq.n	80100be <__lo0bits+0x22>
 80100a4:	07d9      	lsls	r1, r3, #31
 80100a6:	d422      	bmi.n	80100ee <__lo0bits+0x52>
 80100a8:	079a      	lsls	r2, r3, #30
 80100aa:	bf49      	itett	mi
 80100ac:	085b      	lsrmi	r3, r3, #1
 80100ae:	089b      	lsrpl	r3, r3, #2
 80100b0:	6003      	strmi	r3, [r0, #0]
 80100b2:	2201      	movmi	r2, #1
 80100b4:	bf5c      	itt	pl
 80100b6:	6003      	strpl	r3, [r0, #0]
 80100b8:	2202      	movpl	r2, #2
 80100ba:	4610      	mov	r0, r2
 80100bc:	4770      	bx	lr
 80100be:	b299      	uxth	r1, r3
 80100c0:	b909      	cbnz	r1, 80100c6 <__lo0bits+0x2a>
 80100c2:	0c1b      	lsrs	r3, r3, #16
 80100c4:	2210      	movs	r2, #16
 80100c6:	b2d9      	uxtb	r1, r3
 80100c8:	b909      	cbnz	r1, 80100ce <__lo0bits+0x32>
 80100ca:	3208      	adds	r2, #8
 80100cc:	0a1b      	lsrs	r3, r3, #8
 80100ce:	0719      	lsls	r1, r3, #28
 80100d0:	bf04      	itt	eq
 80100d2:	091b      	lsreq	r3, r3, #4
 80100d4:	3204      	addeq	r2, #4
 80100d6:	0799      	lsls	r1, r3, #30
 80100d8:	bf04      	itt	eq
 80100da:	089b      	lsreq	r3, r3, #2
 80100dc:	3202      	addeq	r2, #2
 80100de:	07d9      	lsls	r1, r3, #31
 80100e0:	d403      	bmi.n	80100ea <__lo0bits+0x4e>
 80100e2:	085b      	lsrs	r3, r3, #1
 80100e4:	f102 0201 	add.w	r2, r2, #1
 80100e8:	d003      	beq.n	80100f2 <__lo0bits+0x56>
 80100ea:	6003      	str	r3, [r0, #0]
 80100ec:	e7e5      	b.n	80100ba <__lo0bits+0x1e>
 80100ee:	2200      	movs	r2, #0
 80100f0:	e7e3      	b.n	80100ba <__lo0bits+0x1e>
 80100f2:	2220      	movs	r2, #32
 80100f4:	e7e1      	b.n	80100ba <__lo0bits+0x1e>
	...

080100f8 <__i2b>:
 80100f8:	b510      	push	{r4, lr}
 80100fa:	460c      	mov	r4, r1
 80100fc:	2101      	movs	r1, #1
 80100fe:	f7ff ff05 	bl	800ff0c <_Balloc>
 8010102:	4602      	mov	r2, r0
 8010104:	b928      	cbnz	r0, 8010112 <__i2b+0x1a>
 8010106:	4b05      	ldr	r3, [pc, #20]	; (801011c <__i2b+0x24>)
 8010108:	4805      	ldr	r0, [pc, #20]	; (8010120 <__i2b+0x28>)
 801010a:	f240 1145 	movw	r1, #325	; 0x145
 801010e:	f000 fca9 	bl	8010a64 <__assert_func>
 8010112:	2301      	movs	r3, #1
 8010114:	6144      	str	r4, [r0, #20]
 8010116:	6103      	str	r3, [r0, #16]
 8010118:	bd10      	pop	{r4, pc}
 801011a:	bf00      	nop
 801011c:	08012351 	.word	0x08012351
 8010120:	08012362 	.word	0x08012362

08010124 <__multiply>:
 8010124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010128:	4691      	mov	r9, r2
 801012a:	690a      	ldr	r2, [r1, #16]
 801012c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010130:	429a      	cmp	r2, r3
 8010132:	bfb8      	it	lt
 8010134:	460b      	movlt	r3, r1
 8010136:	460c      	mov	r4, r1
 8010138:	bfbc      	itt	lt
 801013a:	464c      	movlt	r4, r9
 801013c:	4699      	movlt	r9, r3
 801013e:	6927      	ldr	r7, [r4, #16]
 8010140:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010144:	68a3      	ldr	r3, [r4, #8]
 8010146:	6861      	ldr	r1, [r4, #4]
 8010148:	eb07 060a 	add.w	r6, r7, sl
 801014c:	42b3      	cmp	r3, r6
 801014e:	b085      	sub	sp, #20
 8010150:	bfb8      	it	lt
 8010152:	3101      	addlt	r1, #1
 8010154:	f7ff feda 	bl	800ff0c <_Balloc>
 8010158:	b930      	cbnz	r0, 8010168 <__multiply+0x44>
 801015a:	4602      	mov	r2, r0
 801015c:	4b44      	ldr	r3, [pc, #272]	; (8010270 <__multiply+0x14c>)
 801015e:	4845      	ldr	r0, [pc, #276]	; (8010274 <__multiply+0x150>)
 8010160:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010164:	f000 fc7e 	bl	8010a64 <__assert_func>
 8010168:	f100 0514 	add.w	r5, r0, #20
 801016c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010170:	462b      	mov	r3, r5
 8010172:	2200      	movs	r2, #0
 8010174:	4543      	cmp	r3, r8
 8010176:	d321      	bcc.n	80101bc <__multiply+0x98>
 8010178:	f104 0314 	add.w	r3, r4, #20
 801017c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010180:	f109 0314 	add.w	r3, r9, #20
 8010184:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010188:	9202      	str	r2, [sp, #8]
 801018a:	1b3a      	subs	r2, r7, r4
 801018c:	3a15      	subs	r2, #21
 801018e:	f022 0203 	bic.w	r2, r2, #3
 8010192:	3204      	adds	r2, #4
 8010194:	f104 0115 	add.w	r1, r4, #21
 8010198:	428f      	cmp	r7, r1
 801019a:	bf38      	it	cc
 801019c:	2204      	movcc	r2, #4
 801019e:	9201      	str	r2, [sp, #4]
 80101a0:	9a02      	ldr	r2, [sp, #8]
 80101a2:	9303      	str	r3, [sp, #12]
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d80c      	bhi.n	80101c2 <__multiply+0x9e>
 80101a8:	2e00      	cmp	r6, #0
 80101aa:	dd03      	ble.n	80101b4 <__multiply+0x90>
 80101ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d05b      	beq.n	801026c <__multiply+0x148>
 80101b4:	6106      	str	r6, [r0, #16]
 80101b6:	b005      	add	sp, #20
 80101b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101bc:	f843 2b04 	str.w	r2, [r3], #4
 80101c0:	e7d8      	b.n	8010174 <__multiply+0x50>
 80101c2:	f8b3 a000 	ldrh.w	sl, [r3]
 80101c6:	f1ba 0f00 	cmp.w	sl, #0
 80101ca:	d024      	beq.n	8010216 <__multiply+0xf2>
 80101cc:	f104 0e14 	add.w	lr, r4, #20
 80101d0:	46a9      	mov	r9, r5
 80101d2:	f04f 0c00 	mov.w	ip, #0
 80101d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80101da:	f8d9 1000 	ldr.w	r1, [r9]
 80101de:	fa1f fb82 	uxth.w	fp, r2
 80101e2:	b289      	uxth	r1, r1
 80101e4:	fb0a 110b 	mla	r1, sl, fp, r1
 80101e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80101ec:	f8d9 2000 	ldr.w	r2, [r9]
 80101f0:	4461      	add	r1, ip
 80101f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80101f6:	fb0a c20b 	mla	r2, sl, fp, ip
 80101fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80101fe:	b289      	uxth	r1, r1
 8010200:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010204:	4577      	cmp	r7, lr
 8010206:	f849 1b04 	str.w	r1, [r9], #4
 801020a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801020e:	d8e2      	bhi.n	80101d6 <__multiply+0xb2>
 8010210:	9a01      	ldr	r2, [sp, #4]
 8010212:	f845 c002 	str.w	ip, [r5, r2]
 8010216:	9a03      	ldr	r2, [sp, #12]
 8010218:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801021c:	3304      	adds	r3, #4
 801021e:	f1b9 0f00 	cmp.w	r9, #0
 8010222:	d021      	beq.n	8010268 <__multiply+0x144>
 8010224:	6829      	ldr	r1, [r5, #0]
 8010226:	f104 0c14 	add.w	ip, r4, #20
 801022a:	46ae      	mov	lr, r5
 801022c:	f04f 0a00 	mov.w	sl, #0
 8010230:	f8bc b000 	ldrh.w	fp, [ip]
 8010234:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010238:	fb09 220b 	mla	r2, r9, fp, r2
 801023c:	4452      	add	r2, sl
 801023e:	b289      	uxth	r1, r1
 8010240:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010244:	f84e 1b04 	str.w	r1, [lr], #4
 8010248:	f85c 1b04 	ldr.w	r1, [ip], #4
 801024c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010250:	f8be 1000 	ldrh.w	r1, [lr]
 8010254:	fb09 110a 	mla	r1, r9, sl, r1
 8010258:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801025c:	4567      	cmp	r7, ip
 801025e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010262:	d8e5      	bhi.n	8010230 <__multiply+0x10c>
 8010264:	9a01      	ldr	r2, [sp, #4]
 8010266:	50a9      	str	r1, [r5, r2]
 8010268:	3504      	adds	r5, #4
 801026a:	e799      	b.n	80101a0 <__multiply+0x7c>
 801026c:	3e01      	subs	r6, #1
 801026e:	e79b      	b.n	80101a8 <__multiply+0x84>
 8010270:	08012351 	.word	0x08012351
 8010274:	08012362 	.word	0x08012362

08010278 <__pow5mult>:
 8010278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801027c:	4615      	mov	r5, r2
 801027e:	f012 0203 	ands.w	r2, r2, #3
 8010282:	4606      	mov	r6, r0
 8010284:	460f      	mov	r7, r1
 8010286:	d007      	beq.n	8010298 <__pow5mult+0x20>
 8010288:	4c25      	ldr	r4, [pc, #148]	; (8010320 <__pow5mult+0xa8>)
 801028a:	3a01      	subs	r2, #1
 801028c:	2300      	movs	r3, #0
 801028e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010292:	f7ff fe9d 	bl	800ffd0 <__multadd>
 8010296:	4607      	mov	r7, r0
 8010298:	10ad      	asrs	r5, r5, #2
 801029a:	d03d      	beq.n	8010318 <__pow5mult+0xa0>
 801029c:	69f4      	ldr	r4, [r6, #28]
 801029e:	b97c      	cbnz	r4, 80102c0 <__pow5mult+0x48>
 80102a0:	2010      	movs	r0, #16
 80102a2:	f7ff fd7f 	bl	800fda4 <malloc>
 80102a6:	4602      	mov	r2, r0
 80102a8:	61f0      	str	r0, [r6, #28]
 80102aa:	b928      	cbnz	r0, 80102b8 <__pow5mult+0x40>
 80102ac:	4b1d      	ldr	r3, [pc, #116]	; (8010324 <__pow5mult+0xac>)
 80102ae:	481e      	ldr	r0, [pc, #120]	; (8010328 <__pow5mult+0xb0>)
 80102b0:	f240 11b3 	movw	r1, #435	; 0x1b3
 80102b4:	f000 fbd6 	bl	8010a64 <__assert_func>
 80102b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80102bc:	6004      	str	r4, [r0, #0]
 80102be:	60c4      	str	r4, [r0, #12]
 80102c0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80102c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80102c8:	b94c      	cbnz	r4, 80102de <__pow5mult+0x66>
 80102ca:	f240 2171 	movw	r1, #625	; 0x271
 80102ce:	4630      	mov	r0, r6
 80102d0:	f7ff ff12 	bl	80100f8 <__i2b>
 80102d4:	2300      	movs	r3, #0
 80102d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80102da:	4604      	mov	r4, r0
 80102dc:	6003      	str	r3, [r0, #0]
 80102de:	f04f 0900 	mov.w	r9, #0
 80102e2:	07eb      	lsls	r3, r5, #31
 80102e4:	d50a      	bpl.n	80102fc <__pow5mult+0x84>
 80102e6:	4639      	mov	r1, r7
 80102e8:	4622      	mov	r2, r4
 80102ea:	4630      	mov	r0, r6
 80102ec:	f7ff ff1a 	bl	8010124 <__multiply>
 80102f0:	4639      	mov	r1, r7
 80102f2:	4680      	mov	r8, r0
 80102f4:	4630      	mov	r0, r6
 80102f6:	f7ff fe49 	bl	800ff8c <_Bfree>
 80102fa:	4647      	mov	r7, r8
 80102fc:	106d      	asrs	r5, r5, #1
 80102fe:	d00b      	beq.n	8010318 <__pow5mult+0xa0>
 8010300:	6820      	ldr	r0, [r4, #0]
 8010302:	b938      	cbnz	r0, 8010314 <__pow5mult+0x9c>
 8010304:	4622      	mov	r2, r4
 8010306:	4621      	mov	r1, r4
 8010308:	4630      	mov	r0, r6
 801030a:	f7ff ff0b 	bl	8010124 <__multiply>
 801030e:	6020      	str	r0, [r4, #0]
 8010310:	f8c0 9000 	str.w	r9, [r0]
 8010314:	4604      	mov	r4, r0
 8010316:	e7e4      	b.n	80102e2 <__pow5mult+0x6a>
 8010318:	4638      	mov	r0, r7
 801031a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801031e:	bf00      	nop
 8010320:	080124b0 	.word	0x080124b0
 8010324:	080122e2 	.word	0x080122e2
 8010328:	08012362 	.word	0x08012362

0801032c <__lshift>:
 801032c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010330:	460c      	mov	r4, r1
 8010332:	6849      	ldr	r1, [r1, #4]
 8010334:	6923      	ldr	r3, [r4, #16]
 8010336:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801033a:	68a3      	ldr	r3, [r4, #8]
 801033c:	4607      	mov	r7, r0
 801033e:	4691      	mov	r9, r2
 8010340:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010344:	f108 0601 	add.w	r6, r8, #1
 8010348:	42b3      	cmp	r3, r6
 801034a:	db0b      	blt.n	8010364 <__lshift+0x38>
 801034c:	4638      	mov	r0, r7
 801034e:	f7ff fddd 	bl	800ff0c <_Balloc>
 8010352:	4605      	mov	r5, r0
 8010354:	b948      	cbnz	r0, 801036a <__lshift+0x3e>
 8010356:	4602      	mov	r2, r0
 8010358:	4b28      	ldr	r3, [pc, #160]	; (80103fc <__lshift+0xd0>)
 801035a:	4829      	ldr	r0, [pc, #164]	; (8010400 <__lshift+0xd4>)
 801035c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010360:	f000 fb80 	bl	8010a64 <__assert_func>
 8010364:	3101      	adds	r1, #1
 8010366:	005b      	lsls	r3, r3, #1
 8010368:	e7ee      	b.n	8010348 <__lshift+0x1c>
 801036a:	2300      	movs	r3, #0
 801036c:	f100 0114 	add.w	r1, r0, #20
 8010370:	f100 0210 	add.w	r2, r0, #16
 8010374:	4618      	mov	r0, r3
 8010376:	4553      	cmp	r3, sl
 8010378:	db33      	blt.n	80103e2 <__lshift+0xb6>
 801037a:	6920      	ldr	r0, [r4, #16]
 801037c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010380:	f104 0314 	add.w	r3, r4, #20
 8010384:	f019 091f 	ands.w	r9, r9, #31
 8010388:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801038c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010390:	d02b      	beq.n	80103ea <__lshift+0xbe>
 8010392:	f1c9 0e20 	rsb	lr, r9, #32
 8010396:	468a      	mov	sl, r1
 8010398:	2200      	movs	r2, #0
 801039a:	6818      	ldr	r0, [r3, #0]
 801039c:	fa00 f009 	lsl.w	r0, r0, r9
 80103a0:	4310      	orrs	r0, r2
 80103a2:	f84a 0b04 	str.w	r0, [sl], #4
 80103a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80103aa:	459c      	cmp	ip, r3
 80103ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80103b0:	d8f3      	bhi.n	801039a <__lshift+0x6e>
 80103b2:	ebac 0304 	sub.w	r3, ip, r4
 80103b6:	3b15      	subs	r3, #21
 80103b8:	f023 0303 	bic.w	r3, r3, #3
 80103bc:	3304      	adds	r3, #4
 80103be:	f104 0015 	add.w	r0, r4, #21
 80103c2:	4584      	cmp	ip, r0
 80103c4:	bf38      	it	cc
 80103c6:	2304      	movcc	r3, #4
 80103c8:	50ca      	str	r2, [r1, r3]
 80103ca:	b10a      	cbz	r2, 80103d0 <__lshift+0xa4>
 80103cc:	f108 0602 	add.w	r6, r8, #2
 80103d0:	3e01      	subs	r6, #1
 80103d2:	4638      	mov	r0, r7
 80103d4:	612e      	str	r6, [r5, #16]
 80103d6:	4621      	mov	r1, r4
 80103d8:	f7ff fdd8 	bl	800ff8c <_Bfree>
 80103dc:	4628      	mov	r0, r5
 80103de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80103e6:	3301      	adds	r3, #1
 80103e8:	e7c5      	b.n	8010376 <__lshift+0x4a>
 80103ea:	3904      	subs	r1, #4
 80103ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80103f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80103f4:	459c      	cmp	ip, r3
 80103f6:	d8f9      	bhi.n	80103ec <__lshift+0xc0>
 80103f8:	e7ea      	b.n	80103d0 <__lshift+0xa4>
 80103fa:	bf00      	nop
 80103fc:	08012351 	.word	0x08012351
 8010400:	08012362 	.word	0x08012362

08010404 <__mcmp>:
 8010404:	b530      	push	{r4, r5, lr}
 8010406:	6902      	ldr	r2, [r0, #16]
 8010408:	690c      	ldr	r4, [r1, #16]
 801040a:	1b12      	subs	r2, r2, r4
 801040c:	d10e      	bne.n	801042c <__mcmp+0x28>
 801040e:	f100 0314 	add.w	r3, r0, #20
 8010412:	3114      	adds	r1, #20
 8010414:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010418:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801041c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010420:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010424:	42a5      	cmp	r5, r4
 8010426:	d003      	beq.n	8010430 <__mcmp+0x2c>
 8010428:	d305      	bcc.n	8010436 <__mcmp+0x32>
 801042a:	2201      	movs	r2, #1
 801042c:	4610      	mov	r0, r2
 801042e:	bd30      	pop	{r4, r5, pc}
 8010430:	4283      	cmp	r3, r0
 8010432:	d3f3      	bcc.n	801041c <__mcmp+0x18>
 8010434:	e7fa      	b.n	801042c <__mcmp+0x28>
 8010436:	f04f 32ff 	mov.w	r2, #4294967295
 801043a:	e7f7      	b.n	801042c <__mcmp+0x28>

0801043c <__mdiff>:
 801043c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010440:	460c      	mov	r4, r1
 8010442:	4606      	mov	r6, r0
 8010444:	4611      	mov	r1, r2
 8010446:	4620      	mov	r0, r4
 8010448:	4690      	mov	r8, r2
 801044a:	f7ff ffdb 	bl	8010404 <__mcmp>
 801044e:	1e05      	subs	r5, r0, #0
 8010450:	d110      	bne.n	8010474 <__mdiff+0x38>
 8010452:	4629      	mov	r1, r5
 8010454:	4630      	mov	r0, r6
 8010456:	f7ff fd59 	bl	800ff0c <_Balloc>
 801045a:	b930      	cbnz	r0, 801046a <__mdiff+0x2e>
 801045c:	4b3a      	ldr	r3, [pc, #232]	; (8010548 <__mdiff+0x10c>)
 801045e:	4602      	mov	r2, r0
 8010460:	f240 2137 	movw	r1, #567	; 0x237
 8010464:	4839      	ldr	r0, [pc, #228]	; (801054c <__mdiff+0x110>)
 8010466:	f000 fafd 	bl	8010a64 <__assert_func>
 801046a:	2301      	movs	r3, #1
 801046c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010470:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010474:	bfa4      	itt	ge
 8010476:	4643      	movge	r3, r8
 8010478:	46a0      	movge	r8, r4
 801047a:	4630      	mov	r0, r6
 801047c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010480:	bfa6      	itte	ge
 8010482:	461c      	movge	r4, r3
 8010484:	2500      	movge	r5, #0
 8010486:	2501      	movlt	r5, #1
 8010488:	f7ff fd40 	bl	800ff0c <_Balloc>
 801048c:	b920      	cbnz	r0, 8010498 <__mdiff+0x5c>
 801048e:	4b2e      	ldr	r3, [pc, #184]	; (8010548 <__mdiff+0x10c>)
 8010490:	4602      	mov	r2, r0
 8010492:	f240 2145 	movw	r1, #581	; 0x245
 8010496:	e7e5      	b.n	8010464 <__mdiff+0x28>
 8010498:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801049c:	6926      	ldr	r6, [r4, #16]
 801049e:	60c5      	str	r5, [r0, #12]
 80104a0:	f104 0914 	add.w	r9, r4, #20
 80104a4:	f108 0514 	add.w	r5, r8, #20
 80104a8:	f100 0e14 	add.w	lr, r0, #20
 80104ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80104b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80104b4:	f108 0210 	add.w	r2, r8, #16
 80104b8:	46f2      	mov	sl, lr
 80104ba:	2100      	movs	r1, #0
 80104bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80104c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80104c4:	fa11 f88b 	uxtah	r8, r1, fp
 80104c8:	b299      	uxth	r1, r3
 80104ca:	0c1b      	lsrs	r3, r3, #16
 80104cc:	eba8 0801 	sub.w	r8, r8, r1
 80104d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80104d4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80104d8:	fa1f f888 	uxth.w	r8, r8
 80104dc:	1419      	asrs	r1, r3, #16
 80104de:	454e      	cmp	r6, r9
 80104e0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80104e4:	f84a 3b04 	str.w	r3, [sl], #4
 80104e8:	d8e8      	bhi.n	80104bc <__mdiff+0x80>
 80104ea:	1b33      	subs	r3, r6, r4
 80104ec:	3b15      	subs	r3, #21
 80104ee:	f023 0303 	bic.w	r3, r3, #3
 80104f2:	3304      	adds	r3, #4
 80104f4:	3415      	adds	r4, #21
 80104f6:	42a6      	cmp	r6, r4
 80104f8:	bf38      	it	cc
 80104fa:	2304      	movcc	r3, #4
 80104fc:	441d      	add	r5, r3
 80104fe:	4473      	add	r3, lr
 8010500:	469e      	mov	lr, r3
 8010502:	462e      	mov	r6, r5
 8010504:	4566      	cmp	r6, ip
 8010506:	d30e      	bcc.n	8010526 <__mdiff+0xea>
 8010508:	f10c 0203 	add.w	r2, ip, #3
 801050c:	1b52      	subs	r2, r2, r5
 801050e:	f022 0203 	bic.w	r2, r2, #3
 8010512:	3d03      	subs	r5, #3
 8010514:	45ac      	cmp	ip, r5
 8010516:	bf38      	it	cc
 8010518:	2200      	movcc	r2, #0
 801051a:	4413      	add	r3, r2
 801051c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010520:	b17a      	cbz	r2, 8010542 <__mdiff+0x106>
 8010522:	6107      	str	r7, [r0, #16]
 8010524:	e7a4      	b.n	8010470 <__mdiff+0x34>
 8010526:	f856 8b04 	ldr.w	r8, [r6], #4
 801052a:	fa11 f288 	uxtah	r2, r1, r8
 801052e:	1414      	asrs	r4, r2, #16
 8010530:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010534:	b292      	uxth	r2, r2
 8010536:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801053a:	f84e 2b04 	str.w	r2, [lr], #4
 801053e:	1421      	asrs	r1, r4, #16
 8010540:	e7e0      	b.n	8010504 <__mdiff+0xc8>
 8010542:	3f01      	subs	r7, #1
 8010544:	e7ea      	b.n	801051c <__mdiff+0xe0>
 8010546:	bf00      	nop
 8010548:	08012351 	.word	0x08012351
 801054c:	08012362 	.word	0x08012362

08010550 <__d2b>:
 8010550:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010554:	460f      	mov	r7, r1
 8010556:	2101      	movs	r1, #1
 8010558:	ec59 8b10 	vmov	r8, r9, d0
 801055c:	4616      	mov	r6, r2
 801055e:	f7ff fcd5 	bl	800ff0c <_Balloc>
 8010562:	4604      	mov	r4, r0
 8010564:	b930      	cbnz	r0, 8010574 <__d2b+0x24>
 8010566:	4602      	mov	r2, r0
 8010568:	4b24      	ldr	r3, [pc, #144]	; (80105fc <__d2b+0xac>)
 801056a:	4825      	ldr	r0, [pc, #148]	; (8010600 <__d2b+0xb0>)
 801056c:	f240 310f 	movw	r1, #783	; 0x30f
 8010570:	f000 fa78 	bl	8010a64 <__assert_func>
 8010574:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010578:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801057c:	bb2d      	cbnz	r5, 80105ca <__d2b+0x7a>
 801057e:	9301      	str	r3, [sp, #4]
 8010580:	f1b8 0300 	subs.w	r3, r8, #0
 8010584:	d026      	beq.n	80105d4 <__d2b+0x84>
 8010586:	4668      	mov	r0, sp
 8010588:	9300      	str	r3, [sp, #0]
 801058a:	f7ff fd87 	bl	801009c <__lo0bits>
 801058e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010592:	b1e8      	cbz	r0, 80105d0 <__d2b+0x80>
 8010594:	f1c0 0320 	rsb	r3, r0, #32
 8010598:	fa02 f303 	lsl.w	r3, r2, r3
 801059c:	430b      	orrs	r3, r1
 801059e:	40c2      	lsrs	r2, r0
 80105a0:	6163      	str	r3, [r4, #20]
 80105a2:	9201      	str	r2, [sp, #4]
 80105a4:	9b01      	ldr	r3, [sp, #4]
 80105a6:	61a3      	str	r3, [r4, #24]
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	bf14      	ite	ne
 80105ac:	2202      	movne	r2, #2
 80105ae:	2201      	moveq	r2, #1
 80105b0:	6122      	str	r2, [r4, #16]
 80105b2:	b1bd      	cbz	r5, 80105e4 <__d2b+0x94>
 80105b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80105b8:	4405      	add	r5, r0
 80105ba:	603d      	str	r5, [r7, #0]
 80105bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80105c0:	6030      	str	r0, [r6, #0]
 80105c2:	4620      	mov	r0, r4
 80105c4:	b003      	add	sp, #12
 80105c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80105ce:	e7d6      	b.n	801057e <__d2b+0x2e>
 80105d0:	6161      	str	r1, [r4, #20]
 80105d2:	e7e7      	b.n	80105a4 <__d2b+0x54>
 80105d4:	a801      	add	r0, sp, #4
 80105d6:	f7ff fd61 	bl	801009c <__lo0bits>
 80105da:	9b01      	ldr	r3, [sp, #4]
 80105dc:	6163      	str	r3, [r4, #20]
 80105de:	3020      	adds	r0, #32
 80105e0:	2201      	movs	r2, #1
 80105e2:	e7e5      	b.n	80105b0 <__d2b+0x60>
 80105e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80105e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80105ec:	6038      	str	r0, [r7, #0]
 80105ee:	6918      	ldr	r0, [r3, #16]
 80105f0:	f7ff fd34 	bl	801005c <__hi0bits>
 80105f4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80105f8:	e7e2      	b.n	80105c0 <__d2b+0x70>
 80105fa:	bf00      	nop
 80105fc:	08012351 	.word	0x08012351
 8010600:	08012362 	.word	0x08012362

08010604 <__ssputs_r>:
 8010604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010608:	688e      	ldr	r6, [r1, #8]
 801060a:	461f      	mov	r7, r3
 801060c:	42be      	cmp	r6, r7
 801060e:	680b      	ldr	r3, [r1, #0]
 8010610:	4682      	mov	sl, r0
 8010612:	460c      	mov	r4, r1
 8010614:	4690      	mov	r8, r2
 8010616:	d82c      	bhi.n	8010672 <__ssputs_r+0x6e>
 8010618:	898a      	ldrh	r2, [r1, #12]
 801061a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801061e:	d026      	beq.n	801066e <__ssputs_r+0x6a>
 8010620:	6965      	ldr	r5, [r4, #20]
 8010622:	6909      	ldr	r1, [r1, #16]
 8010624:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010628:	eba3 0901 	sub.w	r9, r3, r1
 801062c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010630:	1c7b      	adds	r3, r7, #1
 8010632:	444b      	add	r3, r9
 8010634:	106d      	asrs	r5, r5, #1
 8010636:	429d      	cmp	r5, r3
 8010638:	bf38      	it	cc
 801063a:	461d      	movcc	r5, r3
 801063c:	0553      	lsls	r3, r2, #21
 801063e:	d527      	bpl.n	8010690 <__ssputs_r+0x8c>
 8010640:	4629      	mov	r1, r5
 8010642:	f7ff fbd7 	bl	800fdf4 <_malloc_r>
 8010646:	4606      	mov	r6, r0
 8010648:	b360      	cbz	r0, 80106a4 <__ssputs_r+0xa0>
 801064a:	6921      	ldr	r1, [r4, #16]
 801064c:	464a      	mov	r2, r9
 801064e:	f7fe fcd2 	bl	800eff6 <memcpy>
 8010652:	89a3      	ldrh	r3, [r4, #12]
 8010654:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801065c:	81a3      	strh	r3, [r4, #12]
 801065e:	6126      	str	r6, [r4, #16]
 8010660:	6165      	str	r5, [r4, #20]
 8010662:	444e      	add	r6, r9
 8010664:	eba5 0509 	sub.w	r5, r5, r9
 8010668:	6026      	str	r6, [r4, #0]
 801066a:	60a5      	str	r5, [r4, #8]
 801066c:	463e      	mov	r6, r7
 801066e:	42be      	cmp	r6, r7
 8010670:	d900      	bls.n	8010674 <__ssputs_r+0x70>
 8010672:	463e      	mov	r6, r7
 8010674:	6820      	ldr	r0, [r4, #0]
 8010676:	4632      	mov	r2, r6
 8010678:	4641      	mov	r1, r8
 801067a:	f000 f9c9 	bl	8010a10 <memmove>
 801067e:	68a3      	ldr	r3, [r4, #8]
 8010680:	1b9b      	subs	r3, r3, r6
 8010682:	60a3      	str	r3, [r4, #8]
 8010684:	6823      	ldr	r3, [r4, #0]
 8010686:	4433      	add	r3, r6
 8010688:	6023      	str	r3, [r4, #0]
 801068a:	2000      	movs	r0, #0
 801068c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010690:	462a      	mov	r2, r5
 8010692:	f000 fa2d 	bl	8010af0 <_realloc_r>
 8010696:	4606      	mov	r6, r0
 8010698:	2800      	cmp	r0, #0
 801069a:	d1e0      	bne.n	801065e <__ssputs_r+0x5a>
 801069c:	6921      	ldr	r1, [r4, #16]
 801069e:	4650      	mov	r0, sl
 80106a0:	f7ff fb34 	bl	800fd0c <_free_r>
 80106a4:	230c      	movs	r3, #12
 80106a6:	f8ca 3000 	str.w	r3, [sl]
 80106aa:	89a3      	ldrh	r3, [r4, #12]
 80106ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80106b0:	81a3      	strh	r3, [r4, #12]
 80106b2:	f04f 30ff 	mov.w	r0, #4294967295
 80106b6:	e7e9      	b.n	801068c <__ssputs_r+0x88>

080106b8 <_svfiprintf_r>:
 80106b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106bc:	4698      	mov	r8, r3
 80106be:	898b      	ldrh	r3, [r1, #12]
 80106c0:	061b      	lsls	r3, r3, #24
 80106c2:	b09d      	sub	sp, #116	; 0x74
 80106c4:	4607      	mov	r7, r0
 80106c6:	460d      	mov	r5, r1
 80106c8:	4614      	mov	r4, r2
 80106ca:	d50e      	bpl.n	80106ea <_svfiprintf_r+0x32>
 80106cc:	690b      	ldr	r3, [r1, #16]
 80106ce:	b963      	cbnz	r3, 80106ea <_svfiprintf_r+0x32>
 80106d0:	2140      	movs	r1, #64	; 0x40
 80106d2:	f7ff fb8f 	bl	800fdf4 <_malloc_r>
 80106d6:	6028      	str	r0, [r5, #0]
 80106d8:	6128      	str	r0, [r5, #16]
 80106da:	b920      	cbnz	r0, 80106e6 <_svfiprintf_r+0x2e>
 80106dc:	230c      	movs	r3, #12
 80106de:	603b      	str	r3, [r7, #0]
 80106e0:	f04f 30ff 	mov.w	r0, #4294967295
 80106e4:	e0d0      	b.n	8010888 <_svfiprintf_r+0x1d0>
 80106e6:	2340      	movs	r3, #64	; 0x40
 80106e8:	616b      	str	r3, [r5, #20]
 80106ea:	2300      	movs	r3, #0
 80106ec:	9309      	str	r3, [sp, #36]	; 0x24
 80106ee:	2320      	movs	r3, #32
 80106f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80106f4:	f8cd 800c 	str.w	r8, [sp, #12]
 80106f8:	2330      	movs	r3, #48	; 0x30
 80106fa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80108a0 <_svfiprintf_r+0x1e8>
 80106fe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010702:	f04f 0901 	mov.w	r9, #1
 8010706:	4623      	mov	r3, r4
 8010708:	469a      	mov	sl, r3
 801070a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801070e:	b10a      	cbz	r2, 8010714 <_svfiprintf_r+0x5c>
 8010710:	2a25      	cmp	r2, #37	; 0x25
 8010712:	d1f9      	bne.n	8010708 <_svfiprintf_r+0x50>
 8010714:	ebba 0b04 	subs.w	fp, sl, r4
 8010718:	d00b      	beq.n	8010732 <_svfiprintf_r+0x7a>
 801071a:	465b      	mov	r3, fp
 801071c:	4622      	mov	r2, r4
 801071e:	4629      	mov	r1, r5
 8010720:	4638      	mov	r0, r7
 8010722:	f7ff ff6f 	bl	8010604 <__ssputs_r>
 8010726:	3001      	adds	r0, #1
 8010728:	f000 80a9 	beq.w	801087e <_svfiprintf_r+0x1c6>
 801072c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801072e:	445a      	add	r2, fp
 8010730:	9209      	str	r2, [sp, #36]	; 0x24
 8010732:	f89a 3000 	ldrb.w	r3, [sl]
 8010736:	2b00      	cmp	r3, #0
 8010738:	f000 80a1 	beq.w	801087e <_svfiprintf_r+0x1c6>
 801073c:	2300      	movs	r3, #0
 801073e:	f04f 32ff 	mov.w	r2, #4294967295
 8010742:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010746:	f10a 0a01 	add.w	sl, sl, #1
 801074a:	9304      	str	r3, [sp, #16]
 801074c:	9307      	str	r3, [sp, #28]
 801074e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010752:	931a      	str	r3, [sp, #104]	; 0x68
 8010754:	4654      	mov	r4, sl
 8010756:	2205      	movs	r2, #5
 8010758:	f814 1b01 	ldrb.w	r1, [r4], #1
 801075c:	4850      	ldr	r0, [pc, #320]	; (80108a0 <_svfiprintf_r+0x1e8>)
 801075e:	f7ef fd6f 	bl	8000240 <memchr>
 8010762:	9a04      	ldr	r2, [sp, #16]
 8010764:	b9d8      	cbnz	r0, 801079e <_svfiprintf_r+0xe6>
 8010766:	06d0      	lsls	r0, r2, #27
 8010768:	bf44      	itt	mi
 801076a:	2320      	movmi	r3, #32
 801076c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010770:	0711      	lsls	r1, r2, #28
 8010772:	bf44      	itt	mi
 8010774:	232b      	movmi	r3, #43	; 0x2b
 8010776:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801077a:	f89a 3000 	ldrb.w	r3, [sl]
 801077e:	2b2a      	cmp	r3, #42	; 0x2a
 8010780:	d015      	beq.n	80107ae <_svfiprintf_r+0xf6>
 8010782:	9a07      	ldr	r2, [sp, #28]
 8010784:	4654      	mov	r4, sl
 8010786:	2000      	movs	r0, #0
 8010788:	f04f 0c0a 	mov.w	ip, #10
 801078c:	4621      	mov	r1, r4
 801078e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010792:	3b30      	subs	r3, #48	; 0x30
 8010794:	2b09      	cmp	r3, #9
 8010796:	d94d      	bls.n	8010834 <_svfiprintf_r+0x17c>
 8010798:	b1b0      	cbz	r0, 80107c8 <_svfiprintf_r+0x110>
 801079a:	9207      	str	r2, [sp, #28]
 801079c:	e014      	b.n	80107c8 <_svfiprintf_r+0x110>
 801079e:	eba0 0308 	sub.w	r3, r0, r8
 80107a2:	fa09 f303 	lsl.w	r3, r9, r3
 80107a6:	4313      	orrs	r3, r2
 80107a8:	9304      	str	r3, [sp, #16]
 80107aa:	46a2      	mov	sl, r4
 80107ac:	e7d2      	b.n	8010754 <_svfiprintf_r+0x9c>
 80107ae:	9b03      	ldr	r3, [sp, #12]
 80107b0:	1d19      	adds	r1, r3, #4
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	9103      	str	r1, [sp, #12]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	bfbb      	ittet	lt
 80107ba:	425b      	neglt	r3, r3
 80107bc:	f042 0202 	orrlt.w	r2, r2, #2
 80107c0:	9307      	strge	r3, [sp, #28]
 80107c2:	9307      	strlt	r3, [sp, #28]
 80107c4:	bfb8      	it	lt
 80107c6:	9204      	strlt	r2, [sp, #16]
 80107c8:	7823      	ldrb	r3, [r4, #0]
 80107ca:	2b2e      	cmp	r3, #46	; 0x2e
 80107cc:	d10c      	bne.n	80107e8 <_svfiprintf_r+0x130>
 80107ce:	7863      	ldrb	r3, [r4, #1]
 80107d0:	2b2a      	cmp	r3, #42	; 0x2a
 80107d2:	d134      	bne.n	801083e <_svfiprintf_r+0x186>
 80107d4:	9b03      	ldr	r3, [sp, #12]
 80107d6:	1d1a      	adds	r2, r3, #4
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	9203      	str	r2, [sp, #12]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	bfb8      	it	lt
 80107e0:	f04f 33ff 	movlt.w	r3, #4294967295
 80107e4:	3402      	adds	r4, #2
 80107e6:	9305      	str	r3, [sp, #20]
 80107e8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80108b0 <_svfiprintf_r+0x1f8>
 80107ec:	7821      	ldrb	r1, [r4, #0]
 80107ee:	2203      	movs	r2, #3
 80107f0:	4650      	mov	r0, sl
 80107f2:	f7ef fd25 	bl	8000240 <memchr>
 80107f6:	b138      	cbz	r0, 8010808 <_svfiprintf_r+0x150>
 80107f8:	9b04      	ldr	r3, [sp, #16]
 80107fa:	eba0 000a 	sub.w	r0, r0, sl
 80107fe:	2240      	movs	r2, #64	; 0x40
 8010800:	4082      	lsls	r2, r0
 8010802:	4313      	orrs	r3, r2
 8010804:	3401      	adds	r4, #1
 8010806:	9304      	str	r3, [sp, #16]
 8010808:	f814 1b01 	ldrb.w	r1, [r4], #1
 801080c:	4825      	ldr	r0, [pc, #148]	; (80108a4 <_svfiprintf_r+0x1ec>)
 801080e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010812:	2206      	movs	r2, #6
 8010814:	f7ef fd14 	bl	8000240 <memchr>
 8010818:	2800      	cmp	r0, #0
 801081a:	d038      	beq.n	801088e <_svfiprintf_r+0x1d6>
 801081c:	4b22      	ldr	r3, [pc, #136]	; (80108a8 <_svfiprintf_r+0x1f0>)
 801081e:	bb1b      	cbnz	r3, 8010868 <_svfiprintf_r+0x1b0>
 8010820:	9b03      	ldr	r3, [sp, #12]
 8010822:	3307      	adds	r3, #7
 8010824:	f023 0307 	bic.w	r3, r3, #7
 8010828:	3308      	adds	r3, #8
 801082a:	9303      	str	r3, [sp, #12]
 801082c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801082e:	4433      	add	r3, r6
 8010830:	9309      	str	r3, [sp, #36]	; 0x24
 8010832:	e768      	b.n	8010706 <_svfiprintf_r+0x4e>
 8010834:	fb0c 3202 	mla	r2, ip, r2, r3
 8010838:	460c      	mov	r4, r1
 801083a:	2001      	movs	r0, #1
 801083c:	e7a6      	b.n	801078c <_svfiprintf_r+0xd4>
 801083e:	2300      	movs	r3, #0
 8010840:	3401      	adds	r4, #1
 8010842:	9305      	str	r3, [sp, #20]
 8010844:	4619      	mov	r1, r3
 8010846:	f04f 0c0a 	mov.w	ip, #10
 801084a:	4620      	mov	r0, r4
 801084c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010850:	3a30      	subs	r2, #48	; 0x30
 8010852:	2a09      	cmp	r2, #9
 8010854:	d903      	bls.n	801085e <_svfiprintf_r+0x1a6>
 8010856:	2b00      	cmp	r3, #0
 8010858:	d0c6      	beq.n	80107e8 <_svfiprintf_r+0x130>
 801085a:	9105      	str	r1, [sp, #20]
 801085c:	e7c4      	b.n	80107e8 <_svfiprintf_r+0x130>
 801085e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010862:	4604      	mov	r4, r0
 8010864:	2301      	movs	r3, #1
 8010866:	e7f0      	b.n	801084a <_svfiprintf_r+0x192>
 8010868:	ab03      	add	r3, sp, #12
 801086a:	9300      	str	r3, [sp, #0]
 801086c:	462a      	mov	r2, r5
 801086e:	4b0f      	ldr	r3, [pc, #60]	; (80108ac <_svfiprintf_r+0x1f4>)
 8010870:	a904      	add	r1, sp, #16
 8010872:	4638      	mov	r0, r7
 8010874:	f7fd fe42 	bl	800e4fc <_printf_float>
 8010878:	1c42      	adds	r2, r0, #1
 801087a:	4606      	mov	r6, r0
 801087c:	d1d6      	bne.n	801082c <_svfiprintf_r+0x174>
 801087e:	89ab      	ldrh	r3, [r5, #12]
 8010880:	065b      	lsls	r3, r3, #25
 8010882:	f53f af2d 	bmi.w	80106e0 <_svfiprintf_r+0x28>
 8010886:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010888:	b01d      	add	sp, #116	; 0x74
 801088a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801088e:	ab03      	add	r3, sp, #12
 8010890:	9300      	str	r3, [sp, #0]
 8010892:	462a      	mov	r2, r5
 8010894:	4b05      	ldr	r3, [pc, #20]	; (80108ac <_svfiprintf_r+0x1f4>)
 8010896:	a904      	add	r1, sp, #16
 8010898:	4638      	mov	r0, r7
 801089a:	f7fe f8d3 	bl	800ea44 <_printf_i>
 801089e:	e7eb      	b.n	8010878 <_svfiprintf_r+0x1c0>
 80108a0:	080124bc 	.word	0x080124bc
 80108a4:	080124c6 	.word	0x080124c6
 80108a8:	0800e4fd 	.word	0x0800e4fd
 80108ac:	08010605 	.word	0x08010605
 80108b0:	080124c2 	.word	0x080124c2

080108b4 <__sflush_r>:
 80108b4:	898a      	ldrh	r2, [r1, #12]
 80108b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108ba:	4605      	mov	r5, r0
 80108bc:	0710      	lsls	r0, r2, #28
 80108be:	460c      	mov	r4, r1
 80108c0:	d458      	bmi.n	8010974 <__sflush_r+0xc0>
 80108c2:	684b      	ldr	r3, [r1, #4]
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	dc05      	bgt.n	80108d4 <__sflush_r+0x20>
 80108c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	dc02      	bgt.n	80108d4 <__sflush_r+0x20>
 80108ce:	2000      	movs	r0, #0
 80108d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108d6:	2e00      	cmp	r6, #0
 80108d8:	d0f9      	beq.n	80108ce <__sflush_r+0x1a>
 80108da:	2300      	movs	r3, #0
 80108dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80108e0:	682f      	ldr	r7, [r5, #0]
 80108e2:	6a21      	ldr	r1, [r4, #32]
 80108e4:	602b      	str	r3, [r5, #0]
 80108e6:	d032      	beq.n	801094e <__sflush_r+0x9a>
 80108e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80108ea:	89a3      	ldrh	r3, [r4, #12]
 80108ec:	075a      	lsls	r2, r3, #29
 80108ee:	d505      	bpl.n	80108fc <__sflush_r+0x48>
 80108f0:	6863      	ldr	r3, [r4, #4]
 80108f2:	1ac0      	subs	r0, r0, r3
 80108f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80108f6:	b10b      	cbz	r3, 80108fc <__sflush_r+0x48>
 80108f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80108fa:	1ac0      	subs	r0, r0, r3
 80108fc:	2300      	movs	r3, #0
 80108fe:	4602      	mov	r2, r0
 8010900:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010902:	6a21      	ldr	r1, [r4, #32]
 8010904:	4628      	mov	r0, r5
 8010906:	47b0      	blx	r6
 8010908:	1c43      	adds	r3, r0, #1
 801090a:	89a3      	ldrh	r3, [r4, #12]
 801090c:	d106      	bne.n	801091c <__sflush_r+0x68>
 801090e:	6829      	ldr	r1, [r5, #0]
 8010910:	291d      	cmp	r1, #29
 8010912:	d82b      	bhi.n	801096c <__sflush_r+0xb8>
 8010914:	4a29      	ldr	r2, [pc, #164]	; (80109bc <__sflush_r+0x108>)
 8010916:	410a      	asrs	r2, r1
 8010918:	07d6      	lsls	r6, r2, #31
 801091a:	d427      	bmi.n	801096c <__sflush_r+0xb8>
 801091c:	2200      	movs	r2, #0
 801091e:	6062      	str	r2, [r4, #4]
 8010920:	04d9      	lsls	r1, r3, #19
 8010922:	6922      	ldr	r2, [r4, #16]
 8010924:	6022      	str	r2, [r4, #0]
 8010926:	d504      	bpl.n	8010932 <__sflush_r+0x7e>
 8010928:	1c42      	adds	r2, r0, #1
 801092a:	d101      	bne.n	8010930 <__sflush_r+0x7c>
 801092c:	682b      	ldr	r3, [r5, #0]
 801092e:	b903      	cbnz	r3, 8010932 <__sflush_r+0x7e>
 8010930:	6560      	str	r0, [r4, #84]	; 0x54
 8010932:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010934:	602f      	str	r7, [r5, #0]
 8010936:	2900      	cmp	r1, #0
 8010938:	d0c9      	beq.n	80108ce <__sflush_r+0x1a>
 801093a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801093e:	4299      	cmp	r1, r3
 8010940:	d002      	beq.n	8010948 <__sflush_r+0x94>
 8010942:	4628      	mov	r0, r5
 8010944:	f7ff f9e2 	bl	800fd0c <_free_r>
 8010948:	2000      	movs	r0, #0
 801094a:	6360      	str	r0, [r4, #52]	; 0x34
 801094c:	e7c0      	b.n	80108d0 <__sflush_r+0x1c>
 801094e:	2301      	movs	r3, #1
 8010950:	4628      	mov	r0, r5
 8010952:	47b0      	blx	r6
 8010954:	1c41      	adds	r1, r0, #1
 8010956:	d1c8      	bne.n	80108ea <__sflush_r+0x36>
 8010958:	682b      	ldr	r3, [r5, #0]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d0c5      	beq.n	80108ea <__sflush_r+0x36>
 801095e:	2b1d      	cmp	r3, #29
 8010960:	d001      	beq.n	8010966 <__sflush_r+0xb2>
 8010962:	2b16      	cmp	r3, #22
 8010964:	d101      	bne.n	801096a <__sflush_r+0xb6>
 8010966:	602f      	str	r7, [r5, #0]
 8010968:	e7b1      	b.n	80108ce <__sflush_r+0x1a>
 801096a:	89a3      	ldrh	r3, [r4, #12]
 801096c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010970:	81a3      	strh	r3, [r4, #12]
 8010972:	e7ad      	b.n	80108d0 <__sflush_r+0x1c>
 8010974:	690f      	ldr	r7, [r1, #16]
 8010976:	2f00      	cmp	r7, #0
 8010978:	d0a9      	beq.n	80108ce <__sflush_r+0x1a>
 801097a:	0793      	lsls	r3, r2, #30
 801097c:	680e      	ldr	r6, [r1, #0]
 801097e:	bf08      	it	eq
 8010980:	694b      	ldreq	r3, [r1, #20]
 8010982:	600f      	str	r7, [r1, #0]
 8010984:	bf18      	it	ne
 8010986:	2300      	movne	r3, #0
 8010988:	eba6 0807 	sub.w	r8, r6, r7
 801098c:	608b      	str	r3, [r1, #8]
 801098e:	f1b8 0f00 	cmp.w	r8, #0
 8010992:	dd9c      	ble.n	80108ce <__sflush_r+0x1a>
 8010994:	6a21      	ldr	r1, [r4, #32]
 8010996:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010998:	4643      	mov	r3, r8
 801099a:	463a      	mov	r2, r7
 801099c:	4628      	mov	r0, r5
 801099e:	47b0      	blx	r6
 80109a0:	2800      	cmp	r0, #0
 80109a2:	dc06      	bgt.n	80109b2 <__sflush_r+0xfe>
 80109a4:	89a3      	ldrh	r3, [r4, #12]
 80109a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109aa:	81a3      	strh	r3, [r4, #12]
 80109ac:	f04f 30ff 	mov.w	r0, #4294967295
 80109b0:	e78e      	b.n	80108d0 <__sflush_r+0x1c>
 80109b2:	4407      	add	r7, r0
 80109b4:	eba8 0800 	sub.w	r8, r8, r0
 80109b8:	e7e9      	b.n	801098e <__sflush_r+0xda>
 80109ba:	bf00      	nop
 80109bc:	dfbffffe 	.word	0xdfbffffe

080109c0 <_fflush_r>:
 80109c0:	b538      	push	{r3, r4, r5, lr}
 80109c2:	690b      	ldr	r3, [r1, #16]
 80109c4:	4605      	mov	r5, r0
 80109c6:	460c      	mov	r4, r1
 80109c8:	b913      	cbnz	r3, 80109d0 <_fflush_r+0x10>
 80109ca:	2500      	movs	r5, #0
 80109cc:	4628      	mov	r0, r5
 80109ce:	bd38      	pop	{r3, r4, r5, pc}
 80109d0:	b118      	cbz	r0, 80109da <_fflush_r+0x1a>
 80109d2:	6a03      	ldr	r3, [r0, #32]
 80109d4:	b90b      	cbnz	r3, 80109da <_fflush_r+0x1a>
 80109d6:	f7fe f9e3 	bl	800eda0 <__sinit>
 80109da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109de:	2b00      	cmp	r3, #0
 80109e0:	d0f3      	beq.n	80109ca <_fflush_r+0xa>
 80109e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80109e4:	07d0      	lsls	r0, r2, #31
 80109e6:	d404      	bmi.n	80109f2 <_fflush_r+0x32>
 80109e8:	0599      	lsls	r1, r3, #22
 80109ea:	d402      	bmi.n	80109f2 <_fflush_r+0x32>
 80109ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109ee:	f7fe fb00 	bl	800eff2 <__retarget_lock_acquire_recursive>
 80109f2:	4628      	mov	r0, r5
 80109f4:	4621      	mov	r1, r4
 80109f6:	f7ff ff5d 	bl	80108b4 <__sflush_r>
 80109fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80109fc:	07da      	lsls	r2, r3, #31
 80109fe:	4605      	mov	r5, r0
 8010a00:	d4e4      	bmi.n	80109cc <_fflush_r+0xc>
 8010a02:	89a3      	ldrh	r3, [r4, #12]
 8010a04:	059b      	lsls	r3, r3, #22
 8010a06:	d4e1      	bmi.n	80109cc <_fflush_r+0xc>
 8010a08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a0a:	f7fe faf3 	bl	800eff4 <__retarget_lock_release_recursive>
 8010a0e:	e7dd      	b.n	80109cc <_fflush_r+0xc>

08010a10 <memmove>:
 8010a10:	4288      	cmp	r0, r1
 8010a12:	b510      	push	{r4, lr}
 8010a14:	eb01 0402 	add.w	r4, r1, r2
 8010a18:	d902      	bls.n	8010a20 <memmove+0x10>
 8010a1a:	4284      	cmp	r4, r0
 8010a1c:	4623      	mov	r3, r4
 8010a1e:	d807      	bhi.n	8010a30 <memmove+0x20>
 8010a20:	1e43      	subs	r3, r0, #1
 8010a22:	42a1      	cmp	r1, r4
 8010a24:	d008      	beq.n	8010a38 <memmove+0x28>
 8010a26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010a2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010a2e:	e7f8      	b.n	8010a22 <memmove+0x12>
 8010a30:	4402      	add	r2, r0
 8010a32:	4601      	mov	r1, r0
 8010a34:	428a      	cmp	r2, r1
 8010a36:	d100      	bne.n	8010a3a <memmove+0x2a>
 8010a38:	bd10      	pop	{r4, pc}
 8010a3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010a3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010a42:	e7f7      	b.n	8010a34 <memmove+0x24>

08010a44 <_sbrk_r>:
 8010a44:	b538      	push	{r3, r4, r5, lr}
 8010a46:	4d06      	ldr	r5, [pc, #24]	; (8010a60 <_sbrk_r+0x1c>)
 8010a48:	2300      	movs	r3, #0
 8010a4a:	4604      	mov	r4, r0
 8010a4c:	4608      	mov	r0, r1
 8010a4e:	602b      	str	r3, [r5, #0]
 8010a50:	f7f1 ff34 	bl	80028bc <_sbrk>
 8010a54:	1c43      	adds	r3, r0, #1
 8010a56:	d102      	bne.n	8010a5e <_sbrk_r+0x1a>
 8010a58:	682b      	ldr	r3, [r5, #0]
 8010a5a:	b103      	cbz	r3, 8010a5e <_sbrk_r+0x1a>
 8010a5c:	6023      	str	r3, [r4, #0]
 8010a5e:	bd38      	pop	{r3, r4, r5, pc}
 8010a60:	200042f8 	.word	0x200042f8

08010a64 <__assert_func>:
 8010a64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a66:	4614      	mov	r4, r2
 8010a68:	461a      	mov	r2, r3
 8010a6a:	4b09      	ldr	r3, [pc, #36]	; (8010a90 <__assert_func+0x2c>)
 8010a6c:	681b      	ldr	r3, [r3, #0]
 8010a6e:	4605      	mov	r5, r0
 8010a70:	68d8      	ldr	r0, [r3, #12]
 8010a72:	b14c      	cbz	r4, 8010a88 <__assert_func+0x24>
 8010a74:	4b07      	ldr	r3, [pc, #28]	; (8010a94 <__assert_func+0x30>)
 8010a76:	9100      	str	r1, [sp, #0]
 8010a78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010a7c:	4906      	ldr	r1, [pc, #24]	; (8010a98 <__assert_func+0x34>)
 8010a7e:	462b      	mov	r3, r5
 8010a80:	f000 f872 	bl	8010b68 <fiprintf>
 8010a84:	f000 f882 	bl	8010b8c <abort>
 8010a88:	4b04      	ldr	r3, [pc, #16]	; (8010a9c <__assert_func+0x38>)
 8010a8a:	461c      	mov	r4, r3
 8010a8c:	e7f3      	b.n	8010a76 <__assert_func+0x12>
 8010a8e:	bf00      	nop
 8010a90:	200001ec 	.word	0x200001ec
 8010a94:	080124d7 	.word	0x080124d7
 8010a98:	080124e4 	.word	0x080124e4
 8010a9c:	08012512 	.word	0x08012512

08010aa0 <_calloc_r>:
 8010aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010aa2:	fba1 2402 	umull	r2, r4, r1, r2
 8010aa6:	b94c      	cbnz	r4, 8010abc <_calloc_r+0x1c>
 8010aa8:	4611      	mov	r1, r2
 8010aaa:	9201      	str	r2, [sp, #4]
 8010aac:	f7ff f9a2 	bl	800fdf4 <_malloc_r>
 8010ab0:	9a01      	ldr	r2, [sp, #4]
 8010ab2:	4605      	mov	r5, r0
 8010ab4:	b930      	cbnz	r0, 8010ac4 <_calloc_r+0x24>
 8010ab6:	4628      	mov	r0, r5
 8010ab8:	b003      	add	sp, #12
 8010aba:	bd30      	pop	{r4, r5, pc}
 8010abc:	220c      	movs	r2, #12
 8010abe:	6002      	str	r2, [r0, #0]
 8010ac0:	2500      	movs	r5, #0
 8010ac2:	e7f8      	b.n	8010ab6 <_calloc_r+0x16>
 8010ac4:	4621      	mov	r1, r4
 8010ac6:	f7fe fa04 	bl	800eed2 <memset>
 8010aca:	e7f4      	b.n	8010ab6 <_calloc_r+0x16>

08010acc <__ascii_mbtowc>:
 8010acc:	b082      	sub	sp, #8
 8010ace:	b901      	cbnz	r1, 8010ad2 <__ascii_mbtowc+0x6>
 8010ad0:	a901      	add	r1, sp, #4
 8010ad2:	b142      	cbz	r2, 8010ae6 <__ascii_mbtowc+0x1a>
 8010ad4:	b14b      	cbz	r3, 8010aea <__ascii_mbtowc+0x1e>
 8010ad6:	7813      	ldrb	r3, [r2, #0]
 8010ad8:	600b      	str	r3, [r1, #0]
 8010ada:	7812      	ldrb	r2, [r2, #0]
 8010adc:	1e10      	subs	r0, r2, #0
 8010ade:	bf18      	it	ne
 8010ae0:	2001      	movne	r0, #1
 8010ae2:	b002      	add	sp, #8
 8010ae4:	4770      	bx	lr
 8010ae6:	4610      	mov	r0, r2
 8010ae8:	e7fb      	b.n	8010ae2 <__ascii_mbtowc+0x16>
 8010aea:	f06f 0001 	mvn.w	r0, #1
 8010aee:	e7f8      	b.n	8010ae2 <__ascii_mbtowc+0x16>

08010af0 <_realloc_r>:
 8010af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010af4:	4680      	mov	r8, r0
 8010af6:	4614      	mov	r4, r2
 8010af8:	460e      	mov	r6, r1
 8010afa:	b921      	cbnz	r1, 8010b06 <_realloc_r+0x16>
 8010afc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010b00:	4611      	mov	r1, r2
 8010b02:	f7ff b977 	b.w	800fdf4 <_malloc_r>
 8010b06:	b92a      	cbnz	r2, 8010b14 <_realloc_r+0x24>
 8010b08:	f7ff f900 	bl	800fd0c <_free_r>
 8010b0c:	4625      	mov	r5, r4
 8010b0e:	4628      	mov	r0, r5
 8010b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b14:	f000 f841 	bl	8010b9a <_malloc_usable_size_r>
 8010b18:	4284      	cmp	r4, r0
 8010b1a:	4607      	mov	r7, r0
 8010b1c:	d802      	bhi.n	8010b24 <_realloc_r+0x34>
 8010b1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010b22:	d812      	bhi.n	8010b4a <_realloc_r+0x5a>
 8010b24:	4621      	mov	r1, r4
 8010b26:	4640      	mov	r0, r8
 8010b28:	f7ff f964 	bl	800fdf4 <_malloc_r>
 8010b2c:	4605      	mov	r5, r0
 8010b2e:	2800      	cmp	r0, #0
 8010b30:	d0ed      	beq.n	8010b0e <_realloc_r+0x1e>
 8010b32:	42bc      	cmp	r4, r7
 8010b34:	4622      	mov	r2, r4
 8010b36:	4631      	mov	r1, r6
 8010b38:	bf28      	it	cs
 8010b3a:	463a      	movcs	r2, r7
 8010b3c:	f7fe fa5b 	bl	800eff6 <memcpy>
 8010b40:	4631      	mov	r1, r6
 8010b42:	4640      	mov	r0, r8
 8010b44:	f7ff f8e2 	bl	800fd0c <_free_r>
 8010b48:	e7e1      	b.n	8010b0e <_realloc_r+0x1e>
 8010b4a:	4635      	mov	r5, r6
 8010b4c:	e7df      	b.n	8010b0e <_realloc_r+0x1e>

08010b4e <__ascii_wctomb>:
 8010b4e:	b149      	cbz	r1, 8010b64 <__ascii_wctomb+0x16>
 8010b50:	2aff      	cmp	r2, #255	; 0xff
 8010b52:	bf85      	ittet	hi
 8010b54:	238a      	movhi	r3, #138	; 0x8a
 8010b56:	6003      	strhi	r3, [r0, #0]
 8010b58:	700a      	strbls	r2, [r1, #0]
 8010b5a:	f04f 30ff 	movhi.w	r0, #4294967295
 8010b5e:	bf98      	it	ls
 8010b60:	2001      	movls	r0, #1
 8010b62:	4770      	bx	lr
 8010b64:	4608      	mov	r0, r1
 8010b66:	4770      	bx	lr

08010b68 <fiprintf>:
 8010b68:	b40e      	push	{r1, r2, r3}
 8010b6a:	b503      	push	{r0, r1, lr}
 8010b6c:	4601      	mov	r1, r0
 8010b6e:	ab03      	add	r3, sp, #12
 8010b70:	4805      	ldr	r0, [pc, #20]	; (8010b88 <fiprintf+0x20>)
 8010b72:	f853 2b04 	ldr.w	r2, [r3], #4
 8010b76:	6800      	ldr	r0, [r0, #0]
 8010b78:	9301      	str	r3, [sp, #4]
 8010b7a:	f000 f83f 	bl	8010bfc <_vfiprintf_r>
 8010b7e:	b002      	add	sp, #8
 8010b80:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b84:	b003      	add	sp, #12
 8010b86:	4770      	bx	lr
 8010b88:	200001ec 	.word	0x200001ec

08010b8c <abort>:
 8010b8c:	b508      	push	{r3, lr}
 8010b8e:	2006      	movs	r0, #6
 8010b90:	f000 fa0c 	bl	8010fac <raise>
 8010b94:	2001      	movs	r0, #1
 8010b96:	f7f1 fe19 	bl	80027cc <_exit>

08010b9a <_malloc_usable_size_r>:
 8010b9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b9e:	1f18      	subs	r0, r3, #4
 8010ba0:	2b00      	cmp	r3, #0
 8010ba2:	bfbc      	itt	lt
 8010ba4:	580b      	ldrlt	r3, [r1, r0]
 8010ba6:	18c0      	addlt	r0, r0, r3
 8010ba8:	4770      	bx	lr

08010baa <__sfputc_r>:
 8010baa:	6893      	ldr	r3, [r2, #8]
 8010bac:	3b01      	subs	r3, #1
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	b410      	push	{r4}
 8010bb2:	6093      	str	r3, [r2, #8]
 8010bb4:	da08      	bge.n	8010bc8 <__sfputc_r+0x1e>
 8010bb6:	6994      	ldr	r4, [r2, #24]
 8010bb8:	42a3      	cmp	r3, r4
 8010bba:	db01      	blt.n	8010bc0 <__sfputc_r+0x16>
 8010bbc:	290a      	cmp	r1, #10
 8010bbe:	d103      	bne.n	8010bc8 <__sfputc_r+0x1e>
 8010bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bc4:	f000 b934 	b.w	8010e30 <__swbuf_r>
 8010bc8:	6813      	ldr	r3, [r2, #0]
 8010bca:	1c58      	adds	r0, r3, #1
 8010bcc:	6010      	str	r0, [r2, #0]
 8010bce:	7019      	strb	r1, [r3, #0]
 8010bd0:	4608      	mov	r0, r1
 8010bd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010bd6:	4770      	bx	lr

08010bd8 <__sfputs_r>:
 8010bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bda:	4606      	mov	r6, r0
 8010bdc:	460f      	mov	r7, r1
 8010bde:	4614      	mov	r4, r2
 8010be0:	18d5      	adds	r5, r2, r3
 8010be2:	42ac      	cmp	r4, r5
 8010be4:	d101      	bne.n	8010bea <__sfputs_r+0x12>
 8010be6:	2000      	movs	r0, #0
 8010be8:	e007      	b.n	8010bfa <__sfputs_r+0x22>
 8010bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bee:	463a      	mov	r2, r7
 8010bf0:	4630      	mov	r0, r6
 8010bf2:	f7ff ffda 	bl	8010baa <__sfputc_r>
 8010bf6:	1c43      	adds	r3, r0, #1
 8010bf8:	d1f3      	bne.n	8010be2 <__sfputs_r+0xa>
 8010bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010bfc <_vfiprintf_r>:
 8010bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c00:	460d      	mov	r5, r1
 8010c02:	b09d      	sub	sp, #116	; 0x74
 8010c04:	4614      	mov	r4, r2
 8010c06:	4698      	mov	r8, r3
 8010c08:	4606      	mov	r6, r0
 8010c0a:	b118      	cbz	r0, 8010c14 <_vfiprintf_r+0x18>
 8010c0c:	6a03      	ldr	r3, [r0, #32]
 8010c0e:	b90b      	cbnz	r3, 8010c14 <_vfiprintf_r+0x18>
 8010c10:	f7fe f8c6 	bl	800eda0 <__sinit>
 8010c14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c16:	07d9      	lsls	r1, r3, #31
 8010c18:	d405      	bmi.n	8010c26 <_vfiprintf_r+0x2a>
 8010c1a:	89ab      	ldrh	r3, [r5, #12]
 8010c1c:	059a      	lsls	r2, r3, #22
 8010c1e:	d402      	bmi.n	8010c26 <_vfiprintf_r+0x2a>
 8010c20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c22:	f7fe f9e6 	bl	800eff2 <__retarget_lock_acquire_recursive>
 8010c26:	89ab      	ldrh	r3, [r5, #12]
 8010c28:	071b      	lsls	r3, r3, #28
 8010c2a:	d501      	bpl.n	8010c30 <_vfiprintf_r+0x34>
 8010c2c:	692b      	ldr	r3, [r5, #16]
 8010c2e:	b99b      	cbnz	r3, 8010c58 <_vfiprintf_r+0x5c>
 8010c30:	4629      	mov	r1, r5
 8010c32:	4630      	mov	r0, r6
 8010c34:	f000 f93a 	bl	8010eac <__swsetup_r>
 8010c38:	b170      	cbz	r0, 8010c58 <_vfiprintf_r+0x5c>
 8010c3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010c3c:	07dc      	lsls	r4, r3, #31
 8010c3e:	d504      	bpl.n	8010c4a <_vfiprintf_r+0x4e>
 8010c40:	f04f 30ff 	mov.w	r0, #4294967295
 8010c44:	b01d      	add	sp, #116	; 0x74
 8010c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010c4a:	89ab      	ldrh	r3, [r5, #12]
 8010c4c:	0598      	lsls	r0, r3, #22
 8010c4e:	d4f7      	bmi.n	8010c40 <_vfiprintf_r+0x44>
 8010c50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010c52:	f7fe f9cf 	bl	800eff4 <__retarget_lock_release_recursive>
 8010c56:	e7f3      	b.n	8010c40 <_vfiprintf_r+0x44>
 8010c58:	2300      	movs	r3, #0
 8010c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8010c5c:	2320      	movs	r3, #32
 8010c5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010c62:	f8cd 800c 	str.w	r8, [sp, #12]
 8010c66:	2330      	movs	r3, #48	; 0x30
 8010c68:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010e1c <_vfiprintf_r+0x220>
 8010c6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010c70:	f04f 0901 	mov.w	r9, #1
 8010c74:	4623      	mov	r3, r4
 8010c76:	469a      	mov	sl, r3
 8010c78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c7c:	b10a      	cbz	r2, 8010c82 <_vfiprintf_r+0x86>
 8010c7e:	2a25      	cmp	r2, #37	; 0x25
 8010c80:	d1f9      	bne.n	8010c76 <_vfiprintf_r+0x7a>
 8010c82:	ebba 0b04 	subs.w	fp, sl, r4
 8010c86:	d00b      	beq.n	8010ca0 <_vfiprintf_r+0xa4>
 8010c88:	465b      	mov	r3, fp
 8010c8a:	4622      	mov	r2, r4
 8010c8c:	4629      	mov	r1, r5
 8010c8e:	4630      	mov	r0, r6
 8010c90:	f7ff ffa2 	bl	8010bd8 <__sfputs_r>
 8010c94:	3001      	adds	r0, #1
 8010c96:	f000 80a9 	beq.w	8010dec <_vfiprintf_r+0x1f0>
 8010c9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c9c:	445a      	add	r2, fp
 8010c9e:	9209      	str	r2, [sp, #36]	; 0x24
 8010ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	f000 80a1 	beq.w	8010dec <_vfiprintf_r+0x1f0>
 8010caa:	2300      	movs	r3, #0
 8010cac:	f04f 32ff 	mov.w	r2, #4294967295
 8010cb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010cb4:	f10a 0a01 	add.w	sl, sl, #1
 8010cb8:	9304      	str	r3, [sp, #16]
 8010cba:	9307      	str	r3, [sp, #28]
 8010cbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010cc0:	931a      	str	r3, [sp, #104]	; 0x68
 8010cc2:	4654      	mov	r4, sl
 8010cc4:	2205      	movs	r2, #5
 8010cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010cca:	4854      	ldr	r0, [pc, #336]	; (8010e1c <_vfiprintf_r+0x220>)
 8010ccc:	f7ef fab8 	bl	8000240 <memchr>
 8010cd0:	9a04      	ldr	r2, [sp, #16]
 8010cd2:	b9d8      	cbnz	r0, 8010d0c <_vfiprintf_r+0x110>
 8010cd4:	06d1      	lsls	r1, r2, #27
 8010cd6:	bf44      	itt	mi
 8010cd8:	2320      	movmi	r3, #32
 8010cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010cde:	0713      	lsls	r3, r2, #28
 8010ce0:	bf44      	itt	mi
 8010ce2:	232b      	movmi	r3, #43	; 0x2b
 8010ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8010cec:	2b2a      	cmp	r3, #42	; 0x2a
 8010cee:	d015      	beq.n	8010d1c <_vfiprintf_r+0x120>
 8010cf0:	9a07      	ldr	r2, [sp, #28]
 8010cf2:	4654      	mov	r4, sl
 8010cf4:	2000      	movs	r0, #0
 8010cf6:	f04f 0c0a 	mov.w	ip, #10
 8010cfa:	4621      	mov	r1, r4
 8010cfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010d00:	3b30      	subs	r3, #48	; 0x30
 8010d02:	2b09      	cmp	r3, #9
 8010d04:	d94d      	bls.n	8010da2 <_vfiprintf_r+0x1a6>
 8010d06:	b1b0      	cbz	r0, 8010d36 <_vfiprintf_r+0x13a>
 8010d08:	9207      	str	r2, [sp, #28]
 8010d0a:	e014      	b.n	8010d36 <_vfiprintf_r+0x13a>
 8010d0c:	eba0 0308 	sub.w	r3, r0, r8
 8010d10:	fa09 f303 	lsl.w	r3, r9, r3
 8010d14:	4313      	orrs	r3, r2
 8010d16:	9304      	str	r3, [sp, #16]
 8010d18:	46a2      	mov	sl, r4
 8010d1a:	e7d2      	b.n	8010cc2 <_vfiprintf_r+0xc6>
 8010d1c:	9b03      	ldr	r3, [sp, #12]
 8010d1e:	1d19      	adds	r1, r3, #4
 8010d20:	681b      	ldr	r3, [r3, #0]
 8010d22:	9103      	str	r1, [sp, #12]
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	bfbb      	ittet	lt
 8010d28:	425b      	neglt	r3, r3
 8010d2a:	f042 0202 	orrlt.w	r2, r2, #2
 8010d2e:	9307      	strge	r3, [sp, #28]
 8010d30:	9307      	strlt	r3, [sp, #28]
 8010d32:	bfb8      	it	lt
 8010d34:	9204      	strlt	r2, [sp, #16]
 8010d36:	7823      	ldrb	r3, [r4, #0]
 8010d38:	2b2e      	cmp	r3, #46	; 0x2e
 8010d3a:	d10c      	bne.n	8010d56 <_vfiprintf_r+0x15a>
 8010d3c:	7863      	ldrb	r3, [r4, #1]
 8010d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8010d40:	d134      	bne.n	8010dac <_vfiprintf_r+0x1b0>
 8010d42:	9b03      	ldr	r3, [sp, #12]
 8010d44:	1d1a      	adds	r2, r3, #4
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	9203      	str	r2, [sp, #12]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	bfb8      	it	lt
 8010d4e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010d52:	3402      	adds	r4, #2
 8010d54:	9305      	str	r3, [sp, #20]
 8010d56:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010e2c <_vfiprintf_r+0x230>
 8010d5a:	7821      	ldrb	r1, [r4, #0]
 8010d5c:	2203      	movs	r2, #3
 8010d5e:	4650      	mov	r0, sl
 8010d60:	f7ef fa6e 	bl	8000240 <memchr>
 8010d64:	b138      	cbz	r0, 8010d76 <_vfiprintf_r+0x17a>
 8010d66:	9b04      	ldr	r3, [sp, #16]
 8010d68:	eba0 000a 	sub.w	r0, r0, sl
 8010d6c:	2240      	movs	r2, #64	; 0x40
 8010d6e:	4082      	lsls	r2, r0
 8010d70:	4313      	orrs	r3, r2
 8010d72:	3401      	adds	r4, #1
 8010d74:	9304      	str	r3, [sp, #16]
 8010d76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d7a:	4829      	ldr	r0, [pc, #164]	; (8010e20 <_vfiprintf_r+0x224>)
 8010d7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d80:	2206      	movs	r2, #6
 8010d82:	f7ef fa5d 	bl	8000240 <memchr>
 8010d86:	2800      	cmp	r0, #0
 8010d88:	d03f      	beq.n	8010e0a <_vfiprintf_r+0x20e>
 8010d8a:	4b26      	ldr	r3, [pc, #152]	; (8010e24 <_vfiprintf_r+0x228>)
 8010d8c:	bb1b      	cbnz	r3, 8010dd6 <_vfiprintf_r+0x1da>
 8010d8e:	9b03      	ldr	r3, [sp, #12]
 8010d90:	3307      	adds	r3, #7
 8010d92:	f023 0307 	bic.w	r3, r3, #7
 8010d96:	3308      	adds	r3, #8
 8010d98:	9303      	str	r3, [sp, #12]
 8010d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d9c:	443b      	add	r3, r7
 8010d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8010da0:	e768      	b.n	8010c74 <_vfiprintf_r+0x78>
 8010da2:	fb0c 3202 	mla	r2, ip, r2, r3
 8010da6:	460c      	mov	r4, r1
 8010da8:	2001      	movs	r0, #1
 8010daa:	e7a6      	b.n	8010cfa <_vfiprintf_r+0xfe>
 8010dac:	2300      	movs	r3, #0
 8010dae:	3401      	adds	r4, #1
 8010db0:	9305      	str	r3, [sp, #20]
 8010db2:	4619      	mov	r1, r3
 8010db4:	f04f 0c0a 	mov.w	ip, #10
 8010db8:	4620      	mov	r0, r4
 8010dba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010dbe:	3a30      	subs	r2, #48	; 0x30
 8010dc0:	2a09      	cmp	r2, #9
 8010dc2:	d903      	bls.n	8010dcc <_vfiprintf_r+0x1d0>
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d0c6      	beq.n	8010d56 <_vfiprintf_r+0x15a>
 8010dc8:	9105      	str	r1, [sp, #20]
 8010dca:	e7c4      	b.n	8010d56 <_vfiprintf_r+0x15a>
 8010dcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8010dd0:	4604      	mov	r4, r0
 8010dd2:	2301      	movs	r3, #1
 8010dd4:	e7f0      	b.n	8010db8 <_vfiprintf_r+0x1bc>
 8010dd6:	ab03      	add	r3, sp, #12
 8010dd8:	9300      	str	r3, [sp, #0]
 8010dda:	462a      	mov	r2, r5
 8010ddc:	4b12      	ldr	r3, [pc, #72]	; (8010e28 <_vfiprintf_r+0x22c>)
 8010dde:	a904      	add	r1, sp, #16
 8010de0:	4630      	mov	r0, r6
 8010de2:	f7fd fb8b 	bl	800e4fc <_printf_float>
 8010de6:	4607      	mov	r7, r0
 8010de8:	1c78      	adds	r0, r7, #1
 8010dea:	d1d6      	bne.n	8010d9a <_vfiprintf_r+0x19e>
 8010dec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010dee:	07d9      	lsls	r1, r3, #31
 8010df0:	d405      	bmi.n	8010dfe <_vfiprintf_r+0x202>
 8010df2:	89ab      	ldrh	r3, [r5, #12]
 8010df4:	059a      	lsls	r2, r3, #22
 8010df6:	d402      	bmi.n	8010dfe <_vfiprintf_r+0x202>
 8010df8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010dfa:	f7fe f8fb 	bl	800eff4 <__retarget_lock_release_recursive>
 8010dfe:	89ab      	ldrh	r3, [r5, #12]
 8010e00:	065b      	lsls	r3, r3, #25
 8010e02:	f53f af1d 	bmi.w	8010c40 <_vfiprintf_r+0x44>
 8010e06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010e08:	e71c      	b.n	8010c44 <_vfiprintf_r+0x48>
 8010e0a:	ab03      	add	r3, sp, #12
 8010e0c:	9300      	str	r3, [sp, #0]
 8010e0e:	462a      	mov	r2, r5
 8010e10:	4b05      	ldr	r3, [pc, #20]	; (8010e28 <_vfiprintf_r+0x22c>)
 8010e12:	a904      	add	r1, sp, #16
 8010e14:	4630      	mov	r0, r6
 8010e16:	f7fd fe15 	bl	800ea44 <_printf_i>
 8010e1a:	e7e4      	b.n	8010de6 <_vfiprintf_r+0x1ea>
 8010e1c:	080124bc 	.word	0x080124bc
 8010e20:	080124c6 	.word	0x080124c6
 8010e24:	0800e4fd 	.word	0x0800e4fd
 8010e28:	08010bd9 	.word	0x08010bd9
 8010e2c:	080124c2 	.word	0x080124c2

08010e30 <__swbuf_r>:
 8010e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e32:	460e      	mov	r6, r1
 8010e34:	4614      	mov	r4, r2
 8010e36:	4605      	mov	r5, r0
 8010e38:	b118      	cbz	r0, 8010e42 <__swbuf_r+0x12>
 8010e3a:	6a03      	ldr	r3, [r0, #32]
 8010e3c:	b90b      	cbnz	r3, 8010e42 <__swbuf_r+0x12>
 8010e3e:	f7fd ffaf 	bl	800eda0 <__sinit>
 8010e42:	69a3      	ldr	r3, [r4, #24]
 8010e44:	60a3      	str	r3, [r4, #8]
 8010e46:	89a3      	ldrh	r3, [r4, #12]
 8010e48:	071a      	lsls	r2, r3, #28
 8010e4a:	d525      	bpl.n	8010e98 <__swbuf_r+0x68>
 8010e4c:	6923      	ldr	r3, [r4, #16]
 8010e4e:	b31b      	cbz	r3, 8010e98 <__swbuf_r+0x68>
 8010e50:	6823      	ldr	r3, [r4, #0]
 8010e52:	6922      	ldr	r2, [r4, #16]
 8010e54:	1a98      	subs	r0, r3, r2
 8010e56:	6963      	ldr	r3, [r4, #20]
 8010e58:	b2f6      	uxtb	r6, r6
 8010e5a:	4283      	cmp	r3, r0
 8010e5c:	4637      	mov	r7, r6
 8010e5e:	dc04      	bgt.n	8010e6a <__swbuf_r+0x3a>
 8010e60:	4621      	mov	r1, r4
 8010e62:	4628      	mov	r0, r5
 8010e64:	f7ff fdac 	bl	80109c0 <_fflush_r>
 8010e68:	b9e0      	cbnz	r0, 8010ea4 <__swbuf_r+0x74>
 8010e6a:	68a3      	ldr	r3, [r4, #8]
 8010e6c:	3b01      	subs	r3, #1
 8010e6e:	60a3      	str	r3, [r4, #8]
 8010e70:	6823      	ldr	r3, [r4, #0]
 8010e72:	1c5a      	adds	r2, r3, #1
 8010e74:	6022      	str	r2, [r4, #0]
 8010e76:	701e      	strb	r6, [r3, #0]
 8010e78:	6962      	ldr	r2, [r4, #20]
 8010e7a:	1c43      	adds	r3, r0, #1
 8010e7c:	429a      	cmp	r2, r3
 8010e7e:	d004      	beq.n	8010e8a <__swbuf_r+0x5a>
 8010e80:	89a3      	ldrh	r3, [r4, #12]
 8010e82:	07db      	lsls	r3, r3, #31
 8010e84:	d506      	bpl.n	8010e94 <__swbuf_r+0x64>
 8010e86:	2e0a      	cmp	r6, #10
 8010e88:	d104      	bne.n	8010e94 <__swbuf_r+0x64>
 8010e8a:	4621      	mov	r1, r4
 8010e8c:	4628      	mov	r0, r5
 8010e8e:	f7ff fd97 	bl	80109c0 <_fflush_r>
 8010e92:	b938      	cbnz	r0, 8010ea4 <__swbuf_r+0x74>
 8010e94:	4638      	mov	r0, r7
 8010e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e98:	4621      	mov	r1, r4
 8010e9a:	4628      	mov	r0, r5
 8010e9c:	f000 f806 	bl	8010eac <__swsetup_r>
 8010ea0:	2800      	cmp	r0, #0
 8010ea2:	d0d5      	beq.n	8010e50 <__swbuf_r+0x20>
 8010ea4:	f04f 37ff 	mov.w	r7, #4294967295
 8010ea8:	e7f4      	b.n	8010e94 <__swbuf_r+0x64>
	...

08010eac <__swsetup_r>:
 8010eac:	b538      	push	{r3, r4, r5, lr}
 8010eae:	4b2a      	ldr	r3, [pc, #168]	; (8010f58 <__swsetup_r+0xac>)
 8010eb0:	4605      	mov	r5, r0
 8010eb2:	6818      	ldr	r0, [r3, #0]
 8010eb4:	460c      	mov	r4, r1
 8010eb6:	b118      	cbz	r0, 8010ec0 <__swsetup_r+0x14>
 8010eb8:	6a03      	ldr	r3, [r0, #32]
 8010eba:	b90b      	cbnz	r3, 8010ec0 <__swsetup_r+0x14>
 8010ebc:	f7fd ff70 	bl	800eda0 <__sinit>
 8010ec0:	89a3      	ldrh	r3, [r4, #12]
 8010ec2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010ec6:	0718      	lsls	r0, r3, #28
 8010ec8:	d422      	bmi.n	8010f10 <__swsetup_r+0x64>
 8010eca:	06d9      	lsls	r1, r3, #27
 8010ecc:	d407      	bmi.n	8010ede <__swsetup_r+0x32>
 8010ece:	2309      	movs	r3, #9
 8010ed0:	602b      	str	r3, [r5, #0]
 8010ed2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010ed6:	81a3      	strh	r3, [r4, #12]
 8010ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8010edc:	e034      	b.n	8010f48 <__swsetup_r+0x9c>
 8010ede:	0758      	lsls	r0, r3, #29
 8010ee0:	d512      	bpl.n	8010f08 <__swsetup_r+0x5c>
 8010ee2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010ee4:	b141      	cbz	r1, 8010ef8 <__swsetup_r+0x4c>
 8010ee6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010eea:	4299      	cmp	r1, r3
 8010eec:	d002      	beq.n	8010ef4 <__swsetup_r+0x48>
 8010eee:	4628      	mov	r0, r5
 8010ef0:	f7fe ff0c 	bl	800fd0c <_free_r>
 8010ef4:	2300      	movs	r3, #0
 8010ef6:	6363      	str	r3, [r4, #52]	; 0x34
 8010ef8:	89a3      	ldrh	r3, [r4, #12]
 8010efa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010efe:	81a3      	strh	r3, [r4, #12]
 8010f00:	2300      	movs	r3, #0
 8010f02:	6063      	str	r3, [r4, #4]
 8010f04:	6923      	ldr	r3, [r4, #16]
 8010f06:	6023      	str	r3, [r4, #0]
 8010f08:	89a3      	ldrh	r3, [r4, #12]
 8010f0a:	f043 0308 	orr.w	r3, r3, #8
 8010f0e:	81a3      	strh	r3, [r4, #12]
 8010f10:	6923      	ldr	r3, [r4, #16]
 8010f12:	b94b      	cbnz	r3, 8010f28 <__swsetup_r+0x7c>
 8010f14:	89a3      	ldrh	r3, [r4, #12]
 8010f16:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010f1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f1e:	d003      	beq.n	8010f28 <__swsetup_r+0x7c>
 8010f20:	4621      	mov	r1, r4
 8010f22:	4628      	mov	r0, r5
 8010f24:	f000 f884 	bl	8011030 <__smakebuf_r>
 8010f28:	89a0      	ldrh	r0, [r4, #12]
 8010f2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010f2e:	f010 0301 	ands.w	r3, r0, #1
 8010f32:	d00a      	beq.n	8010f4a <__swsetup_r+0x9e>
 8010f34:	2300      	movs	r3, #0
 8010f36:	60a3      	str	r3, [r4, #8]
 8010f38:	6963      	ldr	r3, [r4, #20]
 8010f3a:	425b      	negs	r3, r3
 8010f3c:	61a3      	str	r3, [r4, #24]
 8010f3e:	6923      	ldr	r3, [r4, #16]
 8010f40:	b943      	cbnz	r3, 8010f54 <__swsetup_r+0xa8>
 8010f42:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010f46:	d1c4      	bne.n	8010ed2 <__swsetup_r+0x26>
 8010f48:	bd38      	pop	{r3, r4, r5, pc}
 8010f4a:	0781      	lsls	r1, r0, #30
 8010f4c:	bf58      	it	pl
 8010f4e:	6963      	ldrpl	r3, [r4, #20]
 8010f50:	60a3      	str	r3, [r4, #8]
 8010f52:	e7f4      	b.n	8010f3e <__swsetup_r+0x92>
 8010f54:	2000      	movs	r0, #0
 8010f56:	e7f7      	b.n	8010f48 <__swsetup_r+0x9c>
 8010f58:	200001ec 	.word	0x200001ec

08010f5c <_raise_r>:
 8010f5c:	291f      	cmp	r1, #31
 8010f5e:	b538      	push	{r3, r4, r5, lr}
 8010f60:	4604      	mov	r4, r0
 8010f62:	460d      	mov	r5, r1
 8010f64:	d904      	bls.n	8010f70 <_raise_r+0x14>
 8010f66:	2316      	movs	r3, #22
 8010f68:	6003      	str	r3, [r0, #0]
 8010f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8010f6e:	bd38      	pop	{r3, r4, r5, pc}
 8010f70:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010f72:	b112      	cbz	r2, 8010f7a <_raise_r+0x1e>
 8010f74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010f78:	b94b      	cbnz	r3, 8010f8e <_raise_r+0x32>
 8010f7a:	4620      	mov	r0, r4
 8010f7c:	f000 f830 	bl	8010fe0 <_getpid_r>
 8010f80:	462a      	mov	r2, r5
 8010f82:	4601      	mov	r1, r0
 8010f84:	4620      	mov	r0, r4
 8010f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f8a:	f000 b817 	b.w	8010fbc <_kill_r>
 8010f8e:	2b01      	cmp	r3, #1
 8010f90:	d00a      	beq.n	8010fa8 <_raise_r+0x4c>
 8010f92:	1c59      	adds	r1, r3, #1
 8010f94:	d103      	bne.n	8010f9e <_raise_r+0x42>
 8010f96:	2316      	movs	r3, #22
 8010f98:	6003      	str	r3, [r0, #0]
 8010f9a:	2001      	movs	r0, #1
 8010f9c:	e7e7      	b.n	8010f6e <_raise_r+0x12>
 8010f9e:	2400      	movs	r4, #0
 8010fa0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010fa4:	4628      	mov	r0, r5
 8010fa6:	4798      	blx	r3
 8010fa8:	2000      	movs	r0, #0
 8010faa:	e7e0      	b.n	8010f6e <_raise_r+0x12>

08010fac <raise>:
 8010fac:	4b02      	ldr	r3, [pc, #8]	; (8010fb8 <raise+0xc>)
 8010fae:	4601      	mov	r1, r0
 8010fb0:	6818      	ldr	r0, [r3, #0]
 8010fb2:	f7ff bfd3 	b.w	8010f5c <_raise_r>
 8010fb6:	bf00      	nop
 8010fb8:	200001ec 	.word	0x200001ec

08010fbc <_kill_r>:
 8010fbc:	b538      	push	{r3, r4, r5, lr}
 8010fbe:	4d07      	ldr	r5, [pc, #28]	; (8010fdc <_kill_r+0x20>)
 8010fc0:	2300      	movs	r3, #0
 8010fc2:	4604      	mov	r4, r0
 8010fc4:	4608      	mov	r0, r1
 8010fc6:	4611      	mov	r1, r2
 8010fc8:	602b      	str	r3, [r5, #0]
 8010fca:	f7f1 fbef 	bl	80027ac <_kill>
 8010fce:	1c43      	adds	r3, r0, #1
 8010fd0:	d102      	bne.n	8010fd8 <_kill_r+0x1c>
 8010fd2:	682b      	ldr	r3, [r5, #0]
 8010fd4:	b103      	cbz	r3, 8010fd8 <_kill_r+0x1c>
 8010fd6:	6023      	str	r3, [r4, #0]
 8010fd8:	bd38      	pop	{r3, r4, r5, pc}
 8010fda:	bf00      	nop
 8010fdc:	200042f8 	.word	0x200042f8

08010fe0 <_getpid_r>:
 8010fe0:	f7f1 bbdc 	b.w	800279c <_getpid>

08010fe4 <__swhatbuf_r>:
 8010fe4:	b570      	push	{r4, r5, r6, lr}
 8010fe6:	460c      	mov	r4, r1
 8010fe8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010fec:	2900      	cmp	r1, #0
 8010fee:	b096      	sub	sp, #88	; 0x58
 8010ff0:	4615      	mov	r5, r2
 8010ff2:	461e      	mov	r6, r3
 8010ff4:	da0d      	bge.n	8011012 <__swhatbuf_r+0x2e>
 8010ff6:	89a3      	ldrh	r3, [r4, #12]
 8010ff8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010ffc:	f04f 0100 	mov.w	r1, #0
 8011000:	bf0c      	ite	eq
 8011002:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011006:	2340      	movne	r3, #64	; 0x40
 8011008:	2000      	movs	r0, #0
 801100a:	6031      	str	r1, [r6, #0]
 801100c:	602b      	str	r3, [r5, #0]
 801100e:	b016      	add	sp, #88	; 0x58
 8011010:	bd70      	pop	{r4, r5, r6, pc}
 8011012:	466a      	mov	r2, sp
 8011014:	f000 f848 	bl	80110a8 <_fstat_r>
 8011018:	2800      	cmp	r0, #0
 801101a:	dbec      	blt.n	8010ff6 <__swhatbuf_r+0x12>
 801101c:	9901      	ldr	r1, [sp, #4]
 801101e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011022:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011026:	4259      	negs	r1, r3
 8011028:	4159      	adcs	r1, r3
 801102a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801102e:	e7eb      	b.n	8011008 <__swhatbuf_r+0x24>

08011030 <__smakebuf_r>:
 8011030:	898b      	ldrh	r3, [r1, #12]
 8011032:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011034:	079d      	lsls	r5, r3, #30
 8011036:	4606      	mov	r6, r0
 8011038:	460c      	mov	r4, r1
 801103a:	d507      	bpl.n	801104c <__smakebuf_r+0x1c>
 801103c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011040:	6023      	str	r3, [r4, #0]
 8011042:	6123      	str	r3, [r4, #16]
 8011044:	2301      	movs	r3, #1
 8011046:	6163      	str	r3, [r4, #20]
 8011048:	b002      	add	sp, #8
 801104a:	bd70      	pop	{r4, r5, r6, pc}
 801104c:	ab01      	add	r3, sp, #4
 801104e:	466a      	mov	r2, sp
 8011050:	f7ff ffc8 	bl	8010fe4 <__swhatbuf_r>
 8011054:	9900      	ldr	r1, [sp, #0]
 8011056:	4605      	mov	r5, r0
 8011058:	4630      	mov	r0, r6
 801105a:	f7fe fecb 	bl	800fdf4 <_malloc_r>
 801105e:	b948      	cbnz	r0, 8011074 <__smakebuf_r+0x44>
 8011060:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011064:	059a      	lsls	r2, r3, #22
 8011066:	d4ef      	bmi.n	8011048 <__smakebuf_r+0x18>
 8011068:	f023 0303 	bic.w	r3, r3, #3
 801106c:	f043 0302 	orr.w	r3, r3, #2
 8011070:	81a3      	strh	r3, [r4, #12]
 8011072:	e7e3      	b.n	801103c <__smakebuf_r+0xc>
 8011074:	89a3      	ldrh	r3, [r4, #12]
 8011076:	6020      	str	r0, [r4, #0]
 8011078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801107c:	81a3      	strh	r3, [r4, #12]
 801107e:	9b00      	ldr	r3, [sp, #0]
 8011080:	6163      	str	r3, [r4, #20]
 8011082:	9b01      	ldr	r3, [sp, #4]
 8011084:	6120      	str	r0, [r4, #16]
 8011086:	b15b      	cbz	r3, 80110a0 <__smakebuf_r+0x70>
 8011088:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801108c:	4630      	mov	r0, r6
 801108e:	f000 f81d 	bl	80110cc <_isatty_r>
 8011092:	b128      	cbz	r0, 80110a0 <__smakebuf_r+0x70>
 8011094:	89a3      	ldrh	r3, [r4, #12]
 8011096:	f023 0303 	bic.w	r3, r3, #3
 801109a:	f043 0301 	orr.w	r3, r3, #1
 801109e:	81a3      	strh	r3, [r4, #12]
 80110a0:	89a3      	ldrh	r3, [r4, #12]
 80110a2:	431d      	orrs	r5, r3
 80110a4:	81a5      	strh	r5, [r4, #12]
 80110a6:	e7cf      	b.n	8011048 <__smakebuf_r+0x18>

080110a8 <_fstat_r>:
 80110a8:	b538      	push	{r3, r4, r5, lr}
 80110aa:	4d07      	ldr	r5, [pc, #28]	; (80110c8 <_fstat_r+0x20>)
 80110ac:	2300      	movs	r3, #0
 80110ae:	4604      	mov	r4, r0
 80110b0:	4608      	mov	r0, r1
 80110b2:	4611      	mov	r1, r2
 80110b4:	602b      	str	r3, [r5, #0]
 80110b6:	f7f1 fbd8 	bl	800286a <_fstat>
 80110ba:	1c43      	adds	r3, r0, #1
 80110bc:	d102      	bne.n	80110c4 <_fstat_r+0x1c>
 80110be:	682b      	ldr	r3, [r5, #0]
 80110c0:	b103      	cbz	r3, 80110c4 <_fstat_r+0x1c>
 80110c2:	6023      	str	r3, [r4, #0]
 80110c4:	bd38      	pop	{r3, r4, r5, pc}
 80110c6:	bf00      	nop
 80110c8:	200042f8 	.word	0x200042f8

080110cc <_isatty_r>:
 80110cc:	b538      	push	{r3, r4, r5, lr}
 80110ce:	4d06      	ldr	r5, [pc, #24]	; (80110e8 <_isatty_r+0x1c>)
 80110d0:	2300      	movs	r3, #0
 80110d2:	4604      	mov	r4, r0
 80110d4:	4608      	mov	r0, r1
 80110d6:	602b      	str	r3, [r5, #0]
 80110d8:	f7f1 fbd7 	bl	800288a <_isatty>
 80110dc:	1c43      	adds	r3, r0, #1
 80110de:	d102      	bne.n	80110e6 <_isatty_r+0x1a>
 80110e0:	682b      	ldr	r3, [r5, #0]
 80110e2:	b103      	cbz	r3, 80110e6 <_isatty_r+0x1a>
 80110e4:	6023      	str	r3, [r4, #0]
 80110e6:	bd38      	pop	{r3, r4, r5, pc}
 80110e8:	200042f8 	.word	0x200042f8

080110ec <pow>:
 80110ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80110ee:	ed2d 8b02 	vpush	{d8}
 80110f2:	eeb0 8a40 	vmov.f32	s16, s0
 80110f6:	eef0 8a60 	vmov.f32	s17, s1
 80110fa:	ec55 4b11 	vmov	r4, r5, d1
 80110fe:	f000 f873 	bl	80111e8 <__ieee754_pow>
 8011102:	4622      	mov	r2, r4
 8011104:	462b      	mov	r3, r5
 8011106:	4620      	mov	r0, r4
 8011108:	4629      	mov	r1, r5
 801110a:	ec57 6b10 	vmov	r6, r7, d0
 801110e:	f7ef fd45 	bl	8000b9c <__aeabi_dcmpun>
 8011112:	2800      	cmp	r0, #0
 8011114:	d13b      	bne.n	801118e <pow+0xa2>
 8011116:	ec51 0b18 	vmov	r0, r1, d8
 801111a:	2200      	movs	r2, #0
 801111c:	2300      	movs	r3, #0
 801111e:	f7ef fd0b 	bl	8000b38 <__aeabi_dcmpeq>
 8011122:	b1b8      	cbz	r0, 8011154 <pow+0x68>
 8011124:	2200      	movs	r2, #0
 8011126:	2300      	movs	r3, #0
 8011128:	4620      	mov	r0, r4
 801112a:	4629      	mov	r1, r5
 801112c:	f7ef fd04 	bl	8000b38 <__aeabi_dcmpeq>
 8011130:	2800      	cmp	r0, #0
 8011132:	d146      	bne.n	80111c2 <pow+0xd6>
 8011134:	ec45 4b10 	vmov	d0, r4, r5
 8011138:	f000 f848 	bl	80111cc <finite>
 801113c:	b338      	cbz	r0, 801118e <pow+0xa2>
 801113e:	2200      	movs	r2, #0
 8011140:	2300      	movs	r3, #0
 8011142:	4620      	mov	r0, r4
 8011144:	4629      	mov	r1, r5
 8011146:	f7ef fd01 	bl	8000b4c <__aeabi_dcmplt>
 801114a:	b300      	cbz	r0, 801118e <pow+0xa2>
 801114c:	f7fd ff26 	bl	800ef9c <__errno>
 8011150:	2322      	movs	r3, #34	; 0x22
 8011152:	e01b      	b.n	801118c <pow+0xa0>
 8011154:	ec47 6b10 	vmov	d0, r6, r7
 8011158:	f000 f838 	bl	80111cc <finite>
 801115c:	b9e0      	cbnz	r0, 8011198 <pow+0xac>
 801115e:	eeb0 0a48 	vmov.f32	s0, s16
 8011162:	eef0 0a68 	vmov.f32	s1, s17
 8011166:	f000 f831 	bl	80111cc <finite>
 801116a:	b1a8      	cbz	r0, 8011198 <pow+0xac>
 801116c:	ec45 4b10 	vmov	d0, r4, r5
 8011170:	f000 f82c 	bl	80111cc <finite>
 8011174:	b180      	cbz	r0, 8011198 <pow+0xac>
 8011176:	4632      	mov	r2, r6
 8011178:	463b      	mov	r3, r7
 801117a:	4630      	mov	r0, r6
 801117c:	4639      	mov	r1, r7
 801117e:	f7ef fd0d 	bl	8000b9c <__aeabi_dcmpun>
 8011182:	2800      	cmp	r0, #0
 8011184:	d0e2      	beq.n	801114c <pow+0x60>
 8011186:	f7fd ff09 	bl	800ef9c <__errno>
 801118a:	2321      	movs	r3, #33	; 0x21
 801118c:	6003      	str	r3, [r0, #0]
 801118e:	ecbd 8b02 	vpop	{d8}
 8011192:	ec47 6b10 	vmov	d0, r6, r7
 8011196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011198:	2200      	movs	r2, #0
 801119a:	2300      	movs	r3, #0
 801119c:	4630      	mov	r0, r6
 801119e:	4639      	mov	r1, r7
 80111a0:	f7ef fcca 	bl	8000b38 <__aeabi_dcmpeq>
 80111a4:	2800      	cmp	r0, #0
 80111a6:	d0f2      	beq.n	801118e <pow+0xa2>
 80111a8:	eeb0 0a48 	vmov.f32	s0, s16
 80111ac:	eef0 0a68 	vmov.f32	s1, s17
 80111b0:	f000 f80c 	bl	80111cc <finite>
 80111b4:	2800      	cmp	r0, #0
 80111b6:	d0ea      	beq.n	801118e <pow+0xa2>
 80111b8:	ec45 4b10 	vmov	d0, r4, r5
 80111bc:	f000 f806 	bl	80111cc <finite>
 80111c0:	e7c3      	b.n	801114a <pow+0x5e>
 80111c2:	4f01      	ldr	r7, [pc, #4]	; (80111c8 <pow+0xdc>)
 80111c4:	2600      	movs	r6, #0
 80111c6:	e7e2      	b.n	801118e <pow+0xa2>
 80111c8:	3ff00000 	.word	0x3ff00000

080111cc <finite>:
 80111cc:	b082      	sub	sp, #8
 80111ce:	ed8d 0b00 	vstr	d0, [sp]
 80111d2:	9801      	ldr	r0, [sp, #4]
 80111d4:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80111d8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80111dc:	0fc0      	lsrs	r0, r0, #31
 80111de:	b002      	add	sp, #8
 80111e0:	4770      	bx	lr
 80111e2:	0000      	movs	r0, r0
 80111e4:	0000      	movs	r0, r0
	...

080111e8 <__ieee754_pow>:
 80111e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111ec:	ed2d 8b06 	vpush	{d8-d10}
 80111f0:	b089      	sub	sp, #36	; 0x24
 80111f2:	ed8d 1b00 	vstr	d1, [sp]
 80111f6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80111fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80111fe:	ea58 0102 	orrs.w	r1, r8, r2
 8011202:	ec57 6b10 	vmov	r6, r7, d0
 8011206:	d115      	bne.n	8011234 <__ieee754_pow+0x4c>
 8011208:	19b3      	adds	r3, r6, r6
 801120a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801120e:	4152      	adcs	r2, r2
 8011210:	4299      	cmp	r1, r3
 8011212:	4b89      	ldr	r3, [pc, #548]	; (8011438 <__ieee754_pow+0x250>)
 8011214:	4193      	sbcs	r3, r2
 8011216:	f080 84d1 	bcs.w	8011bbc <__ieee754_pow+0x9d4>
 801121a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801121e:	4630      	mov	r0, r6
 8011220:	4639      	mov	r1, r7
 8011222:	f7ef f86b 	bl	80002fc <__adddf3>
 8011226:	ec41 0b10 	vmov	d0, r0, r1
 801122a:	b009      	add	sp, #36	; 0x24
 801122c:	ecbd 8b06 	vpop	{d8-d10}
 8011230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011234:	4b81      	ldr	r3, [pc, #516]	; (801143c <__ieee754_pow+0x254>)
 8011236:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801123a:	429c      	cmp	r4, r3
 801123c:	ee10 aa10 	vmov	sl, s0
 8011240:	463d      	mov	r5, r7
 8011242:	dc06      	bgt.n	8011252 <__ieee754_pow+0x6a>
 8011244:	d101      	bne.n	801124a <__ieee754_pow+0x62>
 8011246:	2e00      	cmp	r6, #0
 8011248:	d1e7      	bne.n	801121a <__ieee754_pow+0x32>
 801124a:	4598      	cmp	r8, r3
 801124c:	dc01      	bgt.n	8011252 <__ieee754_pow+0x6a>
 801124e:	d10f      	bne.n	8011270 <__ieee754_pow+0x88>
 8011250:	b172      	cbz	r2, 8011270 <__ieee754_pow+0x88>
 8011252:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8011256:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 801125a:	ea55 050a 	orrs.w	r5, r5, sl
 801125e:	d1dc      	bne.n	801121a <__ieee754_pow+0x32>
 8011260:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011264:	18db      	adds	r3, r3, r3
 8011266:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 801126a:	4152      	adcs	r2, r2
 801126c:	429d      	cmp	r5, r3
 801126e:	e7d0      	b.n	8011212 <__ieee754_pow+0x2a>
 8011270:	2d00      	cmp	r5, #0
 8011272:	da3b      	bge.n	80112ec <__ieee754_pow+0x104>
 8011274:	4b72      	ldr	r3, [pc, #456]	; (8011440 <__ieee754_pow+0x258>)
 8011276:	4598      	cmp	r8, r3
 8011278:	dc51      	bgt.n	801131e <__ieee754_pow+0x136>
 801127a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801127e:	4598      	cmp	r8, r3
 8011280:	f340 84ab 	ble.w	8011bda <__ieee754_pow+0x9f2>
 8011284:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011288:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801128c:	2b14      	cmp	r3, #20
 801128e:	dd0f      	ble.n	80112b0 <__ieee754_pow+0xc8>
 8011290:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011294:	fa22 f103 	lsr.w	r1, r2, r3
 8011298:	fa01 f303 	lsl.w	r3, r1, r3
 801129c:	4293      	cmp	r3, r2
 801129e:	f040 849c 	bne.w	8011bda <__ieee754_pow+0x9f2>
 80112a2:	f001 0101 	and.w	r1, r1, #1
 80112a6:	f1c1 0302 	rsb	r3, r1, #2
 80112aa:	9304      	str	r3, [sp, #16]
 80112ac:	b182      	cbz	r2, 80112d0 <__ieee754_pow+0xe8>
 80112ae:	e05f      	b.n	8011370 <__ieee754_pow+0x188>
 80112b0:	2a00      	cmp	r2, #0
 80112b2:	d15b      	bne.n	801136c <__ieee754_pow+0x184>
 80112b4:	f1c3 0314 	rsb	r3, r3, #20
 80112b8:	fa48 f103 	asr.w	r1, r8, r3
 80112bc:	fa01 f303 	lsl.w	r3, r1, r3
 80112c0:	4543      	cmp	r3, r8
 80112c2:	f040 8487 	bne.w	8011bd4 <__ieee754_pow+0x9ec>
 80112c6:	f001 0101 	and.w	r1, r1, #1
 80112ca:	f1c1 0302 	rsb	r3, r1, #2
 80112ce:	9304      	str	r3, [sp, #16]
 80112d0:	4b5c      	ldr	r3, [pc, #368]	; (8011444 <__ieee754_pow+0x25c>)
 80112d2:	4598      	cmp	r8, r3
 80112d4:	d132      	bne.n	801133c <__ieee754_pow+0x154>
 80112d6:	f1b9 0f00 	cmp.w	r9, #0
 80112da:	f280 8477 	bge.w	8011bcc <__ieee754_pow+0x9e4>
 80112de:	4959      	ldr	r1, [pc, #356]	; (8011444 <__ieee754_pow+0x25c>)
 80112e0:	4632      	mov	r2, r6
 80112e2:	463b      	mov	r3, r7
 80112e4:	2000      	movs	r0, #0
 80112e6:	f7ef fae9 	bl	80008bc <__aeabi_ddiv>
 80112ea:	e79c      	b.n	8011226 <__ieee754_pow+0x3e>
 80112ec:	2300      	movs	r3, #0
 80112ee:	9304      	str	r3, [sp, #16]
 80112f0:	2a00      	cmp	r2, #0
 80112f2:	d13d      	bne.n	8011370 <__ieee754_pow+0x188>
 80112f4:	4b51      	ldr	r3, [pc, #324]	; (801143c <__ieee754_pow+0x254>)
 80112f6:	4598      	cmp	r8, r3
 80112f8:	d1ea      	bne.n	80112d0 <__ieee754_pow+0xe8>
 80112fa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80112fe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8011302:	ea53 030a 	orrs.w	r3, r3, sl
 8011306:	f000 8459 	beq.w	8011bbc <__ieee754_pow+0x9d4>
 801130a:	4b4f      	ldr	r3, [pc, #316]	; (8011448 <__ieee754_pow+0x260>)
 801130c:	429c      	cmp	r4, r3
 801130e:	dd08      	ble.n	8011322 <__ieee754_pow+0x13a>
 8011310:	f1b9 0f00 	cmp.w	r9, #0
 8011314:	f2c0 8456 	blt.w	8011bc4 <__ieee754_pow+0x9dc>
 8011318:	e9dd 0100 	ldrd	r0, r1, [sp]
 801131c:	e783      	b.n	8011226 <__ieee754_pow+0x3e>
 801131e:	2302      	movs	r3, #2
 8011320:	e7e5      	b.n	80112ee <__ieee754_pow+0x106>
 8011322:	f1b9 0f00 	cmp.w	r9, #0
 8011326:	f04f 0000 	mov.w	r0, #0
 801132a:	f04f 0100 	mov.w	r1, #0
 801132e:	f6bf af7a 	bge.w	8011226 <__ieee754_pow+0x3e>
 8011332:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011336:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801133a:	e774      	b.n	8011226 <__ieee754_pow+0x3e>
 801133c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011340:	d106      	bne.n	8011350 <__ieee754_pow+0x168>
 8011342:	4632      	mov	r2, r6
 8011344:	463b      	mov	r3, r7
 8011346:	4630      	mov	r0, r6
 8011348:	4639      	mov	r1, r7
 801134a:	f7ef f98d 	bl	8000668 <__aeabi_dmul>
 801134e:	e76a      	b.n	8011226 <__ieee754_pow+0x3e>
 8011350:	4b3e      	ldr	r3, [pc, #248]	; (801144c <__ieee754_pow+0x264>)
 8011352:	4599      	cmp	r9, r3
 8011354:	d10c      	bne.n	8011370 <__ieee754_pow+0x188>
 8011356:	2d00      	cmp	r5, #0
 8011358:	db0a      	blt.n	8011370 <__ieee754_pow+0x188>
 801135a:	ec47 6b10 	vmov	d0, r6, r7
 801135e:	b009      	add	sp, #36	; 0x24
 8011360:	ecbd 8b06 	vpop	{d8-d10}
 8011364:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011368:	f000 bd20 	b.w	8011dac <__ieee754_sqrt>
 801136c:	2300      	movs	r3, #0
 801136e:	9304      	str	r3, [sp, #16]
 8011370:	ec47 6b10 	vmov	d0, r6, r7
 8011374:	f000 fc62 	bl	8011c3c <fabs>
 8011378:	ec51 0b10 	vmov	r0, r1, d0
 801137c:	f1ba 0f00 	cmp.w	sl, #0
 8011380:	d129      	bne.n	80113d6 <__ieee754_pow+0x1ee>
 8011382:	b124      	cbz	r4, 801138e <__ieee754_pow+0x1a6>
 8011384:	4b2f      	ldr	r3, [pc, #188]	; (8011444 <__ieee754_pow+0x25c>)
 8011386:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801138a:	429a      	cmp	r2, r3
 801138c:	d123      	bne.n	80113d6 <__ieee754_pow+0x1ee>
 801138e:	f1b9 0f00 	cmp.w	r9, #0
 8011392:	da05      	bge.n	80113a0 <__ieee754_pow+0x1b8>
 8011394:	4602      	mov	r2, r0
 8011396:	460b      	mov	r3, r1
 8011398:	2000      	movs	r0, #0
 801139a:	492a      	ldr	r1, [pc, #168]	; (8011444 <__ieee754_pow+0x25c>)
 801139c:	f7ef fa8e 	bl	80008bc <__aeabi_ddiv>
 80113a0:	2d00      	cmp	r5, #0
 80113a2:	f6bf af40 	bge.w	8011226 <__ieee754_pow+0x3e>
 80113a6:	9b04      	ldr	r3, [sp, #16]
 80113a8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80113ac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80113b0:	431c      	orrs	r4, r3
 80113b2:	d108      	bne.n	80113c6 <__ieee754_pow+0x1de>
 80113b4:	4602      	mov	r2, r0
 80113b6:	460b      	mov	r3, r1
 80113b8:	4610      	mov	r0, r2
 80113ba:	4619      	mov	r1, r3
 80113bc:	f7ee ff9c 	bl	80002f8 <__aeabi_dsub>
 80113c0:	4602      	mov	r2, r0
 80113c2:	460b      	mov	r3, r1
 80113c4:	e78f      	b.n	80112e6 <__ieee754_pow+0xfe>
 80113c6:	9b04      	ldr	r3, [sp, #16]
 80113c8:	2b01      	cmp	r3, #1
 80113ca:	f47f af2c 	bne.w	8011226 <__ieee754_pow+0x3e>
 80113ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80113d2:	4619      	mov	r1, r3
 80113d4:	e727      	b.n	8011226 <__ieee754_pow+0x3e>
 80113d6:	0feb      	lsrs	r3, r5, #31
 80113d8:	3b01      	subs	r3, #1
 80113da:	9306      	str	r3, [sp, #24]
 80113dc:	9a06      	ldr	r2, [sp, #24]
 80113de:	9b04      	ldr	r3, [sp, #16]
 80113e0:	4313      	orrs	r3, r2
 80113e2:	d102      	bne.n	80113ea <__ieee754_pow+0x202>
 80113e4:	4632      	mov	r2, r6
 80113e6:	463b      	mov	r3, r7
 80113e8:	e7e6      	b.n	80113b8 <__ieee754_pow+0x1d0>
 80113ea:	4b19      	ldr	r3, [pc, #100]	; (8011450 <__ieee754_pow+0x268>)
 80113ec:	4598      	cmp	r8, r3
 80113ee:	f340 80fb 	ble.w	80115e8 <__ieee754_pow+0x400>
 80113f2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80113f6:	4598      	cmp	r8, r3
 80113f8:	4b13      	ldr	r3, [pc, #76]	; (8011448 <__ieee754_pow+0x260>)
 80113fa:	dd0c      	ble.n	8011416 <__ieee754_pow+0x22e>
 80113fc:	429c      	cmp	r4, r3
 80113fe:	dc0f      	bgt.n	8011420 <__ieee754_pow+0x238>
 8011400:	f1b9 0f00 	cmp.w	r9, #0
 8011404:	da0f      	bge.n	8011426 <__ieee754_pow+0x23e>
 8011406:	2000      	movs	r0, #0
 8011408:	b009      	add	sp, #36	; 0x24
 801140a:	ecbd 8b06 	vpop	{d8-d10}
 801140e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011412:	f000 bcc2 	b.w	8011d9a <__math_oflow>
 8011416:	429c      	cmp	r4, r3
 8011418:	dbf2      	blt.n	8011400 <__ieee754_pow+0x218>
 801141a:	4b0a      	ldr	r3, [pc, #40]	; (8011444 <__ieee754_pow+0x25c>)
 801141c:	429c      	cmp	r4, r3
 801141e:	dd19      	ble.n	8011454 <__ieee754_pow+0x26c>
 8011420:	f1b9 0f00 	cmp.w	r9, #0
 8011424:	dcef      	bgt.n	8011406 <__ieee754_pow+0x21e>
 8011426:	2000      	movs	r0, #0
 8011428:	b009      	add	sp, #36	; 0x24
 801142a:	ecbd 8b06 	vpop	{d8-d10}
 801142e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011432:	f000 bca9 	b.w	8011d88 <__math_uflow>
 8011436:	bf00      	nop
 8011438:	fff00000 	.word	0xfff00000
 801143c:	7ff00000 	.word	0x7ff00000
 8011440:	433fffff 	.word	0x433fffff
 8011444:	3ff00000 	.word	0x3ff00000
 8011448:	3fefffff 	.word	0x3fefffff
 801144c:	3fe00000 	.word	0x3fe00000
 8011450:	41e00000 	.word	0x41e00000
 8011454:	4b60      	ldr	r3, [pc, #384]	; (80115d8 <__ieee754_pow+0x3f0>)
 8011456:	2200      	movs	r2, #0
 8011458:	f7ee ff4e 	bl	80002f8 <__aeabi_dsub>
 801145c:	a354      	add	r3, pc, #336	; (adr r3, 80115b0 <__ieee754_pow+0x3c8>)
 801145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011462:	4604      	mov	r4, r0
 8011464:	460d      	mov	r5, r1
 8011466:	f7ef f8ff 	bl	8000668 <__aeabi_dmul>
 801146a:	a353      	add	r3, pc, #332	; (adr r3, 80115b8 <__ieee754_pow+0x3d0>)
 801146c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011470:	4606      	mov	r6, r0
 8011472:	460f      	mov	r7, r1
 8011474:	4620      	mov	r0, r4
 8011476:	4629      	mov	r1, r5
 8011478:	f7ef f8f6 	bl	8000668 <__aeabi_dmul>
 801147c:	4b57      	ldr	r3, [pc, #348]	; (80115dc <__ieee754_pow+0x3f4>)
 801147e:	4682      	mov	sl, r0
 8011480:	468b      	mov	fp, r1
 8011482:	2200      	movs	r2, #0
 8011484:	4620      	mov	r0, r4
 8011486:	4629      	mov	r1, r5
 8011488:	f7ef f8ee 	bl	8000668 <__aeabi_dmul>
 801148c:	4602      	mov	r2, r0
 801148e:	460b      	mov	r3, r1
 8011490:	a14b      	add	r1, pc, #300	; (adr r1, 80115c0 <__ieee754_pow+0x3d8>)
 8011492:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011496:	f7ee ff2f 	bl	80002f8 <__aeabi_dsub>
 801149a:	4622      	mov	r2, r4
 801149c:	462b      	mov	r3, r5
 801149e:	f7ef f8e3 	bl	8000668 <__aeabi_dmul>
 80114a2:	4602      	mov	r2, r0
 80114a4:	460b      	mov	r3, r1
 80114a6:	2000      	movs	r0, #0
 80114a8:	494d      	ldr	r1, [pc, #308]	; (80115e0 <__ieee754_pow+0x3f8>)
 80114aa:	f7ee ff25 	bl	80002f8 <__aeabi_dsub>
 80114ae:	4622      	mov	r2, r4
 80114b0:	4680      	mov	r8, r0
 80114b2:	4689      	mov	r9, r1
 80114b4:	462b      	mov	r3, r5
 80114b6:	4620      	mov	r0, r4
 80114b8:	4629      	mov	r1, r5
 80114ba:	f7ef f8d5 	bl	8000668 <__aeabi_dmul>
 80114be:	4602      	mov	r2, r0
 80114c0:	460b      	mov	r3, r1
 80114c2:	4640      	mov	r0, r8
 80114c4:	4649      	mov	r1, r9
 80114c6:	f7ef f8cf 	bl	8000668 <__aeabi_dmul>
 80114ca:	a33f      	add	r3, pc, #252	; (adr r3, 80115c8 <__ieee754_pow+0x3e0>)
 80114cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114d0:	f7ef f8ca 	bl	8000668 <__aeabi_dmul>
 80114d4:	4602      	mov	r2, r0
 80114d6:	460b      	mov	r3, r1
 80114d8:	4650      	mov	r0, sl
 80114da:	4659      	mov	r1, fp
 80114dc:	f7ee ff0c 	bl	80002f8 <__aeabi_dsub>
 80114e0:	4602      	mov	r2, r0
 80114e2:	460b      	mov	r3, r1
 80114e4:	4680      	mov	r8, r0
 80114e6:	4689      	mov	r9, r1
 80114e8:	4630      	mov	r0, r6
 80114ea:	4639      	mov	r1, r7
 80114ec:	f7ee ff06 	bl	80002fc <__adddf3>
 80114f0:	2000      	movs	r0, #0
 80114f2:	4632      	mov	r2, r6
 80114f4:	463b      	mov	r3, r7
 80114f6:	4604      	mov	r4, r0
 80114f8:	460d      	mov	r5, r1
 80114fa:	f7ee fefd 	bl	80002f8 <__aeabi_dsub>
 80114fe:	4602      	mov	r2, r0
 8011500:	460b      	mov	r3, r1
 8011502:	4640      	mov	r0, r8
 8011504:	4649      	mov	r1, r9
 8011506:	f7ee fef7 	bl	80002f8 <__aeabi_dsub>
 801150a:	9b04      	ldr	r3, [sp, #16]
 801150c:	9a06      	ldr	r2, [sp, #24]
 801150e:	3b01      	subs	r3, #1
 8011510:	4313      	orrs	r3, r2
 8011512:	4682      	mov	sl, r0
 8011514:	468b      	mov	fp, r1
 8011516:	f040 81e7 	bne.w	80118e8 <__ieee754_pow+0x700>
 801151a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 80115d0 <__ieee754_pow+0x3e8>
 801151e:	eeb0 8a47 	vmov.f32	s16, s14
 8011522:	eef0 8a67 	vmov.f32	s17, s15
 8011526:	e9dd 6700 	ldrd	r6, r7, [sp]
 801152a:	2600      	movs	r6, #0
 801152c:	4632      	mov	r2, r6
 801152e:	463b      	mov	r3, r7
 8011530:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011534:	f7ee fee0 	bl	80002f8 <__aeabi_dsub>
 8011538:	4622      	mov	r2, r4
 801153a:	462b      	mov	r3, r5
 801153c:	f7ef f894 	bl	8000668 <__aeabi_dmul>
 8011540:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011544:	4680      	mov	r8, r0
 8011546:	4689      	mov	r9, r1
 8011548:	4650      	mov	r0, sl
 801154a:	4659      	mov	r1, fp
 801154c:	f7ef f88c 	bl	8000668 <__aeabi_dmul>
 8011550:	4602      	mov	r2, r0
 8011552:	460b      	mov	r3, r1
 8011554:	4640      	mov	r0, r8
 8011556:	4649      	mov	r1, r9
 8011558:	f7ee fed0 	bl	80002fc <__adddf3>
 801155c:	4632      	mov	r2, r6
 801155e:	463b      	mov	r3, r7
 8011560:	4680      	mov	r8, r0
 8011562:	4689      	mov	r9, r1
 8011564:	4620      	mov	r0, r4
 8011566:	4629      	mov	r1, r5
 8011568:	f7ef f87e 	bl	8000668 <__aeabi_dmul>
 801156c:	460b      	mov	r3, r1
 801156e:	4604      	mov	r4, r0
 8011570:	460d      	mov	r5, r1
 8011572:	4602      	mov	r2, r0
 8011574:	4649      	mov	r1, r9
 8011576:	4640      	mov	r0, r8
 8011578:	f7ee fec0 	bl	80002fc <__adddf3>
 801157c:	4b19      	ldr	r3, [pc, #100]	; (80115e4 <__ieee754_pow+0x3fc>)
 801157e:	4299      	cmp	r1, r3
 8011580:	ec45 4b19 	vmov	d9, r4, r5
 8011584:	4606      	mov	r6, r0
 8011586:	460f      	mov	r7, r1
 8011588:	468b      	mov	fp, r1
 801158a:	f340 82f0 	ble.w	8011b6e <__ieee754_pow+0x986>
 801158e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011592:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011596:	4303      	orrs	r3, r0
 8011598:	f000 81e4 	beq.w	8011964 <__ieee754_pow+0x77c>
 801159c:	ec51 0b18 	vmov	r0, r1, d8
 80115a0:	2200      	movs	r2, #0
 80115a2:	2300      	movs	r3, #0
 80115a4:	f7ef fad2 	bl	8000b4c <__aeabi_dcmplt>
 80115a8:	3800      	subs	r0, #0
 80115aa:	bf18      	it	ne
 80115ac:	2001      	movne	r0, #1
 80115ae:	e72b      	b.n	8011408 <__ieee754_pow+0x220>
 80115b0:	60000000 	.word	0x60000000
 80115b4:	3ff71547 	.word	0x3ff71547
 80115b8:	f85ddf44 	.word	0xf85ddf44
 80115bc:	3e54ae0b 	.word	0x3e54ae0b
 80115c0:	55555555 	.word	0x55555555
 80115c4:	3fd55555 	.word	0x3fd55555
 80115c8:	652b82fe 	.word	0x652b82fe
 80115cc:	3ff71547 	.word	0x3ff71547
 80115d0:	00000000 	.word	0x00000000
 80115d4:	bff00000 	.word	0xbff00000
 80115d8:	3ff00000 	.word	0x3ff00000
 80115dc:	3fd00000 	.word	0x3fd00000
 80115e0:	3fe00000 	.word	0x3fe00000
 80115e4:	408fffff 	.word	0x408fffff
 80115e8:	4bd5      	ldr	r3, [pc, #852]	; (8011940 <__ieee754_pow+0x758>)
 80115ea:	402b      	ands	r3, r5
 80115ec:	2200      	movs	r2, #0
 80115ee:	b92b      	cbnz	r3, 80115fc <__ieee754_pow+0x414>
 80115f0:	4bd4      	ldr	r3, [pc, #848]	; (8011944 <__ieee754_pow+0x75c>)
 80115f2:	f7ef f839 	bl	8000668 <__aeabi_dmul>
 80115f6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80115fa:	460c      	mov	r4, r1
 80115fc:	1523      	asrs	r3, r4, #20
 80115fe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011602:	4413      	add	r3, r2
 8011604:	9305      	str	r3, [sp, #20]
 8011606:	4bd0      	ldr	r3, [pc, #832]	; (8011948 <__ieee754_pow+0x760>)
 8011608:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801160c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011610:	429c      	cmp	r4, r3
 8011612:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011616:	dd08      	ble.n	801162a <__ieee754_pow+0x442>
 8011618:	4bcc      	ldr	r3, [pc, #816]	; (801194c <__ieee754_pow+0x764>)
 801161a:	429c      	cmp	r4, r3
 801161c:	f340 8162 	ble.w	80118e4 <__ieee754_pow+0x6fc>
 8011620:	9b05      	ldr	r3, [sp, #20]
 8011622:	3301      	adds	r3, #1
 8011624:	9305      	str	r3, [sp, #20]
 8011626:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801162a:	2400      	movs	r4, #0
 801162c:	00e3      	lsls	r3, r4, #3
 801162e:	9307      	str	r3, [sp, #28]
 8011630:	4bc7      	ldr	r3, [pc, #796]	; (8011950 <__ieee754_pow+0x768>)
 8011632:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011636:	ed93 7b00 	vldr	d7, [r3]
 801163a:	4629      	mov	r1, r5
 801163c:	ec53 2b17 	vmov	r2, r3, d7
 8011640:	eeb0 9a47 	vmov.f32	s18, s14
 8011644:	eef0 9a67 	vmov.f32	s19, s15
 8011648:	4682      	mov	sl, r0
 801164a:	f7ee fe55 	bl	80002f8 <__aeabi_dsub>
 801164e:	4652      	mov	r2, sl
 8011650:	4606      	mov	r6, r0
 8011652:	460f      	mov	r7, r1
 8011654:	462b      	mov	r3, r5
 8011656:	ec51 0b19 	vmov	r0, r1, d9
 801165a:	f7ee fe4f 	bl	80002fc <__adddf3>
 801165e:	4602      	mov	r2, r0
 8011660:	460b      	mov	r3, r1
 8011662:	2000      	movs	r0, #0
 8011664:	49bb      	ldr	r1, [pc, #748]	; (8011954 <__ieee754_pow+0x76c>)
 8011666:	f7ef f929 	bl	80008bc <__aeabi_ddiv>
 801166a:	ec41 0b1a 	vmov	d10, r0, r1
 801166e:	4602      	mov	r2, r0
 8011670:	460b      	mov	r3, r1
 8011672:	4630      	mov	r0, r6
 8011674:	4639      	mov	r1, r7
 8011676:	f7ee fff7 	bl	8000668 <__aeabi_dmul>
 801167a:	2300      	movs	r3, #0
 801167c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011680:	9302      	str	r3, [sp, #8]
 8011682:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011686:	46ab      	mov	fp, r5
 8011688:	106d      	asrs	r5, r5, #1
 801168a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801168e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011692:	ec41 0b18 	vmov	d8, r0, r1
 8011696:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 801169a:	2200      	movs	r2, #0
 801169c:	4640      	mov	r0, r8
 801169e:	4649      	mov	r1, r9
 80116a0:	4614      	mov	r4, r2
 80116a2:	461d      	mov	r5, r3
 80116a4:	f7ee ffe0 	bl	8000668 <__aeabi_dmul>
 80116a8:	4602      	mov	r2, r0
 80116aa:	460b      	mov	r3, r1
 80116ac:	4630      	mov	r0, r6
 80116ae:	4639      	mov	r1, r7
 80116b0:	f7ee fe22 	bl	80002f8 <__aeabi_dsub>
 80116b4:	ec53 2b19 	vmov	r2, r3, d9
 80116b8:	4606      	mov	r6, r0
 80116ba:	460f      	mov	r7, r1
 80116bc:	4620      	mov	r0, r4
 80116be:	4629      	mov	r1, r5
 80116c0:	f7ee fe1a 	bl	80002f8 <__aeabi_dsub>
 80116c4:	4602      	mov	r2, r0
 80116c6:	460b      	mov	r3, r1
 80116c8:	4650      	mov	r0, sl
 80116ca:	4659      	mov	r1, fp
 80116cc:	f7ee fe14 	bl	80002f8 <__aeabi_dsub>
 80116d0:	4642      	mov	r2, r8
 80116d2:	464b      	mov	r3, r9
 80116d4:	f7ee ffc8 	bl	8000668 <__aeabi_dmul>
 80116d8:	4602      	mov	r2, r0
 80116da:	460b      	mov	r3, r1
 80116dc:	4630      	mov	r0, r6
 80116de:	4639      	mov	r1, r7
 80116e0:	f7ee fe0a 	bl	80002f8 <__aeabi_dsub>
 80116e4:	ec53 2b1a 	vmov	r2, r3, d10
 80116e8:	f7ee ffbe 	bl	8000668 <__aeabi_dmul>
 80116ec:	ec53 2b18 	vmov	r2, r3, d8
 80116f0:	ec41 0b19 	vmov	d9, r0, r1
 80116f4:	ec51 0b18 	vmov	r0, r1, d8
 80116f8:	f7ee ffb6 	bl	8000668 <__aeabi_dmul>
 80116fc:	a37c      	add	r3, pc, #496	; (adr r3, 80118f0 <__ieee754_pow+0x708>)
 80116fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011702:	4604      	mov	r4, r0
 8011704:	460d      	mov	r5, r1
 8011706:	f7ee ffaf 	bl	8000668 <__aeabi_dmul>
 801170a:	a37b      	add	r3, pc, #492	; (adr r3, 80118f8 <__ieee754_pow+0x710>)
 801170c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011710:	f7ee fdf4 	bl	80002fc <__adddf3>
 8011714:	4622      	mov	r2, r4
 8011716:	462b      	mov	r3, r5
 8011718:	f7ee ffa6 	bl	8000668 <__aeabi_dmul>
 801171c:	a378      	add	r3, pc, #480	; (adr r3, 8011900 <__ieee754_pow+0x718>)
 801171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011722:	f7ee fdeb 	bl	80002fc <__adddf3>
 8011726:	4622      	mov	r2, r4
 8011728:	462b      	mov	r3, r5
 801172a:	f7ee ff9d 	bl	8000668 <__aeabi_dmul>
 801172e:	a376      	add	r3, pc, #472	; (adr r3, 8011908 <__ieee754_pow+0x720>)
 8011730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011734:	f7ee fde2 	bl	80002fc <__adddf3>
 8011738:	4622      	mov	r2, r4
 801173a:	462b      	mov	r3, r5
 801173c:	f7ee ff94 	bl	8000668 <__aeabi_dmul>
 8011740:	a373      	add	r3, pc, #460	; (adr r3, 8011910 <__ieee754_pow+0x728>)
 8011742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011746:	f7ee fdd9 	bl	80002fc <__adddf3>
 801174a:	4622      	mov	r2, r4
 801174c:	462b      	mov	r3, r5
 801174e:	f7ee ff8b 	bl	8000668 <__aeabi_dmul>
 8011752:	a371      	add	r3, pc, #452	; (adr r3, 8011918 <__ieee754_pow+0x730>)
 8011754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011758:	f7ee fdd0 	bl	80002fc <__adddf3>
 801175c:	4622      	mov	r2, r4
 801175e:	4606      	mov	r6, r0
 8011760:	460f      	mov	r7, r1
 8011762:	462b      	mov	r3, r5
 8011764:	4620      	mov	r0, r4
 8011766:	4629      	mov	r1, r5
 8011768:	f7ee ff7e 	bl	8000668 <__aeabi_dmul>
 801176c:	4602      	mov	r2, r0
 801176e:	460b      	mov	r3, r1
 8011770:	4630      	mov	r0, r6
 8011772:	4639      	mov	r1, r7
 8011774:	f7ee ff78 	bl	8000668 <__aeabi_dmul>
 8011778:	4642      	mov	r2, r8
 801177a:	4604      	mov	r4, r0
 801177c:	460d      	mov	r5, r1
 801177e:	464b      	mov	r3, r9
 8011780:	ec51 0b18 	vmov	r0, r1, d8
 8011784:	f7ee fdba 	bl	80002fc <__adddf3>
 8011788:	ec53 2b19 	vmov	r2, r3, d9
 801178c:	f7ee ff6c 	bl	8000668 <__aeabi_dmul>
 8011790:	4622      	mov	r2, r4
 8011792:	462b      	mov	r3, r5
 8011794:	f7ee fdb2 	bl	80002fc <__adddf3>
 8011798:	4642      	mov	r2, r8
 801179a:	4682      	mov	sl, r0
 801179c:	468b      	mov	fp, r1
 801179e:	464b      	mov	r3, r9
 80117a0:	4640      	mov	r0, r8
 80117a2:	4649      	mov	r1, r9
 80117a4:	f7ee ff60 	bl	8000668 <__aeabi_dmul>
 80117a8:	4b6b      	ldr	r3, [pc, #428]	; (8011958 <__ieee754_pow+0x770>)
 80117aa:	2200      	movs	r2, #0
 80117ac:	4606      	mov	r6, r0
 80117ae:	460f      	mov	r7, r1
 80117b0:	f7ee fda4 	bl	80002fc <__adddf3>
 80117b4:	4652      	mov	r2, sl
 80117b6:	465b      	mov	r3, fp
 80117b8:	f7ee fda0 	bl	80002fc <__adddf3>
 80117bc:	2000      	movs	r0, #0
 80117be:	4604      	mov	r4, r0
 80117c0:	460d      	mov	r5, r1
 80117c2:	4602      	mov	r2, r0
 80117c4:	460b      	mov	r3, r1
 80117c6:	4640      	mov	r0, r8
 80117c8:	4649      	mov	r1, r9
 80117ca:	f7ee ff4d 	bl	8000668 <__aeabi_dmul>
 80117ce:	4b62      	ldr	r3, [pc, #392]	; (8011958 <__ieee754_pow+0x770>)
 80117d0:	4680      	mov	r8, r0
 80117d2:	4689      	mov	r9, r1
 80117d4:	2200      	movs	r2, #0
 80117d6:	4620      	mov	r0, r4
 80117d8:	4629      	mov	r1, r5
 80117da:	f7ee fd8d 	bl	80002f8 <__aeabi_dsub>
 80117de:	4632      	mov	r2, r6
 80117e0:	463b      	mov	r3, r7
 80117e2:	f7ee fd89 	bl	80002f8 <__aeabi_dsub>
 80117e6:	4602      	mov	r2, r0
 80117e8:	460b      	mov	r3, r1
 80117ea:	4650      	mov	r0, sl
 80117ec:	4659      	mov	r1, fp
 80117ee:	f7ee fd83 	bl	80002f8 <__aeabi_dsub>
 80117f2:	ec53 2b18 	vmov	r2, r3, d8
 80117f6:	f7ee ff37 	bl	8000668 <__aeabi_dmul>
 80117fa:	4622      	mov	r2, r4
 80117fc:	4606      	mov	r6, r0
 80117fe:	460f      	mov	r7, r1
 8011800:	462b      	mov	r3, r5
 8011802:	ec51 0b19 	vmov	r0, r1, d9
 8011806:	f7ee ff2f 	bl	8000668 <__aeabi_dmul>
 801180a:	4602      	mov	r2, r0
 801180c:	460b      	mov	r3, r1
 801180e:	4630      	mov	r0, r6
 8011810:	4639      	mov	r1, r7
 8011812:	f7ee fd73 	bl	80002fc <__adddf3>
 8011816:	4606      	mov	r6, r0
 8011818:	460f      	mov	r7, r1
 801181a:	4602      	mov	r2, r0
 801181c:	460b      	mov	r3, r1
 801181e:	4640      	mov	r0, r8
 8011820:	4649      	mov	r1, r9
 8011822:	f7ee fd6b 	bl	80002fc <__adddf3>
 8011826:	a33e      	add	r3, pc, #248	; (adr r3, 8011920 <__ieee754_pow+0x738>)
 8011828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801182c:	2000      	movs	r0, #0
 801182e:	4604      	mov	r4, r0
 8011830:	460d      	mov	r5, r1
 8011832:	f7ee ff19 	bl	8000668 <__aeabi_dmul>
 8011836:	4642      	mov	r2, r8
 8011838:	ec41 0b18 	vmov	d8, r0, r1
 801183c:	464b      	mov	r3, r9
 801183e:	4620      	mov	r0, r4
 8011840:	4629      	mov	r1, r5
 8011842:	f7ee fd59 	bl	80002f8 <__aeabi_dsub>
 8011846:	4602      	mov	r2, r0
 8011848:	460b      	mov	r3, r1
 801184a:	4630      	mov	r0, r6
 801184c:	4639      	mov	r1, r7
 801184e:	f7ee fd53 	bl	80002f8 <__aeabi_dsub>
 8011852:	a335      	add	r3, pc, #212	; (adr r3, 8011928 <__ieee754_pow+0x740>)
 8011854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011858:	f7ee ff06 	bl	8000668 <__aeabi_dmul>
 801185c:	a334      	add	r3, pc, #208	; (adr r3, 8011930 <__ieee754_pow+0x748>)
 801185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011862:	4606      	mov	r6, r0
 8011864:	460f      	mov	r7, r1
 8011866:	4620      	mov	r0, r4
 8011868:	4629      	mov	r1, r5
 801186a:	f7ee fefd 	bl	8000668 <__aeabi_dmul>
 801186e:	4602      	mov	r2, r0
 8011870:	460b      	mov	r3, r1
 8011872:	4630      	mov	r0, r6
 8011874:	4639      	mov	r1, r7
 8011876:	f7ee fd41 	bl	80002fc <__adddf3>
 801187a:	9a07      	ldr	r2, [sp, #28]
 801187c:	4b37      	ldr	r3, [pc, #220]	; (801195c <__ieee754_pow+0x774>)
 801187e:	4413      	add	r3, r2
 8011880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011884:	f7ee fd3a 	bl	80002fc <__adddf3>
 8011888:	4682      	mov	sl, r0
 801188a:	9805      	ldr	r0, [sp, #20]
 801188c:	468b      	mov	fp, r1
 801188e:	f7ee fe81 	bl	8000594 <__aeabi_i2d>
 8011892:	9a07      	ldr	r2, [sp, #28]
 8011894:	4b32      	ldr	r3, [pc, #200]	; (8011960 <__ieee754_pow+0x778>)
 8011896:	4413      	add	r3, r2
 8011898:	e9d3 8900 	ldrd	r8, r9, [r3]
 801189c:	4606      	mov	r6, r0
 801189e:	460f      	mov	r7, r1
 80118a0:	4652      	mov	r2, sl
 80118a2:	465b      	mov	r3, fp
 80118a4:	ec51 0b18 	vmov	r0, r1, d8
 80118a8:	f7ee fd28 	bl	80002fc <__adddf3>
 80118ac:	4642      	mov	r2, r8
 80118ae:	464b      	mov	r3, r9
 80118b0:	f7ee fd24 	bl	80002fc <__adddf3>
 80118b4:	4632      	mov	r2, r6
 80118b6:	463b      	mov	r3, r7
 80118b8:	f7ee fd20 	bl	80002fc <__adddf3>
 80118bc:	2000      	movs	r0, #0
 80118be:	4632      	mov	r2, r6
 80118c0:	463b      	mov	r3, r7
 80118c2:	4604      	mov	r4, r0
 80118c4:	460d      	mov	r5, r1
 80118c6:	f7ee fd17 	bl	80002f8 <__aeabi_dsub>
 80118ca:	4642      	mov	r2, r8
 80118cc:	464b      	mov	r3, r9
 80118ce:	f7ee fd13 	bl	80002f8 <__aeabi_dsub>
 80118d2:	ec53 2b18 	vmov	r2, r3, d8
 80118d6:	f7ee fd0f 	bl	80002f8 <__aeabi_dsub>
 80118da:	4602      	mov	r2, r0
 80118dc:	460b      	mov	r3, r1
 80118de:	4650      	mov	r0, sl
 80118e0:	4659      	mov	r1, fp
 80118e2:	e610      	b.n	8011506 <__ieee754_pow+0x31e>
 80118e4:	2401      	movs	r4, #1
 80118e6:	e6a1      	b.n	801162c <__ieee754_pow+0x444>
 80118e8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011938 <__ieee754_pow+0x750>
 80118ec:	e617      	b.n	801151e <__ieee754_pow+0x336>
 80118ee:	bf00      	nop
 80118f0:	4a454eef 	.word	0x4a454eef
 80118f4:	3fca7e28 	.word	0x3fca7e28
 80118f8:	93c9db65 	.word	0x93c9db65
 80118fc:	3fcd864a 	.word	0x3fcd864a
 8011900:	a91d4101 	.word	0xa91d4101
 8011904:	3fd17460 	.word	0x3fd17460
 8011908:	518f264d 	.word	0x518f264d
 801190c:	3fd55555 	.word	0x3fd55555
 8011910:	db6fabff 	.word	0xdb6fabff
 8011914:	3fdb6db6 	.word	0x3fdb6db6
 8011918:	33333303 	.word	0x33333303
 801191c:	3fe33333 	.word	0x3fe33333
 8011920:	e0000000 	.word	0xe0000000
 8011924:	3feec709 	.word	0x3feec709
 8011928:	dc3a03fd 	.word	0xdc3a03fd
 801192c:	3feec709 	.word	0x3feec709
 8011930:	145b01f5 	.word	0x145b01f5
 8011934:	be3e2fe0 	.word	0xbe3e2fe0
 8011938:	00000000 	.word	0x00000000
 801193c:	3ff00000 	.word	0x3ff00000
 8011940:	7ff00000 	.word	0x7ff00000
 8011944:	43400000 	.word	0x43400000
 8011948:	0003988e 	.word	0x0003988e
 801194c:	000bb679 	.word	0x000bb679
 8011950:	08012518 	.word	0x08012518
 8011954:	3ff00000 	.word	0x3ff00000
 8011958:	40080000 	.word	0x40080000
 801195c:	08012538 	.word	0x08012538
 8011960:	08012528 	.word	0x08012528
 8011964:	a3b3      	add	r3, pc, #716	; (adr r3, 8011c34 <__ieee754_pow+0xa4c>)
 8011966:	e9d3 2300 	ldrd	r2, r3, [r3]
 801196a:	4640      	mov	r0, r8
 801196c:	4649      	mov	r1, r9
 801196e:	f7ee fcc5 	bl	80002fc <__adddf3>
 8011972:	4622      	mov	r2, r4
 8011974:	ec41 0b1a 	vmov	d10, r0, r1
 8011978:	462b      	mov	r3, r5
 801197a:	4630      	mov	r0, r6
 801197c:	4639      	mov	r1, r7
 801197e:	f7ee fcbb 	bl	80002f8 <__aeabi_dsub>
 8011982:	4602      	mov	r2, r0
 8011984:	460b      	mov	r3, r1
 8011986:	ec51 0b1a 	vmov	r0, r1, d10
 801198a:	f7ef f8fd 	bl	8000b88 <__aeabi_dcmpgt>
 801198e:	2800      	cmp	r0, #0
 8011990:	f47f ae04 	bne.w	801159c <__ieee754_pow+0x3b4>
 8011994:	4aa2      	ldr	r2, [pc, #648]	; (8011c20 <__ieee754_pow+0xa38>)
 8011996:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801199a:	4293      	cmp	r3, r2
 801199c:	f340 8107 	ble.w	8011bae <__ieee754_pow+0x9c6>
 80119a0:	151b      	asrs	r3, r3, #20
 80119a2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80119a6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80119aa:	fa4a fa03 	asr.w	sl, sl, r3
 80119ae:	44da      	add	sl, fp
 80119b0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80119b4:	489b      	ldr	r0, [pc, #620]	; (8011c24 <__ieee754_pow+0xa3c>)
 80119b6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80119ba:	4108      	asrs	r0, r1
 80119bc:	ea00 030a 	and.w	r3, r0, sl
 80119c0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80119c4:	f1c1 0114 	rsb	r1, r1, #20
 80119c8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80119cc:	fa4a fa01 	asr.w	sl, sl, r1
 80119d0:	f1bb 0f00 	cmp.w	fp, #0
 80119d4:	f04f 0200 	mov.w	r2, #0
 80119d8:	4620      	mov	r0, r4
 80119da:	4629      	mov	r1, r5
 80119dc:	bfb8      	it	lt
 80119de:	f1ca 0a00 	rsblt	sl, sl, #0
 80119e2:	f7ee fc89 	bl	80002f8 <__aeabi_dsub>
 80119e6:	ec41 0b19 	vmov	d9, r0, r1
 80119ea:	4642      	mov	r2, r8
 80119ec:	464b      	mov	r3, r9
 80119ee:	ec51 0b19 	vmov	r0, r1, d9
 80119f2:	f7ee fc83 	bl	80002fc <__adddf3>
 80119f6:	a37a      	add	r3, pc, #488	; (adr r3, 8011be0 <__ieee754_pow+0x9f8>)
 80119f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119fc:	2000      	movs	r0, #0
 80119fe:	4604      	mov	r4, r0
 8011a00:	460d      	mov	r5, r1
 8011a02:	f7ee fe31 	bl	8000668 <__aeabi_dmul>
 8011a06:	ec53 2b19 	vmov	r2, r3, d9
 8011a0a:	4606      	mov	r6, r0
 8011a0c:	460f      	mov	r7, r1
 8011a0e:	4620      	mov	r0, r4
 8011a10:	4629      	mov	r1, r5
 8011a12:	f7ee fc71 	bl	80002f8 <__aeabi_dsub>
 8011a16:	4602      	mov	r2, r0
 8011a18:	460b      	mov	r3, r1
 8011a1a:	4640      	mov	r0, r8
 8011a1c:	4649      	mov	r1, r9
 8011a1e:	f7ee fc6b 	bl	80002f8 <__aeabi_dsub>
 8011a22:	a371      	add	r3, pc, #452	; (adr r3, 8011be8 <__ieee754_pow+0xa00>)
 8011a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a28:	f7ee fe1e 	bl	8000668 <__aeabi_dmul>
 8011a2c:	a370      	add	r3, pc, #448	; (adr r3, 8011bf0 <__ieee754_pow+0xa08>)
 8011a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a32:	4680      	mov	r8, r0
 8011a34:	4689      	mov	r9, r1
 8011a36:	4620      	mov	r0, r4
 8011a38:	4629      	mov	r1, r5
 8011a3a:	f7ee fe15 	bl	8000668 <__aeabi_dmul>
 8011a3e:	4602      	mov	r2, r0
 8011a40:	460b      	mov	r3, r1
 8011a42:	4640      	mov	r0, r8
 8011a44:	4649      	mov	r1, r9
 8011a46:	f7ee fc59 	bl	80002fc <__adddf3>
 8011a4a:	4604      	mov	r4, r0
 8011a4c:	460d      	mov	r5, r1
 8011a4e:	4602      	mov	r2, r0
 8011a50:	460b      	mov	r3, r1
 8011a52:	4630      	mov	r0, r6
 8011a54:	4639      	mov	r1, r7
 8011a56:	f7ee fc51 	bl	80002fc <__adddf3>
 8011a5a:	4632      	mov	r2, r6
 8011a5c:	463b      	mov	r3, r7
 8011a5e:	4680      	mov	r8, r0
 8011a60:	4689      	mov	r9, r1
 8011a62:	f7ee fc49 	bl	80002f8 <__aeabi_dsub>
 8011a66:	4602      	mov	r2, r0
 8011a68:	460b      	mov	r3, r1
 8011a6a:	4620      	mov	r0, r4
 8011a6c:	4629      	mov	r1, r5
 8011a6e:	f7ee fc43 	bl	80002f8 <__aeabi_dsub>
 8011a72:	4642      	mov	r2, r8
 8011a74:	4606      	mov	r6, r0
 8011a76:	460f      	mov	r7, r1
 8011a78:	464b      	mov	r3, r9
 8011a7a:	4640      	mov	r0, r8
 8011a7c:	4649      	mov	r1, r9
 8011a7e:	f7ee fdf3 	bl	8000668 <__aeabi_dmul>
 8011a82:	a35d      	add	r3, pc, #372	; (adr r3, 8011bf8 <__ieee754_pow+0xa10>)
 8011a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a88:	4604      	mov	r4, r0
 8011a8a:	460d      	mov	r5, r1
 8011a8c:	f7ee fdec 	bl	8000668 <__aeabi_dmul>
 8011a90:	a35b      	add	r3, pc, #364	; (adr r3, 8011c00 <__ieee754_pow+0xa18>)
 8011a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a96:	f7ee fc2f 	bl	80002f8 <__aeabi_dsub>
 8011a9a:	4622      	mov	r2, r4
 8011a9c:	462b      	mov	r3, r5
 8011a9e:	f7ee fde3 	bl	8000668 <__aeabi_dmul>
 8011aa2:	a359      	add	r3, pc, #356	; (adr r3, 8011c08 <__ieee754_pow+0xa20>)
 8011aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aa8:	f7ee fc28 	bl	80002fc <__adddf3>
 8011aac:	4622      	mov	r2, r4
 8011aae:	462b      	mov	r3, r5
 8011ab0:	f7ee fdda 	bl	8000668 <__aeabi_dmul>
 8011ab4:	a356      	add	r3, pc, #344	; (adr r3, 8011c10 <__ieee754_pow+0xa28>)
 8011ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aba:	f7ee fc1d 	bl	80002f8 <__aeabi_dsub>
 8011abe:	4622      	mov	r2, r4
 8011ac0:	462b      	mov	r3, r5
 8011ac2:	f7ee fdd1 	bl	8000668 <__aeabi_dmul>
 8011ac6:	a354      	add	r3, pc, #336	; (adr r3, 8011c18 <__ieee754_pow+0xa30>)
 8011ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011acc:	f7ee fc16 	bl	80002fc <__adddf3>
 8011ad0:	4622      	mov	r2, r4
 8011ad2:	462b      	mov	r3, r5
 8011ad4:	f7ee fdc8 	bl	8000668 <__aeabi_dmul>
 8011ad8:	4602      	mov	r2, r0
 8011ada:	460b      	mov	r3, r1
 8011adc:	4640      	mov	r0, r8
 8011ade:	4649      	mov	r1, r9
 8011ae0:	f7ee fc0a 	bl	80002f8 <__aeabi_dsub>
 8011ae4:	4604      	mov	r4, r0
 8011ae6:	460d      	mov	r5, r1
 8011ae8:	4602      	mov	r2, r0
 8011aea:	460b      	mov	r3, r1
 8011aec:	4640      	mov	r0, r8
 8011aee:	4649      	mov	r1, r9
 8011af0:	f7ee fdba 	bl	8000668 <__aeabi_dmul>
 8011af4:	2200      	movs	r2, #0
 8011af6:	ec41 0b19 	vmov	d9, r0, r1
 8011afa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011afe:	4620      	mov	r0, r4
 8011b00:	4629      	mov	r1, r5
 8011b02:	f7ee fbf9 	bl	80002f8 <__aeabi_dsub>
 8011b06:	4602      	mov	r2, r0
 8011b08:	460b      	mov	r3, r1
 8011b0a:	ec51 0b19 	vmov	r0, r1, d9
 8011b0e:	f7ee fed5 	bl	80008bc <__aeabi_ddiv>
 8011b12:	4632      	mov	r2, r6
 8011b14:	4604      	mov	r4, r0
 8011b16:	460d      	mov	r5, r1
 8011b18:	463b      	mov	r3, r7
 8011b1a:	4640      	mov	r0, r8
 8011b1c:	4649      	mov	r1, r9
 8011b1e:	f7ee fda3 	bl	8000668 <__aeabi_dmul>
 8011b22:	4632      	mov	r2, r6
 8011b24:	463b      	mov	r3, r7
 8011b26:	f7ee fbe9 	bl	80002fc <__adddf3>
 8011b2a:	4602      	mov	r2, r0
 8011b2c:	460b      	mov	r3, r1
 8011b2e:	4620      	mov	r0, r4
 8011b30:	4629      	mov	r1, r5
 8011b32:	f7ee fbe1 	bl	80002f8 <__aeabi_dsub>
 8011b36:	4642      	mov	r2, r8
 8011b38:	464b      	mov	r3, r9
 8011b3a:	f7ee fbdd 	bl	80002f8 <__aeabi_dsub>
 8011b3e:	460b      	mov	r3, r1
 8011b40:	4602      	mov	r2, r0
 8011b42:	4939      	ldr	r1, [pc, #228]	; (8011c28 <__ieee754_pow+0xa40>)
 8011b44:	2000      	movs	r0, #0
 8011b46:	f7ee fbd7 	bl	80002f8 <__aeabi_dsub>
 8011b4a:	ec41 0b10 	vmov	d0, r0, r1
 8011b4e:	ee10 3a90 	vmov	r3, s1
 8011b52:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011b5a:	da2b      	bge.n	8011bb4 <__ieee754_pow+0x9cc>
 8011b5c:	4650      	mov	r0, sl
 8011b5e:	f000 f877 	bl	8011c50 <scalbn>
 8011b62:	ec51 0b10 	vmov	r0, r1, d0
 8011b66:	ec53 2b18 	vmov	r2, r3, d8
 8011b6a:	f7ff bbee 	b.w	801134a <__ieee754_pow+0x162>
 8011b6e:	4b2f      	ldr	r3, [pc, #188]	; (8011c2c <__ieee754_pow+0xa44>)
 8011b70:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011b74:	429e      	cmp	r6, r3
 8011b76:	f77f af0d 	ble.w	8011994 <__ieee754_pow+0x7ac>
 8011b7a:	4b2d      	ldr	r3, [pc, #180]	; (8011c30 <__ieee754_pow+0xa48>)
 8011b7c:	440b      	add	r3, r1
 8011b7e:	4303      	orrs	r3, r0
 8011b80:	d009      	beq.n	8011b96 <__ieee754_pow+0x9ae>
 8011b82:	ec51 0b18 	vmov	r0, r1, d8
 8011b86:	2200      	movs	r2, #0
 8011b88:	2300      	movs	r3, #0
 8011b8a:	f7ee ffdf 	bl	8000b4c <__aeabi_dcmplt>
 8011b8e:	3800      	subs	r0, #0
 8011b90:	bf18      	it	ne
 8011b92:	2001      	movne	r0, #1
 8011b94:	e448      	b.n	8011428 <__ieee754_pow+0x240>
 8011b96:	4622      	mov	r2, r4
 8011b98:	462b      	mov	r3, r5
 8011b9a:	f7ee fbad 	bl	80002f8 <__aeabi_dsub>
 8011b9e:	4642      	mov	r2, r8
 8011ba0:	464b      	mov	r3, r9
 8011ba2:	f7ee ffe7 	bl	8000b74 <__aeabi_dcmpge>
 8011ba6:	2800      	cmp	r0, #0
 8011ba8:	f43f aef4 	beq.w	8011994 <__ieee754_pow+0x7ac>
 8011bac:	e7e9      	b.n	8011b82 <__ieee754_pow+0x99a>
 8011bae:	f04f 0a00 	mov.w	sl, #0
 8011bb2:	e71a      	b.n	80119ea <__ieee754_pow+0x802>
 8011bb4:	ec51 0b10 	vmov	r0, r1, d0
 8011bb8:	4619      	mov	r1, r3
 8011bba:	e7d4      	b.n	8011b66 <__ieee754_pow+0x97e>
 8011bbc:	491a      	ldr	r1, [pc, #104]	; (8011c28 <__ieee754_pow+0xa40>)
 8011bbe:	2000      	movs	r0, #0
 8011bc0:	f7ff bb31 	b.w	8011226 <__ieee754_pow+0x3e>
 8011bc4:	2000      	movs	r0, #0
 8011bc6:	2100      	movs	r1, #0
 8011bc8:	f7ff bb2d 	b.w	8011226 <__ieee754_pow+0x3e>
 8011bcc:	4630      	mov	r0, r6
 8011bce:	4639      	mov	r1, r7
 8011bd0:	f7ff bb29 	b.w	8011226 <__ieee754_pow+0x3e>
 8011bd4:	9204      	str	r2, [sp, #16]
 8011bd6:	f7ff bb7b 	b.w	80112d0 <__ieee754_pow+0xe8>
 8011bda:	2300      	movs	r3, #0
 8011bdc:	f7ff bb65 	b.w	80112aa <__ieee754_pow+0xc2>
 8011be0:	00000000 	.word	0x00000000
 8011be4:	3fe62e43 	.word	0x3fe62e43
 8011be8:	fefa39ef 	.word	0xfefa39ef
 8011bec:	3fe62e42 	.word	0x3fe62e42
 8011bf0:	0ca86c39 	.word	0x0ca86c39
 8011bf4:	be205c61 	.word	0xbe205c61
 8011bf8:	72bea4d0 	.word	0x72bea4d0
 8011bfc:	3e663769 	.word	0x3e663769
 8011c00:	c5d26bf1 	.word	0xc5d26bf1
 8011c04:	3ebbbd41 	.word	0x3ebbbd41
 8011c08:	af25de2c 	.word	0xaf25de2c
 8011c0c:	3f11566a 	.word	0x3f11566a
 8011c10:	16bebd93 	.word	0x16bebd93
 8011c14:	3f66c16c 	.word	0x3f66c16c
 8011c18:	5555553e 	.word	0x5555553e
 8011c1c:	3fc55555 	.word	0x3fc55555
 8011c20:	3fe00000 	.word	0x3fe00000
 8011c24:	fff00000 	.word	0xfff00000
 8011c28:	3ff00000 	.word	0x3ff00000
 8011c2c:	4090cbff 	.word	0x4090cbff
 8011c30:	3f6f3400 	.word	0x3f6f3400
 8011c34:	652b82fe 	.word	0x652b82fe
 8011c38:	3c971547 	.word	0x3c971547

08011c3c <fabs>:
 8011c3c:	ec51 0b10 	vmov	r0, r1, d0
 8011c40:	ee10 2a10 	vmov	r2, s0
 8011c44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011c48:	ec43 2b10 	vmov	d0, r2, r3
 8011c4c:	4770      	bx	lr
	...

08011c50 <scalbn>:
 8011c50:	b570      	push	{r4, r5, r6, lr}
 8011c52:	ec55 4b10 	vmov	r4, r5, d0
 8011c56:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011c5a:	4606      	mov	r6, r0
 8011c5c:	462b      	mov	r3, r5
 8011c5e:	b999      	cbnz	r1, 8011c88 <scalbn+0x38>
 8011c60:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011c64:	4323      	orrs	r3, r4
 8011c66:	d03f      	beq.n	8011ce8 <scalbn+0x98>
 8011c68:	4b35      	ldr	r3, [pc, #212]	; (8011d40 <scalbn+0xf0>)
 8011c6a:	4629      	mov	r1, r5
 8011c6c:	ee10 0a10 	vmov	r0, s0
 8011c70:	2200      	movs	r2, #0
 8011c72:	f7ee fcf9 	bl	8000668 <__aeabi_dmul>
 8011c76:	4b33      	ldr	r3, [pc, #204]	; (8011d44 <scalbn+0xf4>)
 8011c78:	429e      	cmp	r6, r3
 8011c7a:	4604      	mov	r4, r0
 8011c7c:	460d      	mov	r5, r1
 8011c7e:	da10      	bge.n	8011ca2 <scalbn+0x52>
 8011c80:	a327      	add	r3, pc, #156	; (adr r3, 8011d20 <scalbn+0xd0>)
 8011c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c86:	e01f      	b.n	8011cc8 <scalbn+0x78>
 8011c88:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011c8c:	4291      	cmp	r1, r2
 8011c8e:	d10c      	bne.n	8011caa <scalbn+0x5a>
 8011c90:	ee10 2a10 	vmov	r2, s0
 8011c94:	4620      	mov	r0, r4
 8011c96:	4629      	mov	r1, r5
 8011c98:	f7ee fb30 	bl	80002fc <__adddf3>
 8011c9c:	4604      	mov	r4, r0
 8011c9e:	460d      	mov	r5, r1
 8011ca0:	e022      	b.n	8011ce8 <scalbn+0x98>
 8011ca2:	460b      	mov	r3, r1
 8011ca4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011ca8:	3936      	subs	r1, #54	; 0x36
 8011caa:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011cae:	4296      	cmp	r6, r2
 8011cb0:	dd0d      	ble.n	8011cce <scalbn+0x7e>
 8011cb2:	2d00      	cmp	r5, #0
 8011cb4:	a11c      	add	r1, pc, #112	; (adr r1, 8011d28 <scalbn+0xd8>)
 8011cb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011cba:	da02      	bge.n	8011cc2 <scalbn+0x72>
 8011cbc:	a11c      	add	r1, pc, #112	; (adr r1, 8011d30 <scalbn+0xe0>)
 8011cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011cc2:	a319      	add	r3, pc, #100	; (adr r3, 8011d28 <scalbn+0xd8>)
 8011cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc8:	f7ee fcce 	bl	8000668 <__aeabi_dmul>
 8011ccc:	e7e6      	b.n	8011c9c <scalbn+0x4c>
 8011cce:	1872      	adds	r2, r6, r1
 8011cd0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011cd4:	428a      	cmp	r2, r1
 8011cd6:	dcec      	bgt.n	8011cb2 <scalbn+0x62>
 8011cd8:	2a00      	cmp	r2, #0
 8011cda:	dd08      	ble.n	8011cee <scalbn+0x9e>
 8011cdc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011ce0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011ce4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011ce8:	ec45 4b10 	vmov	d0, r4, r5
 8011cec:	bd70      	pop	{r4, r5, r6, pc}
 8011cee:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011cf2:	da08      	bge.n	8011d06 <scalbn+0xb6>
 8011cf4:	2d00      	cmp	r5, #0
 8011cf6:	a10a      	add	r1, pc, #40	; (adr r1, 8011d20 <scalbn+0xd0>)
 8011cf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011cfc:	dac0      	bge.n	8011c80 <scalbn+0x30>
 8011cfe:	a10e      	add	r1, pc, #56	; (adr r1, 8011d38 <scalbn+0xe8>)
 8011d00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011d04:	e7bc      	b.n	8011c80 <scalbn+0x30>
 8011d06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011d0a:	3236      	adds	r2, #54	; 0x36
 8011d0c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011d10:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011d14:	4620      	mov	r0, r4
 8011d16:	4b0c      	ldr	r3, [pc, #48]	; (8011d48 <scalbn+0xf8>)
 8011d18:	2200      	movs	r2, #0
 8011d1a:	e7d5      	b.n	8011cc8 <scalbn+0x78>
 8011d1c:	f3af 8000 	nop.w
 8011d20:	c2f8f359 	.word	0xc2f8f359
 8011d24:	01a56e1f 	.word	0x01a56e1f
 8011d28:	8800759c 	.word	0x8800759c
 8011d2c:	7e37e43c 	.word	0x7e37e43c
 8011d30:	8800759c 	.word	0x8800759c
 8011d34:	fe37e43c 	.word	0xfe37e43c
 8011d38:	c2f8f359 	.word	0xc2f8f359
 8011d3c:	81a56e1f 	.word	0x81a56e1f
 8011d40:	43500000 	.word	0x43500000
 8011d44:	ffff3cb0 	.word	0xffff3cb0
 8011d48:	3c900000 	.word	0x3c900000

08011d4c <with_errno>:
 8011d4c:	b570      	push	{r4, r5, r6, lr}
 8011d4e:	4604      	mov	r4, r0
 8011d50:	460d      	mov	r5, r1
 8011d52:	4616      	mov	r6, r2
 8011d54:	f7fd f922 	bl	800ef9c <__errno>
 8011d58:	4629      	mov	r1, r5
 8011d5a:	6006      	str	r6, [r0, #0]
 8011d5c:	4620      	mov	r0, r4
 8011d5e:	bd70      	pop	{r4, r5, r6, pc}

08011d60 <xflow>:
 8011d60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011d62:	4614      	mov	r4, r2
 8011d64:	461d      	mov	r5, r3
 8011d66:	b108      	cbz	r0, 8011d6c <xflow+0xc>
 8011d68:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011d6c:	e9cd 2300 	strd	r2, r3, [sp]
 8011d70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011d74:	4620      	mov	r0, r4
 8011d76:	4629      	mov	r1, r5
 8011d78:	f7ee fc76 	bl	8000668 <__aeabi_dmul>
 8011d7c:	2222      	movs	r2, #34	; 0x22
 8011d7e:	b003      	add	sp, #12
 8011d80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d84:	f7ff bfe2 	b.w	8011d4c <with_errno>

08011d88 <__math_uflow>:
 8011d88:	b508      	push	{r3, lr}
 8011d8a:	2200      	movs	r2, #0
 8011d8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011d90:	f7ff ffe6 	bl	8011d60 <xflow>
 8011d94:	ec41 0b10 	vmov	d0, r0, r1
 8011d98:	bd08      	pop	{r3, pc}

08011d9a <__math_oflow>:
 8011d9a:	b508      	push	{r3, lr}
 8011d9c:	2200      	movs	r2, #0
 8011d9e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8011da2:	f7ff ffdd 	bl	8011d60 <xflow>
 8011da6:	ec41 0b10 	vmov	d0, r0, r1
 8011daa:	bd08      	pop	{r3, pc}

08011dac <__ieee754_sqrt>:
 8011dac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011db0:	ec55 4b10 	vmov	r4, r5, d0
 8011db4:	4e67      	ldr	r6, [pc, #412]	; (8011f54 <__ieee754_sqrt+0x1a8>)
 8011db6:	43ae      	bics	r6, r5
 8011db8:	ee10 0a10 	vmov	r0, s0
 8011dbc:	ee10 2a10 	vmov	r2, s0
 8011dc0:	4629      	mov	r1, r5
 8011dc2:	462b      	mov	r3, r5
 8011dc4:	d10d      	bne.n	8011de2 <__ieee754_sqrt+0x36>
 8011dc6:	f7ee fc4f 	bl	8000668 <__aeabi_dmul>
 8011dca:	4602      	mov	r2, r0
 8011dcc:	460b      	mov	r3, r1
 8011dce:	4620      	mov	r0, r4
 8011dd0:	4629      	mov	r1, r5
 8011dd2:	f7ee fa93 	bl	80002fc <__adddf3>
 8011dd6:	4604      	mov	r4, r0
 8011dd8:	460d      	mov	r5, r1
 8011dda:	ec45 4b10 	vmov	d0, r4, r5
 8011dde:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011de2:	2d00      	cmp	r5, #0
 8011de4:	dc0b      	bgt.n	8011dfe <__ieee754_sqrt+0x52>
 8011de6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011dea:	4326      	orrs	r6, r4
 8011dec:	d0f5      	beq.n	8011dda <__ieee754_sqrt+0x2e>
 8011dee:	b135      	cbz	r5, 8011dfe <__ieee754_sqrt+0x52>
 8011df0:	f7ee fa82 	bl	80002f8 <__aeabi_dsub>
 8011df4:	4602      	mov	r2, r0
 8011df6:	460b      	mov	r3, r1
 8011df8:	f7ee fd60 	bl	80008bc <__aeabi_ddiv>
 8011dfc:	e7eb      	b.n	8011dd6 <__ieee754_sqrt+0x2a>
 8011dfe:	1509      	asrs	r1, r1, #20
 8011e00:	f000 808d 	beq.w	8011f1e <__ieee754_sqrt+0x172>
 8011e04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011e08:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8011e0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011e10:	07c9      	lsls	r1, r1, #31
 8011e12:	bf5c      	itt	pl
 8011e14:	005b      	lslpl	r3, r3, #1
 8011e16:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8011e1a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011e1e:	bf58      	it	pl
 8011e20:	0052      	lslpl	r2, r2, #1
 8011e22:	2500      	movs	r5, #0
 8011e24:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011e28:	1076      	asrs	r6, r6, #1
 8011e2a:	0052      	lsls	r2, r2, #1
 8011e2c:	f04f 0e16 	mov.w	lr, #22
 8011e30:	46ac      	mov	ip, r5
 8011e32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011e36:	eb0c 0001 	add.w	r0, ip, r1
 8011e3a:	4298      	cmp	r0, r3
 8011e3c:	bfde      	ittt	le
 8011e3e:	1a1b      	suble	r3, r3, r0
 8011e40:	eb00 0c01 	addle.w	ip, r0, r1
 8011e44:	186d      	addle	r5, r5, r1
 8011e46:	005b      	lsls	r3, r3, #1
 8011e48:	f1be 0e01 	subs.w	lr, lr, #1
 8011e4c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011e50:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011e54:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011e58:	d1ed      	bne.n	8011e36 <__ieee754_sqrt+0x8a>
 8011e5a:	4674      	mov	r4, lr
 8011e5c:	2720      	movs	r7, #32
 8011e5e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8011e62:	4563      	cmp	r3, ip
 8011e64:	eb01 000e 	add.w	r0, r1, lr
 8011e68:	dc02      	bgt.n	8011e70 <__ieee754_sqrt+0xc4>
 8011e6a:	d113      	bne.n	8011e94 <__ieee754_sqrt+0xe8>
 8011e6c:	4290      	cmp	r0, r2
 8011e6e:	d811      	bhi.n	8011e94 <__ieee754_sqrt+0xe8>
 8011e70:	2800      	cmp	r0, #0
 8011e72:	eb00 0e01 	add.w	lr, r0, r1
 8011e76:	da57      	bge.n	8011f28 <__ieee754_sqrt+0x17c>
 8011e78:	f1be 0f00 	cmp.w	lr, #0
 8011e7c:	db54      	blt.n	8011f28 <__ieee754_sqrt+0x17c>
 8011e7e:	f10c 0801 	add.w	r8, ip, #1
 8011e82:	eba3 030c 	sub.w	r3, r3, ip
 8011e86:	4290      	cmp	r0, r2
 8011e88:	bf88      	it	hi
 8011e8a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011e8e:	1a12      	subs	r2, r2, r0
 8011e90:	440c      	add	r4, r1
 8011e92:	46c4      	mov	ip, r8
 8011e94:	005b      	lsls	r3, r3, #1
 8011e96:	3f01      	subs	r7, #1
 8011e98:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011e9c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011ea0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011ea4:	d1dd      	bne.n	8011e62 <__ieee754_sqrt+0xb6>
 8011ea6:	4313      	orrs	r3, r2
 8011ea8:	d01b      	beq.n	8011ee2 <__ieee754_sqrt+0x136>
 8011eaa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8011f58 <__ieee754_sqrt+0x1ac>
 8011eae:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8011f5c <__ieee754_sqrt+0x1b0>
 8011eb2:	e9da 0100 	ldrd	r0, r1, [sl]
 8011eb6:	e9db 2300 	ldrd	r2, r3, [fp]
 8011eba:	f7ee fa1d 	bl	80002f8 <__aeabi_dsub>
 8011ebe:	e9da 8900 	ldrd	r8, r9, [sl]
 8011ec2:	4602      	mov	r2, r0
 8011ec4:	460b      	mov	r3, r1
 8011ec6:	4640      	mov	r0, r8
 8011ec8:	4649      	mov	r1, r9
 8011eca:	f7ee fe49 	bl	8000b60 <__aeabi_dcmple>
 8011ece:	b140      	cbz	r0, 8011ee2 <__ieee754_sqrt+0x136>
 8011ed0:	f1b4 3fff 	cmp.w	r4, #4294967295
 8011ed4:	e9da 0100 	ldrd	r0, r1, [sl]
 8011ed8:	e9db 2300 	ldrd	r2, r3, [fp]
 8011edc:	d126      	bne.n	8011f2c <__ieee754_sqrt+0x180>
 8011ede:	3501      	adds	r5, #1
 8011ee0:	463c      	mov	r4, r7
 8011ee2:	106a      	asrs	r2, r5, #1
 8011ee4:	0863      	lsrs	r3, r4, #1
 8011ee6:	07e9      	lsls	r1, r5, #31
 8011ee8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011eec:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011ef0:	bf48      	it	mi
 8011ef2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011ef6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8011efa:	461c      	mov	r4, r3
 8011efc:	e76d      	b.n	8011dda <__ieee754_sqrt+0x2e>
 8011efe:	0ad3      	lsrs	r3, r2, #11
 8011f00:	3815      	subs	r0, #21
 8011f02:	0552      	lsls	r2, r2, #21
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d0fa      	beq.n	8011efe <__ieee754_sqrt+0x152>
 8011f08:	02dc      	lsls	r4, r3, #11
 8011f0a:	d50a      	bpl.n	8011f22 <__ieee754_sqrt+0x176>
 8011f0c:	f1c1 0420 	rsb	r4, r1, #32
 8011f10:	fa22 f404 	lsr.w	r4, r2, r4
 8011f14:	1e4d      	subs	r5, r1, #1
 8011f16:	408a      	lsls	r2, r1
 8011f18:	4323      	orrs	r3, r4
 8011f1a:	1b41      	subs	r1, r0, r5
 8011f1c:	e772      	b.n	8011e04 <__ieee754_sqrt+0x58>
 8011f1e:	4608      	mov	r0, r1
 8011f20:	e7f0      	b.n	8011f04 <__ieee754_sqrt+0x158>
 8011f22:	005b      	lsls	r3, r3, #1
 8011f24:	3101      	adds	r1, #1
 8011f26:	e7ef      	b.n	8011f08 <__ieee754_sqrt+0x15c>
 8011f28:	46e0      	mov	r8, ip
 8011f2a:	e7aa      	b.n	8011e82 <__ieee754_sqrt+0xd6>
 8011f2c:	f7ee f9e6 	bl	80002fc <__adddf3>
 8011f30:	e9da 8900 	ldrd	r8, r9, [sl]
 8011f34:	4602      	mov	r2, r0
 8011f36:	460b      	mov	r3, r1
 8011f38:	4640      	mov	r0, r8
 8011f3a:	4649      	mov	r1, r9
 8011f3c:	f7ee fe06 	bl	8000b4c <__aeabi_dcmplt>
 8011f40:	b120      	cbz	r0, 8011f4c <__ieee754_sqrt+0x1a0>
 8011f42:	1ca0      	adds	r0, r4, #2
 8011f44:	bf08      	it	eq
 8011f46:	3501      	addeq	r5, #1
 8011f48:	3402      	adds	r4, #2
 8011f4a:	e7ca      	b.n	8011ee2 <__ieee754_sqrt+0x136>
 8011f4c:	3401      	adds	r4, #1
 8011f4e:	f024 0401 	bic.w	r4, r4, #1
 8011f52:	e7c6      	b.n	8011ee2 <__ieee754_sqrt+0x136>
 8011f54:	7ff00000 	.word	0x7ff00000
 8011f58:	20000360 	.word	0x20000360
 8011f5c:	20000368 	.word	0x20000368

08011f60 <_init>:
 8011f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f62:	bf00      	nop
 8011f64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f66:	bc08      	pop	{r3}
 8011f68:	469e      	mov	lr, r3
 8011f6a:	4770      	bx	lr

08011f6c <_fini>:
 8011f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f6e:	bf00      	nop
 8011f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011f72:	bc08      	pop	{r3}
 8011f74:	469e      	mov	lr, r3
 8011f76:	4770      	bx	lr
