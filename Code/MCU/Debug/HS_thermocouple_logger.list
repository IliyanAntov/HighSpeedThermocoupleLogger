
HS_thermocouple_logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011d20  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  08011f00  08011f00  00021f00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080124d0  080124d0  00030370  2**0
                  CONTENTS
  4 .ARM          00000000  080124d0  080124d0  00030370  2**0
                  CONTENTS
  5 .preinit_array 00000000  080124d0  080124d0  00030370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080124d0  080124d0  000224d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080124d4  080124d4  000224d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000370  20000000  080124d8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f98  20000370  08012848  00030370  2**2
                  ALLOC
 10 ._user_heap_stack 00002000  20004308  08012848  00034308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030370  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000303a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002025d  00000000  00000000  000303e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000047c3  00000000  00000000  00050640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ce0  00000000  00000000  00054e08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001625  00000000  00000000  00056ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cdaf  00000000  00000000  0005810d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002395b  00000000  00000000  00084ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001198db  00000000  00000000  000a8817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009020  00000000  00000000  001c20f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  001cb114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000370 	.word	0x20000370
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011ee8 	.word	0x08011ee8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000374 	.word	0x20000374
 800021c:	08011ee8 	.word	0x08011ee8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2uiz>:
 8000c18:	004a      	lsls	r2, r1, #1
 8000c1a:	d211      	bcs.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c1c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c20:	d211      	bcs.n	8000c46 <__aeabi_d2uiz+0x2e>
 8000c22:	d50d      	bpl.n	8000c40 <__aeabi_d2uiz+0x28>
 8000c24:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c2c:	d40e      	bmi.n	8000c4c <__aeabi_d2uiz+0x34>
 8000c2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c3a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_d2uiz+0x3a>
 8000c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfc:	f001 fe13 	bl	8002926 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d00:	f000 f8b6 	bl	8000e70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d04:	f000 fbf6 	bl	80014f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d08:	f000 fbb2 	bl	8001470 <MX_DMA_Init>
  MX_ADC1_Init();
 8000d0c:	f000 f8fc 	bl	8000f08 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000d10:	f000 f97e 	bl	8001010 <MX_ADC2_Init>
  MX_ADC3_Init();
 8000d14:	f000 f9ee 	bl	80010f4 <MX_ADC3_Init>
  MX_ADC4_Init();
 8000d18:	f000 fa72 	bl	8001200 <MX_ADC4_Init>
  MX_TIM2_Init();
 8000d1c:	f000 fb5c 	bl	80013d8 <MX_TIM2_Init>
  MX_USB_Device_Init();
 8000d20:	f00c fd52 	bl	800d7c8 <MX_USB_Device_Init>
  MX_I2C3_Init();
 8000d24:	f000 fb18 	bl	8001358 <MX_I2C3_Init>
  MX_DAC1_Init();
 8000d28:	f000 fadc 	bl	80012e4 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  ResetStates();
 8000d2c:	f001 f91e 	bl	8001f6c <ResetStates>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(conv_state == CFG_RECEIVED){
 8000d30:	4b47      	ldr	r3, [pc, #284]	; (8000e50 <main+0x158>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	2b01      	cmp	r3, #1
 8000d38:	d101      	bne.n	8000d3e <main+0x46>
		  InterpretConfig();
 8000d3a:	f000 fc87 	bl	800164c <InterpretConfig>
	  }
	  if(conv_state == CFG_INTERPRETED){
 8000d3e:	4b44      	ldr	r3, [pc, #272]	; (8000e50 <main+0x158>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d101      	bne.n	8000d4c <main+0x54>
		  SetupMeasurement();
 8000d48:	f000 fd6a 	bl	8001820 <SetupMeasurement>
	  }
	  if(conv_state == PARAMETERS_SET){
 8000d4c:	4b40      	ldr	r3, [pc, #256]	; (8000e50 <main+0x158>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	d101      	bne.n	8000d5a <main+0x62>
		  SendParameters();
 8000d56:	f000 ff3d 	bl	8001bd4 <SendParameters>
	  }
	  if(conv_state == ARMED){
 8000d5a:	4b3d      	ldr	r3, [pc, #244]	; (8000e50 <main+0x158>)
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	2b04      	cmp	r3, #4
 8000d62:	d106      	bne.n	8000d72 <main+0x7a>
		  while(!measurement_activated);
 8000d64:	bf00      	nop
 8000d66:	4b3b      	ldr	r3, [pc, #236]	; (8000e54 <main+0x15c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d0fb      	beq.n	8000d66 <main+0x6e>
		  StartMeasurement();
 8000d6e:	f000 ff9f 	bl	8001cb0 <StartMeasurement>
	  }
	  if(conv_state == MEASURING){
 8000d72:	4b37      	ldr	r3, [pc, #220]	; (8000e50 <main+0x158>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b05      	cmp	r3, #5
 8000d7a:	d150      	bne.n	8000e1e <main+0x126>
		 if(adc_state[0] == START_FULL &&
 8000d7c:	4b36      	ldr	r3, [pc, #216]	; (8000e58 <main+0x160>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d11d      	bne.n	8000dc0 <main+0xc8>
			adc_state[1] == START_FULL &&
 8000d84:	4b34      	ldr	r3, [pc, #208]	; (8000e58 <main+0x160>)
 8000d86:	785b      	ldrb	r3, [r3, #1]
		 if(adc_state[0] == START_FULL &&
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d119      	bne.n	8000dc0 <main+0xc8>
			adc_state[2] == START_FULL &&
 8000d8c:	4b32      	ldr	r3, [pc, #200]	; (8000e58 <main+0x160>)
 8000d8e:	789b      	ldrb	r3, [r3, #2]
			adc_state[1] == START_FULL &&
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d115      	bne.n	8000dc0 <main+0xc8>
			adc_state[3] == START_FULL) {
 8000d94:	4b30      	ldr	r3, [pc, #192]	; (8000e58 <main+0x160>)
 8000d96:	78db      	ldrb	r3, [r3, #3]
			adc_state[2] == START_FULL &&
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d111      	bne.n	8000dc0 <main+0xc8>
			 if(current_buffer_id == 's') {
 8000d9c:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <main+0x164>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	2b73      	cmp	r3, #115	; 0x73
 8000da2:	d104      	bne.n	8000dae <main+0xb6>
				 dropped_packet_count++;
 8000da4:	4b2e      	ldr	r3, [pc, #184]	; (8000e60 <main+0x168>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	3301      	adds	r3, #1
 8000daa:	4a2d      	ldr	r2, [pc, #180]	; (8000e60 <main+0x168>)
 8000dac:	6013      	str	r3, [r2, #0]
			 }
			 current_buffer_id = 's';
 8000dae:	4b2b      	ldr	r3, [pc, #172]	; (8000e5c <main+0x164>)
 8000db0:	2273      	movs	r2, #115	; 0x73
 8000db2:	701a      	strb	r2, [r3, #0]
			 SendData(current_buffer_id);
 8000db4:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <main+0x164>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 f829 	bl	8001e10 <SendData>
 8000dbe:	e020      	b.n	8000e02 <main+0x10a>
		 }
		 else if(adc_state[0] == END_FULL &&
 8000dc0:	4b25      	ldr	r3, [pc, #148]	; (8000e58 <main+0x160>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d11c      	bne.n	8000e02 <main+0x10a>
				 adc_state[1] == END_FULL &&
 8000dc8:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <main+0x160>)
 8000dca:	785b      	ldrb	r3, [r3, #1]
		 else if(adc_state[0] == END_FULL &&
 8000dcc:	2b02      	cmp	r3, #2
 8000dce:	d118      	bne.n	8000e02 <main+0x10a>
				 adc_state[2] == END_FULL &&
 8000dd0:	4b21      	ldr	r3, [pc, #132]	; (8000e58 <main+0x160>)
 8000dd2:	789b      	ldrb	r3, [r3, #2]
				 adc_state[1] == END_FULL &&
 8000dd4:	2b02      	cmp	r3, #2
 8000dd6:	d114      	bne.n	8000e02 <main+0x10a>
				 adc_state[3] == END_FULL) {
 8000dd8:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <main+0x160>)
 8000dda:	78db      	ldrb	r3, [r3, #3]
				 adc_state[2] == END_FULL &&
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d110      	bne.n	8000e02 <main+0x10a>
			 if(current_buffer_id == 'e') {
 8000de0:	4b1e      	ldr	r3, [pc, #120]	; (8000e5c <main+0x164>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b65      	cmp	r3, #101	; 0x65
 8000de6:	d104      	bne.n	8000df2 <main+0xfa>
				 dropped_packet_count++;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <main+0x168>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	3301      	adds	r3, #1
 8000dee:	4a1c      	ldr	r2, [pc, #112]	; (8000e60 <main+0x168>)
 8000df0:	6013      	str	r3, [r2, #0]
			 }
			 current_buffer_id = 'e';
 8000df2:	4b1a      	ldr	r3, [pc, #104]	; (8000e5c <main+0x164>)
 8000df4:	2265      	movs	r2, #101	; 0x65
 8000df6:	701a      	strb	r2, [r3, #0]
			 SendData(current_buffer_id);
 8000df8:	4b18      	ldr	r3, [pc, #96]	; (8000e5c <main+0x164>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f001 f807 	bl	8001e10 <SendData>
		 }

		 if(conv_count_reached && current_packet_count >= (target_packet_count - 1)) {
 8000e02:	4b18      	ldr	r3, [pc, #96]	; (8000e64 <main+0x16c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d009      	beq.n	8000e1e <main+0x126>
 8000e0a:	4b17      	ldr	r3, [pc, #92]	; (8000e68 <main+0x170>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	1e5a      	subs	r2, r3, #1
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <main+0x174>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dc02      	bgt.n	8000e1e <main+0x126>
			 conv_state = DONE;
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <main+0x158>)
 8000e1a:	2206      	movs	r2, #6
 8000e1c:	701a      	strb	r2, [r3, #0]
		 }
	  }
	  if(conv_state == DONE){
 8000e1e:	4b0c      	ldr	r3, [pc, #48]	; (8000e50 <main+0x158>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b06      	cmp	r3, #6
 8000e26:	d183      	bne.n	8000d30 <main+0x38>
		  if(current_packet_count < target_packet_count){
 8000e28:	4b10      	ldr	r3, [pc, #64]	; (8000e6c <main+0x174>)
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <main+0x170>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	429a      	cmp	r2, r3
 8000e32:	da0a      	bge.n	8000e4a <main+0x152>
			  if(current_buffer_id == 's'){
 8000e34:	4b09      	ldr	r3, [pc, #36]	; (8000e5c <main+0x164>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b73      	cmp	r3, #115	; 0x73
 8000e3a:	d103      	bne.n	8000e44 <main+0x14c>
				  SendData('e');
 8000e3c:	2065      	movs	r0, #101	; 0x65
 8000e3e:	f000 ffe7 	bl	8001e10 <SendData>
 8000e42:	e002      	b.n	8000e4a <main+0x152>
			  }
			  else {
				  SendData('s');
 8000e44:	2073      	movs	r0, #115	; 0x73
 8000e46:	f000 ffe3 	bl	8001e10 <SendData>
			  }
		  }

		  ResetStates();
 8000e4a:	f001 f88f 	bl	8001f6c <ResetStates>
	  if(conv_state == CFG_RECEIVED){
 8000e4e:	e76f      	b.n	8000d30 <main+0x38>
 8000e50:	200027bc 	.word	0x200027bc
 8000e54:	200027d8 	.word	0x200027d8
 8000e58:	200027d0 	.word	0x200027d0
 8000e5c:	20000000 	.word	0x20000000
 8000e60:	20000778 	.word	0x20000778
 8000e64:	200027d4 	.word	0x200027d4
 8000e68:	20000774 	.word	0x20000774
 8000e6c:	20000770 	.word	0x20000770

08000e70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b094      	sub	sp, #80	; 0x50
 8000e74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e76:	f107 0318 	add.w	r3, r7, #24
 8000e7a:	2238      	movs	r2, #56	; 0x38
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f00d ffeb 	bl	800ee5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000e92:	2000      	movs	r0, #0
 8000e94:	f006 ff12 	bl	8007cbc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000e98:	2321      	movs	r3, #33	; 0x21
 8000e9a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e9c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eaa:	2303      	movs	r3, #3
 8000eac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000eae:	2302      	movs	r3, #2
 8000eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 78;
 8000eb2:	234e      	movs	r3, #78	; 0x4e
 8000eb4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 8000eb6:	2306      	movs	r3, #6
 8000eb8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec2:	f107 0318 	add.w	r3, r7, #24
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f006 ffac 	bl	8007e24 <HAL_RCC_OscConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000ed2:	f001 f8a3 	bl	800201c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ed6:	230f      	movs	r3, #15
 8000ed8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eda:	2303      	movs	r3, #3
 8000edc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	2104      	movs	r1, #4
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f007 faaa 	bl	8008448 <HAL_RCC_ClockConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000efa:	f001 f88f 	bl	800201c <Error_Handler>
  }
}
 8000efe:	bf00      	nop
 8000f00:	3750      	adds	r7, #80	; 0x50
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
	...

08000f08 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08c      	sub	sp, #48	; 0x30
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2220      	movs	r2, #32
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f00d ff9a 	bl	800ee5a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f26:	4b38      	ldr	r3, [pc, #224]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f28:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f2c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000f2e:	4b36      	ldr	r3, [pc, #216]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f34:	4b34      	ldr	r3, [pc, #208]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f3a:	4b33      	ldr	r3, [pc, #204]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f40:	4b31      	ldr	r3, [pc, #196]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f46:	4b30      	ldr	r3, [pc, #192]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f4c:	4b2e      	ldr	r3, [pc, #184]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f4e:	2204      	movs	r2, #4
 8000f50:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f52:	4b2d      	ldr	r3, [pc, #180]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f58:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f5e:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f60:	2201      	movs	r2, #1
 8000f62:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f64:	4b28      	ldr	r3, [pc, #160]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8000f6c:	4b26      	ldr	r3, [pc, #152]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f6e:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 8000f72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f76:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f7a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f84:	4b20      	ldr	r3, [pc, #128]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = ENABLE;
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 8000f92:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f94:	2210      	movs	r2, #16
 8000f96:	645a      	str	r2, [r3, #68]	; 0x44
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8000f98:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <MX_ADC1_Init+0x100>)
 8000f9a:	2220      	movs	r2, #32
 8000f9c:	649a      	str	r2, [r3, #72]	; 0x48
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8000f9e:	4b1a      	ldr	r3, [pc, #104]	; (8001008 <MX_ADC1_Init+0x100>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc1.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 8000fa4:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_ADC1_Init+0x100>)
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000faa:	4817      	ldr	r0, [pc, #92]	; (8001008 <MX_ADC1_Init+0x100>)
 8000fac:	f001 ffe4 	bl	8002f78 <HAL_ADC_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000fb6:	f001 f831 	bl	800201c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4810      	ldr	r0, [pc, #64]	; (8001008 <MX_ADC1_Init+0x100>)
 8000fc6:	f003 fa0d 	bl	80043e4 <HAL_ADCEx_MultiModeConfigChannel>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8000fd0:	f001 f824 	bl	800201c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fd4:	4b0d      	ldr	r3, [pc, #52]	; (800100c <MX_ADC1_Init+0x104>)
 8000fd6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fd8:	2306      	movs	r3, #6
 8000fda:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fe0:	237f      	movs	r3, #127	; 0x7f
 8000fe2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <MX_ADC1_Init+0x100>)
 8000ff2:	f002 fabd 	bl	8003570 <HAL_ADC_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 8000ffc:	f001 f80e 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	3730      	adds	r7, #48	; 0x30
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	2000038c 	.word	0x2000038c
 800100c:	04300002 	.word	0x04300002

08001010 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b088      	sub	sp, #32
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001016:	463b      	mov	r3, r7
 8001018:	2220      	movs	r2, #32
 800101a:	2100      	movs	r1, #0
 800101c:	4618      	mov	r0, r3
 800101e:	f00d ff1c 	bl	800ee5a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001022:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001024:	4a31      	ldr	r2, [pc, #196]	; (80010ec <MX_ADC2_Init+0xdc>)
 8001026:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001028:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <MX_ADC2_Init+0xd8>)
 800102a:	2200      	movs	r2, #0
 800102c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800102e:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001034:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 800103a:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <MX_ADC2_Init+0xd8>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001042:	2200      	movs	r2, #0
 8001044:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001046:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001048:	2204      	movs	r2, #4
 800104a:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800104c:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <MX_ADC2_Init+0xd8>)
 800104e:	2200      	movs	r2, #0
 8001050:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001052:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001054:	2200      	movs	r2, #0
 8001056:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8001058:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <MX_ADC2_Init+0xd8>)
 800105a:	2201      	movs	r2, #1
 800105c:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001066:	4b20      	ldr	r3, [pc, #128]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001068:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 800106c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800106e:	4b1e      	ldr	r3, [pc, #120]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001070:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001074:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001076:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001080:	2200      	movs	r2, #0
 8001082:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = ENABLE;
 8001084:	4b18      	ldr	r3, [pc, #96]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001086:	2201      	movs	r2, #1
 8001088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc2.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 800108c:	4b16      	ldr	r3, [pc, #88]	; (80010e8 <MX_ADC2_Init+0xd8>)
 800108e:	2210      	movs	r2, #16
 8001090:	645a      	str	r2, [r3, #68]	; 0x44
  hadc2.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8001092:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <MX_ADC2_Init+0xd8>)
 8001094:	2220      	movs	r2, #32
 8001096:	649a      	str	r2, [r3, #72]	; 0x48
  hadc2.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001098:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <MX_ADC2_Init+0xd8>)
 800109a:	2200      	movs	r2, #0
 800109c:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc2.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <MX_ADC2_Init+0xd8>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80010a4:	4810      	ldr	r0, [pc, #64]	; (80010e8 <MX_ADC2_Init+0xd8>)
 80010a6:	f001 ff67 	bl	8002f78 <HAL_ADC_Init>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC2_Init+0xa4>
  {
    Error_Handler();
 80010b0:	f000 ffb4 	bl	800201c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010b4:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <MX_ADC2_Init+0xe0>)
 80010b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b8:	2306      	movs	r3, #6
 80010ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010c0:	237f      	movs	r3, #127	; 0x7f
 80010c2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010c4:	2304      	movs	r3, #4
 80010c6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010cc:	463b      	mov	r3, r7
 80010ce:	4619      	mov	r1, r3
 80010d0:	4805      	ldr	r0, [pc, #20]	; (80010e8 <MX_ADC2_Init+0xd8>)
 80010d2:	f002 fa4d 	bl	8003570 <HAL_ADC_ConfigChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC2_Init+0xd0>
  {
    Error_Handler();
 80010dc:	f000 ff9e 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010e0:	bf00      	nop
 80010e2:	3720      	adds	r7, #32
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	200003f8 	.word	0x200003f8
 80010ec:	50000100 	.word	0x50000100
 80010f0:	0c900008 	.word	0x0c900008

080010f4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08c      	sub	sp, #48	; 0x30
 80010f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2220      	movs	r2, #32
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f00d fea4 	bl	800ee5a <memset>

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001112:	4b38      	ldr	r3, [pc, #224]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001114:	4a38      	ldr	r2, [pc, #224]	; (80011f8 <MX_ADC3_Init+0x104>)
 8001116:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001118:	4b36      	ldr	r3, [pc, #216]	; (80011f4 <MX_ADC3_Init+0x100>)
 800111a:	2200      	movs	r2, #0
 800111c:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800111e:	4b35      	ldr	r3, [pc, #212]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001124:	4b33      	ldr	r3, [pc, #204]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  hadc3.Init.GainCompensation = 0;
 800112a:	4b32      	ldr	r3, [pc, #200]	; (80011f4 <MX_ADC3_Init+0x100>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001130:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001132:	2200      	movs	r2, #0
 8001134:	615a      	str	r2, [r3, #20]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001136:	4b2f      	ldr	r3, [pc, #188]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001138:	2204      	movs	r2, #4
 800113a:	619a      	str	r2, [r3, #24]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 800113c:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <MX_ADC3_Init+0x100>)
 800113e:	2200      	movs	r2, #0
 8001140:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001142:	4b2c      	ldr	r3, [pc, #176]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001144:	2200      	movs	r2, #0
 8001146:	775a      	strb	r2, [r3, #29]
  hadc3.Init.NbrOfConversion = 1;
 8001148:	4b2a      	ldr	r3, [pc, #168]	; (80011f4 <MX_ADC3_Init+0x100>)
 800114a:	2201      	movs	r2, #1
 800114c:	621a      	str	r2, [r3, #32]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800114e:	4b29      	ldr	r3, [pc, #164]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001150:	2200      	movs	r2, #0
 8001152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001156:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001158:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 800115c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800115e:	4b25      	ldr	r3, [pc, #148]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001164:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.DMAContinuousRequests = ENABLE;
 8001166:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001168:	2201      	movs	r2, #1
 800116a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800116e:	4b21      	ldr	r3, [pc, #132]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001170:	2200      	movs	r2, #0
 8001172:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc3.Init.OversamplingMode = ENABLE;
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001176:	2201      	movs	r2, #1
 8001178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc3.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 800117c:	4b1d      	ldr	r3, [pc, #116]	; (80011f4 <MX_ADC3_Init+0x100>)
 800117e:	2210      	movs	r2, #16
 8001180:	645a      	str	r2, [r3, #68]	; 0x44
  hadc3.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8001182:	4b1c      	ldr	r3, [pc, #112]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001184:	2220      	movs	r2, #32
 8001186:	649a      	str	r2, [r3, #72]	; 0x48
  hadc3.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001188:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_ADC3_Init+0x100>)
 800118a:	2200      	movs	r2, #0
 800118c:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc3.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800118e:	4b19      	ldr	r3, [pc, #100]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001190:	2201      	movs	r2, #1
 8001192:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001194:	4817      	ldr	r0, [pc, #92]	; (80011f4 <MX_ADC3_Init+0x100>)
 8001196:	f001 feef 	bl	8002f78 <HAL_ADC_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 80011a0:	f000 ff3c 	bl	800201c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011a4:	2300      	movs	r3, #0
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc3, &multimode) != HAL_OK)
 80011a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	4811      	ldr	r0, [pc, #68]	; (80011f4 <MX_ADC3_Init+0x100>)
 80011b0:	f003 f918 	bl	80043e4 <HAL_ADCEx_MultiModeConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_ADC3_Init+0xca>
  {
    Error_Handler();
 80011ba:	f000 ff2f 	bl	800201c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_ADC3_Init+0x108>)
 80011c0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011c2:	2306      	movs	r3, #6
 80011c4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ca:	237f      	movs	r3, #127	; 0x7f
 80011cc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011ce:	2304      	movs	r3, #4
 80011d0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	4619      	mov	r1, r3
 80011da:	4806      	ldr	r0, [pc, #24]	; (80011f4 <MX_ADC3_Init+0x100>)
 80011dc:	f002 f9c8 	bl	8003570 <HAL_ADC_ConfigChannel>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <MX_ADC3_Init+0xf6>
  {
    Error_Handler();
 80011e6:	f000 ff19 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80011ea:	bf00      	nop
 80011ec:	3730      	adds	r7, #48	; 0x30
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000464 	.word	0x20000464
 80011f8:	50000400 	.word	0x50000400
 80011fc:	04300002 	.word	0x04300002

08001200 <MX_ADC4_Init>:
  * @brief ADC4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC4_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b088      	sub	sp, #32
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC4_Init 0 */

  /* USER CODE END ADC4_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001206:	463b      	mov	r3, r7
 8001208:	2220      	movs	r2, #32
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f00d fe24 	bl	800ee5a <memset>

  /* USER CODE END ADC4_Init 1 */

  /** Common config
  */
  hadc4.Instance = ADC4;
 8001212:	4b31      	ldr	r3, [pc, #196]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001214:	4a31      	ldr	r2, [pc, #196]	; (80012dc <MX_ADC4_Init+0xdc>)
 8001216:	601a      	str	r2, [r3, #0]
  hadc4.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001218:	4b2f      	ldr	r3, [pc, #188]	; (80012d8 <MX_ADC4_Init+0xd8>)
 800121a:	2200      	movs	r2, #0
 800121c:	605a      	str	r2, [r3, #4]
  hadc4.Init.Resolution = ADC_RESOLUTION_12B;
 800121e:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
  hadc4.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001224:	4b2c      	ldr	r3, [pc, #176]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
  hadc4.Init.GainCompensation = 0;
 800122a:	4b2b      	ldr	r3, [pc, #172]	; (80012d8 <MX_ADC4_Init+0xd8>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  hadc4.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001230:	4b29      	ldr	r3, [pc, #164]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001232:	2200      	movs	r2, #0
 8001234:	615a      	str	r2, [r3, #20]
  hadc4.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001236:	4b28      	ldr	r3, [pc, #160]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001238:	2204      	movs	r2, #4
 800123a:	619a      	str	r2, [r3, #24]
  hadc4.Init.LowPowerAutoWait = DISABLE;
 800123c:	4b26      	ldr	r3, [pc, #152]	; (80012d8 <MX_ADC4_Init+0xd8>)
 800123e:	2200      	movs	r2, #0
 8001240:	771a      	strb	r2, [r3, #28]
  hadc4.Init.ContinuousConvMode = DISABLE;
 8001242:	4b25      	ldr	r3, [pc, #148]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001244:	2200      	movs	r2, #0
 8001246:	775a      	strb	r2, [r3, #29]
  hadc4.Init.NbrOfConversion = 1;
 8001248:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <MX_ADC4_Init+0xd8>)
 800124a:	2201      	movs	r2, #1
 800124c:	621a      	str	r2, [r3, #32]
  hadc4.Init.DiscontinuousConvMode = DISABLE;
 800124e:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001250:	2200      	movs	r2, #0
 8001252:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc4.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T2_TRGO;
 8001256:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001258:	f44f 62ac 	mov.w	r2, #1376	; 0x560
 800125c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc4.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800125e:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001260:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001264:	631a      	str	r2, [r3, #48]	; 0x30
  hadc4.Init.DMAContinuousRequests = ENABLE;
 8001266:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001268:	2201      	movs	r2, #1
 800126a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc4.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001270:	2200      	movs	r2, #0
 8001272:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc4.Init.OversamplingMode = ENABLE;
 8001274:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001276:	2201      	movs	r2, #1
 8001278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  hadc4.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 800127c:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <MX_ADC4_Init+0xd8>)
 800127e:	2210      	movs	r2, #16
 8001280:	645a      	str	r2, [r3, #68]	; 0x44
  hadc4.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_1;
 8001282:	4b15      	ldr	r3, [pc, #84]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001284:	2220      	movs	r2, #32
 8001286:	649a      	str	r2, [r3, #72]	; 0x48
  hadc4.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 8001288:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <MX_ADC4_Init+0xd8>)
 800128a:	2200      	movs	r2, #0
 800128c:	64da      	str	r2, [r3, #76]	; 0x4c
  hadc4.Init.Oversampling.OversamplingStopReset = ADC_REGOVERSAMPLING_CONTINUED_MODE;
 800128e:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001290:	2201      	movs	r2, #1
 8001292:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_ADC_Init(&hadc4) != HAL_OK)
 8001294:	4810      	ldr	r0, [pc, #64]	; (80012d8 <MX_ADC4_Init+0xd8>)
 8001296:	f001 fe6f 	bl	8002f78 <HAL_ADC_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ADC4_Init+0xa4>
  {
    Error_Handler();
 80012a0:	f000 febc 	bl	800201c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80012a4:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <MX_ADC4_Init+0xe0>)
 80012a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012a8:	2306      	movs	r3, #6
 80012aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80012ac:	2300      	movs	r3, #0
 80012ae:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80012b0:	237f      	movs	r3, #127	; 0x7f
 80012b2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80012b4:	2304      	movs	r3, #4
 80012b6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc4, &sConfig) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	4619      	mov	r1, r3
 80012c0:	4805      	ldr	r0, [pc, #20]	; (80012d8 <MX_ADC4_Init+0xd8>)
 80012c2:	f002 f955 	bl	8003570 <HAL_ADC_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_ADC4_Init+0xd0>
  {
    Error_Handler();
 80012cc:	f000 fea6 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN ADC4_Init 2 */

  /* USER CODE END ADC4_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	3720      	adds	r7, #32
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	200004d0 	.word	0x200004d0
 80012dc:	50000500 	.word	0x50000500
 80012e0:	14f00020 	.word	0x14f00020

080012e4 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	; 0x30
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80012ea:	463b      	mov	r3, r7
 80012ec:	2230      	movs	r2, #48	; 0x30
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f00d fdb2 	bl	800ee5a <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <MX_DAC1_Init+0x6c>)
 80012f8:	4a16      	ldr	r2, [pc, #88]	; (8001354 <MX_DAC1_Init+0x70>)
 80012fa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80012fc:	4814      	ldr	r0, [pc, #80]	; (8001350 <MX_DAC1_Init+0x6c>)
 80012fe:	f003 fa88 	bl	8004812 <HAL_DAC_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001308:	f000 fe88 	bl	800201c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001310:	2300      	movs	r3, #0
 8001312:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8001314:	2300      	movs	r3, #0
 8001316:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800131c:	2300      	movs	r3, #0
 800131e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001320:	2300      	movs	r3, #0
 8001322:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001324:	2302      	movs	r3, #2
 8001326:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8001328:	2301      	movs	r3, #1
 800132a:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800132c:	2300      	movs	r3, #0
 800132e:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001330:	463b      	mov	r3, r7
 8001332:	2200      	movs	r2, #0
 8001334:	4619      	mov	r1, r3
 8001336:	4806      	ldr	r0, [pc, #24]	; (8001350 <MX_DAC1_Init+0x6c>)
 8001338:	f003 fb28 	bl	800498c <HAL_DAC_ConfigChannel>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8001342:	f000 fe6b 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	3730      	adds	r7, #48	; 0x30
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200006bc 	.word	0x200006bc
 8001354:	50000800 	.word	0x50000800

08001358 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800135c:	4b1b      	ldr	r3, [pc, #108]	; (80013cc <MX_I2C3_Init+0x74>)
 800135e:	4a1c      	ldr	r2, [pc, #112]	; (80013d0 <MX_I2C3_Init+0x78>)
 8001360:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x40707EB4;
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <MX_I2C3_Init+0x74>)
 8001364:	4a1b      	ldr	r2, [pc, #108]	; (80013d4 <MX_I2C3_Init+0x7c>)
 8001366:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 144;
 8001368:	4b18      	ldr	r3, [pc, #96]	; (80013cc <MX_I2C3_Init+0x74>)
 800136a:	2290      	movs	r2, #144	; 0x90
 800136c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <MX_I2C3_Init+0x74>)
 8001370:	2201      	movs	r2, #1
 8001372:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <MX_I2C3_Init+0x74>)
 8001376:	2200      	movs	r2, #0
 8001378:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <MX_I2C3_Init+0x74>)
 800137c:	2200      	movs	r2, #0
 800137e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001380:	4b12      	ldr	r3, [pc, #72]	; (80013cc <MX_I2C3_Init+0x74>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_I2C3_Init+0x74>)
 8001388:	2200      	movs	r2, #0
 800138a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <MX_I2C3_Init+0x74>)
 800138e:	2200      	movs	r2, #0
 8001390:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001392:	480e      	ldr	r0, [pc, #56]	; (80013cc <MX_I2C3_Init+0x74>)
 8001394:	f004 f93b 	bl	800560e <HAL_I2C_Init>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800139e:	f000 fe3d 	bl	800201c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80013a2:	2100      	movs	r1, #0
 80013a4:	4809      	ldr	r0, [pc, #36]	; (80013cc <MX_I2C3_Init+0x74>)
 80013a6:	f004 febd 	bl	8006124 <HAL_I2CEx_ConfigAnalogFilter>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80013b0:	f000 fe34 	bl	800201c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80013b4:	2100      	movs	r1, #0
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_I2C3_Init+0x74>)
 80013b8:	f004 feff 	bl	80061ba <HAL_I2CEx_ConfigDigitalFilter>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80013c2:	f000 fe2b 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200006d0 	.word	0x200006d0
 80013d0:	40007800 	.word	0x40007800
 80013d4:	40707eb4 	.word	0x40707eb4

080013d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b088      	sub	sp, #32
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013de:	f107 0310 	add.w	r3, r7, #16
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013f6:	4b1d      	ldr	r3, [pc, #116]	; (800146c <MX_TIM2_Init+0x94>)
 80013f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 156 - 1;
 80013fe:	4b1b      	ldr	r3, [pc, #108]	; (800146c <MX_TIM2_Init+0x94>)
 8001400:	229b      	movs	r2, #155	; 0x9b
 8001402:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <MX_TIM2_Init+0x94>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800140a:	4b18      	ldr	r3, [pc, #96]	; (800146c <MX_TIM2_Init+0x94>)
 800140c:	2209      	movs	r2, #9
 800140e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001410:	4b16      	ldr	r3, [pc, #88]	; (800146c <MX_TIM2_Init+0x94>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001416:	4b15      	ldr	r3, [pc, #84]	; (800146c <MX_TIM2_Init+0x94>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800141c:	4813      	ldr	r0, [pc, #76]	; (800146c <MX_TIM2_Init+0x94>)
 800141e:	f007 fc51 	bl	8008cc4 <HAL_TIM_Base_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001428:	f000 fdf8 	bl	800201c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001430:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	4619      	mov	r1, r3
 8001438:	480c      	ldr	r0, [pc, #48]	; (800146c <MX_TIM2_Init+0x94>)
 800143a:	f007 fe91 	bl	8009160 <HAL_TIM_ConfigClockSource>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001444:	f000 fdea 	bl	800201c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001448:	2320      	movs	r3, #32
 800144a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	; (800146c <MX_TIM2_Init+0x94>)
 8001456:	f008 f91b 	bl	8009690 <HAL_TIMEx_MasterConfigSynchronization>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001460:	f000 fddc 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001464:	bf00      	nop
 8001466:	3720      	adds	r7, #32
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000724 	.word	0x20000724

08001470 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001476:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <MX_DMA_Init+0x80>)
 8001478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800147a:	4a1d      	ldr	r2, [pc, #116]	; (80014f0 <MX_DMA_Init+0x80>)
 800147c:	f043 0304 	orr.w	r3, r3, #4
 8001480:	6493      	str	r3, [r2, #72]	; 0x48
 8001482:	4b1b      	ldr	r3, [pc, #108]	; (80014f0 <MX_DMA_Init+0x80>)
 8001484:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001486:	f003 0304 	and.w	r3, r3, #4
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800148e:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <MX_DMA_Init+0x80>)
 8001490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001492:	4a17      	ldr	r2, [pc, #92]	; (80014f0 <MX_DMA_Init+0x80>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6493      	str	r3, [r2, #72]	; 0x48
 800149a:	4b15      	ldr	r3, [pc, #84]	; (80014f0 <MX_DMA_Init+0x80>)
 800149c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	200b      	movs	r0, #11
 80014ac:	f003 f97d 	bl	80047aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014b0:	200b      	movs	r0, #11
 80014b2:	f003 f994 	bl	80047de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	200c      	movs	r0, #12
 80014bc:	f003 f975 	bl	80047aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014c0:	200c      	movs	r0, #12
 80014c2:	f003 f98c 	bl	80047de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	200d      	movs	r0, #13
 80014cc:	f003 f96d 	bl	80047aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80014d0:	200d      	movs	r0, #13
 80014d2:	f003 f984 	bl	80047de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80014d6:	2200      	movs	r2, #0
 80014d8:	2100      	movs	r1, #0
 80014da:	200e      	movs	r0, #14
 80014dc:	f003 f965 	bl	80047aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80014e0:	200e      	movs	r0, #14
 80014e2:	f003 f97c 	bl	80047de <HAL_NVIC_EnableIRQ>

}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000

080014f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	; 0x28
 80014f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800150a:	4b4d      	ldr	r3, [pc, #308]	; (8001640 <MX_GPIO_Init+0x14c>)
 800150c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150e:	4a4c      	ldr	r2, [pc, #304]	; (8001640 <MX_GPIO_Init+0x14c>)
 8001510:	f043 0320 	orr.w	r3, r3, #32
 8001514:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001516:	4b4a      	ldr	r3, [pc, #296]	; (8001640 <MX_GPIO_Init+0x14c>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151a:	f003 0320 	and.w	r3, r3, #32
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	4b47      	ldr	r3, [pc, #284]	; (8001640 <MX_GPIO_Init+0x14c>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001526:	4a46      	ldr	r2, [pc, #280]	; (8001640 <MX_GPIO_Init+0x14c>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800152e:	4b44      	ldr	r3, [pc, #272]	; (8001640 <MX_GPIO_Init+0x14c>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153a:	4b41      	ldr	r3, [pc, #260]	; (8001640 <MX_GPIO_Init+0x14c>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153e:	4a40      	ldr	r2, [pc, #256]	; (8001640 <MX_GPIO_Init+0x14c>)
 8001540:	f043 0302 	orr.w	r3, r3, #2
 8001544:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001546:	4b3e      	ldr	r3, [pc, #248]	; (8001640 <MX_GPIO_Init+0x14c>)
 8001548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154a:	f003 0302 	and.w	r3, r3, #2
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001552:	4b3b      	ldr	r3, [pc, #236]	; (8001640 <MX_GPIO_Init+0x14c>)
 8001554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001556:	4a3a      	ldr	r2, [pc, #232]	; (8001640 <MX_GPIO_Init+0x14c>)
 8001558:	f043 0304 	orr.w	r3, r3, #4
 800155c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800155e:	4b38      	ldr	r3, [pc, #224]	; (8001640 <MX_GPIO_Init+0x14c>)
 8001560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001562:	f003 0304 	and.w	r3, r3, #4
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ERRATA_FIX1_Pin|ERRATA_FIX2_Pin|ERRATA_FIX3_Pin|ERRATA_FIX4_Pin, GPIO_PIN_RESET);
 800156a:	2200      	movs	r2, #0
 800156c:	f44f 41d8 	mov.w	r1, #27648	; 0x6c00
 8001570:	4834      	ldr	r0, [pc, #208]	; (8001644 <MX_GPIO_Init+0x150>)
 8001572:	f004 f811 	bl	8005598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IND_LED_R_Pin|IND_LED_G_Pin|IND_LED_B_Pin, GPIO_PIN_SET);
 8001576:	2201      	movs	r2, #1
 8001578:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800157c:	4832      	ldr	r0, [pc, #200]	; (8001648 <MX_GPIO_Init+0x154>)
 800157e:	f004 f80b 	bl	8005598 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ERRATA_FIX1_Pin ERRATA_FIX2_Pin ERRATA_FIX3_Pin ERRATA_FIX4_Pin */
  GPIO_InitStruct.Pin = ERRATA_FIX1_Pin|ERRATA_FIX2_Pin|ERRATA_FIX3_Pin|ERRATA_FIX4_Pin;
 8001582:	f44f 43d8 	mov.w	r3, #27648	; 0x6c00
 8001586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001588:	2301      	movs	r3, #1
 800158a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001594:	f107 0314 	add.w	r3, r7, #20
 8001598:	4619      	mov	r1, r3
 800159a:	482a      	ldr	r0, [pc, #168]	; (8001644 <MX_GPIO_Init+0x150>)
 800159c:	f003 fe7a 	bl	8005294 <HAL_GPIO_Init>

  /*Configure GPIO pin : TEMP_ALERT_Pin */
  GPIO_InitStruct.Pin = TEMP_ALERT_Pin;
 80015a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a6:	2300      	movs	r3, #0
 80015a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TEMP_ALERT_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 0314 	add.w	r3, r7, #20
 80015b2:	4619      	mov	r1, r3
 80015b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015b8:	f003 fe6c 	bl	8005294 <HAL_GPIO_Init>

  /*Configure GPIO pins : IND_LED_R_Pin IND_LED_G_Pin IND_LED_B_Pin */
  GPIO_InitStruct.Pin = IND_LED_R_Pin|IND_LED_G_Pin|IND_LED_B_Pin;
 80015bc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80015c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c2:	2301      	movs	r3, #1
 80015c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	481c      	ldr	r0, [pc, #112]	; (8001648 <MX_GPIO_Init+0x154>)
 80015d6:	f003 fe5d 	bl	8005294 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_SHORT_Pin */
  GPIO_InitStruct.Pin = TRIG_SHORT_Pin;
 80015da:	2320      	movs	r3, #32
 80015dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015de:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_SHORT_GPIO_Port, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	4815      	ldr	r0, [pc, #84]	; (8001644 <MX_GPIO_Init+0x150>)
 80015f0:	f003 fe50 	bl	8005294 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_EXT_2_Pin */
  GPIO_InitStruct.Pin = TRIG_EXT_2_Pin;
 80015f4:	2340      	movs	r3, #64	; 0x40
 80015f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015f8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80015fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015fe:	2301      	movs	r3, #1
 8001600:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_EXT_2_GPIO_Port, &GPIO_InitStruct);
 8001602:	f107 0314 	add.w	r3, r7, #20
 8001606:	4619      	mov	r1, r3
 8001608:	480e      	ldr	r0, [pc, #56]	; (8001644 <MX_GPIO_Init+0x150>)
 800160a:	f003 fe43 	bl	8005294 <HAL_GPIO_Init>

  /*Configure GPIO pin : TRIG_EXT_1_Pin */
  GPIO_InitStruct.Pin = TRIG_EXT_1_Pin;
 800160e:	2380      	movs	r3, #128	; 0x80
 8001610:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001612:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001616:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001618:	2302      	movs	r3, #2
 800161a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(TRIG_EXT_1_GPIO_Port, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	4808      	ldr	r0, [pc, #32]	; (8001644 <MX_GPIO_Init+0x150>)
 8001624:	f003 fe36 	bl	8005294 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001628:	2200      	movs	r2, #0
 800162a:	2100      	movs	r1, #0
 800162c:	2017      	movs	r0, #23
 800162e:	f003 f8bc 	bl	80047aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001632:	2017      	movs	r0, #23
 8001634:	f003 f8d3 	bl	80047de <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	; 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40021000 	.word	0x40021000
 8001644:	48000400 	.word	0x48000400
 8001648:	48000800 	.word	0x48000800

0800164c <InterpretConfig>:

/* USER CODE BEGIN 4 */

int InterpretConfig(void) {
 800164c:	b580      	push	{r7, lr}
 800164e:	b0a6      	sub	sp, #152	; 0x98
 8001650:	af00      	add	r7, sp, #0
	char variable_name[CFG_VAR_SIZE];
	char variable_value[CFG_VAR_SIZE];
	memset(variable_name, 0, sizeof(variable_name));
 8001652:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001656:	2240      	movs	r2, #64	; 0x40
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f00d fbfd 	bl	800ee5a <memset>
	memset(variable_value, 0, sizeof(variable_value));
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	2240      	movs	r2, #64	; 0x40
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f00d fbf6 	bl	800ee5a <memset>
	int variable_name_indexes[2] = {0, 0};
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
	int variable_value_indexes[2] = {0, 0};
 8001676:	2300      	movs	r3, #0
 8001678:	603b      	str	r3, [r7, #0]
 800167a:	2300      	movs	r3, #0
 800167c:	607b      	str	r3, [r7, #4]
	char reading_status = 'n';
 800167e:	236e      	movs	r3, #110	; 0x6e
 8001680:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	for(int i = 0; i < USB_RX_BUFFER_SIZE; i++){
 8001684:	2300      	movs	r3, #0
 8001686:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800168a:	e077      	b.n	800177c <InterpretConfig+0x130>
		if(rx_buffer[i] == '\0'){
 800168c:	4a42      	ldr	r2, [pc, #264]	; (8001798 <InterpretConfig+0x14c>)
 800168e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001692:	4413      	add	r3, r2
 8001694:	f993 3000 	ldrsb.w	r3, [r3]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d074      	beq.n	8001786 <InterpretConfig+0x13a>
			break;
		}
		// Reading the variable name
		if(reading_status == 'n'){
 800169c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80016a0:	2b6e      	cmp	r3, #110	; 0x6e
 80016a2:	d112      	bne.n	80016ca <InterpretConfig+0x7e>
			if(rx_buffer[i] == ':') {
 80016a4:	4a3c      	ldr	r2, [pc, #240]	; (8001798 <InterpretConfig+0x14c>)
 80016a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016aa:	4413      	add	r3, r2
 80016ac:	f993 3000 	ldrsb.w	r3, [r3]
 80016b0:	2b3a      	cmp	r3, #58	; 0x3a
 80016b2:	d15e      	bne.n	8001772 <InterpretConfig+0x126>
				variable_name_indexes[1] = i;
 80016b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016b8:	60fb      	str	r3, [r7, #12]
				variable_value_indexes[0] = i+1;
 80016ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016be:	3301      	adds	r3, #1
 80016c0:	603b      	str	r3, [r7, #0]
				reading_status = 'v';
 80016c2:	2376      	movs	r3, #118	; 0x76
 80016c4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80016c8:	e053      	b.n	8001772 <InterpretConfig+0x126>
			}
		}
		// Reading the variable value
		else if(reading_status == 'v'){
 80016ca:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80016ce:	2b76      	cmp	r3, #118	; 0x76
 80016d0:	d14f      	bne.n	8001772 <InterpretConfig+0x126>
			if(rx_buffer[i] == ';') {
 80016d2:	4a31      	ldr	r2, [pc, #196]	; (8001798 <InterpretConfig+0x14c>)
 80016d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016d8:	4413      	add	r3, r2
 80016da:	f993 3000 	ldrsb.w	r3, [r3]
 80016de:	2b3b      	cmp	r3, #59	; 0x3b
 80016e0:	d147      	bne.n	8001772 <InterpretConfig+0x126>
				variable_value_indexes[1] = i;
 80016e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016e6:	607b      	str	r3, [r7, #4]

				strncpy(variable_name, ((char*)rx_buffer + variable_name_indexes[0]), (variable_name_indexes[1] - variable_name_indexes[0]));
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	461a      	mov	r2, r3
 80016ec:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <InterpretConfig+0x14c>)
 80016ee:	18d1      	adds	r1, r2, r3
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	461a      	mov	r2, r3
 80016f8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80016fc:	4618      	mov	r0, r3
 80016fe:	f00d fbb4 	bl	800ee6a <strncpy>
				variable_name[variable_name_indexes[1] + 1] = '\0';
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	3301      	adds	r3, #1
 8001706:	3398      	adds	r3, #152	; 0x98
 8001708:	443b      	add	r3, r7
 800170a:	2200      	movs	r2, #0
 800170c:	f803 2c48 	strb.w	r2, [r3, #-72]
				strncpy(variable_value, ((char*)rx_buffer + variable_value_indexes[0]), (variable_value_indexes[1] - variable_value_indexes[0]));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	461a      	mov	r2, r3
 8001714:	4b20      	ldr	r3, [pc, #128]	; (8001798 <InterpretConfig+0x14c>)
 8001716:	18d1      	adds	r1, r2, r3
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	461a      	mov	r2, r3
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	4618      	mov	r0, r3
 8001726:	f00d fba0 	bl	800ee6a <strncpy>
				variable_value[variable_value_indexes[1] + 1] = '\0';
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3301      	adds	r3, #1
 800172e:	3398      	adds	r3, #152	; 0x98
 8001730:	443b      	add	r3, r7
 8001732:	2200      	movs	r2, #0
 8001734:	f803 2c88 	strb.w	r2, [r3, #-136]

				InterpretVariable(variable_name, variable_value);
 8001738:	f107 0210 	add.w	r2, r7, #16
 800173c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001740:	4611      	mov	r1, r2
 8001742:	4618      	mov	r0, r3
 8001744:	f000 f82c 	bl	80017a0 <InterpretVariable>
				memset(variable_name, 0, sizeof(variable_name));
 8001748:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800174c:	2240      	movs	r2, #64	; 0x40
 800174e:	2100      	movs	r1, #0
 8001750:	4618      	mov	r0, r3
 8001752:	f00d fb82 	bl	800ee5a <memset>
				memset(variable_value, 0, sizeof(variable_value));
 8001756:	f107 0310 	add.w	r3, r7, #16
 800175a:	2240      	movs	r2, #64	; 0x40
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f00d fb7b 	bl	800ee5a <memset>
				variable_name_indexes[0] = i + 1;
 8001764:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001768:	3301      	adds	r3, #1
 800176a:	60bb      	str	r3, [r7, #8]
				reading_status = 'n';
 800176c:	236e      	movs	r3, #110	; 0x6e
 800176e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
	for(int i = 0; i < USB_RX_BUFFER_SIZE; i++){
 8001772:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001776:	3301      	adds	r3, #1
 8001778:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800177c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001780:	2bff      	cmp	r3, #255	; 0xff
 8001782:	dd83      	ble.n	800168c <InterpretConfig+0x40>
 8001784:	e000      	b.n	8001788 <InterpretConfig+0x13c>
			break;
 8001786:	bf00      	nop
			}
		}
	}

	conv_state = CFG_INTERPRETED;
 8001788:	4b04      	ldr	r3, [pc, #16]	; (800179c <InterpretConfig+0x150>)
 800178a:	2202      	movs	r2, #2
 800178c:	701a      	strb	r2, [r3, #0]
	return 1;
 800178e:	2301      	movs	r3, #1
}
 8001790:	4618      	mov	r0, r3
 8001792:	3798      	adds	r7, #152	; 0x98
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	200026bc 	.word	0x200026bc
 800179c:	200027bc 	.word	0x200027bc

080017a0 <InterpretVariable>:

int InterpretVariable(char name[CFG_VAR_SIZE], char value[CFG_VAR_SIZE]) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
	if(strcmp(name, "RecLen") == 0) {
 80017aa:	4917      	ldr	r1, [pc, #92]	; (8001808 <InterpretVariable+0x68>)
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7fe fd37 	bl	8000220 <strcmp>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d107      	bne.n	80017c8 <InterpretVariable+0x28>
		record_length_ms = (uint16_t)atoi(value);
 80017b8:	6838      	ldr	r0, [r7, #0]
 80017ba:	f00c fd33 	bl	800e224 <atoi>
 80017be:	4603      	mov	r3, r0
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	4b12      	ldr	r3, [pc, #72]	; (800180c <InterpretVariable+0x6c>)
 80017c4:	801a      	strh	r2, [r3, #0]
 80017c6:	e019      	b.n	80017fc <InterpretVariable+0x5c>
	}
	else if(strcmp(name, "RecInt") == 0) {
 80017c8:	4911      	ldr	r1, [pc, #68]	; (8001810 <InterpretVariable+0x70>)
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7fe fd28 	bl	8000220 <strcmp>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d107      	bne.n	80017e6 <InterpretVariable+0x46>
		record_interval_us = (uint16_t)atoi(value);
 80017d6:	6838      	ldr	r0, [r7, #0]
 80017d8:	f00c fd24 	bl	800e224 <atoi>
 80017dc:	4603      	mov	r3, r0
 80017de:	b29a      	uxth	r2, r3
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <InterpretVariable+0x74>)
 80017e2:	801a      	strh	r2, [r3, #0]
 80017e4:	e00a      	b.n	80017fc <InterpretVariable+0x5c>
	}
	else if(strcmp(name, "TcType") == 0) {
 80017e6:	490c      	ldr	r1, [pc, #48]	; (8001818 <InterpretVariable+0x78>)
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7fe fd19 	bl	8000220 <strcmp>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d103      	bne.n	80017fc <InterpretVariable+0x5c>
		tc_type = value[0];
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	781a      	ldrb	r2, [r3, #0]
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <InterpretVariable+0x7c>)
 80017fa:	701a      	strb	r2, [r3, #0]
	}

	return 1;
 80017fc:	2301      	movs	r3, #1
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	08011f00 	.word	0x08011f00
 800180c:	20000008 	.word	0x20000008
 8001810:	08011f08 	.word	0x08011f08
 8001814:	2000000a 	.word	0x2000000a
 8001818:	08011f10 	.word	0x08011f10
 800181c:	2000000c 	.word	0x2000000c

08001820 <SetupMeasurement>:

int SetupMeasurement(void){
 8001820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001824:	b090      	sub	sp, #64	; 0x40
 8001826:	af04      	add	r7, sp, #16
	// > Set the correct analog reference voltage and get the relevant coefficients

	const double *used_coefficients;
	uint8_t coefficients_count;
	if(tc_type == 'E') {
 8001828:	4b63      	ldr	r3, [pc, #396]	; (80019b8 <SetupMeasurement+0x198>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	2b45      	cmp	r3, #69	; 0x45
 800182e:	d10b      	bne.n	8001848 <SetupMeasurement+0x28>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2); // 2.9V
 8001830:	2020      	movs	r0, #32
 8001832:	f001 f8e9 	bl	8002a08 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		analog_reference_voltage = 2.9;
 8001836:	4b61      	ldr	r3, [pc, #388]	; (80019bc <SetupMeasurement+0x19c>)
 8001838:	4a61      	ldr	r2, [pc, #388]	; (80019c0 <SetupMeasurement+0x1a0>)
 800183a:	601a      	str	r2, [r3, #0]
		used_coefficients = type_e_coefficients;
 800183c:	4b61      	ldr	r3, [pc, #388]	; (80019c4 <SetupMeasurement+0x1a4>)
 800183e:	62fb      	str	r3, [r7, #44]	; 0x2c
		coefficients_count = type_e_coefficients_count;
 8001840:	230e      	movs	r3, #14
 8001842:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001846:	e02e      	b.n	80018a6 <SetupMeasurement+0x86>
	}
	else if(tc_type == 'J') {
 8001848:	4b5b      	ldr	r3, [pc, #364]	; (80019b8 <SetupMeasurement+0x198>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b4a      	cmp	r3, #74	; 0x4a
 800184e:	d10b      	bne.n	8001868 <SetupMeasurement+0x48>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE1); // 2.5V
 8001850:	2010      	movs	r0, #16
 8001852:	f001 f8d9 	bl	8002a08 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		analog_reference_voltage = 2.5;
 8001856:	4b59      	ldr	r3, [pc, #356]	; (80019bc <SetupMeasurement+0x19c>)
 8001858:	4a5b      	ldr	r2, [pc, #364]	; (80019c8 <SetupMeasurement+0x1a8>)
 800185a:	601a      	str	r2, [r3, #0]
		used_coefficients = type_j_coefficients;
 800185c:	4b5b      	ldr	r3, [pc, #364]	; (80019cc <SetupMeasurement+0x1ac>)
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
		coefficients_count = type_j_coefficients_count;
 8001860:	2309      	movs	r3, #9
 8001862:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001866:	e01e      	b.n	80018a6 <SetupMeasurement+0x86>
	}
	else if(tc_type == 'K') {
 8001868:	4b53      	ldr	r3, [pc, #332]	; (80019b8 <SetupMeasurement+0x198>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b4b      	cmp	r3, #75	; 0x4b
 800186e:	d10b      	bne.n	8001888 <SetupMeasurement+0x68>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0); // 2.048V
 8001870:	2000      	movs	r0, #0
 8001872:	f001 f8c9 	bl	8002a08 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		analog_reference_voltage = 2.048;
 8001876:	4b51      	ldr	r3, [pc, #324]	; (80019bc <SetupMeasurement+0x19c>)
 8001878:	4a55      	ldr	r2, [pc, #340]	; (80019d0 <SetupMeasurement+0x1b0>)
 800187a:	601a      	str	r2, [r3, #0]
		used_coefficients = type_k_coefficients;
 800187c:	4b55      	ldr	r3, [pc, #340]	; (80019d4 <SetupMeasurement+0x1b4>)
 800187e:	62fb      	str	r3, [r7, #44]	; 0x2c
		coefficients_count = type_k_coefficients_count;
 8001880:	230b      	movs	r3, #11
 8001882:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001886:	e00e      	b.n	80018a6 <SetupMeasurement+0x86>
	}
	else if(tc_type == 'T') {
 8001888:	4b4b      	ldr	r3, [pc, #300]	; (80019b8 <SetupMeasurement+0x198>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b54      	cmp	r3, #84	; 0x54
 800188e:	d10a      	bne.n	80018a6 <SetupMeasurement+0x86>
		HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE0); // 2.048V
 8001890:	2000      	movs	r0, #0
 8001892:	f001 f8b9 	bl	8002a08 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>
		analog_reference_voltage = 2.048;
 8001896:	4b49      	ldr	r3, [pc, #292]	; (80019bc <SetupMeasurement+0x19c>)
 8001898:	4a4d      	ldr	r2, [pc, #308]	; (80019d0 <SetupMeasurement+0x1b0>)
 800189a:	601a      	str	r2, [r3, #0]
		used_coefficients = type_t_coefficients;
 800189c:	4b4e      	ldr	r3, [pc, #312]	; (80019d8 <SetupMeasurement+0x1b8>)
 800189e:	62fb      	str	r3, [r7, #44]	; 0x2c
		coefficients_count = type_t_coefficients_count;
 80018a0:	230f      	movs	r3, #15
 80018a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	}

	// > Calculate and set ADC sync timer
	target_conv_count = (record_length_ms * 1000) / record_interval_us;
 80018a6:	4b4d      	ldr	r3, [pc, #308]	; (80019dc <SetupMeasurement+0x1bc>)
 80018a8:	881b      	ldrh	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b0:	fb02 f303 	mul.w	r3, r2, r3
 80018b4:	4a4a      	ldr	r2, [pc, #296]	; (80019e0 <SetupMeasurement+0x1c0>)
 80018b6:	8812      	ldrh	r2, [r2, #0]
 80018b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80018bc:	4a49      	ldr	r2, [pc, #292]	; (80019e4 <SetupMeasurement+0x1c4>)
 80018be:	6013      	str	r3, [r2, #0]

	__HAL_TIM_SET_AUTORELOAD(&htim2, record_interval_us - 1);
 80018c0:	4b47      	ldr	r3, [pc, #284]	; (80019e0 <SetupMeasurement+0x1c0>)
 80018c2:	881b      	ldrh	r3, [r3, #0]
 80018c4:	1e5a      	subs	r2, r3, #1
 80018c6:	4b48      	ldr	r3, [pc, #288]	; (80019e8 <SetupMeasurement+0x1c8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80018cc:	4b44      	ldr	r3, [pc, #272]	; (80019e0 <SetupMeasurement+0x1c0>)
 80018ce:	881b      	ldrh	r3, [r3, #0]
 80018d0:	3b01      	subs	r3, #1
 80018d2:	461a      	mov	r2, r3
 80018d4:	4b44      	ldr	r3, [pc, #272]	; (80019e8 <SetupMeasurement+0x1c8>)
 80018d6:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_COUNTER(&htim2, record_interval_us - 1);
 80018d8:	4b41      	ldr	r3, [pc, #260]	; (80019e0 <SetupMeasurement+0x1c0>)
 80018da:	881b      	ldrh	r3, [r3, #0]
 80018dc:	1e5a      	subs	r2, r3, #1
 80018de:	4b42      	ldr	r3, [pc, #264]	; (80019e8 <SetupMeasurement+0x1c8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	625a      	str	r2, [r3, #36]	; 0x24

	// > Calculate and set DAC value

	// Initiate a one shot temperature conversion
	uint8_t one_shot_conversion_command = 0b01000100;
 80018e4:	2344      	movs	r3, #68	; 0x44
 80018e6:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Mem_Write(&hi2c3, (TEMP_SENSOR_ADDR << 1), 0x1, I2C_MEMADD_SIZE_8BIT, &one_shot_conversion_command, 1, HAL_MAX_DELAY);
 80018e8:	f04f 33ff 	mov.w	r3, #4294967295
 80018ec:	9302      	str	r3, [sp, #8]
 80018ee:	2301      	movs	r3, #1
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	1cfb      	adds	r3, r7, #3
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2301      	movs	r3, #1
 80018f8:	2201      	movs	r2, #1
 80018fa:	2190      	movs	r1, #144	; 0x90
 80018fc:	483b      	ldr	r0, [pc, #236]	; (80019ec <SetupMeasurement+0x1cc>)
 80018fe:	f003 ff21 	bl	8005744 <HAL_I2C_Mem_Write>
	// Read the temperature
	uint8_t temp_buffer[2];
	HAL_I2C_Mem_Read(&hi2c3, (TEMP_SENSOR_ADDR << 1), 0x0, I2C_MEMADD_SIZE_8BIT, temp_buffer, 2, HAL_MAX_DELAY);
 8001902:	f04f 33ff 	mov.w	r3, #4294967295
 8001906:	9302      	str	r3, [sp, #8]
 8001908:	2302      	movs	r3, #2
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	463b      	mov	r3, r7
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	2301      	movs	r3, #1
 8001912:	2200      	movs	r2, #0
 8001914:	2190      	movs	r1, #144	; 0x90
 8001916:	4835      	ldr	r0, [pc, #212]	; (80019ec <SetupMeasurement+0x1cc>)
 8001918:	f004 f828 	bl	800596c <HAL_I2C_Mem_Read>

	// Calculate the temperature in C
	uint8_t negative_temperature_flag = temp_buffer[0] >> 7;
 800191c:	783b      	ldrb	r3, [r7, #0]
 800191e:	09db      	lsrs	r3, r3, #7
 8001920:	76fb      	strb	r3, [r7, #27]
	temp_buffer[0] &= 0b01111111;
 8001922:	783b      	ldrb	r3, [r7, #0]
 8001924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001928:	b2db      	uxtb	r3, r3
 800192a:	703b      	strb	r3, [r7, #0]
	uint16_t sensor_output = (temp_buffer[0] << 2) | (temp_buffer[1] >> 6);
 800192c:	783b      	ldrb	r3, [r7, #0]
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	b21a      	sxth	r2, r3
 8001932:	787b      	ldrb	r3, [r7, #1]
 8001934:	099b      	lsrs	r3, r3, #6
 8001936:	b2db      	uxtb	r3, r3
 8001938:	b21b      	sxth	r3, r3
 800193a:	4313      	orrs	r3, r2
 800193c:	b21b      	sxth	r3, r3
 800193e:	833b      	strh	r3, [r7, #24]

	if(negative_temperature_flag) {
 8001940:	7efb      	ldrb	r3, [r7, #27]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d014      	beq.n	8001970 <SetupMeasurement+0x150>
		cold_junction_temp = (sensor_output - 512)/4.0;
 8001946:	8b3b      	ldrh	r3, [r7, #24]
 8001948:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fe21 	bl	8000594 <__aeabi_i2d>
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <SetupMeasurement+0x1d0>)
 8001958:	f7fe ffb0 	bl	80008bc <__aeabi_ddiv>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	4610      	mov	r0, r2
 8001962:	4619      	mov	r1, r3
 8001964:	f7ff f978 	bl	8000c58 <__aeabi_d2f>
 8001968:	4603      	mov	r3, r0
 800196a:	4a22      	ldr	r2, [pc, #136]	; (80019f4 <SetupMeasurement+0x1d4>)
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e011      	b.n	8001994 <SetupMeasurement+0x174>
	}
	else{
		cold_junction_temp = (sensor_output)/4.0;
 8001970:	8b3b      	ldrh	r3, [r7, #24]
 8001972:	4618      	mov	r0, r3
 8001974:	f7fe fe0e 	bl	8000594 <__aeabi_i2d>
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	4b1c      	ldr	r3, [pc, #112]	; (80019f0 <SetupMeasurement+0x1d0>)
 800197e:	f7fe ff9d 	bl	80008bc <__aeabi_ddiv>
 8001982:	4602      	mov	r2, r0
 8001984:	460b      	mov	r3, r1
 8001986:	4610      	mov	r0, r2
 8001988:	4619      	mov	r1, r3
 800198a:	f7ff f965 	bl	8000c58 <__aeabi_d2f>
 800198e:	4603      	mov	r3, r0
 8001990:	4a18      	ldr	r2, [pc, #96]	; (80019f4 <SetupMeasurement+0x1d4>)
 8001992:	6013      	str	r3, [r2, #0]
	}

	// Calculate the required DAC offset
	float cjc_offset_temperature = MINIMUM_TEMPERATURE - cold_junction_temp;
 8001994:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <SetupMeasurement+0x1d4>)
 8001996:	edd3 7a00 	vldr	s15, [r3]
 800199a:	eebb 7a04 	vmov.f32	s14, #180	; 0xc1a00000 -20.0
 800199e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a2:	edc7 7a05 	vstr	s15, [r7, #20]
	double cjc_offset_voltage = 0;
 80019a6:	f04f 0200 	mov.w	r2, #0
 80019aa:	f04f 0300 	mov.w	r3, #0
 80019ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for(int i = 0; i < coefficients_count; i++) {
 80019b2:	2300      	movs	r3, #0
 80019b4:	61fb      	str	r3, [r7, #28]
 80019b6:	e048      	b.n	8001a4a <SetupMeasurement+0x22a>
 80019b8:	2000000c 	.word	0x2000000c
 80019bc:	20000004 	.word	0x20000004
 80019c0:	4039999a 	.word	0x4039999a
 80019c4:	080120a8 	.word	0x080120a8
 80019c8:	40200000 	.word	0x40200000
 80019cc:	08011f90 	.word	0x08011f90
 80019d0:	4003126f 	.word	0x4003126f
 80019d4:	08011fd8 	.word	0x08011fd8
 80019d8:	08012030 	.word	0x08012030
 80019dc:	20000008 	.word	0x20000008
 80019e0:	2000000a 	.word	0x2000000a
 80019e4:	200027c0 	.word	0x200027c0
 80019e8:	20000724 	.word	0x20000724
 80019ec:	200006d0 	.word	0x200006d0
 80019f0:	40100000 	.word	0x40100000
 80019f4:	200027c8 	.word	0x200027c8
		cjc_offset_voltage += used_coefficients[i] * pow(cjc_offset_temperature, i);
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019fe:	4413      	add	r3, r2
 8001a00:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001a04:	6978      	ldr	r0, [r7, #20]
 8001a06:	f7fe fdd7 	bl	80005b8 <__aeabi_f2d>
 8001a0a:	4682      	mov	sl, r0
 8001a0c:	468b      	mov	fp, r1
 8001a0e:	69f8      	ldr	r0, [r7, #28]
 8001a10:	f7fe fdc0 	bl	8000594 <__aeabi_i2d>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	ec43 2b11 	vmov	d1, r2, r3
 8001a1c:	ec4b ab10 	vmov	d0, sl, fp
 8001a20:	f00f fb28 	bl	8011074 <pow>
 8001a24:	ec53 2b10 	vmov	r2, r3, d0
 8001a28:	4640      	mov	r0, r8
 8001a2a:	4649      	mov	r1, r9
 8001a2c:	f7fe fe1c 	bl	8000668 <__aeabi_dmul>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a38:	f7fe fc60 	bl	80002fc <__adddf3>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	460b      	mov	r3, r1
 8001a40:	e9c7 2308 	strd	r2, r3, [r7, #32]
	for(int i = 0; i < coefficients_count; i++) {
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	3301      	adds	r3, #1
 8001a48:	61fb      	str	r3, [r7, #28]
 8001a4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001a4e:	69fa      	ldr	r2, [r7, #28]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	dbd1      	blt.n	80019f8 <SetupMeasurement+0x1d8>
	}

	double total_offset_calc = INAMP_OUTPUT_BUFFER_OFFSET + ((-1) * (cjc_offset_voltage * pow(10, -6)) * INAMP_GAIN);
 8001a54:	a359      	add	r3, pc, #356	; (adr r3, 8001bbc <SetupMeasurement+0x39c>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001a5e:	f7fe fe03 	bl	8000668 <__aeabi_dmul>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4614      	mov	r4, r2
 8001a68:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8001a6c:	a355      	add	r3, pc, #340	; (adr r3, 8001bc4 <SetupMeasurement+0x3a4>)
 8001a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a72:	4620      	mov	r0, r4
 8001a74:	4629      	mov	r1, r5
 8001a76:	f7fe fdf7 	bl	8000668 <__aeabi_dmul>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	a352      	add	r3, pc, #328	; (adr r3, 8001bcc <SetupMeasurement+0x3ac>)
 8001a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a88:	f7fe fc38 	bl	80002fc <__adddf3>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint32_t offset = (uint32_t)(total_offset_calc * 4096) / analog_reference_voltage;
 8001a94:	f04f 0200 	mov.w	r2, #0
 8001a98:	4b3d      	ldr	r3, [pc, #244]	; (8001b90 <SetupMeasurement+0x370>)
 8001a9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001a9e:	f7fe fde3 	bl	8000668 <__aeabi_dmul>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	4610      	mov	r0, r2
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	f7ff f8b5 	bl	8000c18 <__aeabi_d2uiz>
 8001aae:	ee07 0a90 	vmov	s15, r0
 8001ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001ab6:	4b37      	ldr	r3, [pc, #220]	; (8001b94 <SetupMeasurement+0x374>)
 8001ab8:	ed93 7a00 	vldr	s14, [r3]
 8001abc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ac4:	ee17 3a90 	vmov	r3, s15
 8001ac8:	607b      	str	r3, [r7, #4]
	applied_voltage_offset = (float)(offset * analog_reference_voltage) / 4096;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	ee07 3a90 	vmov	s15, r3
 8001ad0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001ad4:	4b2f      	ldr	r3, [pc, #188]	; (8001b94 <SetupMeasurement+0x374>)
 8001ad6:	edd3 7a00 	vldr	s15, [r3]
 8001ada:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ade:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8001b98 <SetupMeasurement+0x378>
 8001ae2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <SetupMeasurement+0x37c>)
 8001ae8:	edc3 7a00 	vstr	s15, [r3]

	// Set the DAC voltage
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, offset);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	2100      	movs	r1, #0
 8001af2:	482b      	ldr	r0, [pc, #172]	; (8001ba0 <SetupMeasurement+0x380>)
 8001af4:	f002 ff1c 	bl	8004930 <HAL_DAC_SetValue>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001af8:	2100      	movs	r1, #0
 8001afa:	4829      	ldr	r0, [pc, #164]	; (8001ba0 <SetupMeasurement+0x380>)
 8001afc:	f002 feac 	bl	8004858 <HAL_DAC_Start>


	// Calculate the target packet number
	target_packet_count = (record_length_ms / record_interval_us) * 1000 / (ADC_BUFFER_SIZE / 2);
 8001b00:	4b28      	ldr	r3, [pc, #160]	; (8001ba4 <SetupMeasurement+0x384>)
 8001b02:	881a      	ldrh	r2, [r3, #0]
 8001b04:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <SetupMeasurement+0x388>)
 8001b06:	881b      	ldrh	r3, [r3, #0]
 8001b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0c:	b29b      	uxth	r3, r3
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4a26      	ldr	r2, [pc, #152]	; (8001bac <SetupMeasurement+0x38c>)
 8001b12:	6013      	str	r3, [r2, #0]
	if((int)(record_length_ms * 1000.0 / record_interval_us) % (ADC_BUFFER_SIZE / 2) != 0){
 8001b14:	4b23      	ldr	r3, [pc, #140]	; (8001ba4 <SetupMeasurement+0x384>)
 8001b16:	881b      	ldrh	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fd3b 	bl	8000594 <__aeabi_i2d>
 8001b1e:	f04f 0200 	mov.w	r2, #0
 8001b22:	4b23      	ldr	r3, [pc, #140]	; (8001bb0 <SetupMeasurement+0x390>)
 8001b24:	f7fe fda0 	bl	8000668 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4614      	mov	r4, r2
 8001b2e:	461d      	mov	r5, r3
 8001b30:	4b1d      	ldr	r3, [pc, #116]	; (8001ba8 <SetupMeasurement+0x388>)
 8001b32:	881b      	ldrh	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7fe fd2d 	bl	8000594 <__aeabi_i2d>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	460b      	mov	r3, r1
 8001b3e:	4620      	mov	r0, r4
 8001b40:	4629      	mov	r1, r5
 8001b42:	f7fe febb 	bl	80008bc <__aeabi_ddiv>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	f7ff f83b 	bl	8000bc8 <__aeabi_d2iz>
 8001b52:	4602      	mov	r2, r0
 8001b54:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <SetupMeasurement+0x394>)
 8001b56:	fb83 1302 	smull	r1, r3, r3, r2
 8001b5a:	1159      	asrs	r1, r3, #5
 8001b5c:	17d3      	asrs	r3, r2, #31
 8001b5e:	1acb      	subs	r3, r1, r3
 8001b60:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001b64:	fb01 f303 	mul.w	r3, r1, r3
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d004      	beq.n	8001b78 <SetupMeasurement+0x358>
		target_packet_count += 1;
 8001b6e:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <SetupMeasurement+0x38c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	3301      	adds	r3, #1
 8001b74:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <SetupMeasurement+0x38c>)
 8001b76:	6013      	str	r3, [r2, #0]
	}

	conv_state = PARAMETERS_SET;
 8001b78:	4b0f      	ldr	r3, [pc, #60]	; (8001bb8 <SetupMeasurement+0x398>)
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	701a      	strb	r2, [r3, #0]
	return 1;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3730      	adds	r7, #48	; 0x30
 8001b84:	46bd      	mov	sp, r7
 8001b86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b8a:	bf00      	nop
 8001b8c:	f3af 8000 	nop.w
 8001b90:	40b00000 	.word	0x40b00000
 8001b94:	20000004 	.word	0x20000004
 8001b98:	45800000 	.word	0x45800000
 8001b9c:	200027cc 	.word	0x200027cc
 8001ba0:	200006bc 	.word	0x200006bc
 8001ba4:	20000008 	.word	0x20000008
 8001ba8:	2000000a 	.word	0x2000000a
 8001bac:	20000774 	.word	0x20000774
 8001bb0:	408f4000 	.word	0x408f4000
 8001bb4:	10624dd3 	.word	0x10624dd3
 8001bb8:	200027bc 	.word	0x200027bc
 8001bbc:	a0b5ed8d 	.word	0xa0b5ed8d
 8001bc0:	3eb0c6f7 	.word	0x3eb0c6f7
 8001bc4:	e6d1d609 	.word	0xe6d1d609
 8001bc8:	4066aa7d 	.word	0x4066aa7d
 8001bcc:	9999999a 	.word	0x9999999a
 8001bd0:	3fc99999 	.word	0x3fc99999

08001bd4 <SendParameters>:

int SendParameters(void) {
 8001bd4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001bd8:	b0ca      	sub	sp, #296	; 0x128
 8001bda:	af08      	add	r7, sp, #32
	unsigned char parameters_msg[USB_TX_HEADER_SIZE];

	sprintf((char *)parameters_msg, "CjcTmp:%.2f;AlgRfr:%.3f;AplOfs:%.4f;AdcBuf:%d;UsbBuf:%d;PktCnt:%d\n",
 8001bdc:	4b2c      	ldr	r3, [pc, #176]	; (8001c90 <SendParameters+0xbc>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fce9 	bl	80005b8 <__aeabi_f2d>
 8001be6:	4680      	mov	r8, r0
 8001be8:	4689      	mov	r9, r1
 8001bea:	4b2a      	ldr	r3, [pc, #168]	; (8001c94 <SendParameters+0xc0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f7fe fce2 	bl	80005b8 <__aeabi_f2d>
 8001bf4:	4604      	mov	r4, r0
 8001bf6:	460d      	mov	r5, r1
 8001bf8:	4b27      	ldr	r3, [pc, #156]	; (8001c98 <SendParameters+0xc4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7fe fcdb 	bl	80005b8 <__aeabi_f2d>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4925      	ldr	r1, [pc, #148]	; (8001c9c <SendParameters+0xc8>)
 8001c08:	6809      	ldr	r1, [r1, #0]
 8001c0a:	1d38      	adds	r0, r7, #4
 8001c0c:	9106      	str	r1, [sp, #24]
 8001c0e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001c12:	9105      	str	r1, [sp, #20]
 8001c14:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001c18:	9104      	str	r1, [sp, #16]
 8001c1a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001c1e:	e9cd 4500 	strd	r4, r5, [sp]
 8001c22:	4642      	mov	r2, r8
 8001c24:	464b      	mov	r3, r9
 8001c26:	491e      	ldr	r1, [pc, #120]	; (8001ca0 <SendParameters+0xcc>)
 8001c28:	f00d f8b4 	bl	800ed94 <siprintf>
									analog_reference_voltage,
									applied_voltage_offset,
									ADC_BUFFER_SIZE,
									USB_TX_BUFFER_SIZE,
									target_packet_count);
	uint16_t line_len = strlen((char *)parameters_msg);
 8001c2c:	1d3b      	adds	r3, r7, #4
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7fe fb56 	bl	80002e0 <strlen>
 8001c34:	4603      	mov	r3, r0
 8001c36:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
	while(CDC_Transmit_FS(parameters_msg, line_len) != USBD_OK);
 8001c3a:	bf00      	nop
 8001c3c:	f8b7 2106 	ldrh.w	r2, [r7, #262]	; 0x106
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	4611      	mov	r1, r2
 8001c44:	4618      	mov	r0, r3
 8001c46:	f00b fe99 	bl	800d97c <CDC_Transmit_FS>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d1f5      	bne.n	8001c3c <SendParameters+0x68>

	HAL_GPIO_WritePin(IND_LED_G_GPIO_Port, IND_LED_G_Pin, GPIO_PIN_SET);
 8001c50:	2201      	movs	r2, #1
 8001c52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c56:	4813      	ldr	r0, [pc, #76]	; (8001ca4 <SendParameters+0xd0>)
 8001c58:	f003 fc9e 	bl	8005598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_LED_R_GPIO_Port, IND_LED_R_Pin, GPIO_PIN_SET);
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c62:	4810      	ldr	r0, [pc, #64]	; (8001ca4 <SendParameters+0xd0>)
 8001c64:	f003 fc98 	bl	8005598 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IND_LED_B_GPIO_Port, IND_LED_B_Pin, GPIO_PIN_RESET);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c6e:	480d      	ldr	r0, [pc, #52]	; (8001ca4 <SendParameters+0xd0>)
 8001c70:	f003 fc92 	bl	8005598 <HAL_GPIO_WritePin>
	measurement_activated = 0;
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <SendParameters+0xd4>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	601a      	str	r2, [r3, #0]
	conv_state = ARMED;
 8001c7a:	4b0c      	ldr	r3, [pc, #48]	; (8001cac <SendParameters+0xd8>)
 8001c7c:	2204      	movs	r2, #4
 8001c7e:	701a      	strb	r2, [r3, #0]

	return 1;
 8001c80:	2301      	movs	r3, #1
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001c8e:	bf00      	nop
 8001c90:	200027c8 	.word	0x200027c8
 8001c94:	20000004 	.word	0x20000004
 8001c98:	200027cc 	.word	0x200027cc
 8001c9c:	20000774 	.word	0x20000774
 8001ca0:	08011f18 	.word	0x08011f18
 8001ca4:	48000800 	.word	0x48000800
 8001ca8:	200027d8 	.word	0x200027d8
 8001cac:	200027bc 	.word	0x200027bc

08001cb0 <StartMeasurement>:

int StartMeasurement(void) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001cb4:	217f      	movs	r1, #127	; 0x7f
 8001cb6:	4818      	ldr	r0, [pc, #96]	; (8001d18 <StartMeasurement+0x68>)
 8001cb8:	f002 fb32 	bl	8004320 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffers[0], ADC_BUFFER_SIZE);
 8001cbc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cc0:	4916      	ldr	r1, [pc, #88]	; (8001d1c <StartMeasurement+0x6c>)
 8001cc2:	4815      	ldr	r0, [pc, #84]	; (8001d18 <StartMeasurement+0x68>)
 8001cc4:	f001 fb14 	bl	80032f0 <HAL_ADC_Start_DMA>
	HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001cc8:	217f      	movs	r1, #127	; 0x7f
 8001cca:	4815      	ldr	r0, [pc, #84]	; (8001d20 <StartMeasurement+0x70>)
 8001ccc:	f002 fb28 	bl	8004320 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc_buffers[1], ADC_BUFFER_SIZE);
 8001cd0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cd4:	4913      	ldr	r1, [pc, #76]	; (8001d24 <StartMeasurement+0x74>)
 8001cd6:	4812      	ldr	r0, [pc, #72]	; (8001d20 <StartMeasurement+0x70>)
 8001cd8:	f001 fb0a 	bl	80032f0 <HAL_ADC_Start_DMA>
	HAL_ADCEx_Calibration_Start(&hadc3, ADC_SINGLE_ENDED);
 8001cdc:	217f      	movs	r1, #127	; 0x7f
 8001cde:	4812      	ldr	r0, [pc, #72]	; (8001d28 <StartMeasurement+0x78>)
 8001ce0:	f002 fb1e 	bl	8004320 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adc_buffers[2], ADC_BUFFER_SIZE);
 8001ce4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ce8:	4910      	ldr	r1, [pc, #64]	; (8001d2c <StartMeasurement+0x7c>)
 8001cea:	480f      	ldr	r0, [pc, #60]	; (8001d28 <StartMeasurement+0x78>)
 8001cec:	f001 fb00 	bl	80032f0 <HAL_ADC_Start_DMA>
	HAL_ADCEx_Calibration_Start(&hadc4, ADC_SINGLE_ENDED);
 8001cf0:	217f      	movs	r1, #127	; 0x7f
 8001cf2:	480f      	ldr	r0, [pc, #60]	; (8001d30 <StartMeasurement+0x80>)
 8001cf4:	f002 fb14 	bl	8004320 <HAL_ADCEx_Calibration_Start>
	HAL_ADC_Start_DMA(&hadc4, (uint32_t*)adc_buffers[3], ADC_BUFFER_SIZE);
 8001cf8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cfc:	490d      	ldr	r1, [pc, #52]	; (8001d34 <StartMeasurement+0x84>)
 8001cfe:	480c      	ldr	r0, [pc, #48]	; (8001d30 <StartMeasurement+0x80>)
 8001d00:	f001 faf6 	bl	80032f0 <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim2);
 8001d04:	480c      	ldr	r0, [pc, #48]	; (8001d38 <StartMeasurement+0x88>)
 8001d06:	f007 f835 	bl	8008d74 <HAL_TIM_Base_Start_IT>
	conv_state = MEASURING;
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <StartMeasurement+0x8c>)
 8001d0c:	2205      	movs	r2, #5
 8001d0e:	701a      	strb	r2, [r3, #0]

	return 1;
 8001d10:	2301      	movs	r3, #1
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	2000038c 	.word	0x2000038c
 8001d1c:	2000077c 	.word	0x2000077c
 8001d20:	200003f8 	.word	0x200003f8
 8001d24:	20000f4c 	.word	0x20000f4c
 8001d28:	20000464 	.word	0x20000464
 8001d2c:	2000171c 	.word	0x2000171c
 8001d30:	200004d0 	.word	0x200004d0
 8001d34:	20001eec 	.word	0x20001eec
 8001d38:	20000724 	.word	0x20000724
 8001d3c:	200027bc 	.word	0x200027bc

08001d40 <HAL_ADC_ConvHalfCpltCallback>:

// Called when first half of buffer is filled
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc) {
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <HAL_ADC_ConvHalfCpltCallback+0x54>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d103      	bne.n	8001d58 <HAL_ADC_ConvHalfCpltCallback+0x18>
		adc_state[0] = START_FULL;
 8001d50:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	701a      	strb	r2, [r3, #0]
		adc_state[2] = START_FULL;
	}
	else if(hadc == &hadc4){
		adc_state[3] = START_FULL;
	}
}
 8001d56:	e016      	b.n	8001d86 <HAL_ADC_ConvHalfCpltCallback+0x46>
	else if(hadc == &hadc2){
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	4a10      	ldr	r2, [pc, #64]	; (8001d9c <HAL_ADC_ConvHalfCpltCallback+0x5c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d103      	bne.n	8001d68 <HAL_ADC_ConvHalfCpltCallback+0x28>
		adc_state[1] = START_FULL;
 8001d60:	4b0d      	ldr	r3, [pc, #52]	; (8001d98 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8001d62:	2201      	movs	r2, #1
 8001d64:	705a      	strb	r2, [r3, #1]
}
 8001d66:	e00e      	b.n	8001d86 <HAL_ADC_ConvHalfCpltCallback+0x46>
	else if(hadc == &hadc3){
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a0d      	ldr	r2, [pc, #52]	; (8001da0 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d103      	bne.n	8001d78 <HAL_ADC_ConvHalfCpltCallback+0x38>
		adc_state[2] = START_FULL;
 8001d70:	4b09      	ldr	r3, [pc, #36]	; (8001d98 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	709a      	strb	r2, [r3, #2]
}
 8001d76:	e006      	b.n	8001d86 <HAL_ADC_ConvHalfCpltCallback+0x46>
	else if(hadc == &hadc4){
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d102      	bne.n	8001d86 <HAL_ADC_ConvHalfCpltCallback+0x46>
		adc_state[3] = START_FULL;
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <HAL_ADC_ConvHalfCpltCallback+0x58>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	70da      	strb	r2, [r3, #3]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	2000038c 	.word	0x2000038c
 8001d98:	200027d0 	.word	0x200027d0
 8001d9c:	200003f8 	.word	0x200003f8
 8001da0:	20000464 	.word	0x20000464
 8001da4:	200004d0 	.word	0x200004d0

08001da8 <HAL_ADC_ConvCpltCallback>:

// Called when buffer is completely filled
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
	if (hadc == &hadc1){
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <HAL_ADC_ConvCpltCallback+0x54>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d103      	bne.n	8001dc0 <HAL_ADC_ConvCpltCallback+0x18>
		adc_state[0] = END_FULL;
 8001db8:	4b11      	ldr	r3, [pc, #68]	; (8001e00 <HAL_ADC_ConvCpltCallback+0x58>)
 8001dba:	2202      	movs	r2, #2
 8001dbc:	701a      	strb	r2, [r3, #0]
		adc_state[2] = END_FULL;
	}
	else if(hadc == &hadc4){
		adc_state[3] = END_FULL;
	}
}
 8001dbe:	e016      	b.n	8001dee <HAL_ADC_ConvCpltCallback+0x46>
	else if(hadc == &hadc2){
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	4a10      	ldr	r2, [pc, #64]	; (8001e04 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d103      	bne.n	8001dd0 <HAL_ADC_ConvCpltCallback+0x28>
		adc_state[1] = END_FULL;
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <HAL_ADC_ConvCpltCallback+0x58>)
 8001dca:	2202      	movs	r2, #2
 8001dcc:	705a      	strb	r2, [r3, #1]
}
 8001dce:	e00e      	b.n	8001dee <HAL_ADC_ConvCpltCallback+0x46>
	else if(hadc == &hadc3){
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	4a0d      	ldr	r2, [pc, #52]	; (8001e08 <HAL_ADC_ConvCpltCallback+0x60>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d103      	bne.n	8001de0 <HAL_ADC_ConvCpltCallback+0x38>
		adc_state[2] = END_FULL;
 8001dd8:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <HAL_ADC_ConvCpltCallback+0x58>)
 8001dda:	2202      	movs	r2, #2
 8001ddc:	709a      	strb	r2, [r3, #2]
}
 8001dde:	e006      	b.n	8001dee <HAL_ADC_ConvCpltCallback+0x46>
	else if(hadc == &hadc4){
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <HAL_ADC_ConvCpltCallback+0x64>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d102      	bne.n	8001dee <HAL_ADC_ConvCpltCallback+0x46>
		adc_state[3] = END_FULL;
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_ADC_ConvCpltCallback+0x58>)
 8001dea:	2202      	movs	r2, #2
 8001dec:	70da      	strb	r2, [r3, #3]
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	2000038c 	.word	0x2000038c
 8001e00:	200027d0 	.word	0x200027d0
 8001e04:	200003f8 	.word	0x200003f8
 8001e08:	20000464 	.word	0x20000464
 8001e0c:	200004d0 	.word	0x200004d0

08001e10 <SendData>:

int SendData(char buffer_id) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	f5ad 6d7c 	sub.w	sp, sp, #4032	; 0xfc0
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	4602      	mov	r2, r0
 8001e1a:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 8001e1e:	f6a3 73b9 	subw	r3, r3, #4025	; 0xfb9
 8001e22:	701a      	strb	r2, [r3, #0]
	// > Send the ADC data
	unsigned char tx_buffer[USB_TX_BUFFER_SIZE];

	// Determine the ADC buffer start index for the packet
	unsigned int adc_buffer_start_index;
	if(buffer_id == 's'){
 8001e24:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 8001e28:	f6a3 73b9 	subw	r3, r3, #4025	; 0xfb9
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b73      	cmp	r3, #115	; 0x73
 8001e30:	d103      	bne.n	8001e3a <SendData+0x2a>
		adc_buffer_start_index = 0;
 8001e32:	2300      	movs	r3, #0
 8001e34:	f8c7 3fbc 	str.w	r3, [r7, #4028]	; 0xfbc
 8001e38:	e00a      	b.n	8001e50 <SendData+0x40>
	}
	else if(buffer_id == 'e') {
 8001e3a:	f507 637c 	add.w	r3, r7, #4032	; 0xfc0
 8001e3e:	f6a3 73b9 	subw	r3, r3, #4025	; 0xfb9
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b65      	cmp	r3, #101	; 0x65
 8001e46:	d103      	bne.n	8001e50 <SendData+0x40>
		adc_buffer_start_index = ADC_BUFFER_SIZE/2;
 8001e48:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e4c:	f8c7 3fbc 	str.w	r3, [r7, #4028]	; 0xfbc
	}


	unsigned int tx_start_index = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 3fb8 	str.w	r3, [r7, #4024]	; 0xfb8
	// Iterate through all ADCs
	for(int adc_index = 0; adc_index < MAX_CHANNEL_COUNT; adc_index++){
 8001e56:	2300      	movs	r3, #0
 8001e58:	f8c7 3fb4 	str.w	r3, [r7, #4020]	; 0xfb4
 8001e5c:	e053      	b.n	8001f06 <SendData+0xf6>

		for(int i = 0; i < ADC_BUFFER_SIZE/2; i++){
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f8c7 3fb0 	str.w	r3, [r7, #4016]	; 0xfb0
 8001e64:	e03f      	b.n	8001ee6 <SendData+0xd6>
			tx_buffer[tx_start_index + (i*2)+1] = (uint8_t)(adc_buffers[adc_index][adc_buffer_start_index + i] & 0x00FF);
 8001e66:	f8d7 2fb0 	ldr.w	r2, [r7, #4016]	; 0xfb0
 8001e6a:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	; 0xfbc
 8001e6e:	4413      	add	r3, r2
 8001e70:	493b      	ldr	r1, [pc, #236]	; (8001f60 <SendData+0x150>)
 8001e72:	f8d7 2fb4 	ldr.w	r2, [r7, #4020]	; 0xfb4
 8001e76:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001e7a:	fb00 f202 	mul.w	r2, r0, r2
 8001e7e:	4413      	add	r3, r2
 8001e80:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001e84:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	; 0xfb0
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	; 0xfb8
 8001e90:	440b      	add	r3, r1
 8001e92:	3301      	adds	r3, #1
 8001e94:	b2d1      	uxtb	r1, r2
 8001e96:	f507 627c 	add.w	r2, r7, #4032	; 0xfc0
 8001e9a:	f6a2 72b4 	subw	r2, r2, #4020	; 0xfb4
 8001e9e:	54d1      	strb	r1, [r2, r3]
			tx_buffer[tx_start_index + i*2] = (uint8_t)((adc_buffers[adc_index][adc_buffer_start_index + i] >> 8) & 0x00FF);
 8001ea0:	f8d7 2fb0 	ldr.w	r2, [r7, #4016]	; 0xfb0
 8001ea4:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	; 0xfbc
 8001ea8:	4413      	add	r3, r2
 8001eaa:	492d      	ldr	r1, [pc, #180]	; (8001f60 <SendData+0x150>)
 8001eac:	f8d7 2fb4 	ldr.w	r2, [r7, #4020]	; 0xfb4
 8001eb0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eb4:	fb00 f202 	mul.w	r2, r0, r2
 8001eb8:	4413      	add	r3, r2
 8001eba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001ebe:	0a1b      	lsrs	r3, r3, #8
 8001ec0:	b29a      	uxth	r2, r3
 8001ec2:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	; 0xfb0
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	; 0xfb8
 8001ece:	440b      	add	r3, r1
 8001ed0:	b2d1      	uxtb	r1, r2
 8001ed2:	f507 627c 	add.w	r2, r7, #4032	; 0xfc0
 8001ed6:	f6a2 72b4 	subw	r2, r2, #4020	; 0xfb4
 8001eda:	54d1      	strb	r1, [r2, r3]
		for(int i = 0; i < ADC_BUFFER_SIZE/2; i++){
 8001edc:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	; 0xfb0
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	f8c7 3fb0 	str.w	r3, [r7, #4016]	; 0xfb0
 8001ee6:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	; 0xfb0
 8001eea:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001eee:	dbba      	blt.n	8001e66 <SendData+0x56>
		}
		tx_start_index += ADC_BUFFER_SIZE;
 8001ef0:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	; 0xfb8
 8001ef4:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8001ef8:	f8c7 3fb8 	str.w	r3, [r7, #4024]	; 0xfb8
	for(int adc_index = 0; adc_index < MAX_CHANNEL_COUNT; adc_index++){
 8001efc:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	; 0xfb4
 8001f00:	3301      	adds	r3, #1
 8001f02:	f8c7 3fb4 	str.w	r3, [r7, #4020]	; 0xfb4
 8001f06:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	; 0xfb4
 8001f0a:	2b03      	cmp	r3, #3
 8001f0c:	dda7      	ble.n	8001e5e <SendData+0x4e>
	}

	while(CDC_Transmit_FS(tx_buffer, USB_TX_BUFFER_SIZE) != USBD_OK);
 8001f0e:	bf00      	nop
 8001f10:	f107 030c 	add.w	r3, r7, #12
 8001f14:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f00b fd2f 	bl	800d97c <CDC_Transmit_FS>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f5      	bne.n	8001f10 <SendData+0x100>
	current_packet_count++;
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <SendData+0x154>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	4a0e      	ldr	r2, [pc, #56]	; (8001f64 <SendData+0x154>)
 8001f2c:	6013      	str	r3, [r2, #0]
	for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f8c7 3fac 	str.w	r3, [r7, #4012]	; 0xfac
 8001f34:	e00a      	b.n	8001f4c <SendData+0x13c>
		 adc_state[i] = EMPTY;
 8001f36:	4a0c      	ldr	r2, [pc, #48]	; (8001f68 <SendData+0x158>)
 8001f38:	f8d7 3fac 	ldr.w	r3, [r7, #4012]	; 0xfac
 8001f3c:	4413      	add	r3, r2
 8001f3e:	2200      	movs	r2, #0
 8001f40:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < MAX_CHANNEL_COUNT; i++){
 8001f42:	f8d7 3fac 	ldr.w	r3, [r7, #4012]	; 0xfac
 8001f46:	3301      	adds	r3, #1
 8001f48:	f8c7 3fac 	str.w	r3, [r7, #4012]	; 0xfac
 8001f4c:	f8d7 3fac 	ldr.w	r3, [r7, #4012]	; 0xfac
 8001f50:	2b03      	cmp	r3, #3
 8001f52:	ddf0      	ble.n	8001f36 <SendData+0x126>
	}

	return 1;
 8001f54:	2301      	movs	r3, #1
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	f507 677c 	add.w	r7, r7, #4032	; 0xfc0
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	2000077c 	.word	0x2000077c
 8001f64:	20000770 	.word	0x20000770
 8001f68:	200027d0 	.word	0x200027d0

08001f6c <ResetStates>:

int ResetStates(void) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
	  HAL_TIM_Base_Stop_IT(&htim2);
 8001f70:	481d      	ldr	r0, [pc, #116]	; (8001fe8 <ResetStates+0x7c>)
 8001f72:	f006 ff77 	bl	8008e64 <HAL_TIM_Base_Stop_IT>
	  HAL_ADC_Stop_DMA(&hadc1);
 8001f76:	481d      	ldr	r0, [pc, #116]	; (8001fec <ResetStates+0x80>)
 8001f78:	f001 fa8e 	bl	8003498 <HAL_ADC_Stop_DMA>
	  HAL_ADC_Stop_DMA(&hadc2);
 8001f7c:	481c      	ldr	r0, [pc, #112]	; (8001ff0 <ResetStates+0x84>)
 8001f7e:	f001 fa8b 	bl	8003498 <HAL_ADC_Stop_DMA>
	  HAL_ADC_Stop_DMA(&hadc3);
 8001f82:	481c      	ldr	r0, [pc, #112]	; (8001ff4 <ResetStates+0x88>)
 8001f84:	f001 fa88 	bl	8003498 <HAL_ADC_Stop_DMA>
	  HAL_ADC_Stop_DMA(&hadc4);
 8001f88:	481b      	ldr	r0, [pc, #108]	; (8001ff8 <ResetStates+0x8c>)
 8001f8a:	f001 fa85 	bl	8003498 <HAL_ADC_Stop_DMA>
	  memset(adc_buffers, 0, sizeof(adc_buffers));
 8001f8e:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001f92:	2100      	movs	r1, #0
 8001f94:	4819      	ldr	r0, [pc, #100]	; (8001ffc <ResetStates+0x90>)
 8001f96:	f00c ff60 	bl	800ee5a <memset>
	  conv_state = IDLE;
 8001f9a:	4b19      	ldr	r3, [pc, #100]	; (8002000 <ResetStates+0x94>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
	  conv_count = 0;
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <ResetStates+0x98>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	601a      	str	r2, [r3, #0]
	  conv_count_reached = 0;
 8001fa6:	4b18      	ldr	r3, [pc, #96]	; (8002008 <ResetStates+0x9c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
	  target_packet_count = 0;
 8001fac:	4b17      	ldr	r3, [pc, #92]	; (800200c <ResetStates+0xa0>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
	  current_packet_count = 0;
 8001fb2:	4b17      	ldr	r3, [pc, #92]	; (8002010 <ResetStates+0xa4>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
	  measurement_activated = 0;
 8001fb8:	4b16      	ldr	r3, [pc, #88]	; (8002014 <ResetStates+0xa8>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_WritePin(IND_LED_G_GPIO_Port, IND_LED_G_Pin, GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fc4:	4814      	ldr	r0, [pc, #80]	; (8002018 <ResetStates+0xac>)
 8001fc6:	f003 fae7 	bl	8005598 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IND_LED_R_GPIO_Port, IND_LED_R_Pin, GPIO_PIN_SET);
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fd0:	4811      	ldr	r0, [pc, #68]	; (8002018 <ResetStates+0xac>)
 8001fd2:	f003 fae1 	bl	8005598 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(IND_LED_B_GPIO_Port, IND_LED_B_Pin, GPIO_PIN_SET);
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fdc:	480e      	ldr	r0, [pc, #56]	; (8002018 <ResetStates+0xac>)
 8001fde:	f003 fadb 	bl	8005598 <HAL_GPIO_WritePin>

	  return 1;
 8001fe2:	2301      	movs	r3, #1
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	20000724 	.word	0x20000724
 8001fec:	2000038c 	.word	0x2000038c
 8001ff0:	200003f8 	.word	0x200003f8
 8001ff4:	20000464 	.word	0x20000464
 8001ff8:	200004d0 	.word	0x200004d0
 8001ffc:	2000077c 	.word	0x2000077c
 8002000:	200027bc 	.word	0x200027bc
 8002004:	200027c4 	.word	0x200027c4
 8002008:	200027d4 	.word	0x200027d4
 800200c:	20000774 	.word	0x20000774
 8002010:	20000770 	.word	0x20000770
 8002014:	200027d8 	.word	0x200027d8
 8002018:	48000800 	.word	0x48000800

0800201c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002020:	b672      	cpsid	i
}
 8002022:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002024:	e7fe      	b.n	8002024 <Error_Handler+0x8>
	...

08002028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202e:	4b13      	ldr	r3, [pc, #76]	; (800207c <HAL_MspInit+0x54>)
 8002030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002032:	4a12      	ldr	r2, [pc, #72]	; (800207c <HAL_MspInit+0x54>)
 8002034:	f043 0301 	orr.w	r3, r3, #1
 8002038:	6613      	str	r3, [r2, #96]	; 0x60
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <HAL_MspInit+0x54>)
 800203c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	607b      	str	r3, [r7, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002046:	4b0d      	ldr	r3, [pc, #52]	; (800207c <HAL_MspInit+0x54>)
 8002048:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800204a:	4a0c      	ldr	r2, [pc, #48]	; (800207c <HAL_MspInit+0x54>)
 800204c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002050:	6593      	str	r3, [r2, #88]	; 0x58
 8002052:	4b0a      	ldr	r3, [pc, #40]	; (800207c <HAL_MspInit+0x54>)
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205a:	603b      	str	r3, [r7, #0]
 800205c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE2);
 800205e:	2020      	movs	r0, #32
 8002060:	f000 fcd2 	bl	8002a08 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8002064:	f000 fcf8 	bl	8002a58 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8002068:	2000      	movs	r0, #0
 800206a:	f000 fce1 	bl	8002a30 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800206e:	f005 fec9 	bl	8007e04 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000

08002080 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b0a4      	sub	sp, #144	; 0x90
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002098:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800209c:	2254      	movs	r2, #84	; 0x54
 800209e:	2100      	movs	r1, #0
 80020a0:	4618      	mov	r0, r3
 80020a2:	f00c feda 	bl	800ee5a <memset>
  if(hadc->Instance==ADC1)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020ae:	d16b      	bne.n	8002188 <HAL_ADC_MspInit+0x108>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80020b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020b4:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80020b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80020ba:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020c0:	4618      	mov	r0, r3
 80020c2:	f006 fbb1 	bl	8008828 <HAL_RCCEx_PeriphCLKConfig>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80020cc:	f7ff ffa6 	bl	800201c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80020d0:	4b9e      	ldr	r3, [pc, #632]	; (800234c <HAL_ADC_MspInit+0x2cc>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	3301      	adds	r3, #1
 80020d6:	4a9d      	ldr	r2, [pc, #628]	; (800234c <HAL_ADC_MspInit+0x2cc>)
 80020d8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80020da:	4b9c      	ldr	r3, [pc, #624]	; (800234c <HAL_ADC_MspInit+0x2cc>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d10b      	bne.n	80020fa <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80020e2:	4b9b      	ldr	r3, [pc, #620]	; (8002350 <HAL_ADC_MspInit+0x2d0>)
 80020e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020e6:	4a9a      	ldr	r2, [pc, #616]	; (8002350 <HAL_ADC_MspInit+0x2d0>)
 80020e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020ee:	4b98      	ldr	r3, [pc, #608]	; (8002350 <HAL_ADC_MspInit+0x2d0>)
 80020f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020fa:	4b95      	ldr	r3, [pc, #596]	; (8002350 <HAL_ADC_MspInit+0x2d0>)
 80020fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fe:	4a94      	ldr	r2, [pc, #592]	; (8002350 <HAL_ADC_MspInit+0x2d0>)
 8002100:	f043 0301 	orr.w	r3, r3, #1
 8002104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002106:	4b92      	ldr	r3, [pc, #584]	; (8002350 <HAL_ADC_MspInit+0x2d0>)
 8002108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	623b      	str	r3, [r7, #32]
 8002110:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002112:	2301      	movs	r3, #1
 8002114:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002116:	2303      	movs	r3, #3
 8002118:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002122:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002126:	4619      	mov	r1, r3
 8002128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800212c:	f003 f8b2 	bl	8005294 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002130:	4b88      	ldr	r3, [pc, #544]	; (8002354 <HAL_ADC_MspInit+0x2d4>)
 8002132:	4a89      	ldr	r2, [pc, #548]	; (8002358 <HAL_ADC_MspInit+0x2d8>)
 8002134:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002136:	4b87      	ldr	r3, [pc, #540]	; (8002354 <HAL_ADC_MspInit+0x2d4>)
 8002138:	2205      	movs	r2, #5
 800213a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800213c:	4b85      	ldr	r3, [pc, #532]	; (8002354 <HAL_ADC_MspInit+0x2d4>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002142:	4b84      	ldr	r3, [pc, #528]	; (8002354 <HAL_ADC_MspInit+0x2d4>)
 8002144:	2200      	movs	r2, #0
 8002146:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002148:	4b82      	ldr	r3, [pc, #520]	; (8002354 <HAL_ADC_MspInit+0x2d4>)
 800214a:	2280      	movs	r2, #128	; 0x80
 800214c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800214e:	4b81      	ldr	r3, [pc, #516]	; (8002354 <HAL_ADC_MspInit+0x2d4>)
 8002150:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002154:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002156:	4b7f      	ldr	r3, [pc, #508]	; (8002354 <HAL_ADC_MspInit+0x2d4>)
 8002158:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800215c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800215e:	4b7d      	ldr	r3, [pc, #500]	; (8002354 <HAL_ADC_MspInit+0x2d4>)
 8002160:	2220      	movs	r2, #32
 8002162:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002164:	4b7b      	ldr	r3, [pc, #492]	; (8002354 <HAL_ADC_MspInit+0x2d4>)
 8002166:	2200      	movs	r2, #0
 8002168:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800216a:	487a      	ldr	r0, [pc, #488]	; (8002354 <HAL_ADC_MspInit+0x2d4>)
 800216c:	f002 fdc6 	bl	8004cfc <HAL_DMA_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8002176:	f7ff ff51 	bl	800201c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a75      	ldr	r2, [pc, #468]	; (8002354 <HAL_ADC_MspInit+0x2d4>)
 800217e:	655a      	str	r2, [r3, #84]	; 0x54
 8002180:	4a74      	ldr	r2, [pc, #464]	; (8002354 <HAL_ADC_MspInit+0x2d4>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN ADC4_MspInit 1 */

  /* USER CODE END ADC4_MspInit 1 */
  }

}
 8002186:	e169      	b.n	800245c <HAL_ADC_MspInit+0x3dc>
  else if(hadc->Instance==ADC2)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a73      	ldr	r2, [pc, #460]	; (800235c <HAL_ADC_MspInit+0x2dc>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d16b      	bne.n	800226a <HAL_ADC_MspInit+0x1ea>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002192:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002196:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8002198:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800219c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800219e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021a2:	4618      	mov	r0, r3
 80021a4:	f006 fb40 	bl	8008828 <HAL_RCCEx_PeriphCLKConfig>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_ADC_MspInit+0x132>
      Error_Handler();
 80021ae:	f7ff ff35 	bl	800201c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80021b2:	4b66      	ldr	r3, [pc, #408]	; (800234c <HAL_ADC_MspInit+0x2cc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	3301      	adds	r3, #1
 80021b8:	4a64      	ldr	r2, [pc, #400]	; (800234c <HAL_ADC_MspInit+0x2cc>)
 80021ba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80021bc:	4b63      	ldr	r3, [pc, #396]	; (800234c <HAL_ADC_MspInit+0x2cc>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d10b      	bne.n	80021dc <HAL_ADC_MspInit+0x15c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80021c4:	4b62      	ldr	r3, [pc, #392]	; (8002350 <HAL_ADC_MspInit+0x2d0>)
 80021c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c8:	4a61      	ldr	r2, [pc, #388]	; (8002350 <HAL_ADC_MspInit+0x2d0>)
 80021ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021d0:	4b5f      	ldr	r3, [pc, #380]	; (8002350 <HAL_ADC_MspInit+0x2d0>)
 80021d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021d8:	61fb      	str	r3, [r7, #28]
 80021da:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021dc:	4b5c      	ldr	r3, [pc, #368]	; (8002350 <HAL_ADC_MspInit+0x2d0>)
 80021de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021e0:	4a5b      	ldr	r2, [pc, #364]	; (8002350 <HAL_ADC_MspInit+0x2d0>)
 80021e2:	f043 0301 	orr.w	r3, r3, #1
 80021e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021e8:	4b59      	ldr	r3, [pc, #356]	; (8002350 <HAL_ADC_MspInit+0x2d0>)
 80021ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ec:	f003 0301 	and.w	r3, r3, #1
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021f4:	2340      	movs	r3, #64	; 0x40
 80021f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021f8:	2303      	movs	r3, #3
 80021fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002204:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002208:	4619      	mov	r1, r3
 800220a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800220e:	f003 f841 	bl	8005294 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8002212:	4b53      	ldr	r3, [pc, #332]	; (8002360 <HAL_ADC_MspInit+0x2e0>)
 8002214:	4a53      	ldr	r2, [pc, #332]	; (8002364 <HAL_ADC_MspInit+0x2e4>)
 8002216:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8002218:	4b51      	ldr	r3, [pc, #324]	; (8002360 <HAL_ADC_MspInit+0x2e0>)
 800221a:	2224      	movs	r2, #36	; 0x24
 800221c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800221e:	4b50      	ldr	r3, [pc, #320]	; (8002360 <HAL_ADC_MspInit+0x2e0>)
 8002220:	2200      	movs	r2, #0
 8002222:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002224:	4b4e      	ldr	r3, [pc, #312]	; (8002360 <HAL_ADC_MspInit+0x2e0>)
 8002226:	2200      	movs	r2, #0
 8002228:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 800222a:	4b4d      	ldr	r3, [pc, #308]	; (8002360 <HAL_ADC_MspInit+0x2e0>)
 800222c:	2280      	movs	r2, #128	; 0x80
 800222e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002230:	4b4b      	ldr	r3, [pc, #300]	; (8002360 <HAL_ADC_MspInit+0x2e0>)
 8002232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002236:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002238:	4b49      	ldr	r3, [pc, #292]	; (8002360 <HAL_ADC_MspInit+0x2e0>)
 800223a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800223e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8002240:	4b47      	ldr	r3, [pc, #284]	; (8002360 <HAL_ADC_MspInit+0x2e0>)
 8002242:	2220      	movs	r2, #32
 8002244:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8002246:	4b46      	ldr	r3, [pc, #280]	; (8002360 <HAL_ADC_MspInit+0x2e0>)
 8002248:	2200      	movs	r2, #0
 800224a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800224c:	4844      	ldr	r0, [pc, #272]	; (8002360 <HAL_ADC_MspInit+0x2e0>)
 800224e:	f002 fd55 	bl	8004cfc <HAL_DMA_Init>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <HAL_ADC_MspInit+0x1dc>
      Error_Handler();
 8002258:	f7ff fee0 	bl	800201c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	4a40      	ldr	r2, [pc, #256]	; (8002360 <HAL_ADC_MspInit+0x2e0>)
 8002260:	655a      	str	r2, [r3, #84]	; 0x54
 8002262:	4a3f      	ldr	r2, [pc, #252]	; (8002360 <HAL_ADC_MspInit+0x2e0>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6293      	str	r3, [r2, #40]	; 0x28
}
 8002268:	e0f8      	b.n	800245c <HAL_ADC_MspInit+0x3dc>
  else if(hadc->Instance==ADC3)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a3e      	ldr	r2, [pc, #248]	; (8002368 <HAL_ADC_MspInit+0x2e8>)
 8002270:	4293      	cmp	r3, r2
 8002272:	f040 8083 	bne.w	800237c <HAL_ADC_MspInit+0x2fc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8002276:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 800227c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002280:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002286:	4618      	mov	r0, r3
 8002288:	f006 face 	bl	8008828 <HAL_RCCEx_PeriphCLKConfig>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_ADC_MspInit+0x216>
      Error_Handler();
 8002292:	f7ff fec3 	bl	800201c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 8002296:	4b35      	ldr	r3, [pc, #212]	; (800236c <HAL_ADC_MspInit+0x2ec>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	3301      	adds	r3, #1
 800229c:	4a33      	ldr	r2, [pc, #204]	; (800236c <HAL_ADC_MspInit+0x2ec>)
 800229e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80022a0:	4b32      	ldr	r3, [pc, #200]	; (800236c <HAL_ADC_MspInit+0x2ec>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d10b      	bne.n	80022c0 <HAL_ADC_MspInit+0x240>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80022a8:	4b29      	ldr	r3, [pc, #164]	; (8002350 <HAL_ADC_MspInit+0x2d0>)
 80022aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ac:	4a28      	ldr	r2, [pc, #160]	; (8002350 <HAL_ADC_MspInit+0x2d0>)
 80022ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022b4:	4b26      	ldr	r3, [pc, #152]	; (8002350 <HAL_ADC_MspInit+0x2d0>)
 80022b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022bc:	617b      	str	r3, [r7, #20]
 80022be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c0:	4b23      	ldr	r3, [pc, #140]	; (8002350 <HAL_ADC_MspInit+0x2d0>)
 80022c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c4:	4a22      	ldr	r2, [pc, #136]	; (8002350 <HAL_ADC_MspInit+0x2d0>)
 80022c6:	f043 0302 	orr.w	r3, r3, #2
 80022ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022cc:	4b20      	ldr	r3, [pc, #128]	; (8002350 <HAL_ADC_MspInit+0x2d0>)
 80022ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022d0:	f003 0302 	and.w	r3, r3, #2
 80022d4:	613b      	str	r3, [r7, #16]
 80022d6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80022d8:	2302      	movs	r3, #2
 80022da:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80022dc:	2303      	movs	r3, #3
 80022de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80022ec:	4619      	mov	r1, r3
 80022ee:	4820      	ldr	r0, [pc, #128]	; (8002370 <HAL_ADC_MspInit+0x2f0>)
 80022f0:	f002 ffd0 	bl	8005294 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA1_Channel3;
 80022f4:	4b1f      	ldr	r3, [pc, #124]	; (8002374 <HAL_ADC_MspInit+0x2f4>)
 80022f6:	4a20      	ldr	r2, [pc, #128]	; (8002378 <HAL_ADC_MspInit+0x2f8>)
 80022f8:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 80022fa:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <HAL_ADC_MspInit+0x2f4>)
 80022fc:	2225      	movs	r2, #37	; 0x25
 80022fe:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002300:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <HAL_ADC_MspInit+0x2f4>)
 8002302:	2200      	movs	r2, #0
 8002304:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002306:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_ADC_MspInit+0x2f4>)
 8002308:	2200      	movs	r2, #0
 800230a:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_ADC_MspInit+0x2f4>)
 800230e:	2280      	movs	r2, #128	; 0x80
 8002310:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002312:	4b18      	ldr	r3, [pc, #96]	; (8002374 <HAL_ADC_MspInit+0x2f4>)
 8002314:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002318:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800231a:	4b16      	ldr	r3, [pc, #88]	; (8002374 <HAL_ADC_MspInit+0x2f4>)
 800231c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002320:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002322:	4b14      	ldr	r3, [pc, #80]	; (8002374 <HAL_ADC_MspInit+0x2f4>)
 8002324:	2220      	movs	r2, #32
 8002326:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002328:	4b12      	ldr	r3, [pc, #72]	; (8002374 <HAL_ADC_MspInit+0x2f4>)
 800232a:	2200      	movs	r2, #0
 800232c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 800232e:	4811      	ldr	r0, [pc, #68]	; (8002374 <HAL_ADC_MspInit+0x2f4>)
 8002330:	f002 fce4 	bl	8004cfc <HAL_DMA_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <HAL_ADC_MspInit+0x2be>
      Error_Handler();
 800233a:	f7ff fe6f 	bl	800201c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a0c      	ldr	r2, [pc, #48]	; (8002374 <HAL_ADC_MspInit+0x2f4>)
 8002342:	655a      	str	r2, [r3, #84]	; 0x54
 8002344:	4a0b      	ldr	r2, [pc, #44]	; (8002374 <HAL_ADC_MspInit+0x2f4>)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6293      	str	r3, [r2, #40]	; 0x28
}
 800234a:	e087      	b.n	800245c <HAL_ADC_MspInit+0x3dc>
 800234c:	200027dc 	.word	0x200027dc
 8002350:	40021000 	.word	0x40021000
 8002354:	2000053c 	.word	0x2000053c
 8002358:	40020008 	.word	0x40020008
 800235c:	50000100 	.word	0x50000100
 8002360:	2000059c 	.word	0x2000059c
 8002364:	4002001c 	.word	0x4002001c
 8002368:	50000400 	.word	0x50000400
 800236c:	200027e0 	.word	0x200027e0
 8002370:	48000400 	.word	0x48000400
 8002374:	200005fc 	.word	0x200005fc
 8002378:	40020030 	.word	0x40020030
  else if(hadc->Instance==ADC4)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a38      	ldr	r2, [pc, #224]	; (8002464 <HAL_ADC_MspInit+0x3e4>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d16a      	bne.n	800245c <HAL_ADC_MspInit+0x3dc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC345;
 8002386:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800238a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc345ClockSelection = RCC_ADC345CLKSOURCE_PLL;
 800238c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002390:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002392:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002396:	4618      	mov	r0, r3
 8002398:	f006 fa46 	bl	8008828 <HAL_RCCEx_PeriphCLKConfig>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d001      	beq.n	80023a6 <HAL_ADC_MspInit+0x326>
      Error_Handler();
 80023a2:	f7ff fe3b 	bl	800201c <Error_Handler>
    HAL_RCC_ADC345_CLK_ENABLED++;
 80023a6:	4b30      	ldr	r3, [pc, #192]	; (8002468 <HAL_ADC_MspInit+0x3e8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	3301      	adds	r3, #1
 80023ac:	4a2e      	ldr	r2, [pc, #184]	; (8002468 <HAL_ADC_MspInit+0x3e8>)
 80023ae:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC345_CLK_ENABLED==1){
 80023b0:	4b2d      	ldr	r3, [pc, #180]	; (8002468 <HAL_ADC_MspInit+0x3e8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d10b      	bne.n	80023d0 <HAL_ADC_MspInit+0x350>
      __HAL_RCC_ADC345_CLK_ENABLE();
 80023b8:	4b2c      	ldr	r3, [pc, #176]	; (800246c <HAL_ADC_MspInit+0x3ec>)
 80023ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023bc:	4a2b      	ldr	r2, [pc, #172]	; (800246c <HAL_ADC_MspInit+0x3ec>)
 80023be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023c4:	4b29      	ldr	r3, [pc, #164]	; (800246c <HAL_ADC_MspInit+0x3ec>)
 80023c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023d0:	4b26      	ldr	r3, [pc, #152]	; (800246c <HAL_ADC_MspInit+0x3ec>)
 80023d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023d4:	4a25      	ldr	r2, [pc, #148]	; (800246c <HAL_ADC_MspInit+0x3ec>)
 80023d6:	f043 0302 	orr.w	r3, r3, #2
 80023da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023dc:	4b23      	ldr	r3, [pc, #140]	; (800246c <HAL_ADC_MspInit+0x3ec>)
 80023de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023ec:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ee:	2303      	movs	r3, #3
 80023f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fa:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80023fe:	4619      	mov	r1, r3
 8002400:	481b      	ldr	r0, [pc, #108]	; (8002470 <HAL_ADC_MspInit+0x3f0>)
 8002402:	f002 ff47 	bl	8005294 <HAL_GPIO_Init>
    hdma_adc4.Instance = DMA1_Channel4;
 8002406:	4b1b      	ldr	r3, [pc, #108]	; (8002474 <HAL_ADC_MspInit+0x3f4>)
 8002408:	4a1b      	ldr	r2, [pc, #108]	; (8002478 <HAL_ADC_MspInit+0x3f8>)
 800240a:	601a      	str	r2, [r3, #0]
    hdma_adc4.Init.Request = DMA_REQUEST_ADC4;
 800240c:	4b19      	ldr	r3, [pc, #100]	; (8002474 <HAL_ADC_MspInit+0x3f4>)
 800240e:	2226      	movs	r2, #38	; 0x26
 8002410:	605a      	str	r2, [r3, #4]
    hdma_adc4.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002412:	4b18      	ldr	r3, [pc, #96]	; (8002474 <HAL_ADC_MspInit+0x3f4>)
 8002414:	2200      	movs	r2, #0
 8002416:	609a      	str	r2, [r3, #8]
    hdma_adc4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002418:	4b16      	ldr	r3, [pc, #88]	; (8002474 <HAL_ADC_MspInit+0x3f4>)
 800241a:	2200      	movs	r2, #0
 800241c:	60da      	str	r2, [r3, #12]
    hdma_adc4.Init.MemInc = DMA_MINC_ENABLE;
 800241e:	4b15      	ldr	r3, [pc, #84]	; (8002474 <HAL_ADC_MspInit+0x3f4>)
 8002420:	2280      	movs	r2, #128	; 0x80
 8002422:	611a      	str	r2, [r3, #16]
    hdma_adc4.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002424:	4b13      	ldr	r3, [pc, #76]	; (8002474 <HAL_ADC_MspInit+0x3f4>)
 8002426:	f44f 7280 	mov.w	r2, #256	; 0x100
 800242a:	615a      	str	r2, [r3, #20]
    hdma_adc4.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800242c:	4b11      	ldr	r3, [pc, #68]	; (8002474 <HAL_ADC_MspInit+0x3f4>)
 800242e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002432:	619a      	str	r2, [r3, #24]
    hdma_adc4.Init.Mode = DMA_CIRCULAR;
 8002434:	4b0f      	ldr	r3, [pc, #60]	; (8002474 <HAL_ADC_MspInit+0x3f4>)
 8002436:	2220      	movs	r2, #32
 8002438:	61da      	str	r2, [r3, #28]
    hdma_adc4.Init.Priority = DMA_PRIORITY_LOW;
 800243a:	4b0e      	ldr	r3, [pc, #56]	; (8002474 <HAL_ADC_MspInit+0x3f4>)
 800243c:	2200      	movs	r2, #0
 800243e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc4) != HAL_OK)
 8002440:	480c      	ldr	r0, [pc, #48]	; (8002474 <HAL_ADC_MspInit+0x3f4>)
 8002442:	f002 fc5b 	bl	8004cfc <HAL_DMA_Init>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d001      	beq.n	8002450 <HAL_ADC_MspInit+0x3d0>
      Error_Handler();
 800244c:	f7ff fde6 	bl	800201c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc4);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a08      	ldr	r2, [pc, #32]	; (8002474 <HAL_ADC_MspInit+0x3f4>)
 8002454:	655a      	str	r2, [r3, #84]	; 0x54
 8002456:	4a07      	ldr	r2, [pc, #28]	; (8002474 <HAL_ADC_MspInit+0x3f4>)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6293      	str	r3, [r2, #40]	; 0x28
}
 800245c:	bf00      	nop
 800245e:	3790      	adds	r7, #144	; 0x90
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	50000500 	.word	0x50000500
 8002468:	200027e0 	.word	0x200027e0
 800246c:	40021000 	.word	0x40021000
 8002470:	48000400 	.word	0x48000400
 8002474:	2000065c 	.word	0x2000065c
 8002478:	40020044 	.word	0x40020044

0800247c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	; 0x28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a15      	ldr	r2, [pc, #84]	; (80024f0 <HAL_DAC_MspInit+0x74>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d124      	bne.n	80024e8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800249e:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <HAL_DAC_MspInit+0x78>)
 80024a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024a2:	4a14      	ldr	r2, [pc, #80]	; (80024f4 <HAL_DAC_MspInit+0x78>)
 80024a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024aa:	4b12      	ldr	r3, [pc, #72]	; (80024f4 <HAL_DAC_MspInit+0x78>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024b6:	4b0f      	ldr	r3, [pc, #60]	; (80024f4 <HAL_DAC_MspInit+0x78>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	4a0e      	ldr	r2, [pc, #56]	; (80024f4 <HAL_DAC_MspInit+0x78>)
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024c2:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <HAL_DAC_MspInit+0x78>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	60fb      	str	r3, [r7, #12]
 80024cc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80024ce:	2310      	movs	r3, #16
 80024d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80024d2:	2303      	movs	r3, #3
 80024d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	4619      	mov	r1, r3
 80024e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e4:	f002 fed6 	bl	8005294 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80024e8:	bf00      	nop
 80024ea:	3728      	adds	r7, #40	; 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	50000800 	.word	0x50000800
 80024f4:	40021000 	.word	0x40021000

080024f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b09e      	sub	sp, #120	; 0x78
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002500:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 8002508:	605a      	str	r2, [r3, #4]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	60da      	str	r2, [r3, #12]
 800250e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002510:	f107 0310 	add.w	r3, r7, #16
 8002514:	2254      	movs	r2, #84	; 0x54
 8002516:	2100      	movs	r1, #0
 8002518:	4618      	mov	r0, r3
 800251a:	f00c fc9e 	bl	800ee5a <memset>
  if(hi2c->Instance==I2C3)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a1f      	ldr	r2, [pc, #124]	; (80025a0 <HAL_I2C_MspInit+0xa8>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d137      	bne.n	8002598 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002528:	f44f 7380 	mov.w	r3, #256	; 0x100
 800252c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800252e:	2300      	movs	r3, #0
 8002530:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002532:	f107 0310 	add.w	r3, r7, #16
 8002536:	4618      	mov	r0, r3
 8002538:	f006 f976 	bl	8008828 <HAL_RCCEx_PeriphCLKConfig>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d001      	beq.n	8002546 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8002542:	f7ff fd6b 	bl	800201c <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002546:	4b17      	ldr	r3, [pc, #92]	; (80025a4 <HAL_I2C_MspInit+0xac>)
 8002548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800254a:	4a16      	ldr	r2, [pc, #88]	; (80025a4 <HAL_I2C_MspInit+0xac>)
 800254c:	f043 0304 	orr.w	r3, r3, #4
 8002550:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002552:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <HAL_I2C_MspInit+0xac>)
 8002554:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002556:	f003 0304 	and.w	r3, r3, #4
 800255a:	60fb      	str	r3, [r7, #12]
 800255c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC8     ------> I2C3_SCL
    PC9     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = TEMP_SCL_Pin|TEMP_SDA_Pin;
 800255e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002562:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002564:	2312      	movs	r3, #18
 8002566:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002568:	2300      	movs	r3, #0
 800256a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800256c:	2300      	movs	r3, #0
 800256e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002570:	2308      	movs	r3, #8
 8002572:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002574:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002578:	4619      	mov	r1, r3
 800257a:	480b      	ldr	r0, [pc, #44]	; (80025a8 <HAL_I2C_MspInit+0xb0>)
 800257c:	f002 fe8a 	bl	8005294 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002580:	4b08      	ldr	r3, [pc, #32]	; (80025a4 <HAL_I2C_MspInit+0xac>)
 8002582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002584:	4a07      	ldr	r2, [pc, #28]	; (80025a4 <HAL_I2C_MspInit+0xac>)
 8002586:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800258a:	6593      	str	r3, [r2, #88]	; 0x58
 800258c:	4b05      	ldr	r3, [pc, #20]	; (80025a4 <HAL_I2C_MspInit+0xac>)
 800258e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002590:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002598:	bf00      	nop
 800259a:	3778      	adds	r7, #120	; 0x78
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40007800 	.word	0x40007800
 80025a4:	40021000 	.word	0x40021000
 80025a8:	48000800 	.word	0x48000800

080025ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025bc:	d113      	bne.n	80025e6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025be:	4b0c      	ldr	r3, [pc, #48]	; (80025f0 <HAL_TIM_Base_MspInit+0x44>)
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	4a0b      	ldr	r2, [pc, #44]	; (80025f0 <HAL_TIM_Base_MspInit+0x44>)
 80025c4:	f043 0301 	orr.w	r3, r3, #1
 80025c8:	6593      	str	r3, [r2, #88]	; 0x58
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_TIM_Base_MspInit+0x44>)
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ce:	f003 0301 	and.w	r3, r3, #1
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025d6:	2200      	movs	r2, #0
 80025d8:	2100      	movs	r1, #0
 80025da:	201c      	movs	r0, #28
 80025dc:	f002 f8e5 	bl	80047aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025e0:	201c      	movs	r0, #28
 80025e2:	f002 f8fc 	bl	80047de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40021000 	.word	0x40021000

080025f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025f8:	e7fe      	b.n	80025f8 <NMI_Handler+0x4>

080025fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025fe:	e7fe      	b.n	80025fe <HardFault_Handler+0x4>

08002600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002604:	e7fe      	b.n	8002604 <MemManage_Handler+0x4>

08002606 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800260a:	e7fe      	b.n	800260a <BusFault_Handler+0x4>

0800260c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002610:	e7fe      	b.n	8002610 <UsageFault_Handler+0x4>

08002612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002616:	bf00      	nop
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr

0800262e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002640:	f000 f9c4 	bl	80029cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002644:	bf00      	nop
 8002646:	bd80      	pop	{r7, pc}

08002648 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800264c:	4802      	ldr	r0, [pc, #8]	; (8002658 <DMA1_Channel1_IRQHandler+0x10>)
 800264e:	f002 fcd1 	bl	8004ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	2000053c 	.word	0x2000053c

0800265c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002660:	4802      	ldr	r0, [pc, #8]	; (800266c <DMA1_Channel2_IRQHandler+0x10>)
 8002662:	f002 fcc7 	bl	8004ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002666:	bf00      	nop
 8002668:	bd80      	pop	{r7, pc}
 800266a:	bf00      	nop
 800266c:	2000059c 	.word	0x2000059c

08002670 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002674:	4802      	ldr	r0, [pc, #8]	; (8002680 <DMA1_Channel3_IRQHandler+0x10>)
 8002676:	f002 fcbd 	bl	8004ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800267a:	bf00      	nop
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	200005fc 	.word	0x200005fc

08002684 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc4);
 8002688:	4802      	ldr	r0, [pc, #8]	; (8002694 <DMA1_Channel4_IRQHandler+0x10>)
 800268a:	f002 fcb3 	bl	8004ff4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800268e:	bf00      	nop
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	2000065c 	.word	0x2000065c

08002698 <USB_HP_IRQHandler>:

/**
  * @brief This function handles USB high priority interrupt remap.
  */
void USB_HP_IRQHandler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HP_IRQn 0 */

  /* USER CODE END USB_HP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800269c:	4802      	ldr	r0, [pc, #8]	; (80026a8 <USB_HP_IRQHandler+0x10>)
 800269e:	f003 fec8 	bl	8006432 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_HP_IRQn 1 */

  /* USER CODE END USB_HP_IRQn 1 */
}
 80026a2:	bf00      	nop
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20003cc0 	.word	0x20003cc0

080026ac <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80026b0:	4802      	ldr	r0, [pc, #8]	; (80026bc <USB_LP_IRQHandler+0x10>)
 80026b2:	f003 febe 	bl	8006432 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80026b6:	bf00      	nop
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	20003cc0 	.word	0x20003cc0

080026c0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TRIG_SHORT_Pin);
 80026c4:	2020      	movs	r0, #32
 80026c6:	f002 ff7f 	bl	80055c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TRIG_EXT_2_Pin);
 80026ca:	2040      	movs	r0, #64	; 0x40
 80026cc:	f002 ff7c 	bl	80055c8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TRIG_EXT_1_Pin);
 80026d0:	2080      	movs	r0, #128	; 0x80
 80026d2:	f002 ff79 	bl	80055c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  measurement_activated = 1;
 80026d6:	4b02      	ldr	r3, [pc, #8]	; (80026e0 <EXTI9_5_IRQHandler+0x20>)
 80026d8:	2201      	movs	r2, #1
 80026da:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80026dc:	bf00      	nop
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	200027d8 	.word	0x200027d8

080026e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026e8:	480a      	ldr	r0, [pc, #40]	; (8002714 <TIM2_IRQHandler+0x30>)
 80026ea:	f006 fbea 	bl	8008ec2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  conv_count++;
 80026ee:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <TIM2_IRQHandler+0x34>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	3301      	adds	r3, #1
 80026f4:	4a08      	ldr	r2, [pc, #32]	; (8002718 <TIM2_IRQHandler+0x34>)
 80026f6:	6013      	str	r3, [r2, #0]
  if(conv_count > target_conv_count + 10){
 80026f8:	4b08      	ldr	r3, [pc, #32]	; (800271c <TIM2_IRQHandler+0x38>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f103 020a 	add.w	r2, r3, #10
 8002700:	4b05      	ldr	r3, [pc, #20]	; (8002718 <TIM2_IRQHandler+0x34>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	da02      	bge.n	800270e <TIM2_IRQHandler+0x2a>
	  conv_count_reached = 1;
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <TIM2_IRQHandler+0x3c>)
 800270a:	2201      	movs	r2, #1
 800270c:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 800270e:	bf00      	nop
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	20000724 	.word	0x20000724
 8002718:	200027c4 	.word	0x200027c4
 800271c:	200027c0 	.word	0x200027c0
 8002720:	200027d4 	.word	0x200027d4

08002724 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return 1;
 8002728:	2301      	movs	r3, #1
}
 800272a:	4618      	mov	r0, r3
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr

08002734 <_kill>:

int _kill(int pid, int sig)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800273e:	f00c fbf1 	bl	800ef24 <__errno>
 8002742:	4603      	mov	r3, r0
 8002744:	2216      	movs	r2, #22
 8002746:	601a      	str	r2, [r3, #0]
  return -1;
 8002748:	f04f 33ff 	mov.w	r3, #4294967295
}
 800274c:	4618      	mov	r0, r3
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <_exit>:

void _exit (int status)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800275c:	f04f 31ff 	mov.w	r1, #4294967295
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7ff ffe7 	bl	8002734 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002766:	e7fe      	b.n	8002766 <_exit+0x12>

08002768 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b086      	sub	sp, #24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
 8002778:	e00a      	b.n	8002790 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800277a:	f3af 8000 	nop.w
 800277e:	4601      	mov	r1, r0
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	60ba      	str	r2, [r7, #8]
 8002786:	b2ca      	uxtb	r2, r1
 8002788:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	3301      	adds	r3, #1
 800278e:	617b      	str	r3, [r7, #20]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	429a      	cmp	r2, r3
 8002796:	dbf0      	blt.n	800277a <_read+0x12>
  }

  return len;
 8002798:	687b      	ldr	r3, [r7, #4]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b086      	sub	sp, #24
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	e009      	b.n	80027c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	1c5a      	adds	r2, r3, #1
 80027b8:	60ba      	str	r2, [r7, #8]
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3301      	adds	r3, #1
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	dbf1      	blt.n	80027b4 <_write+0x12>
  }
  return len;
 80027d0:	687b      	ldr	r3, [r7, #4]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <_close>:

int _close(int file)
{
 80027da:	b480      	push	{r7}
 80027dc:	b083      	sub	sp, #12
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	370c      	adds	r7, #12
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027f2:	b480      	push	{r7}
 80027f4:	b083      	sub	sp, #12
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
 80027fa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002802:	605a      	str	r2, [r3, #4]
  return 0;
 8002804:	2300      	movs	r3, #0
}
 8002806:	4618      	mov	r0, r3
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <_isatty>:

int _isatty(int file)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800281a:	2301      	movs	r3, #1
}
 800281c:	4618      	mov	r0, r3
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	60f8      	str	r0, [r7, #12]
 8002830:	60b9      	str	r1, [r7, #8]
 8002832:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002834:	2300      	movs	r3, #0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3714      	adds	r7, #20
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
	...

08002844 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800284c:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <_sbrk+0x5c>)
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <_sbrk+0x60>)
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002854:	697b      	ldr	r3, [r7, #20]
 8002856:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002858:	4b13      	ldr	r3, [pc, #76]	; (80028a8 <_sbrk+0x64>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d102      	bne.n	8002866 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002860:	4b11      	ldr	r3, [pc, #68]	; (80028a8 <_sbrk+0x64>)
 8002862:	4a12      	ldr	r2, [pc, #72]	; (80028ac <_sbrk+0x68>)
 8002864:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <_sbrk+0x64>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	693a      	ldr	r2, [r7, #16]
 8002870:	429a      	cmp	r2, r3
 8002872:	d207      	bcs.n	8002884 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002874:	f00c fb56 	bl	800ef24 <__errno>
 8002878:	4603      	mov	r3, r0
 800287a:	220c      	movs	r2, #12
 800287c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800287e:	f04f 33ff 	mov.w	r3, #4294967295
 8002882:	e009      	b.n	8002898 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002884:	4b08      	ldr	r3, [pc, #32]	; (80028a8 <_sbrk+0x64>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800288a:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <_sbrk+0x64>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	4a05      	ldr	r2, [pc, #20]	; (80028a8 <_sbrk+0x64>)
 8002894:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002896:	68fb      	ldr	r3, [r7, #12]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3718      	adds	r7, #24
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	20020000 	.word	0x20020000
 80028a4:	00001000 	.word	0x00001000
 80028a8:	200027e4 	.word	0x200027e4
 80028ac:	20004308 	.word	0x20004308

080028b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80028b4:	4b06      	ldr	r3, [pc, #24]	; (80028d0 <SystemInit+0x20>)
 80028b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ba:	4a05      	ldr	r2, [pc, #20]	; (80028d0 <SystemInit+0x20>)
 80028bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028c4:	bf00      	nop
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	e000ed00 	.word	0xe000ed00

080028d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028d4:	480d      	ldr	r0, [pc, #52]	; (800290c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028d6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028d8:	f7ff ffea 	bl	80028b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028dc:	480c      	ldr	r0, [pc, #48]	; (8002910 <LoopForever+0x6>)
  ldr r1, =_edata
 80028de:	490d      	ldr	r1, [pc, #52]	; (8002914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028e0:	4a0d      	ldr	r2, [pc, #52]	; (8002918 <LoopForever+0xe>)
  movs r3, #0
 80028e2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80028e4:	e002      	b.n	80028ec <LoopCopyDataInit>

080028e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ea:	3304      	adds	r3, #4

080028ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f0:	d3f9      	bcc.n	80028e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028f2:	4a0a      	ldr	r2, [pc, #40]	; (800291c <LoopForever+0x12>)
  ldr r4, =_ebss
 80028f4:	4c0a      	ldr	r4, [pc, #40]	; (8002920 <LoopForever+0x16>)
  movs r3, #0
 80028f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f8:	e001      	b.n	80028fe <LoopFillZerobss>

080028fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028fc:	3204      	adds	r2, #4

080028fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002900:	d3fb      	bcc.n	80028fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002902:	f00c fb15 	bl	800ef30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002906:	f7fe f9f7 	bl	8000cf8 <main>

0800290a <LoopForever>:

LoopForever:
    b LoopForever
 800290a:	e7fe      	b.n	800290a <LoopForever>
  ldr   r0, =_estack
 800290c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002914:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 8002918:	080124d8 	.word	0x080124d8
  ldr r2, =_sbss
 800291c:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 8002920:	20004308 	.word	0x20004308

08002924 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002924:	e7fe      	b.n	8002924 <ADC1_2_IRQHandler>

08002926 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b082      	sub	sp, #8
 800292a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800292c:	2300      	movs	r3, #0
 800292e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002930:	2003      	movs	r0, #3
 8002932:	f001 ff2f 	bl	8004794 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002936:	2000      	movs	r0, #0
 8002938:	f000 f80e 	bl	8002958 <HAL_InitTick>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	71fb      	strb	r3, [r7, #7]
 8002946:	e001      	b.n	800294c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002948:	f7ff fb6e 	bl	8002028 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800294c:	79fb      	ldrb	r3, [r7, #7]

}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
	...

08002958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002960:	2300      	movs	r3, #0
 8002962:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002964:	4b16      	ldr	r3, [pc, #88]	; (80029c0 <HAL_InitTick+0x68>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d022      	beq.n	80029b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800296c:	4b15      	ldr	r3, [pc, #84]	; (80029c4 <HAL_InitTick+0x6c>)
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	4b13      	ldr	r3, [pc, #76]	; (80029c0 <HAL_InitTick+0x68>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002978:	fbb1 f3f3 	udiv	r3, r1, r3
 800297c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002980:	4618      	mov	r0, r3
 8002982:	f001 ff3a 	bl	80047fa <HAL_SYSTICK_Config>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10f      	bne.n	80029ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b0f      	cmp	r3, #15
 8002990:	d809      	bhi.n	80029a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002992:	2200      	movs	r2, #0
 8002994:	6879      	ldr	r1, [r7, #4]
 8002996:	f04f 30ff 	mov.w	r0, #4294967295
 800299a:	f001 ff06 	bl	80047aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800299e:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <HAL_InitTick+0x70>)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	e007      	b.n	80029b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	73fb      	strb	r3, [r7, #15]
 80029aa:	e004      	b.n	80029b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
 80029b0:	e001      	b.n	80029b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000018 	.word	0x20000018
 80029c4:	20000010 	.word	0x20000010
 80029c8:	20000014 	.word	0x20000014

080029cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029d0:	4b05      	ldr	r3, [pc, #20]	; (80029e8 <HAL_IncTick+0x1c>)
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	4b05      	ldr	r3, [pc, #20]	; (80029ec <HAL_IncTick+0x20>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4413      	add	r3, r2
 80029da:	4a03      	ldr	r2, [pc, #12]	; (80029e8 <HAL_IncTick+0x1c>)
 80029dc:	6013      	str	r3, [r2, #0]
}
 80029de:	bf00      	nop
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	200027e8 	.word	0x200027e8
 80029ec:	20000018 	.word	0x20000018

080029f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return uwTick;
 80029f4:	4b03      	ldr	r3, [pc, #12]	; (8002a04 <HAL_GetTick+0x14>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	200027e8 	.word	0x200027e8

08002a08 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE2: VREFBUF_OUT around 2.9 V.
  *                                                This requires VDDA equal to or higher than 3.15 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8002a10:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a18:	4904      	ldr	r1, [pc, #16]	; (8002a2c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	600b      	str	r3, [r1, #0]
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	40010030 	.word	0x40010030

08002a30 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002a38:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f023 0202 	bic.w	r2, r3, #2
 8002a40:	4904      	ldr	r1, [pc, #16]	; (8002a54 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	600b      	str	r3, [r1, #0]
}
 8002a48:	bf00      	nop
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr
 8002a54:	40010030 	.word	0x40010030

08002a58 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002a5e:	4b0f      	ldr	r3, [pc, #60]	; (8002a9c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a0e      	ldr	r2, [pc, #56]	; (8002a9c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002a6a:	f7ff ffc1 	bl	80029f0 <HAL_GetTick>
 8002a6e:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002a70:	e008      	b.n	8002a84 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8002a72:	f7ff ffbd 	bl	80029f0 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	2b0a      	cmp	r3, #10
 8002a7e:	d901      	bls.n	8002a84 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8002a80:	2303      	movs	r3, #3
 8002a82:	e006      	b.n	8002a92 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0x00U)
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0308 	and.w	r3, r3, #8
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0f0      	beq.n	8002a72 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8002a90:	2300      	movs	r3, #0
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3708      	adds	r7, #8
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40010030 	.word	0x40010030

08002aa0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	609a      	str	r2, [r3, #8]
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr

08002ac6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b083      	sub	sp, #12
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	431a      	orrs	r2, r3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	609a      	str	r2, [r3, #8]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
 8002b14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	3360      	adds	r3, #96	; 0x60
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4b08      	ldr	r3, [pc, #32]	; (8002b4c <LL_ADC_SetOffset+0x44>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002b32:	683a      	ldr	r2, [r7, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002b40:	bf00      	nop
 8002b42:	371c      	adds	r7, #28
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	03fff000 	.word	0x03fff000

08002b50 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3360      	adds	r3, #96	; 0x60
 8002b5e:	461a      	mov	r2, r3
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	3360      	adds	r3, #96	; 0x60
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	4413      	add	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002ba6:	bf00      	nop
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr

08002bb2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002bb2:	b480      	push	{r7}
 8002bb4:	b087      	sub	sp, #28
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	3360      	adds	r3, #96	; 0x60
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002bdc:	bf00      	nop
 8002bde:	371c      	adds	r7, #28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	3360      	adds	r3, #96	; 0x60
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002c12:	bf00      	nop
 8002c14:	371c      	adds	r7, #28
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b083      	sub	sp, #12
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
 8002c26:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	615a      	str	r2, [r3, #20]
}
 8002c38:	bf00      	nop
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	370c      	adds	r7, #12
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr

08002c6a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b087      	sub	sp, #28
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	3330      	adds	r3, #48	; 0x30
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	4413      	add	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002c8a:	697b      	ldr	r3, [r7, #20]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	211f      	movs	r1, #31
 8002c96:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	401a      	ands	r2, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	0e9b      	lsrs	r3, r3, #26
 8002ca2:	f003 011f 	and.w	r1, r3, #31
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002cb6:	bf00      	nop
 8002cb8:	371c      	adds	r7, #28
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b087      	sub	sp, #28
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	60f8      	str	r0, [r7, #12]
 8002cca:	60b9      	str	r1, [r7, #8]
 8002ccc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	3314      	adds	r3, #20
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	0e5b      	lsrs	r3, r3, #25
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	f003 0304 	and.w	r3, r3, #4
 8002cde:	4413      	add	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	0d1b      	lsrs	r3, r3, #20
 8002cea:	f003 031f 	and.w	r3, r3, #31
 8002cee:	2107      	movs	r1, #7
 8002cf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	0d1b      	lsrs	r3, r3, #20
 8002cfc:	f003 031f 	and.w	r3, r3, #31
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	fa01 f303 	lsl.w	r3, r1, r3
 8002d06:	431a      	orrs	r2, r3
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002d0c:	bf00      	nop
 8002d0e:	371c      	adds	r7, #28
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr

08002d18 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	60f8      	str	r0, [r7, #12]
 8002d20:	60b9      	str	r1, [r7, #8]
 8002d22:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d30:	43db      	mvns	r3, r3
 8002d32:	401a      	ands	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	f003 0318 	and.w	r3, r3, #24
 8002d3a:	4908      	ldr	r1, [pc, #32]	; (8002d5c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d3c:	40d9      	lsrs	r1, r3
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	400b      	ands	r3, r1
 8002d42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d46:	431a      	orrs	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	0007ffff 	.word	0x0007ffff

08002d60 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 031f 	and.w	r3, r3, #31
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002d8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6093      	str	r3, [r2, #8]
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002db0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002db4:	d101      	bne.n	8002dba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002dba:	2300      	movs	r3, #0
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002dd8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ddc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e04:	d101      	bne.n	8002e0a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e2c:	f043 0201 	orr.w	r2, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e34:	bf00      	nop
 8002e36:	370c      	adds	r7, #12
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3e:	4770      	bx	lr

08002e40 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e50:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e54:	f043 0202 	orr.w	r2, r3, #2
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b083      	sub	sp, #12
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d101      	bne.n	8002e80 <LL_ADC_IsEnabled+0x18>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <LL_ADC_IsEnabled+0x1a>
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr

08002e8e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d101      	bne.n	8002ea6 <LL_ADC_IsDisableOngoing+0x18>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e000      	b.n	8002ea8 <LL_ADC_IsDisableOngoing+0x1a>
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ec4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ec8:	f043 0204 	orr.w	r2, r3, #4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002eec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ef0:	f043 0210 	orr.w	r2, r3, #16
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d101      	bne.n	8002f1c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e000      	b.n	8002f1e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002f3a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f3e:	f043 0220 	orr.w	r2, r3, #32
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr

08002f52 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
 8002f62:	2b08      	cmp	r3, #8
 8002f64:	d101      	bne.n	8002f6a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f78:	b590      	push	{r4, r7, lr}
 8002f7a:	b089      	sub	sp, #36	; 0x24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002f84:	2300      	movs	r3, #0
 8002f86:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e1a9      	b.n	80032e6 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d109      	bne.n	8002fb4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7ff f86d 	bl	8002080 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff fef1 	bl	8002da0 <LL_ADC_IsDeepPowerDownEnabled>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d004      	beq.n	8002fce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7ff fed7 	bl	8002d7c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff ff0c 	bl	8002df0 <LL_ADC_IsInternalRegulatorEnabled>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d115      	bne.n	800300a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7ff fef0 	bl	8002dc8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fe8:	4b9c      	ldr	r3, [pc, #624]	; (800325c <HAL_ADC_Init+0x2e4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	099b      	lsrs	r3, r3, #6
 8002fee:	4a9c      	ldr	r2, [pc, #624]	; (8003260 <HAL_ADC_Init+0x2e8>)
 8002ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ff4:	099b      	lsrs	r3, r3, #6
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	005b      	lsls	r3, r3, #1
 8002ffa:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ffc:	e002      	b.n	8003004 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	3b01      	subs	r3, #1
 8003002:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f9      	bne.n	8002ffe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff feee 	bl	8002df0 <LL_ADC_IsInternalRegulatorEnabled>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10d      	bne.n	8003036 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301e:	f043 0210 	orr.w	r2, r3, #16
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800302a:	f043 0201 	orr.w	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4618      	mov	r0, r3
 800303c:	f7ff ff62 	bl	8002f04 <LL_ADC_REG_IsConversionOngoing>
 8003040:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003046:	f003 0310 	and.w	r3, r3, #16
 800304a:	2b00      	cmp	r3, #0
 800304c:	f040 8142 	bne.w	80032d4 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	2b00      	cmp	r3, #0
 8003054:	f040 813e 	bne.w	80032d4 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003060:	f043 0202 	orr.w	r2, r3, #2
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff fefb 	bl	8002e68 <LL_ADC_IsEnabled>
 8003072:	4603      	mov	r3, r0
 8003074:	2b00      	cmp	r3, #0
 8003076:	d141      	bne.n	80030fc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003080:	d004      	beq.n	800308c <HAL_ADC_Init+0x114>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a77      	ldr	r2, [pc, #476]	; (8003264 <HAL_ADC_Init+0x2ec>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d10f      	bne.n	80030ac <HAL_ADC_Init+0x134>
 800308c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003090:	f7ff feea 	bl	8002e68 <LL_ADC_IsEnabled>
 8003094:	4604      	mov	r4, r0
 8003096:	4873      	ldr	r0, [pc, #460]	; (8003264 <HAL_ADC_Init+0x2ec>)
 8003098:	f7ff fee6 	bl	8002e68 <LL_ADC_IsEnabled>
 800309c:	4603      	mov	r3, r0
 800309e:	4323      	orrs	r3, r4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	bf0c      	ite	eq
 80030a4:	2301      	moveq	r3, #1
 80030a6:	2300      	movne	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	e012      	b.n	80030d2 <HAL_ADC_Init+0x15a>
 80030ac:	486e      	ldr	r0, [pc, #440]	; (8003268 <HAL_ADC_Init+0x2f0>)
 80030ae:	f7ff fedb 	bl	8002e68 <LL_ADC_IsEnabled>
 80030b2:	4604      	mov	r4, r0
 80030b4:	486d      	ldr	r0, [pc, #436]	; (800326c <HAL_ADC_Init+0x2f4>)
 80030b6:	f7ff fed7 	bl	8002e68 <LL_ADC_IsEnabled>
 80030ba:	4603      	mov	r3, r0
 80030bc:	431c      	orrs	r4, r3
 80030be:	486c      	ldr	r0, [pc, #432]	; (8003270 <HAL_ADC_Init+0x2f8>)
 80030c0:	f7ff fed2 	bl	8002e68 <LL_ADC_IsEnabled>
 80030c4:	4603      	mov	r3, r0
 80030c6:	4323      	orrs	r3, r4
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf0c      	ite	eq
 80030cc:	2301      	moveq	r3, #1
 80030ce:	2300      	movne	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d012      	beq.n	80030fc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030de:	d004      	beq.n	80030ea <HAL_ADC_Init+0x172>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a5f      	ldr	r2, [pc, #380]	; (8003264 <HAL_ADC_Init+0x2ec>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d101      	bne.n	80030ee <HAL_ADC_Init+0x176>
 80030ea:	4a62      	ldr	r2, [pc, #392]	; (8003274 <HAL_ADC_Init+0x2fc>)
 80030ec:	e000      	b.n	80030f0 <HAL_ADC_Init+0x178>
 80030ee:	4a62      	ldr	r2, [pc, #392]	; (8003278 <HAL_ADC_Init+0x300>)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4619      	mov	r1, r3
 80030f6:	4610      	mov	r0, r2
 80030f8:	f7ff fcd2 	bl	8002aa0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	7f5b      	ldrb	r3, [r3, #29]
 8003100:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003106:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800310c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003112:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800311a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800311c:	4313      	orrs	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003126:	2b01      	cmp	r3, #1
 8003128:	d106      	bne.n	8003138 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312e:	3b01      	subs	r3, #1
 8003130:	045b      	lsls	r3, r3, #17
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4313      	orrs	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313c:	2b00      	cmp	r3, #0
 800313e:	d009      	beq.n	8003154 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003144:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800314e:	69ba      	ldr	r2, [r7, #24]
 8003150:	4313      	orrs	r3, r2
 8003152:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68da      	ldr	r2, [r3, #12]
 800315a:	4b48      	ldr	r3, [pc, #288]	; (800327c <HAL_ADC_Init+0x304>)
 800315c:	4013      	ands	r3, r2
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6812      	ldr	r2, [r2, #0]
 8003162:	69b9      	ldr	r1, [r7, #24]
 8003164:	430b      	orrs	r3, r1
 8003166:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7ff fee5 	bl	8002f52 <LL_ADC_INJ_IsConversionOngoing>
 8003188:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d17f      	bne.n	8003290 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d17c      	bne.n	8003290 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800319a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80031a2:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80031b2:	f023 0302 	bic.w	r3, r3, #2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	6812      	ldr	r2, [r2, #0]
 80031ba:	69b9      	ldr	r1, [r7, #24]
 80031bc:	430b      	orrs	r3, r1
 80031be:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d017      	beq.n	80031f8 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691a      	ldr	r2, [r3, #16]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80031d6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80031e0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80031e4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	6911      	ldr	r1, [r2, #16]
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	6812      	ldr	r2, [r2, #0]
 80031f0:	430b      	orrs	r3, r1
 80031f2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80031f6:	e013      	b.n	8003220 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	691a      	ldr	r2, [r3, #16]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003206:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003218:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800321c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003226:	2b01      	cmp	r3, #1
 8003228:	d12a      	bne.n	8003280 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	691b      	ldr	r3, [r3, #16]
 8003230:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003234:	f023 0304 	bic.w	r3, r3, #4
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003240:	4311      	orrs	r1, r2
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003246:	4311      	orrs	r1, r2
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800324c:	430a      	orrs	r2, r1
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f042 0201 	orr.w	r2, r2, #1
 8003258:	611a      	str	r2, [r3, #16]
 800325a:	e019      	b.n	8003290 <HAL_ADC_Init+0x318>
 800325c:	20000010 	.word	0x20000010
 8003260:	053e2d63 	.word	0x053e2d63
 8003264:	50000100 	.word	0x50000100
 8003268:	50000400 	.word	0x50000400
 800326c:	50000500 	.word	0x50000500
 8003270:	50000600 	.word	0x50000600
 8003274:	50000300 	.word	0x50000300
 8003278:	50000700 	.word	0x50000700
 800327c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0201 	bic.w	r2, r2, #1
 800328e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	695b      	ldr	r3, [r3, #20]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d10c      	bne.n	80032b2 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	f023 010f 	bic.w	r1, r3, #15
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a1b      	ldr	r3, [r3, #32]
 80032a6:	1e5a      	subs	r2, r3, #1
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	430a      	orrs	r2, r1
 80032ae:	631a      	str	r2, [r3, #48]	; 0x30
 80032b0:	e007      	b.n	80032c2 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 020f 	bic.w	r2, r2, #15
 80032c0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c6:	f023 0303 	bic.w	r3, r3, #3
 80032ca:	f043 0201 	orr.w	r2, r3, #1
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80032d2:	e007      	b.n	80032e4 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d8:	f043 0210 	orr.w	r2, r3, #16
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3724      	adds	r7, #36	; 0x24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd90      	pop	{r4, r7, pc}
 80032ee:	bf00      	nop

080032f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b086      	sub	sp, #24
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003304:	d004      	beq.n	8003310 <HAL_ADC_Start_DMA+0x20>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a5a      	ldr	r2, [pc, #360]	; (8003474 <HAL_ADC_Start_DMA+0x184>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d101      	bne.n	8003314 <HAL_ADC_Start_DMA+0x24>
 8003310:	4b59      	ldr	r3, [pc, #356]	; (8003478 <HAL_ADC_Start_DMA+0x188>)
 8003312:	e000      	b.n	8003316 <HAL_ADC_Start_DMA+0x26>
 8003314:	4b59      	ldr	r3, [pc, #356]	; (800347c <HAL_ADC_Start_DMA+0x18c>)
 8003316:	4618      	mov	r0, r3
 8003318:	f7ff fd22 	bl	8002d60 <LL_ADC_GetMultimode>
 800331c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fdee 	bl	8002f04 <LL_ADC_REG_IsConversionOngoing>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	f040 809b 	bne.w	8003466 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003336:	2b01      	cmp	r3, #1
 8003338:	d101      	bne.n	800333e <HAL_ADC_Start_DMA+0x4e>
 800333a:	2302      	movs	r3, #2
 800333c:	e096      	b.n	800346c <HAL_ADC_Start_DMA+0x17c>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a4d      	ldr	r2, [pc, #308]	; (8003480 <HAL_ADC_Start_DMA+0x190>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d008      	beq.n	8003362 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d005      	beq.n	8003362 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	2b05      	cmp	r3, #5
 800335a:	d002      	beq.n	8003362 <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	2b09      	cmp	r3, #9
 8003360:	d17a      	bne.n	8003458 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f000 fe00 	bl	8003f68 <ADC_Enable>
 8003368:	4603      	mov	r3, r0
 800336a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800336c:	7dfb      	ldrb	r3, [r7, #23]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d16d      	bne.n	800344e <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003376:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800337a:	f023 0301 	bic.w	r3, r3, #1
 800337e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a3a      	ldr	r2, [pc, #232]	; (8003474 <HAL_ADC_Start_DMA+0x184>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d009      	beq.n	80033a4 <HAL_ADC_Start_DMA+0xb4>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a3b      	ldr	r2, [pc, #236]	; (8003484 <HAL_ADC_Start_DMA+0x194>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d002      	beq.n	80033a0 <HAL_ADC_Start_DMA+0xb0>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	e003      	b.n	80033a8 <HAL_ADC_Start_DMA+0xb8>
 80033a0:	4b39      	ldr	r3, [pc, #228]	; (8003488 <HAL_ADC_Start_DMA+0x198>)
 80033a2:	e001      	b.n	80033a8 <HAL_ADC_Start_DMA+0xb8>
 80033a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80033a8:	68fa      	ldr	r2, [r7, #12]
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d002      	beq.n	80033b6 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d105      	bne.n	80033c2 <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d006      	beq.n	80033dc <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033d2:	f023 0206 	bic.w	r2, r3, #6
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	661a      	str	r2, [r3, #96]	; 0x60
 80033da:	e002      	b.n	80033e2 <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033e6:	4a29      	ldr	r2, [pc, #164]	; (800348c <HAL_ADC_Start_DMA+0x19c>)
 80033e8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ee:	4a28      	ldr	r2, [pc, #160]	; (8003490 <HAL_ADC_Start_DMA+0x1a0>)
 80033f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f6:	4a27      	ldr	r2, [pc, #156]	; (8003494 <HAL_ADC_Start_DMA+0x1a4>)
 80033f8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	221c      	movs	r2, #28
 8003400:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0210 	orr.w	r2, r2, #16
 8003418:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f042 0201 	orr.w	r2, r2, #1
 8003428:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	3340      	adds	r3, #64	; 0x40
 8003434:	4619      	mov	r1, r3
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f001 fd07 	bl	8004e4c <HAL_DMA_Start_IT>
 800343e:	4603      	mov	r3, r0
 8003440:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff fd34 	bl	8002eb4 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800344c:	e00d      	b.n	800346a <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003456:	e008      	b.n	800346a <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003464:	e001      	b.n	800346a <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003466:	2302      	movs	r3, #2
 8003468:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800346a:	7dfb      	ldrb	r3, [r7, #23]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	50000100 	.word	0x50000100
 8003478:	50000300 	.word	0x50000300
 800347c:	50000700 	.word	0x50000700
 8003480:	50000600 	.word	0x50000600
 8003484:	50000500 	.word	0x50000500
 8003488:	50000400 	.word	0x50000400
 800348c:	08004153 	.word	0x08004153
 8003490:	0800422b 	.word	0x0800422b
 8003494:	08004247 	.word	0x08004247

08003498 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_ADC_Stop_DMA+0x16>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e051      	b.n	8003552 <HAL_ADC_Stop_DMA+0xba>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2201      	movs	r2, #1
 80034b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80034b6:	2103      	movs	r1, #3
 80034b8:	6878      	ldr	r0, [r7, #4]
 80034ba:	f000 fc99 	bl	8003df0 <ADC_ConversionStop>
 80034be:	4603      	mov	r3, r0
 80034c0:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d13f      	bne.n	8003548 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68da      	ldr	r2, [r3, #12]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f022 0201 	bic.w	r2, r2, #1
 80034d6:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d10f      	bne.n	8003506 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ea:	4618      	mov	r0, r3
 80034ec:	f001 fd29 	bl	8004f42 <HAL_DMA_Abort>
 80034f0:	4603      	mov	r3, r0
 80034f2:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 80034f4:	7bfb      	ldrb	r3, [r7, #15]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d005      	beq.n	8003506 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	685a      	ldr	r2, [r3, #4]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0210 	bic.w	r2, r2, #16
 8003514:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d105      	bne.n	8003528 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 fdb9 	bl	8004094 <ADC_Disable>
 8003522:	4603      	mov	r3, r0
 8003524:	73fb      	strb	r3, [r7, #15]
 8003526:	e002      	b.n	800352e <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fdb3 	bl	8004094 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800352e:	7bfb      	ldrb	r3, [r7, #15]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d109      	bne.n	8003548 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003538:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800353c:	f023 0301 	bic.w	r3, r3, #1
 8003540:	f043 0201 	orr.w	r2, r3, #1
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003550:	7bfb      	ldrb	r3, [r7, #15]
}
 8003552:	4618      	mov	r0, r3
 8003554:	3710      	adds	r7, #16
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
	...

08003570 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b0b6      	sub	sp, #216	; 0xd8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800358a:	2b01      	cmp	r3, #1
 800358c:	d102      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x24>
 800358e:	2302      	movs	r3, #2
 8003590:	f000 bc13 	b.w	8003dba <HAL_ADC_ConfigChannel+0x84a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fcaf 	bl	8002f04 <LL_ADC_REG_IsConversionOngoing>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f040 83f3 	bne.w	8003d94 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6818      	ldr	r0, [r3, #0]
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	6859      	ldr	r1, [r3, #4]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	461a      	mov	r2, r3
 80035bc:	f7ff fb55 	bl	8002c6a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f7ff fc9d 	bl	8002f04 <LL_ADC_REG_IsConversionOngoing>
 80035ca:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7ff fcbd 	bl	8002f52 <LL_ADC_INJ_IsConversionOngoing>
 80035d8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f040 81d9 	bne.w	8003998 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035e6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f040 81d4 	bne.w	8003998 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035f8:	d10f      	bne.n	800361a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2200      	movs	r2, #0
 8003604:	4619      	mov	r1, r3
 8003606:	f7ff fb5c 	bl	8002cc2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fb03 	bl	8002c1e <LL_ADC_SetSamplingTimeCommonConfig>
 8003618:	e00e      	b.n	8003638 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	6819      	ldr	r1, [r3, #0]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	461a      	mov	r2, r3
 8003628:	f7ff fb4b 	bl	8002cc2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2100      	movs	r1, #0
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff faf3 	bl	8002c1e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	695a      	ldr	r2, [r3, #20]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	08db      	lsrs	r3, r3, #3
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	2b04      	cmp	r3, #4
 8003658:	d022      	beq.n	80036a0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6818      	ldr	r0, [r3, #0]
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	6919      	ldr	r1, [r3, #16]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800366a:	f7ff fa4d 	bl	8002b08 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6818      	ldr	r0, [r3, #0]
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	6919      	ldr	r1, [r3, #16]
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	699b      	ldr	r3, [r3, #24]
 800367a:	461a      	mov	r2, r3
 800367c:	f7ff fa99 	bl	8002bb2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6818      	ldr	r0, [r3, #0]
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 800368c:	2b01      	cmp	r3, #1
 800368e:	d102      	bne.n	8003696 <HAL_ADC_ConfigChannel+0x126>
 8003690:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003694:	e000      	b.n	8003698 <HAL_ADC_ConfigChannel+0x128>
 8003696:	2300      	movs	r3, #0
 8003698:	461a      	mov	r2, r3
 800369a:	f7ff faa5 	bl	8002be8 <LL_ADC_SetOffsetSaturation>
 800369e:	e17b      	b.n	8003998 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2100      	movs	r1, #0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7ff fa52 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 80036ac:	4603      	mov	r3, r0
 80036ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10a      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x15c>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2100      	movs	r1, #0
 80036bc:	4618      	mov	r0, r3
 80036be:	f7ff fa47 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 80036c2:	4603      	mov	r3, r0
 80036c4:	0e9b      	lsrs	r3, r3, #26
 80036c6:	f003 021f 	and.w	r2, r3, #31
 80036ca:	e01e      	b.n	800370a <HAL_ADC_ConfigChannel+0x19a>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2100      	movs	r1, #0
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff fa3c 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 80036d8:	4603      	mov	r3, r0
 80036da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036de:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036e2:	fa93 f3a3 	rbit	r3, r3
 80036e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80036ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80036fa:	2320      	movs	r3, #32
 80036fc:	e004      	b.n	8003708 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80036fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003712:	2b00      	cmp	r3, #0
 8003714:	d105      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x1b2>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	0e9b      	lsrs	r3, r3, #26
 800371c:	f003 031f 	and.w	r3, r3, #31
 8003720:	e018      	b.n	8003754 <HAL_ADC_ConfigChannel+0x1e4>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800372a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003736:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800373a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800373e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003746:	2320      	movs	r3, #32
 8003748:	e004      	b.n	8003754 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800374a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003754:	429a      	cmp	r2, r3
 8003756:	d106      	bne.n	8003766 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2200      	movs	r2, #0
 800375e:	2100      	movs	r1, #0
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff fa0b 	bl	8002b7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2101      	movs	r1, #1
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff f9ef 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 8003772:	4603      	mov	r3, r0
 8003774:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10a      	bne.n	8003792 <HAL_ADC_ConfigChannel+0x222>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	2101      	movs	r1, #1
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff f9e4 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 8003788:	4603      	mov	r3, r0
 800378a:	0e9b      	lsrs	r3, r3, #26
 800378c:	f003 021f 	and.w	r2, r3, #31
 8003790:	e01e      	b.n	80037d0 <HAL_ADC_ConfigChannel+0x260>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2101      	movs	r1, #1
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff f9d9 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 800379e:	4603      	mov	r3, r0
 80037a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037a8:	fa93 f3a3 	rbit	r3, r3
 80037ac:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80037b0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80037b8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80037c0:	2320      	movs	r3, #32
 80037c2:	e004      	b.n	80037ce <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80037c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037c8:	fab3 f383 	clz	r3, r3
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d105      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x278>
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	0e9b      	lsrs	r3, r3, #26
 80037e2:	f003 031f 	and.w	r3, r3, #31
 80037e6:	e018      	b.n	800381a <HAL_ADC_ConfigChannel+0x2aa>
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037f4:	fa93 f3a3 	rbit	r3, r3
 80037f8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80037fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003800:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003804:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003808:	2b00      	cmp	r3, #0
 800380a:	d101      	bne.n	8003810 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800380c:	2320      	movs	r3, #32
 800380e:	e004      	b.n	800381a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003810:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003814:	fab3 f383 	clz	r3, r3
 8003818:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800381a:	429a      	cmp	r2, r3
 800381c:	d106      	bne.n	800382c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2200      	movs	r2, #0
 8003824:	2101      	movs	r1, #1
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff f9a8 	bl	8002b7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2102      	movs	r1, #2
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff f98c 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 8003838:	4603      	mov	r3, r0
 800383a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383e:	2b00      	cmp	r3, #0
 8003840:	d10a      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x2e8>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2102      	movs	r1, #2
 8003848:	4618      	mov	r0, r3
 800384a:	f7ff f981 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 800384e:	4603      	mov	r3, r0
 8003850:	0e9b      	lsrs	r3, r3, #26
 8003852:	f003 021f 	and.w	r2, r3, #31
 8003856:	e01e      	b.n	8003896 <HAL_ADC_ConfigChannel+0x326>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2102      	movs	r1, #2
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff f976 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 8003864:	4603      	mov	r3, r0
 8003866:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800386a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800386e:	fa93 f3a3 	rbit	r3, r3
 8003872:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003876:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800387a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800387e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003886:	2320      	movs	r3, #32
 8003888:	e004      	b.n	8003894 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800388a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800388e:	fab3 f383 	clz	r3, r3
 8003892:	b2db      	uxtb	r3, r3
 8003894:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d105      	bne.n	80038ae <HAL_ADC_ConfigChannel+0x33e>
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	0e9b      	lsrs	r3, r3, #26
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	e016      	b.n	80038dc <HAL_ADC_ConfigChannel+0x36c>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038ba:	fa93 f3a3 	rbit	r3, r3
 80038be:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80038c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80038c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d101      	bne.n	80038d2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80038ce:	2320      	movs	r3, #32
 80038d0:	e004      	b.n	80038dc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80038d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038d6:	fab3 f383 	clz	r3, r3
 80038da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038dc:	429a      	cmp	r2, r3
 80038de:	d106      	bne.n	80038ee <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2200      	movs	r2, #0
 80038e6:	2102      	movs	r1, #2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff f947 	bl	8002b7c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2103      	movs	r1, #3
 80038f4:	4618      	mov	r0, r3
 80038f6:	f7ff f92b 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 80038fa:	4603      	mov	r3, r0
 80038fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003900:	2b00      	cmp	r3, #0
 8003902:	d10a      	bne.n	800391a <HAL_ADC_ConfigChannel+0x3aa>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2103      	movs	r1, #3
 800390a:	4618      	mov	r0, r3
 800390c:	f7ff f920 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 8003910:	4603      	mov	r3, r0
 8003912:	0e9b      	lsrs	r3, r3, #26
 8003914:	f003 021f 	and.w	r2, r3, #31
 8003918:	e017      	b.n	800394a <HAL_ADC_ConfigChannel+0x3da>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2103      	movs	r1, #3
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff f915 	bl	8002b50 <LL_ADC_GetOffsetChannel>
 8003926:	4603      	mov	r3, r0
 8003928:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800392c:	fa93 f3a3 	rbit	r3, r3
 8003930:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003932:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003934:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003936:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003938:	2b00      	cmp	r3, #0
 800393a:	d101      	bne.n	8003940 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800393c:	2320      	movs	r3, #32
 800393e:	e003      	b.n	8003948 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003940:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003942:	fab3 f383 	clz	r3, r3
 8003946:	b2db      	uxtb	r3, r3
 8003948:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003952:	2b00      	cmp	r3, #0
 8003954:	d105      	bne.n	8003962 <HAL_ADC_ConfigChannel+0x3f2>
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	0e9b      	lsrs	r3, r3, #26
 800395c:	f003 031f 	and.w	r3, r3, #31
 8003960:	e011      	b.n	8003986 <HAL_ADC_ConfigChannel+0x416>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003968:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800396a:	fa93 f3a3 	rbit	r3, r3
 800396e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003972:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003974:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800397a:	2320      	movs	r3, #32
 800397c:	e003      	b.n	8003986 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800397e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003980:	fab3 f383 	clz	r3, r3
 8003984:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003986:	429a      	cmp	r2, r3
 8003988:	d106      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2200      	movs	r2, #0
 8003990:	2103      	movs	r1, #3
 8003992:	4618      	mov	r0, r3
 8003994:	f7ff f8f2 	bl	8002b7c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff fa63 	bl	8002e68 <LL_ADC_IsEnabled>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f040 813d 	bne.w	8003c24 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6819      	ldr	r1, [r3, #0]
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	461a      	mov	r2, r3
 80039b8:	f7ff f9ae 	bl	8002d18 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	4aa2      	ldr	r2, [pc, #648]	; (8003c4c <HAL_ADC_ConfigChannel+0x6dc>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	f040 812e 	bne.w	8003c24 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10b      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x480>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	0e9b      	lsrs	r3, r3, #26
 80039de:	3301      	adds	r3, #1
 80039e0:	f003 031f 	and.w	r3, r3, #31
 80039e4:	2b09      	cmp	r3, #9
 80039e6:	bf94      	ite	ls
 80039e8:	2301      	movls	r3, #1
 80039ea:	2300      	movhi	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	e019      	b.n	8003a24 <HAL_ADC_ConfigChannel+0x4b4>
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039f8:	fa93 f3a3 	rbit	r3, r3
 80039fc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80039fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a00:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003a02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d101      	bne.n	8003a0c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003a08:	2320      	movs	r3, #32
 8003a0a:	e003      	b.n	8003a14 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003a0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a0e:	fab3 f383 	clz	r3, r3
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	3301      	adds	r3, #1
 8003a16:	f003 031f 	and.w	r3, r3, #31
 8003a1a:	2b09      	cmp	r3, #9
 8003a1c:	bf94      	ite	ls
 8003a1e:	2301      	movls	r3, #1
 8003a20:	2300      	movhi	r3, #0
 8003a22:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d079      	beq.n	8003b1c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d107      	bne.n	8003a44 <HAL_ADC_ConfigChannel+0x4d4>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	0e9b      	lsrs	r3, r3, #26
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	069b      	lsls	r3, r3, #26
 8003a3e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a42:	e015      	b.n	8003a70 <HAL_ADC_ConfigChannel+0x500>
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a4c:	fa93 f3a3 	rbit	r3, r3
 8003a50:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a54:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003a5c:	2320      	movs	r3, #32
 8003a5e:	e003      	b.n	8003a68 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a62:	fab3 f383 	clz	r3, r3
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	3301      	adds	r3, #1
 8003a6a:	069b      	lsls	r3, r3, #26
 8003a6c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d109      	bne.n	8003a90 <HAL_ADC_ConfigChannel+0x520>
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	0e9b      	lsrs	r3, r3, #26
 8003a82:	3301      	adds	r3, #1
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	2101      	movs	r1, #1
 8003a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8e:	e017      	b.n	8003ac0 <HAL_ADC_ConfigChannel+0x550>
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a98:	fa93 f3a3 	rbit	r3, r3
 8003a9c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003a9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003aa0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003aa8:	2320      	movs	r3, #32
 8003aaa:	e003      	b.n	8003ab4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003aac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aae:	fab3 f383 	clz	r3, r3
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	3301      	adds	r3, #1
 8003ab6:	f003 031f 	and.w	r3, r3, #31
 8003aba:	2101      	movs	r1, #1
 8003abc:	fa01 f303 	lsl.w	r3, r1, r3
 8003ac0:	ea42 0103 	orr.w	r1, r2, r3
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d10a      	bne.n	8003ae6 <HAL_ADC_ConfigChannel+0x576>
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	0e9b      	lsrs	r3, r3, #26
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	f003 021f 	and.w	r2, r3, #31
 8003adc:	4613      	mov	r3, r2
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	4413      	add	r3, r2
 8003ae2:	051b      	lsls	r3, r3, #20
 8003ae4:	e018      	b.n	8003b18 <HAL_ADC_ConfigChannel+0x5a8>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aee:	fa93 f3a3 	rbit	r3, r3
 8003af2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003af8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d101      	bne.n	8003b02 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003afe:	2320      	movs	r3, #32
 8003b00:	e003      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b04:	fab3 f383 	clz	r3, r3
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	f003 021f 	and.w	r2, r3, #31
 8003b10:	4613      	mov	r3, r2
 8003b12:	005b      	lsls	r3, r3, #1
 8003b14:	4413      	add	r3, r2
 8003b16:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	e07e      	b.n	8003c1a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d107      	bne.n	8003b38 <HAL_ADC_ConfigChannel+0x5c8>
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	0e9b      	lsrs	r3, r3, #26
 8003b2e:	3301      	adds	r3, #1
 8003b30:	069b      	lsls	r3, r3, #26
 8003b32:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b36:	e015      	b.n	8003b64 <HAL_ADC_ConfigChannel+0x5f4>
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b40:	fa93 f3a3 	rbit	r3, r3
 8003b44:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b48:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d101      	bne.n	8003b54 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003b50:	2320      	movs	r3, #32
 8003b52:	e003      	b.n	8003b5c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b56:	fab3 f383 	clz	r3, r3
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	069b      	lsls	r3, r3, #26
 8003b60:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d109      	bne.n	8003b84 <HAL_ADC_ConfigChannel+0x614>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	0e9b      	lsrs	r3, r3, #26
 8003b76:	3301      	adds	r3, #1
 8003b78:	f003 031f 	and.w	r3, r3, #31
 8003b7c:	2101      	movs	r1, #1
 8003b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b82:	e017      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x644>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	fa93 f3a3 	rbit	r3, r3
 8003b90:	61fb      	str	r3, [r7, #28]
  return result;
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d101      	bne.n	8003ba0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003b9c:	2320      	movs	r3, #32
 8003b9e:	e003      	b.n	8003ba8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba2:	fab3 f383 	clz	r3, r3
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	3301      	adds	r3, #1
 8003baa:	f003 031f 	and.w	r3, r3, #31
 8003bae:	2101      	movs	r1, #1
 8003bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb4:	ea42 0103 	orr.w	r1, r2, r3
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d10d      	bne.n	8003be0 <HAL_ADC_ConfigChannel+0x670>
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	0e9b      	lsrs	r3, r3, #26
 8003bca:	3301      	adds	r3, #1
 8003bcc:	f003 021f 	and.w	r2, r3, #31
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	005b      	lsls	r3, r3, #1
 8003bd4:	4413      	add	r3, r2
 8003bd6:	3b1e      	subs	r3, #30
 8003bd8:	051b      	lsls	r3, r3, #20
 8003bda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bde:	e01b      	b.n	8003c18 <HAL_ADC_ConfigChannel+0x6a8>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	fa93 f3a3 	rbit	r3, r3
 8003bec:	613b      	str	r3, [r7, #16]
  return result;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d101      	bne.n	8003bfc <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003bf8:	2320      	movs	r3, #32
 8003bfa:	e003      	b.n	8003c04 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	fab3 f383 	clz	r3, r3
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	3301      	adds	r3, #1
 8003c06:	f003 021f 	and.w	r2, r3, #31
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	4413      	add	r3, r2
 8003c10:	3b1e      	subs	r3, #30
 8003c12:	051b      	lsls	r3, r3, #20
 8003c14:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c18:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c1e:	4619      	mov	r1, r3
 8003c20:	f7ff f84f 	bl	8002cc2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <HAL_ADC_ConfigChannel+0x6e0>)
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80be 	beq.w	8003dae <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c3a:	d004      	beq.n	8003c46 <HAL_ADC_ConfigChannel+0x6d6>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a04      	ldr	r2, [pc, #16]	; (8003c54 <HAL_ADC_ConfigChannel+0x6e4>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d10a      	bne.n	8003c5c <HAL_ADC_ConfigChannel+0x6ec>
 8003c46:	4b04      	ldr	r3, [pc, #16]	; (8003c58 <HAL_ADC_ConfigChannel+0x6e8>)
 8003c48:	e009      	b.n	8003c5e <HAL_ADC_ConfigChannel+0x6ee>
 8003c4a:	bf00      	nop
 8003c4c:	407f0000 	.word	0x407f0000
 8003c50:	80080000 	.word	0x80080000
 8003c54:	50000100 	.word	0x50000100
 8003c58:	50000300 	.word	0x50000300
 8003c5c:	4b59      	ldr	r3, [pc, #356]	; (8003dc4 <HAL_ADC_ConfigChannel+0x854>)
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fe ff44 	bl	8002aec <LL_ADC_GetCommonPathInternalCh>
 8003c64:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a56      	ldr	r2, [pc, #344]	; (8003dc8 <HAL_ADC_ConfigChannel+0x858>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d004      	beq.n	8003c7c <HAL_ADC_ConfigChannel+0x70c>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a55      	ldr	r2, [pc, #340]	; (8003dcc <HAL_ADC_ConfigChannel+0x85c>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d13a      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c7c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d134      	bne.n	8003cf2 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c90:	d005      	beq.n	8003c9e <HAL_ADC_ConfigChannel+0x72e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a4e      	ldr	r2, [pc, #312]	; (8003dd0 <HAL_ADC_ConfigChannel+0x860>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	f040 8085 	bne.w	8003da8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ca6:	d004      	beq.n	8003cb2 <HAL_ADC_ConfigChannel+0x742>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a49      	ldr	r2, [pc, #292]	; (8003dd4 <HAL_ADC_ConfigChannel+0x864>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d101      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x746>
 8003cb2:	4a49      	ldr	r2, [pc, #292]	; (8003dd8 <HAL_ADC_ConfigChannel+0x868>)
 8003cb4:	e000      	b.n	8003cb8 <HAL_ADC_ConfigChannel+0x748>
 8003cb6:	4a43      	ldr	r2, [pc, #268]	; (8003dc4 <HAL_ADC_ConfigChannel+0x854>)
 8003cb8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	f7fe feff 	bl	8002ac6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003cc8:	4b44      	ldr	r3, [pc, #272]	; (8003ddc <HAL_ADC_ConfigChannel+0x86c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	099b      	lsrs	r3, r3, #6
 8003cce:	4a44      	ldr	r2, [pc, #272]	; (8003de0 <HAL_ADC_ConfigChannel+0x870>)
 8003cd0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cd4:	099b      	lsrs	r3, r3, #6
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	4613      	mov	r3, r2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003ce2:	e002      	b.n	8003cea <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1f9      	bne.n	8003ce4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003cf0:	e05a      	b.n	8003da8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a3b      	ldr	r2, [pc, #236]	; (8003de4 <HAL_ADC_ConfigChannel+0x874>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d125      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003cfc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d11f      	bne.n	8003d48 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a31      	ldr	r2, [pc, #196]	; (8003dd4 <HAL_ADC_ConfigChannel+0x864>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d104      	bne.n	8003d1c <HAL_ADC_ConfigChannel+0x7ac>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a34      	ldr	r2, [pc, #208]	; (8003de8 <HAL_ADC_ConfigChannel+0x878>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d047      	beq.n	8003dac <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d24:	d004      	beq.n	8003d30 <HAL_ADC_ConfigChannel+0x7c0>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a2a      	ldr	r2, [pc, #168]	; (8003dd4 <HAL_ADC_ConfigChannel+0x864>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d101      	bne.n	8003d34 <HAL_ADC_ConfigChannel+0x7c4>
 8003d30:	4a29      	ldr	r2, [pc, #164]	; (8003dd8 <HAL_ADC_ConfigChannel+0x868>)
 8003d32:	e000      	b.n	8003d36 <HAL_ADC_ConfigChannel+0x7c6>
 8003d34:	4a23      	ldr	r2, [pc, #140]	; (8003dc4 <HAL_ADC_ConfigChannel+0x854>)
 8003d36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4610      	mov	r0, r2
 8003d42:	f7fe fec0 	bl	8002ac6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003d46:	e031      	b.n	8003dac <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a27      	ldr	r2, [pc, #156]	; (8003dec <HAL_ADC_ConfigChannel+0x87c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d12d      	bne.n	8003dae <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d127      	bne.n	8003dae <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a1c      	ldr	r2, [pc, #112]	; (8003dd4 <HAL_ADC_ConfigChannel+0x864>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d022      	beq.n	8003dae <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d70:	d004      	beq.n	8003d7c <HAL_ADC_ConfigChannel+0x80c>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a17      	ldr	r2, [pc, #92]	; (8003dd4 <HAL_ADC_ConfigChannel+0x864>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d101      	bne.n	8003d80 <HAL_ADC_ConfigChannel+0x810>
 8003d7c:	4a16      	ldr	r2, [pc, #88]	; (8003dd8 <HAL_ADC_ConfigChannel+0x868>)
 8003d7e:	e000      	b.n	8003d82 <HAL_ADC_ConfigChannel+0x812>
 8003d80:	4a10      	ldr	r2, [pc, #64]	; (8003dc4 <HAL_ADC_ConfigChannel+0x854>)
 8003d82:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d86:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	f7fe fe9a 	bl	8002ac6 <LL_ADC_SetCommonPathInternalCh>
 8003d92:	e00c      	b.n	8003dae <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d98:	f043 0220 	orr.w	r2, r3, #32
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003da6:	e002      	b.n	8003dae <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003da8:	bf00      	nop
 8003daa:	e000      	b.n	8003dae <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003dac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003db6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	37d8      	adds	r7, #216	; 0xd8
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	50000700 	.word	0x50000700
 8003dc8:	c3210000 	.word	0xc3210000
 8003dcc:	90c00010 	.word	0x90c00010
 8003dd0:	50000600 	.word	0x50000600
 8003dd4:	50000100 	.word	0x50000100
 8003dd8:	50000300 	.word	0x50000300
 8003ddc:	20000010 	.word	0x20000010
 8003de0:	053e2d63 	.word	0x053e2d63
 8003de4:	c7520000 	.word	0xc7520000
 8003de8:	50000500 	.word	0x50000500
 8003dec:	cb840000 	.word	0xcb840000

08003df0 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b088      	sub	sp, #32
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff f87c 	bl	8002f04 <LL_ADC_REG_IsConversionOngoing>
 8003e0c:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7ff f89d 	bl	8002f52 <LL_ADC_INJ_IsConversionOngoing>
 8003e18:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d103      	bne.n	8003e28 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 8098 	beq.w	8003f58 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d02a      	beq.n	8003e8c <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	7f5b      	ldrb	r3, [r3, #29]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d126      	bne.n	8003e8c <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	7f1b      	ldrb	r3, [r3, #28]
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d122      	bne.n	8003e8c <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003e46:	2301      	movs	r3, #1
 8003e48:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003e4a:	e014      	b.n	8003e76 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	4a45      	ldr	r2, [pc, #276]	; (8003f64 <ADC_ConversionStop+0x174>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d90d      	bls.n	8003e70 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e58:	f043 0210 	orr.w	r2, r3, #16
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e64:	f043 0201 	orr.w	r2, r3, #1
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e074      	b.n	8003f5a <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	3301      	adds	r3, #1
 8003e74:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e80:	2b40      	cmp	r3, #64	; 0x40
 8003e82:	d1e3      	bne.n	8003e4c <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2240      	movs	r2, #64	; 0x40
 8003e8a:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d014      	beq.n	8003ebc <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4618      	mov	r0, r3
 8003e98:	f7ff f834 	bl	8002f04 <LL_ADC_REG_IsConversionOngoing>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00c      	beq.n	8003ebc <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fe fff1 	bl	8002e8e <LL_ADC_IsDisableOngoing>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d104      	bne.n	8003ebc <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7ff f810 	bl	8002edc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d014      	beq.n	8003eec <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff f843 	bl	8002f52 <LL_ADC_INJ_IsConversionOngoing>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00c      	beq.n	8003eec <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe ffd9 	bl	8002e8e <LL_ADC_IsDisableOngoing>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d104      	bne.n	8003eec <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff f81f 	bl	8002f2a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	2b02      	cmp	r3, #2
 8003ef0:	d005      	beq.n	8003efe <ADC_ConversionStop+0x10e>
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d105      	bne.n	8003f04 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003ef8:	230c      	movs	r3, #12
 8003efa:	617b      	str	r3, [r7, #20]
        break;
 8003efc:	e005      	b.n	8003f0a <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003efe:	2308      	movs	r3, #8
 8003f00:	617b      	str	r3, [r7, #20]
        break;
 8003f02:	e002      	b.n	8003f0a <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003f04:	2304      	movs	r3, #4
 8003f06:	617b      	str	r3, [r7, #20]
        break;
 8003f08:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003f0a:	f7fe fd71 	bl	80029f0 <HAL_GetTick>
 8003f0e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003f10:	e01b      	b.n	8003f4a <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003f12:	f7fe fd6d 	bl	80029f0 <HAL_GetTick>
 8003f16:	4602      	mov	r2, r0
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	1ad3      	subs	r3, r2, r3
 8003f1c:	2b05      	cmp	r3, #5
 8003f1e:	d914      	bls.n	8003f4a <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00d      	beq.n	8003f4a <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f32:	f043 0210 	orr.w	r2, r3, #16
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f3e:	f043 0201 	orr.w	r2, r3, #1
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e007      	b.n	8003f5a <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	4013      	ands	r3, r2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1dc      	bne.n	8003f12 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3720      	adds	r7, #32
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	a33fffff 	.word	0xa33fffff

08003f68 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003f70:	2300      	movs	r3, #0
 8003f72:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fe ff75 	bl	8002e68 <LL_ADC_IsEnabled>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d176      	bne.n	8004072 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	4b3c      	ldr	r3, [pc, #240]	; (800407c <ADC_Enable+0x114>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00d      	beq.n	8003fae <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f96:	f043 0210 	orr.w	r2, r3, #16
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fa2:	f043 0201 	orr.w	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e062      	b.n	8004074 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe ff30 	bl	8002e18 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fc0:	d004      	beq.n	8003fcc <ADC_Enable+0x64>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	4a2e      	ldr	r2, [pc, #184]	; (8004080 <ADC_Enable+0x118>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d101      	bne.n	8003fd0 <ADC_Enable+0x68>
 8003fcc:	4b2d      	ldr	r3, [pc, #180]	; (8004084 <ADC_Enable+0x11c>)
 8003fce:	e000      	b.n	8003fd2 <ADC_Enable+0x6a>
 8003fd0:	4b2d      	ldr	r3, [pc, #180]	; (8004088 <ADC_Enable+0x120>)
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe fd8a 	bl	8002aec <LL_ADC_GetCommonPathInternalCh>
 8003fd8:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003fda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d013      	beq.n	800400a <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fe2:	4b2a      	ldr	r3, [pc, #168]	; (800408c <ADC_Enable+0x124>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	099b      	lsrs	r3, r3, #6
 8003fe8:	4a29      	ldr	r2, [pc, #164]	; (8004090 <ADC_Enable+0x128>)
 8003fea:	fba2 2303 	umull	r2, r3, r2, r3
 8003fee:	099b      	lsrs	r3, r3, #6
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	4613      	mov	r3, r2
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	4413      	add	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ffc:	e002      	b.n	8004004 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	3b01      	subs	r3, #1
 8004002:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004004:	68bb      	ldr	r3, [r7, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f9      	bne.n	8003ffe <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800400a:	f7fe fcf1 	bl	80029f0 <HAL_GetTick>
 800400e:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004010:	e028      	b.n	8004064 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f7fe ff26 	bl	8002e68 <LL_ADC_IsEnabled>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d104      	bne.n	800402c <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4618      	mov	r0, r3
 8004028:	f7fe fef6 	bl	8002e18 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800402c:	f7fe fce0 	bl	80029f0 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d914      	bls.n	8004064 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b01      	cmp	r3, #1
 8004046:	d00d      	beq.n	8004064 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404c:	f043 0210 	orr.w	r2, r3, #16
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004058:	f043 0201 	orr.w	r2, r3, #1
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e007      	b.n	8004074 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b01      	cmp	r3, #1
 8004070:	d1cf      	bne.n	8004012 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004072:	2300      	movs	r3, #0
}
 8004074:	4618      	mov	r0, r3
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}
 800407c:	8000003f 	.word	0x8000003f
 8004080:	50000100 	.word	0x50000100
 8004084:	50000300 	.word	0x50000300
 8004088:	50000700 	.word	0x50000700
 800408c:	20000010 	.word	0x20000010
 8004090:	053e2d63 	.word	0x053e2d63

08004094 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fe fef4 	bl	8002e8e <LL_ADC_IsDisableOngoing>
 80040a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fe fedb 	bl	8002e68 <LL_ADC_IsEnabled>
 80040b2:	4603      	mov	r3, r0
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d047      	beq.n	8004148 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d144      	bne.n	8004148 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 030d 	and.w	r3, r3, #13
 80040c8:	2b01      	cmp	r3, #1
 80040ca:	d10c      	bne.n	80040e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fe feb5 	bl	8002e40 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2203      	movs	r2, #3
 80040dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80040de:	f7fe fc87 	bl	80029f0 <HAL_GetTick>
 80040e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80040e4:	e029      	b.n	800413a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ea:	f043 0210 	orr.w	r2, r3, #16
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040f6:	f043 0201 	orr.w	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e023      	b.n	800414a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004102:	f7fe fc75 	bl	80029f0 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d914      	bls.n	800413a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00d      	beq.n	800413a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004122:	f043 0210 	orr.w	r2, r3, #16
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800412e:	f043 0201 	orr.w	r2, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e007      	b.n	800414a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	689b      	ldr	r3, [r3, #8]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1dc      	bne.n	8004102 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b084      	sub	sp, #16
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004164:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004168:	2b00      	cmp	r3, #0
 800416a:	d14b      	bne.n	8004204 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004170:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d021      	beq.n	80041ca <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4618      	mov	r0, r3
 800418c:	f7fe fd5a 	bl	8002c44 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d032      	beq.n	80041fc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d12b      	bne.n	80041fc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d11f      	bne.n	80041fc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041c0:	f043 0201 	orr.w	r2, r3, #1
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80041c8:	e018      	b.n	80041fc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d111      	bne.n	80041fc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d105      	bne.n	80041fc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041f4:	f043 0201 	orr.w	r2, r3, #1
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f7fd fdd3 	bl	8001da8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004202:	e00e      	b.n	8004222 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004208:	f003 0310 	and.w	r3, r3, #16
 800420c:	2b00      	cmp	r3, #0
 800420e:	d003      	beq.n	8004218 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f7ff f9a2 	bl	800355a <HAL_ADC_ErrorCallback>
}
 8004216:	e004      	b.n	8004222 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800421c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	4798      	blx	r3
}
 8004222:	bf00      	nop
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}

0800422a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800422a:	b580      	push	{r7, lr}
 800422c:	b084      	sub	sp, #16
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004236:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004238:	68f8      	ldr	r0, [r7, #12]
 800423a:	f7fd fd81 	bl	8001d40 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800423e:	bf00      	nop
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b084      	sub	sp, #16
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004252:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004258:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004264:	f043 0204 	orr.w	r2, r3, #4
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f7ff f974 	bl	800355a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004272:	bf00      	nop
 8004274:	3710      	adds	r7, #16
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}

0800427a <LL_ADC_IsEnabled>:
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 0301 	and.w	r3, r3, #1
 800428a:	2b01      	cmp	r3, #1
 800428c:	d101      	bne.n	8004292 <LL_ADC_IsEnabled+0x18>
 800428e:	2301      	movs	r3, #1
 8004290:	e000      	b.n	8004294 <LL_ADC_IsEnabled+0x1a>
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	370c      	adds	r7, #12
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <LL_ADC_StartCalibration>:
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80042b2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042b6:	683a      	ldr	r2, [r7, #0]
 80042b8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80042bc:	4313      	orrs	r3, r2
 80042be:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	609a      	str	r2, [r3, #8]
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <LL_ADC_IsCalibrationOnGoing>:
{
 80042d2:	b480      	push	{r7}
 80042d4:	b083      	sub	sp, #12
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042e2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042e6:	d101      	bne.n	80042ec <LL_ADC_IsCalibrationOnGoing+0x1a>
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <LL_ADC_IsCalibrationOnGoing+0x1c>
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	370c      	adds	r7, #12
 80042f2:	46bd      	mov	sp, r7
 80042f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f8:	4770      	bx	lr

080042fa <LL_ADC_REG_IsConversionOngoing>:
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b04      	cmp	r3, #4
 800430c:	d101      	bne.n	8004312 <LL_ADC_REG_IsConversionOngoing+0x18>
 800430e:	2301      	movs	r3, #1
 8004310:	e000      	b.n	8004314 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
 8004328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800432a:	2300      	movs	r3, #0
 800432c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8004334:	2b01      	cmp	r3, #1
 8004336:	d101      	bne.n	800433c <HAL_ADCEx_Calibration_Start+0x1c>
 8004338:	2302      	movs	r3, #2
 800433a:	e04d      	b.n	80043d8 <HAL_ADCEx_Calibration_Start+0xb8>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	f7ff fea5 	bl	8004094 <ADC_Disable>
 800434a:	4603      	mov	r3, r0
 800434c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d136      	bne.n	80043c2 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004358:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800435c:	f023 0302 	bic.w	r3, r3, #2
 8004360:	f043 0202 	orr.w	r2, r3, #2
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6839      	ldr	r1, [r7, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f7ff ff96 	bl	80042a0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004374:	e014      	b.n	80043a0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	3301      	adds	r3, #1
 800437a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	4a18      	ldr	r2, [pc, #96]	; (80043e0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d90d      	bls.n	80043a0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004388:	f023 0312 	bic.w	r3, r3, #18
 800438c:	f043 0210 	orr.w	r2, r3, #16
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e01b      	b.n	80043d8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff ff94 	bl	80042d2 <LL_ADC_IsCalibrationOnGoing>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d1e2      	bne.n	8004376 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b4:	f023 0303 	bic.w	r3, r3, #3
 80043b8:	f043 0201 	orr.w	r2, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	65da      	str	r2, [r3, #92]	; 0x5c
 80043c0:	e005      	b.n	80043ce <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c6:	f043 0210 	orr.w	r2, r3, #16
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	0004de01 	.word	0x0004de01

080043e4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80043e4:	b590      	push	{r4, r7, lr}
 80043e6:	b0a1      	sub	sp, #132	; 0x84
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80043fe:	2302      	movs	r3, #2
 8004400:	e0e7      	b.n	80045d2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800440a:	2300      	movs	r3, #0
 800440c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800440e:	2300      	movs	r3, #0
 8004410:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800441a:	d102      	bne.n	8004422 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800441c:	4b6f      	ldr	r3, [pc, #444]	; (80045dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	e009      	b.n	8004436 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a6e      	ldr	r2, [pc, #440]	; (80045e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d102      	bne.n	8004432 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 800442c:	4b6d      	ldr	r3, [pc, #436]	; (80045e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800442e:	60bb      	str	r3, [r7, #8]
 8004430:	e001      	b.n	8004436 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8004432:	2300      	movs	r3, #0
 8004434:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10b      	bne.n	8004454 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004440:	f043 0220 	orr.w	r2, r3, #32
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0be      	b.n	80045d2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4618      	mov	r0, r3
 8004458:	f7ff ff4f 	bl	80042fa <LL_ADC_REG_IsConversionOngoing>
 800445c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4618      	mov	r0, r3
 8004464:	f7ff ff49 	bl	80042fa <LL_ADC_REG_IsConversionOngoing>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	f040 80a0 	bne.w	80045b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004470:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004472:	2b00      	cmp	r3, #0
 8004474:	f040 809c 	bne.w	80045b0 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004480:	d004      	beq.n	800448c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a55      	ldr	r2, [pc, #340]	; (80045dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d101      	bne.n	8004490 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 800448c:	4b56      	ldr	r3, [pc, #344]	; (80045e8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800448e:	e000      	b.n	8004492 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004490:	4b56      	ldr	r3, [pc, #344]	; (80045ec <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004492:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d04b      	beq.n	8004534 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800449c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	6859      	ldr	r1, [r3, #4]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044ae:	035b      	lsls	r3, r3, #13
 80044b0:	430b      	orrs	r3, r1
 80044b2:	431a      	orrs	r2, r3
 80044b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044b6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80044c0:	d004      	beq.n	80044cc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a45      	ldr	r2, [pc, #276]	; (80045dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d10f      	bne.n	80044ec <HAL_ADCEx_MultiModeConfigChannel+0x108>
 80044cc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80044d0:	f7ff fed3 	bl	800427a <LL_ADC_IsEnabled>
 80044d4:	4604      	mov	r4, r0
 80044d6:	4841      	ldr	r0, [pc, #260]	; (80045dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80044d8:	f7ff fecf 	bl	800427a <LL_ADC_IsEnabled>
 80044dc:	4603      	mov	r3, r0
 80044de:	4323      	orrs	r3, r4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	bf0c      	ite	eq
 80044e4:	2301      	moveq	r3, #1
 80044e6:	2300      	movne	r3, #0
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	e012      	b.n	8004512 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 80044ec:	483c      	ldr	r0, [pc, #240]	; (80045e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80044ee:	f7ff fec4 	bl	800427a <LL_ADC_IsEnabled>
 80044f2:	4604      	mov	r4, r0
 80044f4:	483b      	ldr	r0, [pc, #236]	; (80045e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80044f6:	f7ff fec0 	bl	800427a <LL_ADC_IsEnabled>
 80044fa:	4603      	mov	r3, r0
 80044fc:	431c      	orrs	r4, r3
 80044fe:	483c      	ldr	r0, [pc, #240]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004500:	f7ff febb 	bl	800427a <LL_ADC_IsEnabled>
 8004504:	4603      	mov	r3, r0
 8004506:	4323      	orrs	r3, r4
 8004508:	2b00      	cmp	r3, #0
 800450a:	bf0c      	ite	eq
 800450c:	2301      	moveq	r3, #1
 800450e:	2300      	movne	r3, #0
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d056      	beq.n	80045c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004516:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800451e:	f023 030f 	bic.w	r3, r3, #15
 8004522:	683a      	ldr	r2, [r7, #0]
 8004524:	6811      	ldr	r1, [r2, #0]
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	6892      	ldr	r2, [r2, #8]
 800452a:	430a      	orrs	r2, r1
 800452c:	431a      	orrs	r2, r3
 800452e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004530:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004532:	e047      	b.n	80045c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004534:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800453c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800453e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004548:	d004      	beq.n	8004554 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a23      	ldr	r2, [pc, #140]	; (80045dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d10f      	bne.n	8004574 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004554:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004558:	f7ff fe8f 	bl	800427a <LL_ADC_IsEnabled>
 800455c:	4604      	mov	r4, r0
 800455e:	481f      	ldr	r0, [pc, #124]	; (80045dc <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004560:	f7ff fe8b 	bl	800427a <LL_ADC_IsEnabled>
 8004564:	4603      	mov	r3, r0
 8004566:	4323      	orrs	r3, r4
 8004568:	2b00      	cmp	r3, #0
 800456a:	bf0c      	ite	eq
 800456c:	2301      	moveq	r3, #1
 800456e:	2300      	movne	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	e012      	b.n	800459a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004574:	481a      	ldr	r0, [pc, #104]	; (80045e0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004576:	f7ff fe80 	bl	800427a <LL_ADC_IsEnabled>
 800457a:	4604      	mov	r4, r0
 800457c:	4819      	ldr	r0, [pc, #100]	; (80045e4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800457e:	f7ff fe7c 	bl	800427a <LL_ADC_IsEnabled>
 8004582:	4603      	mov	r3, r0
 8004584:	431c      	orrs	r4, r3
 8004586:	481a      	ldr	r0, [pc, #104]	; (80045f0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004588:	f7ff fe77 	bl	800427a <LL_ADC_IsEnabled>
 800458c:	4603      	mov	r3, r0
 800458e:	4323      	orrs	r3, r4
 8004590:	2b00      	cmp	r3, #0
 8004592:	bf0c      	ite	eq
 8004594:	2301      	moveq	r3, #1
 8004596:	2300      	movne	r3, #0
 8004598:	b2db      	uxtb	r3, r3
 800459a:	2b00      	cmp	r3, #0
 800459c:	d012      	beq.n	80045c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800459e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80045a6:	f023 030f 	bic.w	r3, r3, #15
 80045aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80045ac:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80045ae:	e009      	b.n	80045c4 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045b4:	f043 0220 	orr.w	r2, r3, #32
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80045c2:	e000      	b.n	80045c6 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80045c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80045ce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3784      	adds	r7, #132	; 0x84
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd90      	pop	{r4, r7, pc}
 80045da:	bf00      	nop
 80045dc:	50000100 	.word	0x50000100
 80045e0:	50000400 	.word	0x50000400
 80045e4:	50000500 	.word	0x50000500
 80045e8:	50000300 	.word	0x50000300
 80045ec:	50000700 	.word	0x50000700
 80045f0:	50000600 	.word	0x50000600

080045f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f003 0307 	and.w	r3, r3, #7
 8004602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004604:	4b0c      	ldr	r3, [pc, #48]	; (8004638 <__NVIC_SetPriorityGrouping+0x44>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800460a:	68ba      	ldr	r2, [r7, #8]
 800460c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004610:	4013      	ands	r3, r2
 8004612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800461c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004626:	4a04      	ldr	r2, [pc, #16]	; (8004638 <__NVIC_SetPriorityGrouping+0x44>)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	60d3      	str	r3, [r2, #12]
}
 800462c:	bf00      	nop
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	e000ed00 	.word	0xe000ed00

0800463c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800463c:	b480      	push	{r7}
 800463e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004640:	4b04      	ldr	r3, [pc, #16]	; (8004654 <__NVIC_GetPriorityGrouping+0x18>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	0a1b      	lsrs	r3, r3, #8
 8004646:	f003 0307 	and.w	r3, r3, #7
}
 800464a:	4618      	mov	r0, r3
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	e000ed00 	.word	0xe000ed00

08004658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	4603      	mov	r3, r0
 8004660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004666:	2b00      	cmp	r3, #0
 8004668:	db0b      	blt.n	8004682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800466a:	79fb      	ldrb	r3, [r7, #7]
 800466c:	f003 021f 	and.w	r2, r3, #31
 8004670:	4907      	ldr	r1, [pc, #28]	; (8004690 <__NVIC_EnableIRQ+0x38>)
 8004672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	2001      	movs	r0, #1
 800467a:	fa00 f202 	lsl.w	r2, r0, r2
 800467e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	e000e100 	.word	0xe000e100

08004694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	6039      	str	r1, [r7, #0]
 800469e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	db0a      	blt.n	80046be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	490c      	ldr	r1, [pc, #48]	; (80046e0 <__NVIC_SetPriority+0x4c>)
 80046ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046b2:	0112      	lsls	r2, r2, #4
 80046b4:	b2d2      	uxtb	r2, r2
 80046b6:	440b      	add	r3, r1
 80046b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80046bc:	e00a      	b.n	80046d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	b2da      	uxtb	r2, r3
 80046c2:	4908      	ldr	r1, [pc, #32]	; (80046e4 <__NVIC_SetPriority+0x50>)
 80046c4:	79fb      	ldrb	r3, [r7, #7]
 80046c6:	f003 030f 	and.w	r3, r3, #15
 80046ca:	3b04      	subs	r3, #4
 80046cc:	0112      	lsls	r2, r2, #4
 80046ce:	b2d2      	uxtb	r2, r2
 80046d0:	440b      	add	r3, r1
 80046d2:	761a      	strb	r2, [r3, #24]
}
 80046d4:	bf00      	nop
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	e000e100 	.word	0xe000e100
 80046e4:	e000ed00 	.word	0xe000ed00

080046e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b089      	sub	sp, #36	; 0x24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	60b9      	str	r1, [r7, #8]
 80046f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f1c3 0307 	rsb	r3, r3, #7
 8004702:	2b04      	cmp	r3, #4
 8004704:	bf28      	it	cs
 8004706:	2304      	movcs	r3, #4
 8004708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	3304      	adds	r3, #4
 800470e:	2b06      	cmp	r3, #6
 8004710:	d902      	bls.n	8004718 <NVIC_EncodePriority+0x30>
 8004712:	69fb      	ldr	r3, [r7, #28]
 8004714:	3b03      	subs	r3, #3
 8004716:	e000      	b.n	800471a <NVIC_EncodePriority+0x32>
 8004718:	2300      	movs	r3, #0
 800471a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800471c:	f04f 32ff 	mov.w	r2, #4294967295
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	fa02 f303 	lsl.w	r3, r2, r3
 8004726:	43da      	mvns	r2, r3
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	401a      	ands	r2, r3
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004730:	f04f 31ff 	mov.w	r1, #4294967295
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	fa01 f303 	lsl.w	r3, r1, r3
 800473a:	43d9      	mvns	r1, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004740:	4313      	orrs	r3, r2
         );
}
 8004742:	4618      	mov	r0, r3
 8004744:	3724      	adds	r7, #36	; 0x24
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
	...

08004750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3b01      	subs	r3, #1
 800475c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004760:	d301      	bcc.n	8004766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004762:	2301      	movs	r3, #1
 8004764:	e00f      	b.n	8004786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004766:	4a0a      	ldr	r2, [pc, #40]	; (8004790 <SysTick_Config+0x40>)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	3b01      	subs	r3, #1
 800476c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800476e:	210f      	movs	r1, #15
 8004770:	f04f 30ff 	mov.w	r0, #4294967295
 8004774:	f7ff ff8e 	bl	8004694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004778:	4b05      	ldr	r3, [pc, #20]	; (8004790 <SysTick_Config+0x40>)
 800477a:	2200      	movs	r2, #0
 800477c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800477e:	4b04      	ldr	r3, [pc, #16]	; (8004790 <SysTick_Config+0x40>)
 8004780:	2207      	movs	r2, #7
 8004782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	e000e010 	.word	0xe000e010

08004794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7ff ff29 	bl	80045f4 <__NVIC_SetPriorityGrouping>
}
 80047a2:	bf00      	nop
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b086      	sub	sp, #24
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	4603      	mov	r3, r0
 80047b2:	60b9      	str	r1, [r7, #8]
 80047b4:	607a      	str	r2, [r7, #4]
 80047b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80047b8:	f7ff ff40 	bl	800463c <__NVIC_GetPriorityGrouping>
 80047bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	68b9      	ldr	r1, [r7, #8]
 80047c2:	6978      	ldr	r0, [r7, #20]
 80047c4:	f7ff ff90 	bl	80046e8 <NVIC_EncodePriority>
 80047c8:	4602      	mov	r2, r0
 80047ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80047ce:	4611      	mov	r1, r2
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff ff5f 	bl	8004694 <__NVIC_SetPriority>
}
 80047d6:	bf00      	nop
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b082      	sub	sp, #8
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	4603      	mov	r3, r0
 80047e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047ec:	4618      	mov	r0, r3
 80047ee:	f7ff ff33 	bl	8004658 <__NVIC_EnableIRQ>
}
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b082      	sub	sp, #8
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7ff ffa4 	bl	8004750 <SysTick_Config>
 8004808:	4603      	mov	r3, r0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3708      	adds	r7, #8
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b082      	sub	sp, #8
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d101      	bne.n	8004824 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e014      	b.n	800484e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	791b      	ldrb	r3, [r3, #4]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d105      	bne.n	800483a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7fd fe21 	bl	800247c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2202      	movs	r2, #2
 800483e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <HAL_DAC_Start>:
  *         (1) On this STM32 series, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  __IO uint32_t wait_loop_index;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e056      	b.n	800491a <HAL_DAC_Start+0xc2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	795b      	ldrb	r3, [r3, #5]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d101      	bne.n	8004878 <HAL_DAC_Start+0x20>
 8004874:	2302      	movs	r3, #2
 8004876:	e050      	b.n	800491a <HAL_DAC_Start+0xc2>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2202      	movs	r2, #2
 8004882:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6819      	ldr	r1, [r3, #0]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	f003 0310 	and.w	r3, r3, #16
 8004890:	2201      	movs	r2, #1
 8004892:	409a      	lsls	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	430a      	orrs	r2, r1
 800489a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  /* Wait loop initialization and execution */
  /* Note: Variable divided by 2 to compensate partially CPU processing cycles, scaling in us split to not exceed 32 */
  /*       bits register capacity and handle low frequency. */
  wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800489c:	4b22      	ldr	r3, [pc, #136]	; (8004928 <HAL_DAC_Start+0xd0>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	099b      	lsrs	r3, r3, #6
 80048a2:	4a22      	ldr	r2, [pc, #136]	; (800492c <HAL_DAC_Start+0xd4>)
 80048a4:	fba2 2303 	umull	r2, r3, r2, r3
 80048a8:	099b      	lsrs	r3, r3, #6
 80048aa:	3301      	adds	r3, #1
 80048ac:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80048ae:	e002      	b.n	80048b6 <HAL_DAC_Start+0x5e>
  {
    wait_loop_index--;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	3b01      	subs	r3, #1
 80048b4:	60fb      	str	r3, [r7, #12]
  while (wait_loop_index != 0UL)
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1f9      	bne.n	80048b0 <HAL_DAC_Start+0x58>
  }

  if (Channel == DAC_CHANNEL_1)
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10f      	bne.n	80048e2 <HAL_DAC_Start+0x8a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d11d      	bne.n	800490c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f042 0201 	orr.w	r2, r2, #1
 80048de:	605a      	str	r2, [r3, #4]
 80048e0:	e014      	b.n	800490c <HAL_DAC_Start+0xb4>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	f003 0310 	and.w	r3, r3, #16
 80048f2:	2102      	movs	r1, #2
 80048f4:	fa01 f303 	lsl.w	r3, r1, r3
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d107      	bne.n	800490c <HAL_DAC_Start+0xb4>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685a      	ldr	r2, [r3, #4]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f042 0202 	orr.w	r2, r2, #2
 800490a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3714      	adds	r7, #20
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	20000010 	.word	0x20000010
 800492c:	053e2d63 	.word	0x053e2d63

08004930 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004930:	b480      	push	{r7}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800493e:	2300      	movs	r3, #0
 8004940:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e018      	b.n	800497e <HAL_DAC_SetValue+0x4e>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d105      	bne.n	800496a <HAL_DAC_SetValue+0x3a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800495e:	697a      	ldr	r2, [r7, #20]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4413      	add	r3, r2
 8004964:	3308      	adds	r3, #8
 8004966:	617b      	str	r3, [r7, #20]
 8004968:	e004      	b.n	8004974 <HAL_DAC_SetValue+0x44>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800496a:	697a      	ldr	r2, [r7, #20]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4413      	add	r3, r2
 8004970:	3314      	adds	r3, #20
 8004972:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	461a      	mov	r2, r3
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	371c      	adds	r7, #28
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
	...

0800498c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b08a      	sub	sp, #40	; 0x28
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004998:	2300      	movs	r3, #0
 800499a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d002      	beq.n	80049a8 <HAL_DAC_ConfigChannel+0x1c>
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d101      	bne.n	80049ac <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e19e      	b.n	8004cea <HAL_DAC_ConfigChannel+0x35e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	795b      	ldrb	r3, [r3, #5]
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d101      	bne.n	80049b8 <HAL_DAC_ConfigChannel+0x2c>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e198      	b.n	8004cea <HAL_DAC_ConfigChannel+0x35e>
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2201      	movs	r2, #1
 80049bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2202      	movs	r2, #2
 80049c2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d17a      	bne.n	8004ac2 <HAL_DAC_ConfigChannel+0x136>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80049cc:	f7fe f810 	bl	80029f0 <HAL_GetTick>
 80049d0:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d13d      	bne.n	8004a54 <HAL_DAC_ConfigChannel+0xc8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80049d8:	e018      	b.n	8004a0c <HAL_DAC_ConfigChannel+0x80>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80049da:	f7fe f809 	bl	80029f0 <HAL_GetTick>
 80049de:	4602      	mov	r2, r0
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d911      	bls.n	8004a0c <HAL_DAC_ConfigChannel+0x80>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <HAL_DAC_ConfigChannel+0x80>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	f043 0208 	orr.w	r2, r3, #8
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2203      	movs	r2, #3
 8004a06:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e16e      	b.n	8004cea <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d1df      	bne.n	80049da <HAL_DAC_ConfigChannel+0x4e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	68ba      	ldr	r2, [r7, #8]
 8004a20:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a22:	641a      	str	r2, [r3, #64]	; 0x40
 8004a24:	e020      	b.n	8004a68 <HAL_DAC_ConfigChannel+0xdc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004a26:	f7fd ffe3 	bl	80029f0 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d90f      	bls.n	8004a54 <HAL_DAC_ConfigChannel+0xc8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	da0a      	bge.n	8004a54 <HAL_DAC_ConfigChannel+0xc8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	f043 0208 	orr.w	r2, r3, #8
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2203      	movs	r2, #3
 8004a4e:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e14a      	b.n	8004cea <HAL_DAC_ConfigChannel+0x35e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	dbe3      	blt.n	8004a26 <HAL_DAC_ConfigChannel+0x9a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68ba      	ldr	r2, [r7, #8]
 8004a64:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004a66:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f003 0310 	and.w	r3, r3, #16
 8004a74:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004a78:	fa01 f303 	lsl.w	r3, r1, r3
 8004a7c:	43db      	mvns	r3, r3
 8004a7e:	ea02 0103 	and.w	r1, r2, r3
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f003 0310 	and.w	r3, r3, #16
 8004a8c:	409a      	lsls	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	430a      	orrs	r2, r1
 8004a94:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f003 0310 	and.w	r3, r3, #16
 8004aa2:	21ff      	movs	r1, #255	; 0xff
 8004aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa8:	43db      	mvns	r3, r3
 8004aaa:	ea02 0103 	and.w	r1, r2, r3
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f003 0310 	and.w	r3, r3, #16
 8004ab8:	409a      	lsls	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d11d      	bne.n	8004b06 <HAL_DAC_ConfigChannel+0x17a>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f003 0310 	and.w	r3, r3, #16
 8004ad8:	221f      	movs	r2, #31
 8004ada:	fa02 f303 	lsl.w	r3, r2, r3
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f003 0310 	and.w	r3, r3, #16
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004afa:	4313      	orrs	r3, r2
 8004afc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b04:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b0c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f003 0310 	and.w	r3, r3, #16
 8004b14:	2207      	movs	r2, #7
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	43db      	mvns	r3, r3
 8004b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1e:	4013      	ands	r3, r2
 8004b20:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d102      	bne.n	8004b30 <HAL_DAC_ConfigChannel+0x1a4>
  {
    connectOnChip = 0x00000000UL;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	623b      	str	r3, [r7, #32]
 8004b2e:	e00f      	b.n	8004b50 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	699b      	ldr	r3, [r3, #24]
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d102      	bne.n	8004b3e <HAL_DAC_ConfigChannel+0x1b2>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	623b      	str	r3, [r7, #32]
 8004b3c:	e008      	b.n	8004b50 <HAL_DAC_ConfigChannel+0x1c4>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d102      	bne.n	8004b4c <HAL_DAC_ConfigChannel+0x1c0>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004b46:	2301      	movs	r3, #1
 8004b48:	623b      	str	r3, [r7, #32]
 8004b4a:	e001      	b.n	8004b50 <HAL_DAC_ConfigChannel+0x1c4>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	695b      	ldr	r3, [r3, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	6a3a      	ldr	r2, [r7, #32]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f003 0310 	and.w	r3, r3, #16
 8004b66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b72:	4013      	ands	r3, r2
 8004b74:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	791b      	ldrb	r3, [r3, #4]
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	d102      	bne.n	8004b84 <HAL_DAC_ConfigChannel+0x1f8>
 8004b7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b82:	e000      	b.n	8004b86 <HAL_DAC_ConfigChannel+0x1fa>
 8004b84:	2300      	movs	r3, #0
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f003 0310 	and.w	r3, r3, #16
 8004b92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b96:	fa02 f303 	lsl.w	r3, r2, r3
 8004b9a:	43db      	mvns	r3, r3
 8004b9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	795b      	ldrb	r3, [r3, #5]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d102      	bne.n	8004bb0 <HAL_DAC_ConfigChannel+0x224>
 8004baa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bae:	e000      	b.n	8004bb2 <HAL_DAC_ConfigChannel+0x226>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004bbe:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d114      	bne.n	8004bf2 <HAL_DAC_ConfigChannel+0x266>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004bc8:	f003 fddc 	bl	8008784 <HAL_RCC_GetHCLKFreq>
 8004bcc:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4a48      	ldr	r2, [pc, #288]	; (8004cf4 <HAL_DAC_ConfigChannel+0x368>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d904      	bls.n	8004be0 <HAL_DAC_ConfigChannel+0x254>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bde:	e00f      	b.n	8004c00 <HAL_DAC_ConfigChannel+0x274>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	4a45      	ldr	r2, [pc, #276]	; (8004cf8 <HAL_DAC_ConfigChannel+0x36c>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d90a      	bls.n	8004bfe <HAL_DAC_ConfigChannel+0x272>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bee:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf0:	e006      	b.n	8004c00 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	627b      	str	r3, [r7, #36]	; 0x24
 8004bfc:	e000      	b.n	8004c00 <HAL_DAC_ConfigChannel+0x274>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004bfe:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	f003 0310 	and.w	r3, r3, #16
 8004c06:	697a      	ldr	r2, [r7, #20]
 8004c08:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	6819      	ldr	r1, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f003 0310 	and.w	r3, r3, #16
 8004c26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2e:	43da      	mvns	r2, r3
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	400a      	ands	r2, r1
 8004c36:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f003 0310 	and.w	r3, r3, #16
 8004c46:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4e:	43db      	mvns	r3, r3
 8004c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c52:	4013      	ands	r3, r2
 8004c54:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f003 0310 	and.w	r3, r3, #16
 8004c62:	697a      	ldr	r2, [r7, #20]
 8004c64:	fa02 f303 	lsl.w	r3, r2, r3
 8004c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c74:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	6819      	ldr	r1, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	22c0      	movs	r2, #192	; 0xc0
 8004c84:	fa02 f303 	lsl.w	r3, r2, r3
 8004c88:	43da      	mvns	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	400a      	ands	r2, r1
 8004c90:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	089b      	lsrs	r3, r3, #2
 8004c98:	f003 030f 	and.w	r3, r3, #15
 8004c9c:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	691b      	ldr	r3, [r3, #16]
 8004ca2:	089b      	lsrs	r3, r3, #2
 8004ca4:	021b      	lsls	r3, r3, #8
 8004ca6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f003 0310 	and.w	r3, r3, #16
 8004cbc:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	ea02 0103 	and.w	r1, r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f003 0310 	and.w	r3, r3, #16
 8004cd0:	697a      	ldr	r2, [r7, #20]
 8004cd2:	409a      	lsls	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	661a      	str	r2, [r3, #96]	; 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004ce8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3728      	adds	r7, #40	; 0x28
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	09896800 	.word	0x09896800
 8004cf8:	04c4b400 	.word	0x04c4b400

08004cfc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e08d      	b.n	8004e2a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	461a      	mov	r2, r3
 8004d14:	4b47      	ldr	r3, [pc, #284]	; (8004e34 <HAL_DMA_Init+0x138>)
 8004d16:	429a      	cmp	r2, r3
 8004d18:	d80f      	bhi.n	8004d3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	4b45      	ldr	r3, [pc, #276]	; (8004e38 <HAL_DMA_Init+0x13c>)
 8004d22:	4413      	add	r3, r2
 8004d24:	4a45      	ldr	r2, [pc, #276]	; (8004e3c <HAL_DMA_Init+0x140>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	091b      	lsrs	r3, r3, #4
 8004d2c:	009a      	lsls	r2, r3, #2
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a42      	ldr	r2, [pc, #264]	; (8004e40 <HAL_DMA_Init+0x144>)
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40
 8004d38:	e00e      	b.n	8004d58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	461a      	mov	r2, r3
 8004d40:	4b40      	ldr	r3, [pc, #256]	; (8004e44 <HAL_DMA_Init+0x148>)
 8004d42:	4413      	add	r3, r2
 8004d44:	4a3d      	ldr	r2, [pc, #244]	; (8004e3c <HAL_DMA_Init+0x140>)
 8004d46:	fba2 2303 	umull	r2, r3, r2, r3
 8004d4a:	091b      	lsrs	r3, r3, #4
 8004d4c:	009a      	lsls	r2, r3, #2
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a3c      	ldr	r2, [pc, #240]	; (8004e48 <HAL_DMA_Init+0x14c>)
 8004d56:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	68fa      	ldr	r2, [r7, #12]
 8004da8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fa10 	bl	80051d0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004db8:	d102      	bne.n	8004dc0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc8:	b2d2      	uxtb	r2, r2
 8004dca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004dd4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d010      	beq.n	8004e00 <HAL_DMA_Init+0x104>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	2b04      	cmp	r3, #4
 8004de4:	d80c      	bhi.n	8004e00 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 fa30 	bl	800524c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004dfc:	605a      	str	r2, [r3, #4]
 8004dfe:	e008      	b.n	8004e12 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	40020407 	.word	0x40020407
 8004e38:	bffdfff8 	.word	0xbffdfff8
 8004e3c:	cccccccd 	.word	0xcccccccd
 8004e40:	40020000 	.word	0x40020000
 8004e44:	bffdfbf8 	.word	0xbffdfbf8
 8004e48:	40020400 	.word	0x40020400

08004e4c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d101      	bne.n	8004e6c <HAL_DMA_Start_IT+0x20>
 8004e68:	2302      	movs	r3, #2
 8004e6a:	e066      	b.n	8004f3a <HAL_DMA_Start_IT+0xee>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d155      	bne.n	8004f2c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0201 	bic.w	r2, r2, #1
 8004e9c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	68f8      	ldr	r0, [r7, #12]
 8004ea6:	f000 f954 	bl	8005152 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d008      	beq.n	8004ec4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681a      	ldr	r2, [r3, #0]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f042 020e 	orr.w	r2, r2, #14
 8004ec0:	601a      	str	r2, [r3, #0]
 8004ec2:	e00f      	b.n	8004ee4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f022 0204 	bic.w	r2, r2, #4
 8004ed2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f042 020a 	orr.w	r2, r2, #10
 8004ee2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d007      	beq.n	8004f02 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004efc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f00:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d007      	beq.n	8004f1a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f18:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681a      	ldr	r2, [r3, #0]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f042 0201 	orr.w	r2, r2, #1
 8004f28:	601a      	str	r2, [r3, #0]
 8004f2a:	e005      	b.n	8004f38 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004f34:	2302      	movs	r3, #2
 8004f36:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004f38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3718      	adds	r7, #24
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b085      	sub	sp, #20
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d005      	beq.n	8004f66 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2204      	movs	r2, #4
 8004f5e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	73fb      	strb	r3, [r7, #15]
 8004f64:	e037      	b.n	8004fd6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f022 020e 	bic.w	r2, r2, #14
 8004f74:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f84:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f022 0201 	bic.w	r2, r2, #1
 8004f94:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9a:	f003 021f 	and.w	r2, r3, #31
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	fa01 f202 	lsl.w	r2, r1, r2
 8004fa8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004fb2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00c      	beq.n	8004fd6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fca:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004fd4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2201      	movs	r2, #1
 8004fda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3714      	adds	r7, #20
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005010:	f003 031f 	and.w	r3, r3, #31
 8005014:	2204      	movs	r2, #4
 8005016:	409a      	lsls	r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	4013      	ands	r3, r2
 800501c:	2b00      	cmp	r3, #0
 800501e:	d026      	beq.n	800506e <HAL_DMA_IRQHandler+0x7a>
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	f003 0304 	and.w	r3, r3, #4
 8005026:	2b00      	cmp	r3, #0
 8005028:	d021      	beq.n	800506e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 0320 	and.w	r3, r3, #32
 8005034:	2b00      	cmp	r3, #0
 8005036:	d107      	bne.n	8005048 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 0204 	bic.w	r2, r2, #4
 8005046:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504c:	f003 021f 	and.w	r2, r3, #31
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005054:	2104      	movs	r1, #4
 8005056:	fa01 f202 	lsl.w	r2, r1, r2
 800505a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005060:	2b00      	cmp	r3, #0
 8005062:	d071      	beq.n	8005148 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800506c:	e06c      	b.n	8005148 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005072:	f003 031f 	and.w	r3, r3, #31
 8005076:	2202      	movs	r2, #2
 8005078:	409a      	lsls	r2, r3
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	4013      	ands	r3, r2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d02e      	beq.n	80050e0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f003 0302 	and.w	r3, r3, #2
 8005088:	2b00      	cmp	r3, #0
 800508a:	d029      	beq.n	80050e0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0320 	and.w	r3, r3, #32
 8005096:	2b00      	cmp	r3, #0
 8005098:	d10b      	bne.n	80050b2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 020a 	bic.w	r2, r2, #10
 80050a8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2201      	movs	r2, #1
 80050ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b6:	f003 021f 	and.w	r2, r3, #31
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	2102      	movs	r1, #2
 80050c0:	fa01 f202 	lsl.w	r2, r1, r2
 80050c4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d038      	beq.n	8005148 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80050de:	e033      	b.n	8005148 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e4:	f003 031f 	and.w	r3, r3, #31
 80050e8:	2208      	movs	r2, #8
 80050ea:	409a      	lsls	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4013      	ands	r3, r2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d02a      	beq.n	800514a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d025      	beq.n	800514a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 020e 	bic.w	r2, r2, #14
 800510c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005112:	f003 021f 	and.w	r2, r3, #31
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	2101      	movs	r1, #1
 800511c:	fa01 f202 	lsl.w	r2, r1, r2
 8005120:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800513c:	2b00      	cmp	r3, #0
 800513e:	d004      	beq.n	800514a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005148:	bf00      	nop
 800514a:	bf00      	nop
}
 800514c:	3710      	adds	r7, #16
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005152:	b480      	push	{r7}
 8005154:	b085      	sub	sp, #20
 8005156:	af00      	add	r7, sp, #0
 8005158:	60f8      	str	r0, [r7, #12]
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	607a      	str	r2, [r7, #4]
 800515e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005164:	68fa      	ldr	r2, [r7, #12]
 8005166:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005168:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800516e:	2b00      	cmp	r3, #0
 8005170:	d004      	beq.n	800517c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800517a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005180:	f003 021f 	and.w	r2, r3, #31
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005188:	2101      	movs	r1, #1
 800518a:	fa01 f202 	lsl.w	r2, r1, r2
 800518e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	683a      	ldr	r2, [r7, #0]
 8005196:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	2b10      	cmp	r3, #16
 800519e:	d108      	bne.n	80051b2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80051b0:	e007      	b.n	80051c2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	60da      	str	r2, [r3, #12]
}
 80051c2:	bf00      	nop
 80051c4:	3714      	adds	r7, #20
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
	...

080051d0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b087      	sub	sp, #28
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	461a      	mov	r2, r3
 80051de:	4b16      	ldr	r3, [pc, #88]	; (8005238 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d802      	bhi.n	80051ea <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80051e4:	4b15      	ldr	r3, [pc, #84]	; (800523c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80051e6:	617b      	str	r3, [r7, #20]
 80051e8:	e001      	b.n	80051ee <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80051ea:	4b15      	ldr	r3, [pc, #84]	; (8005240 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80051ec:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	3b08      	subs	r3, #8
 80051fa:	4a12      	ldr	r2, [pc, #72]	; (8005244 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80051fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005200:	091b      	lsrs	r3, r3, #4
 8005202:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005208:	089b      	lsrs	r3, r3, #2
 800520a:	009a      	lsls	r2, r3, #2
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	4413      	add	r3, r2
 8005210:	461a      	mov	r2, r3
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a0b      	ldr	r2, [pc, #44]	; (8005248 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800521a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f003 031f 	and.w	r3, r3, #31
 8005222:	2201      	movs	r2, #1
 8005224:	409a      	lsls	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	651a      	str	r2, [r3, #80]	; 0x50
}
 800522a:	bf00      	nop
 800522c:	371c      	adds	r7, #28
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	40020407 	.word	0x40020407
 800523c:	40020800 	.word	0x40020800
 8005240:	40020820 	.word	0x40020820
 8005244:	cccccccd 	.word	0xcccccccd
 8005248:	40020880 	.word	0x40020880

0800524c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	b2db      	uxtb	r3, r3
 800525a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800525c:	68fa      	ldr	r2, [r7, #12]
 800525e:	4b0b      	ldr	r3, [pc, #44]	; (800528c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8005260:	4413      	add	r3, r2
 8005262:	009b      	lsls	r3, r3, #2
 8005264:	461a      	mov	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a08      	ldr	r2, [pc, #32]	; (8005290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800526e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	3b01      	subs	r3, #1
 8005274:	f003 031f 	and.w	r3, r3, #31
 8005278:	2201      	movs	r2, #1
 800527a:	409a      	lsls	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005280:	bf00      	nop
 8005282:	3714      	adds	r7, #20
 8005284:	46bd      	mov	sp, r7
 8005286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528a:	4770      	bx	lr
 800528c:	1000823f 	.word	0x1000823f
 8005290:	40020940 	.word	0x40020940

08005294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005294:	b480      	push	{r7}
 8005296:	b087      	sub	sp, #28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800529e:	2300      	movs	r3, #0
 80052a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80052a2:	e15a      	b.n	800555a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	2101      	movs	r1, #1
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	fa01 f303 	lsl.w	r3, r1, r3
 80052b0:	4013      	ands	r3, r2
 80052b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	f000 814c 	beq.w	8005554 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f003 0303 	and.w	r3, r3, #3
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d005      	beq.n	80052d4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d130      	bne.n	8005336 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	2203      	movs	r2, #3
 80052e0:	fa02 f303 	lsl.w	r3, r2, r3
 80052e4:	43db      	mvns	r3, r3
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	4013      	ands	r3, r2
 80052ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	68da      	ldr	r2, [r3, #12]
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	005b      	lsls	r3, r3, #1
 80052f4:	fa02 f303 	lsl.w	r3, r2, r3
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800530a:	2201      	movs	r2, #1
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	fa02 f303 	lsl.w	r3, r2, r3
 8005312:	43db      	mvns	r3, r3
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	4013      	ands	r3, r2
 8005318:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	091b      	lsrs	r3, r3, #4
 8005320:	f003 0201 	and.w	r2, r3, #1
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	fa02 f303 	lsl.w	r3, r2, r3
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	693a      	ldr	r2, [r7, #16]
 8005334:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	f003 0303 	and.w	r3, r3, #3
 800533e:	2b03      	cmp	r3, #3
 8005340:	d017      	beq.n	8005372 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	005b      	lsls	r3, r3, #1
 800534c:	2203      	movs	r2, #3
 800534e:	fa02 f303 	lsl.w	r3, r2, r3
 8005352:	43db      	mvns	r3, r3
 8005354:	693a      	ldr	r2, [r7, #16]
 8005356:	4013      	ands	r3, r2
 8005358:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	689a      	ldr	r2, [r3, #8]
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	005b      	lsls	r3, r3, #1
 8005362:	fa02 f303 	lsl.w	r3, r2, r3
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f003 0303 	and.w	r3, r3, #3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d123      	bne.n	80053c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	08da      	lsrs	r2, r3, #3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	3208      	adds	r2, #8
 8005386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800538a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f003 0307 	and.w	r3, r3, #7
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	220f      	movs	r2, #15
 8005396:	fa02 f303 	lsl.w	r3, r2, r3
 800539a:	43db      	mvns	r3, r3
 800539c:	693a      	ldr	r2, [r7, #16]
 800539e:	4013      	ands	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	691a      	ldr	r2, [r3, #16]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f003 0307 	and.w	r3, r3, #7
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	fa02 f303 	lsl.w	r3, r2, r3
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	08da      	lsrs	r2, r3, #3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3208      	adds	r2, #8
 80053c0:	6939      	ldr	r1, [r7, #16]
 80053c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	005b      	lsls	r3, r3, #1
 80053d0:	2203      	movs	r2, #3
 80053d2:	fa02 f303 	lsl.w	r3, r2, r3
 80053d6:	43db      	mvns	r3, r3
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4013      	ands	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f003 0203 	and.w	r2, r3, #3
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	fa02 f303 	lsl.w	r3, r2, r3
 80053ee:	693a      	ldr	r2, [r7, #16]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 80a6 	beq.w	8005554 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005408:	4b5b      	ldr	r3, [pc, #364]	; (8005578 <HAL_GPIO_Init+0x2e4>)
 800540a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800540c:	4a5a      	ldr	r2, [pc, #360]	; (8005578 <HAL_GPIO_Init+0x2e4>)
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	6613      	str	r3, [r2, #96]	; 0x60
 8005414:	4b58      	ldr	r3, [pc, #352]	; (8005578 <HAL_GPIO_Init+0x2e4>)
 8005416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	60bb      	str	r3, [r7, #8]
 800541e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005420:	4a56      	ldr	r2, [pc, #344]	; (800557c <HAL_GPIO_Init+0x2e8>)
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	089b      	lsrs	r3, r3, #2
 8005426:	3302      	adds	r3, #2
 8005428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	f003 0303 	and.w	r3, r3, #3
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	220f      	movs	r2, #15
 8005438:	fa02 f303 	lsl.w	r3, r2, r3
 800543c:	43db      	mvns	r3, r3
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4013      	ands	r3, r2
 8005442:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800544a:	d01f      	beq.n	800548c <HAL_GPIO_Init+0x1f8>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a4c      	ldr	r2, [pc, #304]	; (8005580 <HAL_GPIO_Init+0x2ec>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d019      	beq.n	8005488 <HAL_GPIO_Init+0x1f4>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a4b      	ldr	r2, [pc, #300]	; (8005584 <HAL_GPIO_Init+0x2f0>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d013      	beq.n	8005484 <HAL_GPIO_Init+0x1f0>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	4a4a      	ldr	r2, [pc, #296]	; (8005588 <HAL_GPIO_Init+0x2f4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00d      	beq.n	8005480 <HAL_GPIO_Init+0x1ec>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	4a49      	ldr	r2, [pc, #292]	; (800558c <HAL_GPIO_Init+0x2f8>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d007      	beq.n	800547c <HAL_GPIO_Init+0x1e8>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a48      	ldr	r2, [pc, #288]	; (8005590 <HAL_GPIO_Init+0x2fc>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d101      	bne.n	8005478 <HAL_GPIO_Init+0x1e4>
 8005474:	2305      	movs	r3, #5
 8005476:	e00a      	b.n	800548e <HAL_GPIO_Init+0x1fa>
 8005478:	2306      	movs	r3, #6
 800547a:	e008      	b.n	800548e <HAL_GPIO_Init+0x1fa>
 800547c:	2304      	movs	r3, #4
 800547e:	e006      	b.n	800548e <HAL_GPIO_Init+0x1fa>
 8005480:	2303      	movs	r3, #3
 8005482:	e004      	b.n	800548e <HAL_GPIO_Init+0x1fa>
 8005484:	2302      	movs	r3, #2
 8005486:	e002      	b.n	800548e <HAL_GPIO_Init+0x1fa>
 8005488:	2301      	movs	r3, #1
 800548a:	e000      	b.n	800548e <HAL_GPIO_Init+0x1fa>
 800548c:	2300      	movs	r3, #0
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	f002 0203 	and.w	r2, r2, #3
 8005494:	0092      	lsls	r2, r2, #2
 8005496:	4093      	lsls	r3, r2
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800549e:	4937      	ldr	r1, [pc, #220]	; (800557c <HAL_GPIO_Init+0x2e8>)
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	089b      	lsrs	r3, r3, #2
 80054a4:	3302      	adds	r3, #2
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054ac:	4b39      	ldr	r3, [pc, #228]	; (8005594 <HAL_GPIO_Init+0x300>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	43db      	mvns	r3, r3
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4013      	ands	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80054c8:	693a      	ldr	r2, [r7, #16]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80054d0:	4a30      	ldr	r2, [pc, #192]	; (8005594 <HAL_GPIO_Init+0x300>)
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80054d6:	4b2f      	ldr	r3, [pc, #188]	; (8005594 <HAL_GPIO_Init+0x300>)
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	43db      	mvns	r3, r3
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	4013      	ands	r3, r2
 80054e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d003      	beq.n	80054fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80054f2:	693a      	ldr	r2, [r7, #16]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80054fa:	4a26      	ldr	r2, [pc, #152]	; (8005594 <HAL_GPIO_Init+0x300>)
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005500:	4b24      	ldr	r3, [pc, #144]	; (8005594 <HAL_GPIO_Init+0x300>)
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	43db      	mvns	r3, r3
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4013      	ands	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800551c:	693a      	ldr	r2, [r7, #16]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	4313      	orrs	r3, r2
 8005522:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005524:	4a1b      	ldr	r2, [pc, #108]	; (8005594 <HAL_GPIO_Init+0x300>)
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800552a:	4b1a      	ldr	r3, [pc, #104]	; (8005594 <HAL_GPIO_Init+0x300>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	43db      	mvns	r3, r3
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	4013      	ands	r3, r2
 8005538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4313      	orrs	r3, r2
 800554c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800554e:	4a11      	ldr	r2, [pc, #68]	; (8005594 <HAL_GPIO_Init+0x300>)
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	3301      	adds	r3, #1
 8005558:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	fa22 f303 	lsr.w	r3, r2, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	f47f ae9d 	bne.w	80052a4 <HAL_GPIO_Init+0x10>
  }
}
 800556a:	bf00      	nop
 800556c:	bf00      	nop
 800556e:	371c      	adds	r7, #28
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	40021000 	.word	0x40021000
 800557c:	40010000 	.word	0x40010000
 8005580:	48000400 	.word	0x48000400
 8005584:	48000800 	.word	0x48000800
 8005588:	48000c00 	.word	0x48000c00
 800558c:	48001000 	.word	0x48001000
 8005590:	48001400 	.word	0x48001400
 8005594:	40010400 	.word	0x40010400

08005598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	460b      	mov	r3, r1
 80055a2:	807b      	strh	r3, [r7, #2]
 80055a4:	4613      	mov	r3, r2
 80055a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80055a8:	787b      	ldrb	r3, [r7, #1]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d003      	beq.n	80055b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055ae:	887a      	ldrh	r2, [r7, #2]
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055b4:	e002      	b.n	80055bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055b6:	887a      	ldrh	r2, [r7, #2]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80055bc:	bf00      	nop
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b082      	sub	sp, #8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	4603      	mov	r3, r0
 80055d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80055d2:	4b08      	ldr	r3, [pc, #32]	; (80055f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055d4:	695a      	ldr	r2, [r3, #20]
 80055d6:	88fb      	ldrh	r3, [r7, #6]
 80055d8:	4013      	ands	r3, r2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d006      	beq.n	80055ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055de:	4a05      	ldr	r2, [pc, #20]	; (80055f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055e0:	88fb      	ldrh	r3, [r7, #6]
 80055e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055e4:	88fb      	ldrh	r3, [r7, #6]
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 f806 	bl	80055f8 <HAL_GPIO_EXTI_Callback>
  }
}
 80055ec:	bf00      	nop
 80055ee:	3708      	adds	r7, #8
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40010400 	.word	0x40010400

080055f8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	4603      	mov	r3, r0
 8005600:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005602:	bf00      	nop
 8005604:	370c      	adds	r7, #12
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr

0800560e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b082      	sub	sp, #8
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d101      	bne.n	8005620 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800561c:	2301      	movs	r3, #1
 800561e:	e08d      	b.n	800573c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b00      	cmp	r3, #0
 800562a:	d106      	bne.n	800563a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7fc ff5f 	bl	80024f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2224      	movs	r2, #36	; 0x24
 800563e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f022 0201 	bic.w	r2, r2, #1
 8005650:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800565e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	689a      	ldr	r2, [r3, #8]
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800566e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d107      	bne.n	8005688 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005684:	609a      	str	r2, [r3, #8]
 8005686:	e006      	b.n	8005696 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005694:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	2b02      	cmp	r3, #2
 800569c:	d108      	bne.n	80056b0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	685a      	ldr	r2, [r3, #4]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056ac:	605a      	str	r2, [r3, #4]
 80056ae:	e007      	b.n	80056c0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056be:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	6812      	ldr	r2, [r2, #0]
 80056ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80056ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056d2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80056e2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	691a      	ldr	r2, [r3, #16]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	699b      	ldr	r3, [r3, #24]
 80056f4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	430a      	orrs	r2, r1
 80056fc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	69d9      	ldr	r1, [r3, #28]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6a1a      	ldr	r2, [r3, #32]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f042 0201 	orr.w	r2, r2, #1
 800571c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2200      	movs	r2, #0
 8005722:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af02      	add	r7, sp, #8
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	4608      	mov	r0, r1
 800574e:	4611      	mov	r1, r2
 8005750:	461a      	mov	r2, r3
 8005752:	4603      	mov	r3, r0
 8005754:	817b      	strh	r3, [r7, #10]
 8005756:	460b      	mov	r3, r1
 8005758:	813b      	strh	r3, [r7, #8]
 800575a:	4613      	mov	r3, r2
 800575c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b20      	cmp	r3, #32
 8005768:	f040 80f9 	bne.w	800595e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800576c:	6a3b      	ldr	r3, [r7, #32]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d002      	beq.n	8005778 <HAL_I2C_Mem_Write+0x34>
 8005772:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005774:	2b00      	cmp	r3, #0
 8005776:	d105      	bne.n	8005784 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800577e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e0ed      	b.n	8005960 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <HAL_I2C_Mem_Write+0x4e>
 800578e:	2302      	movs	r3, #2
 8005790:	e0e6      	b.n	8005960 <HAL_I2C_Mem_Write+0x21c>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800579a:	f7fd f929 	bl	80029f0 <HAL_GetTick>
 800579e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	2319      	movs	r3, #25
 80057a6:	2201      	movs	r2, #1
 80057a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 fac3 	bl	8005d38 <I2C_WaitOnFlagUntilTimeout>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e0d1      	b.n	8005960 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2221      	movs	r2, #33	; 0x21
 80057c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2240      	movs	r2, #64	; 0x40
 80057c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a3a      	ldr	r2, [r7, #32]
 80057d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80057dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057e4:	88f8      	ldrh	r0, [r7, #6]
 80057e6:	893a      	ldrh	r2, [r7, #8]
 80057e8:	8979      	ldrh	r1, [r7, #10]
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	9301      	str	r3, [sp, #4]
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	4603      	mov	r3, r0
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 f9d3 	bl	8005ba0 <I2C_RequestMemoryWrite>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d005      	beq.n	800580c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2200      	movs	r2, #0
 8005804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e0a9      	b.n	8005960 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005810:	b29b      	uxth	r3, r3
 8005812:	2bff      	cmp	r3, #255	; 0xff
 8005814:	d90e      	bls.n	8005834 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	22ff      	movs	r2, #255	; 0xff
 800581a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005820:	b2da      	uxtb	r2, r3
 8005822:	8979      	ldrh	r1, [r7, #10]
 8005824:	2300      	movs	r3, #0
 8005826:	9300      	str	r3, [sp, #0]
 8005828:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f000 fc47 	bl	80060c0 <I2C_TransferConfig>
 8005832:	e00f      	b.n	8005854 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005838:	b29a      	uxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005842:	b2da      	uxtb	r2, r3
 8005844:	8979      	ldrh	r1, [r7, #10]
 8005846:	2300      	movs	r3, #0
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 fc36 	bl	80060c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005854:	697a      	ldr	r2, [r7, #20]
 8005856:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005858:	68f8      	ldr	r0, [r7, #12]
 800585a:	f000 fac6 	bl	8005dea <I2C_WaitOnTXISFlagUntilTimeout>
 800585e:	4603      	mov	r3, r0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d001      	beq.n	8005868 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e07b      	b.n	8005960 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586c:	781a      	ldrb	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005882:	b29b      	uxth	r3, r3
 8005884:	3b01      	subs	r3, #1
 8005886:	b29a      	uxth	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800589c:	b29b      	uxth	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d034      	beq.n	800590c <HAL_I2C_Mem_Write+0x1c8>
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d130      	bne.n	800590c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	9300      	str	r3, [sp, #0]
 80058ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b0:	2200      	movs	r2, #0
 80058b2:	2180      	movs	r1, #128	; 0x80
 80058b4:	68f8      	ldr	r0, [r7, #12]
 80058b6:	f000 fa3f 	bl	8005d38 <I2C_WaitOnFlagUntilTimeout>
 80058ba:	4603      	mov	r3, r0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d001      	beq.n	80058c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e04d      	b.n	8005960 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	2bff      	cmp	r3, #255	; 0xff
 80058cc:	d90e      	bls.n	80058ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	22ff      	movs	r2, #255	; 0xff
 80058d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058d8:	b2da      	uxtb	r2, r3
 80058da:	8979      	ldrh	r1, [r7, #10]
 80058dc:	2300      	movs	r3, #0
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 fbeb 	bl	80060c0 <I2C_TransferConfig>
 80058ea:	e00f      	b.n	800590c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058fa:	b2da      	uxtb	r2, r3
 80058fc:	8979      	ldrh	r1, [r7, #10]
 80058fe:	2300      	movs	r3, #0
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005906:	68f8      	ldr	r0, [r7, #12]
 8005908:	f000 fbda 	bl	80060c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005910:	b29b      	uxth	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d19e      	bne.n	8005854 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005916:	697a      	ldr	r2, [r7, #20]
 8005918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 faac 	bl	8005e78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e01a      	b.n	8005960 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	2220      	movs	r2, #32
 8005930:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	6859      	ldr	r1, [r3, #4]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	4b0a      	ldr	r3, [pc, #40]	; (8005968 <HAL_I2C_Mem_Write+0x224>)
 800593e:	400b      	ands	r3, r1
 8005940:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2220      	movs	r2, #32
 8005946:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	e000      	b.n	8005960 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800595e:	2302      	movs	r3, #2
  }
}
 8005960:	4618      	mov	r0, r3
 8005962:	3718      	adds	r7, #24
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	fe00e800 	.word	0xfe00e800

0800596c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b088      	sub	sp, #32
 8005970:	af02      	add	r7, sp, #8
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	4608      	mov	r0, r1
 8005976:	4611      	mov	r1, r2
 8005978:	461a      	mov	r2, r3
 800597a:	4603      	mov	r3, r0
 800597c:	817b      	strh	r3, [r7, #10]
 800597e:	460b      	mov	r3, r1
 8005980:	813b      	strh	r3, [r7, #8]
 8005982:	4613      	mov	r3, r2
 8005984:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b20      	cmp	r3, #32
 8005990:	f040 80fd 	bne.w	8005b8e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <HAL_I2C_Mem_Read+0x34>
 800599a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800599c:	2b00      	cmp	r3, #0
 800599e:	d105      	bne.n	80059ac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80059a6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e0f1      	b.n	8005b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d101      	bne.n	80059ba <HAL_I2C_Mem_Read+0x4e>
 80059b6:	2302      	movs	r3, #2
 80059b8:	e0ea      	b.n	8005b90 <HAL_I2C_Mem_Read+0x224>
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059c2:	f7fd f815 	bl	80029f0 <HAL_GetTick>
 80059c6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	9300      	str	r3, [sp, #0]
 80059cc:	2319      	movs	r3, #25
 80059ce:	2201      	movs	r2, #1
 80059d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80059d4:	68f8      	ldr	r0, [r7, #12]
 80059d6:	f000 f9af 	bl	8005d38 <I2C_WaitOnFlagUntilTimeout>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d001      	beq.n	80059e4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e0d5      	b.n	8005b90 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2222      	movs	r2, #34	; 0x22
 80059e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2240      	movs	r2, #64	; 0x40
 80059f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	6a3a      	ldr	r2, [r7, #32]
 80059fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005a04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005a0c:	88f8      	ldrh	r0, [r7, #6]
 8005a0e:	893a      	ldrh	r2, [r7, #8]
 8005a10:	8979      	ldrh	r1, [r7, #10]
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	9301      	str	r3, [sp, #4]
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f000 f913 	bl	8005c48 <I2C_RequestMemoryRead>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d005      	beq.n	8005a34 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e0ad      	b.n	8005b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2bff      	cmp	r3, #255	; 0xff
 8005a3c:	d90e      	bls.n	8005a5c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	22ff      	movs	r2, #255	; 0xff
 8005a42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a48:	b2da      	uxtb	r2, r3
 8005a4a:	8979      	ldrh	r1, [r7, #10]
 8005a4c:	4b52      	ldr	r3, [pc, #328]	; (8005b98 <HAL_I2C_Mem_Read+0x22c>)
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005a54:	68f8      	ldr	r0, [r7, #12]
 8005a56:	f000 fb33 	bl	80060c0 <I2C_TransferConfig>
 8005a5a:	e00f      	b.n	8005a7c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	8979      	ldrh	r1, [r7, #10]
 8005a6e:	4b4a      	ldr	r3, [pc, #296]	; (8005b98 <HAL_I2C_Mem_Read+0x22c>)
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a76:	68f8      	ldr	r0, [r7, #12]
 8005a78:	f000 fb22 	bl	80060c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a82:	2200      	movs	r2, #0
 8005a84:	2104      	movs	r1, #4
 8005a86:	68f8      	ldr	r0, [r7, #12]
 8005a88:	f000 f956 	bl	8005d38 <I2C_WaitOnFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d001      	beq.n	8005a96 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e07c      	b.n	8005b90 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa0:	b2d2      	uxtb	r2, r2
 8005aa2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005abe:	b29b      	uxth	r3, r3
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	b29a      	uxth	r2, r3
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005acc:	b29b      	uxth	r3, r3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d034      	beq.n	8005b3c <HAL_I2C_Mem_Read+0x1d0>
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d130      	bne.n	8005b3c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	9300      	str	r3, [sp, #0]
 8005ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	2180      	movs	r1, #128	; 0x80
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 f927 	bl	8005d38 <I2C_WaitOnFlagUntilTimeout>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d001      	beq.n	8005af4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e04d      	b.n	8005b90 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	2bff      	cmp	r3, #255	; 0xff
 8005afc:	d90e      	bls.n	8005b1c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	22ff      	movs	r2, #255	; 0xff
 8005b02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	8979      	ldrh	r1, [r7, #10]
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 fad3 	bl	80060c0 <I2C_TransferConfig>
 8005b1a:	e00f      	b.n	8005b3c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b2a:	b2da      	uxtb	r2, r3
 8005b2c:	8979      	ldrh	r1, [r7, #10]
 8005b2e:	2300      	movs	r3, #0
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b36:	68f8      	ldr	r0, [r7, #12]
 8005b38:	f000 fac2 	bl	80060c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d19a      	bne.n	8005a7c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b46:	697a      	ldr	r2, [r7, #20]
 8005b48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f994 	bl	8005e78 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005b56:	2301      	movs	r3, #1
 8005b58:	e01a      	b.n	8005b90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2220      	movs	r2, #32
 8005b60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6859      	ldr	r1, [r3, #4]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	4b0b      	ldr	r3, [pc, #44]	; (8005b9c <HAL_I2C_Mem_Read+0x230>)
 8005b6e:	400b      	ands	r3, r1
 8005b70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2220      	movs	r2, #32
 8005b76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	e000      	b.n	8005b90 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005b8e:	2302      	movs	r3, #2
  }
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	80002400 	.word	0x80002400
 8005b9c:	fe00e800 	.word	0xfe00e800

08005ba0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	4608      	mov	r0, r1
 8005baa:	4611      	mov	r1, r2
 8005bac:	461a      	mov	r2, r3
 8005bae:	4603      	mov	r3, r0
 8005bb0:	817b      	strh	r3, [r7, #10]
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	813b      	strh	r3, [r7, #8]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005bba:	88fb      	ldrh	r3, [r7, #6]
 8005bbc:	b2da      	uxtb	r2, r3
 8005bbe:	8979      	ldrh	r1, [r7, #10]
 8005bc0:	4b20      	ldr	r3, [pc, #128]	; (8005c44 <I2C_RequestMemoryWrite+0xa4>)
 8005bc2:	9300      	str	r3, [sp, #0]
 8005bc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f000 fa79 	bl	80060c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	69b9      	ldr	r1, [r7, #24]
 8005bd2:	68f8      	ldr	r0, [r7, #12]
 8005bd4:	f000 f909 	bl	8005dea <I2C_WaitOnTXISFlagUntilTimeout>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e02c      	b.n	8005c3c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005be2:	88fb      	ldrh	r3, [r7, #6]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d105      	bne.n	8005bf4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005be8:	893b      	ldrh	r3, [r7, #8]
 8005bea:	b2da      	uxtb	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	629a      	str	r2, [r3, #40]	; 0x28
 8005bf2:	e015      	b.n	8005c20 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005bf4:	893b      	ldrh	r3, [r7, #8]
 8005bf6:	0a1b      	lsrs	r3, r3, #8
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	b2da      	uxtb	r2, r3
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c02:	69fa      	ldr	r2, [r7, #28]
 8005c04:	69b9      	ldr	r1, [r7, #24]
 8005c06:	68f8      	ldr	r0, [r7, #12]
 8005c08:	f000 f8ef 	bl	8005dea <I2C_WaitOnTXISFlagUntilTimeout>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e012      	b.n	8005c3c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c16:	893b      	ldrh	r3, [r7, #8]
 8005c18:	b2da      	uxtb	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	9300      	str	r3, [sp, #0]
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	2200      	movs	r2, #0
 8005c28:	2180      	movs	r1, #128	; 0x80
 8005c2a:	68f8      	ldr	r0, [r7, #12]
 8005c2c:	f000 f884 	bl	8005d38 <I2C_WaitOnFlagUntilTimeout>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d001      	beq.n	8005c3a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005c3a:	2300      	movs	r3, #0
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}
 8005c44:	80002000 	.word	0x80002000

08005c48 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af02      	add	r7, sp, #8
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	4608      	mov	r0, r1
 8005c52:	4611      	mov	r1, r2
 8005c54:	461a      	mov	r2, r3
 8005c56:	4603      	mov	r3, r0
 8005c58:	817b      	strh	r3, [r7, #10]
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	813b      	strh	r3, [r7, #8]
 8005c5e:	4613      	mov	r3, r2
 8005c60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005c62:	88fb      	ldrh	r3, [r7, #6]
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	8979      	ldrh	r1, [r7, #10]
 8005c68:	4b20      	ldr	r3, [pc, #128]	; (8005cec <I2C_RequestMemoryRead+0xa4>)
 8005c6a:	9300      	str	r3, [sp, #0]
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 fa26 	bl	80060c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c74:	69fa      	ldr	r2, [r7, #28]
 8005c76:	69b9      	ldr	r1, [r7, #24]
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 f8b6 	bl	8005dea <I2C_WaitOnTXISFlagUntilTimeout>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d001      	beq.n	8005c88 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e02c      	b.n	8005ce2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c88:	88fb      	ldrh	r3, [r7, #6]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d105      	bne.n	8005c9a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005c8e:	893b      	ldrh	r3, [r7, #8]
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	629a      	str	r2, [r3, #40]	; 0x28
 8005c98:	e015      	b.n	8005cc6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005c9a:	893b      	ldrh	r3, [r7, #8]
 8005c9c:	0a1b      	lsrs	r3, r3, #8
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	69b9      	ldr	r1, [r7, #24]
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 f89c 	bl	8005dea <I2C_WaitOnTXISFlagUntilTimeout>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e012      	b.n	8005ce2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005cbc:	893b      	ldrh	r3, [r7, #8]
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	9300      	str	r3, [sp, #0]
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2140      	movs	r1, #64	; 0x40
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 f831 	bl	8005d38 <I2C_WaitOnFlagUntilTimeout>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d001      	beq.n	8005ce0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	e000      	b.n	8005ce2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	80002000 	.word	0x80002000

08005cf0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	699b      	ldr	r3, [r3, #24]
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d103      	bne.n	8005d0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d007      	beq.n	8005d2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	699a      	ldr	r2, [r3, #24]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f042 0201 	orr.w	r2, r2, #1
 8005d2a:	619a      	str	r2, [r3, #24]
  }
}
 8005d2c:	bf00      	nop
 8005d2e:	370c      	adds	r7, #12
 8005d30:	46bd      	mov	sp, r7
 8005d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d36:	4770      	bx	lr

08005d38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	603b      	str	r3, [r7, #0]
 8005d44:	4613      	mov	r3, r2
 8005d46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d48:	e03b      	b.n	8005dc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d4a:	69ba      	ldr	r2, [r7, #24]
 8005d4c:	6839      	ldr	r1, [r7, #0]
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f000 f8d6 	bl	8005f00 <I2C_IsErrorOccurred>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	e041      	b.n	8005de2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d64:	d02d      	beq.n	8005dc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d66:	f7fc fe43 	bl	80029f0 <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d302      	bcc.n	8005d7c <I2C_WaitOnFlagUntilTimeout+0x44>
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d122      	bne.n	8005dc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699a      	ldr	r2, [r3, #24]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	4013      	ands	r3, r2
 8005d86:	68ba      	ldr	r2, [r7, #8]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	bf0c      	ite	eq
 8005d8c:	2301      	moveq	r3, #1
 8005d8e:	2300      	movne	r3, #0
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	461a      	mov	r2, r3
 8005d94:	79fb      	ldrb	r3, [r7, #7]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d113      	bne.n	8005dc2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d9e:	f043 0220 	orr.w	r2, r3, #32
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2220      	movs	r2, #32
 8005daa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e00f      	b.n	8005de2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	699a      	ldr	r2, [r3, #24]
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	4013      	ands	r3, r2
 8005dcc:	68ba      	ldr	r2, [r7, #8]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	bf0c      	ite	eq
 8005dd2:	2301      	moveq	r3, #1
 8005dd4:	2300      	movne	r3, #0
 8005dd6:	b2db      	uxtb	r3, r3
 8005dd8:	461a      	mov	r2, r3
 8005dda:	79fb      	ldrb	r3, [r7, #7]
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d0b4      	beq.n	8005d4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005df6:	e033      	b.n	8005e60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	68b9      	ldr	r1, [r7, #8]
 8005dfc:	68f8      	ldr	r0, [r7, #12]
 8005dfe:	f000 f87f 	bl	8005f00 <I2C_IsErrorOccurred>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e08:	2301      	movs	r3, #1
 8005e0a:	e031      	b.n	8005e70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e12:	d025      	beq.n	8005e60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e14:	f7fc fdec 	bl	80029f0 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d302      	bcc.n	8005e2a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d11a      	bne.n	8005e60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	699b      	ldr	r3, [r3, #24]
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d013      	beq.n	8005e60 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e3c:	f043 0220 	orr.w	r2, r3, #32
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	e007      	b.n	8005e70 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d1c4      	bne.n	8005df8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005e6e:	2300      	movs	r3, #0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005e84:	e02f      	b.n	8005ee6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e86:	687a      	ldr	r2, [r7, #4]
 8005e88:	68b9      	ldr	r1, [r7, #8]
 8005e8a:	68f8      	ldr	r0, [r7, #12]
 8005e8c:	f000 f838 	bl	8005f00 <I2C_IsErrorOccurred>
 8005e90:	4603      	mov	r3, r0
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d001      	beq.n	8005e9a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005e96:	2301      	movs	r3, #1
 8005e98:	e02d      	b.n	8005ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e9a:	f7fc fda9 	bl	80029f0 <HAL_GetTick>
 8005e9e:	4602      	mov	r2, r0
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	1ad3      	subs	r3, r2, r3
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	429a      	cmp	r2, r3
 8005ea8:	d302      	bcc.n	8005eb0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d11a      	bne.n	8005ee6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	699b      	ldr	r3, [r3, #24]
 8005eb6:	f003 0320 	and.w	r3, r3, #32
 8005eba:	2b20      	cmp	r3, #32
 8005ebc:	d013      	beq.n	8005ee6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec2:	f043 0220 	orr.w	r2, r3, #32
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2220      	movs	r2, #32
 8005ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	e007      	b.n	8005ef6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	699b      	ldr	r3, [r3, #24]
 8005eec:	f003 0320 	and.w	r3, r3, #32
 8005ef0:	2b20      	cmp	r3, #32
 8005ef2:	d1c8      	bne.n	8005e86 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005ef4:	2300      	movs	r3, #0
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
	...

08005f00 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b08a      	sub	sp, #40	; 0x28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	f003 0310 	and.w	r3, r3, #16
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d068      	beq.n	8005ffe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2210      	movs	r2, #16
 8005f32:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005f34:	e049      	b.n	8005fca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3c:	d045      	beq.n	8005fca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005f3e:	f7fc fd57 	bl	80029f0 <HAL_GetTick>
 8005f42:	4602      	mov	r2, r0
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	1ad3      	subs	r3, r2, r3
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d302      	bcc.n	8005f54 <I2C_IsErrorOccurred+0x54>
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d13a      	bne.n	8005fca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f66:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	699b      	ldr	r3, [r3, #24]
 8005f6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f76:	d121      	bne.n	8005fbc <I2C_IsErrorOccurred+0xbc>
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f7e:	d01d      	beq.n	8005fbc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005f80:	7cfb      	ldrb	r3, [r7, #19]
 8005f82:	2b20      	cmp	r3, #32
 8005f84:	d01a      	beq.n	8005fbc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685a      	ldr	r2, [r3, #4]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f94:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005f96:	f7fc fd2b 	bl	80029f0 <HAL_GetTick>
 8005f9a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f9c:	e00e      	b.n	8005fbc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8005f9e:	f7fc fd27 	bl	80029f0 <HAL_GetTick>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	2b19      	cmp	r3, #25
 8005faa:	d907      	bls.n	8005fbc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8005fac:	6a3b      	ldr	r3, [r7, #32]
 8005fae:	f043 0320 	orr.w	r3, r3, #32
 8005fb2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8005fba:	e006      	b.n	8005fca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	f003 0320 	and.w	r3, r3, #32
 8005fc6:	2b20      	cmp	r3, #32
 8005fc8:	d1e9      	bne.n	8005f9e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	699b      	ldr	r3, [r3, #24]
 8005fd0:	f003 0320 	and.w	r3, r3, #32
 8005fd4:	2b20      	cmp	r3, #32
 8005fd6:	d003      	beq.n	8005fe0 <I2C_IsErrorOccurred+0xe0>
 8005fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d0aa      	beq.n	8005f36 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8005fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d103      	bne.n	8005ff0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2220      	movs	r2, #32
 8005fee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8005ff0:	6a3b      	ldr	r3, [r7, #32]
 8005ff2:	f043 0304 	orr.w	r3, r3, #4
 8005ff6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00b      	beq.n	8006028 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006010:	6a3b      	ldr	r3, [r7, #32]
 8006012:	f043 0301 	orr.w	r3, r3, #1
 8006016:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006020:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00b      	beq.n	800604a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	f043 0308 	orr.w	r3, r3, #8
 8006038:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006042:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006044:	2301      	movs	r3, #1
 8006046:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00b      	beq.n	800606c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	f043 0302 	orr.w	r3, r3, #2
 800605a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006064:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006066:	2301      	movs	r3, #1
 8006068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800606c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006070:	2b00      	cmp	r3, #0
 8006072:	d01c      	beq.n	80060ae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006074:	68f8      	ldr	r0, [r7, #12]
 8006076:	f7ff fe3b 	bl	8005cf0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	6859      	ldr	r1, [r3, #4]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	4b0d      	ldr	r3, [pc, #52]	; (80060bc <I2C_IsErrorOccurred+0x1bc>)
 8006086:	400b      	ands	r3, r1
 8006088:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	431a      	orrs	r2, r3
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2220      	movs	r2, #32
 800609a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80060ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3728      	adds	r7, #40	; 0x28
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	fe00e800 	.word	0xfe00e800

080060c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	607b      	str	r3, [r7, #4]
 80060ca:	460b      	mov	r3, r1
 80060cc:	817b      	strh	r3, [r7, #10]
 80060ce:	4613      	mov	r3, r2
 80060d0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060d2:	897b      	ldrh	r3, [r7, #10]
 80060d4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80060d8:	7a7b      	ldrb	r3, [r7, #9]
 80060da:	041b      	lsls	r3, r3, #16
 80060dc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060e0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80060ee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	6a3b      	ldr	r3, [r7, #32]
 80060f8:	0d5b      	lsrs	r3, r3, #21
 80060fa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80060fe:	4b08      	ldr	r3, [pc, #32]	; (8006120 <I2C_TransferConfig+0x60>)
 8006100:	430b      	orrs	r3, r1
 8006102:	43db      	mvns	r3, r3
 8006104:	ea02 0103 	and.w	r1, r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	430a      	orrs	r2, r1
 8006110:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006112:	bf00      	nop
 8006114:	371c      	adds	r7, #28
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	03ff63ff 	.word	0x03ff63ff

08006124 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006134:	b2db      	uxtb	r3, r3
 8006136:	2b20      	cmp	r3, #32
 8006138:	d138      	bne.n	80061ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006140:	2b01      	cmp	r3, #1
 8006142:	d101      	bne.n	8006148 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006144:	2302      	movs	r3, #2
 8006146:	e032      	b.n	80061ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2224      	movs	r2, #36	; 0x24
 8006154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0201 	bic.w	r2, r2, #1
 8006166:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	681a      	ldr	r2, [r3, #0]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006176:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6819      	ldr	r1, [r3, #0]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	683a      	ldr	r2, [r7, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f042 0201 	orr.w	r2, r2, #1
 8006196:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2220      	movs	r2, #32
 800619c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061a8:	2300      	movs	r3, #0
 80061aa:	e000      	b.n	80061ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80061ac:	2302      	movs	r3, #2
  }
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b085      	sub	sp, #20
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
 80061c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061ca:	b2db      	uxtb	r3, r3
 80061cc:	2b20      	cmp	r3, #32
 80061ce:	d139      	bne.n	8006244 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d101      	bne.n	80061de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80061da:	2302      	movs	r3, #2
 80061dc:	e033      	b.n	8006246 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2224      	movs	r2, #36	; 0x24
 80061ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f022 0201 	bic.w	r2, r2, #1
 80061fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800620c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	021b      	lsls	r3, r3, #8
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	4313      	orrs	r3, r2
 8006216:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f042 0201 	orr.w	r2, r2, #1
 800622e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2220      	movs	r2, #32
 8006234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006240:	2300      	movs	r3, #0
 8006242:	e000      	b.n	8006246 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006244:	2302      	movs	r3, #2
  }
}
 8006246:	4618      	mov	r0, r3
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006252:	b580      	push	{r7, lr}
 8006254:	b084      	sub	sp, #16
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d101      	bne.n	8006264 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e0c0      	b.n	80063e6 <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b00      	cmp	r3, #0
 800626e:	d106      	bne.n	800627e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f007 fcc7 	bl	800dc0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2203      	movs	r2, #3
 8006282:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4618      	mov	r0, r3
 800628c:	f003 faf3 	bl	8009876 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006290:	2300      	movs	r3, #0
 8006292:	73fb      	strb	r3, [r7, #15]
 8006294:	e03e      	b.n	8006314 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006296:	7bfa      	ldrb	r2, [r7, #15]
 8006298:	6879      	ldr	r1, [r7, #4]
 800629a:	4613      	mov	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	4413      	add	r3, r2
 80062a0:	00db      	lsls	r3, r3, #3
 80062a2:	440b      	add	r3, r1
 80062a4:	3311      	adds	r3, #17
 80062a6:	2201      	movs	r2, #1
 80062a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80062aa:	7bfa      	ldrb	r2, [r7, #15]
 80062ac:	6879      	ldr	r1, [r7, #4]
 80062ae:	4613      	mov	r3, r2
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	4413      	add	r3, r2
 80062b4:	00db      	lsls	r3, r3, #3
 80062b6:	440b      	add	r3, r1
 80062b8:	3310      	adds	r3, #16
 80062ba:	7bfa      	ldrb	r2, [r7, #15]
 80062bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80062be:	7bfa      	ldrb	r2, [r7, #15]
 80062c0:	6879      	ldr	r1, [r7, #4]
 80062c2:	4613      	mov	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	00db      	lsls	r3, r3, #3
 80062ca:	440b      	add	r3, r1
 80062cc:	3313      	adds	r3, #19
 80062ce:	2200      	movs	r2, #0
 80062d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80062d2:	7bfa      	ldrb	r2, [r7, #15]
 80062d4:	6879      	ldr	r1, [r7, #4]
 80062d6:	4613      	mov	r3, r2
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	4413      	add	r3, r2
 80062dc:	00db      	lsls	r3, r3, #3
 80062de:	440b      	add	r3, r1
 80062e0:	3320      	adds	r3, #32
 80062e2:	2200      	movs	r2, #0
 80062e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80062e6:	7bfa      	ldrb	r2, [r7, #15]
 80062e8:	6879      	ldr	r1, [r7, #4]
 80062ea:	4613      	mov	r3, r2
 80062ec:	009b      	lsls	r3, r3, #2
 80062ee:	4413      	add	r3, r2
 80062f0:	00db      	lsls	r3, r3, #3
 80062f2:	440b      	add	r3, r1
 80062f4:	3324      	adds	r3, #36	; 0x24
 80062f6:	2200      	movs	r2, #0
 80062f8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80062fa:	7bfb      	ldrb	r3, [r7, #15]
 80062fc:	6879      	ldr	r1, [r7, #4]
 80062fe:	1c5a      	adds	r2, r3, #1
 8006300:	4613      	mov	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	4413      	add	r3, r2
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	440b      	add	r3, r1
 800630a:	2200      	movs	r2, #0
 800630c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800630e:	7bfb      	ldrb	r3, [r7, #15]
 8006310:	3301      	adds	r3, #1
 8006312:	73fb      	strb	r3, [r7, #15]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	791b      	ldrb	r3, [r3, #4]
 8006318:	7bfa      	ldrb	r2, [r7, #15]
 800631a:	429a      	cmp	r2, r3
 800631c:	d3bb      	bcc.n	8006296 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800631e:	2300      	movs	r3, #0
 8006320:	73fb      	strb	r3, [r7, #15]
 8006322:	e044      	b.n	80063ae <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006324:	7bfa      	ldrb	r2, [r7, #15]
 8006326:	6879      	ldr	r1, [r7, #4]
 8006328:	4613      	mov	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	440b      	add	r3, r1
 8006332:	f203 1351 	addw	r3, r3, #337	; 0x151
 8006336:	2200      	movs	r2, #0
 8006338:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800633a:	7bfa      	ldrb	r2, [r7, #15]
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	4613      	mov	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4413      	add	r3, r2
 8006344:	00db      	lsls	r3, r3, #3
 8006346:	440b      	add	r3, r1
 8006348:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800634c:	7bfa      	ldrb	r2, [r7, #15]
 800634e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006350:	7bfa      	ldrb	r2, [r7, #15]
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	4613      	mov	r3, r2
 8006356:	009b      	lsls	r3, r3, #2
 8006358:	4413      	add	r3, r2
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	440b      	add	r3, r1
 800635e:	f203 1353 	addw	r3, r3, #339	; 0x153
 8006362:	2200      	movs	r2, #0
 8006364:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006366:	7bfa      	ldrb	r2, [r7, #15]
 8006368:	6879      	ldr	r1, [r7, #4]
 800636a:	4613      	mov	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	440b      	add	r3, r1
 8006374:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800637c:	7bfa      	ldrb	r2, [r7, #15]
 800637e:	6879      	ldr	r1, [r7, #4]
 8006380:	4613      	mov	r3, r2
 8006382:	009b      	lsls	r3, r3, #2
 8006384:	4413      	add	r3, r2
 8006386:	00db      	lsls	r3, r3, #3
 8006388:	440b      	add	r3, r1
 800638a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800638e:	2200      	movs	r2, #0
 8006390:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006392:	7bfa      	ldrb	r2, [r7, #15]
 8006394:	6879      	ldr	r1, [r7, #4]
 8006396:	4613      	mov	r3, r2
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	4413      	add	r3, r2
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	440b      	add	r3, r1
 80063a0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80063a4:	2200      	movs	r2, #0
 80063a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
 80063aa:	3301      	adds	r3, #1
 80063ac:	73fb      	strb	r3, [r7, #15]
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	791b      	ldrb	r3, [r3, #4]
 80063b2:	7bfa      	ldrb	r2, [r7, #15]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d3b5      	bcc.n	8006324 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6818      	ldr	r0, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	3304      	adds	r3, #4
 80063c0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80063c4:	f003 fa72 	bl	80098ac <USB_DevInit>

  hpcd->USB_Address = 0U;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	7a9b      	ldrb	r3, [r3, #10]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d102      	bne.n	80063e4 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f001 fc41 	bl	8007c66 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}

080063ee <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80063ee:	b580      	push	{r7, lr}
 80063f0:	b082      	sub	sp, #8
 80063f2:	af00      	add	r7, sp, #0
 80063f4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d101      	bne.n	8006404 <HAL_PCD_Start+0x16>
 8006400:	2302      	movs	r3, #2
 8006402:	e012      	b.n	800642a <HAL_PCD_Start+0x3c>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2201      	movs	r2, #1
 8006408:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  __HAL_PCD_ENABLE(hpcd);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4618      	mov	r0, r3
 8006412:	f003 fa19 	bl	8009848 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4618      	mov	r0, r3
 800641c:	f005 fcd9 	bl	800bdd2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b084      	sub	sp, #16
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4618      	mov	r0, r3
 8006440:	f005 fcde 	bl	800be00 <USB_ReadInterrupts>
 8006444:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800644c:	2b00      	cmp	r3, #0
 800644e:	d003      	beq.n	8006458 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fb04 	bl	8006a5e <PCD_EP_ISR_Handler>

    return;
 8006456:	e110      	b.n	800667a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800645e:	2b00      	cmp	r3, #0
 8006460:	d013      	beq.n	800648a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800646a:	b29a      	uxth	r2, r3
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006474:	b292      	uxth	r2, r2
 8006476:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f007 fc5f 	bl	800dd3e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006480:	2100      	movs	r1, #0
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 f8fc 	bl	8006680 <HAL_PCD_SetAddress>

    return;
 8006488:	e0f7      	b.n	800667a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00c      	beq.n	80064ae <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800649c:	b29a      	uxth	r2, r3
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80064a6:	b292      	uxth	r2, r2
 80064a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80064ac:	e0e5      	b.n	800667a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d00c      	beq.n	80064d2 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064ca:	b292      	uxth	r2, r2
 80064cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 80064d0:	e0d3      	b.n	800667a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d034      	beq.n	8006546 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f022 0204 	bic.w	r2, r2, #4
 80064ee:	b292      	uxth	r2, r2
 80064f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80064fc:	b29a      	uxth	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f022 0208 	bic.w	r2, r2, #8
 8006506:	b292      	uxth	r2, r2
 8006508:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 8006512:	2b01      	cmp	r3, #1
 8006514:	d107      	bne.n	8006526 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800651e:	2100      	movs	r1, #0
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f007 fdff 	bl	800e124 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f007 fc42 	bl	800ddb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006534:	b29a      	uxth	r2, r3
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800653e:	b292      	uxth	r2, r2
 8006540:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006544:	e099      	b.n	800667a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800654c:	2b00      	cmp	r3, #0
 800654e:	d027      	beq.n	80065a0 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006558:	b29a      	uxth	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f042 0208 	orr.w	r2, r2, #8
 8006562:	b292      	uxth	r2, r2
 8006564:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006570:	b29a      	uxth	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800657a:	b292      	uxth	r2, r2
 800657c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006588:	b29a      	uxth	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0204 	orr.w	r2, r2, #4
 8006592:	b292      	uxth	r2, r2
 8006594:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f007 fbef 	bl	800dd7c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800659e:	e06c      	b.n	800667a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d040      	beq.n	800662c <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80065bc:	b292      	uxth	r2, r2
 80065be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f893 32c8 	ldrb.w	r3, [r3, #712]	; 0x2c8
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d12b      	bne.n	8006624 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f042 0204 	orr.w	r2, r2, #4
 80065de:	b292      	uxth	r2, r2
 80065e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0208 	orr.w	r2, r2, #8
 80065f6:	b292      	uxth	r2, r2
 80065f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800660c:	b29b      	uxth	r3, r3
 800660e:	089b      	lsrs	r3, r3, #2
 8006610:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800661a:	2101      	movs	r1, #1
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f007 fd81 	bl	800e124 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006622:	e02a      	b.n	800667a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f007 fba9 	bl	800dd7c <HAL_PCD_SuspendCallback>
    return;
 800662a:	e026      	b.n	800667a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006632:	2b00      	cmp	r3, #0
 8006634:	d00f      	beq.n	8006656 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800663e:	b29a      	uxth	r2, r3
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006648:	b292      	uxth	r2, r2
 800664a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f007 fb67 	bl	800dd22 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006654:	e011      	b.n	800667a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00c      	beq.n	800667a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006668:	b29a      	uxth	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006672:	b292      	uxth	r2, r2
 8006674:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8006678:	bf00      	nop
  }
}
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}

08006680 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b082      	sub	sp, #8
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	460b      	mov	r3, r1
 800668a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8006692:	2b01      	cmp	r3, #1
 8006694:	d101      	bne.n	800669a <HAL_PCD_SetAddress+0x1a>
 8006696:	2302      	movs	r3, #2
 8006698:	e012      	b.n	80066c0 <HAL_PCD_SetAddress+0x40>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2201      	movs	r2, #1
 800669e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  hpcd->USB_Address = address;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	78fa      	ldrb	r2, [r7, #3]
 80066a6:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	78fa      	ldrb	r2, [r7, #3]
 80066ae:	4611      	mov	r1, r2
 80066b0:	4618      	mov	r0, r3
 80066b2:	f005 fb7a 	bl	800bdaa <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
 80066d0:	4608      	mov	r0, r1
 80066d2:	4611      	mov	r1, r2
 80066d4:	461a      	mov	r2, r3
 80066d6:	4603      	mov	r3, r0
 80066d8:	70fb      	strb	r3, [r7, #3]
 80066da:	460b      	mov	r3, r1
 80066dc:	803b      	strh	r3, [r7, #0]
 80066de:	4613      	mov	r3, r2
 80066e0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80066e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	da0e      	bge.n	800670c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80066ee:	78fb      	ldrb	r3, [r7, #3]
 80066f0:	f003 0207 	and.w	r2, r3, #7
 80066f4:	4613      	mov	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4413      	add	r3, r2
 80066fa:	00db      	lsls	r3, r3, #3
 80066fc:	3310      	adds	r3, #16
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	4413      	add	r3, r2
 8006702:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2201      	movs	r2, #1
 8006708:	705a      	strb	r2, [r3, #1]
 800670a:	e00e      	b.n	800672a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800670c:	78fb      	ldrb	r3, [r7, #3]
 800670e:	f003 0207 	and.w	r2, r3, #7
 8006712:	4613      	mov	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	00db      	lsls	r3, r3, #3
 800671a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800671e:	687a      	ldr	r2, [r7, #4]
 8006720:	4413      	add	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800672a:	78fb      	ldrb	r3, [r7, #3]
 800672c:	f003 0307 	and.w	r3, r3, #7
 8006730:	b2da      	uxtb	r2, r3
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006736:	883a      	ldrh	r2, [r7, #0]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	78ba      	ldrb	r2, [r7, #2]
 8006740:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006742:	78bb      	ldrb	r3, [r7, #2]
 8006744:	2b02      	cmp	r3, #2
 8006746:	d102      	bne.n	800674e <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8006754:	2b01      	cmp	r3, #1
 8006756:	d101      	bne.n	800675c <HAL_PCD_EP_Open+0x94>
 8006758:	2302      	movs	r3, #2
 800675a:	e00e      	b.n	800677a <HAL_PCD_EP_Open+0xb2>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68f9      	ldr	r1, [r7, #12]
 800676a:	4618      	mov	r0, r3
 800676c:	f003 f8bc 	bl	80098e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return ret;
 8006778:	7afb      	ldrb	r3, [r7, #11]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b084      	sub	sp, #16
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
 800678a:	460b      	mov	r3, r1
 800678c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800678e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006792:	2b00      	cmp	r3, #0
 8006794:	da0e      	bge.n	80067b4 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006796:	78fb      	ldrb	r3, [r7, #3]
 8006798:	f003 0207 	and.w	r2, r3, #7
 800679c:	4613      	mov	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	00db      	lsls	r3, r3, #3
 80067a4:	3310      	adds	r3, #16
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	4413      	add	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2201      	movs	r2, #1
 80067b0:	705a      	strb	r2, [r3, #1]
 80067b2:	e00e      	b.n	80067d2 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80067b4:	78fb      	ldrb	r3, [r7, #3]
 80067b6:	f003 0207 	and.w	r2, r3, #7
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	00db      	lsls	r3, r3, #3
 80067c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	4413      	add	r3, r2
 80067ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2200      	movs	r2, #0
 80067d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80067d2:	78fb      	ldrb	r3, [r7, #3]
 80067d4:	f003 0307 	and.w	r3, r3, #7
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d101      	bne.n	80067ec <HAL_PCD_EP_Close+0x6a>
 80067e8:	2302      	movs	r3, #2
 80067ea:	e00e      	b.n	800680a <HAL_PCD_EP_Close+0x88>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68f9      	ldr	r1, [r7, #12]
 80067fa:	4618      	mov	r0, r3
 80067fc:	f003 fc38 	bl	800a070 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b086      	sub	sp, #24
 8006816:	af00      	add	r7, sp, #0
 8006818:	60f8      	str	r0, [r7, #12]
 800681a:	607a      	str	r2, [r7, #4]
 800681c:	603b      	str	r3, [r7, #0]
 800681e:	460b      	mov	r3, r1
 8006820:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006822:	7afb      	ldrb	r3, [r7, #11]
 8006824:	f003 0207 	and.w	r2, r3, #7
 8006828:	4613      	mov	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	00db      	lsls	r3, r3, #3
 8006830:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	4413      	add	r3, r2
 8006838:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006840:	697b      	ldr	r3, [r7, #20]
 8006842:	683a      	ldr	r2, [r7, #0]
 8006844:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2200      	movs	r2, #0
 800684a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2200      	movs	r2, #0
 8006850:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006852:	7afb      	ldrb	r3, [r7, #11]
 8006854:	f003 0307 	and.w	r3, r3, #7
 8006858:	b2da      	uxtb	r2, r3
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	6979      	ldr	r1, [r7, #20]
 8006864:	4618      	mov	r0, r3
 8006866:	f003 fdf0 	bl	800a44a <USB_EPStartXfer>

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3718      	adds	r7, #24
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	460b      	mov	r3, r1
 800687e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	f003 0207 	and.w	r2, r3, #7
 8006886:	6879      	ldr	r1, [r7, #4]
 8006888:	4613      	mov	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	440b      	add	r3, r1
 8006892:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 8006896:	681b      	ldr	r3, [r3, #0]
}
 8006898:	4618      	mov	r0, r3
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b086      	sub	sp, #24
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	607a      	str	r2, [r7, #4]
 80068ae:	603b      	str	r3, [r7, #0]
 80068b0:	460b      	mov	r3, r1
 80068b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068b4:	7afb      	ldrb	r3, [r7, #11]
 80068b6:	f003 0207 	and.w	r2, r3, #7
 80068ba:	4613      	mov	r3, r2
 80068bc:	009b      	lsls	r3, r3, #2
 80068be:	4413      	add	r3, r2
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	3310      	adds	r3, #16
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	4413      	add	r3, r2
 80068c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	683a      	ldr	r2, [r7, #0]
 80068d4:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	2201      	movs	r2, #1
 80068da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	683a      	ldr	r2, [r7, #0]
 80068e2:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	2200      	movs	r2, #0
 80068e8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2201      	movs	r2, #1
 80068ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80068f0:	7afb      	ldrb	r3, [r7, #11]
 80068f2:	f003 0307 	and.w	r3, r3, #7
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	697b      	ldr	r3, [r7, #20]
 80068fa:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	6979      	ldr	r1, [r7, #20]
 8006902:	4618      	mov	r0, r3
 8006904:	f003 fda1 	bl	800a44a <USB_EPStartXfer>

  return HAL_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b084      	sub	sp, #16
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	460b      	mov	r3, r1
 800691c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800691e:	78fb      	ldrb	r3, [r7, #3]
 8006920:	f003 0307 	and.w	r3, r3, #7
 8006924:	687a      	ldr	r2, [r7, #4]
 8006926:	7912      	ldrb	r2, [r2, #4]
 8006928:	4293      	cmp	r3, r2
 800692a:	d901      	bls.n	8006930 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	e03e      	b.n	80069ae <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006930:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006934:	2b00      	cmp	r3, #0
 8006936:	da0e      	bge.n	8006956 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006938:	78fb      	ldrb	r3, [r7, #3]
 800693a:	f003 0207 	and.w	r2, r3, #7
 800693e:	4613      	mov	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	00db      	lsls	r3, r3, #3
 8006946:	3310      	adds	r3, #16
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	4413      	add	r3, r2
 800694c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2201      	movs	r2, #1
 8006952:	705a      	strb	r2, [r3, #1]
 8006954:	e00c      	b.n	8006970 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006956:	78fa      	ldrb	r2, [r7, #3]
 8006958:	4613      	mov	r3, r2
 800695a:	009b      	lsls	r3, r3, #2
 800695c:	4413      	add	r3, r2
 800695e:	00db      	lsls	r3, r3, #3
 8006960:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006964:	687a      	ldr	r2, [r7, #4]
 8006966:	4413      	add	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2201      	movs	r2, #1
 8006974:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006976:	78fb      	ldrb	r3, [r7, #3]
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	b2da      	uxtb	r2, r3
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8006988:	2b01      	cmp	r3, #1
 800698a:	d101      	bne.n	8006990 <HAL_PCD_EP_SetStall+0x7e>
 800698c:	2302      	movs	r3, #2
 800698e:	e00e      	b.n	80069ae <HAL_PCD_EP_SetStall+0x9c>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68f9      	ldr	r1, [r7, #12]
 800699e:	4618      	mov	r0, r3
 80069a0:	f005 f904 	bl	800bbac <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}

080069b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069b6:	b580      	push	{r7, lr}
 80069b8:	b084      	sub	sp, #16
 80069ba:	af00      	add	r7, sp, #0
 80069bc:	6078      	str	r0, [r7, #4]
 80069be:	460b      	mov	r3, r1
 80069c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80069c2:	78fb      	ldrb	r3, [r7, #3]
 80069c4:	f003 030f 	and.w	r3, r3, #15
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	7912      	ldrb	r2, [r2, #4]
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d901      	bls.n	80069d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e040      	b.n	8006a56 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80069d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	da0e      	bge.n	80069fa <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069dc:	78fb      	ldrb	r3, [r7, #3]
 80069de:	f003 0207 	and.w	r2, r3, #7
 80069e2:	4613      	mov	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	00db      	lsls	r3, r3, #3
 80069ea:	3310      	adds	r3, #16
 80069ec:	687a      	ldr	r2, [r7, #4]
 80069ee:	4413      	add	r3, r2
 80069f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2201      	movs	r2, #1
 80069f6:	705a      	strb	r2, [r3, #1]
 80069f8:	e00e      	b.n	8006a18 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069fa:	78fb      	ldrb	r3, [r7, #3]
 80069fc:	f003 0207 	and.w	r2, r3, #7
 8006a00:	4613      	mov	r3, r2
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	4413      	add	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2200      	movs	r2, #0
 8006a16:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a1e:	78fb      	ldrb	r3, [r7, #3]
 8006a20:	f003 0307 	and.w	r3, r3, #7
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d101      	bne.n	8006a38 <HAL_PCD_EP_ClrStall+0x82>
 8006a34:	2302      	movs	r3, #2
 8006a36:	e00e      	b.n	8006a56 <HAL_PCD_EP_ClrStall+0xa0>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68f9      	ldr	r1, [r7, #12]
 8006a46:	4618      	mov	r0, r3
 8006a48:	f005 f901 	bl	800bc4e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290

  return HAL_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3710      	adds	r7, #16
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b096      	sub	sp, #88	; 0x58
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006a66:	e3ae      	b.n	80071c6 <PCD_EP_ISR_Handler+0x768>
  {
    wIstr = hpcd->Instance->ISTR;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a70:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006a74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	f003 030f 	and.w	r3, r3, #15
 8006a7e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d

    if (epindex == 0U)
 8006a82:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	f040 8170 	bne.w	8006d6c <PCD_EP_ISR_Handler+0x30e>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006a8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006a90:	f003 0310 	and.w	r3, r3, #16
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d14d      	bne.n	8006b34 <PCD_EP_ISR_Handler+0xd6>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	881b      	ldrh	r3, [r3, #0]
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa8:	81fb      	strh	r3, [r7, #14]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	89fb      	ldrh	r3, [r7, #14]
 8006ab0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ab4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	3310      	adds	r3, #16
 8006ac0:	657b      	str	r3, [r7, #84]	; 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	461a      	mov	r2, r3
 8006ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	00db      	lsls	r3, r3, #3
 8006ad4:	4413      	add	r3, r2
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	6812      	ldr	r2, [r2, #0]
 8006ada:	4413      	add	r3, r2
 8006adc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ae0:	881b      	ldrh	r3, [r3, #0]
 8006ae2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006ae6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ae8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8006aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006aec:	695a      	ldr	r2, [r3, #20]
 8006aee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006af0:	69db      	ldr	r3, [r3, #28]
 8006af2:	441a      	add	r2, r3
 8006af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006af6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8006af8:	2100      	movs	r1, #0
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f007 f8f7 	bl	800dcee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	7b1b      	ldrb	r3, [r3, #12]
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 835d 	beq.w	80071c6 <PCD_EP_ISR_Handler+0x768>
 8006b0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b0e:	699b      	ldr	r3, [r3, #24]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	f040 8358 	bne.w	80071c6 <PCD_EP_ISR_Handler+0x768>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	7b1b      	ldrb	r3, [r3, #12]
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006b20:	b2da      	uxtb	r2, r3
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	b292      	uxth	r2, r2
 8006b28:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	731a      	strb	r2, [r3, #12]
 8006b32:	e348      	b.n	80071c6 <PCD_EP_ISR_Handler+0x768>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b3a:	657b      	str	r3, [r7, #84]	; 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	881b      	ldrh	r3, [r3, #0]
 8006b42:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006b46:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006b4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d032      	beq.n	8006bb8 <PCD_EP_ISR_Handler+0x15a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	4413      	add	r3, r2
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	6812      	ldr	r2, [r2, #0]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006b70:	881b      	ldrh	r3, [r3, #0]
 8006b72:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b78:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6818      	ldr	r0, [r3, #0]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f503 7126 	add.w	r1, r3, #664	; 0x298
 8006b84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b86:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8006b88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b8a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	f005 f989 	bl	800bea4 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	823b      	strh	r3, [r7, #16]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	8a3a      	ldrh	r2, [r7, #16]
 8006ba8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bac:	b292      	uxth	r2, r2
 8006bae:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f007 f86f 	bl	800dc94 <HAL_PCD_SetupStageCallback>
 8006bb6:	e306      	b.n	80071c6 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006bb8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f280 8302 	bge.w	80071c6 <PCD_EP_ISR_Handler+0x768>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006bce:	4013      	ands	r3, r2
 8006bd0:	83fb      	strh	r3, [r7, #30]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	8bfa      	ldrh	r2, [r7, #30]
 8006bd8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006bdc:	b292      	uxth	r2, r2
 8006bde:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	461a      	mov	r2, r3
 8006bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	00db      	lsls	r3, r3, #3
 8006bf2:	4413      	add	r3, r2
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	6812      	ldr	r2, [r2, #0]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006bfe:	881b      	ldrh	r3, [r3, #0]
 8006c00:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c06:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8006c08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c0a:	69db      	ldr	r3, [r3, #28]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d019      	beq.n	8006c44 <PCD_EP_ISR_Handler+0x1e6>
 8006c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c12:	695b      	ldr	r3, [r3, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d015      	beq.n	8006c44 <PCD_EP_ISR_Handler+0x1e6>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6818      	ldr	r0, [r3, #0]
 8006c1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c1e:	6959      	ldr	r1, [r3, #20]
 8006c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c22:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8006c24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c26:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	f005 f93b 	bl	800bea4 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006c2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c30:	695a      	ldr	r2, [r3, #20]
 8006c32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	441a      	add	r2, r3
 8006c38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c3a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f007 f83a 	bl	800dcb8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	881b      	ldrh	r3, [r3, #0]
 8006c4a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8006c4e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f040 82b5 	bne.w	80071c6 <PCD_EP_ISR_Handler+0x768>
 8006c5c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006c60:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006c64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c68:	f000 82ad 	beq.w	80071c6 <PCD_EP_ISR_Handler+0x768>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	61bb      	str	r3, [r7, #24]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	69bb      	ldr	r3, [r7, #24]
 8006c80:	4413      	add	r3, r2
 8006c82:	61bb      	str	r3, [r7, #24]
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006c8a:	617b      	str	r3, [r7, #20]
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	881b      	ldrh	r3, [r3, #0]
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c96:	b29a      	uxth	r2, r3
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	801a      	strh	r2, [r3, #0]
 8006c9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c9e:	691b      	ldr	r3, [r3, #16]
 8006ca0:	2b3e      	cmp	r3, #62	; 0x3e
 8006ca2:	d91d      	bls.n	8006ce0 <PCD_EP_ISR_Handler+0x282>
 8006ca4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ca6:	691b      	ldr	r3, [r3, #16]
 8006ca8:	095b      	lsrs	r3, r3, #5
 8006caa:	647b      	str	r3, [r7, #68]	; 0x44
 8006cac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	f003 031f 	and.w	r3, r3, #31
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d102      	bne.n	8006cbe <PCD_EP_ISR_Handler+0x260>
 8006cb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	647b      	str	r3, [r7, #68]	; 0x44
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	881b      	ldrh	r3, [r3, #0]
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cc6:	b29b      	uxth	r3, r3
 8006cc8:	029b      	lsls	r3, r3, #10
 8006cca:	b29b      	uxth	r3, r3
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	801a      	strh	r2, [r3, #0]
 8006cde:	e026      	b.n	8006d2e <PCD_EP_ISR_Handler+0x2d0>
 8006ce0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10a      	bne.n	8006cfe <PCD_EP_ISR_Handler+0x2a0>
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	881b      	ldrh	r3, [r3, #0]
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006cf2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006cf6:	b29a      	uxth	r2, r3
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	801a      	strh	r2, [r3, #0]
 8006cfc:	e017      	b.n	8006d2e <PCD_EP_ISR_Handler+0x2d0>
 8006cfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	085b      	lsrs	r3, r3, #1
 8006d04:	647b      	str	r3, [r7, #68]	; 0x44
 8006d06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d002      	beq.n	8006d18 <PCD_EP_ISR_Handler+0x2ba>
 8006d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d14:	3301      	adds	r3, #1
 8006d16:	647b      	str	r3, [r7, #68]	; 0x44
 8006d18:	697b      	ldr	r3, [r7, #20]
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	b29a      	uxth	r2, r3
 8006d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	029b      	lsls	r3, r3, #10
 8006d24:	b29b      	uxth	r3, r3
 8006d26:	4313      	orrs	r3, r2
 8006d28:	b29a      	uxth	r2, r3
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	881b      	ldrh	r3, [r3, #0]
 8006d34:	b29b      	uxth	r3, r3
 8006d36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d3e:	827b      	strh	r3, [r7, #18]
 8006d40:	8a7b      	ldrh	r3, [r7, #18]
 8006d42:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006d46:	827b      	strh	r3, [r7, #18]
 8006d48:	8a7b      	ldrh	r3, [r7, #18]
 8006d4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d4e:	827b      	strh	r3, [r7, #18]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	8a7b      	ldrh	r3, [r7, #18]
 8006d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	8013      	strh	r3, [r2, #0]
 8006d6a:	e22c      	b.n	80071c6 <PCD_EP_ISR_Handler+0x768>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	461a      	mov	r2, r3
 8006d72:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8006d80:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	f280 80f6 	bge.w	8006f76 <PCD_EP_ISR_Handler+0x518>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006d94:	009b      	lsls	r3, r3, #2
 8006d96:	4413      	add	r3, r2
 8006d98:	881b      	ldrh	r3, [r3, #0]
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006da0:	4013      	ands	r3, r2
 8006da2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006db0:	009b      	lsls	r3, r3, #2
 8006db2:	4413      	add	r3, r2
 8006db4:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8006db8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006dbc:	b292      	uxth	r2, r2
 8006dbe:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006dc0:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	4413      	add	r3, r2
 8006dca:	00db      	lsls	r3, r3, #3
 8006dcc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006dd0:	687a      	ldr	r2, [r7, #4]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	657b      	str	r3, [r7, #84]	; 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8006dd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dd8:	7b1b      	ldrb	r3, [r3, #12]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d123      	bne.n	8006e26 <PCD_EP_ISR_Handler+0x3c8>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	461a      	mov	r2, r3
 8006dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	4413      	add	r3, r2
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	6812      	ldr	r2, [r2, #0]
 8006df6:	4413      	add	r3, r2
 8006df8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006dfc:	881b      	ldrh	r3, [r3, #0]
 8006dfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006e02:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

          if (count != 0U)
 8006e06:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f000 808e 	beq.w	8006f2c <PCD_EP_ISR_Handler+0x4ce>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6818      	ldr	r0, [r3, #0]
 8006e14:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e16:	6959      	ldr	r1, [r3, #20]
 8006e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e1a:	88da      	ldrh	r2, [r3, #6]
 8006e1c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006e20:	f005 f840 	bl	800bea4 <USB_ReadPMA>
 8006e24:	e082      	b.n	8006f2c <PCD_EP_ISR_Handler+0x4ce>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8006e26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e28:	78db      	ldrb	r3, [r3, #3]
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d10a      	bne.n	8006e44 <PCD_EP_ISR_Handler+0x3e6>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8006e2e:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006e32:	461a      	mov	r2, r3
 8006e34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 f9d3 	bl	80071e2 <HAL_PCD_EP_DB_Receive>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8006e42:	e073      	b.n	8006f2c <PCD_EP_ISR_Handler+0x4ce>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	461a      	mov	r2, r3
 8006e4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	009b      	lsls	r3, r3, #2
 8006e50:	4413      	add	r3, r2
 8006e52:	881b      	ldrh	r3, [r3, #0]
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	461a      	mov	r2, r3
 8006e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	441a      	add	r2, r3
 8006e70:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8006e74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	009b      	lsls	r3, r3, #2
 8006e94:	4413      	add	r3, r2
 8006e96:	881b      	ldrh	r3, [r3, #0]
 8006e98:	b29b      	uxth	r3, r3
 8006e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d022      	beq.n	8006ee8 <PCD_EP_ISR_Handler+0x48a>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	461a      	mov	r2, r3
 8006eae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	00db      	lsls	r3, r3, #3
 8006eb4:	4413      	add	r3, r2
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	6812      	ldr	r2, [r2, #0]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006ec0:	881b      	ldrh	r3, [r3, #0]
 8006ec2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ec6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8006eca:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d02c      	beq.n	8006f2c <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6818      	ldr	r0, [r3, #0]
 8006ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ed8:	6959      	ldr	r1, [r3, #20]
 8006eda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006edc:	891a      	ldrh	r2, [r3, #8]
 8006ede:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006ee2:	f004 ffdf 	bl	800bea4 <USB_ReadPMA>
 8006ee6:	e021      	b.n	8006f2c <PCD_EP_ISR_Handler+0x4ce>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ef0:	b29b      	uxth	r3, r3
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	00db      	lsls	r3, r3, #3
 8006efa:	4413      	add	r3, r2
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	6812      	ldr	r2, [r2, #0]
 8006f00:	4413      	add	r3, r2
 8006f02:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006f0c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

              if (count != 0U)
 8006f10:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d009      	beq.n	8006f2c <PCD_EP_ISR_Handler+0x4ce>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6818      	ldr	r0, [r3, #0]
 8006f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f1e:	6959      	ldr	r1, [r3, #20]
 8006f20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f22:	895a      	ldrh	r2, [r3, #10]
 8006f24:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006f28:	f004 ffbc 	bl	800bea4 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8006f2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f2e:	69da      	ldr	r2, [r3, #28]
 8006f30:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006f34:	441a      	add	r2, r3
 8006f36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f38:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8006f3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f3c:	695a      	ldr	r2, [r3, #20]
 8006f3e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8006f42:	441a      	add	r2, r3
 8006f44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f46:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8006f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d005      	beq.n	8006f5c <PCD_EP_ISR_Handler+0x4fe>
 8006f50:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8006f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d206      	bcs.n	8006f6a <PCD_EP_ISR_Handler+0x50c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8006f5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f5e:	781b      	ldrb	r3, [r3, #0]
 8006f60:	4619      	mov	r1, r3
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f006 fea8 	bl	800dcb8 <HAL_PCD_DataOutStageCallback>
 8006f68:	e005      	b.n	8006f76 <PCD_EP_ISR_Handler+0x518>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f70:	4618      	mov	r0, r3
 8006f72:	f003 fa6a 	bl	800a44a <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8006f76:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f000 8121 	beq.w	80071c6 <PCD_EP_ISR_Handler+0x768>
      {
        ep = &hpcd->IN_ep[epindex];
 8006f84:	f897 204d 	ldrb.w	r2, [r7, #77]	; 0x4d
 8006f88:	4613      	mov	r3, r2
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	3310      	adds	r3, #16
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	4413      	add	r3, r2
 8006f96:	657b      	str	r3, [r7, #84]	; 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	4413      	add	r3, r2
 8006fa6:	881b      	ldrh	r3, [r3, #0]
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fb2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	461a      	mov	r2, r3
 8006fbc:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	441a      	add	r2, r3
 8006fc4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006fc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006fcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8006fd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fd6:	78db      	ldrb	r3, [r3, #3]
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	f040 80a2 	bne.w	8007122 <PCD_EP_ISR_Handler+0x6c4>
        {
          ep->xfer_len = 0U;
 8006fde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8006fe4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fe6:	7b1b      	ldrb	r3, [r3, #12]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 8093 	beq.w	8007114 <PCD_EP_ISR_Handler+0x6b6>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006fee:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d046      	beq.n	8007088 <PCD_EP_ISR_Handler+0x62a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006ffa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ffc:	785b      	ldrb	r3, [r3, #1]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d126      	bne.n	8007050 <PCD_EP_ISR_Handler+0x5f2>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	627b      	str	r3, [r7, #36]	; 0x24
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007010:	b29b      	uxth	r3, r3
 8007012:	461a      	mov	r2, r3
 8007014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007016:	4413      	add	r3, r2
 8007018:	627b      	str	r3, [r7, #36]	; 0x24
 800701a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	00da      	lsls	r2, r3, #3
 8007020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007022:	4413      	add	r3, r2
 8007024:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007028:	623b      	str	r3, [r7, #32]
 800702a:	6a3b      	ldr	r3, [r7, #32]
 800702c:	881b      	ldrh	r3, [r3, #0]
 800702e:	b29b      	uxth	r3, r3
 8007030:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007034:	b29a      	uxth	r2, r3
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	801a      	strh	r2, [r3, #0]
 800703a:	6a3b      	ldr	r3, [r7, #32]
 800703c:	881b      	ldrh	r3, [r3, #0]
 800703e:	b29b      	uxth	r3, r3
 8007040:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007044:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007048:	b29a      	uxth	r2, r3
 800704a:	6a3b      	ldr	r3, [r7, #32]
 800704c:	801a      	strh	r2, [r3, #0]
 800704e:	e061      	b.n	8007114 <PCD_EP_ISR_Handler+0x6b6>
 8007050:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007052:	785b      	ldrb	r3, [r3, #1]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d15d      	bne.n	8007114 <PCD_EP_ISR_Handler+0x6b6>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007066:	b29b      	uxth	r3, r3
 8007068:	461a      	mov	r2, r3
 800706a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800706c:	4413      	add	r3, r2
 800706e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	00da      	lsls	r2, r3, #3
 8007076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007078:	4413      	add	r3, r2
 800707a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800707e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007082:	2200      	movs	r2, #0
 8007084:	801a      	strh	r2, [r3, #0]
 8007086:	e045      	b.n	8007114 <PCD_EP_ISR_Handler+0x6b6>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800708e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007090:	785b      	ldrb	r3, [r3, #1]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d126      	bne.n	80070e4 <PCD_EP_ISR_Handler+0x686>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	637b      	str	r3, [r7, #52]	; 0x34
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070a4:	b29b      	uxth	r3, r3
 80070a6:	461a      	mov	r2, r3
 80070a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070aa:	4413      	add	r3, r2
 80070ac:	637b      	str	r3, [r7, #52]	; 0x34
 80070ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	00da      	lsls	r2, r3, #3
 80070b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b6:	4413      	add	r3, r2
 80070b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80070bc:	633b      	str	r3, [r7, #48]	; 0x30
 80070be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c0:	881b      	ldrh	r3, [r3, #0]
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80070c8:	b29a      	uxth	r2, r3
 80070ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070cc:	801a      	strh	r2, [r3, #0]
 80070ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070dc:	b29a      	uxth	r2, r3
 80070de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e0:	801a      	strh	r2, [r3, #0]
 80070e2:	e017      	b.n	8007114 <PCD_EP_ISR_Handler+0x6b6>
 80070e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070e6:	785b      	ldrb	r3, [r3, #1]
 80070e8:	2b01      	cmp	r3, #1
 80070ea:	d113      	bne.n	8007114 <PCD_EP_ISR_Handler+0x6b6>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	461a      	mov	r2, r3
 80070f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070fa:	4413      	add	r3, r2
 80070fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80070fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	00da      	lsls	r2, r3, #3
 8007104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007106:	4413      	add	r3, r2
 8007108:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800710c:	63bb      	str	r3, [r7, #56]	; 0x38
 800710e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007110:	2200      	movs	r2, #0
 8007112:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007114:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007116:	781b      	ldrb	r3, [r3, #0]
 8007118:	4619      	mov	r1, r3
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f006 fde7 	bl	800dcee <HAL_PCD_DataInStageCallback>
 8007120:	e051      	b.n	80071c6 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8007122:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8007126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800712a:	2b00      	cmp	r3, #0
 800712c:	d144      	bne.n	80071b8 <PCD_EP_ISR_Handler+0x75a>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007136:	b29b      	uxth	r3, r3
 8007138:	461a      	mov	r2, r3
 800713a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800713c:	781b      	ldrb	r3, [r3, #0]
 800713e:	00db      	lsls	r3, r3, #3
 8007140:	4413      	add	r3, r2
 8007142:	687a      	ldr	r2, [r7, #4]
 8007144:	6812      	ldr	r2, [r2, #0]
 8007146:	4413      	add	r3, r2
 8007148:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800714c:	881b      	ldrh	r3, [r3, #0]
 800714e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007152:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8007156:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007158:	699a      	ldr	r2, [r3, #24]
 800715a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800715e:	429a      	cmp	r2, r3
 8007160:	d907      	bls.n	8007172 <PCD_EP_ISR_Handler+0x714>
            {
              ep->xfer_len -= TxPctSize;
 8007162:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007164:	699a      	ldr	r2, [r3, #24]
 8007166:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800716a:	1ad2      	subs	r2, r2, r3
 800716c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800716e:	619a      	str	r2, [r3, #24]
 8007170:	e002      	b.n	8007178 <PCD_EP_ISR_Handler+0x71a>
            }
            else
            {
              ep->xfer_len = 0U;
 8007172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007174:	2200      	movs	r2, #0
 8007176:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800717a:	699b      	ldr	r3, [r3, #24]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d106      	bne.n	800718e <PCD_EP_ISR_Handler+0x730>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f006 fdb1 	bl	800dcee <HAL_PCD_DataInStageCallback>
 800718c:	e01b      	b.n	80071c6 <PCD_EP_ISR_Handler+0x768>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800718e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007190:	695a      	ldr	r2, [r3, #20]
 8007192:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007196:	441a      	add	r2, r3
 8007198:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800719a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800719c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800719e:	69da      	ldr	r2, [r3, #28]
 80071a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80071a4:	441a      	add	r2, r3
 80071a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80071a8:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071b0:	4618      	mov	r0, r3
 80071b2:	f003 f94a 	bl	800a44a <USB_EPStartXfer>
 80071b6:	e006      	b.n	80071c6 <PCD_EP_ISR_Handler+0x768>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80071b8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80071bc:	461a      	mov	r2, r3
 80071be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071c0:	6878      	ldr	r0, [r7, #4]
 80071c2:	f000 f917 	bl	80073f4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	b21b      	sxth	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f6ff ac48 	blt.w	8006a68 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80071d8:	2300      	movs	r3, #0
}
 80071da:	4618      	mov	r0, r3
 80071dc:	3758      	adds	r7, #88	; 0x58
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b088      	sub	sp, #32
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	60f8      	str	r0, [r7, #12]
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	4613      	mov	r3, r2
 80071ee:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80071f0:	88fb      	ldrh	r3, [r7, #6]
 80071f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d07c      	beq.n	80072f4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007202:	b29b      	uxth	r3, r3
 8007204:	461a      	mov	r2, r3
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	781b      	ldrb	r3, [r3, #0]
 800720a:	00db      	lsls	r3, r3, #3
 800720c:	4413      	add	r3, r2
 800720e:	68fa      	ldr	r2, [r7, #12]
 8007210:	6812      	ldr	r2, [r2, #0]
 8007212:	4413      	add	r3, r2
 8007214:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800721e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	699a      	ldr	r2, [r3, #24]
 8007224:	8b7b      	ldrh	r3, [r7, #26]
 8007226:	429a      	cmp	r2, r3
 8007228:	d306      	bcc.n	8007238 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	699a      	ldr	r2, [r3, #24]
 800722e:	8b7b      	ldrh	r3, [r7, #26]
 8007230:	1ad2      	subs	r2, r2, r3
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	619a      	str	r2, [r3, #24]
 8007236:	e002      	b.n	800723e <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	2200      	movs	r2, #0
 800723c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	699b      	ldr	r3, [r3, #24]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d123      	bne.n	800728e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	461a      	mov	r2, r3
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	4413      	add	r3, r2
 8007254:	881b      	ldrh	r3, [r3, #0]
 8007256:	b29b      	uxth	r3, r3
 8007258:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800725c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007260:	833b      	strh	r3, [r7, #24]
 8007262:	8b3b      	ldrh	r3, [r7, #24]
 8007264:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007268:	833b      	strh	r3, [r7, #24]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	781b      	ldrb	r3, [r3, #0]
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	441a      	add	r2, r3
 8007278:	8b3b      	ldrh	r3, [r7, #24]
 800727a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800727e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800728a:	b29b      	uxth	r3, r3
 800728c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800728e:	88fb      	ldrh	r3, [r7, #6]
 8007290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007294:	2b00      	cmp	r3, #0
 8007296:	d01f      	beq.n	80072d8 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	461a      	mov	r2, r3
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	4413      	add	r3, r2
 80072a6:	881b      	ldrh	r3, [r3, #0]
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b2:	82fb      	strh	r3, [r7, #22]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	461a      	mov	r2, r3
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	781b      	ldrb	r3, [r3, #0]
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	441a      	add	r2, r3
 80072c2:	8afb      	ldrh	r3, [r7, #22]
 80072c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80072c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80072cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80072d0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80072d4:	b29b      	uxth	r3, r3
 80072d6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80072d8:	8b7b      	ldrh	r3, [r7, #26]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	f000 8085 	beq.w	80073ea <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6818      	ldr	r0, [r3, #0]
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	6959      	ldr	r1, [r3, #20]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	891a      	ldrh	r2, [r3, #8]
 80072ec:	8b7b      	ldrh	r3, [r7, #26]
 80072ee:	f004 fdd9 	bl	800bea4 <USB_ReadPMA>
 80072f2:	e07a      	b.n	80073ea <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	461a      	mov	r2, r3
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	00db      	lsls	r3, r3, #3
 8007306:	4413      	add	r3, r2
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	6812      	ldr	r2, [r2, #0]
 800730c:	4413      	add	r3, r2
 800730e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007312:	881b      	ldrh	r3, [r3, #0]
 8007314:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007318:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800731a:	68bb      	ldr	r3, [r7, #8]
 800731c:	699a      	ldr	r2, [r3, #24]
 800731e:	8b7b      	ldrh	r3, [r7, #26]
 8007320:	429a      	cmp	r2, r3
 8007322:	d306      	bcc.n	8007332 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	699a      	ldr	r2, [r3, #24]
 8007328:	8b7b      	ldrh	r3, [r7, #26]
 800732a:	1ad2      	subs	r2, r2, r3
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	619a      	str	r2, [r3, #24]
 8007330:	e002      	b.n	8007338 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	2200      	movs	r2, #0
 8007336:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d123      	bne.n	8007388 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	461a      	mov	r2, r3
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	009b      	lsls	r3, r3, #2
 800734c:	4413      	add	r3, r2
 800734e:	881b      	ldrh	r3, [r3, #0]
 8007350:	b29b      	uxth	r3, r3
 8007352:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735a:	83fb      	strh	r3, [r7, #30]
 800735c:	8bfb      	ldrh	r3, [r7, #30]
 800735e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007362:	83fb      	strh	r3, [r7, #30]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	461a      	mov	r2, r3
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	441a      	add	r2, r3
 8007372:	8bfb      	ldrh	r3, [r7, #30]
 8007374:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007378:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800737c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007384:	b29b      	uxth	r3, r3
 8007386:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007388:	88fb      	ldrh	r3, [r7, #6]
 800738a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738e:	2b00      	cmp	r3, #0
 8007390:	d11f      	bne.n	80073d2 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	461a      	mov	r2, r3
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ac:	83bb      	strh	r3, [r7, #28]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	009b      	lsls	r3, r3, #2
 80073ba:	441a      	add	r2, r3
 80073bc:	8bbb      	ldrh	r3, [r7, #28]
 80073be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80073d2:	8b7b      	ldrh	r3, [r7, #26]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d008      	beq.n	80073ea <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6818      	ldr	r0, [r3, #0]
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	6959      	ldr	r1, [r3, #20]
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	895a      	ldrh	r2, [r3, #10]
 80073e4:	8b7b      	ldrh	r3, [r7, #26]
 80073e6:	f004 fd5d 	bl	800bea4 <USB_ReadPMA>
    }
  }

  return count;
 80073ea:	8b7b      	ldrh	r3, [r7, #26]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3720      	adds	r7, #32
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}

080073f4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b0a4      	sub	sp, #144	; 0x90
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	4613      	mov	r3, r2
 8007400:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007402:	88fb      	ldrh	r3, [r7, #6]
 8007404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007408:	2b00      	cmp	r3, #0
 800740a:	f000 81db 	beq.w	80077c4 <HAL_PCD_EP_DB_Transmit+0x3d0>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007416:	b29b      	uxth	r3, r3
 8007418:	461a      	mov	r2, r3
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	00db      	lsls	r3, r3, #3
 8007420:	4413      	add	r3, r2
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	6812      	ldr	r2, [r2, #0]
 8007426:	4413      	add	r3, r2
 8007428:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800742c:	881b      	ldrh	r3, [r3, #0]
 800742e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007432:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len > TxPctSize)
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	699a      	ldr	r2, [r3, #24]
 800743a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800743e:	429a      	cmp	r2, r3
 8007440:	d907      	bls.n	8007452 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	699a      	ldr	r2, [r3, #24]
 8007446:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800744a:	1ad2      	subs	r2, r2, r3
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	619a      	str	r2, [r3, #24]
 8007450:	e002      	b.n	8007458 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	2200      	movs	r2, #0
 8007456:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	2b00      	cmp	r3, #0
 800745e:	f040 80b9 	bne.w	80075d4 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	785b      	ldrb	r3, [r3, #1]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d126      	bne.n	80074b8 <HAL_PCD_EP_DB_Transmit+0xc4>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007478:	b29b      	uxth	r3, r3
 800747a:	461a      	mov	r2, r3
 800747c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800747e:	4413      	add	r3, r2
 8007480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	00da      	lsls	r2, r3, #3
 8007488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748a:	4413      	add	r3, r2
 800748c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007490:	62bb      	str	r3, [r7, #40]	; 0x28
 8007492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007494:	881b      	ldrh	r3, [r3, #0]
 8007496:	b29b      	uxth	r3, r3
 8007498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800749c:	b29a      	uxth	r2, r3
 800749e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a0:	801a      	strh	r2, [r3, #0]
 80074a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a4:	881b      	ldrh	r3, [r3, #0]
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074b0:	b29a      	uxth	r2, r3
 80074b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b4:	801a      	strh	r2, [r3, #0]
 80074b6:	e01a      	b.n	80074ee <HAL_PCD_EP_DB_Transmit+0xfa>
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	785b      	ldrb	r3, [r3, #1]
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d116      	bne.n	80074ee <HAL_PCD_EP_DB_Transmit+0xfa>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	637b      	str	r3, [r7, #52]	; 0x34
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	461a      	mov	r2, r3
 80074d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074d4:	4413      	add	r3, r2
 80074d6:	637b      	str	r3, [r7, #52]	; 0x34
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	00da      	lsls	r2, r3, #3
 80074de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e0:	4413      	add	r3, r2
 80074e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80074e6:	633b      	str	r3, [r7, #48]	; 0x30
 80074e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ea:	2200      	movs	r2, #0
 80074ec:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	627b      	str	r3, [r7, #36]	; 0x24
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	785b      	ldrb	r3, [r3, #1]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d126      	bne.n	800754a <HAL_PCD_EP_DB_Transmit+0x156>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	61fb      	str	r3, [r7, #28]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800750a:	b29b      	uxth	r3, r3
 800750c:	461a      	mov	r2, r3
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	4413      	add	r3, r2
 8007512:	61fb      	str	r3, [r7, #28]
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	00da      	lsls	r2, r3, #3
 800751a:	69fb      	ldr	r3, [r7, #28]
 800751c:	4413      	add	r3, r2
 800751e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007522:	61bb      	str	r3, [r7, #24]
 8007524:	69bb      	ldr	r3, [r7, #24]
 8007526:	881b      	ldrh	r3, [r3, #0]
 8007528:	b29b      	uxth	r3, r3
 800752a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800752e:	b29a      	uxth	r2, r3
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	801a      	strh	r2, [r3, #0]
 8007534:	69bb      	ldr	r3, [r7, #24]
 8007536:	881b      	ldrh	r3, [r3, #0]
 8007538:	b29b      	uxth	r3, r3
 800753a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800753e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007542:	b29a      	uxth	r2, r3
 8007544:	69bb      	ldr	r3, [r7, #24]
 8007546:	801a      	strh	r2, [r3, #0]
 8007548:	e017      	b.n	800757a <HAL_PCD_EP_DB_Transmit+0x186>
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	785b      	ldrb	r3, [r3, #1]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d113      	bne.n	800757a <HAL_PCD_EP_DB_Transmit+0x186>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800755a:	b29b      	uxth	r3, r3
 800755c:	461a      	mov	r2, r3
 800755e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007560:	4413      	add	r3, r2
 8007562:	627b      	str	r3, [r7, #36]	; 0x24
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	781b      	ldrb	r3, [r3, #0]
 8007568:	00da      	lsls	r2, r3, #3
 800756a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756c:	4413      	add	r3, r2
 800756e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007572:	623b      	str	r3, [r7, #32]
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	2200      	movs	r2, #0
 8007578:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	4619      	mov	r1, r3
 8007580:	68f8      	ldr	r0, [r7, #12]
 8007582:	f006 fbb4 	bl	800dcee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007586:	88fb      	ldrh	r3, [r7, #6]
 8007588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 82fa 	beq.w	8007b86 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	461a      	mov	r2, r3
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	881b      	ldrh	r3, [r3, #0]
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075ac:	82fb      	strh	r3, [r7, #22]
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	461a      	mov	r2, r3
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	441a      	add	r2, r3
 80075bc:	8afb      	ldrh	r3, [r7, #22]
 80075be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80075c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80075c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80075ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ce:	b29b      	uxth	r3, r3
 80075d0:	8013      	strh	r3, [r2, #0]
 80075d2:	e2d8      	b.n	8007b86 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80075d4:	88fb      	ldrh	r3, [r7, #6]
 80075d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d021      	beq.n	8007622 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	461a      	mov	r2, r3
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	881b      	ldrh	r3, [r3, #0]
 80075ee:	b29b      	uxth	r3, r3
 80075f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80075f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075f8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	461a      	mov	r2, r3
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	441a      	add	r2, r3
 800760a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800760e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007612:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800761a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800761e:	b29b      	uxth	r3, r3
 8007620:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007628:	2b01      	cmp	r3, #1
 800762a:	f040 82ac 	bne.w	8007b86 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	695a      	ldr	r2, [r3, #20]
 8007632:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007636:	441a      	add	r2, r3
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	69da      	ldr	r2, [r3, #28]
 8007640:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007644:	441a      	add	r2, r3
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800764a:	68bb      	ldr	r3, [r7, #8]
 800764c:	6a1a      	ldr	r2, [r3, #32]
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	429a      	cmp	r2, r3
 8007654:	d30b      	bcc.n	800766e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	6a1a      	ldr	r2, [r3, #32]
 8007662:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007666:	1ad2      	subs	r2, r2, r3
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	621a      	str	r2, [r3, #32]
 800766c:	e017      	b.n	800769e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else if (ep->xfer_len_db == 0U)
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	6a1b      	ldr	r3, [r3, #32]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d108      	bne.n	8007688 <HAL_PCD_EP_DB_Transmit+0x294>
        {
          len = TxPctSize;
 8007676:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800767a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	2200      	movs	r2, #0
 8007682:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007686:	e00a      	b.n	800769e <HAL_PCD_EP_DB_Transmit+0x2aa>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2200      	movs	r2, #0
 800769c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	785b      	ldrb	r3, [r3, #1]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d165      	bne.n	8007772 <HAL_PCD_EP_DB_Transmit+0x37e>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076b4:	b29b      	uxth	r3, r3
 80076b6:	461a      	mov	r2, r3
 80076b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ba:	4413      	add	r3, r2
 80076bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	781b      	ldrb	r3, [r3, #0]
 80076c2:	00da      	lsls	r2, r3, #3
 80076c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c6:	4413      	add	r3, r2
 80076c8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80076cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80076ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d0:	881b      	ldrh	r3, [r3, #0]
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80076d8:	b29a      	uxth	r2, r3
 80076da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076dc:	801a      	strh	r2, [r3, #0]
 80076de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076e2:	2b3e      	cmp	r3, #62	; 0x3e
 80076e4:	d91d      	bls.n	8007722 <HAL_PCD_EP_DB_Transmit+0x32e>
 80076e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076ea:	095b      	lsrs	r3, r3, #5
 80076ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80076ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076f2:	f003 031f 	and.w	r3, r3, #31
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d102      	bne.n	8007700 <HAL_PCD_EP_DB_Transmit+0x30c>
 80076fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076fc:	3b01      	subs	r3, #1
 80076fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007702:	881b      	ldrh	r3, [r3, #0]
 8007704:	b29a      	uxth	r2, r3
 8007706:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007708:	b29b      	uxth	r3, r3
 800770a:	029b      	lsls	r3, r3, #10
 800770c:	b29b      	uxth	r3, r3
 800770e:	4313      	orrs	r3, r2
 8007710:	b29b      	uxth	r3, r3
 8007712:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007716:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800771a:	b29a      	uxth	r2, r3
 800771c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771e:	801a      	strh	r2, [r3, #0]
 8007720:	e044      	b.n	80077ac <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007722:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10a      	bne.n	8007740 <HAL_PCD_EP_DB_Transmit+0x34c>
 800772a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772c:	881b      	ldrh	r3, [r3, #0]
 800772e:	b29b      	uxth	r3, r3
 8007730:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007734:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007738:	b29a      	uxth	r2, r3
 800773a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773c:	801a      	strh	r2, [r3, #0]
 800773e:	e035      	b.n	80077ac <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007740:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007744:	085b      	lsrs	r3, r3, #1
 8007746:	64bb      	str	r3, [r7, #72]	; 0x48
 8007748:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800774c:	f003 0301 	and.w	r3, r3, #1
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <HAL_PCD_EP_DB_Transmit+0x366>
 8007754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007756:	3301      	adds	r3, #1
 8007758:	64bb      	str	r3, [r7, #72]	; 0x48
 800775a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775c:	881b      	ldrh	r3, [r3, #0]
 800775e:	b29a      	uxth	r2, r3
 8007760:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007762:	b29b      	uxth	r3, r3
 8007764:	029b      	lsls	r3, r3, #10
 8007766:	b29b      	uxth	r3, r3
 8007768:	4313      	orrs	r3, r2
 800776a:	b29a      	uxth	r2, r3
 800776c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776e:	801a      	strh	r2, [r3, #0]
 8007770:	e01c      	b.n	80077ac <HAL_PCD_EP_DB_Transmit+0x3b8>
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	785b      	ldrb	r3, [r3, #1]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d118      	bne.n	80077ac <HAL_PCD_EP_DB_Transmit+0x3b8>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	647b      	str	r3, [r7, #68]	; 0x44
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007788:	b29b      	uxth	r3, r3
 800778a:	461a      	mov	r2, r3
 800778c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800778e:	4413      	add	r3, r2
 8007790:	647b      	str	r3, [r7, #68]	; 0x44
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	00da      	lsls	r2, r3, #3
 8007798:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800779a:	4413      	add	r3, r2
 800779c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80077a0:	643b      	str	r3, [r7, #64]	; 0x40
 80077a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077aa:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6818      	ldr	r0, [r3, #0]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	6959      	ldr	r1, [r3, #20]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	891a      	ldrh	r2, [r3, #8]
 80077b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80077bc:	b29b      	uxth	r3, r3
 80077be:	f004 fb2f 	bl	800be20 <USB_WritePMA>
 80077c2:	e1e0      	b.n	8007b86 <HAL_PCD_EP_DB_Transmit+0x792>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	461a      	mov	r2, r3
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	00db      	lsls	r3, r3, #3
 80077d6:	4413      	add	r3, r2
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	6812      	ldr	r2, [r2, #0]
 80077dc:	4413      	add	r3, r2
 80077de:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80077e2:	881b      	ldrh	r3, [r3, #0]
 80077e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80077e8:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86

    if (ep->xfer_len >= TxPctSize)
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	699a      	ldr	r2, [r3, #24]
 80077f0:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d307      	bcc.n	8007808 <HAL_PCD_EP_DB_Transmit+0x414>
    {
      ep->xfer_len -= TxPctSize;
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	699a      	ldr	r2, [r3, #24]
 80077fc:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007800:	1ad2      	subs	r2, r2, r3
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	619a      	str	r2, [r3, #24]
 8007806:	e002      	b.n	800780e <HAL_PCD_EP_DB_Transmit+0x41a>
    }
    else
    {
      ep->xfer_len = 0U;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2200      	movs	r2, #0
 800780c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	699b      	ldr	r3, [r3, #24]
 8007812:	2b00      	cmp	r3, #0
 8007814:	f040 80c0 	bne.w	8007998 <HAL_PCD_EP_DB_Transmit+0x5a4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	785b      	ldrb	r3, [r3, #1]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d126      	bne.n	800786e <HAL_PCD_EP_DB_Transmit+0x47a>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800782e:	b29b      	uxth	r3, r3
 8007830:	461a      	mov	r2, r3
 8007832:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007834:	4413      	add	r3, r2
 8007836:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	00da      	lsls	r2, r3, #3
 800783e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007840:	4413      	add	r3, r2
 8007842:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007846:	67bb      	str	r3, [r7, #120]	; 0x78
 8007848:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800784a:	881b      	ldrh	r3, [r3, #0]
 800784c:	b29b      	uxth	r3, r3
 800784e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007852:	b29a      	uxth	r2, r3
 8007854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007856:	801a      	strh	r2, [r3, #0]
 8007858:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	b29b      	uxth	r3, r3
 800785e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007866:	b29a      	uxth	r2, r3
 8007868:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800786a:	801a      	strh	r2, [r3, #0]
 800786c:	e01a      	b.n	80078a4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	785b      	ldrb	r3, [r3, #1]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d116      	bne.n	80078a4 <HAL_PCD_EP_DB_Transmit+0x4b0>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	667b      	str	r3, [r7, #100]	; 0x64
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007884:	b29b      	uxth	r3, r3
 8007886:	461a      	mov	r2, r3
 8007888:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800788a:	4413      	add	r3, r2
 800788c:	667b      	str	r3, [r7, #100]	; 0x64
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	00da      	lsls	r2, r3, #3
 8007894:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007896:	4413      	add	r3, r2
 8007898:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800789c:	663b      	str	r3, [r7, #96]	; 0x60
 800789e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80078a0:	2200      	movs	r2, #0
 80078a2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	677b      	str	r3, [r7, #116]	; 0x74
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	785b      	ldrb	r3, [r3, #1]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d12b      	bne.n	800790a <HAL_PCD_EP_DB_Transmit+0x516>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	461a      	mov	r2, r3
 80078c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078c6:	4413      	add	r3, r2
 80078c8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	00da      	lsls	r2, r3, #3
 80078d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078d2:	4413      	add	r3, r2
 80078d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80078d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80078dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078e0:	881b      	ldrh	r3, [r3, #0]
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80078e8:	b29a      	uxth	r2, r3
 80078ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078ee:	801a      	strh	r2, [r3, #0]
 80078f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80078f4:	881b      	ldrh	r3, [r3, #0]
 80078f6:	b29b      	uxth	r3, r3
 80078f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80078fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007900:	b29a      	uxth	r2, r3
 8007902:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007906:	801a      	strh	r2, [r3, #0]
 8007908:	e017      	b.n	800793a <HAL_PCD_EP_DB_Transmit+0x546>
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	785b      	ldrb	r3, [r3, #1]
 800790e:	2b01      	cmp	r3, #1
 8007910:	d113      	bne.n	800793a <HAL_PCD_EP_DB_Transmit+0x546>
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800791a:	b29b      	uxth	r3, r3
 800791c:	461a      	mov	r2, r3
 800791e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007920:	4413      	add	r3, r2
 8007922:	677b      	str	r3, [r7, #116]	; 0x74
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	00da      	lsls	r2, r3, #3
 800792a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800792c:	4413      	add	r3, r2
 800792e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007932:	673b      	str	r3, [r7, #112]	; 0x70
 8007934:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007936:	2200      	movs	r2, #0
 8007938:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	4619      	mov	r1, r3
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f006 f9d4 	bl	800dcee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007946:	88fb      	ldrh	r3, [r7, #6]
 8007948:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800794c:	2b00      	cmp	r3, #0
 800794e:	f040 811a 	bne.w	8007b86 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	009b      	lsls	r3, r3, #2
 800795e:	4413      	add	r3, r2
 8007960:	881b      	ldrh	r3, [r3, #0]
 8007962:	b29b      	uxth	r3, r3
 8007964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800796c:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	461a      	mov	r2, r3
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	781b      	ldrb	r3, [r3, #0]
 800797a:	009b      	lsls	r3, r3, #2
 800797c:	441a      	add	r2, r3
 800797e:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8007982:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007986:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800798a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800798e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007992:	b29b      	uxth	r3, r3
 8007994:	8013      	strh	r3, [r2, #0]
 8007996:	e0f6      	b.n	8007b86 <HAL_PCD_EP_DB_Transmit+0x792>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8007998:	88fb      	ldrh	r3, [r7, #6]
 800799a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d121      	bne.n	80079e6 <HAL_PCD_EP_DB_Transmit+0x5f2>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	4413      	add	r3, r2
 80079b0:	881b      	ldrh	r3, [r3, #0]
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80079b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079bc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	461a      	mov	r2, r3
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	441a      	add	r2, r3
 80079ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80079d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80079d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80079da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079e2:	b29b      	uxth	r3, r3
 80079e4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	f040 80ca 	bne.w	8007b86 <HAL_PCD_EP_DB_Transmit+0x792>
      {
        ep->xfer_buff += TxPctSize;
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	695a      	ldr	r2, [r3, #20]
 80079f6:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80079fa:	441a      	add	r2, r3
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	69da      	ldr	r2, [r3, #28]
 8007a04:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007a08:	441a      	add	r2, r3
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	6a1a      	ldr	r2, [r3, #32]
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	691b      	ldr	r3, [r3, #16]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d30b      	bcc.n	8007a32 <HAL_PCD_EP_DB_Transmit+0x63e>
        {
          len = ep->maxpacket;
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db -= len;
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	6a1a      	ldr	r2, [r3, #32]
 8007a26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a2a:	1ad2      	subs	r2, r2, r3
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	621a      	str	r2, [r3, #32]
 8007a30:	e017      	b.n	8007a62 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else if (ep->xfer_len_db == 0U)
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	6a1b      	ldr	r3, [r3, #32]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d108      	bne.n	8007a4c <HAL_PCD_EP_DB_Transmit+0x658>
        {
          len = TxPctSize;
 8007a3a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007a3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_fill_db = 0U;
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	2200      	movs	r2, #0
 8007a46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007a4a:	e00a      	b.n	8007a62 <HAL_PCD_EP_DB_Transmit+0x66e>
        }
        else
        {
          len = ep->xfer_len_db;
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	6a1b      	ldr	r3, [r3, #32]
 8007a50:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          ep->xfer_len_db = 0U;
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	2200      	movs	r2, #0
 8007a58:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	657b      	str	r3, [r7, #84]	; 0x54
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	785b      	ldrb	r3, [r3, #1]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d165      	bne.n	8007b3c <HAL_PCD_EP_DB_Transmit+0x748>
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	461a      	mov	r2, r3
 8007a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a84:	4413      	add	r3, r2
 8007a86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	00da      	lsls	r2, r3, #3
 8007a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007a90:	4413      	add	r3, r2
 8007a92:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007a96:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007a9a:	881b      	ldrh	r3, [r3, #0]
 8007a9c:	b29b      	uxth	r3, r3
 8007a9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007aa2:	b29a      	uxth	r2, r3
 8007aa4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007aa6:	801a      	strh	r2, [r3, #0]
 8007aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007aac:	2b3e      	cmp	r3, #62	; 0x3e
 8007aae:	d91d      	bls.n	8007aec <HAL_PCD_EP_DB_Transmit+0x6f8>
 8007ab0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ab4:	095b      	lsrs	r3, r3, #5
 8007ab6:	66bb      	str	r3, [r7, #104]	; 0x68
 8007ab8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007abc:	f003 031f 	and.w	r3, r3, #31
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d102      	bne.n	8007aca <HAL_PCD_EP_DB_Transmit+0x6d6>
 8007ac4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007aca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007acc:	881b      	ldrh	r3, [r3, #0]
 8007ace:	b29a      	uxth	r2, r3
 8007ad0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	029b      	lsls	r3, r3, #10
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007ae0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007ae8:	801a      	strh	r2, [r3, #0]
 8007aea:	e041      	b.n	8007b70 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007aec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10a      	bne.n	8007b0a <HAL_PCD_EP_DB_Transmit+0x716>
 8007af4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007af6:	881b      	ldrh	r3, [r3, #0]
 8007af8:	b29b      	uxth	r3, r3
 8007afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b02:	b29a      	uxth	r2, r3
 8007b04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b06:	801a      	strh	r2, [r3, #0]
 8007b08:	e032      	b.n	8007b70 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007b0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b0e:	085b      	lsrs	r3, r3, #1
 8007b10:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d002      	beq.n	8007b24 <HAL_PCD_EP_DB_Transmit+0x730>
 8007b1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b20:	3301      	adds	r3, #1
 8007b22:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b24:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b26:	881b      	ldrh	r3, [r3, #0]
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	029b      	lsls	r3, r3, #10
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	4313      	orrs	r3, r2
 8007b34:	b29a      	uxth	r2, r3
 8007b36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007b38:	801a      	strh	r2, [r3, #0]
 8007b3a:	e019      	b.n	8007b70 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007b3c:	68bb      	ldr	r3, [r7, #8]
 8007b3e:	785b      	ldrb	r3, [r3, #1]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d115      	bne.n	8007b70 <HAL_PCD_EP_DB_Transmit+0x77c>
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	461a      	mov	r2, r3
 8007b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b52:	4413      	add	r3, r2
 8007b54:	657b      	str	r3, [r7, #84]	; 0x54
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	00da      	lsls	r2, r3, #3
 8007b5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b5e:	4413      	add	r3, r2
 8007b60:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b64:	653b      	str	r3, [r7, #80]	; 0x50
 8007b66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b6a:	b29a      	uxth	r2, r3
 8007b6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b6e:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6818      	ldr	r0, [r3, #0]
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	6959      	ldr	r1, [r3, #20]
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	895a      	ldrh	r2, [r3, #10]
 8007b7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	f004 f94d 	bl	800be20 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	461a      	mov	r2, r3
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	009b      	lsls	r3, r3, #2
 8007b92:	4413      	add	r3, r2
 8007b94:	881b      	ldrh	r3, [r3, #0]
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ba0:	82bb      	strh	r3, [r7, #20]
 8007ba2:	8abb      	ldrh	r3, [r7, #20]
 8007ba4:	f083 0310 	eor.w	r3, r3, #16
 8007ba8:	82bb      	strh	r3, [r7, #20]
 8007baa:	8abb      	ldrh	r3, [r7, #20]
 8007bac:	f083 0320 	eor.w	r3, r3, #32
 8007bb0:	82bb      	strh	r3, [r7, #20]
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	441a      	add	r2, r3
 8007bc0:	8abb      	ldrh	r3, [r7, #20]
 8007bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007bca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8007bd6:	2300      	movs	r3, #0
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3790      	adds	r7, #144	; 0x90
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	607b      	str	r3, [r7, #4]
 8007bea:	460b      	mov	r3, r1
 8007bec:	817b      	strh	r3, [r7, #10]
 8007bee:	4613      	mov	r3, r2
 8007bf0:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8007bf2:	897b      	ldrh	r3, [r7, #10]
 8007bf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf8:	b29b      	uxth	r3, r3
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00b      	beq.n	8007c16 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007bfe:	897b      	ldrh	r3, [r7, #10]
 8007c00:	f003 0207 	and.w	r2, r3, #7
 8007c04:	4613      	mov	r3, r2
 8007c06:	009b      	lsls	r3, r3, #2
 8007c08:	4413      	add	r3, r2
 8007c0a:	00db      	lsls	r3, r3, #3
 8007c0c:	3310      	adds	r3, #16
 8007c0e:	68fa      	ldr	r2, [r7, #12]
 8007c10:	4413      	add	r3, r2
 8007c12:	617b      	str	r3, [r7, #20]
 8007c14:	e009      	b.n	8007c2a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007c16:	897a      	ldrh	r2, [r7, #10]
 8007c18:	4613      	mov	r3, r2
 8007c1a:	009b      	lsls	r3, r3, #2
 8007c1c:	4413      	add	r3, r2
 8007c1e:	00db      	lsls	r3, r3, #3
 8007c20:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007c24:	68fa      	ldr	r2, [r7, #12]
 8007c26:	4413      	add	r3, r2
 8007c28:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007c2a:	893b      	ldrh	r3, [r7, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d107      	bne.n	8007c40 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	2200      	movs	r2, #0
 8007c34:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	b29a      	uxth	r2, r3
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	80da      	strh	r2, [r3, #6]
 8007c3e:	e00b      	b.n	8007c58 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	2201      	movs	r2, #1
 8007c44:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	b29a      	uxth	r2, r3
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	0c1b      	lsrs	r3, r3, #16
 8007c52:	b29a      	uxth	r2, r3
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	371c      	adds	r7, #28
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b085      	sub	sp, #20
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  hpcd->LPM_State = LPM_L0;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 22c8 	strb.w	r2, [r3, #712]	; 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	f043 0301 	orr.w	r3, r3, #1
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	f043 0302 	orr.w	r3, r3, #2
 8007ca4:	b29a      	uxth	r2, r3
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8007cac:	2300      	movs	r3, #0
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3714      	adds	r7, #20
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
	...

08007cbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b085      	sub	sp, #20
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d141      	bne.n	8007d4e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007cca:	4b4b      	ldr	r3, [pc, #300]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007cd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007cd6:	d131      	bne.n	8007d3c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007cd8:	4b47      	ldr	r3, [pc, #284]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cda:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cde:	4a46      	ldr	r2, [pc, #280]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ce4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ce8:	4b43      	ldr	r3, [pc, #268]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007cf0:	4a41      	ldr	r2, [pc, #260]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007cf2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007cf6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007cf8:	4b40      	ldr	r3, [pc, #256]	; (8007dfc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	2232      	movs	r2, #50	; 0x32
 8007cfe:	fb02 f303 	mul.w	r3, r2, r3
 8007d02:	4a3f      	ldr	r2, [pc, #252]	; (8007e00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007d04:	fba2 2303 	umull	r2, r3, r2, r3
 8007d08:	0c9b      	lsrs	r3, r3, #18
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d0e:	e002      	b.n	8007d16 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	3b01      	subs	r3, #1
 8007d14:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d16:	4b38      	ldr	r3, [pc, #224]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d18:	695b      	ldr	r3, [r3, #20]
 8007d1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d22:	d102      	bne.n	8007d2a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d1f2      	bne.n	8007d10 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007d2a:	4b33      	ldr	r3, [pc, #204]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d36:	d158      	bne.n	8007dea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007d38:	2303      	movs	r3, #3
 8007d3a:	e057      	b.n	8007dec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d3c:	4b2e      	ldr	r3, [pc, #184]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d42:	4a2d      	ldr	r2, [pc, #180]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d48:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007d4c:	e04d      	b.n	8007dea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d54:	d141      	bne.n	8007dda <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007d56:	4b28      	ldr	r3, [pc, #160]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d62:	d131      	bne.n	8007dc8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007d64:	4b24      	ldr	r3, [pc, #144]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d6a:	4a23      	ldr	r2, [pc, #140]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007d74:	4b20      	ldr	r3, [pc, #128]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007d7c:	4a1e      	ldr	r2, [pc, #120]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007d82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007d84:	4b1d      	ldr	r3, [pc, #116]	; (8007dfc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2232      	movs	r2, #50	; 0x32
 8007d8a:	fb02 f303 	mul.w	r3, r2, r3
 8007d8e:	4a1c      	ldr	r2, [pc, #112]	; (8007e00 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8007d90:	fba2 2303 	umull	r2, r3, r2, r3
 8007d94:	0c9b      	lsrs	r3, r3, #18
 8007d96:	3301      	adds	r3, #1
 8007d98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007d9a:	e002      	b.n	8007da2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007da2:	4b15      	ldr	r3, [pc, #84]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007da4:	695b      	ldr	r3, [r3, #20]
 8007da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dae:	d102      	bne.n	8007db6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1f2      	bne.n	8007d9c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007db6:	4b10      	ldr	r3, [pc, #64]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dc2:	d112      	bne.n	8007dea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8007dc4:	2303      	movs	r3, #3
 8007dc6:	e011      	b.n	8007dec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007dc8:	4b0b      	ldr	r3, [pc, #44]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007dce:	4a0a      	ldr	r2, [pc, #40]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dd4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8007dd8:	e007      	b.n	8007dea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007dda:	4b07      	ldr	r3, [pc, #28]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007de2:	4a05      	ldr	r2, [pc, #20]	; (8007df8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8007de4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007de8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3714      	adds	r7, #20
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr
 8007df8:	40007000 	.word	0x40007000
 8007dfc:	20000010 	.word	0x20000010
 8007e00:	431bde83 	.word	0x431bde83

08007e04 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8007e04:	b480      	push	{r7}
 8007e06:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007e08:	4b05      	ldr	r3, [pc, #20]	; (8007e20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007e0a:	689b      	ldr	r3, [r3, #8]
 8007e0c:	4a04      	ldr	r2, [pc, #16]	; (8007e20 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8007e0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e12:	6093      	str	r3, [r2, #8]
}
 8007e14:	bf00      	nop
 8007e16:	46bd      	mov	sp, r7
 8007e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1c:	4770      	bx	lr
 8007e1e:	bf00      	nop
 8007e20:	40007000 	.word	0x40007000

08007e24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b088      	sub	sp, #32
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d101      	bne.n	8007e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e2fe      	b.n	8008434 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d075      	beq.n	8007f2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007e42:	4b97      	ldr	r3, [pc, #604]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f003 030c 	and.w	r3, r3, #12
 8007e4a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e4c:	4b94      	ldr	r3, [pc, #592]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007e4e:	68db      	ldr	r3, [r3, #12]
 8007e50:	f003 0303 	and.w	r3, r3, #3
 8007e54:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007e56:	69bb      	ldr	r3, [r7, #24]
 8007e58:	2b0c      	cmp	r3, #12
 8007e5a:	d102      	bne.n	8007e62 <HAL_RCC_OscConfig+0x3e>
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	2b03      	cmp	r3, #3
 8007e60:	d002      	beq.n	8007e68 <HAL_RCC_OscConfig+0x44>
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	2b08      	cmp	r3, #8
 8007e66:	d10b      	bne.n	8007e80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e68:	4b8d      	ldr	r3, [pc, #564]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d05b      	beq.n	8007f2c <HAL_RCC_OscConfig+0x108>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d157      	bne.n	8007f2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	e2d9      	b.n	8008434 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e88:	d106      	bne.n	8007e98 <HAL_RCC_OscConfig+0x74>
 8007e8a:	4b85      	ldr	r3, [pc, #532]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4a84      	ldr	r2, [pc, #528]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	e01d      	b.n	8007ed4 <HAL_RCC_OscConfig+0xb0>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ea0:	d10c      	bne.n	8007ebc <HAL_RCC_OscConfig+0x98>
 8007ea2:	4b7f      	ldr	r3, [pc, #508]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a7e      	ldr	r2, [pc, #504]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007eac:	6013      	str	r3, [r2, #0]
 8007eae:	4b7c      	ldr	r3, [pc, #496]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a7b      	ldr	r2, [pc, #492]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eb8:	6013      	str	r3, [r2, #0]
 8007eba:	e00b      	b.n	8007ed4 <HAL_RCC_OscConfig+0xb0>
 8007ebc:	4b78      	ldr	r3, [pc, #480]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a77      	ldr	r2, [pc, #476]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ec6:	6013      	str	r3, [r2, #0]
 8007ec8:	4b75      	ldr	r3, [pc, #468]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a74      	ldr	r2, [pc, #464]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d013      	beq.n	8007f04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007edc:	f7fa fd88 	bl	80029f0 <HAL_GetTick>
 8007ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ee2:	e008      	b.n	8007ef6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ee4:	f7fa fd84 	bl	80029f0 <HAL_GetTick>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	1ad3      	subs	r3, r2, r3
 8007eee:	2b64      	cmp	r3, #100	; 0x64
 8007ef0:	d901      	bls.n	8007ef6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007ef2:	2303      	movs	r3, #3
 8007ef4:	e29e      	b.n	8008434 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ef6:	4b6a      	ldr	r3, [pc, #424]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d0f0      	beq.n	8007ee4 <HAL_RCC_OscConfig+0xc0>
 8007f02:	e014      	b.n	8007f2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f04:	f7fa fd74 	bl	80029f0 <HAL_GetTick>
 8007f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f0a:	e008      	b.n	8007f1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f0c:	f7fa fd70 	bl	80029f0 <HAL_GetTick>
 8007f10:	4602      	mov	r2, r0
 8007f12:	693b      	ldr	r3, [r7, #16]
 8007f14:	1ad3      	subs	r3, r2, r3
 8007f16:	2b64      	cmp	r3, #100	; 0x64
 8007f18:	d901      	bls.n	8007f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007f1a:	2303      	movs	r3, #3
 8007f1c:	e28a      	b.n	8008434 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007f1e:	4b60      	ldr	r3, [pc, #384]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d1f0      	bne.n	8007f0c <HAL_RCC_OscConfig+0xe8>
 8007f2a:	e000      	b.n	8007f2e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0302 	and.w	r3, r3, #2
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d075      	beq.n	8008026 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f3a:	4b59      	ldr	r3, [pc, #356]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f003 030c 	and.w	r3, r3, #12
 8007f42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007f44:	4b56      	ldr	r3, [pc, #344]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007f46:	68db      	ldr	r3, [r3, #12]
 8007f48:	f003 0303 	and.w	r3, r3, #3
 8007f4c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007f4e:	69bb      	ldr	r3, [r7, #24]
 8007f50:	2b0c      	cmp	r3, #12
 8007f52:	d102      	bne.n	8007f5a <HAL_RCC_OscConfig+0x136>
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	2b02      	cmp	r3, #2
 8007f58:	d002      	beq.n	8007f60 <HAL_RCC_OscConfig+0x13c>
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	2b04      	cmp	r3, #4
 8007f5e:	d11f      	bne.n	8007fa0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f60:	4b4f      	ldr	r3, [pc, #316]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d005      	beq.n	8007f78 <HAL_RCC_OscConfig+0x154>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	68db      	ldr	r3, [r3, #12]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d101      	bne.n	8007f78 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8007f74:	2301      	movs	r3, #1
 8007f76:	e25d      	b.n	8008434 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f78:	4b49      	ldr	r3, [pc, #292]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	061b      	lsls	r3, r3, #24
 8007f86:	4946      	ldr	r1, [pc, #280]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007f8c:	4b45      	ldr	r3, [pc, #276]	; (80080a4 <HAL_RCC_OscConfig+0x280>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4618      	mov	r0, r3
 8007f92:	f7fa fce1 	bl	8002958 <HAL_InitTick>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d043      	beq.n	8008024 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e249      	b.n	8008434 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	68db      	ldr	r3, [r3, #12]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d023      	beq.n	8007ff0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007fa8:	4b3d      	ldr	r3, [pc, #244]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	4a3c      	ldr	r2, [pc, #240]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb4:	f7fa fd1c 	bl	80029f0 <HAL_GetTick>
 8007fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fba:	e008      	b.n	8007fce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007fbc:	f7fa fd18 	bl	80029f0 <HAL_GetTick>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	1ad3      	subs	r3, r2, r3
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d901      	bls.n	8007fce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007fca:	2303      	movs	r3, #3
 8007fcc:	e232      	b.n	8008434 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007fce:	4b34      	ldr	r3, [pc, #208]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d0f0      	beq.n	8007fbc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fda:	4b31      	ldr	r3, [pc, #196]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	691b      	ldr	r3, [r3, #16]
 8007fe6:	061b      	lsls	r3, r3, #24
 8007fe8:	492d      	ldr	r1, [pc, #180]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	604b      	str	r3, [r1, #4]
 8007fee:	e01a      	b.n	8008026 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ff0:	4b2b      	ldr	r3, [pc, #172]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a2a      	ldr	r2, [pc, #168]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8007ff6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ffa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ffc:	f7fa fcf8 	bl	80029f0 <HAL_GetTick>
 8008000:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008002:	e008      	b.n	8008016 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008004:	f7fa fcf4 	bl	80029f0 <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	2b02      	cmp	r3, #2
 8008010:	d901      	bls.n	8008016 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e20e      	b.n	8008434 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008016:	4b22      	ldr	r3, [pc, #136]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1f0      	bne.n	8008004 <HAL_RCC_OscConfig+0x1e0>
 8008022:	e000      	b.n	8008026 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008024:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 0308 	and.w	r3, r3, #8
 800802e:	2b00      	cmp	r3, #0
 8008030:	d041      	beq.n	80080b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	695b      	ldr	r3, [r3, #20]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d01c      	beq.n	8008074 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800803a:	4b19      	ldr	r3, [pc, #100]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 800803c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008040:	4a17      	ldr	r2, [pc, #92]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8008042:	f043 0301 	orr.w	r3, r3, #1
 8008046:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800804a:	f7fa fcd1 	bl	80029f0 <HAL_GetTick>
 800804e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008050:	e008      	b.n	8008064 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008052:	f7fa fccd 	bl	80029f0 <HAL_GetTick>
 8008056:	4602      	mov	r2, r0
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	1ad3      	subs	r3, r2, r3
 800805c:	2b02      	cmp	r3, #2
 800805e:	d901      	bls.n	8008064 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008060:	2303      	movs	r3, #3
 8008062:	e1e7      	b.n	8008434 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008064:	4b0e      	ldr	r3, [pc, #56]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8008066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800806a:	f003 0302 	and.w	r3, r3, #2
 800806e:	2b00      	cmp	r3, #0
 8008070:	d0ef      	beq.n	8008052 <HAL_RCC_OscConfig+0x22e>
 8008072:	e020      	b.n	80080b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008074:	4b0a      	ldr	r3, [pc, #40]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 8008076:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800807a:	4a09      	ldr	r2, [pc, #36]	; (80080a0 <HAL_RCC_OscConfig+0x27c>)
 800807c:	f023 0301 	bic.w	r3, r3, #1
 8008080:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008084:	f7fa fcb4 	bl	80029f0 <HAL_GetTick>
 8008088:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800808a:	e00d      	b.n	80080a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800808c:	f7fa fcb0 	bl	80029f0 <HAL_GetTick>
 8008090:	4602      	mov	r2, r0
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	1ad3      	subs	r3, r2, r3
 8008096:	2b02      	cmp	r3, #2
 8008098:	d906      	bls.n	80080a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	e1ca      	b.n	8008434 <HAL_RCC_OscConfig+0x610>
 800809e:	bf00      	nop
 80080a0:	40021000 	.word	0x40021000
 80080a4:	20000014 	.word	0x20000014
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080a8:	4b8c      	ldr	r3, [pc, #560]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 80080aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80080ae:	f003 0302 	and.w	r3, r3, #2
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d1ea      	bne.n	800808c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f003 0304 	and.w	r3, r3, #4
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f000 80a6 	beq.w	8008210 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80080c4:	2300      	movs	r3, #0
 80080c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80080c8:	4b84      	ldr	r3, [pc, #528]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 80080ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d101      	bne.n	80080d8 <HAL_RCC_OscConfig+0x2b4>
 80080d4:	2301      	movs	r3, #1
 80080d6:	e000      	b.n	80080da <HAL_RCC_OscConfig+0x2b6>
 80080d8:	2300      	movs	r3, #0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00d      	beq.n	80080fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80080de:	4b7f      	ldr	r3, [pc, #508]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 80080e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080e2:	4a7e      	ldr	r2, [pc, #504]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 80080e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080e8:	6593      	str	r3, [r2, #88]	; 0x58
 80080ea:	4b7c      	ldr	r3, [pc, #496]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 80080ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080f2:	60fb      	str	r3, [r7, #12]
 80080f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80080f6:	2301      	movs	r3, #1
 80080f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80080fa:	4b79      	ldr	r3, [pc, #484]	; (80082e0 <HAL_RCC_OscConfig+0x4bc>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008102:	2b00      	cmp	r3, #0
 8008104:	d118      	bne.n	8008138 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008106:	4b76      	ldr	r3, [pc, #472]	; (80082e0 <HAL_RCC_OscConfig+0x4bc>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a75      	ldr	r2, [pc, #468]	; (80082e0 <HAL_RCC_OscConfig+0x4bc>)
 800810c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008112:	f7fa fc6d 	bl	80029f0 <HAL_GetTick>
 8008116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008118:	e008      	b.n	800812c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800811a:	f7fa fc69 	bl	80029f0 <HAL_GetTick>
 800811e:	4602      	mov	r2, r0
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	2b02      	cmp	r3, #2
 8008126:	d901      	bls.n	800812c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008128:	2303      	movs	r3, #3
 800812a:	e183      	b.n	8008434 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800812c:	4b6c      	ldr	r3, [pc, #432]	; (80082e0 <HAL_RCC_OscConfig+0x4bc>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008134:	2b00      	cmp	r3, #0
 8008136:	d0f0      	beq.n	800811a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	2b01      	cmp	r3, #1
 800813e:	d108      	bne.n	8008152 <HAL_RCC_OscConfig+0x32e>
 8008140:	4b66      	ldr	r3, [pc, #408]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 8008142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008146:	4a65      	ldr	r2, [pc, #404]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 8008148:	f043 0301 	orr.w	r3, r3, #1
 800814c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008150:	e024      	b.n	800819c <HAL_RCC_OscConfig+0x378>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	2b05      	cmp	r3, #5
 8008158:	d110      	bne.n	800817c <HAL_RCC_OscConfig+0x358>
 800815a:	4b60      	ldr	r3, [pc, #384]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 800815c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008160:	4a5e      	ldr	r2, [pc, #376]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 8008162:	f043 0304 	orr.w	r3, r3, #4
 8008166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800816a:	4b5c      	ldr	r3, [pc, #368]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 800816c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008170:	4a5a      	ldr	r2, [pc, #360]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 8008172:	f043 0301 	orr.w	r3, r3, #1
 8008176:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800817a:	e00f      	b.n	800819c <HAL_RCC_OscConfig+0x378>
 800817c:	4b57      	ldr	r3, [pc, #348]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 800817e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008182:	4a56      	ldr	r2, [pc, #344]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 8008184:	f023 0301 	bic.w	r3, r3, #1
 8008188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800818c:	4b53      	ldr	r3, [pc, #332]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 800818e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008192:	4a52      	ldr	r2, [pc, #328]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 8008194:	f023 0304 	bic.w	r3, r3, #4
 8008198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d016      	beq.n	80081d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081a4:	f7fa fc24 	bl	80029f0 <HAL_GetTick>
 80081a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081aa:	e00a      	b.n	80081c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081ac:	f7fa fc20 	bl	80029f0 <HAL_GetTick>
 80081b0:	4602      	mov	r2, r0
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d901      	bls.n	80081c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80081be:	2303      	movs	r3, #3
 80081c0:	e138      	b.n	8008434 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081c2:	4b46      	ldr	r3, [pc, #280]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 80081c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081c8:	f003 0302 	and.w	r3, r3, #2
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d0ed      	beq.n	80081ac <HAL_RCC_OscConfig+0x388>
 80081d0:	e015      	b.n	80081fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081d2:	f7fa fc0d 	bl	80029f0 <HAL_GetTick>
 80081d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80081d8:	e00a      	b.n	80081f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081da:	f7fa fc09 	bl	80029f0 <HAL_GetTick>
 80081de:	4602      	mov	r2, r0
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	1ad3      	subs	r3, r2, r3
 80081e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80081e8:	4293      	cmp	r3, r2
 80081ea:	d901      	bls.n	80081f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80081ec:	2303      	movs	r3, #3
 80081ee:	e121      	b.n	8008434 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80081f0:	4b3a      	ldr	r3, [pc, #232]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 80081f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081f6:	f003 0302 	and.w	r3, r3, #2
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d1ed      	bne.n	80081da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80081fe:	7ffb      	ldrb	r3, [r7, #31]
 8008200:	2b01      	cmp	r3, #1
 8008202:	d105      	bne.n	8008210 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008204:	4b35      	ldr	r3, [pc, #212]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 8008206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008208:	4a34      	ldr	r2, [pc, #208]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 800820a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800820e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f003 0320 	and.w	r3, r3, #32
 8008218:	2b00      	cmp	r3, #0
 800821a:	d03c      	beq.n	8008296 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	699b      	ldr	r3, [r3, #24]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d01c      	beq.n	800825e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008224:	4b2d      	ldr	r3, [pc, #180]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 8008226:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800822a:	4a2c      	ldr	r2, [pc, #176]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 800822c:	f043 0301 	orr.w	r3, r3, #1
 8008230:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008234:	f7fa fbdc 	bl	80029f0 <HAL_GetTick>
 8008238:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800823a:	e008      	b.n	800824e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800823c:	f7fa fbd8 	bl	80029f0 <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	2b02      	cmp	r3, #2
 8008248:	d901      	bls.n	800824e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e0f2      	b.n	8008434 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800824e:	4b23      	ldr	r3, [pc, #140]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 8008250:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008254:	f003 0302 	and.w	r3, r3, #2
 8008258:	2b00      	cmp	r3, #0
 800825a:	d0ef      	beq.n	800823c <HAL_RCC_OscConfig+0x418>
 800825c:	e01b      	b.n	8008296 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800825e:	4b1f      	ldr	r3, [pc, #124]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 8008260:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008264:	4a1d      	ldr	r2, [pc, #116]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 8008266:	f023 0301 	bic.w	r3, r3, #1
 800826a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800826e:	f7fa fbbf 	bl	80029f0 <HAL_GetTick>
 8008272:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008274:	e008      	b.n	8008288 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008276:	f7fa fbbb 	bl	80029f0 <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	2b02      	cmp	r3, #2
 8008282:	d901      	bls.n	8008288 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e0d5      	b.n	8008434 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008288:	4b14      	ldr	r3, [pc, #80]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 800828a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800828e:	f003 0302 	and.w	r3, r3, #2
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1ef      	bne.n	8008276 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	69db      	ldr	r3, [r3, #28]
 800829a:	2b00      	cmp	r3, #0
 800829c:	f000 80c9 	beq.w	8008432 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80082a0:	4b0e      	ldr	r3, [pc, #56]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 80082a2:	689b      	ldr	r3, [r3, #8]
 80082a4:	f003 030c 	and.w	r3, r3, #12
 80082a8:	2b0c      	cmp	r3, #12
 80082aa:	f000 8083 	beq.w	80083b4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	69db      	ldr	r3, [r3, #28]
 80082b2:	2b02      	cmp	r3, #2
 80082b4:	d15e      	bne.n	8008374 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082b6:	4b09      	ldr	r3, [pc, #36]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a08      	ldr	r2, [pc, #32]	; (80082dc <HAL_RCC_OscConfig+0x4b8>)
 80082bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80082c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c2:	f7fa fb95 	bl	80029f0 <HAL_GetTick>
 80082c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082c8:	e00c      	b.n	80082e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082ca:	f7fa fb91 	bl	80029f0 <HAL_GetTick>
 80082ce:	4602      	mov	r2, r0
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d905      	bls.n	80082e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	e0ab      	b.n	8008434 <HAL_RCC_OscConfig+0x610>
 80082dc:	40021000 	.word	0x40021000
 80082e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80082e4:	4b55      	ldr	r3, [pc, #340]	; (800843c <HAL_RCC_OscConfig+0x618>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1ec      	bne.n	80082ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80082f0:	4b52      	ldr	r3, [pc, #328]	; (800843c <HAL_RCC_OscConfig+0x618>)
 80082f2:	68da      	ldr	r2, [r3, #12]
 80082f4:	4b52      	ldr	r3, [pc, #328]	; (8008440 <HAL_RCC_OscConfig+0x61c>)
 80082f6:	4013      	ands	r3, r2
 80082f8:	687a      	ldr	r2, [r7, #4]
 80082fa:	6a11      	ldr	r1, [r2, #32]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008300:	3a01      	subs	r2, #1
 8008302:	0112      	lsls	r2, r2, #4
 8008304:	4311      	orrs	r1, r2
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800830a:	0212      	lsls	r2, r2, #8
 800830c:	4311      	orrs	r1, r2
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008312:	0852      	lsrs	r2, r2, #1
 8008314:	3a01      	subs	r2, #1
 8008316:	0552      	lsls	r2, r2, #21
 8008318:	4311      	orrs	r1, r2
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800831e:	0852      	lsrs	r2, r2, #1
 8008320:	3a01      	subs	r2, #1
 8008322:	0652      	lsls	r2, r2, #25
 8008324:	4311      	orrs	r1, r2
 8008326:	687a      	ldr	r2, [r7, #4]
 8008328:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800832a:	06d2      	lsls	r2, r2, #27
 800832c:	430a      	orrs	r2, r1
 800832e:	4943      	ldr	r1, [pc, #268]	; (800843c <HAL_RCC_OscConfig+0x618>)
 8008330:	4313      	orrs	r3, r2
 8008332:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008334:	4b41      	ldr	r3, [pc, #260]	; (800843c <HAL_RCC_OscConfig+0x618>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4a40      	ldr	r2, [pc, #256]	; (800843c <HAL_RCC_OscConfig+0x618>)
 800833a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800833e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008340:	4b3e      	ldr	r3, [pc, #248]	; (800843c <HAL_RCC_OscConfig+0x618>)
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	4a3d      	ldr	r2, [pc, #244]	; (800843c <HAL_RCC_OscConfig+0x618>)
 8008346:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800834a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800834c:	f7fa fb50 	bl	80029f0 <HAL_GetTick>
 8008350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008352:	e008      	b.n	8008366 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008354:	f7fa fb4c 	bl	80029f0 <HAL_GetTick>
 8008358:	4602      	mov	r2, r0
 800835a:	693b      	ldr	r3, [r7, #16]
 800835c:	1ad3      	subs	r3, r2, r3
 800835e:	2b02      	cmp	r3, #2
 8008360:	d901      	bls.n	8008366 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8008362:	2303      	movs	r3, #3
 8008364:	e066      	b.n	8008434 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008366:	4b35      	ldr	r3, [pc, #212]	; (800843c <HAL_RCC_OscConfig+0x618>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800836e:	2b00      	cmp	r3, #0
 8008370:	d0f0      	beq.n	8008354 <HAL_RCC_OscConfig+0x530>
 8008372:	e05e      	b.n	8008432 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008374:	4b31      	ldr	r3, [pc, #196]	; (800843c <HAL_RCC_OscConfig+0x618>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a30      	ldr	r2, [pc, #192]	; (800843c <HAL_RCC_OscConfig+0x618>)
 800837a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800837e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008380:	f7fa fb36 	bl	80029f0 <HAL_GetTick>
 8008384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008386:	e008      	b.n	800839a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008388:	f7fa fb32 	bl	80029f0 <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	2b02      	cmp	r3, #2
 8008394:	d901      	bls.n	800839a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e04c      	b.n	8008434 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800839a:	4b28      	ldr	r3, [pc, #160]	; (800843c <HAL_RCC_OscConfig+0x618>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1f0      	bne.n	8008388 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80083a6:	4b25      	ldr	r3, [pc, #148]	; (800843c <HAL_RCC_OscConfig+0x618>)
 80083a8:	68da      	ldr	r2, [r3, #12]
 80083aa:	4924      	ldr	r1, [pc, #144]	; (800843c <HAL_RCC_OscConfig+0x618>)
 80083ac:	4b25      	ldr	r3, [pc, #148]	; (8008444 <HAL_RCC_OscConfig+0x620>)
 80083ae:	4013      	ands	r3, r2
 80083b0:	60cb      	str	r3, [r1, #12]
 80083b2:	e03e      	b.n	8008432 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	69db      	ldr	r3, [r3, #28]
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d101      	bne.n	80083c0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80083bc:	2301      	movs	r3, #1
 80083be:	e039      	b.n	8008434 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80083c0:	4b1e      	ldr	r3, [pc, #120]	; (800843c <HAL_RCC_OscConfig+0x618>)
 80083c2:	68db      	ldr	r3, [r3, #12]
 80083c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083c6:	697b      	ldr	r3, [r7, #20]
 80083c8:	f003 0203 	and.w	r2, r3, #3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6a1b      	ldr	r3, [r3, #32]
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d12c      	bne.n	800842e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083de:	3b01      	subs	r3, #1
 80083e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80083e2:	429a      	cmp	r2, r3
 80083e4:	d123      	bne.n	800842e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d11b      	bne.n	800842e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008400:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008402:	429a      	cmp	r2, r3
 8008404:	d113      	bne.n	800842e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008410:	085b      	lsrs	r3, r3, #1
 8008412:	3b01      	subs	r3, #1
 8008414:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008416:	429a      	cmp	r2, r3
 8008418:	d109      	bne.n	800842e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008424:	085b      	lsrs	r3, r3, #1
 8008426:	3b01      	subs	r3, #1
 8008428:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800842a:	429a      	cmp	r2, r3
 800842c:	d001      	beq.n	8008432 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800842e:	2301      	movs	r3, #1
 8008430:	e000      	b.n	8008434 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8008432:	2300      	movs	r3, #0
}
 8008434:	4618      	mov	r0, r3
 8008436:	3720      	adds	r7, #32
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	40021000 	.word	0x40021000
 8008440:	019f800c 	.word	0x019f800c
 8008444:	feeefffc 	.word	0xfeeefffc

08008448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b086      	sub	sp, #24
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
 8008450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008452:	2300      	movs	r3, #0
 8008454:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d101      	bne.n	8008460 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e11e      	b.n	800869e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008460:	4b91      	ldr	r3, [pc, #580]	; (80086a8 <HAL_RCC_ClockConfig+0x260>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f003 030f 	and.w	r3, r3, #15
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	429a      	cmp	r2, r3
 800846c:	d910      	bls.n	8008490 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800846e:	4b8e      	ldr	r3, [pc, #568]	; (80086a8 <HAL_RCC_ClockConfig+0x260>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f023 020f 	bic.w	r2, r3, #15
 8008476:	498c      	ldr	r1, [pc, #560]	; (80086a8 <HAL_RCC_ClockConfig+0x260>)
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	4313      	orrs	r3, r2
 800847c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800847e:	4b8a      	ldr	r3, [pc, #552]	; (80086a8 <HAL_RCC_ClockConfig+0x260>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 030f 	and.w	r3, r3, #15
 8008486:	683a      	ldr	r2, [r7, #0]
 8008488:	429a      	cmp	r2, r3
 800848a:	d001      	beq.n	8008490 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e106      	b.n	800869e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0301 	and.w	r3, r3, #1
 8008498:	2b00      	cmp	r3, #0
 800849a:	d073      	beq.n	8008584 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	685b      	ldr	r3, [r3, #4]
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d129      	bne.n	80084f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80084a4:	4b81      	ldr	r3, [pc, #516]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d101      	bne.n	80084b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80084b0:	2301      	movs	r3, #1
 80084b2:	e0f4      	b.n	800869e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80084b4:	f000 f972 	bl	800879c <RCC_GetSysClockFreqFromPLLSource>
 80084b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	4a7c      	ldr	r2, [pc, #496]	; (80086b0 <HAL_RCC_ClockConfig+0x268>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d93f      	bls.n	8008542 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80084c2:	4b7a      	ldr	r3, [pc, #488]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d009      	beq.n	80084e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d033      	beq.n	8008542 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d12f      	bne.n	8008542 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80084e2:	4b72      	ldr	r3, [pc, #456]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084ea:	4a70      	ldr	r2, [pc, #448]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 80084ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80084f2:	2380      	movs	r3, #128	; 0x80
 80084f4:	617b      	str	r3, [r7, #20]
 80084f6:	e024      	b.n	8008542 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	2b02      	cmp	r3, #2
 80084fe:	d107      	bne.n	8008510 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008500:	4b6a      	ldr	r3, [pc, #424]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008508:	2b00      	cmp	r3, #0
 800850a:	d109      	bne.n	8008520 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	e0c6      	b.n	800869e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008510:	4b66      	ldr	r3, [pc, #408]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008518:	2b00      	cmp	r3, #0
 800851a:	d101      	bne.n	8008520 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800851c:	2301      	movs	r3, #1
 800851e:	e0be      	b.n	800869e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008520:	f000 f8ce 	bl	80086c0 <HAL_RCC_GetSysClockFreq>
 8008524:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008526:	693b      	ldr	r3, [r7, #16]
 8008528:	4a61      	ldr	r2, [pc, #388]	; (80086b0 <HAL_RCC_ClockConfig+0x268>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d909      	bls.n	8008542 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800852e:	4b5f      	ldr	r3, [pc, #380]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008536:	4a5d      	ldr	r2, [pc, #372]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 8008538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800853c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800853e:	2380      	movs	r3, #128	; 0x80
 8008540:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008542:	4b5a      	ldr	r3, [pc, #360]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f023 0203 	bic.w	r2, r3, #3
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	4957      	ldr	r1, [pc, #348]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 8008550:	4313      	orrs	r3, r2
 8008552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008554:	f7fa fa4c 	bl	80029f0 <HAL_GetTick>
 8008558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800855a:	e00a      	b.n	8008572 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800855c:	f7fa fa48 	bl	80029f0 <HAL_GetTick>
 8008560:	4602      	mov	r2, r0
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	1ad3      	subs	r3, r2, r3
 8008566:	f241 3288 	movw	r2, #5000	; 0x1388
 800856a:	4293      	cmp	r3, r2
 800856c:	d901      	bls.n	8008572 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e095      	b.n	800869e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008572:	4b4e      	ldr	r3, [pc, #312]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	f003 020c 	and.w	r2, r3, #12
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	685b      	ldr	r3, [r3, #4]
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	429a      	cmp	r2, r3
 8008582:	d1eb      	bne.n	800855c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0302 	and.w	r3, r3, #2
 800858c:	2b00      	cmp	r3, #0
 800858e:	d023      	beq.n	80085d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 0304 	and.w	r3, r3, #4
 8008598:	2b00      	cmp	r3, #0
 800859a:	d005      	beq.n	80085a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800859c:	4b43      	ldr	r3, [pc, #268]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 800859e:	689b      	ldr	r3, [r3, #8]
 80085a0:	4a42      	ldr	r2, [pc, #264]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 80085a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80085a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f003 0308 	and.w	r3, r3, #8
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d007      	beq.n	80085c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80085b4:	4b3d      	ldr	r3, [pc, #244]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80085bc:	4a3b      	ldr	r2, [pc, #236]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 80085be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80085c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085c4:	4b39      	ldr	r3, [pc, #228]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	4936      	ldr	r1, [pc, #216]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 80085d2:	4313      	orrs	r3, r2
 80085d4:	608b      	str	r3, [r1, #8]
 80085d6:	e008      	b.n	80085ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80085d8:	697b      	ldr	r3, [r7, #20]
 80085da:	2b80      	cmp	r3, #128	; 0x80
 80085dc:	d105      	bne.n	80085ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80085de:	4b33      	ldr	r3, [pc, #204]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	4a32      	ldr	r2, [pc, #200]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 80085e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80085ea:	4b2f      	ldr	r3, [pc, #188]	; (80086a8 <HAL_RCC_ClockConfig+0x260>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 030f 	and.w	r3, r3, #15
 80085f2:	683a      	ldr	r2, [r7, #0]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d21d      	bcs.n	8008634 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085f8:	4b2b      	ldr	r3, [pc, #172]	; (80086a8 <HAL_RCC_ClockConfig+0x260>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f023 020f 	bic.w	r2, r3, #15
 8008600:	4929      	ldr	r1, [pc, #164]	; (80086a8 <HAL_RCC_ClockConfig+0x260>)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	4313      	orrs	r3, r2
 8008606:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008608:	f7fa f9f2 	bl	80029f0 <HAL_GetTick>
 800860c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800860e:	e00a      	b.n	8008626 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008610:	f7fa f9ee 	bl	80029f0 <HAL_GetTick>
 8008614:	4602      	mov	r2, r0
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	f241 3288 	movw	r2, #5000	; 0x1388
 800861e:	4293      	cmp	r3, r2
 8008620:	d901      	bls.n	8008626 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008622:	2303      	movs	r3, #3
 8008624:	e03b      	b.n	800869e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008626:	4b20      	ldr	r3, [pc, #128]	; (80086a8 <HAL_RCC_ClockConfig+0x260>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 030f 	and.w	r3, r3, #15
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	429a      	cmp	r2, r3
 8008632:	d1ed      	bne.n	8008610 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0304 	and.w	r3, r3, #4
 800863c:	2b00      	cmp	r3, #0
 800863e:	d008      	beq.n	8008652 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008640:	4b1a      	ldr	r3, [pc, #104]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 8008642:	689b      	ldr	r3, [r3, #8]
 8008644:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	4917      	ldr	r1, [pc, #92]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 800864e:	4313      	orrs	r3, r2
 8008650:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 0308 	and.w	r3, r3, #8
 800865a:	2b00      	cmp	r3, #0
 800865c:	d009      	beq.n	8008672 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800865e:	4b13      	ldr	r3, [pc, #76]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	00db      	lsls	r3, r3, #3
 800866c:	490f      	ldr	r1, [pc, #60]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 800866e:	4313      	orrs	r3, r2
 8008670:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008672:	f000 f825 	bl	80086c0 <HAL_RCC_GetSysClockFreq>
 8008676:	4602      	mov	r2, r0
 8008678:	4b0c      	ldr	r3, [pc, #48]	; (80086ac <HAL_RCC_ClockConfig+0x264>)
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	091b      	lsrs	r3, r3, #4
 800867e:	f003 030f 	and.w	r3, r3, #15
 8008682:	490c      	ldr	r1, [pc, #48]	; (80086b4 <HAL_RCC_ClockConfig+0x26c>)
 8008684:	5ccb      	ldrb	r3, [r1, r3]
 8008686:	f003 031f 	and.w	r3, r3, #31
 800868a:	fa22 f303 	lsr.w	r3, r2, r3
 800868e:	4a0a      	ldr	r2, [pc, #40]	; (80086b8 <HAL_RCC_ClockConfig+0x270>)
 8008690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008692:	4b0a      	ldr	r3, [pc, #40]	; (80086bc <HAL_RCC_ClockConfig+0x274>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f7fa f95e 	bl	8002958 <HAL_InitTick>
 800869c:	4603      	mov	r3, r0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3718      	adds	r7, #24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	40022000 	.word	0x40022000
 80086ac:	40021000 	.word	0x40021000
 80086b0:	04c4b400 	.word	0x04c4b400
 80086b4:	08012118 	.word	0x08012118
 80086b8:	20000010 	.word	0x20000010
 80086bc:	20000014 	.word	0x20000014

080086c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b087      	sub	sp, #28
 80086c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80086c6:	4b2c      	ldr	r3, [pc, #176]	; (8008778 <HAL_RCC_GetSysClockFreq+0xb8>)
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	f003 030c 	and.w	r3, r3, #12
 80086ce:	2b04      	cmp	r3, #4
 80086d0:	d102      	bne.n	80086d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80086d2:	4b2a      	ldr	r3, [pc, #168]	; (800877c <HAL_RCC_GetSysClockFreq+0xbc>)
 80086d4:	613b      	str	r3, [r7, #16]
 80086d6:	e047      	b.n	8008768 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80086d8:	4b27      	ldr	r3, [pc, #156]	; (8008778 <HAL_RCC_GetSysClockFreq+0xb8>)
 80086da:	689b      	ldr	r3, [r3, #8]
 80086dc:	f003 030c 	and.w	r3, r3, #12
 80086e0:	2b08      	cmp	r3, #8
 80086e2:	d102      	bne.n	80086ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80086e4:	4b26      	ldr	r3, [pc, #152]	; (8008780 <HAL_RCC_GetSysClockFreq+0xc0>)
 80086e6:	613b      	str	r3, [r7, #16]
 80086e8:	e03e      	b.n	8008768 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80086ea:	4b23      	ldr	r3, [pc, #140]	; (8008778 <HAL_RCC_GetSysClockFreq+0xb8>)
 80086ec:	689b      	ldr	r3, [r3, #8]
 80086ee:	f003 030c 	and.w	r3, r3, #12
 80086f2:	2b0c      	cmp	r3, #12
 80086f4:	d136      	bne.n	8008764 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80086f6:	4b20      	ldr	r3, [pc, #128]	; (8008778 <HAL_RCC_GetSysClockFreq+0xb8>)
 80086f8:	68db      	ldr	r3, [r3, #12]
 80086fa:	f003 0303 	and.w	r3, r3, #3
 80086fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008700:	4b1d      	ldr	r3, [pc, #116]	; (8008778 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	091b      	lsrs	r3, r3, #4
 8008706:	f003 030f 	and.w	r3, r3, #15
 800870a:	3301      	adds	r3, #1
 800870c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2b03      	cmp	r3, #3
 8008712:	d10c      	bne.n	800872e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008714:	4a1a      	ldr	r2, [pc, #104]	; (8008780 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	fbb2 f3f3 	udiv	r3, r2, r3
 800871c:	4a16      	ldr	r2, [pc, #88]	; (8008778 <HAL_RCC_GetSysClockFreq+0xb8>)
 800871e:	68d2      	ldr	r2, [r2, #12]
 8008720:	0a12      	lsrs	r2, r2, #8
 8008722:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008726:	fb02 f303 	mul.w	r3, r2, r3
 800872a:	617b      	str	r3, [r7, #20]
      break;
 800872c:	e00c      	b.n	8008748 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800872e:	4a13      	ldr	r2, [pc, #76]	; (800877c <HAL_RCC_GetSysClockFreq+0xbc>)
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	fbb2 f3f3 	udiv	r3, r2, r3
 8008736:	4a10      	ldr	r2, [pc, #64]	; (8008778 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008738:	68d2      	ldr	r2, [r2, #12]
 800873a:	0a12      	lsrs	r2, r2, #8
 800873c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008740:	fb02 f303 	mul.w	r3, r2, r3
 8008744:	617b      	str	r3, [r7, #20]
      break;
 8008746:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008748:	4b0b      	ldr	r3, [pc, #44]	; (8008778 <HAL_RCC_GetSysClockFreq+0xb8>)
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	0e5b      	lsrs	r3, r3, #25
 800874e:	f003 0303 	and.w	r3, r3, #3
 8008752:	3301      	adds	r3, #1
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008758:	697a      	ldr	r2, [r7, #20]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008760:	613b      	str	r3, [r7, #16]
 8008762:	e001      	b.n	8008768 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008764:	2300      	movs	r3, #0
 8008766:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008768:	693b      	ldr	r3, [r7, #16]
}
 800876a:	4618      	mov	r0, r3
 800876c:	371c      	adds	r7, #28
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop
 8008778:	40021000 	.word	0x40021000
 800877c:	00f42400 	.word	0x00f42400
 8008780:	007a1200 	.word	0x007a1200

08008784 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008784:	b480      	push	{r7}
 8008786:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008788:	4b03      	ldr	r3, [pc, #12]	; (8008798 <HAL_RCC_GetHCLKFreq+0x14>)
 800878a:	681b      	ldr	r3, [r3, #0]
}
 800878c:	4618      	mov	r0, r3
 800878e:	46bd      	mov	sp, r7
 8008790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008794:	4770      	bx	lr
 8008796:	bf00      	nop
 8008798:	20000010 	.word	0x20000010

0800879c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800879c:	b480      	push	{r7}
 800879e:	b087      	sub	sp, #28
 80087a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80087a2:	4b1e      	ldr	r3, [pc, #120]	; (800881c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80087a4:	68db      	ldr	r3, [r3, #12]
 80087a6:	f003 0303 	and.w	r3, r3, #3
 80087aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80087ac:	4b1b      	ldr	r3, [pc, #108]	; (800881c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	091b      	lsrs	r3, r3, #4
 80087b2:	f003 030f 	and.w	r3, r3, #15
 80087b6:	3301      	adds	r3, #1
 80087b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	2b03      	cmp	r3, #3
 80087be:	d10c      	bne.n	80087da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80087c0:	4a17      	ldr	r2, [pc, #92]	; (8008820 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80087c8:	4a14      	ldr	r2, [pc, #80]	; (800881c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80087ca:	68d2      	ldr	r2, [r2, #12]
 80087cc:	0a12      	lsrs	r2, r2, #8
 80087ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80087d2:	fb02 f303 	mul.w	r3, r2, r3
 80087d6:	617b      	str	r3, [r7, #20]
    break;
 80087d8:	e00c      	b.n	80087f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80087da:	4a12      	ldr	r2, [pc, #72]	; (8008824 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	fbb2 f3f3 	udiv	r3, r2, r3
 80087e2:	4a0e      	ldr	r2, [pc, #56]	; (800881c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80087e4:	68d2      	ldr	r2, [r2, #12]
 80087e6:	0a12      	lsrs	r2, r2, #8
 80087e8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80087ec:	fb02 f303 	mul.w	r3, r2, r3
 80087f0:	617b      	str	r3, [r7, #20]
    break;
 80087f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80087f4:	4b09      	ldr	r3, [pc, #36]	; (800881c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	0e5b      	lsrs	r3, r3, #25
 80087fa:	f003 0303 	and.w	r3, r3, #3
 80087fe:	3301      	adds	r3, #1
 8008800:	005b      	lsls	r3, r3, #1
 8008802:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008804:	697a      	ldr	r2, [r7, #20]
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	fbb2 f3f3 	udiv	r3, r2, r3
 800880c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800880e:	687b      	ldr	r3, [r7, #4]
}
 8008810:	4618      	mov	r0, r3
 8008812:	371c      	adds	r7, #28
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr
 800881c:	40021000 	.word	0x40021000
 8008820:	007a1200 	.word	0x007a1200
 8008824:	00f42400 	.word	0x00f42400

08008828 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b086      	sub	sp, #24
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008830:	2300      	movs	r3, #0
 8008832:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008834:	2300      	movs	r3, #0
 8008836:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008840:	2b00      	cmp	r3, #0
 8008842:	f000 8098 	beq.w	8008976 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008846:	2300      	movs	r3, #0
 8008848:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800884a:	4b43      	ldr	r3, [pc, #268]	; (8008958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800884c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800884e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10d      	bne.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008856:	4b40      	ldr	r3, [pc, #256]	; (8008958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800885a:	4a3f      	ldr	r2, [pc, #252]	; (8008958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800885c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008860:	6593      	str	r3, [r2, #88]	; 0x58
 8008862:	4b3d      	ldr	r3, [pc, #244]	; (8008958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008866:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800886a:	60bb      	str	r3, [r7, #8]
 800886c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800886e:	2301      	movs	r3, #1
 8008870:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008872:	4b3a      	ldr	r3, [pc, #232]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a39      	ldr	r2, [pc, #228]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800887c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800887e:	f7fa f8b7 	bl	80029f0 <HAL_GetTick>
 8008882:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008884:	e009      	b.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008886:	f7fa f8b3 	bl	80029f0 <HAL_GetTick>
 800888a:	4602      	mov	r2, r0
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	2b02      	cmp	r3, #2
 8008892:	d902      	bls.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008894:	2303      	movs	r3, #3
 8008896:	74fb      	strb	r3, [r7, #19]
        break;
 8008898:	e005      	b.n	80088a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800889a:	4b30      	ldr	r3, [pc, #192]	; (800895c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d0ef      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80088a6:	7cfb      	ldrb	r3, [r7, #19]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d159      	bne.n	8008960 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80088ac:	4b2a      	ldr	r3, [pc, #168]	; (8008958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80088b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d01e      	beq.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	429a      	cmp	r2, r3
 80088c6:	d019      	beq.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80088c8:	4b23      	ldr	r3, [pc, #140]	; (8008958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80088d4:	4b20      	ldr	r3, [pc, #128]	; (8008958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088da:	4a1f      	ldr	r2, [pc, #124]	; (8008958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80088e4:	4b1c      	ldr	r3, [pc, #112]	; (8008958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80088ea:	4a1b      	ldr	r2, [pc, #108]	; (8008958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80088f4:	4a18      	ldr	r2, [pc, #96]	; (8008958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80088fc:	697b      	ldr	r3, [r7, #20]
 80088fe:	f003 0301 	and.w	r3, r3, #1
 8008902:	2b00      	cmp	r3, #0
 8008904:	d016      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008906:	f7fa f873 	bl	80029f0 <HAL_GetTick>
 800890a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800890c:	e00b      	b.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800890e:	f7fa f86f 	bl	80029f0 <HAL_GetTick>
 8008912:	4602      	mov	r2, r0
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	1ad3      	subs	r3, r2, r3
 8008918:	f241 3288 	movw	r2, #5000	; 0x1388
 800891c:	4293      	cmp	r3, r2
 800891e:	d902      	bls.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008920:	2303      	movs	r3, #3
 8008922:	74fb      	strb	r3, [r7, #19]
            break;
 8008924:	e006      	b.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008926:	4b0c      	ldr	r3, [pc, #48]	; (8008958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800892c:	f003 0302 	and.w	r3, r3, #2
 8008930:	2b00      	cmp	r3, #0
 8008932:	d0ec      	beq.n	800890e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008934:	7cfb      	ldrb	r3, [r7, #19]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d10b      	bne.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800893a:	4b07      	ldr	r3, [pc, #28]	; (8008958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800893c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008940:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008948:	4903      	ldr	r1, [pc, #12]	; (8008958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800894a:	4313      	orrs	r3, r2
 800894c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008950:	e008      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008952:	7cfb      	ldrb	r3, [r7, #19]
 8008954:	74bb      	strb	r3, [r7, #18]
 8008956:	e005      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008958:	40021000 	.word	0x40021000
 800895c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008960:	7cfb      	ldrb	r3, [r7, #19]
 8008962:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008964:	7c7b      	ldrb	r3, [r7, #17]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d105      	bne.n	8008976 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800896a:	4ba7      	ldr	r3, [pc, #668]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800896c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800896e:	4aa6      	ldr	r2, [pc, #664]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008974:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f003 0301 	and.w	r3, r3, #1
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00a      	beq.n	8008998 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008982:	4ba1      	ldr	r3, [pc, #644]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008988:	f023 0203 	bic.w	r2, r3, #3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	499d      	ldr	r1, [pc, #628]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008992:	4313      	orrs	r3, r2
 8008994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 0302 	and.w	r3, r3, #2
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d00a      	beq.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80089a4:	4b98      	ldr	r3, [pc, #608]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089aa:	f023 020c 	bic.w	r2, r3, #12
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	4995      	ldr	r1, [pc, #596]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089b4:	4313      	orrs	r3, r2
 80089b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	f003 0304 	and.w	r3, r3, #4
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d00a      	beq.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80089c6:	4b90      	ldr	r3, [pc, #576]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	68db      	ldr	r3, [r3, #12]
 80089d4:	498c      	ldr	r1, [pc, #560]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089d6:	4313      	orrs	r3, r2
 80089d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 0308 	and.w	r3, r3, #8
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d00a      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80089e8:	4b87      	ldr	r3, [pc, #540]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089ee:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	4984      	ldr	r1, [pc, #528]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80089f8:	4313      	orrs	r3, r2
 80089fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f003 0310 	and.w	r3, r3, #16
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00a      	beq.n	8008a20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008a0a:	4b7f      	ldr	r3, [pc, #508]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	695b      	ldr	r3, [r3, #20]
 8008a18:	497b      	ldr	r1, [pc, #492]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f003 0320 	and.w	r3, r3, #32
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00a      	beq.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008a2c:	4b76      	ldr	r3, [pc, #472]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	699b      	ldr	r3, [r3, #24]
 8008a3a:	4973      	ldr	r1, [pc, #460]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d00a      	beq.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008a4e:	4b6e      	ldr	r3, [pc, #440]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a54:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	69db      	ldr	r3, [r3, #28]
 8008a5c:	496a      	ldr	r1, [pc, #424]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d00a      	beq.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008a70:	4b65      	ldr	r3, [pc, #404]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a76:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a1b      	ldr	r3, [r3, #32]
 8008a7e:	4962      	ldr	r1, [pc, #392]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a80:	4313      	orrs	r3, r2
 8008a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00a      	beq.n	8008aa8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008a92:	4b5d      	ldr	r3, [pc, #372]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa0:	4959      	ldr	r1, [pc, #356]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d00a      	beq.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008ab4:	4b54      	ldr	r3, [pc, #336]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008aba:	f023 0203 	bic.w	r2, r3, #3
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac2:	4951      	ldr	r1, [pc, #324]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00a      	beq.n	8008aec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ad6:	4b4c      	ldr	r3, [pc, #304]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008adc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae4:	4948      	ldr	r1, [pc, #288]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d015      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008af8:	4b43      	ldr	r3, [pc, #268]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008afe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b06:	4940      	ldr	r1, [pc, #256]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b16:	d105      	bne.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b18:	4b3b      	ldr	r3, [pc, #236]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	4a3a      	ldr	r2, [pc, #232]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d015      	beq.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008b30:	4b35      	ldr	r3, [pc, #212]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b3e:	4932      	ldr	r1, [pc, #200]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b40:	4313      	orrs	r3, r2
 8008b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b4e:	d105      	bne.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b50:	4b2d      	ldr	r3, [pc, #180]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b52:	68db      	ldr	r3, [r3, #12]
 8008b54:	4a2c      	ldr	r2, [pc, #176]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b5a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d015      	beq.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008b68:	4b27      	ldr	r3, [pc, #156]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b6e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b76:	4924      	ldr	r1, [pc, #144]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b78:	4313      	orrs	r3, r2
 8008b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b86:	d105      	bne.n	8008b94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008b88:	4b1f      	ldr	r3, [pc, #124]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b8a:	68db      	ldr	r3, [r3, #12]
 8008b8c:	4a1e      	ldr	r2, [pc, #120]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008b8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b92:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d015      	beq.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008ba0:	4b19      	ldr	r3, [pc, #100]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ba6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bae:	4916      	ldr	r1, [pc, #88]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bbe:	d105      	bne.n	8008bcc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bc0:	4b11      	ldr	r3, [pc, #68]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	4a10      	ldr	r2, [pc, #64]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008bca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d019      	beq.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008bd8:	4b0b      	ldr	r3, [pc, #44]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008bde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be6:	4908      	ldr	r1, [pc, #32]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008be8:	4313      	orrs	r3, r2
 8008bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bf6:	d109      	bne.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008bf8:	4b03      	ldr	r3, [pc, #12]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bfa:	68db      	ldr	r3, [r3, #12]
 8008bfc:	4a02      	ldr	r2, [pc, #8]	; (8008c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8008bfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008c02:	60d3      	str	r3, [r2, #12]
 8008c04:	e002      	b.n	8008c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008c06:	bf00      	nop
 8008c08:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d015      	beq.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008c18:	4b29      	ldr	r3, [pc, #164]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c1e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c26:	4926      	ldr	r1, [pc, #152]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c36:	d105      	bne.n	8008c44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008c38:	4b21      	ldr	r3, [pc, #132]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	4a20      	ldr	r2, [pc, #128]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c42:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d015      	beq.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8008c50:	4b1b      	ldr	r3, [pc, #108]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c56:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c5e:	4918      	ldr	r1, [pc, #96]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c60:	4313      	orrs	r3, r2
 8008c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c6e:	d105      	bne.n	8008c7c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008c70:	4b13      	ldr	r3, [pc, #76]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	4a12      	ldr	r2, [pc, #72]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c7a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d015      	beq.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008c88:	4b0d      	ldr	r3, [pc, #52]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008c8e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c96:	490a      	ldr	r1, [pc, #40]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ca2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008ca6:	d105      	bne.n	8008cb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008ca8:	4b05      	ldr	r3, [pc, #20]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	4a04      	ldr	r2, [pc, #16]	; (8008cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8008cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008cb2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8008cb4:	7cbb      	ldrb	r3, [r7, #18]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3718      	adds	r7, #24
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	40021000 	.word	0x40021000

08008cc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d101      	bne.n	8008cd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e049      	b.n	8008d6a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d106      	bne.n	8008cf0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f7f9 fc5e 	bl	80025ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2202      	movs	r2, #2
 8008cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681a      	ldr	r2, [r3, #0]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	3304      	adds	r3, #4
 8008d00:	4619      	mov	r1, r3
 8008d02:	4610      	mov	r0, r2
 8008d04:	f000 fb74 	bl	80093f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2201      	movs	r2, #1
 8008d44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2201      	movs	r2, #1
 8008d54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2201      	movs	r2, #1
 8008d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008d68:	2300      	movs	r3, #0
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3708      	adds	r7, #8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
	...

08008d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b085      	sub	sp, #20
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d001      	beq.n	8008d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d88:	2301      	movs	r3, #1
 8008d8a:	e054      	b.n	8008e36 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2202      	movs	r2, #2
 8008d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	68da      	ldr	r2, [r3, #12]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f042 0201 	orr.w	r2, r2, #1
 8008da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a26      	ldr	r2, [pc, #152]	; (8008e44 <HAL_TIM_Base_Start_IT+0xd0>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d022      	beq.n	8008df4 <HAL_TIM_Base_Start_IT+0x80>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008db6:	d01d      	beq.n	8008df4 <HAL_TIM_Base_Start_IT+0x80>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a22      	ldr	r2, [pc, #136]	; (8008e48 <HAL_TIM_Base_Start_IT+0xd4>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d018      	beq.n	8008df4 <HAL_TIM_Base_Start_IT+0x80>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a21      	ldr	r2, [pc, #132]	; (8008e4c <HAL_TIM_Base_Start_IT+0xd8>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d013      	beq.n	8008df4 <HAL_TIM_Base_Start_IT+0x80>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	4a1f      	ldr	r2, [pc, #124]	; (8008e50 <HAL_TIM_Base_Start_IT+0xdc>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d00e      	beq.n	8008df4 <HAL_TIM_Base_Start_IT+0x80>
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	4a1e      	ldr	r2, [pc, #120]	; (8008e54 <HAL_TIM_Base_Start_IT+0xe0>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d009      	beq.n	8008df4 <HAL_TIM_Base_Start_IT+0x80>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	4a1c      	ldr	r2, [pc, #112]	; (8008e58 <HAL_TIM_Base_Start_IT+0xe4>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d004      	beq.n	8008df4 <HAL_TIM_Base_Start_IT+0x80>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	4a1b      	ldr	r2, [pc, #108]	; (8008e5c <HAL_TIM_Base_Start_IT+0xe8>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d115      	bne.n	8008e20 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	689a      	ldr	r2, [r3, #8]
 8008dfa:	4b19      	ldr	r3, [pc, #100]	; (8008e60 <HAL_TIM_Base_Start_IT+0xec>)
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2b06      	cmp	r3, #6
 8008e04:	d015      	beq.n	8008e32 <HAL_TIM_Base_Start_IT+0xbe>
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e0c:	d011      	beq.n	8008e32 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	681a      	ldr	r2, [r3, #0]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f042 0201 	orr.w	r2, r2, #1
 8008e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e1e:	e008      	b.n	8008e32 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	681a      	ldr	r2, [r3, #0]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	f042 0201 	orr.w	r2, r2, #1
 8008e2e:	601a      	str	r2, [r3, #0]
 8008e30:	e000      	b.n	8008e34 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e32:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008e34:	2300      	movs	r3, #0
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3714      	adds	r7, #20
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e40:	4770      	bx	lr
 8008e42:	bf00      	nop
 8008e44:	40012c00 	.word	0x40012c00
 8008e48:	40000400 	.word	0x40000400
 8008e4c:	40000800 	.word	0x40000800
 8008e50:	40000c00 	.word	0x40000c00
 8008e54:	40013400 	.word	0x40013400
 8008e58:	40014000 	.word	0x40014000
 8008e5c:	40015000 	.word	0x40015000
 8008e60:	00010007 	.word	0x00010007

08008e64 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	68da      	ldr	r2, [r3, #12]
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f022 0201 	bic.w	r2, r2, #1
 8008e7a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	6a1a      	ldr	r2, [r3, #32]
 8008e82:	f241 1311 	movw	r3, #4369	; 0x1111
 8008e86:	4013      	ands	r3, r2
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d10f      	bne.n	8008eac <HAL_TIM_Base_Stop_IT+0x48>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6a1a      	ldr	r2, [r3, #32]
 8008e92:	f244 4344 	movw	r3, #17476	; 0x4444
 8008e96:	4013      	ands	r3, r2
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d107      	bne.n	8008eac <HAL_TIM_Base_Stop_IT+0x48>
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	681a      	ldr	r2, [r3, #0]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f022 0201 	bic.w	r2, r2, #1
 8008eaa:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008eb4:	2300      	movs	r3, #0
}
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	370c      	adds	r7, #12
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec0:	4770      	bx	lr

08008ec2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b084      	sub	sp, #16
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68db      	ldr	r3, [r3, #12]
 8008ed0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	691b      	ldr	r3, [r3, #16]
 8008ed8:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	f003 0302 	and.w	r3, r3, #2
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d020      	beq.n	8008f26 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f003 0302 	and.w	r3, r3, #2
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d01b      	beq.n	8008f26 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f06f 0202 	mvn.w	r2, #2
 8008ef6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	2201      	movs	r2, #1
 8008efc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	699b      	ldr	r3, [r3, #24]
 8008f04:	f003 0303 	and.w	r3, r3, #3
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f000 fa51 	bl	80093b4 <HAL_TIM_IC_CaptureCallback>
 8008f12:	e005      	b.n	8008f20 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 fa43 	bl	80093a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 fa54 	bl	80093c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2200      	movs	r2, #0
 8008f24:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	f003 0304 	and.w	r3, r3, #4
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d020      	beq.n	8008f72 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f003 0304 	and.w	r3, r3, #4
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d01b      	beq.n	8008f72 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f06f 0204 	mvn.w	r2, #4
 8008f42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2202      	movs	r2, #2
 8008f48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d003      	beq.n	8008f60 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 fa2b 	bl	80093b4 <HAL_TIM_IC_CaptureCallback>
 8008f5e:	e005      	b.n	8008f6c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 fa1d 	bl	80093a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 fa2e 	bl	80093c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	f003 0308 	and.w	r3, r3, #8
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d020      	beq.n	8008fbe <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f003 0308 	and.w	r3, r3, #8
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d01b      	beq.n	8008fbe <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f06f 0208 	mvn.w	r2, #8
 8008f8e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2204      	movs	r2, #4
 8008f94:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	69db      	ldr	r3, [r3, #28]
 8008f9c:	f003 0303 	and.w	r3, r3, #3
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d003      	beq.n	8008fac <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 fa05 	bl	80093b4 <HAL_TIM_IC_CaptureCallback>
 8008faa:	e005      	b.n	8008fb8 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fac:	6878      	ldr	r0, [r7, #4]
 8008fae:	f000 f9f7 	bl	80093a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fa08 	bl	80093c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	f003 0310 	and.w	r3, r3, #16
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d020      	beq.n	800900a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f003 0310 	and.w	r3, r3, #16
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d01b      	beq.n	800900a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	f06f 0210 	mvn.w	r2, #16
 8008fda:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2208      	movs	r2, #8
 8008fe0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	69db      	ldr	r3, [r3, #28]
 8008fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d003      	beq.n	8008ff8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 f9df 	bl	80093b4 <HAL_TIM_IC_CaptureCallback>
 8008ff6:	e005      	b.n	8009004 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f000 f9d1 	bl	80093a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 f9e2 	bl	80093c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	f003 0301 	and.w	r3, r3, #1
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00c      	beq.n	800902e <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b00      	cmp	r3, #0
 800901c:	d007      	beq.n	800902e <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f06f 0201 	mvn.w	r2, #1
 8009026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009028:	6878      	ldr	r0, [r7, #4]
 800902a:	f000 f9af 	bl	800938c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009034:	2b00      	cmp	r3, #0
 8009036:	d104      	bne.n	8009042 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00c      	beq.n	800905c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009048:	2b00      	cmp	r3, #0
 800904a:	d007      	beq.n	800905c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8009054:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fbba 	bl	80097d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800905c:	68bb      	ldr	r3, [r7, #8]
 800905e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00c      	beq.n	8009080 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800906c:	2b00      	cmp	r3, #0
 800906e:	d007      	beq.n	8009080 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fbb2 	bl	80097e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00c      	beq.n	80090a4 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009090:	2b00      	cmp	r3, #0
 8009092:	d007      	beq.n	80090a4 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800909c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 f99c 	bl	80093dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	f003 0320 	and.w	r3, r3, #32
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00c      	beq.n	80090c8 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	f003 0320 	and.w	r3, r3, #32
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d007      	beq.n	80090c8 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f06f 0220 	mvn.w	r2, #32
 80090c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fb7a 	bl	80097bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d00c      	beq.n	80090ec <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d007      	beq.n	80090ec <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80090e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 fb86 	bl	80097f8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d00c      	beq.n	8009110 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d007      	beq.n	8009110 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009108:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 fb7e 	bl	800980c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009116:	2b00      	cmp	r3, #0
 8009118:	d00c      	beq.n	8009134 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d007      	beq.n	8009134 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800912c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f000 fb76 	bl	8009820 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8009134:	68bb      	ldr	r3, [r7, #8]
 8009136:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800913a:	2b00      	cmp	r3, #0
 800913c:	d00c      	beq.n	8009158 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009144:	2b00      	cmp	r3, #0
 8009146:	d007      	beq.n	8009158 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fb6e 	bl	8009834 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009158:	bf00      	nop
 800915a:	3710      	adds	r7, #16
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}

08009160 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009160:	b580      	push	{r7, lr}
 8009162:	b084      	sub	sp, #16
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
 8009168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800916a:	2300      	movs	r3, #0
 800916c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009174:	2b01      	cmp	r3, #1
 8009176:	d101      	bne.n	800917c <HAL_TIM_ConfigClockSource+0x1c>
 8009178:	2302      	movs	r3, #2
 800917a:	e0f6      	b.n	800936a <HAL_TIM_ConfigClockSource+0x20a>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2201      	movs	r2, #1
 8009180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2202      	movs	r2, #2
 8009188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800919a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800919e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80091a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68ba      	ldr	r2, [r7, #8]
 80091ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a6f      	ldr	r2, [pc, #444]	; (8009374 <HAL_TIM_ConfigClockSource+0x214>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	f000 80c1 	beq.w	800933e <HAL_TIM_ConfigClockSource+0x1de>
 80091bc:	4a6d      	ldr	r2, [pc, #436]	; (8009374 <HAL_TIM_ConfigClockSource+0x214>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	f200 80c6 	bhi.w	8009350 <HAL_TIM_ConfigClockSource+0x1f0>
 80091c4:	4a6c      	ldr	r2, [pc, #432]	; (8009378 <HAL_TIM_ConfigClockSource+0x218>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	f000 80b9 	beq.w	800933e <HAL_TIM_ConfigClockSource+0x1de>
 80091cc:	4a6a      	ldr	r2, [pc, #424]	; (8009378 <HAL_TIM_ConfigClockSource+0x218>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	f200 80be 	bhi.w	8009350 <HAL_TIM_ConfigClockSource+0x1f0>
 80091d4:	4a69      	ldr	r2, [pc, #420]	; (800937c <HAL_TIM_ConfigClockSource+0x21c>)
 80091d6:	4293      	cmp	r3, r2
 80091d8:	f000 80b1 	beq.w	800933e <HAL_TIM_ConfigClockSource+0x1de>
 80091dc:	4a67      	ldr	r2, [pc, #412]	; (800937c <HAL_TIM_ConfigClockSource+0x21c>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	f200 80b6 	bhi.w	8009350 <HAL_TIM_ConfigClockSource+0x1f0>
 80091e4:	4a66      	ldr	r2, [pc, #408]	; (8009380 <HAL_TIM_ConfigClockSource+0x220>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	f000 80a9 	beq.w	800933e <HAL_TIM_ConfigClockSource+0x1de>
 80091ec:	4a64      	ldr	r2, [pc, #400]	; (8009380 <HAL_TIM_ConfigClockSource+0x220>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	f200 80ae 	bhi.w	8009350 <HAL_TIM_ConfigClockSource+0x1f0>
 80091f4:	4a63      	ldr	r2, [pc, #396]	; (8009384 <HAL_TIM_ConfigClockSource+0x224>)
 80091f6:	4293      	cmp	r3, r2
 80091f8:	f000 80a1 	beq.w	800933e <HAL_TIM_ConfigClockSource+0x1de>
 80091fc:	4a61      	ldr	r2, [pc, #388]	; (8009384 <HAL_TIM_ConfigClockSource+0x224>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	f200 80a6 	bhi.w	8009350 <HAL_TIM_ConfigClockSource+0x1f0>
 8009204:	4a60      	ldr	r2, [pc, #384]	; (8009388 <HAL_TIM_ConfigClockSource+0x228>)
 8009206:	4293      	cmp	r3, r2
 8009208:	f000 8099 	beq.w	800933e <HAL_TIM_ConfigClockSource+0x1de>
 800920c:	4a5e      	ldr	r2, [pc, #376]	; (8009388 <HAL_TIM_ConfigClockSource+0x228>)
 800920e:	4293      	cmp	r3, r2
 8009210:	f200 809e 	bhi.w	8009350 <HAL_TIM_ConfigClockSource+0x1f0>
 8009214:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009218:	f000 8091 	beq.w	800933e <HAL_TIM_ConfigClockSource+0x1de>
 800921c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009220:	f200 8096 	bhi.w	8009350 <HAL_TIM_ConfigClockSource+0x1f0>
 8009224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009228:	f000 8089 	beq.w	800933e <HAL_TIM_ConfigClockSource+0x1de>
 800922c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009230:	f200 808e 	bhi.w	8009350 <HAL_TIM_ConfigClockSource+0x1f0>
 8009234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009238:	d03e      	beq.n	80092b8 <HAL_TIM_ConfigClockSource+0x158>
 800923a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800923e:	f200 8087 	bhi.w	8009350 <HAL_TIM_ConfigClockSource+0x1f0>
 8009242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009246:	f000 8086 	beq.w	8009356 <HAL_TIM_ConfigClockSource+0x1f6>
 800924a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800924e:	d87f      	bhi.n	8009350 <HAL_TIM_ConfigClockSource+0x1f0>
 8009250:	2b70      	cmp	r3, #112	; 0x70
 8009252:	d01a      	beq.n	800928a <HAL_TIM_ConfigClockSource+0x12a>
 8009254:	2b70      	cmp	r3, #112	; 0x70
 8009256:	d87b      	bhi.n	8009350 <HAL_TIM_ConfigClockSource+0x1f0>
 8009258:	2b60      	cmp	r3, #96	; 0x60
 800925a:	d050      	beq.n	80092fe <HAL_TIM_ConfigClockSource+0x19e>
 800925c:	2b60      	cmp	r3, #96	; 0x60
 800925e:	d877      	bhi.n	8009350 <HAL_TIM_ConfigClockSource+0x1f0>
 8009260:	2b50      	cmp	r3, #80	; 0x50
 8009262:	d03c      	beq.n	80092de <HAL_TIM_ConfigClockSource+0x17e>
 8009264:	2b50      	cmp	r3, #80	; 0x50
 8009266:	d873      	bhi.n	8009350 <HAL_TIM_ConfigClockSource+0x1f0>
 8009268:	2b40      	cmp	r3, #64	; 0x40
 800926a:	d058      	beq.n	800931e <HAL_TIM_ConfigClockSource+0x1be>
 800926c:	2b40      	cmp	r3, #64	; 0x40
 800926e:	d86f      	bhi.n	8009350 <HAL_TIM_ConfigClockSource+0x1f0>
 8009270:	2b30      	cmp	r3, #48	; 0x30
 8009272:	d064      	beq.n	800933e <HAL_TIM_ConfigClockSource+0x1de>
 8009274:	2b30      	cmp	r3, #48	; 0x30
 8009276:	d86b      	bhi.n	8009350 <HAL_TIM_ConfigClockSource+0x1f0>
 8009278:	2b20      	cmp	r3, #32
 800927a:	d060      	beq.n	800933e <HAL_TIM_ConfigClockSource+0x1de>
 800927c:	2b20      	cmp	r3, #32
 800927e:	d867      	bhi.n	8009350 <HAL_TIM_ConfigClockSource+0x1f0>
 8009280:	2b00      	cmp	r3, #0
 8009282:	d05c      	beq.n	800933e <HAL_TIM_ConfigClockSource+0x1de>
 8009284:	2b10      	cmp	r3, #16
 8009286:	d05a      	beq.n	800933e <HAL_TIM_ConfigClockSource+0x1de>
 8009288:	e062      	b.n	8009350 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800929a:	f000 f9d9 	bl	8009650 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	689b      	ldr	r3, [r3, #8]
 80092a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80092ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	68ba      	ldr	r2, [r7, #8]
 80092b4:	609a      	str	r2, [r3, #8]
      break;
 80092b6:	e04f      	b.n	8009358 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80092c0:	683b      	ldr	r3, [r7, #0]
 80092c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80092c8:	f000 f9c2 	bl	8009650 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	689a      	ldr	r2, [r3, #8]
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80092da:	609a      	str	r2, [r3, #8]
      break;
 80092dc:	e03c      	b.n	8009358 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80092ea:	461a      	mov	r2, r3
 80092ec:	f000 f934 	bl	8009558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2150      	movs	r1, #80	; 0x50
 80092f6:	4618      	mov	r0, r3
 80092f8:	f000 f98d 	bl	8009616 <TIM_ITRx_SetConfig>
      break;
 80092fc:	e02c      	b.n	8009358 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009302:	683b      	ldr	r3, [r7, #0]
 8009304:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800930a:	461a      	mov	r2, r3
 800930c:	f000 f953 	bl	80095b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2160      	movs	r1, #96	; 0x60
 8009316:	4618      	mov	r0, r3
 8009318:	f000 f97d 	bl	8009616 <TIM_ITRx_SetConfig>
      break;
 800931c:	e01c      	b.n	8009358 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800932a:	461a      	mov	r2, r3
 800932c:	f000 f914 	bl	8009558 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2140      	movs	r1, #64	; 0x40
 8009336:	4618      	mov	r0, r3
 8009338:	f000 f96d 	bl	8009616 <TIM_ITRx_SetConfig>
      break;
 800933c:	e00c      	b.n	8009358 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4619      	mov	r1, r3
 8009348:	4610      	mov	r0, r2
 800934a:	f000 f964 	bl	8009616 <TIM_ITRx_SetConfig>
      break;
 800934e:	e003      	b.n	8009358 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8009350:	2301      	movs	r3, #1
 8009352:	73fb      	strb	r3, [r7, #15]
      break;
 8009354:	e000      	b.n	8009358 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8009356:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2201      	movs	r2, #1
 800935c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2200      	movs	r2, #0
 8009364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009368:	7bfb      	ldrb	r3, [r7, #15]
}
 800936a:	4618      	mov	r0, r3
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	00100070 	.word	0x00100070
 8009378:	00100060 	.word	0x00100060
 800937c:	00100050 	.word	0x00100050
 8009380:	00100040 	.word	0x00100040
 8009384:	00100030 	.word	0x00100030
 8009388:	00100020 	.word	0x00100020

0800938c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009394:	bf00      	nop
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b083      	sub	sp, #12
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80093a8:	bf00      	nop
 80093aa:	370c      	adds	r7, #12
 80093ac:	46bd      	mov	sp, r7
 80093ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b2:	4770      	bx	lr

080093b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80093b4:	b480      	push	{r7}
 80093b6:	b083      	sub	sp, #12
 80093b8:	af00      	add	r7, sp, #0
 80093ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80093bc:	bf00      	nop
 80093be:	370c      	adds	r7, #12
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b083      	sub	sp, #12
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80093d0:	bf00      	nop
 80093d2:	370c      	adds	r7, #12
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80093dc:	b480      	push	{r7}
 80093de:	b083      	sub	sp, #12
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr

080093f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80093f0:	b480      	push	{r7}
 80093f2:	b085      	sub	sp, #20
 80093f4:	af00      	add	r7, sp, #0
 80093f6:	6078      	str	r0, [r7, #4]
 80093f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a4c      	ldr	r2, [pc, #304]	; (8009534 <TIM_Base_SetConfig+0x144>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d017      	beq.n	8009438 <TIM_Base_SetConfig+0x48>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800940e:	d013      	beq.n	8009438 <TIM_Base_SetConfig+0x48>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a49      	ldr	r2, [pc, #292]	; (8009538 <TIM_Base_SetConfig+0x148>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d00f      	beq.n	8009438 <TIM_Base_SetConfig+0x48>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a48      	ldr	r2, [pc, #288]	; (800953c <TIM_Base_SetConfig+0x14c>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d00b      	beq.n	8009438 <TIM_Base_SetConfig+0x48>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a47      	ldr	r2, [pc, #284]	; (8009540 <TIM_Base_SetConfig+0x150>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d007      	beq.n	8009438 <TIM_Base_SetConfig+0x48>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a46      	ldr	r2, [pc, #280]	; (8009544 <TIM_Base_SetConfig+0x154>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d003      	beq.n	8009438 <TIM_Base_SetConfig+0x48>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a45      	ldr	r2, [pc, #276]	; (8009548 <TIM_Base_SetConfig+0x158>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d108      	bne.n	800944a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800943e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	4313      	orrs	r3, r2
 8009448:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	4a39      	ldr	r2, [pc, #228]	; (8009534 <TIM_Base_SetConfig+0x144>)
 800944e:	4293      	cmp	r3, r2
 8009450:	d023      	beq.n	800949a <TIM_Base_SetConfig+0xaa>
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009458:	d01f      	beq.n	800949a <TIM_Base_SetConfig+0xaa>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	4a36      	ldr	r2, [pc, #216]	; (8009538 <TIM_Base_SetConfig+0x148>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d01b      	beq.n	800949a <TIM_Base_SetConfig+0xaa>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	4a35      	ldr	r2, [pc, #212]	; (800953c <TIM_Base_SetConfig+0x14c>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d017      	beq.n	800949a <TIM_Base_SetConfig+0xaa>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	4a34      	ldr	r2, [pc, #208]	; (8009540 <TIM_Base_SetConfig+0x150>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d013      	beq.n	800949a <TIM_Base_SetConfig+0xaa>
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	4a33      	ldr	r2, [pc, #204]	; (8009544 <TIM_Base_SetConfig+0x154>)
 8009476:	4293      	cmp	r3, r2
 8009478:	d00f      	beq.n	800949a <TIM_Base_SetConfig+0xaa>
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	4a33      	ldr	r2, [pc, #204]	; (800954c <TIM_Base_SetConfig+0x15c>)
 800947e:	4293      	cmp	r3, r2
 8009480:	d00b      	beq.n	800949a <TIM_Base_SetConfig+0xaa>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	4a32      	ldr	r2, [pc, #200]	; (8009550 <TIM_Base_SetConfig+0x160>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d007      	beq.n	800949a <TIM_Base_SetConfig+0xaa>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	4a31      	ldr	r2, [pc, #196]	; (8009554 <TIM_Base_SetConfig+0x164>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d003      	beq.n	800949a <TIM_Base_SetConfig+0xaa>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	4a2c      	ldr	r2, [pc, #176]	; (8009548 <TIM_Base_SetConfig+0x158>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d108      	bne.n	80094ac <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	68fa      	ldr	r2, [r7, #12]
 80094a8:	4313      	orrs	r3, r2
 80094aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	695b      	ldr	r3, [r3, #20]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	689a      	ldr	r2, [r3, #8]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a18      	ldr	r2, [pc, #96]	; (8009534 <TIM_Base_SetConfig+0x144>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d013      	beq.n	8009500 <TIM_Base_SetConfig+0x110>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a1a      	ldr	r2, [pc, #104]	; (8009544 <TIM_Base_SetConfig+0x154>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d00f      	beq.n	8009500 <TIM_Base_SetConfig+0x110>
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	4a1a      	ldr	r2, [pc, #104]	; (800954c <TIM_Base_SetConfig+0x15c>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d00b      	beq.n	8009500 <TIM_Base_SetConfig+0x110>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	4a19      	ldr	r2, [pc, #100]	; (8009550 <TIM_Base_SetConfig+0x160>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d007      	beq.n	8009500 <TIM_Base_SetConfig+0x110>
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	4a18      	ldr	r2, [pc, #96]	; (8009554 <TIM_Base_SetConfig+0x164>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d003      	beq.n	8009500 <TIM_Base_SetConfig+0x110>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	4a13      	ldr	r2, [pc, #76]	; (8009548 <TIM_Base_SetConfig+0x158>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d103      	bne.n	8009508 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	691a      	ldr	r2, [r3, #16]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	691b      	ldr	r3, [r3, #16]
 8009512:	f003 0301 	and.w	r3, r3, #1
 8009516:	2b01      	cmp	r3, #1
 8009518:	d105      	bne.n	8009526 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	f023 0201 	bic.w	r2, r3, #1
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	611a      	str	r2, [r3, #16]
  }
}
 8009526:	bf00      	nop
 8009528:	3714      	adds	r7, #20
 800952a:	46bd      	mov	sp, r7
 800952c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009530:	4770      	bx	lr
 8009532:	bf00      	nop
 8009534:	40012c00 	.word	0x40012c00
 8009538:	40000400 	.word	0x40000400
 800953c:	40000800 	.word	0x40000800
 8009540:	40000c00 	.word	0x40000c00
 8009544:	40013400 	.word	0x40013400
 8009548:	40015000 	.word	0x40015000
 800954c:	40014000 	.word	0x40014000
 8009550:	40014400 	.word	0x40014400
 8009554:	40014800 	.word	0x40014800

08009558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009558:	b480      	push	{r7}
 800955a:	b087      	sub	sp, #28
 800955c:	af00      	add	r7, sp, #0
 800955e:	60f8      	str	r0, [r7, #12]
 8009560:	60b9      	str	r1, [r7, #8]
 8009562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6a1b      	ldr	r3, [r3, #32]
 8009568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6a1b      	ldr	r3, [r3, #32]
 800956e:	f023 0201 	bic.w	r2, r3, #1
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	699b      	ldr	r3, [r3, #24]
 800957a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	011b      	lsls	r3, r3, #4
 8009588:	693a      	ldr	r2, [r7, #16]
 800958a:	4313      	orrs	r3, r2
 800958c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	f023 030a 	bic.w	r3, r3, #10
 8009594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009596:	697a      	ldr	r2, [r7, #20]
 8009598:	68bb      	ldr	r3, [r7, #8]
 800959a:	4313      	orrs	r3, r2
 800959c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	693a      	ldr	r2, [r7, #16]
 80095a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	697a      	ldr	r2, [r7, #20]
 80095a8:	621a      	str	r2, [r3, #32]
}
 80095aa:	bf00      	nop
 80095ac:	371c      	adds	r7, #28
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr

080095b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80095b6:	b480      	push	{r7}
 80095b8:	b087      	sub	sp, #28
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	60f8      	str	r0, [r7, #12]
 80095be:	60b9      	str	r1, [r7, #8]
 80095c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	6a1b      	ldr	r3, [r3, #32]
 80095c6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6a1b      	ldr	r3, [r3, #32]
 80095cc:	f023 0210 	bic.w	r2, r3, #16
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	699b      	ldr	r3, [r3, #24]
 80095d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80095da:	693b      	ldr	r3, [r7, #16]
 80095dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80095e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	031b      	lsls	r3, r3, #12
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	4313      	orrs	r3, r2
 80095ea:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80095f2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80095f4:	68bb      	ldr	r3, [r7, #8]
 80095f6:	011b      	lsls	r3, r3, #4
 80095f8:	697a      	ldr	r2, [r7, #20]
 80095fa:	4313      	orrs	r3, r2
 80095fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	693a      	ldr	r2, [r7, #16]
 8009602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	697a      	ldr	r2, [r7, #20]
 8009608:	621a      	str	r2, [r3, #32]
}
 800960a:	bf00      	nop
 800960c:	371c      	adds	r7, #28
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr

08009616 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009616:	b480      	push	{r7}
 8009618:	b085      	sub	sp, #20
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
 800961e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800962c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009630:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009632:	683a      	ldr	r2, [r7, #0]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	4313      	orrs	r3, r2
 8009638:	f043 0307 	orr.w	r3, r3, #7
 800963c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	68fa      	ldr	r2, [r7, #12]
 8009642:	609a      	str	r2, [r3, #8]
}
 8009644:	bf00      	nop
 8009646:	3714      	adds	r7, #20
 8009648:	46bd      	mov	sp, r7
 800964a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964e:	4770      	bx	lr

08009650 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009650:	b480      	push	{r7}
 8009652:	b087      	sub	sp, #28
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
 800965c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800966a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	021a      	lsls	r2, r3, #8
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	431a      	orrs	r2, r3
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	4313      	orrs	r3, r2
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	4313      	orrs	r3, r2
 800967c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	697a      	ldr	r2, [r7, #20]
 8009682:	609a      	str	r2, [r3, #8]
}
 8009684:	bf00      	nop
 8009686:	371c      	adds	r7, #28
 8009688:	46bd      	mov	sp, r7
 800968a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968e:	4770      	bx	lr

08009690 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009690:	b480      	push	{r7}
 8009692:	b085      	sub	sp, #20
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
 8009698:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096a0:	2b01      	cmp	r3, #1
 80096a2:	d101      	bne.n	80096a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80096a4:	2302      	movs	r3, #2
 80096a6:	e074      	b.n	8009792 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2202      	movs	r2, #2
 80096b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	689b      	ldr	r3, [r3, #8]
 80096c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a34      	ldr	r2, [pc, #208]	; (80097a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d009      	beq.n	80096e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a33      	ldr	r2, [pc, #204]	; (80097a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d004      	beq.n	80096e6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a31      	ldr	r2, [pc, #196]	; (80097a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d108      	bne.n	80096f8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80096ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	68fa      	ldr	r2, [r7, #12]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80096fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009702:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	68fa      	ldr	r2, [r7, #12]
 800970a:	4313      	orrs	r3, r2
 800970c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	68fa      	ldr	r2, [r7, #12]
 8009714:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4a21      	ldr	r2, [pc, #132]	; (80097a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d022      	beq.n	8009766 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009728:	d01d      	beq.n	8009766 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a1f      	ldr	r2, [pc, #124]	; (80097ac <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8009730:	4293      	cmp	r3, r2
 8009732:	d018      	beq.n	8009766 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4a1d      	ldr	r2, [pc, #116]	; (80097b0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d013      	beq.n	8009766 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	4a1c      	ldr	r2, [pc, #112]	; (80097b4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8009744:	4293      	cmp	r3, r2
 8009746:	d00e      	beq.n	8009766 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a15      	ldr	r2, [pc, #84]	; (80097a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d009      	beq.n	8009766 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4a18      	ldr	r2, [pc, #96]	; (80097b8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8009758:	4293      	cmp	r3, r2
 800975a:	d004      	beq.n	8009766 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a11      	ldr	r2, [pc, #68]	; (80097a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009762:	4293      	cmp	r3, r2
 8009764:	d10c      	bne.n	8009780 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800976c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800976e:	683b      	ldr	r3, [r7, #0]
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	68ba      	ldr	r2, [r7, #8]
 8009774:	4313      	orrs	r3, r2
 8009776:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	68ba      	ldr	r2, [r7, #8]
 800977e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2201      	movs	r2, #1
 8009784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3714      	adds	r7, #20
 8009796:	46bd      	mov	sp, r7
 8009798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979c:	4770      	bx	lr
 800979e:	bf00      	nop
 80097a0:	40012c00 	.word	0x40012c00
 80097a4:	40013400 	.word	0x40013400
 80097a8:	40015000 	.word	0x40015000
 80097ac:	40000400 	.word	0x40000400
 80097b0:	40000800 	.word	0x40000800
 80097b4:	40000c00 	.word	0x40000c00
 80097b8:	40014000 	.word	0x40014000

080097bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80097d8:	bf00      	nop
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80097e4:	b480      	push	{r7}
 80097e6:	b083      	sub	sp, #12
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80097ec:	bf00      	nop
 80097ee:	370c      	adds	r7, #12
 80097f0:	46bd      	mov	sp, r7
 80097f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f6:	4770      	bx	lr

080097f8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800983c:	bf00      	nop
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009858:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800985c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	b29a      	uxth	r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009868:	2300      	movs	r3, #0
}
 800986a:	4618      	mov	r0, r3
 800986c:	3714      	adds	r7, #20
 800986e:	46bd      	mov	sp, r7
 8009870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009874:	4770      	bx	lr

08009876 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8009876:	b480      	push	{r7}
 8009878:	b085      	sub	sp, #20
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800987e:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8009882:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800988a:	b29a      	uxth	r2, r3
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	b29b      	uxth	r3, r3
 8009890:	43db      	mvns	r3, r3
 8009892:	b29b      	uxth	r3, r3
 8009894:	4013      	ands	r3, r2
 8009896:	b29a      	uxth	r2, r3
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3714      	adds	r7, #20
 80098a4:	46bd      	mov	sp, r7
 80098a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098aa:	4770      	bx	lr

080098ac <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	60f8      	str	r0, [r7, #12]
 80098b4:	1d3b      	adds	r3, r7, #4
 80098b6:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	2201      	movs	r2, #1
 80098be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2200      	movs	r2, #0
 80098c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	2200      	movs	r2, #0
 80098ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	2200      	movs	r2, #0
 80098d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80098da:	2300      	movs	r3, #0
}
 80098dc:	4618      	mov	r0, r3
 80098de:	3714      	adds	r7, #20
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b09d      	sub	sp, #116	; 0x74
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80098f2:	2300      	movs	r3, #0
 80098f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	781b      	ldrb	r3, [r3, #0]
 80098fe:	009b      	lsls	r3, r3, #2
 8009900:	4413      	add	r3, r2
 8009902:	881b      	ldrh	r3, [r3, #0]
 8009904:	b29b      	uxth	r3, r3
 8009906:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800990a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800990e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	78db      	ldrb	r3, [r3, #3]
 8009916:	2b03      	cmp	r3, #3
 8009918:	d81f      	bhi.n	800995a <USB_ActivateEndpoint+0x72>
 800991a:	a201      	add	r2, pc, #4	; (adr r2, 8009920 <USB_ActivateEndpoint+0x38>)
 800991c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009920:	08009931 	.word	0x08009931
 8009924:	0800994d 	.word	0x0800994d
 8009928:	08009963 	.word	0x08009963
 800992c:	0800993f 	.word	0x0800993f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8009930:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009934:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009938:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800993c:	e012      	b.n	8009964 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800993e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009942:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009946:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 800994a:	e00b      	b.n	8009964 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800994c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009950:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009954:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8009958:	e004      	b.n	8009964 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8009960:	e000      	b.n	8009964 <USB_ActivateEndpoint+0x7c>
      break;
 8009962:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	441a      	add	r2, r3
 800996e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8009972:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009976:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800997a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800997e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009982:	b29b      	uxth	r3, r3
 8009984:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8009986:	687a      	ldr	r2, [r7, #4]
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	781b      	ldrb	r3, [r3, #0]
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4413      	add	r3, r2
 8009990:	881b      	ldrh	r3, [r3, #0]
 8009992:	b29b      	uxth	r3, r3
 8009994:	b21b      	sxth	r3, r3
 8009996:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800999a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800999e:	b21a      	sxth	r2, r3
 80099a0:	683b      	ldr	r3, [r7, #0]
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	b21b      	sxth	r3, r3
 80099a6:	4313      	orrs	r3, r2
 80099a8:	b21b      	sxth	r3, r3
 80099aa:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	441a      	add	r2, r3
 80099b8:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 80099bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	7b1b      	ldrb	r3, [r3, #12]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	f040 8178 	bne.w	8009cca <USB_ActivateEndpoint+0x3e2>
  {
    if (ep->is_in != 0U)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	785b      	ldrb	r3, [r3, #1]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	f000 8084 	beq.w	8009aec <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	61bb      	str	r3, [r7, #24]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	461a      	mov	r2, r3
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	4413      	add	r3, r2
 80099f6:	61bb      	str	r3, [r7, #24]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	781b      	ldrb	r3, [r3, #0]
 80099fc:	00da      	lsls	r2, r3, #3
 80099fe:	69bb      	ldr	r3, [r7, #24]
 8009a00:	4413      	add	r3, r2
 8009a02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a06:	617b      	str	r3, [r7, #20]
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	88db      	ldrh	r3, [r3, #6]
 8009a0c:	085b      	lsrs	r3, r3, #1
 8009a0e:	b29b      	uxth	r3, r3
 8009a10:	005b      	lsls	r3, r3, #1
 8009a12:	b29a      	uxth	r2, r3
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009a18:	687a      	ldr	r2, [r7, #4]
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	009b      	lsls	r3, r3, #2
 8009a20:	4413      	add	r3, r2
 8009a22:	881b      	ldrh	r3, [r3, #0]
 8009a24:	827b      	strh	r3, [r7, #18]
 8009a26:	8a7b      	ldrh	r3, [r7, #18]
 8009a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d01b      	beq.n	8009a68 <USB_ActivateEndpoint+0x180>
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	009b      	lsls	r3, r3, #2
 8009a38:	4413      	add	r3, r2
 8009a3a:	881b      	ldrh	r3, [r3, #0]
 8009a3c:	b29b      	uxth	r3, r3
 8009a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a46:	823b      	strh	r3, [r7, #16]
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	781b      	ldrb	r3, [r3, #0]
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	441a      	add	r2, r3
 8009a52:	8a3b      	ldrh	r3, [r7, #16]
 8009a54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	78db      	ldrb	r3, [r3, #3]
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d020      	beq.n	8009ab2 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009a70:	687a      	ldr	r2, [r7, #4]
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	781b      	ldrb	r3, [r3, #0]
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	881b      	ldrh	r3, [r3, #0]
 8009a7c:	b29b      	uxth	r3, r3
 8009a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a86:	81bb      	strh	r3, [r7, #12]
 8009a88:	89bb      	ldrh	r3, [r7, #12]
 8009a8a:	f083 0320 	eor.w	r3, r3, #32
 8009a8e:	81bb      	strh	r3, [r7, #12]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	009b      	lsls	r3, r3, #2
 8009a98:	441a      	add	r2, r3
 8009a9a:	89bb      	ldrh	r3, [r7, #12]
 8009a9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aa0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009aa4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009aa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	8013      	strh	r3, [r2, #0]
 8009ab0:	e2d5      	b.n	800a05e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009ab2:	687a      	ldr	r2, [r7, #4]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	009b      	lsls	r3, r3, #2
 8009aba:	4413      	add	r3, r2
 8009abc:	881b      	ldrh	r3, [r3, #0]
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ac8:	81fb      	strh	r3, [r7, #14]
 8009aca:	687a      	ldr	r2, [r7, #4]
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	441a      	add	r2, r3
 8009ad4:	89fb      	ldrh	r3, [r7, #14]
 8009ad6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ada:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ae6:	b29b      	uxth	r3, r3
 8009ae8:	8013      	strh	r3, [r2, #0]
 8009aea:	e2b8      	b.n	800a05e <USB_ActivateEndpoint+0x776>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	633b      	str	r3, [r7, #48]	; 0x30
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	461a      	mov	r2, r3
 8009afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009afc:	4413      	add	r3, r2
 8009afe:	633b      	str	r3, [r7, #48]	; 0x30
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	00da      	lsls	r2, r3, #3
 8009b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b08:	4413      	add	r3, r2
 8009b0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	88db      	ldrh	r3, [r3, #6]
 8009b14:	085b      	lsrs	r3, r3, #1
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	005b      	lsls	r3, r3, #1
 8009b1a:	b29a      	uxth	r2, r3
 8009b1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b1e:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009b2a:	b29b      	uxth	r3, r3
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b30:	4413      	add	r3, r2
 8009b32:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	00da      	lsls	r2, r3, #3
 8009b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b3c:	4413      	add	r3, r2
 8009b3e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8009b42:	627b      	str	r3, [r7, #36]	; 0x24
 8009b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b46:	881b      	ldrh	r3, [r3, #0]
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b4e:	b29a      	uxth	r2, r3
 8009b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b52:	801a      	strh	r2, [r3, #0]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	691b      	ldr	r3, [r3, #16]
 8009b58:	2b3e      	cmp	r3, #62	; 0x3e
 8009b5a:	d91d      	bls.n	8009b98 <USB_ActivateEndpoint+0x2b0>
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	691b      	ldr	r3, [r3, #16]
 8009b60:	095b      	lsrs	r3, r3, #5
 8009b62:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	f003 031f 	and.w	r3, r3, #31
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d102      	bne.n	8009b76 <USB_ActivateEndpoint+0x28e>
 8009b70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b72:	3b01      	subs	r3, #1
 8009b74:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	881b      	ldrh	r3, [r3, #0]
 8009b7a:	b29a      	uxth	r2, r3
 8009b7c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	029b      	lsls	r3, r3, #10
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	4313      	orrs	r3, r2
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009b8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009b90:	b29a      	uxth	r2, r3
 8009b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b94:	801a      	strh	r2, [r3, #0]
 8009b96:	e026      	b.n	8009be6 <USB_ActivateEndpoint+0x2fe>
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	691b      	ldr	r3, [r3, #16]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d10a      	bne.n	8009bb6 <USB_ActivateEndpoint+0x2ce>
 8009ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ba2:	881b      	ldrh	r3, [r3, #0]
 8009ba4:	b29b      	uxth	r3, r3
 8009ba6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009baa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009bae:	b29a      	uxth	r2, r3
 8009bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb2:	801a      	strh	r2, [r3, #0]
 8009bb4:	e017      	b.n	8009be6 <USB_ActivateEndpoint+0x2fe>
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	691b      	ldr	r3, [r3, #16]
 8009bba:	085b      	lsrs	r3, r3, #1
 8009bbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bbe:	683b      	ldr	r3, [r7, #0]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	f003 0301 	and.w	r3, r3, #1
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d002      	beq.n	8009bd0 <USB_ActivateEndpoint+0x2e8>
 8009bca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009bcc:	3301      	adds	r3, #1
 8009bce:	66bb      	str	r3, [r7, #104]	; 0x68
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd2:	881b      	ldrh	r3, [r3, #0]
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009bd8:	b29b      	uxth	r3, r3
 8009bda:	029b      	lsls	r3, r3, #10
 8009bdc:	b29b      	uxth	r3, r3
 8009bde:	4313      	orrs	r3, r2
 8009be0:	b29a      	uxth	r2, r3
 8009be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	4413      	add	r3, r2
 8009bf0:	881b      	ldrh	r3, [r3, #0]
 8009bf2:	847b      	strh	r3, [r7, #34]	; 0x22
 8009bf4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d01b      	beq.n	8009c36 <USB_ActivateEndpoint+0x34e>
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	009b      	lsls	r3, r3, #2
 8009c06:	4413      	add	r3, r2
 8009c08:	881b      	ldrh	r3, [r3, #0]
 8009c0a:	b29b      	uxth	r3, r3
 8009c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c14:	843b      	strh	r3, [r7, #32]
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	009b      	lsls	r3, r3, #2
 8009c1e:	441a      	add	r2, r3
 8009c20:	8c3b      	ldrh	r3, [r7, #32]
 8009c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	781b      	ldrb	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d124      	bne.n	8009c88 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009c3e:	687a      	ldr	r2, [r7, #4]
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	009b      	lsls	r3, r3, #2
 8009c46:	4413      	add	r3, r2
 8009c48:	881b      	ldrh	r3, [r3, #0]
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c54:	83bb      	strh	r3, [r7, #28]
 8009c56:	8bbb      	ldrh	r3, [r7, #28]
 8009c58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009c5c:	83bb      	strh	r3, [r7, #28]
 8009c5e:	8bbb      	ldrh	r3, [r7, #28]
 8009c60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009c64:	83bb      	strh	r3, [r7, #28]
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	441a      	add	r2, r3
 8009c70:	8bbb      	ldrh	r3, [r7, #28]
 8009c72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	8013      	strh	r3, [r2, #0]
 8009c86:	e1ea      	b.n	800a05e <USB_ActivateEndpoint+0x776>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8009c88:	687a      	ldr	r2, [r7, #4]
 8009c8a:	683b      	ldr	r3, [r7, #0]
 8009c8c:	781b      	ldrb	r3, [r3, #0]
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	4413      	add	r3, r2
 8009c92:	881b      	ldrh	r3, [r3, #0]
 8009c94:	b29b      	uxth	r3, r3
 8009c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c9e:	83fb      	strh	r3, [r7, #30]
 8009ca0:	8bfb      	ldrh	r3, [r7, #30]
 8009ca2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009ca6:	83fb      	strh	r3, [r7, #30]
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	009b      	lsls	r3, r3, #2
 8009cb0:	441a      	add	r2, r3
 8009cb2:	8bfb      	ldrh	r3, [r7, #30]
 8009cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	8013      	strh	r3, [r2, #0]
 8009cc8:	e1c9      	b.n	800a05e <USB_ActivateEndpoint+0x776>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	78db      	ldrb	r3, [r3, #3]
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d11e      	bne.n	8009d10 <USB_ActivateEndpoint+0x428>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8009cd2:	687a      	ldr	r2, [r7, #4]
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	781b      	ldrb	r3, [r3, #0]
 8009cd8:	009b      	lsls	r3, r3, #2
 8009cda:	4413      	add	r3, r2
 8009cdc:	881b      	ldrh	r3, [r3, #0]
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ce8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8009cec:	687a      	ldr	r2, [r7, #4]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	441a      	add	r2, r3
 8009cf6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8009cfa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cfe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d02:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009d06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	8013      	strh	r3, [r2, #0]
 8009d0e:	e01d      	b.n	8009d4c <USB_ActivateEndpoint+0x464>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8009d10:	687a      	ldr	r2, [r7, #4]
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	009b      	lsls	r3, r3, #2
 8009d18:	4413      	add	r3, r2
 8009d1a:	881b      	ldrh	r3, [r3, #0]
 8009d1c:	b29b      	uxth	r3, r3
 8009d1e:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8009d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d26:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	781b      	ldrb	r3, [r3, #0]
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	441a      	add	r2, r3
 8009d34:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009d38:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d3c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d40:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d48:	b29b      	uxth	r3, r3
 8009d4a:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d56:	b29b      	uxth	r3, r3
 8009d58:	461a      	mov	r2, r3
 8009d5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d5c:	4413      	add	r3, r2
 8009d5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	00da      	lsls	r2, r3, #3
 8009d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009d68:	4413      	add	r3, r2
 8009d6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009d6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	891b      	ldrh	r3, [r3, #8]
 8009d74:	085b      	lsrs	r3, r3, #1
 8009d76:	b29b      	uxth	r3, r3
 8009d78:	005b      	lsls	r3, r3, #1
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009d7e:	801a      	strh	r2, [r3, #0]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	657b      	str	r3, [r7, #84]	; 0x54
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	461a      	mov	r2, r3
 8009d8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d90:	4413      	add	r3, r2
 8009d92:	657b      	str	r3, [r7, #84]	; 0x54
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	781b      	ldrb	r3, [r3, #0]
 8009d98:	00da      	lsls	r2, r3, #3
 8009d9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d9c:	4413      	add	r3, r2
 8009d9e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8009da2:	653b      	str	r3, [r7, #80]	; 0x50
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	895b      	ldrh	r3, [r3, #10]
 8009da8:	085b      	lsrs	r3, r3, #1
 8009daa:	b29b      	uxth	r3, r3
 8009dac:	005b      	lsls	r3, r3, #1
 8009dae:	b29a      	uxth	r2, r3
 8009db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009db2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	785b      	ldrb	r3, [r3, #1]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	f040 8093 	bne.w	8009ee4 <USB_ActivateEndpoint+0x5fc>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009dbe:	687a      	ldr	r2, [r7, #4]
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	781b      	ldrb	r3, [r3, #0]
 8009dc4:	009b      	lsls	r3, r3, #2
 8009dc6:	4413      	add	r3, r2
 8009dc8:	881b      	ldrh	r3, [r3, #0]
 8009dca:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009dce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d01b      	beq.n	8009e12 <USB_ActivateEndpoint+0x52a>
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	4413      	add	r3, r2
 8009de4:	881b      	ldrh	r3, [r3, #0]
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009df0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009df2:	687a      	ldr	r2, [r7, #4]
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	441a      	add	r2, r3
 8009dfc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009dfe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e02:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e0e:	b29b      	uxth	r3, r3
 8009e10:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009e12:	687a      	ldr	r2, [r7, #4]
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	4413      	add	r3, r2
 8009e1c:	881b      	ldrh	r3, [r3, #0]
 8009e1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009e20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d01b      	beq.n	8009e62 <USB_ActivateEndpoint+0x57a>
 8009e2a:	687a      	ldr	r2, [r7, #4]
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	009b      	lsls	r3, r3, #2
 8009e32:	4413      	add	r3, r2
 8009e34:	881b      	ldrh	r3, [r3, #0]
 8009e36:	b29b      	uxth	r3, r3
 8009e38:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e40:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009e42:	687a      	ldr	r2, [r7, #4]
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	009b      	lsls	r3, r3, #2
 8009e4a:	441a      	add	r2, r3
 8009e4c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009e4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009e62:	687a      	ldr	r2, [r7, #4]
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	009b      	lsls	r3, r3, #2
 8009e6a:	4413      	add	r3, r2
 8009e6c:	881b      	ldrh	r3, [r3, #0]
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e78:	873b      	strh	r3, [r7, #56]	; 0x38
 8009e7a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e7c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009e80:	873b      	strh	r3, [r7, #56]	; 0x38
 8009e82:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009e88:	873b      	strh	r3, [r7, #56]	; 0x38
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	781b      	ldrb	r3, [r3, #0]
 8009e90:	009b      	lsls	r3, r3, #2
 8009e92:	441a      	add	r2, r3
 8009e94:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009e96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	4413      	add	r3, r2
 8009eb4:	881b      	ldrh	r3, [r3, #0]
 8009eb6:	b29b      	uxth	r3, r3
 8009eb8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ec0:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	781b      	ldrb	r3, [r3, #0]
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	441a      	add	r2, r3
 8009ecc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009ece:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ed2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ed6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ede:	b29b      	uxth	r3, r3
 8009ee0:	8013      	strh	r3, [r2, #0]
 8009ee2:	e0bc      	b.n	800a05e <USB_ActivateEndpoint+0x776>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009ee4:	687a      	ldr	r2, [r7, #4]
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	4413      	add	r3, r2
 8009eee:	881b      	ldrh	r3, [r3, #0]
 8009ef0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8009ef4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8009ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d01d      	beq.n	8009f3c <USB_ActivateEndpoint+0x654>
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	781b      	ldrb	r3, [r3, #0]
 8009f06:	009b      	lsls	r3, r3, #2
 8009f08:	4413      	add	r3, r2
 8009f0a:	881b      	ldrh	r3, [r3, #0]
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f16:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8009f1a:	687a      	ldr	r2, [r7, #4]
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	781b      	ldrb	r3, [r3, #0]
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	441a      	add	r2, r3
 8009f24:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8009f28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f38:	b29b      	uxth	r3, r3
 8009f3a:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009f3c:	687a      	ldr	r2, [r7, #4]
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	781b      	ldrb	r3, [r3, #0]
 8009f42:	009b      	lsls	r3, r3, #2
 8009f44:	4413      	add	r3, r2
 8009f46:	881b      	ldrh	r3, [r3, #0]
 8009f48:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009f4c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d01d      	beq.n	8009f94 <USB_ActivateEndpoint+0x6ac>
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	4413      	add	r3, r2
 8009f62:	881b      	ldrh	r3, [r3, #0]
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f6e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	441a      	add	r2, r3
 8009f7c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009f80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	78db      	ldrb	r3, [r3, #3]
 8009f98:	2b01      	cmp	r3, #1
 8009f9a:	d024      	beq.n	8009fe6 <USB_ActivateEndpoint+0x6fe>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	009b      	lsls	r3, r3, #2
 8009fa4:	4413      	add	r3, r2
 8009fa6:	881b      	ldrh	r3, [r3, #0]
 8009fa8:	b29b      	uxth	r3, r3
 8009faa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fb2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009fb6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009fba:	f083 0320 	eor.w	r3, r3, #32
 8009fbe:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009fc2:	687a      	ldr	r2, [r7, #4]
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	781b      	ldrb	r3, [r3, #0]
 8009fc8:	009b      	lsls	r3, r3, #2
 8009fca:	441a      	add	r2, r3
 8009fcc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009fd0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fd4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	8013      	strh	r3, [r2, #0]
 8009fe4:	e01d      	b.n	800a022 <USB_ActivateEndpoint+0x73a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	4413      	add	r3, r2
 8009ff0:	881b      	ldrh	r3, [r3, #0]
 8009ff2:	b29b      	uxth	r3, r3
 8009ff4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ff8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ffc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800a000:	687a      	ldr	r2, [r7, #4]
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	441a      	add	r2, r3
 800a00a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800a00e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a012:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a016:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a01a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a01e:	b29b      	uxth	r3, r3
 800a020:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	009b      	lsls	r3, r3, #2
 800a02a:	4413      	add	r3, r2
 800a02c:	881b      	ldrh	r3, [r3, #0]
 800a02e:	b29b      	uxth	r3, r3
 800a030:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a034:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a038:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800a03c:	687a      	ldr	r2, [r7, #4]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	441a      	add	r2, r3
 800a046:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800a04a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a04e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a052:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a05a:	b29b      	uxth	r3, r3
 800a05c:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a05e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800a062:	4618      	mov	r0, r3
 800a064:	3774      	adds	r7, #116	; 0x74
 800a066:	46bd      	mov	sp, r7
 800a068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06c:	4770      	bx	lr
 800a06e:	bf00      	nop

0800a070 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a070:	b480      	push	{r7}
 800a072:	b08d      	sub	sp, #52	; 0x34
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a07a:	683b      	ldr	r3, [r7, #0]
 800a07c:	7b1b      	ldrb	r3, [r3, #12]
 800a07e:	2b00      	cmp	r3, #0
 800a080:	f040 808e 	bne.w	800a1a0 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	785b      	ldrb	r3, [r3, #1]
 800a088:	2b00      	cmp	r3, #0
 800a08a:	d044      	beq.n	800a116 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a08c:	687a      	ldr	r2, [r7, #4]
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	781b      	ldrb	r3, [r3, #0]
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	4413      	add	r3, r2
 800a096:	881b      	ldrh	r3, [r3, #0]
 800a098:	81bb      	strh	r3, [r7, #12]
 800a09a:	89bb      	ldrh	r3, [r7, #12]
 800a09c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d01b      	beq.n	800a0dc <USB_DeactivateEndpoint+0x6c>
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	4413      	add	r3, r2
 800a0ae:	881b      	ldrh	r3, [r3, #0]
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0ba:	817b      	strh	r3, [r7, #10]
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	441a      	add	r2, r3
 800a0c6:	897b      	ldrh	r3, [r7, #10]
 800a0c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0d4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4413      	add	r3, r2
 800a0e6:	881b      	ldrh	r3, [r3, #0]
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0f2:	813b      	strh	r3, [r7, #8]
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	441a      	add	r2, r3
 800a0fe:	893b      	ldrh	r3, [r7, #8]
 800a100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a10c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a110:	b29b      	uxth	r3, r3
 800a112:	8013      	strh	r3, [r2, #0]
 800a114:	e192      	b.n	800a43c <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	781b      	ldrb	r3, [r3, #0]
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	4413      	add	r3, r2
 800a120:	881b      	ldrh	r3, [r3, #0]
 800a122:	827b      	strh	r3, [r7, #18]
 800a124:	8a7b      	ldrh	r3, [r7, #18]
 800a126:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d01b      	beq.n	800a166 <USB_DeactivateEndpoint+0xf6>
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	781b      	ldrb	r3, [r3, #0]
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	4413      	add	r3, r2
 800a138:	881b      	ldrh	r3, [r3, #0]
 800a13a:	b29b      	uxth	r3, r3
 800a13c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a140:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a144:	823b      	strh	r3, [r7, #16]
 800a146:	687a      	ldr	r2, [r7, #4]
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	441a      	add	r2, r3
 800a150:	8a3b      	ldrh	r3, [r7, #16]
 800a152:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a156:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a15a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a15e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a162:	b29b      	uxth	r3, r3
 800a164:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a166:	687a      	ldr	r2, [r7, #4]
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	781b      	ldrb	r3, [r3, #0]
 800a16c:	009b      	lsls	r3, r3, #2
 800a16e:	4413      	add	r3, r2
 800a170:	881b      	ldrh	r3, [r3, #0]
 800a172:	b29b      	uxth	r3, r3
 800a174:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a17c:	81fb      	strh	r3, [r7, #14]
 800a17e:	687a      	ldr	r2, [r7, #4]
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	441a      	add	r2, r3
 800a188:	89fb      	ldrh	r3, [r7, #14]
 800a18a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a18e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a192:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	8013      	strh	r3, [r2, #0]
 800a19e:	e14d      	b.n	800a43c <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	785b      	ldrb	r3, [r3, #1]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	f040 80a5 	bne.w	800a2f4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	781b      	ldrb	r3, [r3, #0]
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4413      	add	r3, r2
 800a1b4:	881b      	ldrh	r3, [r3, #0]
 800a1b6:	843b      	strh	r3, [r7, #32]
 800a1b8:	8c3b      	ldrh	r3, [r7, #32]
 800a1ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d01b      	beq.n	800a1fa <USB_DeactivateEndpoint+0x18a>
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	683b      	ldr	r3, [r7, #0]
 800a1c6:	781b      	ldrb	r3, [r3, #0]
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	4413      	add	r3, r2
 800a1cc:	881b      	ldrh	r3, [r3, #0]
 800a1ce:	b29b      	uxth	r3, r3
 800a1d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a1d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1d8:	83fb      	strh	r3, [r7, #30]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	683b      	ldr	r3, [r7, #0]
 800a1de:	781b      	ldrb	r3, [r3, #0]
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	441a      	add	r2, r3
 800a1e4:	8bfb      	ldrh	r3, [r7, #30]
 800a1e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a1ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a1ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a1f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f6:	b29b      	uxth	r3, r3
 800a1f8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a1fa:	687a      	ldr	r2, [r7, #4]
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	781b      	ldrb	r3, [r3, #0]
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4413      	add	r3, r2
 800a204:	881b      	ldrh	r3, [r3, #0]
 800a206:	83bb      	strh	r3, [r7, #28]
 800a208:	8bbb      	ldrh	r3, [r7, #28]
 800a20a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d01b      	beq.n	800a24a <USB_DeactivateEndpoint+0x1da>
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	781b      	ldrb	r3, [r3, #0]
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4413      	add	r3, r2
 800a21c:	881b      	ldrh	r3, [r3, #0]
 800a21e:	b29b      	uxth	r3, r3
 800a220:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a228:	837b      	strh	r3, [r7, #26]
 800a22a:	687a      	ldr	r2, [r7, #4]
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	441a      	add	r2, r3
 800a234:	8b7b      	ldrh	r3, [r7, #26]
 800a236:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a23a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a23e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a242:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a246:	b29b      	uxth	r3, r3
 800a248:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	009b      	lsls	r3, r3, #2
 800a252:	4413      	add	r3, r2
 800a254:	881b      	ldrh	r3, [r3, #0]
 800a256:	b29b      	uxth	r3, r3
 800a258:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a25c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a260:	833b      	strh	r3, [r7, #24]
 800a262:	687a      	ldr	r2, [r7, #4]
 800a264:	683b      	ldr	r3, [r7, #0]
 800a266:	781b      	ldrb	r3, [r3, #0]
 800a268:	009b      	lsls	r3, r3, #2
 800a26a:	441a      	add	r2, r3
 800a26c:	8b3b      	ldrh	r3, [r7, #24]
 800a26e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a272:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a276:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a27a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a27e:	b29b      	uxth	r3, r3
 800a280:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a282:	687a      	ldr	r2, [r7, #4]
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	4413      	add	r3, r2
 800a28c:	881b      	ldrh	r3, [r3, #0]
 800a28e:	b29b      	uxth	r3, r3
 800a290:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a294:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a298:	82fb      	strh	r3, [r7, #22]
 800a29a:	687a      	ldr	r2, [r7, #4]
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	781b      	ldrb	r3, [r3, #0]
 800a2a0:	009b      	lsls	r3, r3, #2
 800a2a2:	441a      	add	r2, r3
 800a2a4:	8afb      	ldrh	r3, [r7, #22]
 800a2a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2b6:	b29b      	uxth	r3, r3
 800a2b8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a2ba:	687a      	ldr	r2, [r7, #4]
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	4413      	add	r3, r2
 800a2c4:	881b      	ldrh	r3, [r3, #0]
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a2cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2d0:	82bb      	strh	r3, [r7, #20]
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	009b      	lsls	r3, r3, #2
 800a2da:	441a      	add	r2, r3
 800a2dc:	8abb      	ldrh	r3, [r7, #20]
 800a2de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a2ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	8013      	strh	r3, [r2, #0]
 800a2f2:	e0a3      	b.n	800a43c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a2f4:	687a      	ldr	r2, [r7, #4]
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	009b      	lsls	r3, r3, #2
 800a2fc:	4413      	add	r3, r2
 800a2fe:	881b      	ldrh	r3, [r3, #0]
 800a300:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800a302:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a304:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d01b      	beq.n	800a344 <USB_DeactivateEndpoint+0x2d4>
 800a30c:	687a      	ldr	r2, [r7, #4]
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	781b      	ldrb	r3, [r3, #0]
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	4413      	add	r3, r2
 800a316:	881b      	ldrh	r3, [r3, #0]
 800a318:	b29b      	uxth	r3, r3
 800a31a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a31e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a322:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	441a      	add	r2, r3
 800a32e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a330:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a334:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a338:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a33c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a340:	b29b      	uxth	r3, r3
 800a342:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a344:	687a      	ldr	r2, [r7, #4]
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	781b      	ldrb	r3, [r3, #0]
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	4413      	add	r3, r2
 800a34e:	881b      	ldrh	r3, [r3, #0]
 800a350:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a352:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a358:	2b00      	cmp	r3, #0
 800a35a:	d01b      	beq.n	800a394 <USB_DeactivateEndpoint+0x324>
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	009b      	lsls	r3, r3, #2
 800a364:	4413      	add	r3, r2
 800a366:	881b      	ldrh	r3, [r3, #0]
 800a368:	b29b      	uxth	r3, r3
 800a36a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a36e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a372:	853b      	strh	r3, [r7, #40]	; 0x28
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	781b      	ldrb	r3, [r3, #0]
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	441a      	add	r2, r3
 800a37e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a380:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a384:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a388:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a38c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a390:	b29b      	uxth	r3, r3
 800a392:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800a394:	687a      	ldr	r2, [r7, #4]
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	4413      	add	r3, r2
 800a39e:	881b      	ldrh	r3, [r3, #0]
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3aa:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a3ac:	687a      	ldr	r2, [r7, #4]
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	781b      	ldrb	r3, [r3, #0]
 800a3b2:	009b      	lsls	r3, r3, #2
 800a3b4:	441a      	add	r2, r3
 800a3b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a3b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a3c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	009b      	lsls	r3, r3, #2
 800a3d4:	4413      	add	r3, r2
 800a3d6:	881b      	ldrh	r3, [r3, #0]
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a3de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a3e2:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a3e4:	687a      	ldr	r2, [r7, #4]
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	441a      	add	r2, r3
 800a3ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a3f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a3f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a3f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a3fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a400:	b29b      	uxth	r3, r3
 800a402:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	4413      	add	r3, r2
 800a40e:	881b      	ldrh	r3, [r3, #0]
 800a410:	b29b      	uxth	r3, r3
 800a412:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a416:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a41a:	847b      	strh	r3, [r7, #34]	; 0x22
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	683b      	ldr	r3, [r7, #0]
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	009b      	lsls	r3, r3, #2
 800a424:	441a      	add	r2, r3
 800a426:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a428:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a42c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a430:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a438:	b29b      	uxth	r3, r3
 800a43a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800a43c:	2300      	movs	r3, #0
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3734      	adds	r7, #52	; 0x34
 800a442:	46bd      	mov	sp, r7
 800a444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a448:	4770      	bx	lr

0800a44a <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b0c2      	sub	sp, #264	; 0x108
 800a44e:	af00      	add	r7, sp, #0
 800a450:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a458:	6018      	str	r0, [r3, #0]
 800a45a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a45e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a462:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a464:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a468:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	785b      	ldrb	r3, [r3, #1]
 800a470:	2b01      	cmp	r3, #1
 800a472:	f040 86b7 	bne.w	800b1e4 <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800a476:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a47a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	699a      	ldr	r2, [r3, #24]
 800a482:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a486:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	691b      	ldr	r3, [r3, #16]
 800a48e:	429a      	cmp	r2, r3
 800a490:	d908      	bls.n	800a4a4 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800a492:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a496:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800a4a2:	e007      	b.n	800a4b4 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800a4a4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	699b      	ldr	r3, [r3, #24]
 800a4b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800a4b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	7b1b      	ldrb	r3, [r3, #12]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d13a      	bne.n	800a53a <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800a4c4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	6959      	ldr	r1, [r3, #20]
 800a4d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	88da      	ldrh	r2, [r3, #6]
 800a4dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a4e6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a4ea:	6800      	ldr	r0, [r0, #0]
 800a4ec:	f001 fc98 	bl	800be20 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a4f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a4f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	613b      	str	r3, [r7, #16]
 800a4fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a500:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	461a      	mov	r2, r3
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	4413      	add	r3, r2
 800a512:	613b      	str	r3, [r7, #16]
 800a514:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a518:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	781b      	ldrb	r3, [r3, #0]
 800a520:	00da      	lsls	r2, r3, #3
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	4413      	add	r3, r2
 800a526:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a52a:	60fb      	str	r3, [r7, #12]
 800a52c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a530:	b29a      	uxth	r2, r3
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	801a      	strh	r2, [r3, #0]
 800a536:	f000 be1f 	b.w	800b178 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800a53a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a53e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	78db      	ldrb	r3, [r3, #3]
 800a546:	2b02      	cmp	r3, #2
 800a548:	f040 8462 	bne.w	800ae10 <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800a54c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a550:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	6a1a      	ldr	r2, [r3, #32]
 800a558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a55c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	691b      	ldr	r3, [r3, #16]
 800a564:	429a      	cmp	r2, r3
 800a566:	f240 83df 	bls.w	800ad28 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a56a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a56e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a578:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	781b      	ldrb	r3, [r3, #0]
 800a580:	009b      	lsls	r3, r3, #2
 800a582:	4413      	add	r3, r2
 800a584:	881b      	ldrh	r3, [r3, #0]
 800a586:	b29b      	uxth	r3, r3
 800a588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a58c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a590:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a594:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a598:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	781b      	ldrb	r3, [r3, #0]
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	441a      	add	r2, r3
 800a5ae:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a5b2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a5b6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a5ba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a5be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5c2:	b29b      	uxth	r3, r3
 800a5c4:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a5c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	6a1a      	ldr	r2, [r3, #32]
 800a5d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a5d6:	1ad2      	subs	r2, r2, r3
 800a5d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a5e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a5ec:	681a      	ldr	r2, [r3, #0]
 800a5ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a5f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	009b      	lsls	r3, r3, #2
 800a5fc:	4413      	add	r3, r2
 800a5fe:	881b      	ldrh	r3, [r3, #0]
 800a600:	b29b      	uxth	r3, r3
 800a602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a606:	2b00      	cmp	r3, #0
 800a608:	f000 81c7 	beq.w	800a99a <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a60c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a610:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	633b      	str	r3, [r7, #48]	; 0x30
 800a618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a61c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	785b      	ldrb	r3, [r3, #1]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d177      	bne.n	800a718 <USB_EPStartXfer+0x2ce>
 800a628:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a62c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	62bb      	str	r3, [r7, #40]	; 0x28
 800a634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a638:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a642:	b29b      	uxth	r3, r3
 800a644:	461a      	mov	r2, r3
 800a646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a648:	4413      	add	r3, r2
 800a64a:	62bb      	str	r3, [r7, #40]	; 0x28
 800a64c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a650:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	781b      	ldrb	r3, [r3, #0]
 800a658:	00da      	lsls	r2, r3, #3
 800a65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65c:	4413      	add	r3, r2
 800a65e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a662:	627b      	str	r3, [r7, #36]	; 0x24
 800a664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a666:	881b      	ldrh	r3, [r3, #0]
 800a668:	b29b      	uxth	r3, r3
 800a66a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a66e:	b29a      	uxth	r2, r3
 800a670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a672:	801a      	strh	r2, [r3, #0]
 800a674:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a678:	2b3e      	cmp	r3, #62	; 0x3e
 800a67a:	d921      	bls.n	800a6c0 <USB_EPStartXfer+0x276>
 800a67c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a680:	095b      	lsrs	r3, r3, #5
 800a682:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a686:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a68a:	f003 031f 	and.w	r3, r3, #31
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d104      	bne.n	800a69c <USB_EPStartXfer+0x252>
 800a692:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a696:	3b01      	subs	r3, #1
 800a698:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a69e:	881b      	ldrh	r3, [r3, #0]
 800a6a0:	b29a      	uxth	r2, r3
 800a6a2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a6a6:	b29b      	uxth	r3, r3
 800a6a8:	029b      	lsls	r3, r3, #10
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	4313      	orrs	r3, r2
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6b8:	b29a      	uxth	r2, r3
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6bc:	801a      	strh	r2, [r3, #0]
 800a6be:	e050      	b.n	800a762 <USB_EPStartXfer+0x318>
 800a6c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d10a      	bne.n	800a6de <USB_EPStartXfer+0x294>
 800a6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6ca:	881b      	ldrh	r3, [r3, #0]
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6da:	801a      	strh	r2, [r3, #0]
 800a6dc:	e041      	b.n	800a762 <USB_EPStartXfer+0x318>
 800a6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6e2:	085b      	lsrs	r3, r3, #1
 800a6e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a6e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a6ec:	f003 0301 	and.w	r3, r3, #1
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d004      	beq.n	800a6fe <USB_EPStartXfer+0x2b4>
 800a6f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a6f8:	3301      	adds	r3, #1
 800a6fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800a6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a700:	881b      	ldrh	r3, [r3, #0]
 800a702:	b29a      	uxth	r2, r3
 800a704:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800a708:	b29b      	uxth	r3, r3
 800a70a:	029b      	lsls	r3, r3, #10
 800a70c:	b29b      	uxth	r3, r3
 800a70e:	4313      	orrs	r3, r2
 800a710:	b29a      	uxth	r2, r3
 800a712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a714:	801a      	strh	r2, [r3, #0]
 800a716:	e024      	b.n	800a762 <USB_EPStartXfer+0x318>
 800a718:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a71c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	785b      	ldrb	r3, [r3, #1]
 800a724:	2b01      	cmp	r3, #1
 800a726:	d11c      	bne.n	800a762 <USB_EPStartXfer+0x318>
 800a728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a72c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a736:	b29b      	uxth	r3, r3
 800a738:	461a      	mov	r2, r3
 800a73a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73c:	4413      	add	r3, r2
 800a73e:	633b      	str	r3, [r7, #48]	; 0x30
 800a740:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a744:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	00da      	lsls	r2, r3, #3
 800a74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a750:	4413      	add	r3, r2
 800a752:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800a756:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a758:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a75c:	b29a      	uxth	r2, r3
 800a75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a760:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a762:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a766:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	895b      	ldrh	r3, [r3, #10]
 800a76e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a772:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a776:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	6959      	ldr	r1, [r3, #20]
 800a77e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a782:	b29b      	uxth	r3, r3
 800a784:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a788:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a78c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a790:	6800      	ldr	r0, [r0, #0]
 800a792:	f001 fb45 	bl	800be20 <USB_WritePMA>
            ep->xfer_buff += len;
 800a796:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a79a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	695a      	ldr	r2, [r3, #20]
 800a7a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7a6:	441a      	add	r2, r3
 800a7a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a7b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	6a1a      	ldr	r2, [r3, #32]
 800a7c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	429a      	cmp	r2, r3
 800a7ce:	d90f      	bls.n	800a7f0 <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 800a7d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	6a1a      	ldr	r2, [r3, #32]
 800a7dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a7e0:	1ad2      	subs	r2, r2, r3
 800a7e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	621a      	str	r2, [r3, #32]
 800a7ee:	e00e      	b.n	800a80e <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 800a7f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a7f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	6a1b      	ldr	r3, [r3, #32]
 800a7fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800a800:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a804:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2200      	movs	r2, #0
 800a80c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a80e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a812:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	785b      	ldrb	r3, [r3, #1]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d177      	bne.n	800a90e <USB_EPStartXfer+0x4c4>
 800a81e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a822:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	61bb      	str	r3, [r7, #24]
 800a82a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a82e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a838:	b29b      	uxth	r3, r3
 800a83a:	461a      	mov	r2, r3
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	4413      	add	r3, r2
 800a840:	61bb      	str	r3, [r7, #24]
 800a842:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a846:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	00da      	lsls	r2, r3, #3
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	4413      	add	r3, r2
 800a854:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a858:	617b      	str	r3, [r7, #20]
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	881b      	ldrh	r3, [r3, #0]
 800a85e:	b29b      	uxth	r3, r3
 800a860:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a864:	b29a      	uxth	r2, r3
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	801a      	strh	r2, [r3, #0]
 800a86a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a86e:	2b3e      	cmp	r3, #62	; 0x3e
 800a870:	d921      	bls.n	800a8b6 <USB_EPStartXfer+0x46c>
 800a872:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a876:	095b      	lsrs	r3, r3, #5
 800a878:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a87c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a880:	f003 031f 	and.w	r3, r3, #31
 800a884:	2b00      	cmp	r3, #0
 800a886:	d104      	bne.n	800a892 <USB_EPStartXfer+0x448>
 800a888:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a88c:	3b01      	subs	r3, #1
 800a88e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	881b      	ldrh	r3, [r3, #0]
 800a896:	b29a      	uxth	r2, r3
 800a898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a89c:	b29b      	uxth	r3, r3
 800a89e:	029b      	lsls	r3, r3, #10
 800a8a0:	b29b      	uxth	r3, r3
 800a8a2:	4313      	orrs	r3, r2
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	801a      	strh	r2, [r3, #0]
 800a8b4:	e056      	b.n	800a964 <USB_EPStartXfer+0x51a>
 800a8b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d10a      	bne.n	800a8d4 <USB_EPStartXfer+0x48a>
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	881b      	ldrh	r3, [r3, #0]
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a8c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	697b      	ldr	r3, [r7, #20]
 800a8d0:	801a      	strh	r2, [r3, #0]
 800a8d2:	e047      	b.n	800a964 <USB_EPStartXfer+0x51a>
 800a8d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8d8:	085b      	lsrs	r3, r3, #1
 800a8da:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a8de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a8e2:	f003 0301 	and.w	r3, r3, #1
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d004      	beq.n	800a8f4 <USB_EPStartXfer+0x4aa>
 800a8ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8ee:	3301      	adds	r3, #1
 800a8f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800a8f4:	697b      	ldr	r3, [r7, #20]
 800a8f6:	881b      	ldrh	r3, [r3, #0]
 800a8f8:	b29a      	uxth	r2, r3
 800a8fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	029b      	lsls	r3, r3, #10
 800a902:	b29b      	uxth	r3, r3
 800a904:	4313      	orrs	r3, r2
 800a906:	b29a      	uxth	r2, r3
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	801a      	strh	r2, [r3, #0]
 800a90c:	e02a      	b.n	800a964 <USB_EPStartXfer+0x51a>
 800a90e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a912:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	785b      	ldrb	r3, [r3, #1]
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d122      	bne.n	800a964 <USB_EPStartXfer+0x51a>
 800a91e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a922:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	623b      	str	r3, [r7, #32]
 800a92a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a92e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a938:	b29b      	uxth	r3, r3
 800a93a:	461a      	mov	r2, r3
 800a93c:	6a3b      	ldr	r3, [r7, #32]
 800a93e:	4413      	add	r3, r2
 800a940:	623b      	str	r3, [r7, #32]
 800a942:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a946:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	00da      	lsls	r2, r3, #3
 800a950:	6a3b      	ldr	r3, [r7, #32]
 800a952:	4413      	add	r3, r2
 800a954:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a958:	61fb      	str	r3, [r7, #28]
 800a95a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a95e:	b29a      	uxth	r2, r3
 800a960:	69fb      	ldr	r3, [r7, #28]
 800a962:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a968:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	891b      	ldrh	r3, [r3, #8]
 800a970:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a974:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a978:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	6959      	ldr	r1, [r3, #20]
 800a980:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a984:	b29b      	uxth	r3, r3
 800a986:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800a98a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800a98e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800a992:	6800      	ldr	r0, [r0, #0]
 800a994:	f001 fa44 	bl	800be20 <USB_WritePMA>
 800a998:	e3ee      	b.n	800b178 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a99a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a99e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	785b      	ldrb	r3, [r3, #1]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d177      	bne.n	800aa9a <USB_EPStartXfer+0x650>
 800a9aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9ba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9c4:	b29b      	uxth	r3, r3
 800a9c6:	461a      	mov	r2, r3
 800a9c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9ca:	4413      	add	r3, r2
 800a9cc:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9ce:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800a9d2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	781b      	ldrb	r3, [r3, #0]
 800a9da:	00da      	lsls	r2, r3, #3
 800a9dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a9de:	4413      	add	r3, r2
 800a9e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800a9e4:	647b      	str	r3, [r7, #68]	; 0x44
 800a9e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9e8:	881b      	ldrh	r3, [r3, #0]
 800a9ea:	b29b      	uxth	r3, r3
 800a9ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a9f0:	b29a      	uxth	r2, r3
 800a9f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9f4:	801a      	strh	r2, [r3, #0]
 800a9f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800a9fa:	2b3e      	cmp	r3, #62	; 0x3e
 800a9fc:	d921      	bls.n	800aa42 <USB_EPStartXfer+0x5f8>
 800a9fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa02:	095b      	lsrs	r3, r3, #5
 800aa04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa0c:	f003 031f 	and.w	r3, r3, #31
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d104      	bne.n	800aa1e <USB_EPStartXfer+0x5d4>
 800aa14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa20:	881b      	ldrh	r3, [r3, #0]
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa28:	b29b      	uxth	r3, r3
 800aa2a:	029b      	lsls	r3, r3, #10
 800aa2c:	b29b      	uxth	r3, r3
 800aa2e:	4313      	orrs	r3, r2
 800aa30:	b29b      	uxth	r3, r3
 800aa32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa3a:	b29a      	uxth	r2, r3
 800aa3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa3e:	801a      	strh	r2, [r3, #0]
 800aa40:	e056      	b.n	800aaf0 <USB_EPStartXfer+0x6a6>
 800aa42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d10a      	bne.n	800aa60 <USB_EPStartXfer+0x616>
 800aa4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa4c:	881b      	ldrh	r3, [r3, #0]
 800aa4e:	b29b      	uxth	r3, r3
 800aa50:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa54:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa5c:	801a      	strh	r2, [r3, #0]
 800aa5e:	e047      	b.n	800aaf0 <USB_EPStartXfer+0x6a6>
 800aa60:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa64:	085b      	lsrs	r3, r3, #1
 800aa66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aa6e:	f003 0301 	and.w	r3, r3, #1
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d004      	beq.n	800aa80 <USB_EPStartXfer+0x636>
 800aa76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aa80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa82:	881b      	ldrh	r3, [r3, #0]
 800aa84:	b29a      	uxth	r2, r3
 800aa86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800aa8a:	b29b      	uxth	r3, r3
 800aa8c:	029b      	lsls	r3, r3, #10
 800aa8e:	b29b      	uxth	r3, r3
 800aa90:	4313      	orrs	r3, r2
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa96:	801a      	strh	r2, [r3, #0]
 800aa98:	e02a      	b.n	800aaf0 <USB_EPStartXfer+0x6a6>
 800aa9a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aa9e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	785b      	ldrb	r3, [r3, #1]
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d122      	bne.n	800aaf0 <USB_EPStartXfer+0x6a6>
 800aaaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	653b      	str	r3, [r7, #80]	; 0x50
 800aab6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaba:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	461a      	mov	r2, r3
 800aac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aaca:	4413      	add	r3, r2
 800aacc:	653b      	str	r3, [r7, #80]	; 0x50
 800aace:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aad2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	781b      	ldrb	r3, [r3, #0]
 800aada:	00da      	lsls	r2, r3, #3
 800aadc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aade:	4413      	add	r3, r2
 800aae0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800aae4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800aae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aaea:	b29a      	uxth	r2, r3
 800aaec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aaee:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800aaf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aaf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	891b      	ldrh	r3, [r3, #8]
 800aafc:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	6959      	ldr	r1, [r3, #20]
 800ab0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab10:	b29b      	uxth	r3, r3
 800ab12:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ab16:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ab1a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ab1e:	6800      	ldr	r0, [r0, #0]
 800ab20:	f001 f97e 	bl	800be20 <USB_WritePMA>
            ep->xfer_buff += len;
 800ab24:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab28:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	695a      	ldr	r2, [r3, #20]
 800ab30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab34:	441a      	add	r2, r3
 800ab36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800ab42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	6a1a      	ldr	r2, [r3, #32]
 800ab4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab52:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	691b      	ldr	r3, [r3, #16]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d90f      	bls.n	800ab7e <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 800ab5e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab62:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6a1a      	ldr	r2, [r3, #32]
 800ab6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ab6e:	1ad2      	subs	r2, r2, r3
 800ab70:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab74:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	621a      	str	r2, [r3, #32]
 800ab7c:	e00e      	b.n	800ab9c <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 800ab7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	6a1b      	ldr	r3, [r3, #32]
 800ab8a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 800ab8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ab92:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ab9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aba0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	643b      	str	r3, [r7, #64]	; 0x40
 800aba8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	785b      	ldrb	r3, [r3, #1]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d177      	bne.n	800aca8 <USB_EPStartXfer+0x85e>
 800abb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	63bb      	str	r3, [r7, #56]	; 0x38
 800abc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abc8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	461a      	mov	r2, r3
 800abd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abd8:	4413      	add	r3, r2
 800abda:	63bb      	str	r3, [r7, #56]	; 0x38
 800abdc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800abe0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	781b      	ldrb	r3, [r3, #0]
 800abe8:	00da      	lsls	r2, r3, #3
 800abea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abec:	4413      	add	r3, r2
 800abee:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800abf2:	637b      	str	r3, [r7, #52]	; 0x34
 800abf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abf6:	881b      	ldrh	r3, [r3, #0]
 800abf8:	b29b      	uxth	r3, r3
 800abfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800abfe:	b29a      	uxth	r2, r3
 800ac00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac02:	801a      	strh	r2, [r3, #0]
 800ac04:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac08:	2b3e      	cmp	r3, #62	; 0x3e
 800ac0a:	d921      	bls.n	800ac50 <USB_EPStartXfer+0x806>
 800ac0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac10:	095b      	lsrs	r3, r3, #5
 800ac12:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ac16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac1a:	f003 031f 	and.w	r3, r3, #31
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d104      	bne.n	800ac2c <USB_EPStartXfer+0x7e2>
 800ac22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac26:	3b01      	subs	r3, #1
 800ac28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ac2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac2e:	881b      	ldrh	r3, [r3, #0]
 800ac30:	b29a      	uxth	r2, r3
 800ac32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	029b      	lsls	r3, r3, #10
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	4313      	orrs	r3, r2
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac48:	b29a      	uxth	r2, r3
 800ac4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac4c:	801a      	strh	r2, [r3, #0]
 800ac4e:	e050      	b.n	800acf2 <USB_EPStartXfer+0x8a8>
 800ac50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d10a      	bne.n	800ac6e <USB_EPStartXfer+0x824>
 800ac58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac5a:	881b      	ldrh	r3, [r3, #0]
 800ac5c:	b29b      	uxth	r3, r3
 800ac5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac6a:	801a      	strh	r2, [r3, #0]
 800ac6c:	e041      	b.n	800acf2 <USB_EPStartXfer+0x8a8>
 800ac6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac72:	085b      	lsrs	r3, r3, #1
 800ac74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ac78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ac7c:	f003 0301 	and.w	r3, r3, #1
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d004      	beq.n	800ac8e <USB_EPStartXfer+0x844>
 800ac84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac88:	3301      	adds	r3, #1
 800ac8a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ac8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac90:	881b      	ldrh	r3, [r3, #0]
 800ac92:	b29a      	uxth	r2, r3
 800ac94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac98:	b29b      	uxth	r3, r3
 800ac9a:	029b      	lsls	r3, r3, #10
 800ac9c:	b29b      	uxth	r3, r3
 800ac9e:	4313      	orrs	r3, r2
 800aca0:	b29a      	uxth	r2, r3
 800aca2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aca4:	801a      	strh	r2, [r3, #0]
 800aca6:	e024      	b.n	800acf2 <USB_EPStartXfer+0x8a8>
 800aca8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	785b      	ldrb	r3, [r3, #1]
 800acb4:	2b01      	cmp	r3, #1
 800acb6:	d11c      	bne.n	800acf2 <USB_EPStartXfer+0x8a8>
 800acb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acbc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	461a      	mov	r2, r3
 800acca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800accc:	4413      	add	r3, r2
 800acce:	643b      	str	r3, [r7, #64]	; 0x40
 800acd0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acd4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	00da      	lsls	r2, r3, #3
 800acde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ace0:	4413      	add	r3, r2
 800ace2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ace6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ace8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800acec:	b29a      	uxth	r2, r3
 800acee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acf0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800acf2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800acf6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	895b      	ldrh	r3, [r3, #10]
 800acfe:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad02:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad06:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	6959      	ldr	r1, [r3, #20]
 800ad0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad12:	b29b      	uxth	r3, r3
 800ad14:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ad18:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ad1c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ad20:	6800      	ldr	r0, [r0, #0]
 800ad22:	f001 f87d 	bl	800be20 <USB_WritePMA>
 800ad26:	e227      	b.n	800b178 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800ad28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	6a1b      	ldr	r3, [r3, #32]
 800ad34:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800ad38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad3c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad40:	681a      	ldr	r2, [r3, #0]
 800ad42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	781b      	ldrb	r3, [r3, #0]
 800ad4e:	009b      	lsls	r3, r3, #2
 800ad50:	4413      	add	r3, r2
 800ad52:	881b      	ldrh	r3, [r3, #0]
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ad5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad5e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ad62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad6a:	681a      	ldr	r2, [r3, #0]
 800ad6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	781b      	ldrb	r3, [r3, #0]
 800ad78:	009b      	lsls	r3, r3, #2
 800ad7a:	441a      	add	r2, r3
 800ad7c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ad80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ad84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ad88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ad8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad90:	b29b      	uxth	r3, r3
 800ad92:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800ad94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ad98:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ada0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ada4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adae:	b29b      	uxth	r3, r3
 800adb0:	461a      	mov	r2, r3
 800adb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adb4:	4413      	add	r3, r2
 800adb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800adb8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adbc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	00da      	lsls	r2, r3, #3
 800adc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800adc8:	4413      	add	r3, r2
 800adca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800adce:	65bb      	str	r3, [r7, #88]	; 0x58
 800add0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800add4:	b29a      	uxth	r2, r3
 800add6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800add8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800adda:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adde:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	891b      	ldrh	r3, [r3, #8]
 800ade6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800adea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800adee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	6959      	ldr	r1, [r3, #20]
 800adf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800adfa:	b29b      	uxth	r3, r3
 800adfc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800ae00:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800ae04:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800ae08:	6800      	ldr	r0, [r0, #0]
 800ae0a:	f001 f809 	bl	800be20 <USB_WritePMA>
 800ae0e:	e1b3      	b.n	800b178 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800ae10:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae14:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	6a1a      	ldr	r2, [r3, #32]
 800ae1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ae20:	1ad2      	subs	r2, r2, r3
 800ae22:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae26:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ae2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae32:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae36:	681a      	ldr	r2, [r3, #0]
 800ae38:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae3c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	781b      	ldrb	r3, [r3, #0]
 800ae44:	009b      	lsls	r3, r3, #2
 800ae46:	4413      	add	r3, r2
 800ae48:	881b      	ldrh	r3, [r3, #0]
 800ae4a:	b29b      	uxth	r3, r3
 800ae4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f000 80c6 	beq.w	800afe2 <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ae56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae5a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	673b      	str	r3, [r7, #112]	; 0x70
 800ae62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	785b      	ldrb	r3, [r3, #1]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d177      	bne.n	800af62 <USB_EPStartXfer+0xb18>
 800ae72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae82:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ae8c:	b29b      	uxth	r3, r3
 800ae8e:	461a      	mov	r2, r3
 800ae90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ae92:	4413      	add	r3, r2
 800ae94:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ae9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	00da      	lsls	r2, r3, #3
 800aea4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aea6:	4413      	add	r3, r2
 800aea8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800aeac:	667b      	str	r3, [r7, #100]	; 0x64
 800aeae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aeb0:	881b      	ldrh	r3, [r3, #0]
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aeb8:	b29a      	uxth	r2, r3
 800aeba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aebc:	801a      	strh	r2, [r3, #0]
 800aebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aec2:	2b3e      	cmp	r3, #62	; 0x3e
 800aec4:	d921      	bls.n	800af0a <USB_EPStartXfer+0xac0>
 800aec6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aeca:	095b      	lsrs	r3, r3, #5
 800aecc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aed0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800aed4:	f003 031f 	and.w	r3, r3, #31
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d104      	bne.n	800aee6 <USB_EPStartXfer+0xa9c>
 800aedc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800aee0:	3b01      	subs	r3, #1
 800aee2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800aee6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aee8:	881b      	ldrh	r3, [r3, #0]
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800aef0:	b29b      	uxth	r3, r3
 800aef2:	029b      	lsls	r3, r3, #10
 800aef4:	b29b      	uxth	r3, r3
 800aef6:	4313      	orrs	r3, r2
 800aef8:	b29b      	uxth	r3, r3
 800aefa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aefe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af02:	b29a      	uxth	r2, r3
 800af04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af06:	801a      	strh	r2, [r3, #0]
 800af08:	e050      	b.n	800afac <USB_EPStartXfer+0xb62>
 800af0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d10a      	bne.n	800af28 <USB_EPStartXfer+0xade>
 800af12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af14:	881b      	ldrh	r3, [r3, #0]
 800af16:	b29b      	uxth	r3, r3
 800af18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af20:	b29a      	uxth	r2, r3
 800af22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af24:	801a      	strh	r2, [r3, #0]
 800af26:	e041      	b.n	800afac <USB_EPStartXfer+0xb62>
 800af28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af2c:	085b      	lsrs	r3, r3, #1
 800af2e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800af32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800af36:	f003 0301 	and.w	r3, r3, #1
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d004      	beq.n	800af48 <USB_EPStartXfer+0xafe>
 800af3e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800af42:	3301      	adds	r3, #1
 800af44:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800af48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af4a:	881b      	ldrh	r3, [r3, #0]
 800af4c:	b29a      	uxth	r2, r3
 800af4e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800af52:	b29b      	uxth	r3, r3
 800af54:	029b      	lsls	r3, r3, #10
 800af56:	b29b      	uxth	r3, r3
 800af58:	4313      	orrs	r3, r2
 800af5a:	b29a      	uxth	r2, r3
 800af5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af5e:	801a      	strh	r2, [r3, #0]
 800af60:	e024      	b.n	800afac <USB_EPStartXfer+0xb62>
 800af62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	785b      	ldrb	r3, [r3, #1]
 800af6e:	2b01      	cmp	r3, #1
 800af70:	d11c      	bne.n	800afac <USB_EPStartXfer+0xb62>
 800af72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af76:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af80:	b29b      	uxth	r3, r3
 800af82:	461a      	mov	r2, r3
 800af84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af86:	4413      	add	r3, r2
 800af88:	673b      	str	r3, [r7, #112]	; 0x70
 800af8a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800af8e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	781b      	ldrb	r3, [r3, #0]
 800af96:	00da      	lsls	r2, r3, #3
 800af98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af9a:	4413      	add	r3, r2
 800af9c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800afa0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800afa2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afaa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800afac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afb0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	895b      	ldrh	r3, [r3, #10]
 800afb8:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800afbc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afc0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	6959      	ldr	r1, [r3, #20]
 800afc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800afcc:	b29b      	uxth	r3, r3
 800afce:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800afd2:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800afd6:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800afda:	6800      	ldr	r0, [r0, #0]
 800afdc:	f000 ff20 	bl	800be20 <USB_WritePMA>
 800afe0:	e0ca      	b.n	800b178 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800afe2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800afe6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	785b      	ldrb	r3, [r3, #1]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d177      	bne.n	800b0e2 <USB_EPStartXfer+0xc98>
 800aff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800aff6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	67fb      	str	r3, [r7, #124]	; 0x7c
 800affe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b002:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	461a      	mov	r2, r3
 800b010:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b012:	4413      	add	r3, r2
 800b014:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b016:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b01a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	781b      	ldrb	r3, [r3, #0]
 800b022:	00da      	lsls	r2, r3, #3
 800b024:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800b026:	4413      	add	r3, r2
 800b028:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b02c:	67bb      	str	r3, [r7, #120]	; 0x78
 800b02e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b030:	881b      	ldrh	r3, [r3, #0]
 800b032:	b29b      	uxth	r3, r3
 800b034:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b038:	b29a      	uxth	r2, r3
 800b03a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b03c:	801a      	strh	r2, [r3, #0]
 800b03e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b042:	2b3e      	cmp	r3, #62	; 0x3e
 800b044:	d921      	bls.n	800b08a <USB_EPStartXfer+0xc40>
 800b046:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b04a:	095b      	lsrs	r3, r3, #5
 800b04c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b050:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b054:	f003 031f 	and.w	r3, r3, #31
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d104      	bne.n	800b066 <USB_EPStartXfer+0xc1c>
 800b05c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b060:	3b01      	subs	r3, #1
 800b062:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b066:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b068:	881b      	ldrh	r3, [r3, #0]
 800b06a:	b29a      	uxth	r2, r3
 800b06c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b070:	b29b      	uxth	r3, r3
 800b072:	029b      	lsls	r3, r3, #10
 800b074:	b29b      	uxth	r3, r3
 800b076:	4313      	orrs	r3, r2
 800b078:	b29b      	uxth	r3, r3
 800b07a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b07e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b082:	b29a      	uxth	r2, r3
 800b084:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b086:	801a      	strh	r2, [r3, #0]
 800b088:	e05c      	b.n	800b144 <USB_EPStartXfer+0xcfa>
 800b08a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d10a      	bne.n	800b0a8 <USB_EPStartXfer+0xc5e>
 800b092:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b094:	881b      	ldrh	r3, [r3, #0]
 800b096:	b29b      	uxth	r3, r3
 800b098:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b09c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0a0:	b29a      	uxth	r2, r3
 800b0a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0a4:	801a      	strh	r2, [r3, #0]
 800b0a6:	e04d      	b.n	800b144 <USB_EPStartXfer+0xcfa>
 800b0a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0ac:	085b      	lsrs	r3, r3, #1
 800b0ae:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b0b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b0b6:	f003 0301 	and.w	r3, r3, #1
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d004      	beq.n	800b0c8 <USB_EPStartXfer+0xc7e>
 800b0be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b0c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0ca:	881b      	ldrh	r3, [r3, #0]
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b0d2:	b29b      	uxth	r3, r3
 800b0d4:	029b      	lsls	r3, r3, #10
 800b0d6:	b29b      	uxth	r3, r3
 800b0d8:	4313      	orrs	r3, r2
 800b0da:	b29a      	uxth	r2, r3
 800b0dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b0de:	801a      	strh	r2, [r3, #0]
 800b0e0:	e030      	b.n	800b144 <USB_EPStartXfer+0xcfa>
 800b0e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	785b      	ldrb	r3, [r3, #1]
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	d128      	bne.n	800b144 <USB_EPStartXfer+0xcfa>
 800b0f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b0f6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b100:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b104:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b10e:	b29b      	uxth	r3, r3
 800b110:	461a      	mov	r2, r3
 800b112:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b116:	4413      	add	r3, r2
 800b118:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b11c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b120:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	781b      	ldrb	r3, [r3, #0]
 800b128:	00da      	lsls	r2, r3, #3
 800b12a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b12e:	4413      	add	r3, r2
 800b130:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b134:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b138:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b13c:	b29a      	uxth	r2, r3
 800b13e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b142:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b144:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b148:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	891b      	ldrh	r3, [r3, #8]
 800b150:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b154:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b158:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	6959      	ldr	r1, [r3, #20]
 800b160:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b164:	b29b      	uxth	r3, r3
 800b166:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800b16a:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800b16e:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800b172:	6800      	ldr	r0, [r0, #0]
 800b174:	f000 fe54 	bl	800be20 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b178:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b17c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b180:	681a      	ldr	r2, [r3, #0]
 800b182:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b186:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	4413      	add	r3, r2
 800b192:	881b      	ldrh	r3, [r3, #0]
 800b194:	b29b      	uxth	r3, r3
 800b196:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b19a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b19e:	817b      	strh	r3, [r7, #10]
 800b1a0:	897b      	ldrh	r3, [r7, #10]
 800b1a2:	f083 0310 	eor.w	r3, r3, #16
 800b1a6:	817b      	strh	r3, [r7, #10]
 800b1a8:	897b      	ldrh	r3, [r7, #10]
 800b1aa:	f083 0320 	eor.w	r3, r3, #32
 800b1ae:	817b      	strh	r3, [r7, #10]
 800b1b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1b4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	009b      	lsls	r3, r3, #2
 800b1c8:	441a      	add	r2, r3
 800b1ca:	897b      	ldrh	r3, [r7, #10]
 800b1cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	8013      	strh	r3, [r2, #0]
 800b1e0:	f000 bcde 	b.w	800bba0 <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b1e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	7b1b      	ldrb	r3, [r3, #12]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	f040 80bb 	bne.w	800b36c <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b1f6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b1fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	699a      	ldr	r2, [r3, #24]
 800b202:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b206:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	691b      	ldr	r3, [r3, #16]
 800b20e:	429a      	cmp	r2, r3
 800b210:	d917      	bls.n	800b242 <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800b212:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b216:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	691b      	ldr	r3, [r3, #16]
 800b21e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 800b222:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b226:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	699a      	ldr	r2, [r3, #24]
 800b22e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b232:	1ad2      	subs	r2, r2, r3
 800b234:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	619a      	str	r2, [r3, #24]
 800b240:	e00e      	b.n	800b260 <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800b242:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b246:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b24a:	681b      	ldr	r3, [r3, #0]
 800b24c:	699b      	ldr	r3, [r3, #24]
 800b24e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 800b252:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b256:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2200      	movs	r2, #0
 800b25e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b260:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b264:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b26e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b272:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	461a      	mov	r2, r3
 800b280:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b284:	4413      	add	r3, r2
 800b286:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b28a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b28e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	781b      	ldrb	r3, [r3, #0]
 800b296:	00da      	lsls	r2, r3, #3
 800b298:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b29c:	4413      	add	r3, r2
 800b29e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b2a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b2a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2aa:	881b      	ldrh	r3, [r3, #0]
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b2b2:	b29a      	uxth	r2, r3
 800b2b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2b8:	801a      	strh	r2, [r3, #0]
 800b2ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2be:	2b3e      	cmp	r3, #62	; 0x3e
 800b2c0:	d924      	bls.n	800b30c <USB_EPStartXfer+0xec2>
 800b2c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2c6:	095b      	lsrs	r3, r3, #5
 800b2c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b2cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b2d0:	f003 031f 	and.w	r3, r3, #31
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d104      	bne.n	800b2e2 <USB_EPStartXfer+0xe98>
 800b2d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b2dc:	3b01      	subs	r3, #1
 800b2de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b2e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2e6:	881b      	ldrh	r3, [r3, #0]
 800b2e8:	b29a      	uxth	r2, r3
 800b2ea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	029b      	lsls	r3, r3, #10
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	4313      	orrs	r3, r2
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b300:	b29a      	uxth	r2, r3
 800b302:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b306:	801a      	strh	r2, [r3, #0]
 800b308:	f000 bc10 	b.w	800bb2c <USB_EPStartXfer+0x16e2>
 800b30c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b310:	2b00      	cmp	r3, #0
 800b312:	d10c      	bne.n	800b32e <USB_EPStartXfer+0xee4>
 800b314:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b318:	881b      	ldrh	r3, [r3, #0]
 800b31a:	b29b      	uxth	r3, r3
 800b31c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b320:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b324:	b29a      	uxth	r2, r3
 800b326:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b32a:	801a      	strh	r2, [r3, #0]
 800b32c:	e3fe      	b.n	800bb2c <USB_EPStartXfer+0x16e2>
 800b32e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b332:	085b      	lsrs	r3, r3, #1
 800b334:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b338:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b33c:	f003 0301 	and.w	r3, r3, #1
 800b340:	2b00      	cmp	r3, #0
 800b342:	d004      	beq.n	800b34e <USB_EPStartXfer+0xf04>
 800b344:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b348:	3301      	adds	r3, #1
 800b34a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b34e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b352:	881b      	ldrh	r3, [r3, #0]
 800b354:	b29a      	uxth	r2, r3
 800b356:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b35a:	b29b      	uxth	r3, r3
 800b35c:	029b      	lsls	r3, r3, #10
 800b35e:	b29b      	uxth	r3, r3
 800b360:	4313      	orrs	r3, r2
 800b362:	b29a      	uxth	r2, r3
 800b364:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b368:	801a      	strh	r2, [r3, #0]
 800b36a:	e3df      	b.n	800bb2c <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b36c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b370:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	78db      	ldrb	r3, [r3, #3]
 800b378:	2b02      	cmp	r3, #2
 800b37a:	f040 8218 	bne.w	800b7ae <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b37e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b382:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	785b      	ldrb	r3, [r3, #1]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	f040 809d 	bne.w	800b4ca <USB_EPStartXfer+0x1080>
 800b390:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b394:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b39e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b3ac:	b29b      	uxth	r3, r3
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3b4:	4413      	add	r3, r2
 800b3b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b3ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	00da      	lsls	r2, r3, #3
 800b3c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b3cc:	4413      	add	r3, r2
 800b3ce:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b3d2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b3d6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3da:	881b      	ldrh	r3, [r3, #0]
 800b3dc:	b29b      	uxth	r3, r3
 800b3de:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b3e2:	b29a      	uxth	r2, r3
 800b3e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b3e8:	801a      	strh	r2, [r3, #0]
 800b3ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	691b      	ldr	r3, [r3, #16]
 800b3f6:	2b3e      	cmp	r3, #62	; 0x3e
 800b3f8:	d92b      	bls.n	800b452 <USB_EPStartXfer+0x1008>
 800b3fa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b3fe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	691b      	ldr	r3, [r3, #16]
 800b406:	095b      	lsrs	r3, r3, #5
 800b408:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b40c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b410:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	691b      	ldr	r3, [r3, #16]
 800b418:	f003 031f 	and.w	r3, r3, #31
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d104      	bne.n	800b42a <USB_EPStartXfer+0xfe0>
 800b420:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b424:	3b01      	subs	r3, #1
 800b426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b42a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b42e:	881b      	ldrh	r3, [r3, #0]
 800b430:	b29a      	uxth	r2, r3
 800b432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b436:	b29b      	uxth	r3, r3
 800b438:	029b      	lsls	r3, r3, #10
 800b43a:	b29b      	uxth	r3, r3
 800b43c:	4313      	orrs	r3, r2
 800b43e:	b29b      	uxth	r3, r3
 800b440:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b444:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b448:	b29a      	uxth	r2, r3
 800b44a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b44e:	801a      	strh	r2, [r3, #0]
 800b450:	e070      	b.n	800b534 <USB_EPStartXfer+0x10ea>
 800b452:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b456:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d10c      	bne.n	800b47c <USB_EPStartXfer+0x1032>
 800b462:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b466:	881b      	ldrh	r3, [r3, #0]
 800b468:	b29b      	uxth	r3, r3
 800b46a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b46e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b472:	b29a      	uxth	r2, r3
 800b474:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b478:	801a      	strh	r2, [r3, #0]
 800b47a:	e05b      	b.n	800b534 <USB_EPStartXfer+0x10ea>
 800b47c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b480:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	691b      	ldr	r3, [r3, #16]
 800b488:	085b      	lsrs	r3, r3, #1
 800b48a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b48e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b492:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	691b      	ldr	r3, [r3, #16]
 800b49a:	f003 0301 	and.w	r3, r3, #1
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d004      	beq.n	800b4ac <USB_EPStartXfer+0x1062>
 800b4a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b4ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4b0:	881b      	ldrh	r3, [r3, #0]
 800b4b2:	b29a      	uxth	r2, r3
 800b4b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4b8:	b29b      	uxth	r3, r3
 800b4ba:	029b      	lsls	r3, r3, #10
 800b4bc:	b29b      	uxth	r3, r3
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800b4c6:	801a      	strh	r2, [r3, #0]
 800b4c8:	e034      	b.n	800b534 <USB_EPStartXfer+0x10ea>
 800b4ca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ce:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	785b      	ldrb	r3, [r3, #1]
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d12c      	bne.n	800b534 <USB_EPStartXfer+0x10ea>
 800b4da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b4e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b4ec:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4f6:	b29b      	uxth	r3, r3
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b4fe:	4413      	add	r3, r2
 800b500:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b504:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b508:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	781b      	ldrb	r3, [r3, #0]
 800b510:	00da      	lsls	r2, r3, #3
 800b512:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800b516:	4413      	add	r3, r2
 800b518:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b51c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b524:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	691b      	ldr	r3, [r3, #16]
 800b52c:	b29a      	uxth	r2, r3
 800b52e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b532:	801a      	strh	r2, [r3, #0]
 800b534:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b538:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b542:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b546:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	785b      	ldrb	r3, [r3, #1]
 800b54e:	2b00      	cmp	r3, #0
 800b550:	f040 809d 	bne.w	800b68e <USB_EPStartXfer+0x1244>
 800b554:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b558:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b562:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b566:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b570:	b29b      	uxth	r3, r3
 800b572:	461a      	mov	r2, r3
 800b574:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b578:	4413      	add	r3, r2
 800b57a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b57e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b582:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	781b      	ldrb	r3, [r3, #0]
 800b58a:	00da      	lsls	r2, r3, #3
 800b58c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b590:	4413      	add	r3, r2
 800b592:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b596:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b59a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b59e:	881b      	ldrh	r3, [r3, #0]
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b5a6:	b29a      	uxth	r2, r3
 800b5a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5ac:	801a      	strh	r2, [r3, #0]
 800b5ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	691b      	ldr	r3, [r3, #16]
 800b5ba:	2b3e      	cmp	r3, #62	; 0x3e
 800b5bc:	d92b      	bls.n	800b616 <USB_EPStartXfer+0x11cc>
 800b5be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	095b      	lsrs	r3, r3, #5
 800b5cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b5d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b5d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	691b      	ldr	r3, [r3, #16]
 800b5dc:	f003 031f 	and.w	r3, r3, #31
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d104      	bne.n	800b5ee <USB_EPStartXfer+0x11a4>
 800b5e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b5ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b5f2:	881b      	ldrh	r3, [r3, #0]
 800b5f4:	b29a      	uxth	r2, r3
 800b5f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	029b      	lsls	r3, r3, #10
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	4313      	orrs	r3, r2
 800b602:	b29b      	uxth	r3, r3
 800b604:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b608:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b60c:	b29a      	uxth	r2, r3
 800b60e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b612:	801a      	strh	r2, [r3, #0]
 800b614:	e069      	b.n	800b6ea <USB_EPStartXfer+0x12a0>
 800b616:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b61a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	691b      	ldr	r3, [r3, #16]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d10c      	bne.n	800b640 <USB_EPStartXfer+0x11f6>
 800b626:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b62a:	881b      	ldrh	r3, [r3, #0]
 800b62c:	b29b      	uxth	r3, r3
 800b62e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b632:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b636:	b29a      	uxth	r2, r3
 800b638:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b63c:	801a      	strh	r2, [r3, #0]
 800b63e:	e054      	b.n	800b6ea <USB_EPStartXfer+0x12a0>
 800b640:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b644:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	691b      	ldr	r3, [r3, #16]
 800b64c:	085b      	lsrs	r3, r3, #1
 800b64e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b656:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	691b      	ldr	r3, [r3, #16]
 800b65e:	f003 0301 	and.w	r3, r3, #1
 800b662:	2b00      	cmp	r3, #0
 800b664:	d004      	beq.n	800b670 <USB_EPStartXfer+0x1226>
 800b666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b66a:	3301      	adds	r3, #1
 800b66c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b670:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b674:	881b      	ldrh	r3, [r3, #0]
 800b676:	b29a      	uxth	r2, r3
 800b678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	029b      	lsls	r3, r3, #10
 800b680:	b29b      	uxth	r3, r3
 800b682:	4313      	orrs	r3, r2
 800b684:	b29a      	uxth	r2, r3
 800b686:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b68a:	801a      	strh	r2, [r3, #0]
 800b68c:	e02d      	b.n	800b6ea <USB_EPStartXfer+0x12a0>
 800b68e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b692:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	785b      	ldrb	r3, [r3, #1]
 800b69a:	2b01      	cmp	r3, #1
 800b69c:	d125      	bne.n	800b6ea <USB_EPStartXfer+0x12a0>
 800b69e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b6b4:	4413      	add	r3, r2
 800b6b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b6ba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6be:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	00da      	lsls	r2, r3, #3
 800b6c8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b6cc:	4413      	add	r3, r2
 800b6ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800b6d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b6d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	691b      	ldr	r3, [r3, #16]
 800b6e2:	b29a      	uxth	r2, r3
 800b6e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b6e8:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b6ea:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b6ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	69db      	ldr	r3, [r3, #28]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	f000 8218 	beq.w	800bb2c <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b6fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b700:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b704:	681a      	ldr	r2, [r3, #0]
 800b706:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b70a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	009b      	lsls	r3, r3, #2
 800b714:	4413      	add	r3, r2
 800b716:	881b      	ldrh	r3, [r3, #0]
 800b718:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b71c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b720:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b724:	2b00      	cmp	r3, #0
 800b726:	d005      	beq.n	800b734 <USB_EPStartXfer+0x12ea>
 800b728:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b72c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b730:	2b00      	cmp	r3, #0
 800b732:	d10d      	bne.n	800b750 <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b734:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	f040 81f5 	bne.w	800bb2c <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b742:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800b746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	f040 81ee 	bne.w	800bb2c <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800b750:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b754:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b758:	681a      	ldr	r2, [r3, #0]
 800b75a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b75e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	4413      	add	r3, r2
 800b76a:	881b      	ldrh	r3, [r3, #0]
 800b76c:	b29b      	uxth	r3, r3
 800b76e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b776:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 800b77a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b77e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b782:	681a      	ldr	r2, [r3, #0]
 800b784:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b788:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	781b      	ldrb	r3, [r3, #0]
 800b790:	009b      	lsls	r3, r3, #2
 800b792:	441a      	add	r2, r3
 800b794:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800b798:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b79c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b7a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b7a4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b7a8:	b29b      	uxth	r3, r3
 800b7aa:	8013      	strh	r3, [r2, #0]
 800b7ac:	e1be      	b.n	800bb2c <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b7ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	78db      	ldrb	r3, [r3, #3]
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	f040 81b4 	bne.w	800bb28 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b7c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	699a      	ldr	r2, [r3, #24]
 800b7cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7d0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	691b      	ldr	r3, [r3, #16]
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d917      	bls.n	800b80c <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 800b7dc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7e0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	691b      	ldr	r3, [r3, #16]
 800b7e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800b7ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b7f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	699a      	ldr	r2, [r3, #24]
 800b7f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b7fc:	1ad2      	subs	r2, r2, r3
 800b7fe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b802:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	619a      	str	r2, [r3, #24]
 800b80a:	e00e      	b.n	800b82a <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 800b80c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	699b      	ldr	r3, [r3, #24]
 800b818:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800b81c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b820:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	2200      	movs	r2, #0
 800b828:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b82a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b82e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	785b      	ldrb	r3, [r3, #1]
 800b836:	2b00      	cmp	r3, #0
 800b838:	f040 8085 	bne.w	800b946 <USB_EPStartXfer+0x14fc>
 800b83c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b84a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b84e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b858:	b29b      	uxth	r3, r3
 800b85a:	461a      	mov	r2, r3
 800b85c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b860:	4413      	add	r3, r2
 800b862:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b866:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b86a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	00da      	lsls	r2, r3, #3
 800b874:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b878:	4413      	add	r3, r2
 800b87a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b87e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b882:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b886:	881b      	ldrh	r3, [r3, #0]
 800b888:	b29b      	uxth	r3, r3
 800b88a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b88e:	b29a      	uxth	r2, r3
 800b890:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b894:	801a      	strh	r2, [r3, #0]
 800b896:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b89a:	2b3e      	cmp	r3, #62	; 0x3e
 800b89c:	d923      	bls.n	800b8e6 <USB_EPStartXfer+0x149c>
 800b89e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8a2:	095b      	lsrs	r3, r3, #5
 800b8a4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b8a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ac:	f003 031f 	and.w	r3, r3, #31
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d104      	bne.n	800b8be <USB_EPStartXfer+0x1474>
 800b8b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8b8:	3b01      	subs	r3, #1
 800b8ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b8be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b8c2:	881b      	ldrh	r3, [r3, #0]
 800b8c4:	b29a      	uxth	r2, r3
 800b8c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b8ca:	b29b      	uxth	r3, r3
 800b8cc:	029b      	lsls	r3, r3, #10
 800b8ce:	b29b      	uxth	r3, r3
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	b29b      	uxth	r3, r3
 800b8d4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8d8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8dc:	b29a      	uxth	r2, r3
 800b8de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b8e2:	801a      	strh	r2, [r3, #0]
 800b8e4:	e060      	b.n	800b9a8 <USB_EPStartXfer+0x155e>
 800b8e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d10c      	bne.n	800b908 <USB_EPStartXfer+0x14be>
 800b8ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b8f2:	881b      	ldrh	r3, [r3, #0]
 800b8f4:	b29b      	uxth	r3, r3
 800b8f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8fe:	b29a      	uxth	r2, r3
 800b900:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b904:	801a      	strh	r2, [r3, #0]
 800b906:	e04f      	b.n	800b9a8 <USB_EPStartXfer+0x155e>
 800b908:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b90c:	085b      	lsrs	r3, r3, #1
 800b90e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b912:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b916:	f003 0301 	and.w	r3, r3, #1
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d004      	beq.n	800b928 <USB_EPStartXfer+0x14de>
 800b91e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b922:	3301      	adds	r3, #1
 800b924:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b928:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b92c:	881b      	ldrh	r3, [r3, #0]
 800b92e:	b29a      	uxth	r2, r3
 800b930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b934:	b29b      	uxth	r3, r3
 800b936:	029b      	lsls	r3, r3, #10
 800b938:	b29b      	uxth	r3, r3
 800b93a:	4313      	orrs	r3, r2
 800b93c:	b29a      	uxth	r2, r3
 800b93e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b942:	801a      	strh	r2, [r3, #0]
 800b944:	e030      	b.n	800b9a8 <USB_EPStartXfer+0x155e>
 800b946:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b94a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	785b      	ldrb	r3, [r3, #1]
 800b952:	2b01      	cmp	r3, #1
 800b954:	d128      	bne.n	800b9a8 <USB_EPStartXfer+0x155e>
 800b956:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b95a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b964:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b968:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b972:	b29b      	uxth	r3, r3
 800b974:	461a      	mov	r2, r3
 800b976:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b97a:	4413      	add	r3, r2
 800b97c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b980:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b984:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	00da      	lsls	r2, r3, #3
 800b98e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b992:	4413      	add	r3, r2
 800b994:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800b998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b99c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b9a0:	b29a      	uxth	r2, r3
 800b9a2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b9a6:	801a      	strh	r2, [r3, #0]
 800b9a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b9b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	785b      	ldrb	r3, [r3, #1]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f040 8085 	bne.w	800bad2 <USB_EPStartXfer+0x1688>
 800b9c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9cc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b9d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9da:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b9e4:	b29b      	uxth	r3, r3
 800b9e6:	461a      	mov	r2, r3
 800b9e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b9ec:	4413      	add	r3, r2
 800b9ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b9f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800b9f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	781b      	ldrb	r3, [r3, #0]
 800b9fe:	00da      	lsls	r2, r3, #3
 800ba00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ba04:	4413      	add	r3, r2
 800ba06:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800ba0a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba12:	881b      	ldrh	r3, [r3, #0]
 800ba14:	b29b      	uxth	r3, r3
 800ba16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ba1a:	b29a      	uxth	r2, r3
 800ba1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba20:	801a      	strh	r2, [r3, #0]
 800ba22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba26:	2b3e      	cmp	r3, #62	; 0x3e
 800ba28:	d923      	bls.n	800ba72 <USB_EPStartXfer+0x1628>
 800ba2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba2e:	095b      	lsrs	r3, r3, #5
 800ba30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ba34:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba38:	f003 031f 	and.w	r3, r3, #31
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d104      	bne.n	800ba4a <USB_EPStartXfer+0x1600>
 800ba40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba44:	3b01      	subs	r3, #1
 800ba46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ba4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba4e:	881b      	ldrh	r3, [r3, #0]
 800ba50:	b29a      	uxth	r2, r3
 800ba52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	029b      	lsls	r3, r3, #10
 800ba5a:	b29b      	uxth	r3, r3
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	b29b      	uxth	r3, r3
 800ba60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba68:	b29a      	uxth	r2, r3
 800ba6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba6e:	801a      	strh	r2, [r3, #0]
 800ba70:	e05c      	b.n	800bb2c <USB_EPStartXfer+0x16e2>
 800ba72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d10c      	bne.n	800ba94 <USB_EPStartXfer+0x164a>
 800ba7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba7e:	881b      	ldrh	r3, [r3, #0]
 800ba80:	b29b      	uxth	r3, r3
 800ba82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba8a:	b29a      	uxth	r2, r3
 800ba8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ba90:	801a      	strh	r2, [r3, #0]
 800ba92:	e04b      	b.n	800bb2c <USB_EPStartXfer+0x16e2>
 800ba94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ba98:	085b      	lsrs	r3, r3, #1
 800ba9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ba9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800baa2:	f003 0301 	and.w	r3, r3, #1
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d004      	beq.n	800bab4 <USB_EPStartXfer+0x166a>
 800baaa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800baae:	3301      	adds	r3, #1
 800bab0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bab4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bab8:	881b      	ldrh	r3, [r3, #0]
 800baba:	b29a      	uxth	r2, r3
 800babc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	029b      	lsls	r3, r3, #10
 800bac4:	b29b      	uxth	r3, r3
 800bac6:	4313      	orrs	r3, r2
 800bac8:	b29a      	uxth	r2, r3
 800baca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800bace:	801a      	strh	r2, [r3, #0]
 800bad0:	e02c      	b.n	800bb2c <USB_EPStartXfer+0x16e2>
 800bad2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bad6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	785b      	ldrb	r3, [r3, #1]
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d124      	bne.n	800bb2c <USB_EPStartXfer+0x16e2>
 800bae2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bae6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800baf0:	b29b      	uxth	r3, r3
 800baf2:	461a      	mov	r2, r3
 800baf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800baf8:	4413      	add	r3, r2
 800bafa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bafe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	00da      	lsls	r2, r3, #3
 800bb0c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bb10:	4413      	add	r3, r2
 800bb12:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800bb16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bb1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800bb1e:	b29a      	uxth	r2, r3
 800bb20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bb24:	801a      	strh	r2, [r3, #0]
 800bb26:	e001      	b.n	800bb2c <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	e03a      	b.n	800bba2 <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bb2c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb30:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb34:	681a      	ldr	r2, [r3, #0]
 800bb36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	781b      	ldrb	r3, [r3, #0]
 800bb42:	009b      	lsls	r3, r3, #2
 800bb44:	4413      	add	r3, r2
 800bb46:	881b      	ldrh	r3, [r3, #0]
 800bb48:	b29b      	uxth	r3, r3
 800bb4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb52:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bb56:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bb5a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bb5e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bb62:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bb66:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bb6a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800bb6e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb72:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800bb76:	681a      	ldr	r2, [r3, #0]
 800bb78:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800bb7c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	781b      	ldrb	r3, [r3, #0]
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	441a      	add	r2, r3
 800bb88:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bb8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb9c:	b29b      	uxth	r3, r3
 800bb9e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bba0:	2300      	movs	r3, #0
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b085      	sub	sp, #20
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	6078      	str	r0, [r7, #4]
 800bbb4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	785b      	ldrb	r3, [r3, #1]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d020      	beq.n	800bc00 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bbbe:	687a      	ldr	r2, [r7, #4]
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	781b      	ldrb	r3, [r3, #0]
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	4413      	add	r3, r2
 800bbc8:	881b      	ldrh	r3, [r3, #0]
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bbd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbd4:	81bb      	strh	r3, [r7, #12]
 800bbd6:	89bb      	ldrh	r3, [r7, #12]
 800bbd8:	f083 0310 	eor.w	r3, r3, #16
 800bbdc:	81bb      	strh	r3, [r7, #12]
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	441a      	add	r2, r3
 800bbe8:	89bb      	ldrh	r3, [r7, #12]
 800bbea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	8013      	strh	r3, [r2, #0]
 800bbfe:	e01f      	b.n	800bc40 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	781b      	ldrb	r3, [r3, #0]
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	4413      	add	r3, r2
 800bc0a:	881b      	ldrh	r3, [r3, #0]
 800bc0c:	b29b      	uxth	r3, r3
 800bc0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bc12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc16:	81fb      	strh	r3, [r7, #14]
 800bc18:	89fb      	ldrh	r3, [r7, #14]
 800bc1a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bc1e:	81fb      	strh	r3, [r7, #14]
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	441a      	add	r2, r3
 800bc2a:	89fb      	ldrh	r3, [r7, #14]
 800bc2c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc30:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc3c:	b29b      	uxth	r3, r3
 800bc3e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bc40:	2300      	movs	r3, #0
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3714      	adds	r7, #20
 800bc46:	46bd      	mov	sp, r7
 800bc48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4c:	4770      	bx	lr

0800bc4e <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bc4e:	b480      	push	{r7}
 800bc50:	b087      	sub	sp, #28
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
 800bc56:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	7b1b      	ldrb	r3, [r3, #12]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	f040 809d 	bne.w	800bd9c <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	785b      	ldrb	r3, [r3, #1]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d04c      	beq.n	800bd04 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	009b      	lsls	r3, r3, #2
 800bc72:	4413      	add	r3, r2
 800bc74:	881b      	ldrh	r3, [r3, #0]
 800bc76:	823b      	strh	r3, [r7, #16]
 800bc78:	8a3b      	ldrh	r3, [r7, #16]
 800bc7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d01b      	beq.n	800bcba <USB_EPClearStall+0x6c>
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	009b      	lsls	r3, r3, #2
 800bc8a:	4413      	add	r3, r2
 800bc8c:	881b      	ldrh	r3, [r3, #0]
 800bc8e:	b29b      	uxth	r3, r3
 800bc90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc98:	81fb      	strh	r3, [r7, #14]
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	781b      	ldrb	r3, [r3, #0]
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	441a      	add	r2, r3
 800bca4:	89fb      	ldrh	r3, [r7, #14]
 800bca6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bcb2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bcb6:	b29b      	uxth	r3, r3
 800bcb8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	78db      	ldrb	r3, [r3, #3]
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	d06c      	beq.n	800bd9c <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	781b      	ldrb	r3, [r3, #0]
 800bcc8:	009b      	lsls	r3, r3, #2
 800bcca:	4413      	add	r3, r2
 800bccc:	881b      	ldrh	r3, [r3, #0]
 800bcce:	b29b      	uxth	r3, r3
 800bcd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bcd8:	81bb      	strh	r3, [r7, #12]
 800bcda:	89bb      	ldrh	r3, [r7, #12]
 800bcdc:	f083 0320 	eor.w	r3, r3, #32
 800bce0:	81bb      	strh	r3, [r7, #12]
 800bce2:	687a      	ldr	r2, [r7, #4]
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	009b      	lsls	r3, r3, #2
 800bcea:	441a      	add	r2, r3
 800bcec:	89bb      	ldrh	r3, [r7, #12]
 800bcee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bcfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcfe:	b29b      	uxth	r3, r3
 800bd00:	8013      	strh	r3, [r2, #0]
 800bd02:	e04b      	b.n	800bd9c <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	781b      	ldrb	r3, [r3, #0]
 800bd0a:	009b      	lsls	r3, r3, #2
 800bd0c:	4413      	add	r3, r2
 800bd0e:	881b      	ldrh	r3, [r3, #0]
 800bd10:	82fb      	strh	r3, [r7, #22]
 800bd12:	8afb      	ldrh	r3, [r7, #22]
 800bd14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d01b      	beq.n	800bd54 <USB_EPClearStall+0x106>
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	4413      	add	r3, r2
 800bd26:	881b      	ldrh	r3, [r3, #0]
 800bd28:	b29b      	uxth	r3, r3
 800bd2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bd2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd32:	82bb      	strh	r3, [r7, #20]
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	009b      	lsls	r3, r3, #2
 800bd3c:	441a      	add	r2, r3
 800bd3e:	8abb      	ldrh	r3, [r7, #20]
 800bd40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd48:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bd4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	009b      	lsls	r3, r3, #2
 800bd5c:	4413      	add	r3, r2
 800bd5e:	881b      	ldrh	r3, [r3, #0]
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd6a:	827b      	strh	r3, [r7, #18]
 800bd6c:	8a7b      	ldrh	r3, [r7, #18]
 800bd6e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bd72:	827b      	strh	r3, [r7, #18]
 800bd74:	8a7b      	ldrh	r3, [r7, #18]
 800bd76:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bd7a:	827b      	strh	r3, [r7, #18]
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	009b      	lsls	r3, r3, #2
 800bd84:	441a      	add	r2, r3
 800bd86:	8a7b      	ldrh	r3, [r7, #18]
 800bd88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd98:	b29b      	uxth	r3, r3
 800bd9a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bd9c:	2300      	movs	r3, #0
}
 800bd9e:	4618      	mov	r0, r3
 800bda0:	371c      	adds	r7, #28
 800bda2:	46bd      	mov	sp, r7
 800bda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda8:	4770      	bx	lr

0800bdaa <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800bdaa:	b480      	push	{r7}
 800bdac:	b083      	sub	sp, #12
 800bdae:	af00      	add	r7, sp, #0
 800bdb0:	6078      	str	r0, [r7, #4]
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800bdb6:	78fb      	ldrb	r3, [r7, #3]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d103      	bne.n	800bdc4 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2280      	movs	r2, #128	; 0x80
 800bdc0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800bdc4:	2300      	movs	r3, #0
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	370c      	adds	r7, #12
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr

0800bdd2 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800bdd2:	b480      	push	{r7}
 800bdd4:	b083      	sub	sp, #12
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800bde0:	b29b      	uxth	r3, r3
 800bde2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bde6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bdea:	b29a      	uxth	r2, r3
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 800bdf2:	2300      	movs	r3, #0
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	370c      	adds	r7, #12
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdfe:	4770      	bx	lr

0800be00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800be00:	b480      	push	{r7}
 800be02:	b085      	sub	sp, #20
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800be0e:	b29b      	uxth	r3, r3
 800be10:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800be12:	68fb      	ldr	r3, [r7, #12]
}
 800be14:	4618      	mov	r0, r3
 800be16:	3714      	adds	r7, #20
 800be18:	46bd      	mov	sp, r7
 800be1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1e:	4770      	bx	lr

0800be20 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800be20:	b480      	push	{r7}
 800be22:	b08b      	sub	sp, #44	; 0x2c
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	4611      	mov	r1, r2
 800be2c:	461a      	mov	r2, r3
 800be2e:	460b      	mov	r3, r1
 800be30:	80fb      	strh	r3, [r7, #6]
 800be32:	4613      	mov	r3, r2
 800be34:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800be36:	88bb      	ldrh	r3, [r7, #4]
 800be38:	3301      	adds	r3, #1
 800be3a:	085b      	lsrs	r3, r3, #1
 800be3c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800be46:	88fa      	ldrh	r2, [r7, #6]
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	4413      	add	r3, r2
 800be4c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be50:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800be52:	69bb      	ldr	r3, [r7, #24]
 800be54:	627b      	str	r3, [r7, #36]	; 0x24
 800be56:	e01b      	b.n	800be90 <USB_WritePMA+0x70>
  {
    WrVal = pBuf[0];
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	781b      	ldrb	r3, [r3, #0]
 800be5c:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	3301      	adds	r3, #1
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	021b      	lsls	r3, r3, #8
 800be66:	b21a      	sxth	r2, r3
 800be68:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800be6c:	4313      	orrs	r3, r2
 800be6e:	b21b      	sxth	r3, r3
 800be70:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 800be72:	6a3b      	ldr	r3, [r7, #32]
 800be74:	8a7a      	ldrh	r2, [r7, #18]
 800be76:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800be78:	6a3b      	ldr	r3, [r7, #32]
 800be7a:	3302      	adds	r3, #2
 800be7c:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	3301      	adds	r3, #1
 800be82:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800be84:	69fb      	ldr	r3, [r7, #28]
 800be86:	3301      	adds	r3, #1
 800be88:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800be8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be8c:	3b01      	subs	r3, #1
 800be8e:	627b      	str	r3, [r7, #36]	; 0x24
 800be90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be92:	2b00      	cmp	r3, #0
 800be94:	d1e0      	bne.n	800be58 <USB_WritePMA+0x38>
  }
}
 800be96:	bf00      	nop
 800be98:	bf00      	nop
 800be9a:	372c      	adds	r7, #44	; 0x2c
 800be9c:	46bd      	mov	sp, r7
 800be9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea2:	4770      	bx	lr

0800bea4 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b08b      	sub	sp, #44	; 0x2c
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	4611      	mov	r1, r2
 800beb0:	461a      	mov	r2, r3
 800beb2:	460b      	mov	r3, r1
 800beb4:	80fb      	strh	r3, [r7, #6]
 800beb6:	4613      	mov	r3, r2
 800beb8:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800beba:	88bb      	ldrh	r3, [r7, #4]
 800bebc:	085b      	lsrs	r3, r3, #1
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bec2:	68fb      	ldr	r3, [r7, #12]
 800bec4:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bec6:	68bb      	ldr	r3, [r7, #8]
 800bec8:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800beca:	88fa      	ldrh	r2, [r7, #6]
 800becc:	697b      	ldr	r3, [r7, #20]
 800bece:	4413      	add	r3, r2
 800bed0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bed4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800bed6:	69bb      	ldr	r3, [r7, #24]
 800bed8:	627b      	str	r3, [r7, #36]	; 0x24
 800beda:	e018      	b.n	800bf0e <USB_ReadPMA+0x6a>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800bedc:	6a3b      	ldr	r3, [r7, #32]
 800bede:	881b      	ldrh	r3, [r3, #0]
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800bee4:	6a3b      	ldr	r3, [r7, #32]
 800bee6:	3302      	adds	r3, #2
 800bee8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800beea:	693b      	ldr	r3, [r7, #16]
 800beec:	b2da      	uxtb	r2, r3
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bef2:	69fb      	ldr	r3, [r7, #28]
 800bef4:	3301      	adds	r3, #1
 800bef6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	0a1b      	lsrs	r3, r3, #8
 800befc:	b2da      	uxtb	r2, r3
 800befe:	69fb      	ldr	r3, [r7, #28]
 800bf00:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800bf02:	69fb      	ldr	r3, [r7, #28]
 800bf04:	3301      	adds	r3, #1
 800bf06:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800bf08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	627b      	str	r3, [r7, #36]	; 0x24
 800bf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d1e3      	bne.n	800bedc <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800bf14:	88bb      	ldrh	r3, [r7, #4]
 800bf16:	f003 0301 	and.w	r3, r3, #1
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d007      	beq.n	800bf30 <USB_ReadPMA+0x8c>
  {
    RdVal = *pdwVal;
 800bf20:	6a3b      	ldr	r3, [r7, #32]
 800bf22:	881b      	ldrh	r3, [r3, #0]
 800bf24:	b29b      	uxth	r3, r3
 800bf26:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800bf28:	693b      	ldr	r3, [r7, #16]
 800bf2a:	b2da      	uxtb	r2, r3
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	701a      	strb	r2, [r3, #0]
  }
}
 800bf30:	bf00      	nop
 800bf32:	372c      	adds	r7, #44	; 0x2c
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	460b      	mov	r3, r1
 800bf46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bf48:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bf4c:	f002 f920 	bl	800e190 <USBD_static_malloc>
 800bf50:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d105      	bne.n	800bf64 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bf60:	2302      	movs	r3, #2
 800bf62:	e066      	b.n	800c032 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	68fa      	ldr	r2, [r7, #12]
 800bf68:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	7c1b      	ldrb	r3, [r3, #16]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d119      	bne.n	800bfa8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bf74:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf78:	2202      	movs	r2, #2
 800bf7a:	2181      	movs	r1, #129	; 0x81
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f001 ffae 	bl	800dede <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	2201      	movs	r2, #1
 800bf86:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bf88:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf8c:	2202      	movs	r2, #2
 800bf8e:	2101      	movs	r1, #1
 800bf90:	6878      	ldr	r0, [r7, #4]
 800bf92:	f001 ffa4 	bl	800dede <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	2201      	movs	r2, #1
 800bf9a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2210      	movs	r2, #16
 800bfa2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bfa6:	e016      	b.n	800bfd6 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bfa8:	2340      	movs	r3, #64	; 0x40
 800bfaa:	2202      	movs	r2, #2
 800bfac:	2181      	movs	r1, #129	; 0x81
 800bfae:	6878      	ldr	r0, [r7, #4]
 800bfb0:	f001 ff95 	bl	800dede <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bfba:	2340      	movs	r3, #64	; 0x40
 800bfbc:	2202      	movs	r2, #2
 800bfbe:	2101      	movs	r1, #1
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f001 ff8c 	bl	800dede <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2201      	movs	r2, #1
 800bfca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	2210      	movs	r2, #16
 800bfd2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bfd6:	2308      	movs	r3, #8
 800bfd8:	2203      	movs	r2, #3
 800bfda:	2182      	movs	r1, #130	; 0x82
 800bfdc:	6878      	ldr	r0, [r7, #4]
 800bfde:	f001 ff7e 	bl	800dede <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	2201      	movs	r2, #1
 800bfe6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	2200      	movs	r2, #0
 800bff8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	2200      	movs	r2, #0
 800c000:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	7c1b      	ldrb	r3, [r3, #16]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d109      	bne.n	800c020 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c012:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c016:	2101      	movs	r1, #1
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f002 f84f 	bl	800e0bc <USBD_LL_PrepareReceive>
 800c01e:	e007      	b.n	800c030 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c026:	2340      	movs	r3, #64	; 0x40
 800c028:	2101      	movs	r1, #1
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f002 f846 	bl	800e0bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c030:	2300      	movs	r3, #0
}
 800c032:	4618      	mov	r0, r3
 800c034:	3710      	adds	r7, #16
 800c036:	46bd      	mov	sp, r7
 800c038:	bd80      	pop	{r7, pc}

0800c03a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c03a:	b580      	push	{r7, lr}
 800c03c:	b082      	sub	sp, #8
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
 800c042:	460b      	mov	r3, r1
 800c044:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c046:	2181      	movs	r1, #129	; 0x81
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f001 ff6e 	bl	800df2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2200      	movs	r2, #0
 800c052:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c054:	2101      	movs	r1, #1
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f001 ff67 	bl	800df2a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2200      	movs	r2, #0
 800c060:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c064:	2182      	movs	r1, #130	; 0x82
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f001 ff5f 	bl	800df2a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2200      	movs	r2, #0
 800c070:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2200      	movs	r2, #0
 800c078:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c082:	2b00      	cmp	r3, #0
 800c084:	d00e      	beq.n	800c0a4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c096:	4618      	mov	r0, r3
 800c098:	f002 f888 	bl	800e1ac <USBD_static_free>
    pdev->pClassData = NULL;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c0a4:	2300      	movs	r3, #0
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3708      	adds	r7, #8
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
	...

0800c0b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b086      	sub	sp, #24
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
 800c0b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c0c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c0c6:	2300      	movs	r3, #0
 800c0c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0ca:	2300      	movs	r3, #0
 800c0cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c0ce:	693b      	ldr	r3, [r7, #16]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d101      	bne.n	800c0d8 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800c0d4:	2303      	movs	r3, #3
 800c0d6:	e0af      	b.n	800c238 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0d8:	683b      	ldr	r3, [r7, #0]
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d03f      	beq.n	800c164 <USBD_CDC_Setup+0xb4>
 800c0e4:	2b20      	cmp	r3, #32
 800c0e6:	f040 809f 	bne.w	800c228 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	88db      	ldrh	r3, [r3, #6]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d02e      	beq.n	800c150 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	781b      	ldrb	r3, [r3, #0]
 800c0f6:	b25b      	sxtb	r3, r3
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	da16      	bge.n	800c12a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c102:	689b      	ldr	r3, [r3, #8]
 800c104:	683a      	ldr	r2, [r7, #0]
 800c106:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800c108:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c10a:	683a      	ldr	r2, [r7, #0]
 800c10c:	88d2      	ldrh	r2, [r2, #6]
 800c10e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	88db      	ldrh	r3, [r3, #6]
 800c114:	2b07      	cmp	r3, #7
 800c116:	bf28      	it	cs
 800c118:	2307      	movcs	r3, #7
 800c11a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c11c:	693b      	ldr	r3, [r7, #16]
 800c11e:	89fa      	ldrh	r2, [r7, #14]
 800c120:	4619      	mov	r1, r3
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f001 facf 	bl	800d6c6 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800c128:	e085      	b.n	800c236 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	785a      	ldrb	r2, [r3, #1]
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	88db      	ldrh	r3, [r3, #6]
 800c138:	b2da      	uxtb	r2, r3
 800c13a:	693b      	ldr	r3, [r7, #16]
 800c13c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800c140:	6939      	ldr	r1, [r7, #16]
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	88db      	ldrh	r3, [r3, #6]
 800c146:	461a      	mov	r2, r3
 800c148:	6878      	ldr	r0, [r7, #4]
 800c14a:	f001 fae8 	bl	800d71e <USBD_CtlPrepareRx>
      break;
 800c14e:	e072      	b.n	800c236 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c156:	689b      	ldr	r3, [r3, #8]
 800c158:	683a      	ldr	r2, [r7, #0]
 800c15a:	7850      	ldrb	r0, [r2, #1]
 800c15c:	2200      	movs	r2, #0
 800c15e:	6839      	ldr	r1, [r7, #0]
 800c160:	4798      	blx	r3
      break;
 800c162:	e068      	b.n	800c236 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	785b      	ldrb	r3, [r3, #1]
 800c168:	2b0b      	cmp	r3, #11
 800c16a:	d852      	bhi.n	800c212 <USBD_CDC_Setup+0x162>
 800c16c:	a201      	add	r2, pc, #4	; (adr r2, 800c174 <USBD_CDC_Setup+0xc4>)
 800c16e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c172:	bf00      	nop
 800c174:	0800c1a5 	.word	0x0800c1a5
 800c178:	0800c221 	.word	0x0800c221
 800c17c:	0800c213 	.word	0x0800c213
 800c180:	0800c213 	.word	0x0800c213
 800c184:	0800c213 	.word	0x0800c213
 800c188:	0800c213 	.word	0x0800c213
 800c18c:	0800c213 	.word	0x0800c213
 800c190:	0800c213 	.word	0x0800c213
 800c194:	0800c213 	.word	0x0800c213
 800c198:	0800c213 	.word	0x0800c213
 800c19c:	0800c1cf 	.word	0x0800c1cf
 800c1a0:	0800c1f9 	.word	0x0800c1f9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1aa:	b2db      	uxtb	r3, r3
 800c1ac:	2b03      	cmp	r3, #3
 800c1ae:	d107      	bne.n	800c1c0 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c1b0:	f107 030a 	add.w	r3, r7, #10
 800c1b4:	2202      	movs	r2, #2
 800c1b6:	4619      	mov	r1, r3
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f001 fa84 	bl	800d6c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c1be:	e032      	b.n	800c226 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c1c0:	6839      	ldr	r1, [r7, #0]
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f001 fa0e 	bl	800d5e4 <USBD_CtlError>
            ret = USBD_FAIL;
 800c1c8:	2303      	movs	r3, #3
 800c1ca:	75fb      	strb	r3, [r7, #23]
          break;
 800c1cc:	e02b      	b.n	800c226 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1d4:	b2db      	uxtb	r3, r3
 800c1d6:	2b03      	cmp	r3, #3
 800c1d8:	d107      	bne.n	800c1ea <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c1da:	f107 030d 	add.w	r3, r7, #13
 800c1de:	2201      	movs	r2, #1
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f001 fa6f 	bl	800d6c6 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c1e8:	e01d      	b.n	800c226 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800c1ea:	6839      	ldr	r1, [r7, #0]
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f001 f9f9 	bl	800d5e4 <USBD_CtlError>
            ret = USBD_FAIL;
 800c1f2:	2303      	movs	r3, #3
 800c1f4:	75fb      	strb	r3, [r7, #23]
          break;
 800c1f6:	e016      	b.n	800c226 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1fe:	b2db      	uxtb	r3, r3
 800c200:	2b03      	cmp	r3, #3
 800c202:	d00f      	beq.n	800c224 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800c204:	6839      	ldr	r1, [r7, #0]
 800c206:	6878      	ldr	r0, [r7, #4]
 800c208:	f001 f9ec 	bl	800d5e4 <USBD_CtlError>
            ret = USBD_FAIL;
 800c20c:	2303      	movs	r3, #3
 800c20e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c210:	e008      	b.n	800c224 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c212:	6839      	ldr	r1, [r7, #0]
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f001 f9e5 	bl	800d5e4 <USBD_CtlError>
          ret = USBD_FAIL;
 800c21a:	2303      	movs	r3, #3
 800c21c:	75fb      	strb	r3, [r7, #23]
          break;
 800c21e:	e002      	b.n	800c226 <USBD_CDC_Setup+0x176>
          break;
 800c220:	bf00      	nop
 800c222:	e008      	b.n	800c236 <USBD_CDC_Setup+0x186>
          break;
 800c224:	bf00      	nop
      }
      break;
 800c226:	e006      	b.n	800c236 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800c228:	6839      	ldr	r1, [r7, #0]
 800c22a:	6878      	ldr	r0, [r7, #4]
 800c22c:	f001 f9da 	bl	800d5e4 <USBD_CtlError>
      ret = USBD_FAIL;
 800c230:	2303      	movs	r3, #3
 800c232:	75fb      	strb	r3, [r7, #23]
      break;
 800c234:	bf00      	nop
  }

  return (uint8_t)ret;
 800c236:	7dfb      	ldrb	r3, [r7, #23]
}
 800c238:	4618      	mov	r0, r3
 800c23a:	3718      	adds	r7, #24
 800c23c:	46bd      	mov	sp, r7
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	460b      	mov	r3, r1
 800c24a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800c252:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d101      	bne.n	800c262 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c25e:	2303      	movs	r3, #3
 800c260:	e04f      	b.n	800c302 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c268:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c26a:	78fa      	ldrb	r2, [r7, #3]
 800c26c:	6879      	ldr	r1, [r7, #4]
 800c26e:	4613      	mov	r3, r2
 800c270:	009b      	lsls	r3, r3, #2
 800c272:	4413      	add	r3, r2
 800c274:	009b      	lsls	r3, r3, #2
 800c276:	440b      	add	r3, r1
 800c278:	3318      	adds	r3, #24
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d029      	beq.n	800c2d4 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c280:	78fa      	ldrb	r2, [r7, #3]
 800c282:	6879      	ldr	r1, [r7, #4]
 800c284:	4613      	mov	r3, r2
 800c286:	009b      	lsls	r3, r3, #2
 800c288:	4413      	add	r3, r2
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	440b      	add	r3, r1
 800c28e:	3318      	adds	r3, #24
 800c290:	681a      	ldr	r2, [r3, #0]
 800c292:	78f9      	ldrb	r1, [r7, #3]
 800c294:	68f8      	ldr	r0, [r7, #12]
 800c296:	460b      	mov	r3, r1
 800c298:	009b      	lsls	r3, r3, #2
 800c29a:	440b      	add	r3, r1
 800c29c:	00db      	lsls	r3, r3, #3
 800c29e:	4403      	add	r3, r0
 800c2a0:	3320      	adds	r3, #32
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	fbb2 f1f3 	udiv	r1, r2, r3
 800c2a8:	fb01 f303 	mul.w	r3, r1, r3
 800c2ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d110      	bne.n	800c2d4 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800c2b2:	78fa      	ldrb	r2, [r7, #3]
 800c2b4:	6879      	ldr	r1, [r7, #4]
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	009b      	lsls	r3, r3, #2
 800c2ba:	4413      	add	r3, r2
 800c2bc:	009b      	lsls	r3, r3, #2
 800c2be:	440b      	add	r3, r1
 800c2c0:	3318      	adds	r3, #24
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c2c6:	78f9      	ldrb	r1, [r7, #3]
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	2200      	movs	r2, #0
 800c2cc:	6878      	ldr	r0, [r7, #4]
 800c2ce:	f001 fed4 	bl	800e07a <USBD_LL_Transmit>
 800c2d2:	e015      	b.n	800c300 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2e2:	691b      	ldr	r3, [r3, #16]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d00b      	beq.n	800c300 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c2ee:	691b      	ldr	r3, [r3, #16]
 800c2f0:	68ba      	ldr	r2, [r7, #8]
 800c2f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c2f6:	68ba      	ldr	r2, [r7, #8]
 800c2f8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c2fc:	78fa      	ldrb	r2, [r7, #3]
 800c2fe:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}

0800c30a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c30a:	b580      	push	{r7, lr}
 800c30c:	b084      	sub	sp, #16
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
 800c312:	460b      	mov	r3, r1
 800c314:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c31c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c324:	2b00      	cmp	r3, #0
 800c326:	d101      	bne.n	800c32c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c328:	2303      	movs	r3, #3
 800c32a:	e015      	b.n	800c358 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c32c:	78fb      	ldrb	r3, [r7, #3]
 800c32e:	4619      	mov	r1, r3
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f001 fee4 	bl	800e0fe <USBD_LL_GetRxDataSize>
 800c336:	4602      	mov	r2, r0
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c344:	68db      	ldr	r3, [r3, #12]
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c34c:	68fa      	ldr	r2, [r7, #12]
 800c34e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c352:	4611      	mov	r1, r2
 800c354:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c356:	2300      	movs	r3, #0
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3710      	adds	r7, #16
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}

0800c360 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b084      	sub	sp, #16
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c36e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d101      	bne.n	800c37a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c376:	2303      	movs	r3, #3
 800c378:	e01b      	b.n	800c3b2 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d015      	beq.n	800c3b0 <USBD_CDC_EP0_RxReady+0x50>
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c38a:	2bff      	cmp	r3, #255	; 0xff
 800c38c:	d010      	beq.n	800c3b0 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c394:	689b      	ldr	r3, [r3, #8]
 800c396:	68fa      	ldr	r2, [r7, #12]
 800c398:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c39c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c39e:	68fa      	ldr	r2, [r7, #12]
 800c3a0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c3a4:	b292      	uxth	r2, r2
 800c3a6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	22ff      	movs	r2, #255	; 0xff
 800c3ac:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c3b0:	2300      	movs	r3, #0
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
	...

0800c3bc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b083      	sub	sp, #12
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2243      	movs	r2, #67	; 0x43
 800c3c8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c3ca:	4b03      	ldr	r3, [pc, #12]	; (800c3d8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	370c      	adds	r7, #12
 800c3d0:	46bd      	mov	sp, r7
 800c3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d6:	4770      	bx	lr
 800c3d8:	200000a4 	.word	0x200000a4

0800c3dc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c3dc:	b480      	push	{r7}
 800c3de:	b083      	sub	sp, #12
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2243      	movs	r2, #67	; 0x43
 800c3e8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c3ea:	4b03      	ldr	r3, [pc, #12]	; (800c3f8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	370c      	adds	r7, #12
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr
 800c3f8:	20000060 	.word	0x20000060

0800c3fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c3fc:	b480      	push	{r7}
 800c3fe:	b083      	sub	sp, #12
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2243      	movs	r2, #67	; 0x43
 800c408:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c40a:	4b03      	ldr	r3, [pc, #12]	; (800c418 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	370c      	adds	r7, #12
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr
 800c418:	200000e8 	.word	0x200000e8

0800c41c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	220a      	movs	r2, #10
 800c428:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c42a:	4b03      	ldr	r3, [pc, #12]	; (800c438 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c42c:	4618      	mov	r0, r3
 800c42e:	370c      	adds	r7, #12
 800c430:	46bd      	mov	sp, r7
 800c432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c436:	4770      	bx	lr
 800c438:	2000001c 	.word	0x2000001c

0800c43c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c43c:	b480      	push	{r7}
 800c43e:	b083      	sub	sp, #12
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d101      	bne.n	800c450 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c44c:	2303      	movs	r3, #3
 800c44e:	e004      	b.n	800c45a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	683a      	ldr	r2, [r7, #0]
 800c454:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c458:	2300      	movs	r3, #0
}
 800c45a:	4618      	mov	r0, r3
 800c45c:	370c      	adds	r7, #12
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr

0800c466 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c466:	b480      	push	{r7}
 800c468:	b087      	sub	sp, #28
 800c46a:	af00      	add	r7, sp, #0
 800c46c:	60f8      	str	r0, [r7, #12]
 800c46e:	60b9      	str	r1, [r7, #8]
 800c470:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c478:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c47a:	697b      	ldr	r3, [r7, #20]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d101      	bne.n	800c484 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c480:	2303      	movs	r3, #3
 800c482:	e008      	b.n	800c496 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	68ba      	ldr	r2, [r7, #8]
 800c488:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	687a      	ldr	r2, [r7, #4]
 800c490:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c494:	2300      	movs	r3, #0
}
 800c496:	4618      	mov	r0, r3
 800c498:	371c      	adds	r7, #28
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr

0800c4a2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c4a2:	b480      	push	{r7}
 800c4a4:	b085      	sub	sp, #20
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
 800c4aa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c4b2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d101      	bne.n	800c4be <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c4ba:	2303      	movs	r3, #3
 800c4bc:	e004      	b.n	800c4c8 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	683a      	ldr	r2, [r7, #0]
 800c4c2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c4c6:	2300      	movs	r3, #0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3714      	adds	r7, #20
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr

0800c4d4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c4e2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c4e4:	2301      	movs	r3, #1
 800c4e6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d101      	bne.n	800c4f6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c4f2:	2303      	movs	r3, #3
 800c4f4:	e01a      	b.n	800c52c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d114      	bne.n	800c52a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	2201      	movs	r2, #1
 800c504:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c51e:	2181      	movs	r1, #129	; 0x81
 800c520:	6878      	ldr	r0, [r7, #4]
 800c522:	f001 fdaa 	bl	800e07a <USBD_LL_Transmit>

    ret = USBD_OK;
 800c526:	2300      	movs	r3, #0
 800c528:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c52a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c542:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d101      	bne.n	800c552 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c54e:	2303      	movs	r3, #3
 800c550:	e016      	b.n	800c580 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	7c1b      	ldrb	r3, [r3, #16]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d109      	bne.n	800c56e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c560:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c564:	2101      	movs	r1, #1
 800c566:	6878      	ldr	r0, [r7, #4]
 800c568:	f001 fda8 	bl	800e0bc <USBD_LL_PrepareReceive>
 800c56c:	e007      	b.n	800c57e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c574:	2340      	movs	r3, #64	; 0x40
 800c576:	2101      	movs	r1, #1
 800c578:	6878      	ldr	r0, [r7, #4]
 800c57a:	f001 fd9f 	bl	800e0bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c57e:	2300      	movs	r3, #0
}
 800c580:	4618      	mov	r0, r3
 800c582:	3710      	adds	r7, #16
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b086      	sub	sp, #24
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	60f8      	str	r0, [r7, #12]
 800c590:	60b9      	str	r1, [r7, #8]
 800c592:	4613      	mov	r3, r2
 800c594:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d101      	bne.n	800c5a0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c59c:	2303      	movs	r3, #3
 800c59e:	e01f      	b.n	800c5e0 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d003      	beq.n	800c5c6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	68ba      	ldr	r2, [r7, #8]
 800c5c2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	79fa      	ldrb	r2, [r7, #7]
 800c5d2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c5d4:	68f8      	ldr	r0, [r7, #12]
 800c5d6:	f001 fc07 	bl	800dde8 <USBD_LL_Init>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c5de:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3718      	adds	r7, #24
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}

0800c5e8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b084      	sub	sp, #16
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	6078      	str	r0, [r7, #4]
 800c5f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d101      	bne.n	800c600 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c5fc:	2303      	movs	r3, #3
 800c5fe:	e016      	b.n	800c62e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	683a      	ldr	r2, [r7, #0]
 800c604:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c60e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00b      	beq.n	800c62c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c61c:	f107 020e 	add.w	r2, r7, #14
 800c620:	4610      	mov	r0, r2
 800c622:	4798      	blx	r3
 800c624:	4602      	mov	r2, r0
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c62c:	2300      	movs	r3, #0
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3710      	adds	r7, #16
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}

0800c636 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c636:	b580      	push	{r7, lr}
 800c638:	b082      	sub	sp, #8
 800c63a:	af00      	add	r7, sp, #0
 800c63c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f001 fc32 	bl	800dea8 <USBD_LL_Start>
 800c644:	4603      	mov	r3, r0
}
 800c646:	4618      	mov	r0, r3
 800c648:	3708      	adds	r7, #8
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c64e:	b480      	push	{r7}
 800c650:	b083      	sub	sp, #12
 800c652:	af00      	add	r7, sp, #0
 800c654:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c656:	2300      	movs	r3, #0
}
 800c658:	4618      	mov	r0, r3
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b084      	sub	sp, #16
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
 800c66c:	460b      	mov	r3, r1
 800c66e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c670:	2303      	movs	r3, #3
 800c672:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d009      	beq.n	800c692 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	78fa      	ldrb	r2, [r7, #3]
 800c688:	4611      	mov	r1, r2
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	4798      	blx	r3
 800c68e:	4603      	mov	r3, r0
 800c690:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c692:	7bfb      	ldrb	r3, [r7, #15]
}
 800c694:	4618      	mov	r0, r3
 800c696:	3710      	adds	r7, #16
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
 800c6a4:	460b      	mov	r3, r1
 800c6a6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d007      	beq.n	800c6c2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6b8:	685b      	ldr	r3, [r3, #4]
 800c6ba:	78fa      	ldrb	r2, [r7, #3]
 800c6bc:	4611      	mov	r1, r2
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	4798      	blx	r3
  }

  return USBD_OK;
 800c6c2:	2300      	movs	r3, #0
}
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	3708      	adds	r7, #8
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b084      	sub	sp, #16
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
 800c6d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c6dc:	6839      	ldr	r1, [r7, #0]
 800c6de:	4618      	mov	r0, r3
 800c6e0:	f000 ff46 	bl	800d570 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c6f2:	461a      	mov	r2, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c700:	f003 031f 	and.w	r3, r3, #31
 800c704:	2b02      	cmp	r3, #2
 800c706:	d01a      	beq.n	800c73e <USBD_LL_SetupStage+0x72>
 800c708:	2b02      	cmp	r3, #2
 800c70a:	d822      	bhi.n	800c752 <USBD_LL_SetupStage+0x86>
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d002      	beq.n	800c716 <USBD_LL_SetupStage+0x4a>
 800c710:	2b01      	cmp	r3, #1
 800c712:	d00a      	beq.n	800c72a <USBD_LL_SetupStage+0x5e>
 800c714:	e01d      	b.n	800c752 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c71c:	4619      	mov	r1, r3
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 f9ee 	bl	800cb00 <USBD_StdDevReq>
 800c724:	4603      	mov	r3, r0
 800c726:	73fb      	strb	r3, [r7, #15]
      break;
 800c728:	e020      	b.n	800c76c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c730:	4619      	mov	r1, r3
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f000 fa52 	bl	800cbdc <USBD_StdItfReq>
 800c738:	4603      	mov	r3, r0
 800c73a:	73fb      	strb	r3, [r7, #15]
      break;
 800c73c:	e016      	b.n	800c76c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c744:	4619      	mov	r1, r3
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f000 fa91 	bl	800cc6e <USBD_StdEPReq>
 800c74c:	4603      	mov	r3, r0
 800c74e:	73fb      	strb	r3, [r7, #15]
      break;
 800c750:	e00c      	b.n	800c76c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c758:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c75c:	b2db      	uxtb	r3, r3
 800c75e:	4619      	mov	r1, r3
 800c760:	6878      	ldr	r0, [r7, #4]
 800c762:	f001 fc01 	bl	800df68 <USBD_LL_StallEP>
 800c766:	4603      	mov	r3, r0
 800c768:	73fb      	strb	r3, [r7, #15]
      break;
 800c76a:	bf00      	nop
  }

  return ret;
 800c76c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3710      	adds	r7, #16
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}

0800c776 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c776:	b580      	push	{r7, lr}
 800c778:	b086      	sub	sp, #24
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	60f8      	str	r0, [r7, #12]
 800c77e:	460b      	mov	r3, r1
 800c780:	607a      	str	r2, [r7, #4]
 800c782:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c784:	7afb      	ldrb	r3, [r7, #11]
 800c786:	2b00      	cmp	r3, #0
 800c788:	d138      	bne.n	800c7fc <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c790:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c798:	2b03      	cmp	r3, #3
 800c79a:	d14a      	bne.n	800c832 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c79c:	693b      	ldr	r3, [r7, #16]
 800c79e:	689a      	ldr	r2, [r3, #8]
 800c7a0:	693b      	ldr	r3, [r7, #16]
 800c7a2:	68db      	ldr	r3, [r3, #12]
 800c7a4:	429a      	cmp	r2, r3
 800c7a6:	d913      	bls.n	800c7d0 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	689a      	ldr	r2, [r3, #8]
 800c7ac:	693b      	ldr	r3, [r7, #16]
 800c7ae:	68db      	ldr	r3, [r3, #12]
 800c7b0:	1ad2      	subs	r2, r2, r3
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c7b6:	693b      	ldr	r3, [r7, #16]
 800c7b8:	68da      	ldr	r2, [r3, #12]
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	689b      	ldr	r3, [r3, #8]
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	bf28      	it	cs
 800c7c2:	4613      	movcs	r3, r2
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	6879      	ldr	r1, [r7, #4]
 800c7c8:	68f8      	ldr	r0, [r7, #12]
 800c7ca:	f000 ffc5 	bl	800d758 <USBD_CtlContinueRx>
 800c7ce:	e030      	b.n	800c832 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	2b03      	cmp	r3, #3
 800c7da:	d10b      	bne.n	800c7f4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7e2:	691b      	ldr	r3, [r3, #16]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d005      	beq.n	800c7f4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7ee:	691b      	ldr	r3, [r3, #16]
 800c7f0:	68f8      	ldr	r0, [r7, #12]
 800c7f2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c7f4:	68f8      	ldr	r0, [r7, #12]
 800c7f6:	f000 ffc0 	bl	800d77a <USBD_CtlSendStatus>
 800c7fa:	e01a      	b.n	800c832 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c802:	b2db      	uxtb	r3, r3
 800c804:	2b03      	cmp	r3, #3
 800c806:	d114      	bne.n	800c832 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c80e:	699b      	ldr	r3, [r3, #24]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d00e      	beq.n	800c832 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c81a:	699b      	ldr	r3, [r3, #24]
 800c81c:	7afa      	ldrb	r2, [r7, #11]
 800c81e:	4611      	mov	r1, r2
 800c820:	68f8      	ldr	r0, [r7, #12]
 800c822:	4798      	blx	r3
 800c824:	4603      	mov	r3, r0
 800c826:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c828:	7dfb      	ldrb	r3, [r7, #23]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d001      	beq.n	800c832 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c82e:	7dfb      	ldrb	r3, [r7, #23]
 800c830:	e000      	b.n	800c834 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c832:	2300      	movs	r3, #0
}
 800c834:	4618      	mov	r0, r3
 800c836:	3718      	adds	r7, #24
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b086      	sub	sp, #24
 800c840:	af00      	add	r7, sp, #0
 800c842:	60f8      	str	r0, [r7, #12]
 800c844:	460b      	mov	r3, r1
 800c846:	607a      	str	r2, [r7, #4]
 800c848:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c84a:	7afb      	ldrb	r3, [r7, #11]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d16b      	bne.n	800c928 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	3314      	adds	r3, #20
 800c854:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c85c:	2b02      	cmp	r3, #2
 800c85e:	d156      	bne.n	800c90e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c860:	693b      	ldr	r3, [r7, #16]
 800c862:	689a      	ldr	r2, [r3, #8]
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	68db      	ldr	r3, [r3, #12]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d914      	bls.n	800c896 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c86c:	693b      	ldr	r3, [r7, #16]
 800c86e:	689a      	ldr	r2, [r3, #8]
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	1ad2      	subs	r2, r2, r3
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	689b      	ldr	r3, [r3, #8]
 800c87e:	461a      	mov	r2, r3
 800c880:	6879      	ldr	r1, [r7, #4]
 800c882:	68f8      	ldr	r0, [r7, #12]
 800c884:	f000 ff3a 	bl	800d6fc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c888:	2300      	movs	r3, #0
 800c88a:	2200      	movs	r2, #0
 800c88c:	2100      	movs	r1, #0
 800c88e:	68f8      	ldr	r0, [r7, #12]
 800c890:	f001 fc14 	bl	800e0bc <USBD_LL_PrepareReceive>
 800c894:	e03b      	b.n	800c90e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	68da      	ldr	r2, [r3, #12]
 800c89a:	693b      	ldr	r3, [r7, #16]
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	429a      	cmp	r2, r3
 800c8a0:	d11c      	bne.n	800c8dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	685a      	ldr	r2, [r3, #4]
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d316      	bcc.n	800c8dc <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c8ae:	693b      	ldr	r3, [r7, #16]
 800c8b0:	685a      	ldr	r2, [r3, #4]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d20f      	bcs.n	800c8dc <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c8bc:	2200      	movs	r2, #0
 800c8be:	2100      	movs	r1, #0
 800c8c0:	68f8      	ldr	r0, [r7, #12]
 800c8c2:	f000 ff1b 	bl	800d6fc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	2100      	movs	r1, #0
 800c8d4:	68f8      	ldr	r0, [r7, #12]
 800c8d6:	f001 fbf1 	bl	800e0bc <USBD_LL_PrepareReceive>
 800c8da:	e018      	b.n	800c90e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8e2:	b2db      	uxtb	r3, r3
 800c8e4:	2b03      	cmp	r3, #3
 800c8e6:	d10b      	bne.n	800c900 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8ee:	68db      	ldr	r3, [r3, #12]
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d005      	beq.n	800c900 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8fa:	68db      	ldr	r3, [r3, #12]
 800c8fc:	68f8      	ldr	r0, [r7, #12]
 800c8fe:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c900:	2180      	movs	r1, #128	; 0x80
 800c902:	68f8      	ldr	r0, [r7, #12]
 800c904:	f001 fb30 	bl	800df68 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c908:	68f8      	ldr	r0, [r7, #12]
 800c90a:	f000 ff49 	bl	800d7a0 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c914:	2b01      	cmp	r3, #1
 800c916:	d122      	bne.n	800c95e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c918:	68f8      	ldr	r0, [r7, #12]
 800c91a:	f7ff fe98 	bl	800c64e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2200      	movs	r2, #0
 800c922:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c926:	e01a      	b.n	800c95e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c92e:	b2db      	uxtb	r3, r3
 800c930:	2b03      	cmp	r3, #3
 800c932:	d114      	bne.n	800c95e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c93a:	695b      	ldr	r3, [r3, #20]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d00e      	beq.n	800c95e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c946:	695b      	ldr	r3, [r3, #20]
 800c948:	7afa      	ldrb	r2, [r7, #11]
 800c94a:	4611      	mov	r1, r2
 800c94c:	68f8      	ldr	r0, [r7, #12]
 800c94e:	4798      	blx	r3
 800c950:	4603      	mov	r3, r0
 800c952:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c954:	7dfb      	ldrb	r3, [r7, #23]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d001      	beq.n	800c95e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c95a:	7dfb      	ldrb	r3, [r7, #23]
 800c95c:	e000      	b.n	800c960 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c95e:	2300      	movs	r3, #0
}
 800c960:	4618      	mov	r0, r3
 800c962:	3718      	adds	r7, #24
 800c964:	46bd      	mov	sp, r7
 800c966:	bd80      	pop	{r7, pc}

0800c968 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2201      	movs	r2, #1
 800c974:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2200      	movs	r2, #0
 800c97c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2200      	movs	r2, #0
 800c98a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c994:	2b00      	cmp	r3, #0
 800c996:	d101      	bne.n	800c99c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c998:	2303      	movs	r3, #3
 800c99a:	e02f      	b.n	800c9fc <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d00f      	beq.n	800c9c6 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9ac:	685b      	ldr	r3, [r3, #4]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d009      	beq.n	800c9c6 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9b8:	685b      	ldr	r3, [r3, #4]
 800c9ba:	687a      	ldr	r2, [r7, #4]
 800c9bc:	6852      	ldr	r2, [r2, #4]
 800c9be:	b2d2      	uxtb	r2, r2
 800c9c0:	4611      	mov	r1, r2
 800c9c2:	6878      	ldr	r0, [r7, #4]
 800c9c4:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c9c6:	2340      	movs	r3, #64	; 0x40
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	2100      	movs	r1, #0
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f001 fa86 	bl	800dede <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	2201      	movs	r2, #1
 800c9d6:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2240      	movs	r2, #64	; 0x40
 800c9de:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c9e2:	2340      	movs	r3, #64	; 0x40
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	2180      	movs	r1, #128	; 0x80
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f001 fa78 	bl	800dede <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2240      	movs	r2, #64	; 0x40
 800c9f8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3708      	adds	r7, #8
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}

0800ca04 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ca04:	b480      	push	{r7}
 800ca06:	b083      	sub	sp, #12
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	460b      	mov	r3, r1
 800ca0e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	78fa      	ldrb	r2, [r7, #3]
 800ca14:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ca16:	2300      	movs	r3, #0
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	370c      	adds	r7, #12
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca22:	4770      	bx	lr

0800ca24 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b083      	sub	sp, #12
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca32:	b2da      	uxtb	r2, r3
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	2204      	movs	r2, #4
 800ca3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ca42:	2300      	movs	r3, #0
}
 800ca44:	4618      	mov	r0, r3
 800ca46:	370c      	adds	r7, #12
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca4e:	4770      	bx	lr

0800ca50 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ca50:	b480      	push	{r7}
 800ca52:	b083      	sub	sp, #12
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca5e:	b2db      	uxtb	r3, r3
 800ca60:	2b04      	cmp	r3, #4
 800ca62:	d106      	bne.n	800ca72 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ca6a:	b2da      	uxtb	r2, r3
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ca72:	2300      	movs	r3, #0
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	370c      	adds	r7, #12
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7e:	4770      	bx	lr

0800ca80 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b082      	sub	sp, #8
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d101      	bne.n	800ca96 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800ca92:	2303      	movs	r3, #3
 800ca94:	e012      	b.n	800cabc <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca9c:	b2db      	uxtb	r3, r3
 800ca9e:	2b03      	cmp	r3, #3
 800caa0:	d10b      	bne.n	800caba <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800caa8:	69db      	ldr	r3, [r3, #28]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d005      	beq.n	800caba <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cab4:	69db      	ldr	r3, [r3, #28]
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800caba:	2300      	movs	r3, #0
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3708      	adds	r7, #8
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b087      	sub	sp, #28
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	781b      	ldrb	r3, [r3, #0]
 800cad4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	3301      	adds	r3, #1
 800cada:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	781b      	ldrb	r3, [r3, #0]
 800cae0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cae2:	8a3b      	ldrh	r3, [r7, #16]
 800cae4:	021b      	lsls	r3, r3, #8
 800cae6:	b21a      	sxth	r2, r3
 800cae8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800caec:	4313      	orrs	r3, r2
 800caee:	b21b      	sxth	r3, r3
 800caf0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800caf2:	89fb      	ldrh	r3, [r7, #14]
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	371c      	adds	r7, #28
 800caf8:	46bd      	mov	sp, r7
 800cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafe:	4770      	bx	lr

0800cb00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b084      	sub	sp, #16
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cb16:	2b40      	cmp	r3, #64	; 0x40
 800cb18:	d005      	beq.n	800cb26 <USBD_StdDevReq+0x26>
 800cb1a:	2b40      	cmp	r3, #64	; 0x40
 800cb1c:	d853      	bhi.n	800cbc6 <USBD_StdDevReq+0xc6>
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d00b      	beq.n	800cb3a <USBD_StdDevReq+0x3a>
 800cb22:	2b20      	cmp	r3, #32
 800cb24:	d14f      	bne.n	800cbc6 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb2c:	689b      	ldr	r3, [r3, #8]
 800cb2e:	6839      	ldr	r1, [r7, #0]
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	4798      	blx	r3
 800cb34:	4603      	mov	r3, r0
 800cb36:	73fb      	strb	r3, [r7, #15]
      break;
 800cb38:	e04a      	b.n	800cbd0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	785b      	ldrb	r3, [r3, #1]
 800cb3e:	2b09      	cmp	r3, #9
 800cb40:	d83b      	bhi.n	800cbba <USBD_StdDevReq+0xba>
 800cb42:	a201      	add	r2, pc, #4	; (adr r2, 800cb48 <USBD_StdDevReq+0x48>)
 800cb44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb48:	0800cb9d 	.word	0x0800cb9d
 800cb4c:	0800cbb1 	.word	0x0800cbb1
 800cb50:	0800cbbb 	.word	0x0800cbbb
 800cb54:	0800cba7 	.word	0x0800cba7
 800cb58:	0800cbbb 	.word	0x0800cbbb
 800cb5c:	0800cb7b 	.word	0x0800cb7b
 800cb60:	0800cb71 	.word	0x0800cb71
 800cb64:	0800cbbb 	.word	0x0800cbbb
 800cb68:	0800cb93 	.word	0x0800cb93
 800cb6c:	0800cb85 	.word	0x0800cb85
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cb70:	6839      	ldr	r1, [r7, #0]
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f000 f9de 	bl	800cf34 <USBD_GetDescriptor>
          break;
 800cb78:	e024      	b.n	800cbc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cb7a:	6839      	ldr	r1, [r7, #0]
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f000 fb6d 	bl	800d25c <USBD_SetAddress>
          break;
 800cb82:	e01f      	b.n	800cbc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cb84:	6839      	ldr	r1, [r7, #0]
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f000 fbac 	bl	800d2e4 <USBD_SetConfig>
 800cb8c:	4603      	mov	r3, r0
 800cb8e:	73fb      	strb	r3, [r7, #15]
          break;
 800cb90:	e018      	b.n	800cbc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cb92:	6839      	ldr	r1, [r7, #0]
 800cb94:	6878      	ldr	r0, [r7, #4]
 800cb96:	f000 fc4b 	bl	800d430 <USBD_GetConfig>
          break;
 800cb9a:	e013      	b.n	800cbc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cb9c:	6839      	ldr	r1, [r7, #0]
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 fc7c 	bl	800d49c <USBD_GetStatus>
          break;
 800cba4:	e00e      	b.n	800cbc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cba6:	6839      	ldr	r1, [r7, #0]
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f000 fcab 	bl	800d504 <USBD_SetFeature>
          break;
 800cbae:	e009      	b.n	800cbc4 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cbb0:	6839      	ldr	r1, [r7, #0]
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 fcba 	bl	800d52c <USBD_ClrFeature>
          break;
 800cbb8:	e004      	b.n	800cbc4 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800cbba:	6839      	ldr	r1, [r7, #0]
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f000 fd11 	bl	800d5e4 <USBD_CtlError>
          break;
 800cbc2:	bf00      	nop
      }
      break;
 800cbc4:	e004      	b.n	800cbd0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800cbc6:	6839      	ldr	r1, [r7, #0]
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f000 fd0b 	bl	800d5e4 <USBD_CtlError>
      break;
 800cbce:	bf00      	nop
  }

  return ret;
 800cbd0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	3710      	adds	r7, #16
 800cbd6:	46bd      	mov	sp, r7
 800cbd8:	bd80      	pop	{r7, pc}
 800cbda:	bf00      	nop

0800cbdc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b084      	sub	sp, #16
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
 800cbe4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	781b      	ldrb	r3, [r3, #0]
 800cbee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbf2:	2b40      	cmp	r3, #64	; 0x40
 800cbf4:	d005      	beq.n	800cc02 <USBD_StdItfReq+0x26>
 800cbf6:	2b40      	cmp	r3, #64	; 0x40
 800cbf8:	d82f      	bhi.n	800cc5a <USBD_StdItfReq+0x7e>
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d001      	beq.n	800cc02 <USBD_StdItfReq+0x26>
 800cbfe:	2b20      	cmp	r3, #32
 800cc00:	d12b      	bne.n	800cc5a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc08:	b2db      	uxtb	r3, r3
 800cc0a:	3b01      	subs	r3, #1
 800cc0c:	2b02      	cmp	r3, #2
 800cc0e:	d81d      	bhi.n	800cc4c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	889b      	ldrh	r3, [r3, #4]
 800cc14:	b2db      	uxtb	r3, r3
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d813      	bhi.n	800cc42 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc20:	689b      	ldr	r3, [r3, #8]
 800cc22:	6839      	ldr	r1, [r7, #0]
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	4798      	blx	r3
 800cc28:	4603      	mov	r3, r0
 800cc2a:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	88db      	ldrh	r3, [r3, #6]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d110      	bne.n	800cc56 <USBD_StdItfReq+0x7a>
 800cc34:	7bfb      	ldrb	r3, [r7, #15]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d10d      	bne.n	800cc56 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 fd9d 	bl	800d77a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cc40:	e009      	b.n	800cc56 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800cc42:	6839      	ldr	r1, [r7, #0]
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 fccd 	bl	800d5e4 <USBD_CtlError>
          break;
 800cc4a:	e004      	b.n	800cc56 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800cc4c:	6839      	ldr	r1, [r7, #0]
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 fcc8 	bl	800d5e4 <USBD_CtlError>
          break;
 800cc54:	e000      	b.n	800cc58 <USBD_StdItfReq+0x7c>
          break;
 800cc56:	bf00      	nop
      }
      break;
 800cc58:	e004      	b.n	800cc64 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800cc5a:	6839      	ldr	r1, [r7, #0]
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 fcc1 	bl	800d5e4 <USBD_CtlError>
      break;
 800cc62:	bf00      	nop
  }

  return ret;
 800cc64:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	3710      	adds	r7, #16
 800cc6a:	46bd      	mov	sp, r7
 800cc6c:	bd80      	pop	{r7, pc}

0800cc6e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc6e:	b580      	push	{r7, lr}
 800cc70:	b084      	sub	sp, #16
 800cc72:	af00      	add	r7, sp, #0
 800cc74:	6078      	str	r0, [r7, #4]
 800cc76:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800cc7c:	683b      	ldr	r3, [r7, #0]
 800cc7e:	889b      	ldrh	r3, [r3, #4]
 800cc80:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc82:	683b      	ldr	r3, [r7, #0]
 800cc84:	781b      	ldrb	r3, [r3, #0]
 800cc86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cc8a:	2b40      	cmp	r3, #64	; 0x40
 800cc8c:	d007      	beq.n	800cc9e <USBD_StdEPReq+0x30>
 800cc8e:	2b40      	cmp	r3, #64	; 0x40
 800cc90:	f200 8145 	bhi.w	800cf1e <USBD_StdEPReq+0x2b0>
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d00c      	beq.n	800ccb2 <USBD_StdEPReq+0x44>
 800cc98:	2b20      	cmp	r3, #32
 800cc9a:	f040 8140 	bne.w	800cf1e <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	6839      	ldr	r1, [r7, #0]
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	4798      	blx	r3
 800ccac:	4603      	mov	r3, r0
 800ccae:	73fb      	strb	r3, [r7, #15]
      break;
 800ccb0:	e13a      	b.n	800cf28 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	785b      	ldrb	r3, [r3, #1]
 800ccb6:	2b03      	cmp	r3, #3
 800ccb8:	d007      	beq.n	800ccca <USBD_StdEPReq+0x5c>
 800ccba:	2b03      	cmp	r3, #3
 800ccbc:	f300 8129 	bgt.w	800cf12 <USBD_StdEPReq+0x2a4>
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d07f      	beq.n	800cdc4 <USBD_StdEPReq+0x156>
 800ccc4:	2b01      	cmp	r3, #1
 800ccc6:	d03c      	beq.n	800cd42 <USBD_StdEPReq+0xd4>
 800ccc8:	e123      	b.n	800cf12 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccd0:	b2db      	uxtb	r3, r3
 800ccd2:	2b02      	cmp	r3, #2
 800ccd4:	d002      	beq.n	800ccdc <USBD_StdEPReq+0x6e>
 800ccd6:	2b03      	cmp	r3, #3
 800ccd8:	d016      	beq.n	800cd08 <USBD_StdEPReq+0x9a>
 800ccda:	e02c      	b.n	800cd36 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ccdc:	7bbb      	ldrb	r3, [r7, #14]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d00d      	beq.n	800ccfe <USBD_StdEPReq+0x90>
 800cce2:	7bbb      	ldrb	r3, [r7, #14]
 800cce4:	2b80      	cmp	r3, #128	; 0x80
 800cce6:	d00a      	beq.n	800ccfe <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cce8:	7bbb      	ldrb	r3, [r7, #14]
 800ccea:	4619      	mov	r1, r3
 800ccec:	6878      	ldr	r0, [r7, #4]
 800ccee:	f001 f93b 	bl	800df68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ccf2:	2180      	movs	r1, #128	; 0x80
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f001 f937 	bl	800df68 <USBD_LL_StallEP>
 800ccfa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ccfc:	e020      	b.n	800cd40 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ccfe:	6839      	ldr	r1, [r7, #0]
 800cd00:	6878      	ldr	r0, [r7, #4]
 800cd02:	f000 fc6f 	bl	800d5e4 <USBD_CtlError>
              break;
 800cd06:	e01b      	b.n	800cd40 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	885b      	ldrh	r3, [r3, #2]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d10e      	bne.n	800cd2e <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cd10:	7bbb      	ldrb	r3, [r7, #14]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d00b      	beq.n	800cd2e <USBD_StdEPReq+0xc0>
 800cd16:	7bbb      	ldrb	r3, [r7, #14]
 800cd18:	2b80      	cmp	r3, #128	; 0x80
 800cd1a:	d008      	beq.n	800cd2e <USBD_StdEPReq+0xc0>
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	88db      	ldrh	r3, [r3, #6]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d104      	bne.n	800cd2e <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd24:	7bbb      	ldrb	r3, [r7, #14]
 800cd26:	4619      	mov	r1, r3
 800cd28:	6878      	ldr	r0, [r7, #4]
 800cd2a:	f001 f91d 	bl	800df68 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cd2e:	6878      	ldr	r0, [r7, #4]
 800cd30:	f000 fd23 	bl	800d77a <USBD_CtlSendStatus>

              break;
 800cd34:	e004      	b.n	800cd40 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cd36:	6839      	ldr	r1, [r7, #0]
 800cd38:	6878      	ldr	r0, [r7, #4]
 800cd3a:	f000 fc53 	bl	800d5e4 <USBD_CtlError>
              break;
 800cd3e:	bf00      	nop
          }
          break;
 800cd40:	e0ec      	b.n	800cf1c <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd48:	b2db      	uxtb	r3, r3
 800cd4a:	2b02      	cmp	r3, #2
 800cd4c:	d002      	beq.n	800cd54 <USBD_StdEPReq+0xe6>
 800cd4e:	2b03      	cmp	r3, #3
 800cd50:	d016      	beq.n	800cd80 <USBD_StdEPReq+0x112>
 800cd52:	e030      	b.n	800cdb6 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cd54:	7bbb      	ldrb	r3, [r7, #14]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d00d      	beq.n	800cd76 <USBD_StdEPReq+0x108>
 800cd5a:	7bbb      	ldrb	r3, [r7, #14]
 800cd5c:	2b80      	cmp	r3, #128	; 0x80
 800cd5e:	d00a      	beq.n	800cd76 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cd60:	7bbb      	ldrb	r3, [r7, #14]
 800cd62:	4619      	mov	r1, r3
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f001 f8ff 	bl	800df68 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd6a:	2180      	movs	r1, #128	; 0x80
 800cd6c:	6878      	ldr	r0, [r7, #4]
 800cd6e:	f001 f8fb 	bl	800df68 <USBD_LL_StallEP>
 800cd72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cd74:	e025      	b.n	800cdc2 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800cd76:	6839      	ldr	r1, [r7, #0]
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f000 fc33 	bl	800d5e4 <USBD_CtlError>
              break;
 800cd7e:	e020      	b.n	800cdc2 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	885b      	ldrh	r3, [r3, #2]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d11b      	bne.n	800cdc0 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cd88:	7bbb      	ldrb	r3, [r7, #14]
 800cd8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d004      	beq.n	800cd9c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cd92:	7bbb      	ldrb	r3, [r7, #14]
 800cd94:	4619      	mov	r1, r3
 800cd96:	6878      	ldr	r0, [r7, #4]
 800cd98:	f001 f905 	bl	800dfa6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f000 fcec 	bl	800d77a <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cda8:	689b      	ldr	r3, [r3, #8]
 800cdaa:	6839      	ldr	r1, [r7, #0]
 800cdac:	6878      	ldr	r0, [r7, #4]
 800cdae:	4798      	blx	r3
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800cdb4:	e004      	b.n	800cdc0 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800cdb6:	6839      	ldr	r1, [r7, #0]
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f000 fc13 	bl	800d5e4 <USBD_CtlError>
              break;
 800cdbe:	e000      	b.n	800cdc2 <USBD_StdEPReq+0x154>
              break;
 800cdc0:	bf00      	nop
          }
          break;
 800cdc2:	e0ab      	b.n	800cf1c <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdca:	b2db      	uxtb	r3, r3
 800cdcc:	2b02      	cmp	r3, #2
 800cdce:	d002      	beq.n	800cdd6 <USBD_StdEPReq+0x168>
 800cdd0:	2b03      	cmp	r3, #3
 800cdd2:	d032      	beq.n	800ce3a <USBD_StdEPReq+0x1cc>
 800cdd4:	e097      	b.n	800cf06 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cdd6:	7bbb      	ldrb	r3, [r7, #14]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d007      	beq.n	800cdec <USBD_StdEPReq+0x17e>
 800cddc:	7bbb      	ldrb	r3, [r7, #14]
 800cdde:	2b80      	cmp	r3, #128	; 0x80
 800cde0:	d004      	beq.n	800cdec <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800cde2:	6839      	ldr	r1, [r7, #0]
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f000 fbfd 	bl	800d5e4 <USBD_CtlError>
                break;
 800cdea:	e091      	b.n	800cf10 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cdec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	da0b      	bge.n	800ce0c <USBD_StdEPReq+0x19e>
 800cdf4:	7bbb      	ldrb	r3, [r7, #14]
 800cdf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cdfa:	4613      	mov	r3, r2
 800cdfc:	009b      	lsls	r3, r3, #2
 800cdfe:	4413      	add	r3, r2
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	3310      	adds	r3, #16
 800ce04:	687a      	ldr	r2, [r7, #4]
 800ce06:	4413      	add	r3, r2
 800ce08:	3304      	adds	r3, #4
 800ce0a:	e00b      	b.n	800ce24 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ce0c:	7bbb      	ldrb	r3, [r7, #14]
 800ce0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce12:	4613      	mov	r3, r2
 800ce14:	009b      	lsls	r3, r3, #2
 800ce16:	4413      	add	r3, r2
 800ce18:	009b      	lsls	r3, r3, #2
 800ce1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ce1e:	687a      	ldr	r2, [r7, #4]
 800ce20:	4413      	add	r3, r2
 800ce22:	3304      	adds	r3, #4
 800ce24:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	2202      	movs	r2, #2
 800ce30:	4619      	mov	r1, r3
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f000 fc47 	bl	800d6c6 <USBD_CtlSendData>
              break;
 800ce38:	e06a      	b.n	800cf10 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ce3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	da11      	bge.n	800ce66 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ce42:	7bbb      	ldrb	r3, [r7, #14]
 800ce44:	f003 020f 	and.w	r2, r3, #15
 800ce48:	6879      	ldr	r1, [r7, #4]
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	009b      	lsls	r3, r3, #2
 800ce4e:	4413      	add	r3, r2
 800ce50:	009b      	lsls	r3, r3, #2
 800ce52:	440b      	add	r3, r1
 800ce54:	3324      	adds	r3, #36	; 0x24
 800ce56:	881b      	ldrh	r3, [r3, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d117      	bne.n	800ce8c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ce5c:	6839      	ldr	r1, [r7, #0]
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 fbc0 	bl	800d5e4 <USBD_CtlError>
                  break;
 800ce64:	e054      	b.n	800cf10 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ce66:	7bbb      	ldrb	r3, [r7, #14]
 800ce68:	f003 020f 	and.w	r2, r3, #15
 800ce6c:	6879      	ldr	r1, [r7, #4]
 800ce6e:	4613      	mov	r3, r2
 800ce70:	009b      	lsls	r3, r3, #2
 800ce72:	4413      	add	r3, r2
 800ce74:	009b      	lsls	r3, r3, #2
 800ce76:	440b      	add	r3, r1
 800ce78:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ce7c:	881b      	ldrh	r3, [r3, #0]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d104      	bne.n	800ce8c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ce82:	6839      	ldr	r1, [r7, #0]
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f000 fbad 	bl	800d5e4 <USBD_CtlError>
                  break;
 800ce8a:	e041      	b.n	800cf10 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ce8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	da0b      	bge.n	800ceac <USBD_StdEPReq+0x23e>
 800ce94:	7bbb      	ldrb	r3, [r7, #14]
 800ce96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ce9a:	4613      	mov	r3, r2
 800ce9c:	009b      	lsls	r3, r3, #2
 800ce9e:	4413      	add	r3, r2
 800cea0:	009b      	lsls	r3, r3, #2
 800cea2:	3310      	adds	r3, #16
 800cea4:	687a      	ldr	r2, [r7, #4]
 800cea6:	4413      	add	r3, r2
 800cea8:	3304      	adds	r3, #4
 800ceaa:	e00b      	b.n	800cec4 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ceac:	7bbb      	ldrb	r3, [r7, #14]
 800ceae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ceb2:	4613      	mov	r3, r2
 800ceb4:	009b      	lsls	r3, r3, #2
 800ceb6:	4413      	add	r3, r2
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	4413      	add	r3, r2
 800cec2:	3304      	adds	r3, #4
 800cec4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cec6:	7bbb      	ldrb	r3, [r7, #14]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d002      	beq.n	800ced2 <USBD_StdEPReq+0x264>
 800cecc:	7bbb      	ldrb	r3, [r7, #14]
 800cece:	2b80      	cmp	r3, #128	; 0x80
 800ced0:	d103      	bne.n	800ceda <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	2200      	movs	r2, #0
 800ced6:	601a      	str	r2, [r3, #0]
 800ced8:	e00e      	b.n	800cef8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ceda:	7bbb      	ldrb	r3, [r7, #14]
 800cedc:	4619      	mov	r1, r3
 800cede:	6878      	ldr	r0, [r7, #4]
 800cee0:	f001 f880 	bl	800dfe4 <USBD_LL_IsStallEP>
 800cee4:	4603      	mov	r3, r0
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d003      	beq.n	800cef2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	2201      	movs	r2, #1
 800ceee:	601a      	str	r2, [r3, #0]
 800cef0:	e002      	b.n	800cef8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	2200      	movs	r2, #0
 800cef6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	2202      	movs	r2, #2
 800cefc:	4619      	mov	r1, r3
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	f000 fbe1 	bl	800d6c6 <USBD_CtlSendData>
              break;
 800cf04:	e004      	b.n	800cf10 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800cf06:	6839      	ldr	r1, [r7, #0]
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f000 fb6b 	bl	800d5e4 <USBD_CtlError>
              break;
 800cf0e:	bf00      	nop
          }
          break;
 800cf10:	e004      	b.n	800cf1c <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cf12:	6839      	ldr	r1, [r7, #0]
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 fb65 	bl	800d5e4 <USBD_CtlError>
          break;
 800cf1a:	bf00      	nop
      }
      break;
 800cf1c:	e004      	b.n	800cf28 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800cf1e:	6839      	ldr	r1, [r7, #0]
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f000 fb5f 	bl	800d5e4 <USBD_CtlError>
      break;
 800cf26:	bf00      	nop
  }

  return ret;
 800cf28:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3710      	adds	r7, #16
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
	...

0800cf34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf34:	b580      	push	{r7, lr}
 800cf36:	b084      	sub	sp, #16
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
 800cf3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cf3e:	2300      	movs	r3, #0
 800cf40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cf42:	2300      	movs	r3, #0
 800cf44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cf46:	2300      	movs	r3, #0
 800cf48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	885b      	ldrh	r3, [r3, #2]
 800cf4e:	0a1b      	lsrs	r3, r3, #8
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	3b01      	subs	r3, #1
 800cf54:	2b0e      	cmp	r3, #14
 800cf56:	f200 8152 	bhi.w	800d1fe <USBD_GetDescriptor+0x2ca>
 800cf5a:	a201      	add	r2, pc, #4	; (adr r2, 800cf60 <USBD_GetDescriptor+0x2c>)
 800cf5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf60:	0800cfd1 	.word	0x0800cfd1
 800cf64:	0800cfe9 	.word	0x0800cfe9
 800cf68:	0800d029 	.word	0x0800d029
 800cf6c:	0800d1ff 	.word	0x0800d1ff
 800cf70:	0800d1ff 	.word	0x0800d1ff
 800cf74:	0800d19f 	.word	0x0800d19f
 800cf78:	0800d1cb 	.word	0x0800d1cb
 800cf7c:	0800d1ff 	.word	0x0800d1ff
 800cf80:	0800d1ff 	.word	0x0800d1ff
 800cf84:	0800d1ff 	.word	0x0800d1ff
 800cf88:	0800d1ff 	.word	0x0800d1ff
 800cf8c:	0800d1ff 	.word	0x0800d1ff
 800cf90:	0800d1ff 	.word	0x0800d1ff
 800cf94:	0800d1ff 	.word	0x0800d1ff
 800cf98:	0800cf9d 	.word	0x0800cf9d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfa2:	69db      	ldr	r3, [r3, #28]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d00b      	beq.n	800cfc0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfae:	69db      	ldr	r3, [r3, #28]
 800cfb0:	687a      	ldr	r2, [r7, #4]
 800cfb2:	7c12      	ldrb	r2, [r2, #16]
 800cfb4:	f107 0108 	add.w	r1, r7, #8
 800cfb8:	4610      	mov	r0, r2
 800cfba:	4798      	blx	r3
 800cfbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cfbe:	e126      	b.n	800d20e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cfc0:	6839      	ldr	r1, [r7, #0]
 800cfc2:	6878      	ldr	r0, [r7, #4]
 800cfc4:	f000 fb0e 	bl	800d5e4 <USBD_CtlError>
        err++;
 800cfc8:	7afb      	ldrb	r3, [r7, #11]
 800cfca:	3301      	adds	r3, #1
 800cfcc:	72fb      	strb	r3, [r7, #11]
      break;
 800cfce:	e11e      	b.n	800d20e <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	687a      	ldr	r2, [r7, #4]
 800cfda:	7c12      	ldrb	r2, [r2, #16]
 800cfdc:	f107 0108 	add.w	r1, r7, #8
 800cfe0:	4610      	mov	r0, r2
 800cfe2:	4798      	blx	r3
 800cfe4:	60f8      	str	r0, [r7, #12]
      break;
 800cfe6:	e112      	b.n	800d20e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	7c1b      	ldrb	r3, [r3, #16]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d10d      	bne.n	800d00c <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cff8:	f107 0208 	add.w	r2, r7, #8
 800cffc:	4610      	mov	r0, r2
 800cffe:	4798      	blx	r3
 800d000:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	3301      	adds	r3, #1
 800d006:	2202      	movs	r2, #2
 800d008:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d00a:	e100      	b.n	800d20e <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d014:	f107 0208 	add.w	r2, r7, #8
 800d018:	4610      	mov	r0, r2
 800d01a:	4798      	blx	r3
 800d01c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	3301      	adds	r3, #1
 800d022:	2202      	movs	r2, #2
 800d024:	701a      	strb	r2, [r3, #0]
      break;
 800d026:	e0f2      	b.n	800d20e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d028:	683b      	ldr	r3, [r7, #0]
 800d02a:	885b      	ldrh	r3, [r3, #2]
 800d02c:	b2db      	uxtb	r3, r3
 800d02e:	2b05      	cmp	r3, #5
 800d030:	f200 80ac 	bhi.w	800d18c <USBD_GetDescriptor+0x258>
 800d034:	a201      	add	r2, pc, #4	; (adr r2, 800d03c <USBD_GetDescriptor+0x108>)
 800d036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d03a:	bf00      	nop
 800d03c:	0800d055 	.word	0x0800d055
 800d040:	0800d089 	.word	0x0800d089
 800d044:	0800d0bd 	.word	0x0800d0bd
 800d048:	0800d0f1 	.word	0x0800d0f1
 800d04c:	0800d125 	.word	0x0800d125
 800d050:	0800d159 	.word	0x0800d159
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d05a:	685b      	ldr	r3, [r3, #4]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d00b      	beq.n	800d078 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d066:	685b      	ldr	r3, [r3, #4]
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	7c12      	ldrb	r2, [r2, #16]
 800d06c:	f107 0108 	add.w	r1, r7, #8
 800d070:	4610      	mov	r0, r2
 800d072:	4798      	blx	r3
 800d074:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d076:	e091      	b.n	800d19c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d078:	6839      	ldr	r1, [r7, #0]
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 fab2 	bl	800d5e4 <USBD_CtlError>
            err++;
 800d080:	7afb      	ldrb	r3, [r7, #11]
 800d082:	3301      	adds	r3, #1
 800d084:	72fb      	strb	r3, [r7, #11]
          break;
 800d086:	e089      	b.n	800d19c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d08e:	689b      	ldr	r3, [r3, #8]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d00b      	beq.n	800d0ac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d09a:	689b      	ldr	r3, [r3, #8]
 800d09c:	687a      	ldr	r2, [r7, #4]
 800d09e:	7c12      	ldrb	r2, [r2, #16]
 800d0a0:	f107 0108 	add.w	r1, r7, #8
 800d0a4:	4610      	mov	r0, r2
 800d0a6:	4798      	blx	r3
 800d0a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0aa:	e077      	b.n	800d19c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d0ac:	6839      	ldr	r1, [r7, #0]
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 fa98 	bl	800d5e4 <USBD_CtlError>
            err++;
 800d0b4:	7afb      	ldrb	r3, [r7, #11]
 800d0b6:	3301      	adds	r3, #1
 800d0b8:	72fb      	strb	r3, [r7, #11]
          break;
 800d0ba:	e06f      	b.n	800d19c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0c2:	68db      	ldr	r3, [r3, #12]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d00b      	beq.n	800d0e0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0ce:	68db      	ldr	r3, [r3, #12]
 800d0d0:	687a      	ldr	r2, [r7, #4]
 800d0d2:	7c12      	ldrb	r2, [r2, #16]
 800d0d4:	f107 0108 	add.w	r1, r7, #8
 800d0d8:	4610      	mov	r0, r2
 800d0da:	4798      	blx	r3
 800d0dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d0de:	e05d      	b.n	800d19c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d0e0:	6839      	ldr	r1, [r7, #0]
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f000 fa7e 	bl	800d5e4 <USBD_CtlError>
            err++;
 800d0e8:	7afb      	ldrb	r3, [r7, #11]
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	72fb      	strb	r3, [r7, #11]
          break;
 800d0ee:	e055      	b.n	800d19c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0f6:	691b      	ldr	r3, [r3, #16]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d00b      	beq.n	800d114 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d102:	691b      	ldr	r3, [r3, #16]
 800d104:	687a      	ldr	r2, [r7, #4]
 800d106:	7c12      	ldrb	r2, [r2, #16]
 800d108:	f107 0108 	add.w	r1, r7, #8
 800d10c:	4610      	mov	r0, r2
 800d10e:	4798      	blx	r3
 800d110:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d112:	e043      	b.n	800d19c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d114:	6839      	ldr	r1, [r7, #0]
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f000 fa64 	bl	800d5e4 <USBD_CtlError>
            err++;
 800d11c:	7afb      	ldrb	r3, [r7, #11]
 800d11e:	3301      	adds	r3, #1
 800d120:	72fb      	strb	r3, [r7, #11]
          break;
 800d122:	e03b      	b.n	800d19c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d12a:	695b      	ldr	r3, [r3, #20]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d00b      	beq.n	800d148 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d136:	695b      	ldr	r3, [r3, #20]
 800d138:	687a      	ldr	r2, [r7, #4]
 800d13a:	7c12      	ldrb	r2, [r2, #16]
 800d13c:	f107 0108 	add.w	r1, r7, #8
 800d140:	4610      	mov	r0, r2
 800d142:	4798      	blx	r3
 800d144:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d146:	e029      	b.n	800d19c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d148:	6839      	ldr	r1, [r7, #0]
 800d14a:	6878      	ldr	r0, [r7, #4]
 800d14c:	f000 fa4a 	bl	800d5e4 <USBD_CtlError>
            err++;
 800d150:	7afb      	ldrb	r3, [r7, #11]
 800d152:	3301      	adds	r3, #1
 800d154:	72fb      	strb	r3, [r7, #11]
          break;
 800d156:	e021      	b.n	800d19c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d15e:	699b      	ldr	r3, [r3, #24]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d00b      	beq.n	800d17c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d16a:	699b      	ldr	r3, [r3, #24]
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	7c12      	ldrb	r2, [r2, #16]
 800d170:	f107 0108 	add.w	r1, r7, #8
 800d174:	4610      	mov	r0, r2
 800d176:	4798      	blx	r3
 800d178:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d17a:	e00f      	b.n	800d19c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d17c:	6839      	ldr	r1, [r7, #0]
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 fa30 	bl	800d5e4 <USBD_CtlError>
            err++;
 800d184:	7afb      	ldrb	r3, [r7, #11]
 800d186:	3301      	adds	r3, #1
 800d188:	72fb      	strb	r3, [r7, #11]
          break;
 800d18a:	e007      	b.n	800d19c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d18c:	6839      	ldr	r1, [r7, #0]
 800d18e:	6878      	ldr	r0, [r7, #4]
 800d190:	f000 fa28 	bl	800d5e4 <USBD_CtlError>
          err++;
 800d194:	7afb      	ldrb	r3, [r7, #11]
 800d196:	3301      	adds	r3, #1
 800d198:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800d19a:	bf00      	nop
      }
      break;
 800d19c:	e037      	b.n	800d20e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	7c1b      	ldrb	r3, [r3, #16]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d109      	bne.n	800d1ba <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ae:	f107 0208 	add.w	r2, r7, #8
 800d1b2:	4610      	mov	r0, r2
 800d1b4:	4798      	blx	r3
 800d1b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d1b8:	e029      	b.n	800d20e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d1ba:	6839      	ldr	r1, [r7, #0]
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f000 fa11 	bl	800d5e4 <USBD_CtlError>
        err++;
 800d1c2:	7afb      	ldrb	r3, [r7, #11]
 800d1c4:	3301      	adds	r3, #1
 800d1c6:	72fb      	strb	r3, [r7, #11]
      break;
 800d1c8:	e021      	b.n	800d20e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	7c1b      	ldrb	r3, [r3, #16]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d10d      	bne.n	800d1ee <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1da:	f107 0208 	add.w	r2, r7, #8
 800d1de:	4610      	mov	r0, r2
 800d1e0:	4798      	blx	r3
 800d1e2:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	2207      	movs	r2, #7
 800d1ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d1ec:	e00f      	b.n	800d20e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d1ee:	6839      	ldr	r1, [r7, #0]
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 f9f7 	bl	800d5e4 <USBD_CtlError>
        err++;
 800d1f6:	7afb      	ldrb	r3, [r7, #11]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	72fb      	strb	r3, [r7, #11]
      break;
 800d1fc:	e007      	b.n	800d20e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d1fe:	6839      	ldr	r1, [r7, #0]
 800d200:	6878      	ldr	r0, [r7, #4]
 800d202:	f000 f9ef 	bl	800d5e4 <USBD_CtlError>
      err++;
 800d206:	7afb      	ldrb	r3, [r7, #11]
 800d208:	3301      	adds	r3, #1
 800d20a:	72fb      	strb	r3, [r7, #11]
      break;
 800d20c:	bf00      	nop
  }

  if (err != 0U)
 800d20e:	7afb      	ldrb	r3, [r7, #11]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d11e      	bne.n	800d252 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	88db      	ldrh	r3, [r3, #6]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d016      	beq.n	800d24a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d21c:	893b      	ldrh	r3, [r7, #8]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d00e      	beq.n	800d240 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	88da      	ldrh	r2, [r3, #6]
 800d226:	893b      	ldrh	r3, [r7, #8]
 800d228:	4293      	cmp	r3, r2
 800d22a:	bf28      	it	cs
 800d22c:	4613      	movcs	r3, r2
 800d22e:	b29b      	uxth	r3, r3
 800d230:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d232:	893b      	ldrh	r3, [r7, #8]
 800d234:	461a      	mov	r2, r3
 800d236:	68f9      	ldr	r1, [r7, #12]
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 fa44 	bl	800d6c6 <USBD_CtlSendData>
 800d23e:	e009      	b.n	800d254 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d240:	6839      	ldr	r1, [r7, #0]
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f000 f9ce 	bl	800d5e4 <USBD_CtlError>
 800d248:	e004      	b.n	800d254 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 fa95 	bl	800d77a <USBD_CtlSendStatus>
 800d250:	e000      	b.n	800d254 <USBD_GetDescriptor+0x320>
    return;
 800d252:	bf00      	nop
  }
}
 800d254:	3710      	adds	r7, #16
 800d256:	46bd      	mov	sp, r7
 800d258:	bd80      	pop	{r7, pc}
 800d25a:	bf00      	nop

0800d25c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
 800d264:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	889b      	ldrh	r3, [r3, #4]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d131      	bne.n	800d2d2 <USBD_SetAddress+0x76>
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	88db      	ldrh	r3, [r3, #6]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d12d      	bne.n	800d2d2 <USBD_SetAddress+0x76>
 800d276:	683b      	ldr	r3, [r7, #0]
 800d278:	885b      	ldrh	r3, [r3, #2]
 800d27a:	2b7f      	cmp	r3, #127	; 0x7f
 800d27c:	d829      	bhi.n	800d2d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	885b      	ldrh	r3, [r3, #2]
 800d282:	b2db      	uxtb	r3, r3
 800d284:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d288:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d290:	b2db      	uxtb	r3, r3
 800d292:	2b03      	cmp	r3, #3
 800d294:	d104      	bne.n	800d2a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d296:	6839      	ldr	r1, [r7, #0]
 800d298:	6878      	ldr	r0, [r7, #4]
 800d29a:	f000 f9a3 	bl	800d5e4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d29e:	e01d      	b.n	800d2dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	7bfa      	ldrb	r2, [r7, #15]
 800d2a4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d2a8:	7bfb      	ldrb	r3, [r7, #15]
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f000 fec5 	bl	800e03c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f000 fa61 	bl	800d77a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d2b8:	7bfb      	ldrb	r3, [r7, #15]
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d004      	beq.n	800d2c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2be:	687b      	ldr	r3, [r7, #4]
 800d2c0:	2202      	movs	r2, #2
 800d2c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2c6:	e009      	b.n	800d2dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d2d0:	e004      	b.n	800d2dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d2d2:	6839      	ldr	r1, [r7, #0]
 800d2d4:	6878      	ldr	r0, [r7, #4]
 800d2d6:	f000 f985 	bl	800d5e4 <USBD_CtlError>
  }
}
 800d2da:	bf00      	nop
 800d2dc:	bf00      	nop
 800d2de:	3710      	adds	r7, #16
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2e4:	b580      	push	{r7, lr}
 800d2e6:	b084      	sub	sp, #16
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	6078      	str	r0, [r7, #4]
 800d2ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	885b      	ldrh	r3, [r3, #2]
 800d2f6:	b2da      	uxtb	r2, r3
 800d2f8:	4b4c      	ldr	r3, [pc, #304]	; (800d42c <USBD_SetConfig+0x148>)
 800d2fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d2fc:	4b4b      	ldr	r3, [pc, #300]	; (800d42c <USBD_SetConfig+0x148>)
 800d2fe:	781b      	ldrb	r3, [r3, #0]
 800d300:	2b01      	cmp	r3, #1
 800d302:	d905      	bls.n	800d310 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d304:	6839      	ldr	r1, [r7, #0]
 800d306:	6878      	ldr	r0, [r7, #4]
 800d308:	f000 f96c 	bl	800d5e4 <USBD_CtlError>
    return USBD_FAIL;
 800d30c:	2303      	movs	r3, #3
 800d30e:	e088      	b.n	800d422 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d316:	b2db      	uxtb	r3, r3
 800d318:	2b02      	cmp	r3, #2
 800d31a:	d002      	beq.n	800d322 <USBD_SetConfig+0x3e>
 800d31c:	2b03      	cmp	r3, #3
 800d31e:	d025      	beq.n	800d36c <USBD_SetConfig+0x88>
 800d320:	e071      	b.n	800d406 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d322:	4b42      	ldr	r3, [pc, #264]	; (800d42c <USBD_SetConfig+0x148>)
 800d324:	781b      	ldrb	r3, [r3, #0]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d01c      	beq.n	800d364 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d32a:	4b40      	ldr	r3, [pc, #256]	; (800d42c <USBD_SetConfig+0x148>)
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	461a      	mov	r2, r3
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d334:	4b3d      	ldr	r3, [pc, #244]	; (800d42c <USBD_SetConfig+0x148>)
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	4619      	mov	r1, r3
 800d33a:	6878      	ldr	r0, [r7, #4]
 800d33c:	f7ff f992 	bl	800c664 <USBD_SetClassConfig>
 800d340:	4603      	mov	r3, r0
 800d342:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d344:	7bfb      	ldrb	r3, [r7, #15]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d004      	beq.n	800d354 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d34a:	6839      	ldr	r1, [r7, #0]
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 f949 	bl	800d5e4 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d352:	e065      	b.n	800d420 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 fa10 	bl	800d77a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2203      	movs	r2, #3
 800d35e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d362:	e05d      	b.n	800d420 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f000 fa08 	bl	800d77a <USBD_CtlSendStatus>
      break;
 800d36a:	e059      	b.n	800d420 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d36c:	4b2f      	ldr	r3, [pc, #188]	; (800d42c <USBD_SetConfig+0x148>)
 800d36e:	781b      	ldrb	r3, [r3, #0]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d112      	bne.n	800d39a <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	2202      	movs	r2, #2
 800d378:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d37c:	4b2b      	ldr	r3, [pc, #172]	; (800d42c <USBD_SetConfig+0x148>)
 800d37e:	781b      	ldrb	r3, [r3, #0]
 800d380:	461a      	mov	r2, r3
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d386:	4b29      	ldr	r3, [pc, #164]	; (800d42c <USBD_SetConfig+0x148>)
 800d388:	781b      	ldrb	r3, [r3, #0]
 800d38a:	4619      	mov	r1, r3
 800d38c:	6878      	ldr	r0, [r7, #4]
 800d38e:	f7ff f985 	bl	800c69c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d392:	6878      	ldr	r0, [r7, #4]
 800d394:	f000 f9f1 	bl	800d77a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d398:	e042      	b.n	800d420 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d39a:	4b24      	ldr	r3, [pc, #144]	; (800d42c <USBD_SetConfig+0x148>)
 800d39c:	781b      	ldrb	r3, [r3, #0]
 800d39e:	461a      	mov	r2, r3
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	685b      	ldr	r3, [r3, #4]
 800d3a4:	429a      	cmp	r2, r3
 800d3a6:	d02a      	beq.n	800d3fe <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	685b      	ldr	r3, [r3, #4]
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f7ff f973 	bl	800c69c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d3b6:	4b1d      	ldr	r3, [pc, #116]	; (800d42c <USBD_SetConfig+0x148>)
 800d3b8:	781b      	ldrb	r3, [r3, #0]
 800d3ba:	461a      	mov	r2, r3
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d3c0:	4b1a      	ldr	r3, [pc, #104]	; (800d42c <USBD_SetConfig+0x148>)
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	4619      	mov	r1, r3
 800d3c6:	6878      	ldr	r0, [r7, #4]
 800d3c8:	f7ff f94c 	bl	800c664 <USBD_SetClassConfig>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d3d0:	7bfb      	ldrb	r3, [r7, #15]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d00f      	beq.n	800d3f6 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d3d6:	6839      	ldr	r1, [r7, #0]
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f000 f903 	bl	800d5e4 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	4619      	mov	r1, r3
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f7ff f958 	bl	800c69c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2202      	movs	r2, #2
 800d3f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d3f4:	e014      	b.n	800d420 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 f9bf 	bl	800d77a <USBD_CtlSendStatus>
      break;
 800d3fc:	e010      	b.n	800d420 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 f9bb 	bl	800d77a <USBD_CtlSendStatus>
      break;
 800d404:	e00c      	b.n	800d420 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d406:	6839      	ldr	r1, [r7, #0]
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f000 f8eb 	bl	800d5e4 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d40e:	4b07      	ldr	r3, [pc, #28]	; (800d42c <USBD_SetConfig+0x148>)
 800d410:	781b      	ldrb	r3, [r3, #0]
 800d412:	4619      	mov	r1, r3
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f7ff f941 	bl	800c69c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d41a:	2303      	movs	r3, #3
 800d41c:	73fb      	strb	r3, [r7, #15]
      break;
 800d41e:	bf00      	nop
  }

  return ret;
 800d420:	7bfb      	ldrb	r3, [r7, #15]
}
 800d422:	4618      	mov	r0, r3
 800d424:	3710      	adds	r7, #16
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}
 800d42a:	bf00      	nop
 800d42c:	200027ec 	.word	0x200027ec

0800d430 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b082      	sub	sp, #8
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d43a:	683b      	ldr	r3, [r7, #0]
 800d43c:	88db      	ldrh	r3, [r3, #6]
 800d43e:	2b01      	cmp	r3, #1
 800d440:	d004      	beq.n	800d44c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d442:	6839      	ldr	r1, [r7, #0]
 800d444:	6878      	ldr	r0, [r7, #4]
 800d446:	f000 f8cd 	bl	800d5e4 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d44a:	e023      	b.n	800d494 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d452:	b2db      	uxtb	r3, r3
 800d454:	2b02      	cmp	r3, #2
 800d456:	dc02      	bgt.n	800d45e <USBD_GetConfig+0x2e>
 800d458:	2b00      	cmp	r3, #0
 800d45a:	dc03      	bgt.n	800d464 <USBD_GetConfig+0x34>
 800d45c:	e015      	b.n	800d48a <USBD_GetConfig+0x5a>
 800d45e:	2b03      	cmp	r3, #3
 800d460:	d00b      	beq.n	800d47a <USBD_GetConfig+0x4a>
 800d462:	e012      	b.n	800d48a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	2200      	movs	r2, #0
 800d468:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	3308      	adds	r3, #8
 800d46e:	2201      	movs	r2, #1
 800d470:	4619      	mov	r1, r3
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 f927 	bl	800d6c6 <USBD_CtlSendData>
        break;
 800d478:	e00c      	b.n	800d494 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	3304      	adds	r3, #4
 800d47e:	2201      	movs	r2, #1
 800d480:	4619      	mov	r1, r3
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f000 f91f 	bl	800d6c6 <USBD_CtlSendData>
        break;
 800d488:	e004      	b.n	800d494 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d48a:	6839      	ldr	r1, [r7, #0]
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f000 f8a9 	bl	800d5e4 <USBD_CtlError>
        break;
 800d492:	bf00      	nop
}
 800d494:	bf00      	nop
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
 800d4a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4ac:	b2db      	uxtb	r3, r3
 800d4ae:	3b01      	subs	r3, #1
 800d4b0:	2b02      	cmp	r3, #2
 800d4b2:	d81e      	bhi.n	800d4f2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	88db      	ldrh	r3, [r3, #6]
 800d4b8:	2b02      	cmp	r3, #2
 800d4ba:	d004      	beq.n	800d4c6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d4bc:	6839      	ldr	r1, [r7, #0]
 800d4be:	6878      	ldr	r0, [r7, #4]
 800d4c0:	f000 f890 	bl	800d5e4 <USBD_CtlError>
        break;
 800d4c4:	e01a      	b.n	800d4fc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d005      	beq.n	800d4e2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	68db      	ldr	r3, [r3, #12]
 800d4da:	f043 0202 	orr.w	r2, r3, #2
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	330c      	adds	r3, #12
 800d4e6:	2202      	movs	r2, #2
 800d4e8:	4619      	mov	r1, r3
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f000 f8eb 	bl	800d6c6 <USBD_CtlSendData>
      break;
 800d4f0:	e004      	b.n	800d4fc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d4f2:	6839      	ldr	r1, [r7, #0]
 800d4f4:	6878      	ldr	r0, [r7, #4]
 800d4f6:	f000 f875 	bl	800d5e4 <USBD_CtlError>
      break;
 800d4fa:	bf00      	nop
  }
}
 800d4fc:	bf00      	nop
 800d4fe:	3708      	adds	r7, #8
 800d500:	46bd      	mov	sp, r7
 800d502:	bd80      	pop	{r7, pc}

0800d504 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b082      	sub	sp, #8
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	885b      	ldrh	r3, [r3, #2]
 800d512:	2b01      	cmp	r3, #1
 800d514:	d106      	bne.n	800d524 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	2201      	movs	r2, #1
 800d51a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d51e:	6878      	ldr	r0, [r7, #4]
 800d520:	f000 f92b 	bl	800d77a <USBD_CtlSendStatus>
  }
}
 800d524:	bf00      	nop
 800d526:	3708      	adds	r7, #8
 800d528:	46bd      	mov	sp, r7
 800d52a:	bd80      	pop	{r7, pc}

0800d52c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b082      	sub	sp, #8
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	3b01      	subs	r3, #1
 800d540:	2b02      	cmp	r3, #2
 800d542:	d80b      	bhi.n	800d55c <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	885b      	ldrh	r3, [r3, #2]
 800d548:	2b01      	cmp	r3, #1
 800d54a:	d10c      	bne.n	800d566 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2200      	movs	r2, #0
 800d550:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d554:	6878      	ldr	r0, [r7, #4]
 800d556:	f000 f910 	bl	800d77a <USBD_CtlSendStatus>
      }
      break;
 800d55a:	e004      	b.n	800d566 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d55c:	6839      	ldr	r1, [r7, #0]
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f000 f840 	bl	800d5e4 <USBD_CtlError>
      break;
 800d564:	e000      	b.n	800d568 <USBD_ClrFeature+0x3c>
      break;
 800d566:	bf00      	nop
  }
}
 800d568:	bf00      	nop
 800d56a:	3708      	adds	r7, #8
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b084      	sub	sp, #16
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	781a      	ldrb	r2, [r3, #0]
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	3301      	adds	r3, #1
 800d58a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	781a      	ldrb	r2, [r3, #0]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	3301      	adds	r3, #1
 800d598:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d59a:	68f8      	ldr	r0, [r7, #12]
 800d59c:	f7ff fa92 	bl	800cac4 <SWAPBYTE>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	461a      	mov	r2, r3
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	3301      	adds	r3, #1
 800d5ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	3301      	adds	r3, #1
 800d5b2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d5b4:	68f8      	ldr	r0, [r7, #12]
 800d5b6:	f7ff fa85 	bl	800cac4 <SWAPBYTE>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	461a      	mov	r2, r3
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	3301      	adds	r3, #1
 800d5c6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d5ce:	68f8      	ldr	r0, [r7, #12]
 800d5d0:	f7ff fa78 	bl	800cac4 <SWAPBYTE>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	461a      	mov	r2, r3
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	80da      	strh	r2, [r3, #6]
}
 800d5dc:	bf00      	nop
 800d5de:	3710      	adds	r7, #16
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b082      	sub	sp, #8
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d5ee:	2180      	movs	r1, #128	; 0x80
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f000 fcb9 	bl	800df68 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d5f6:	2100      	movs	r1, #0
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f000 fcb5 	bl	800df68 <USBD_LL_StallEP>
}
 800d5fe:	bf00      	nop
 800d600:	3708      	adds	r7, #8
 800d602:	46bd      	mov	sp, r7
 800d604:	bd80      	pop	{r7, pc}

0800d606 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d606:	b580      	push	{r7, lr}
 800d608:	b086      	sub	sp, #24
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	60f8      	str	r0, [r7, #12]
 800d60e:	60b9      	str	r1, [r7, #8]
 800d610:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d612:	2300      	movs	r3, #0
 800d614:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d036      	beq.n	800d68a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d620:	6938      	ldr	r0, [r7, #16]
 800d622:	f000 f836 	bl	800d692 <USBD_GetLen>
 800d626:	4603      	mov	r3, r0
 800d628:	3301      	adds	r3, #1
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	005b      	lsls	r3, r3, #1
 800d62e:	b29a      	uxth	r2, r3
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d634:	7dfb      	ldrb	r3, [r7, #23]
 800d636:	68ba      	ldr	r2, [r7, #8]
 800d638:	4413      	add	r3, r2
 800d63a:	687a      	ldr	r2, [r7, #4]
 800d63c:	7812      	ldrb	r2, [r2, #0]
 800d63e:	701a      	strb	r2, [r3, #0]
  idx++;
 800d640:	7dfb      	ldrb	r3, [r7, #23]
 800d642:	3301      	adds	r3, #1
 800d644:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d646:	7dfb      	ldrb	r3, [r7, #23]
 800d648:	68ba      	ldr	r2, [r7, #8]
 800d64a:	4413      	add	r3, r2
 800d64c:	2203      	movs	r2, #3
 800d64e:	701a      	strb	r2, [r3, #0]
  idx++;
 800d650:	7dfb      	ldrb	r3, [r7, #23]
 800d652:	3301      	adds	r3, #1
 800d654:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d656:	e013      	b.n	800d680 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d658:	7dfb      	ldrb	r3, [r7, #23]
 800d65a:	68ba      	ldr	r2, [r7, #8]
 800d65c:	4413      	add	r3, r2
 800d65e:	693a      	ldr	r2, [r7, #16]
 800d660:	7812      	ldrb	r2, [r2, #0]
 800d662:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	3301      	adds	r3, #1
 800d668:	613b      	str	r3, [r7, #16]
    idx++;
 800d66a:	7dfb      	ldrb	r3, [r7, #23]
 800d66c:	3301      	adds	r3, #1
 800d66e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d670:	7dfb      	ldrb	r3, [r7, #23]
 800d672:	68ba      	ldr	r2, [r7, #8]
 800d674:	4413      	add	r3, r2
 800d676:	2200      	movs	r2, #0
 800d678:	701a      	strb	r2, [r3, #0]
    idx++;
 800d67a:	7dfb      	ldrb	r3, [r7, #23]
 800d67c:	3301      	adds	r3, #1
 800d67e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d680:	693b      	ldr	r3, [r7, #16]
 800d682:	781b      	ldrb	r3, [r3, #0]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d1e7      	bne.n	800d658 <USBD_GetString+0x52>
 800d688:	e000      	b.n	800d68c <USBD_GetString+0x86>
    return;
 800d68a:	bf00      	nop
  }
}
 800d68c:	3718      	adds	r7, #24
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}

0800d692 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d692:	b480      	push	{r7}
 800d694:	b085      	sub	sp, #20
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d69a:	2300      	movs	r3, #0
 800d69c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d6a2:	e005      	b.n	800d6b0 <USBD_GetLen+0x1e>
  {
    len++;
 800d6a4:	7bfb      	ldrb	r3, [r7, #15]
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d1f5      	bne.n	800d6a4 <USBD_GetLen+0x12>
  }

  return len;
 800d6b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3714      	adds	r7, #20
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c4:	4770      	bx	lr

0800d6c6 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d6c6:	b580      	push	{r7, lr}
 800d6c8:	b084      	sub	sp, #16
 800d6ca:	af00      	add	r7, sp, #0
 800d6cc:	60f8      	str	r0, [r7, #12]
 800d6ce:	60b9      	str	r1, [r7, #8]
 800d6d0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	2202      	movs	r2, #2
 800d6d6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	687a      	ldr	r2, [r7, #4]
 800d6de:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	687a      	ldr	r2, [r7, #4]
 800d6e4:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	68ba      	ldr	r2, [r7, #8]
 800d6ea:	2100      	movs	r1, #0
 800d6ec:	68f8      	ldr	r0, [r7, #12]
 800d6ee:	f000 fcc4 	bl	800e07a <USBD_LL_Transmit>

  return USBD_OK;
 800d6f2:	2300      	movs	r3, #0
}
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	3710      	adds	r7, #16
 800d6f8:	46bd      	mov	sp, r7
 800d6fa:	bd80      	pop	{r7, pc}

0800d6fc <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b084      	sub	sp, #16
 800d700:	af00      	add	r7, sp, #0
 800d702:	60f8      	str	r0, [r7, #12]
 800d704:	60b9      	str	r1, [r7, #8]
 800d706:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	68ba      	ldr	r2, [r7, #8]
 800d70c:	2100      	movs	r1, #0
 800d70e:	68f8      	ldr	r0, [r7, #12]
 800d710:	f000 fcb3 	bl	800e07a <USBD_LL_Transmit>

  return USBD_OK;
 800d714:	2300      	movs	r3, #0
}
 800d716:	4618      	mov	r0, r3
 800d718:	3710      	adds	r7, #16
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}

0800d71e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d71e:	b580      	push	{r7, lr}
 800d720:	b084      	sub	sp, #16
 800d722:	af00      	add	r7, sp, #0
 800d724:	60f8      	str	r0, [r7, #12]
 800d726:	60b9      	str	r1, [r7, #8]
 800d728:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2203      	movs	r2, #3
 800d72e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	687a      	ldr	r2, [r7, #4]
 800d736:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d73a:	68fb      	ldr	r3, [r7, #12]
 800d73c:	687a      	ldr	r2, [r7, #4]
 800d73e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	68ba      	ldr	r2, [r7, #8]
 800d746:	2100      	movs	r1, #0
 800d748:	68f8      	ldr	r0, [r7, #12]
 800d74a:	f000 fcb7 	bl	800e0bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d74e:	2300      	movs	r3, #0
}
 800d750:	4618      	mov	r0, r3
 800d752:	3710      	adds	r7, #16
 800d754:	46bd      	mov	sp, r7
 800d756:	bd80      	pop	{r7, pc}

0800d758 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d758:	b580      	push	{r7, lr}
 800d75a:	b084      	sub	sp, #16
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	60f8      	str	r0, [r7, #12]
 800d760:	60b9      	str	r1, [r7, #8]
 800d762:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	68ba      	ldr	r2, [r7, #8]
 800d768:	2100      	movs	r1, #0
 800d76a:	68f8      	ldr	r0, [r7, #12]
 800d76c:	f000 fca6 	bl	800e0bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d770:	2300      	movs	r3, #0
}
 800d772:	4618      	mov	r0, r3
 800d774:	3710      	adds	r7, #16
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}

0800d77a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b082      	sub	sp, #8
 800d77e:	af00      	add	r7, sp, #0
 800d780:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2204      	movs	r2, #4
 800d786:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d78a:	2300      	movs	r3, #0
 800d78c:	2200      	movs	r2, #0
 800d78e:	2100      	movs	r1, #0
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f000 fc72 	bl	800e07a <USBD_LL_Transmit>

  return USBD_OK;
 800d796:	2300      	movs	r3, #0
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3708      	adds	r7, #8
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b082      	sub	sp, #8
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2205      	movs	r2, #5
 800d7ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	2100      	movs	r1, #0
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	f000 fc80 	bl	800e0bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d7bc:	2300      	movs	r3, #0
}
 800d7be:	4618      	mov	r0, r3
 800d7c0:	3708      	adds	r7, #8
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	bd80      	pop	{r7, pc}
	...

0800d7c8 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	4912      	ldr	r1, [pc, #72]	; (800d818 <MX_USB_Device_Init+0x50>)
 800d7d0:	4812      	ldr	r0, [pc, #72]	; (800d81c <MX_USB_Device_Init+0x54>)
 800d7d2:	f7fe fed9 	bl	800c588 <USBD_Init>
 800d7d6:	4603      	mov	r3, r0
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	d001      	beq.n	800d7e0 <MX_USB_Device_Init+0x18>
    Error_Handler();
 800d7dc:	f7f4 fc1e 	bl	800201c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 800d7e0:	490f      	ldr	r1, [pc, #60]	; (800d820 <MX_USB_Device_Init+0x58>)
 800d7e2:	480e      	ldr	r0, [pc, #56]	; (800d81c <MX_USB_Device_Init+0x54>)
 800d7e4:	f7fe ff00 	bl	800c5e8 <USBD_RegisterClass>
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d001      	beq.n	800d7f2 <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800d7ee:	f7f4 fc15 	bl	800201c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800d7f2:	490c      	ldr	r1, [pc, #48]	; (800d824 <MX_USB_Device_Init+0x5c>)
 800d7f4:	4809      	ldr	r0, [pc, #36]	; (800d81c <MX_USB_Device_Init+0x54>)
 800d7f6:	f7fe fe21 	bl	800c43c <USBD_CDC_RegisterInterface>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d001      	beq.n	800d804 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800d800:	f7f4 fc0c 	bl	800201c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 800d804:	4805      	ldr	r0, [pc, #20]	; (800d81c <MX_USB_Device_Init+0x54>)
 800d806:	f7fe ff16 	bl	800c636 <USBD_Start>
 800d80a:	4603      	mov	r3, r0
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d001      	beq.n	800d814 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800d810:	f7f4 fc04 	bl	800201c <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 800d814:	bf00      	nop
 800d816:	bd80      	pop	{r7, pc}
 800d818:	20000140 	.word	0x20000140
 800d81c:	200027f0 	.word	0x200027f0
 800d820:	20000028 	.word	0x20000028
 800d824:	2000012c 	.word	0x2000012c

0800d828 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d828:	b580      	push	{r7, lr}
 800d82a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d82c:	2200      	movs	r2, #0
 800d82e:	4905      	ldr	r1, [pc, #20]	; (800d844 <CDC_Init_FS+0x1c>)
 800d830:	4805      	ldr	r0, [pc, #20]	; (800d848 <CDC_Init_FS+0x20>)
 800d832:	f7fe fe18 	bl	800c466 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d836:	4905      	ldr	r1, [pc, #20]	; (800d84c <CDC_Init_FS+0x24>)
 800d838:	4803      	ldr	r0, [pc, #12]	; (800d848 <CDC_Init_FS+0x20>)
 800d83a:	f7fe fe32 	bl	800c4a2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d83e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d840:	4618      	mov	r0, r3
 800d842:	bd80      	pop	{r7, pc}
 800d844:	200032c0 	.word	0x200032c0
 800d848:	200027f0 	.word	0x200027f0
 800d84c:	20002ac0 	.word	0x20002ac0

0800d850 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d850:	b480      	push	{r7}
 800d852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d854:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d856:	4618      	mov	r0, r3
 800d858:	46bd      	mov	sp, r7
 800d85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85e:	4770      	bx	lr

0800d860 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	4603      	mov	r3, r0
 800d868:	6039      	str	r1, [r7, #0]
 800d86a:	71fb      	strb	r3, [r7, #7]
 800d86c:	4613      	mov	r3, r2
 800d86e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800d870:	79fb      	ldrb	r3, [r7, #7]
 800d872:	2b23      	cmp	r3, #35	; 0x23
 800d874:	d84a      	bhi.n	800d90c <CDC_Control_FS+0xac>
 800d876:	a201      	add	r2, pc, #4	; (adr r2, 800d87c <CDC_Control_FS+0x1c>)
 800d878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d87c:	0800d90d 	.word	0x0800d90d
 800d880:	0800d90d 	.word	0x0800d90d
 800d884:	0800d90d 	.word	0x0800d90d
 800d888:	0800d90d 	.word	0x0800d90d
 800d88c:	0800d90d 	.word	0x0800d90d
 800d890:	0800d90d 	.word	0x0800d90d
 800d894:	0800d90d 	.word	0x0800d90d
 800d898:	0800d90d 	.word	0x0800d90d
 800d89c:	0800d90d 	.word	0x0800d90d
 800d8a0:	0800d90d 	.word	0x0800d90d
 800d8a4:	0800d90d 	.word	0x0800d90d
 800d8a8:	0800d90d 	.word	0x0800d90d
 800d8ac:	0800d90d 	.word	0x0800d90d
 800d8b0:	0800d90d 	.word	0x0800d90d
 800d8b4:	0800d90d 	.word	0x0800d90d
 800d8b8:	0800d90d 	.word	0x0800d90d
 800d8bc:	0800d90d 	.word	0x0800d90d
 800d8c0:	0800d90d 	.word	0x0800d90d
 800d8c4:	0800d90d 	.word	0x0800d90d
 800d8c8:	0800d90d 	.word	0x0800d90d
 800d8cc:	0800d90d 	.word	0x0800d90d
 800d8d0:	0800d90d 	.word	0x0800d90d
 800d8d4:	0800d90d 	.word	0x0800d90d
 800d8d8:	0800d90d 	.word	0x0800d90d
 800d8dc:	0800d90d 	.word	0x0800d90d
 800d8e0:	0800d90d 	.word	0x0800d90d
 800d8e4:	0800d90d 	.word	0x0800d90d
 800d8e8:	0800d90d 	.word	0x0800d90d
 800d8ec:	0800d90d 	.word	0x0800d90d
 800d8f0:	0800d90d 	.word	0x0800d90d
 800d8f4:	0800d90d 	.word	0x0800d90d
 800d8f8:	0800d90d 	.word	0x0800d90d
 800d8fc:	0800d90d 	.word	0x0800d90d
 800d900:	0800d90d 	.word	0x0800d90d
 800d904:	0800d90d 	.word	0x0800d90d
 800d908:	0800d90d 	.word	0x0800d90d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d90c:	bf00      	nop
  }

  return (USBD_OK);
 800d90e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800d910:	4618      	mov	r0, r3
 800d912:	370c      	adds	r7, #12
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr

0800d91c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b084      	sub	sp, #16
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
 800d924:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800d926:	6879      	ldr	r1, [r7, #4]
 800d928:	4811      	ldr	r0, [pc, #68]	; (800d970 <CDC_Receive_FS+0x54>)
 800d92a:	f7fe fdba 	bl	800c4a2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800d92e:	4810      	ldr	r0, [pc, #64]	; (800d970 <CDC_Receive_FS+0x54>)
 800d930:	f7fe fe00 	bl	800c534 <USBD_CDC_ReceivePacket>

  memset (rx_buffer, '\0', USB_RX_BUFFER_SIZE);  // clear the buffer
 800d934:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d938:	2100      	movs	r1, #0
 800d93a:	480e      	ldr	r0, [pc, #56]	; (800d974 <CDC_Receive_FS+0x58>)
 800d93c:	f001 fa8d 	bl	800ee5a <memset>
  uint8_t len = (uint8_t)*Len;
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	73fb      	strb	r3, [r7, #15]
  memcpy(rx_buffer, Buf, len);  // copy the data to the buffer
 800d946:	7bfb      	ldrb	r3, [r7, #15]
 800d948:	461a      	mov	r2, r3
 800d94a:	6879      	ldr	r1, [r7, #4]
 800d94c:	4809      	ldr	r0, [pc, #36]	; (800d974 <CDC_Receive_FS+0x58>)
 800d94e:	f001 fb16 	bl	800ef7e <memcpy>
  memset(Buf, '\0', len);   // clear the Buf also
 800d952:	7bfb      	ldrb	r3, [r7, #15]
 800d954:	461a      	mov	r2, r3
 800d956:	2100      	movs	r1, #0
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f001 fa7e 	bl	800ee5a <memset>

  conv_state = CFG_RECEIVED;
 800d95e:	4b06      	ldr	r3, [pc, #24]	; (800d978 <CDC_Receive_FS+0x5c>)
 800d960:	2201      	movs	r2, #1
 800d962:	701a      	strb	r2, [r3, #0]
  return (USBD_OK);
 800d964:	2300      	movs	r3, #0

  /* USER CODE END 6 */
}
 800d966:	4618      	mov	r0, r3
 800d968:	3710      	adds	r7, #16
 800d96a:	46bd      	mov	sp, r7
 800d96c:	bd80      	pop	{r7, pc}
 800d96e:	bf00      	nop
 800d970:	200027f0 	.word	0x200027f0
 800d974:	200026bc 	.word	0x200026bc
 800d978:	200027bc 	.word	0x200027bc

0800d97c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	460b      	mov	r3, r1
 800d986:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d988:	2300      	movs	r3, #0
 800d98a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800d98c:	4b0d      	ldr	r3, [pc, #52]	; (800d9c4 <CDC_Transmit_FS+0x48>)
 800d98e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d992:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d994:	68bb      	ldr	r3, [r7, #8]
 800d996:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d001      	beq.n	800d9a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800d99e:	2301      	movs	r3, #1
 800d9a0:	e00b      	b.n	800d9ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800d9a2:	887b      	ldrh	r3, [r7, #2]
 800d9a4:	461a      	mov	r2, r3
 800d9a6:	6879      	ldr	r1, [r7, #4]
 800d9a8:	4806      	ldr	r0, [pc, #24]	; (800d9c4 <CDC_Transmit_FS+0x48>)
 800d9aa:	f7fe fd5c 	bl	800c466 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800d9ae:	4805      	ldr	r0, [pc, #20]	; (800d9c4 <CDC_Transmit_FS+0x48>)
 800d9b0:	f7fe fd90 	bl	800c4d4 <USBD_CDC_TransmitPacket>
 800d9b4:	4603      	mov	r3, r0
 800d9b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800d9b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	3710      	adds	r7, #16
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	bd80      	pop	{r7, pc}
 800d9c2:	bf00      	nop
 800d9c4:	200027f0 	.word	0x200027f0

0800d9c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d9c8:	b480      	push	{r7}
 800d9ca:	b087      	sub	sp, #28
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	60f8      	str	r0, [r7, #12]
 800d9d0:	60b9      	str	r1, [r7, #8]
 800d9d2:	4613      	mov	r3, r2
 800d9d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800d9da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	371c      	adds	r7, #28
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr
	...

0800d9ec <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d9ec:	b480      	push	{r7}
 800d9ee:	b083      	sub	sp, #12
 800d9f0:	af00      	add	r7, sp, #0
 800d9f2:	4603      	mov	r3, r0
 800d9f4:	6039      	str	r1, [r7, #0]
 800d9f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	2212      	movs	r2, #18
 800d9fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 800d9fe:	4b03      	ldr	r3, [pc, #12]	; (800da0c <USBD_CDC_DeviceDescriptor+0x20>)
}
 800da00:	4618      	mov	r0, r3
 800da02:	370c      	adds	r7, #12
 800da04:	46bd      	mov	sp, r7
 800da06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0a:	4770      	bx	lr
 800da0c:	20000160 	.word	0x20000160

0800da10 <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da10:	b480      	push	{r7}
 800da12:	b083      	sub	sp, #12
 800da14:	af00      	add	r7, sp, #0
 800da16:	4603      	mov	r3, r0
 800da18:	6039      	str	r1, [r7, #0]
 800da1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800da1c:	683b      	ldr	r3, [r7, #0]
 800da1e:	2204      	movs	r2, #4
 800da20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800da22:	4b03      	ldr	r3, [pc, #12]	; (800da30 <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 800da24:	4618      	mov	r0, r3
 800da26:	370c      	adds	r7, #12
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr
 800da30:	20000174 	.word	0x20000174

0800da34 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b082      	sub	sp, #8
 800da38:	af00      	add	r7, sp, #0
 800da3a:	4603      	mov	r3, r0
 800da3c:	6039      	str	r1, [r7, #0]
 800da3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800da40:	79fb      	ldrb	r3, [r7, #7]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d105      	bne.n	800da52 <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800da46:	683a      	ldr	r2, [r7, #0]
 800da48:	4907      	ldr	r1, [pc, #28]	; (800da68 <USBD_CDC_ProductStrDescriptor+0x34>)
 800da4a:	4808      	ldr	r0, [pc, #32]	; (800da6c <USBD_CDC_ProductStrDescriptor+0x38>)
 800da4c:	f7ff fddb 	bl	800d606 <USBD_GetString>
 800da50:	e004      	b.n	800da5c <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 800da52:	683a      	ldr	r2, [r7, #0]
 800da54:	4904      	ldr	r1, [pc, #16]	; (800da68 <USBD_CDC_ProductStrDescriptor+0x34>)
 800da56:	4805      	ldr	r0, [pc, #20]	; (800da6c <USBD_CDC_ProductStrDescriptor+0x38>)
 800da58:	f7ff fdd5 	bl	800d606 <USBD_GetString>
  }
  return USBD_StrDesc;
 800da5c:	4b02      	ldr	r3, [pc, #8]	; (800da68 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 800da5e:	4618      	mov	r0, r3
 800da60:	3708      	adds	r7, #8
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	20003ac0 	.word	0x20003ac0
 800da6c:	08011f5c 	.word	0x08011f5c

0800da70 <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b082      	sub	sp, #8
 800da74:	af00      	add	r7, sp, #0
 800da76:	4603      	mov	r3, r0
 800da78:	6039      	str	r1, [r7, #0]
 800da7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800da7c:	683a      	ldr	r2, [r7, #0]
 800da7e:	4904      	ldr	r1, [pc, #16]	; (800da90 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 800da80:	4804      	ldr	r0, [pc, #16]	; (800da94 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 800da82:	f7ff fdc0 	bl	800d606 <USBD_GetString>
  return USBD_StrDesc;
 800da86:	4b02      	ldr	r3, [pc, #8]	; (800da90 <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3708      	adds	r7, #8
 800da8c:	46bd      	mov	sp, r7
 800da8e:	bd80      	pop	{r7, pc}
 800da90:	20003ac0 	.word	0x20003ac0
 800da94:	08011f6c 	.word	0x08011f6c

0800da98 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800da98:	b580      	push	{r7, lr}
 800da9a:	b082      	sub	sp, #8
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	4603      	mov	r3, r0
 800daa0:	6039      	str	r1, [r7, #0]
 800daa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	221a      	movs	r2, #26
 800daa8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800daaa:	f000 f843 	bl	800db34 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800daae:	4b02      	ldr	r3, [pc, #8]	; (800dab8 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 800dab0:	4618      	mov	r0, r3
 800dab2:	3708      	adds	r7, #8
 800dab4:	46bd      	mov	sp, r7
 800dab6:	bd80      	pop	{r7, pc}
 800dab8:	20000178 	.word	0x20000178

0800dabc <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dabc:	b580      	push	{r7, lr}
 800dabe:	b082      	sub	sp, #8
 800dac0:	af00      	add	r7, sp, #0
 800dac2:	4603      	mov	r3, r0
 800dac4:	6039      	str	r1, [r7, #0]
 800dac6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dac8:	79fb      	ldrb	r3, [r7, #7]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d105      	bne.n	800dada <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800dace:	683a      	ldr	r2, [r7, #0]
 800dad0:	4907      	ldr	r1, [pc, #28]	; (800daf0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800dad2:	4808      	ldr	r0, [pc, #32]	; (800daf4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800dad4:	f7ff fd97 	bl	800d606 <USBD_GetString>
 800dad8:	e004      	b.n	800dae4 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 800dada:	683a      	ldr	r2, [r7, #0]
 800dadc:	4904      	ldr	r1, [pc, #16]	; (800daf0 <USBD_CDC_ConfigStrDescriptor+0x34>)
 800dade:	4805      	ldr	r0, [pc, #20]	; (800daf4 <USBD_CDC_ConfigStrDescriptor+0x38>)
 800dae0:	f7ff fd91 	bl	800d606 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dae4:	4b02      	ldr	r3, [pc, #8]	; (800daf0 <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 800dae6:	4618      	mov	r0, r3
 800dae8:	3708      	adds	r7, #8
 800daea:	46bd      	mov	sp, r7
 800daec:	bd80      	pop	{r7, pc}
 800daee:	bf00      	nop
 800daf0:	20003ac0 	.word	0x20003ac0
 800daf4:	08011f70 	.word	0x08011f70

0800daf8 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	4603      	mov	r3, r0
 800db00:	6039      	str	r1, [r7, #0]
 800db02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800db04:	79fb      	ldrb	r3, [r7, #7]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d105      	bne.n	800db16 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800db0a:	683a      	ldr	r2, [r7, #0]
 800db0c:	4907      	ldr	r1, [pc, #28]	; (800db2c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800db0e:	4808      	ldr	r0, [pc, #32]	; (800db30 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800db10:	f7ff fd79 	bl	800d606 <USBD_GetString>
 800db14:	e004      	b.n	800db20 <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 800db16:	683a      	ldr	r2, [r7, #0]
 800db18:	4904      	ldr	r1, [pc, #16]	; (800db2c <USBD_CDC_InterfaceStrDescriptor+0x34>)
 800db1a:	4805      	ldr	r0, [pc, #20]	; (800db30 <USBD_CDC_InterfaceStrDescriptor+0x38>)
 800db1c:	f7ff fd73 	bl	800d606 <USBD_GetString>
  }
  return USBD_StrDesc;
 800db20:	4b02      	ldr	r3, [pc, #8]	; (800db2c <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 800db22:	4618      	mov	r0, r3
 800db24:	3708      	adds	r7, #8
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop
 800db2c:	20003ac0 	.word	0x20003ac0
 800db30:	08011f7c 	.word	0x08011f7c

0800db34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800db3a:	4b0f      	ldr	r3, [pc, #60]	; (800db78 <Get_SerialNum+0x44>)
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800db40:	4b0e      	ldr	r3, [pc, #56]	; (800db7c <Get_SerialNum+0x48>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800db46:	4b0e      	ldr	r3, [pc, #56]	; (800db80 <Get_SerialNum+0x4c>)
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800db4c:	68fa      	ldr	r2, [r7, #12]
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	4413      	add	r3, r2
 800db52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d009      	beq.n	800db6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800db5a:	2208      	movs	r2, #8
 800db5c:	4909      	ldr	r1, [pc, #36]	; (800db84 <Get_SerialNum+0x50>)
 800db5e:	68f8      	ldr	r0, [r7, #12]
 800db60:	f000 f814 	bl	800db8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800db64:	2204      	movs	r2, #4
 800db66:	4908      	ldr	r1, [pc, #32]	; (800db88 <Get_SerialNum+0x54>)
 800db68:	68b8      	ldr	r0, [r7, #8]
 800db6a:	f000 f80f 	bl	800db8c <IntToUnicode>
  }
}
 800db6e:	bf00      	nop
 800db70:	3710      	adds	r7, #16
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	1fff7590 	.word	0x1fff7590
 800db7c:	1fff7594 	.word	0x1fff7594
 800db80:	1fff7598 	.word	0x1fff7598
 800db84:	2000017a 	.word	0x2000017a
 800db88:	2000018a 	.word	0x2000018a

0800db8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800db8c:	b480      	push	{r7}
 800db8e:	b087      	sub	sp, #28
 800db90:	af00      	add	r7, sp, #0
 800db92:	60f8      	str	r0, [r7, #12]
 800db94:	60b9      	str	r1, [r7, #8]
 800db96:	4613      	mov	r3, r2
 800db98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800db9a:	2300      	movs	r3, #0
 800db9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800db9e:	2300      	movs	r3, #0
 800dba0:	75fb      	strb	r3, [r7, #23]
 800dba2:	e027      	b.n	800dbf4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	0f1b      	lsrs	r3, r3, #28
 800dba8:	2b09      	cmp	r3, #9
 800dbaa:	d80b      	bhi.n	800dbc4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	0f1b      	lsrs	r3, r3, #28
 800dbb0:	b2da      	uxtb	r2, r3
 800dbb2:	7dfb      	ldrb	r3, [r7, #23]
 800dbb4:	005b      	lsls	r3, r3, #1
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	440b      	add	r3, r1
 800dbbc:	3230      	adds	r2, #48	; 0x30
 800dbbe:	b2d2      	uxtb	r2, r2
 800dbc0:	701a      	strb	r2, [r3, #0]
 800dbc2:	e00a      	b.n	800dbda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	0f1b      	lsrs	r3, r3, #28
 800dbc8:	b2da      	uxtb	r2, r3
 800dbca:	7dfb      	ldrb	r3, [r7, #23]
 800dbcc:	005b      	lsls	r3, r3, #1
 800dbce:	4619      	mov	r1, r3
 800dbd0:	68bb      	ldr	r3, [r7, #8]
 800dbd2:	440b      	add	r3, r1
 800dbd4:	3237      	adds	r2, #55	; 0x37
 800dbd6:	b2d2      	uxtb	r2, r2
 800dbd8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	011b      	lsls	r3, r3, #4
 800dbde:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dbe0:	7dfb      	ldrb	r3, [r7, #23]
 800dbe2:	005b      	lsls	r3, r3, #1
 800dbe4:	3301      	adds	r3, #1
 800dbe6:	68ba      	ldr	r2, [r7, #8]
 800dbe8:	4413      	add	r3, r2
 800dbea:	2200      	movs	r2, #0
 800dbec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dbee:	7dfb      	ldrb	r3, [r7, #23]
 800dbf0:	3301      	adds	r3, #1
 800dbf2:	75fb      	strb	r3, [r7, #23]
 800dbf4:	7dfa      	ldrb	r2, [r7, #23]
 800dbf6:	79fb      	ldrb	r3, [r7, #7]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d3d3      	bcc.n	800dba4 <IntToUnicode+0x18>
  }
}
 800dbfc:	bf00      	nop
 800dbfe:	bf00      	nop
 800dc00:	371c      	adds	r7, #28
 800dc02:	46bd      	mov	sp, r7
 800dc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc08:	4770      	bx	lr
	...

0800dc0c <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc0c:	b580      	push	{r7, lr}
 800dc0e:	b098      	sub	sp, #96	; 0x60
 800dc10:	af00      	add	r7, sp, #0
 800dc12:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800dc14:	f107 030c 	add.w	r3, r7, #12
 800dc18:	2254      	movs	r2, #84	; 0x54
 800dc1a:	2100      	movs	r1, #0
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f001 f91c 	bl	800ee5a <memset>
  if(pcdHandle->Instance==USB)
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	4a19      	ldr	r2, [pc, #100]	; (800dc8c <HAL_PCD_MspInit+0x80>)
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d12a      	bne.n	800dc82 <HAL_PCD_MspInit+0x76>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800dc2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800dc30:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800dc32:	2300      	movs	r3, #0
 800dc34:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800dc36:	f107 030c 	add.w	r3, r7, #12
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	f7fa fdf4 	bl	8008828 <HAL_RCCEx_PeriphCLKConfig>
 800dc40:	4603      	mov	r3, r0
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d001      	beq.n	800dc4a <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800dc46:	f7f4 f9e9 	bl	800201c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800dc4a:	4b11      	ldr	r3, [pc, #68]	; (800dc90 <HAL_PCD_MspInit+0x84>)
 800dc4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc4e:	4a10      	ldr	r2, [pc, #64]	; (800dc90 <HAL_PCD_MspInit+0x84>)
 800dc50:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800dc54:	6593      	str	r3, [r2, #88]	; 0x58
 800dc56:	4b0e      	ldr	r3, [pc, #56]	; (800dc90 <HAL_PCD_MspInit+0x84>)
 800dc58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800dc5e:	60bb      	str	r3, [r7, #8]
 800dc60:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_HP_IRQn, 0, 0);
 800dc62:	2200      	movs	r2, #0
 800dc64:	2100      	movs	r1, #0
 800dc66:	2013      	movs	r0, #19
 800dc68:	f7f6 fd9f 	bl	80047aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_HP_IRQn);
 800dc6c:	2013      	movs	r0, #19
 800dc6e:	f7f6 fdb6 	bl	80047de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 800dc72:	2200      	movs	r2, #0
 800dc74:	2100      	movs	r1, #0
 800dc76:	2014      	movs	r0, #20
 800dc78:	f7f6 fd97 	bl	80047aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 800dc7c:	2014      	movs	r0, #20
 800dc7e:	f7f6 fdae 	bl	80047de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800dc82:	bf00      	nop
 800dc84:	3760      	adds	r7, #96	; 0x60
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	40005c00 	.word	0x40005c00
 800dc90:	40021000 	.word	0x40021000

0800dc94 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b082      	sub	sp, #8
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f8d3 22d8 	ldr.w	r2, [r3, #728]	; 0x2d8
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800dca8:	4619      	mov	r1, r3
 800dcaa:	4610      	mov	r0, r2
 800dcac:	f7fe fd0e 	bl	800c6cc <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 800dcb0:	bf00      	nop
 800dcb2:	3708      	adds	r7, #8
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	460b      	mov	r3, r1
 800dcc2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800dcca:	78fa      	ldrb	r2, [r7, #3]
 800dccc:	6879      	ldr	r1, [r7, #4]
 800dcce:	4613      	mov	r3, r2
 800dcd0:	009b      	lsls	r3, r3, #2
 800dcd2:	4413      	add	r3, r2
 800dcd4:	00db      	lsls	r3, r3, #3
 800dcd6:	440b      	add	r3, r1
 800dcd8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dcdc:	681a      	ldr	r2, [r3, #0]
 800dcde:	78fb      	ldrb	r3, [r7, #3]
 800dce0:	4619      	mov	r1, r3
 800dce2:	f7fe fd48 	bl	800c776 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 800dce6:	bf00      	nop
 800dce8:	3708      	adds	r7, #8
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}

0800dcee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcee:	b580      	push	{r7, lr}
 800dcf0:	b082      	sub	sp, #8
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	6078      	str	r0, [r7, #4]
 800dcf6:	460b      	mov	r3, r1
 800dcf8:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f8d3 02d8 	ldr.w	r0, [r3, #728]	; 0x2d8
 800dd00:	78fa      	ldrb	r2, [r7, #3]
 800dd02:	6879      	ldr	r1, [r7, #4]
 800dd04:	4613      	mov	r3, r2
 800dd06:	009b      	lsls	r3, r3, #2
 800dd08:	4413      	add	r3, r2
 800dd0a:	00db      	lsls	r3, r3, #3
 800dd0c:	440b      	add	r3, r1
 800dd0e:	3324      	adds	r3, #36	; 0x24
 800dd10:	681a      	ldr	r2, [r3, #0]
 800dd12:	78fb      	ldrb	r3, [r7, #3]
 800dd14:	4619      	mov	r1, r3
 800dd16:	f7fe fd91 	bl	800c83c <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 800dd1a:	bf00      	nop
 800dd1c:	3708      	adds	r7, #8
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}

0800dd22 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b082      	sub	sp, #8
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7fe fea5 	bl	800ca80 <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 800dd36:	bf00      	nop
 800dd38:	3708      	adds	r7, #8
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}

0800dd3e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd3e:	b580      	push	{r7, lr}
 800dd40:	b084      	sub	sp, #16
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dd46:	2301      	movs	r3, #1
 800dd48:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	795b      	ldrb	r3, [r3, #5]
 800dd4e:	2b02      	cmp	r3, #2
 800dd50:	d001      	beq.n	800dd56 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dd52:	f7f4 f963 	bl	800201c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dd5c:	7bfa      	ldrb	r2, [r7, #15]
 800dd5e:	4611      	mov	r1, r2
 800dd60:	4618      	mov	r0, r3
 800dd62:	f7fe fe4f 	bl	800ca04 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dd6c:	4618      	mov	r0, r3
 800dd6e:	f7fe fdfb 	bl	800c968 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 800dd72:	bf00      	nop
 800dd74:	3710      	adds	r7, #16
 800dd76:	46bd      	mov	sp, r7
 800dd78:	bd80      	pop	{r7, pc}
	...

0800dd7c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b082      	sub	sp, #8
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	f7fe fe4a 	bl	800ca24 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	7a5b      	ldrb	r3, [r3, #9]
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d005      	beq.n	800dda4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dd98:	4b04      	ldr	r3, [pc, #16]	; (800ddac <HAL_PCD_SuspendCallback+0x30>)
 800dd9a:	691b      	ldr	r3, [r3, #16]
 800dd9c:	4a03      	ldr	r2, [pc, #12]	; (800ddac <HAL_PCD_SuspendCallback+0x30>)
 800dd9e:	f043 0306 	orr.w	r3, r3, #6
 800dda2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 800dda4:	bf00      	nop
 800dda6:	3708      	adds	r7, #8
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	bd80      	pop	{r7, pc}
 800ddac:	e000ed00 	.word	0xe000ed00

0800ddb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b082      	sub	sp, #8
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	7a5b      	ldrb	r3, [r3, #9]
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d007      	beq.n	800ddd0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ddc0:	4b08      	ldr	r3, [pc, #32]	; (800dde4 <HAL_PCD_ResumeCallback+0x34>)
 800ddc2:	691b      	ldr	r3, [r3, #16]
 800ddc4:	4a07      	ldr	r2, [pc, #28]	; (800dde4 <HAL_PCD_ResumeCallback+0x34>)
 800ddc6:	f023 0306 	bic.w	r3, r3, #6
 800ddca:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800ddcc:	f000 f9f8 	bl	800e1c0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f7fe fe3a 	bl	800ca50 <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 800dddc:	bf00      	nop
 800ddde:	3708      	adds	r7, #8
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}
 800dde4:	e000ed00 	.word	0xe000ed00

0800dde8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dde8:	b580      	push	{r7, lr}
 800ddea:	b082      	sub	sp, #8
 800ddec:	af00      	add	r7, sp, #0
 800ddee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 800ddf0:	4a2b      	ldr	r2, [pc, #172]	; (800dea0 <USBD_LL_Init+0xb8>)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f8c2 32d8 	str.w	r3, [r2, #728]	; 0x2d8
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	4a29      	ldr	r2, [pc, #164]	; (800dea0 <USBD_LL_Init+0xb8>)
 800ddfc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 800de00:	4b27      	ldr	r3, [pc, #156]	; (800dea0 <USBD_LL_Init+0xb8>)
 800de02:	4a28      	ldr	r2, [pc, #160]	; (800dea4 <USBD_LL_Init+0xbc>)
 800de04:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800de06:	4b26      	ldr	r3, [pc, #152]	; (800dea0 <USBD_LL_Init+0xb8>)
 800de08:	2208      	movs	r2, #8
 800de0a:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800de0c:	4b24      	ldr	r3, [pc, #144]	; (800dea0 <USBD_LL_Init+0xb8>)
 800de0e:	2202      	movs	r2, #2
 800de10:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800de12:	4b23      	ldr	r3, [pc, #140]	; (800dea0 <USBD_LL_Init+0xb8>)
 800de14:	2202      	movs	r2, #2
 800de16:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800de18:	4b21      	ldr	r3, [pc, #132]	; (800dea0 <USBD_LL_Init+0xb8>)
 800de1a:	2200      	movs	r2, #0
 800de1c:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800de1e:	4b20      	ldr	r3, [pc, #128]	; (800dea0 <USBD_LL_Init+0xb8>)
 800de20:	2200      	movs	r2, #0
 800de22:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800de24:	4b1e      	ldr	r3, [pc, #120]	; (800dea0 <USBD_LL_Init+0xb8>)
 800de26:	2200      	movs	r2, #0
 800de28:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800de2a:	4b1d      	ldr	r3, [pc, #116]	; (800dea0 <USBD_LL_Init+0xb8>)
 800de2c:	2200      	movs	r2, #0
 800de2e:	72da      	strb	r2, [r3, #11]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800de30:	481b      	ldr	r0, [pc, #108]	; (800dea0 <USBD_LL_Init+0xb8>)
 800de32:	f7f8 fa0e 	bl	8006252 <HAL_PCD_Init>
 800de36:	4603      	mov	r3, r0
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d001      	beq.n	800de40 <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 800de3c:	f7f4 f8ee 	bl	800201c <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800de46:	2318      	movs	r3, #24
 800de48:	2200      	movs	r2, #0
 800de4a:	2100      	movs	r1, #0
 800de4c:	f7f9 fec8 	bl	8007be0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800de56:	2358      	movs	r3, #88	; 0x58
 800de58:	2200      	movs	r2, #0
 800de5a:	2180      	movs	r1, #128	; 0x80
 800de5c:	f7f9 fec0 	bl	8007be0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800de66:	23c0      	movs	r3, #192	; 0xc0
 800de68:	2200      	movs	r2, #0
 800de6a:	2181      	movs	r1, #129	; 0x81
 800de6c:	f7f9 feb8 	bl	8007be0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800de76:	f44f 7388 	mov.w	r3, #272	; 0x110
 800de7a:	2200      	movs	r2, #0
 800de7c:	2101      	movs	r1, #1
 800de7e:	f7f9 feaf 	bl	8007be0 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800de88:	f44f 7380 	mov.w	r3, #256	; 0x100
 800de8c:	2200      	movs	r2, #0
 800de8e:	2182      	movs	r1, #130	; 0x82
 800de90:	f7f9 fea6 	bl	8007be0 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800de94:	2300      	movs	r3, #0
}
 800de96:	4618      	mov	r0, r3
 800de98:	3708      	adds	r7, #8
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}
 800de9e:	bf00      	nop
 800dea0:	20003cc0 	.word	0x20003cc0
 800dea4:	40005c00 	.word	0x40005c00

0800dea8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b084      	sub	sp, #16
 800deac:	af00      	add	r7, sp, #0
 800deae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800deb0:	2300      	movs	r3, #0
 800deb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800deb4:	2300      	movs	r3, #0
 800deb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800debe:	4618      	mov	r0, r3
 800dec0:	f7f8 fa95 	bl	80063ee <HAL_PCD_Start>
 800dec4:	4603      	mov	r3, r0
 800dec6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dec8:	7bfb      	ldrb	r3, [r7, #15]
 800deca:	4618      	mov	r0, r3
 800decc:	f000 f97e 	bl	800e1cc <USBD_Get_USB_Status>
 800ded0:	4603      	mov	r3, r0
 800ded2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ded4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ded6:	4618      	mov	r0, r3
 800ded8:	3710      	adds	r7, #16
 800deda:	46bd      	mov	sp, r7
 800dedc:	bd80      	pop	{r7, pc}

0800dede <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800dede:	b580      	push	{r7, lr}
 800dee0:	b084      	sub	sp, #16
 800dee2:	af00      	add	r7, sp, #0
 800dee4:	6078      	str	r0, [r7, #4]
 800dee6:	4608      	mov	r0, r1
 800dee8:	4611      	mov	r1, r2
 800deea:	461a      	mov	r2, r3
 800deec:	4603      	mov	r3, r0
 800deee:	70fb      	strb	r3, [r7, #3]
 800def0:	460b      	mov	r3, r1
 800def2:	70bb      	strb	r3, [r7, #2]
 800def4:	4613      	mov	r3, r2
 800def6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800def8:	2300      	movs	r3, #0
 800defa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800defc:	2300      	movs	r3, #0
 800defe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800df06:	78bb      	ldrb	r3, [r7, #2]
 800df08:	883a      	ldrh	r2, [r7, #0]
 800df0a:	78f9      	ldrb	r1, [r7, #3]
 800df0c:	f7f8 fbdc 	bl	80066c8 <HAL_PCD_EP_Open>
 800df10:	4603      	mov	r3, r0
 800df12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df14:	7bfb      	ldrb	r3, [r7, #15]
 800df16:	4618      	mov	r0, r3
 800df18:	f000 f958 	bl	800e1cc <USBD_Get_USB_Status>
 800df1c:	4603      	mov	r3, r0
 800df1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df20:	7bbb      	ldrb	r3, [r7, #14]
}
 800df22:	4618      	mov	r0, r3
 800df24:	3710      	adds	r7, #16
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}

0800df2a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df2a:	b580      	push	{r7, lr}
 800df2c:	b084      	sub	sp, #16
 800df2e:	af00      	add	r7, sp, #0
 800df30:	6078      	str	r0, [r7, #4]
 800df32:	460b      	mov	r3, r1
 800df34:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df36:	2300      	movs	r3, #0
 800df38:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df3a:	2300      	movs	r3, #0
 800df3c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800df44:	78fa      	ldrb	r2, [r7, #3]
 800df46:	4611      	mov	r1, r2
 800df48:	4618      	mov	r0, r3
 800df4a:	f7f8 fc1a 	bl	8006782 <HAL_PCD_EP_Close>
 800df4e:	4603      	mov	r3, r0
 800df50:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df52:	7bfb      	ldrb	r3, [r7, #15]
 800df54:	4618      	mov	r0, r3
 800df56:	f000 f939 	bl	800e1cc <USBD_Get_USB_Status>
 800df5a:	4603      	mov	r3, r0
 800df5c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df5e:	7bbb      	ldrb	r3, [r7, #14]
}
 800df60:	4618      	mov	r0, r3
 800df62:	3710      	adds	r7, #16
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	460b      	mov	r3, r1
 800df72:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df74:	2300      	movs	r3, #0
 800df76:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df78:	2300      	movs	r3, #0
 800df7a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800df82:	78fa      	ldrb	r2, [r7, #3]
 800df84:	4611      	mov	r1, r2
 800df86:	4618      	mov	r0, r3
 800df88:	f7f8 fcc3 	bl	8006912 <HAL_PCD_EP_SetStall>
 800df8c:	4603      	mov	r3, r0
 800df8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df90:	7bfb      	ldrb	r3, [r7, #15]
 800df92:	4618      	mov	r0, r3
 800df94:	f000 f91a 	bl	800e1cc <USBD_Get_USB_Status>
 800df98:	4603      	mov	r3, r0
 800df9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df9c:	7bbb      	ldrb	r3, [r7, #14]
}
 800df9e:	4618      	mov	r0, r3
 800dfa0:	3710      	adds	r7, #16
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}

0800dfa6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfa6:	b580      	push	{r7, lr}
 800dfa8:	b084      	sub	sp, #16
 800dfaa:	af00      	add	r7, sp, #0
 800dfac:	6078      	str	r0, [r7, #4]
 800dfae:	460b      	mov	r3, r1
 800dfb0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfb2:	2300      	movs	r3, #0
 800dfb4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dfc0:	78fa      	ldrb	r2, [r7, #3]
 800dfc2:	4611      	mov	r1, r2
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f7f8 fcf6 	bl	80069b6 <HAL_PCD_EP_ClrStall>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfce:	7bfb      	ldrb	r3, [r7, #15]
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f000 f8fb 	bl	800e1cc <USBD_Get_USB_Status>
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800dfda:	7bbb      	ldrb	r3, [r7, #14]
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	3710      	adds	r7, #16
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfe4:	b480      	push	{r7}
 800dfe6:	b085      	sub	sp, #20
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	460b      	mov	r3, r1
 800dfee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800dff6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800dff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	da0b      	bge.n	800e018 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e000:	78fb      	ldrb	r3, [r7, #3]
 800e002:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e006:	68f9      	ldr	r1, [r7, #12]
 800e008:	4613      	mov	r3, r2
 800e00a:	009b      	lsls	r3, r3, #2
 800e00c:	4413      	add	r3, r2
 800e00e:	00db      	lsls	r3, r3, #3
 800e010:	440b      	add	r3, r1
 800e012:	3312      	adds	r3, #18
 800e014:	781b      	ldrb	r3, [r3, #0]
 800e016:	e00b      	b.n	800e030 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e018:	78fb      	ldrb	r3, [r7, #3]
 800e01a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e01e:	68f9      	ldr	r1, [r7, #12]
 800e020:	4613      	mov	r3, r2
 800e022:	009b      	lsls	r3, r3, #2
 800e024:	4413      	add	r3, r2
 800e026:	00db      	lsls	r3, r3, #3
 800e028:	440b      	add	r3, r1
 800e02a:	f503 73a9 	add.w	r3, r3, #338	; 0x152
 800e02e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e030:	4618      	mov	r0, r3
 800e032:	3714      	adds	r7, #20
 800e034:	46bd      	mov	sp, r7
 800e036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e03a:	4770      	bx	lr

0800e03c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
 800e042:	6078      	str	r0, [r7, #4]
 800e044:	460b      	mov	r3, r1
 800e046:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e048:	2300      	movs	r3, #0
 800e04a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e04c:	2300      	movs	r3, #0
 800e04e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e056:	78fa      	ldrb	r2, [r7, #3]
 800e058:	4611      	mov	r1, r2
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7f8 fb10 	bl	8006680 <HAL_PCD_SetAddress>
 800e060:	4603      	mov	r3, r0
 800e062:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e064:	7bfb      	ldrb	r3, [r7, #15]
 800e066:	4618      	mov	r0, r3
 800e068:	f000 f8b0 	bl	800e1cc <USBD_Get_USB_Status>
 800e06c:	4603      	mov	r3, r0
 800e06e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e070:	7bbb      	ldrb	r3, [r7, #14]
}
 800e072:	4618      	mov	r0, r3
 800e074:	3710      	adds	r7, #16
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}

0800e07a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e07a:	b580      	push	{r7, lr}
 800e07c:	b086      	sub	sp, #24
 800e07e:	af00      	add	r7, sp, #0
 800e080:	60f8      	str	r0, [r7, #12]
 800e082:	607a      	str	r2, [r7, #4]
 800e084:	603b      	str	r3, [r7, #0]
 800e086:	460b      	mov	r3, r1
 800e088:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e08a:	2300      	movs	r3, #0
 800e08c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e08e:	2300      	movs	r3, #0
 800e090:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e098:	7af9      	ldrb	r1, [r7, #11]
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	687a      	ldr	r2, [r7, #4]
 800e09e:	f7f8 fc01 	bl	80068a4 <HAL_PCD_EP_Transmit>
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0a6:	7dfb      	ldrb	r3, [r7, #23]
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f000 f88f 	bl	800e1cc <USBD_Get_USB_Status>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e0b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	3718      	adds	r7, #24
 800e0b8:	46bd      	mov	sp, r7
 800e0ba:	bd80      	pop	{r7, pc}

0800e0bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b086      	sub	sp, #24
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	60f8      	str	r0, [r7, #12]
 800e0c4:	607a      	str	r2, [r7, #4]
 800e0c6:	603b      	str	r3, [r7, #0]
 800e0c8:	460b      	mov	r3, r1
 800e0ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800e0da:	7af9      	ldrb	r1, [r7, #11]
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	687a      	ldr	r2, [r7, #4]
 800e0e0:	f7f8 fb97 	bl	8006812 <HAL_PCD_EP_Receive>
 800e0e4:	4603      	mov	r3, r0
 800e0e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e0e8:	7dfb      	ldrb	r3, [r7, #23]
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	f000 f86e 	bl	800e1cc <USBD_Get_USB_Status>
 800e0f0:	4603      	mov	r3, r0
 800e0f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e0f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3718      	adds	r7, #24
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}

0800e0fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e0fe:	b580      	push	{r7, lr}
 800e100:	b082      	sub	sp, #8
 800e102:	af00      	add	r7, sp, #0
 800e104:	6078      	str	r0, [r7, #4]
 800e106:	460b      	mov	r3, r1
 800e108:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e110:	78fa      	ldrb	r2, [r7, #3]
 800e112:	4611      	mov	r1, r2
 800e114:	4618      	mov	r0, r3
 800e116:	f7f8 fbad 	bl	8006874 <HAL_PCD_EP_GetRxCount>
 800e11a:	4603      	mov	r3, r0
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3708      	adds	r7, #8
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}

0800e124 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e124:	b580      	push	{r7, lr}
 800e126:	b082      	sub	sp, #8
 800e128:	af00      	add	r7, sp, #0
 800e12a:	6078      	str	r0, [r7, #4]
 800e12c:	460b      	mov	r3, r1
 800e12e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800e130:	78fb      	ldrb	r3, [r7, #3]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d002      	beq.n	800e13c <HAL_PCDEx_LPM_Callback+0x18>
 800e136:	2b01      	cmp	r3, #1
 800e138:	d013      	beq.n	800e162 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800e13a:	e023      	b.n	800e184 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	7a5b      	ldrb	r3, [r3, #9]
 800e140:	2b00      	cmp	r3, #0
 800e142:	d007      	beq.n	800e154 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e144:	f000 f83c 	bl	800e1c0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e148:	4b10      	ldr	r3, [pc, #64]	; (800e18c <HAL_PCDEx_LPM_Callback+0x68>)
 800e14a:	691b      	ldr	r3, [r3, #16]
 800e14c:	4a0f      	ldr	r2, [pc, #60]	; (800e18c <HAL_PCDEx_LPM_Callback+0x68>)
 800e14e:	f023 0306 	bic.w	r3, r3, #6
 800e152:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e15a:	4618      	mov	r0, r3
 800e15c:	f7fe fc78 	bl	800ca50 <USBD_LL_Resume>
    break;
 800e160:	e010      	b.n	800e184 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e168:	4618      	mov	r0, r3
 800e16a:	f7fe fc5b 	bl	800ca24 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	7a5b      	ldrb	r3, [r3, #9]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d005      	beq.n	800e182 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e176:	4b05      	ldr	r3, [pc, #20]	; (800e18c <HAL_PCDEx_LPM_Callback+0x68>)
 800e178:	691b      	ldr	r3, [r3, #16]
 800e17a:	4a04      	ldr	r2, [pc, #16]	; (800e18c <HAL_PCDEx_LPM_Callback+0x68>)
 800e17c:	f043 0306 	orr.w	r3, r3, #6
 800e180:	6113      	str	r3, [r2, #16]
    break;
 800e182:	bf00      	nop
}
 800e184:	bf00      	nop
 800e186:	3708      	adds	r7, #8
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}
 800e18c:	e000ed00 	.word	0xe000ed00

0800e190 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e190:	b480      	push	{r7}
 800e192:	b083      	sub	sp, #12
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e198:	4b03      	ldr	r3, [pc, #12]	; (800e1a8 <USBD_static_malloc+0x18>)
}
 800e19a:	4618      	mov	r0, r3
 800e19c:	370c      	adds	r7, #12
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1a4:	4770      	bx	lr
 800e1a6:	bf00      	nop
 800e1a8:	20003f9c 	.word	0x20003f9c

0800e1ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b083      	sub	sp, #12
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]

}
 800e1b4:	bf00      	nop
 800e1b6:	370c      	adds	r7, #12
 800e1b8:	46bd      	mov	sp, r7
 800e1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1be:	4770      	bx	lr

0800e1c0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e1c4:	f7f2 fe54 	bl	8000e70 <SystemClock_Config>
}
 800e1c8:	bf00      	nop
 800e1ca:	bd80      	pop	{r7, pc}

0800e1cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e1cc:	b480      	push	{r7}
 800e1ce:	b085      	sub	sp, #20
 800e1d0:	af00      	add	r7, sp, #0
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e1da:	79fb      	ldrb	r3, [r7, #7]
 800e1dc:	2b03      	cmp	r3, #3
 800e1de:	d817      	bhi.n	800e210 <USBD_Get_USB_Status+0x44>
 800e1e0:	a201      	add	r2, pc, #4	; (adr r2, 800e1e8 <USBD_Get_USB_Status+0x1c>)
 800e1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1e6:	bf00      	nop
 800e1e8:	0800e1f9 	.word	0x0800e1f9
 800e1ec:	0800e1ff 	.word	0x0800e1ff
 800e1f0:	0800e205 	.word	0x0800e205
 800e1f4:	0800e20b 	.word	0x0800e20b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	73fb      	strb	r3, [r7, #15]
    break;
 800e1fc:	e00b      	b.n	800e216 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e1fe:	2303      	movs	r3, #3
 800e200:	73fb      	strb	r3, [r7, #15]
    break;
 800e202:	e008      	b.n	800e216 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e204:	2301      	movs	r3, #1
 800e206:	73fb      	strb	r3, [r7, #15]
    break;
 800e208:	e005      	b.n	800e216 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e20a:	2303      	movs	r3, #3
 800e20c:	73fb      	strb	r3, [r7, #15]
    break;
 800e20e:	e002      	b.n	800e216 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e210:	2303      	movs	r3, #3
 800e212:	73fb      	strb	r3, [r7, #15]
    break;
 800e214:	bf00      	nop
  }
  return usb_status;
 800e216:	7bfb      	ldrb	r3, [r7, #15]
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3714      	adds	r7, #20
 800e21c:	46bd      	mov	sp, r7
 800e21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e222:	4770      	bx	lr

0800e224 <atoi>:
 800e224:	220a      	movs	r2, #10
 800e226:	2100      	movs	r1, #0
 800e228:	f000 b882 	b.w	800e330 <strtol>

0800e22c <_strtol_l.constprop.0>:
 800e22c:	2b01      	cmp	r3, #1
 800e22e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e232:	d001      	beq.n	800e238 <_strtol_l.constprop.0+0xc>
 800e234:	2b24      	cmp	r3, #36	; 0x24
 800e236:	d906      	bls.n	800e246 <_strtol_l.constprop.0+0x1a>
 800e238:	f000 fe74 	bl	800ef24 <__errno>
 800e23c:	2316      	movs	r3, #22
 800e23e:	6003      	str	r3, [r0, #0]
 800e240:	2000      	movs	r0, #0
 800e242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e246:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e32c <_strtol_l.constprop.0+0x100>
 800e24a:	460d      	mov	r5, r1
 800e24c:	462e      	mov	r6, r5
 800e24e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e252:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800e256:	f017 0708 	ands.w	r7, r7, #8
 800e25a:	d1f7      	bne.n	800e24c <_strtol_l.constprop.0+0x20>
 800e25c:	2c2d      	cmp	r4, #45	; 0x2d
 800e25e:	d132      	bne.n	800e2c6 <_strtol_l.constprop.0+0x9a>
 800e260:	782c      	ldrb	r4, [r5, #0]
 800e262:	2701      	movs	r7, #1
 800e264:	1cb5      	adds	r5, r6, #2
 800e266:	2b00      	cmp	r3, #0
 800e268:	d05b      	beq.n	800e322 <_strtol_l.constprop.0+0xf6>
 800e26a:	2b10      	cmp	r3, #16
 800e26c:	d109      	bne.n	800e282 <_strtol_l.constprop.0+0x56>
 800e26e:	2c30      	cmp	r4, #48	; 0x30
 800e270:	d107      	bne.n	800e282 <_strtol_l.constprop.0+0x56>
 800e272:	782c      	ldrb	r4, [r5, #0]
 800e274:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e278:	2c58      	cmp	r4, #88	; 0x58
 800e27a:	d14d      	bne.n	800e318 <_strtol_l.constprop.0+0xec>
 800e27c:	786c      	ldrb	r4, [r5, #1]
 800e27e:	2310      	movs	r3, #16
 800e280:	3502      	adds	r5, #2
 800e282:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e286:	f108 38ff 	add.w	r8, r8, #4294967295
 800e28a:	f04f 0e00 	mov.w	lr, #0
 800e28e:	fbb8 f9f3 	udiv	r9, r8, r3
 800e292:	4676      	mov	r6, lr
 800e294:	fb03 8a19 	mls	sl, r3, r9, r8
 800e298:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e29c:	f1bc 0f09 	cmp.w	ip, #9
 800e2a0:	d816      	bhi.n	800e2d0 <_strtol_l.constprop.0+0xa4>
 800e2a2:	4664      	mov	r4, ip
 800e2a4:	42a3      	cmp	r3, r4
 800e2a6:	dd24      	ble.n	800e2f2 <_strtol_l.constprop.0+0xc6>
 800e2a8:	f1be 3fff 	cmp.w	lr, #4294967295
 800e2ac:	d008      	beq.n	800e2c0 <_strtol_l.constprop.0+0x94>
 800e2ae:	45b1      	cmp	r9, r6
 800e2b0:	d31c      	bcc.n	800e2ec <_strtol_l.constprop.0+0xc0>
 800e2b2:	d101      	bne.n	800e2b8 <_strtol_l.constprop.0+0x8c>
 800e2b4:	45a2      	cmp	sl, r4
 800e2b6:	db19      	blt.n	800e2ec <_strtol_l.constprop.0+0xc0>
 800e2b8:	fb06 4603 	mla	r6, r6, r3, r4
 800e2bc:	f04f 0e01 	mov.w	lr, #1
 800e2c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e2c4:	e7e8      	b.n	800e298 <_strtol_l.constprop.0+0x6c>
 800e2c6:	2c2b      	cmp	r4, #43	; 0x2b
 800e2c8:	bf04      	itt	eq
 800e2ca:	782c      	ldrbeq	r4, [r5, #0]
 800e2cc:	1cb5      	addeq	r5, r6, #2
 800e2ce:	e7ca      	b.n	800e266 <_strtol_l.constprop.0+0x3a>
 800e2d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e2d4:	f1bc 0f19 	cmp.w	ip, #25
 800e2d8:	d801      	bhi.n	800e2de <_strtol_l.constprop.0+0xb2>
 800e2da:	3c37      	subs	r4, #55	; 0x37
 800e2dc:	e7e2      	b.n	800e2a4 <_strtol_l.constprop.0+0x78>
 800e2de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e2e2:	f1bc 0f19 	cmp.w	ip, #25
 800e2e6:	d804      	bhi.n	800e2f2 <_strtol_l.constprop.0+0xc6>
 800e2e8:	3c57      	subs	r4, #87	; 0x57
 800e2ea:	e7db      	b.n	800e2a4 <_strtol_l.constprop.0+0x78>
 800e2ec:	f04f 3eff 	mov.w	lr, #4294967295
 800e2f0:	e7e6      	b.n	800e2c0 <_strtol_l.constprop.0+0x94>
 800e2f2:	f1be 3fff 	cmp.w	lr, #4294967295
 800e2f6:	d105      	bne.n	800e304 <_strtol_l.constprop.0+0xd8>
 800e2f8:	2322      	movs	r3, #34	; 0x22
 800e2fa:	6003      	str	r3, [r0, #0]
 800e2fc:	4646      	mov	r6, r8
 800e2fe:	b942      	cbnz	r2, 800e312 <_strtol_l.constprop.0+0xe6>
 800e300:	4630      	mov	r0, r6
 800e302:	e79e      	b.n	800e242 <_strtol_l.constprop.0+0x16>
 800e304:	b107      	cbz	r7, 800e308 <_strtol_l.constprop.0+0xdc>
 800e306:	4276      	negs	r6, r6
 800e308:	2a00      	cmp	r2, #0
 800e30a:	d0f9      	beq.n	800e300 <_strtol_l.constprop.0+0xd4>
 800e30c:	f1be 0f00 	cmp.w	lr, #0
 800e310:	d000      	beq.n	800e314 <_strtol_l.constprop.0+0xe8>
 800e312:	1e69      	subs	r1, r5, #1
 800e314:	6011      	str	r1, [r2, #0]
 800e316:	e7f3      	b.n	800e300 <_strtol_l.constprop.0+0xd4>
 800e318:	2430      	movs	r4, #48	; 0x30
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d1b1      	bne.n	800e282 <_strtol_l.constprop.0+0x56>
 800e31e:	2308      	movs	r3, #8
 800e320:	e7af      	b.n	800e282 <_strtol_l.constprop.0+0x56>
 800e322:	2c30      	cmp	r4, #48	; 0x30
 800e324:	d0a5      	beq.n	800e272 <_strtol_l.constprop.0+0x46>
 800e326:	230a      	movs	r3, #10
 800e328:	e7ab      	b.n	800e282 <_strtol_l.constprop.0+0x56>
 800e32a:	bf00      	nop
 800e32c:	08012129 	.word	0x08012129

0800e330 <strtol>:
 800e330:	4613      	mov	r3, r2
 800e332:	460a      	mov	r2, r1
 800e334:	4601      	mov	r1, r0
 800e336:	4802      	ldr	r0, [pc, #8]	; (800e340 <strtol+0x10>)
 800e338:	6800      	ldr	r0, [r0, #0]
 800e33a:	f7ff bf77 	b.w	800e22c <_strtol_l.constprop.0>
 800e33e:	bf00      	nop
 800e340:	200001ec 	.word	0x200001ec

0800e344 <__cvt>:
 800e344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e348:	ec55 4b10 	vmov	r4, r5, d0
 800e34c:	2d00      	cmp	r5, #0
 800e34e:	460e      	mov	r6, r1
 800e350:	4619      	mov	r1, r3
 800e352:	462b      	mov	r3, r5
 800e354:	bfbb      	ittet	lt
 800e356:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e35a:	461d      	movlt	r5, r3
 800e35c:	2300      	movge	r3, #0
 800e35e:	232d      	movlt	r3, #45	; 0x2d
 800e360:	700b      	strb	r3, [r1, #0]
 800e362:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e364:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e368:	4691      	mov	r9, r2
 800e36a:	f023 0820 	bic.w	r8, r3, #32
 800e36e:	bfbc      	itt	lt
 800e370:	4622      	movlt	r2, r4
 800e372:	4614      	movlt	r4, r2
 800e374:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e378:	d005      	beq.n	800e386 <__cvt+0x42>
 800e37a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e37e:	d100      	bne.n	800e382 <__cvt+0x3e>
 800e380:	3601      	adds	r6, #1
 800e382:	2102      	movs	r1, #2
 800e384:	e000      	b.n	800e388 <__cvt+0x44>
 800e386:	2103      	movs	r1, #3
 800e388:	ab03      	add	r3, sp, #12
 800e38a:	9301      	str	r3, [sp, #4]
 800e38c:	ab02      	add	r3, sp, #8
 800e38e:	9300      	str	r3, [sp, #0]
 800e390:	ec45 4b10 	vmov	d0, r4, r5
 800e394:	4653      	mov	r3, sl
 800e396:	4632      	mov	r2, r6
 800e398:	f000 fe8a 	bl	800f0b0 <_dtoa_r>
 800e39c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e3a0:	4607      	mov	r7, r0
 800e3a2:	d102      	bne.n	800e3aa <__cvt+0x66>
 800e3a4:	f019 0f01 	tst.w	r9, #1
 800e3a8:	d022      	beq.n	800e3f0 <__cvt+0xac>
 800e3aa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e3ae:	eb07 0906 	add.w	r9, r7, r6
 800e3b2:	d110      	bne.n	800e3d6 <__cvt+0x92>
 800e3b4:	783b      	ldrb	r3, [r7, #0]
 800e3b6:	2b30      	cmp	r3, #48	; 0x30
 800e3b8:	d10a      	bne.n	800e3d0 <__cvt+0x8c>
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	2300      	movs	r3, #0
 800e3be:	4620      	mov	r0, r4
 800e3c0:	4629      	mov	r1, r5
 800e3c2:	f7f2 fbb9 	bl	8000b38 <__aeabi_dcmpeq>
 800e3c6:	b918      	cbnz	r0, 800e3d0 <__cvt+0x8c>
 800e3c8:	f1c6 0601 	rsb	r6, r6, #1
 800e3cc:	f8ca 6000 	str.w	r6, [sl]
 800e3d0:	f8da 3000 	ldr.w	r3, [sl]
 800e3d4:	4499      	add	r9, r3
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	2300      	movs	r3, #0
 800e3da:	4620      	mov	r0, r4
 800e3dc:	4629      	mov	r1, r5
 800e3de:	f7f2 fbab 	bl	8000b38 <__aeabi_dcmpeq>
 800e3e2:	b108      	cbz	r0, 800e3e8 <__cvt+0xa4>
 800e3e4:	f8cd 900c 	str.w	r9, [sp, #12]
 800e3e8:	2230      	movs	r2, #48	; 0x30
 800e3ea:	9b03      	ldr	r3, [sp, #12]
 800e3ec:	454b      	cmp	r3, r9
 800e3ee:	d307      	bcc.n	800e400 <__cvt+0xbc>
 800e3f0:	9b03      	ldr	r3, [sp, #12]
 800e3f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3f4:	1bdb      	subs	r3, r3, r7
 800e3f6:	4638      	mov	r0, r7
 800e3f8:	6013      	str	r3, [r2, #0]
 800e3fa:	b004      	add	sp, #16
 800e3fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e400:	1c59      	adds	r1, r3, #1
 800e402:	9103      	str	r1, [sp, #12]
 800e404:	701a      	strb	r2, [r3, #0]
 800e406:	e7f0      	b.n	800e3ea <__cvt+0xa6>

0800e408 <__exponent>:
 800e408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e40a:	4603      	mov	r3, r0
 800e40c:	2900      	cmp	r1, #0
 800e40e:	bfb8      	it	lt
 800e410:	4249      	neglt	r1, r1
 800e412:	f803 2b02 	strb.w	r2, [r3], #2
 800e416:	bfb4      	ite	lt
 800e418:	222d      	movlt	r2, #45	; 0x2d
 800e41a:	222b      	movge	r2, #43	; 0x2b
 800e41c:	2909      	cmp	r1, #9
 800e41e:	7042      	strb	r2, [r0, #1]
 800e420:	dd2a      	ble.n	800e478 <__exponent+0x70>
 800e422:	f10d 0207 	add.w	r2, sp, #7
 800e426:	4617      	mov	r7, r2
 800e428:	260a      	movs	r6, #10
 800e42a:	4694      	mov	ip, r2
 800e42c:	fb91 f5f6 	sdiv	r5, r1, r6
 800e430:	fb06 1415 	mls	r4, r6, r5, r1
 800e434:	3430      	adds	r4, #48	; 0x30
 800e436:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e43a:	460c      	mov	r4, r1
 800e43c:	2c63      	cmp	r4, #99	; 0x63
 800e43e:	f102 32ff 	add.w	r2, r2, #4294967295
 800e442:	4629      	mov	r1, r5
 800e444:	dcf1      	bgt.n	800e42a <__exponent+0x22>
 800e446:	3130      	adds	r1, #48	; 0x30
 800e448:	f1ac 0402 	sub.w	r4, ip, #2
 800e44c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e450:	1c41      	adds	r1, r0, #1
 800e452:	4622      	mov	r2, r4
 800e454:	42ba      	cmp	r2, r7
 800e456:	d30a      	bcc.n	800e46e <__exponent+0x66>
 800e458:	f10d 0209 	add.w	r2, sp, #9
 800e45c:	eba2 020c 	sub.w	r2, r2, ip
 800e460:	42bc      	cmp	r4, r7
 800e462:	bf88      	it	hi
 800e464:	2200      	movhi	r2, #0
 800e466:	4413      	add	r3, r2
 800e468:	1a18      	subs	r0, r3, r0
 800e46a:	b003      	add	sp, #12
 800e46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e46e:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e472:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e476:	e7ed      	b.n	800e454 <__exponent+0x4c>
 800e478:	2330      	movs	r3, #48	; 0x30
 800e47a:	3130      	adds	r1, #48	; 0x30
 800e47c:	7083      	strb	r3, [r0, #2]
 800e47e:	70c1      	strb	r1, [r0, #3]
 800e480:	1d03      	adds	r3, r0, #4
 800e482:	e7f1      	b.n	800e468 <__exponent+0x60>

0800e484 <_printf_float>:
 800e484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e488:	ed2d 8b02 	vpush	{d8}
 800e48c:	b08d      	sub	sp, #52	; 0x34
 800e48e:	460c      	mov	r4, r1
 800e490:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e494:	4616      	mov	r6, r2
 800e496:	461f      	mov	r7, r3
 800e498:	4605      	mov	r5, r0
 800e49a:	f000 fcf9 	bl	800ee90 <_localeconv_r>
 800e49e:	f8d0 a000 	ldr.w	sl, [r0]
 800e4a2:	4650      	mov	r0, sl
 800e4a4:	f7f1 ff1c 	bl	80002e0 <strlen>
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	930a      	str	r3, [sp, #40]	; 0x28
 800e4ac:	6823      	ldr	r3, [r4, #0]
 800e4ae:	9305      	str	r3, [sp, #20]
 800e4b0:	f8d8 3000 	ldr.w	r3, [r8]
 800e4b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e4b8:	3307      	adds	r3, #7
 800e4ba:	f023 0307 	bic.w	r3, r3, #7
 800e4be:	f103 0208 	add.w	r2, r3, #8
 800e4c2:	f8c8 2000 	str.w	r2, [r8]
 800e4c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e4ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e4ce:	9307      	str	r3, [sp, #28]
 800e4d0:	f8cd 8018 	str.w	r8, [sp, #24]
 800e4d4:	ee08 0a10 	vmov	s16, r0
 800e4d8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e4dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4e0:	4b9e      	ldr	r3, [pc, #632]	; (800e75c <_printf_float+0x2d8>)
 800e4e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4e6:	f7f2 fb59 	bl	8000b9c <__aeabi_dcmpun>
 800e4ea:	bb88      	cbnz	r0, 800e550 <_printf_float+0xcc>
 800e4ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4f0:	4b9a      	ldr	r3, [pc, #616]	; (800e75c <_printf_float+0x2d8>)
 800e4f2:	f04f 32ff 	mov.w	r2, #4294967295
 800e4f6:	f7f2 fb33 	bl	8000b60 <__aeabi_dcmple>
 800e4fa:	bb48      	cbnz	r0, 800e550 <_printf_float+0xcc>
 800e4fc:	2200      	movs	r2, #0
 800e4fe:	2300      	movs	r3, #0
 800e500:	4640      	mov	r0, r8
 800e502:	4649      	mov	r1, r9
 800e504:	f7f2 fb22 	bl	8000b4c <__aeabi_dcmplt>
 800e508:	b110      	cbz	r0, 800e510 <_printf_float+0x8c>
 800e50a:	232d      	movs	r3, #45	; 0x2d
 800e50c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e510:	4a93      	ldr	r2, [pc, #588]	; (800e760 <_printf_float+0x2dc>)
 800e512:	4b94      	ldr	r3, [pc, #592]	; (800e764 <_printf_float+0x2e0>)
 800e514:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e518:	bf94      	ite	ls
 800e51a:	4690      	movls	r8, r2
 800e51c:	4698      	movhi	r8, r3
 800e51e:	2303      	movs	r3, #3
 800e520:	6123      	str	r3, [r4, #16]
 800e522:	9b05      	ldr	r3, [sp, #20]
 800e524:	f023 0304 	bic.w	r3, r3, #4
 800e528:	6023      	str	r3, [r4, #0]
 800e52a:	f04f 0900 	mov.w	r9, #0
 800e52e:	9700      	str	r7, [sp, #0]
 800e530:	4633      	mov	r3, r6
 800e532:	aa0b      	add	r2, sp, #44	; 0x2c
 800e534:	4621      	mov	r1, r4
 800e536:	4628      	mov	r0, r5
 800e538:	f000 f9da 	bl	800e8f0 <_printf_common>
 800e53c:	3001      	adds	r0, #1
 800e53e:	f040 8090 	bne.w	800e662 <_printf_float+0x1de>
 800e542:	f04f 30ff 	mov.w	r0, #4294967295
 800e546:	b00d      	add	sp, #52	; 0x34
 800e548:	ecbd 8b02 	vpop	{d8}
 800e54c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e550:	4642      	mov	r2, r8
 800e552:	464b      	mov	r3, r9
 800e554:	4640      	mov	r0, r8
 800e556:	4649      	mov	r1, r9
 800e558:	f7f2 fb20 	bl	8000b9c <__aeabi_dcmpun>
 800e55c:	b140      	cbz	r0, 800e570 <_printf_float+0xec>
 800e55e:	464b      	mov	r3, r9
 800e560:	2b00      	cmp	r3, #0
 800e562:	bfbc      	itt	lt
 800e564:	232d      	movlt	r3, #45	; 0x2d
 800e566:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e56a:	4a7f      	ldr	r2, [pc, #508]	; (800e768 <_printf_float+0x2e4>)
 800e56c:	4b7f      	ldr	r3, [pc, #508]	; (800e76c <_printf_float+0x2e8>)
 800e56e:	e7d1      	b.n	800e514 <_printf_float+0x90>
 800e570:	6863      	ldr	r3, [r4, #4]
 800e572:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e576:	9206      	str	r2, [sp, #24]
 800e578:	1c5a      	adds	r2, r3, #1
 800e57a:	d13f      	bne.n	800e5fc <_printf_float+0x178>
 800e57c:	2306      	movs	r3, #6
 800e57e:	6063      	str	r3, [r4, #4]
 800e580:	9b05      	ldr	r3, [sp, #20]
 800e582:	6861      	ldr	r1, [r4, #4]
 800e584:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e588:	2300      	movs	r3, #0
 800e58a:	9303      	str	r3, [sp, #12]
 800e58c:	ab0a      	add	r3, sp, #40	; 0x28
 800e58e:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e592:	ab09      	add	r3, sp, #36	; 0x24
 800e594:	ec49 8b10 	vmov	d0, r8, r9
 800e598:	9300      	str	r3, [sp, #0]
 800e59a:	6022      	str	r2, [r4, #0]
 800e59c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e5a0:	4628      	mov	r0, r5
 800e5a2:	f7ff fecf 	bl	800e344 <__cvt>
 800e5a6:	9b06      	ldr	r3, [sp, #24]
 800e5a8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e5aa:	2b47      	cmp	r3, #71	; 0x47
 800e5ac:	4680      	mov	r8, r0
 800e5ae:	d108      	bne.n	800e5c2 <_printf_float+0x13e>
 800e5b0:	1cc8      	adds	r0, r1, #3
 800e5b2:	db02      	blt.n	800e5ba <_printf_float+0x136>
 800e5b4:	6863      	ldr	r3, [r4, #4]
 800e5b6:	4299      	cmp	r1, r3
 800e5b8:	dd41      	ble.n	800e63e <_printf_float+0x1ba>
 800e5ba:	f1ab 0302 	sub.w	r3, fp, #2
 800e5be:	fa5f fb83 	uxtb.w	fp, r3
 800e5c2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e5c6:	d820      	bhi.n	800e60a <_printf_float+0x186>
 800e5c8:	3901      	subs	r1, #1
 800e5ca:	465a      	mov	r2, fp
 800e5cc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e5d0:	9109      	str	r1, [sp, #36]	; 0x24
 800e5d2:	f7ff ff19 	bl	800e408 <__exponent>
 800e5d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5d8:	1813      	adds	r3, r2, r0
 800e5da:	2a01      	cmp	r2, #1
 800e5dc:	4681      	mov	r9, r0
 800e5de:	6123      	str	r3, [r4, #16]
 800e5e0:	dc02      	bgt.n	800e5e8 <_printf_float+0x164>
 800e5e2:	6822      	ldr	r2, [r4, #0]
 800e5e4:	07d2      	lsls	r2, r2, #31
 800e5e6:	d501      	bpl.n	800e5ec <_printf_float+0x168>
 800e5e8:	3301      	adds	r3, #1
 800e5ea:	6123      	str	r3, [r4, #16]
 800e5ec:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d09c      	beq.n	800e52e <_printf_float+0xaa>
 800e5f4:	232d      	movs	r3, #45	; 0x2d
 800e5f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5fa:	e798      	b.n	800e52e <_printf_float+0xaa>
 800e5fc:	9a06      	ldr	r2, [sp, #24]
 800e5fe:	2a47      	cmp	r2, #71	; 0x47
 800e600:	d1be      	bne.n	800e580 <_printf_float+0xfc>
 800e602:	2b00      	cmp	r3, #0
 800e604:	d1bc      	bne.n	800e580 <_printf_float+0xfc>
 800e606:	2301      	movs	r3, #1
 800e608:	e7b9      	b.n	800e57e <_printf_float+0xfa>
 800e60a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e60e:	d118      	bne.n	800e642 <_printf_float+0x1be>
 800e610:	2900      	cmp	r1, #0
 800e612:	6863      	ldr	r3, [r4, #4]
 800e614:	dd0b      	ble.n	800e62e <_printf_float+0x1aa>
 800e616:	6121      	str	r1, [r4, #16]
 800e618:	b913      	cbnz	r3, 800e620 <_printf_float+0x19c>
 800e61a:	6822      	ldr	r2, [r4, #0]
 800e61c:	07d0      	lsls	r0, r2, #31
 800e61e:	d502      	bpl.n	800e626 <_printf_float+0x1a2>
 800e620:	3301      	adds	r3, #1
 800e622:	440b      	add	r3, r1
 800e624:	6123      	str	r3, [r4, #16]
 800e626:	65a1      	str	r1, [r4, #88]	; 0x58
 800e628:	f04f 0900 	mov.w	r9, #0
 800e62c:	e7de      	b.n	800e5ec <_printf_float+0x168>
 800e62e:	b913      	cbnz	r3, 800e636 <_printf_float+0x1b2>
 800e630:	6822      	ldr	r2, [r4, #0]
 800e632:	07d2      	lsls	r2, r2, #31
 800e634:	d501      	bpl.n	800e63a <_printf_float+0x1b6>
 800e636:	3302      	adds	r3, #2
 800e638:	e7f4      	b.n	800e624 <_printf_float+0x1a0>
 800e63a:	2301      	movs	r3, #1
 800e63c:	e7f2      	b.n	800e624 <_printf_float+0x1a0>
 800e63e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e642:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e644:	4299      	cmp	r1, r3
 800e646:	db05      	blt.n	800e654 <_printf_float+0x1d0>
 800e648:	6823      	ldr	r3, [r4, #0]
 800e64a:	6121      	str	r1, [r4, #16]
 800e64c:	07d8      	lsls	r0, r3, #31
 800e64e:	d5ea      	bpl.n	800e626 <_printf_float+0x1a2>
 800e650:	1c4b      	adds	r3, r1, #1
 800e652:	e7e7      	b.n	800e624 <_printf_float+0x1a0>
 800e654:	2900      	cmp	r1, #0
 800e656:	bfd4      	ite	le
 800e658:	f1c1 0202 	rsble	r2, r1, #2
 800e65c:	2201      	movgt	r2, #1
 800e65e:	4413      	add	r3, r2
 800e660:	e7e0      	b.n	800e624 <_printf_float+0x1a0>
 800e662:	6823      	ldr	r3, [r4, #0]
 800e664:	055a      	lsls	r2, r3, #21
 800e666:	d407      	bmi.n	800e678 <_printf_float+0x1f4>
 800e668:	6923      	ldr	r3, [r4, #16]
 800e66a:	4642      	mov	r2, r8
 800e66c:	4631      	mov	r1, r6
 800e66e:	4628      	mov	r0, r5
 800e670:	47b8      	blx	r7
 800e672:	3001      	adds	r0, #1
 800e674:	d12c      	bne.n	800e6d0 <_printf_float+0x24c>
 800e676:	e764      	b.n	800e542 <_printf_float+0xbe>
 800e678:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e67c:	f240 80e0 	bls.w	800e840 <_printf_float+0x3bc>
 800e680:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e684:	2200      	movs	r2, #0
 800e686:	2300      	movs	r3, #0
 800e688:	f7f2 fa56 	bl	8000b38 <__aeabi_dcmpeq>
 800e68c:	2800      	cmp	r0, #0
 800e68e:	d034      	beq.n	800e6fa <_printf_float+0x276>
 800e690:	4a37      	ldr	r2, [pc, #220]	; (800e770 <_printf_float+0x2ec>)
 800e692:	2301      	movs	r3, #1
 800e694:	4631      	mov	r1, r6
 800e696:	4628      	mov	r0, r5
 800e698:	47b8      	blx	r7
 800e69a:	3001      	adds	r0, #1
 800e69c:	f43f af51 	beq.w	800e542 <_printf_float+0xbe>
 800e6a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	db02      	blt.n	800e6ae <_printf_float+0x22a>
 800e6a8:	6823      	ldr	r3, [r4, #0]
 800e6aa:	07d8      	lsls	r0, r3, #31
 800e6ac:	d510      	bpl.n	800e6d0 <_printf_float+0x24c>
 800e6ae:	ee18 3a10 	vmov	r3, s16
 800e6b2:	4652      	mov	r2, sl
 800e6b4:	4631      	mov	r1, r6
 800e6b6:	4628      	mov	r0, r5
 800e6b8:	47b8      	blx	r7
 800e6ba:	3001      	adds	r0, #1
 800e6bc:	f43f af41 	beq.w	800e542 <_printf_float+0xbe>
 800e6c0:	f04f 0800 	mov.w	r8, #0
 800e6c4:	f104 091a 	add.w	r9, r4, #26
 800e6c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6ca:	3b01      	subs	r3, #1
 800e6cc:	4543      	cmp	r3, r8
 800e6ce:	dc09      	bgt.n	800e6e4 <_printf_float+0x260>
 800e6d0:	6823      	ldr	r3, [r4, #0]
 800e6d2:	079b      	lsls	r3, r3, #30
 800e6d4:	f100 8107 	bmi.w	800e8e6 <_printf_float+0x462>
 800e6d8:	68e0      	ldr	r0, [r4, #12]
 800e6da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6dc:	4298      	cmp	r0, r3
 800e6de:	bfb8      	it	lt
 800e6e0:	4618      	movlt	r0, r3
 800e6e2:	e730      	b.n	800e546 <_printf_float+0xc2>
 800e6e4:	2301      	movs	r3, #1
 800e6e6:	464a      	mov	r2, r9
 800e6e8:	4631      	mov	r1, r6
 800e6ea:	4628      	mov	r0, r5
 800e6ec:	47b8      	blx	r7
 800e6ee:	3001      	adds	r0, #1
 800e6f0:	f43f af27 	beq.w	800e542 <_printf_float+0xbe>
 800e6f4:	f108 0801 	add.w	r8, r8, #1
 800e6f8:	e7e6      	b.n	800e6c8 <_printf_float+0x244>
 800e6fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	dc39      	bgt.n	800e774 <_printf_float+0x2f0>
 800e700:	4a1b      	ldr	r2, [pc, #108]	; (800e770 <_printf_float+0x2ec>)
 800e702:	2301      	movs	r3, #1
 800e704:	4631      	mov	r1, r6
 800e706:	4628      	mov	r0, r5
 800e708:	47b8      	blx	r7
 800e70a:	3001      	adds	r0, #1
 800e70c:	f43f af19 	beq.w	800e542 <_printf_float+0xbe>
 800e710:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e714:	4313      	orrs	r3, r2
 800e716:	d102      	bne.n	800e71e <_printf_float+0x29a>
 800e718:	6823      	ldr	r3, [r4, #0]
 800e71a:	07d9      	lsls	r1, r3, #31
 800e71c:	d5d8      	bpl.n	800e6d0 <_printf_float+0x24c>
 800e71e:	ee18 3a10 	vmov	r3, s16
 800e722:	4652      	mov	r2, sl
 800e724:	4631      	mov	r1, r6
 800e726:	4628      	mov	r0, r5
 800e728:	47b8      	blx	r7
 800e72a:	3001      	adds	r0, #1
 800e72c:	f43f af09 	beq.w	800e542 <_printf_float+0xbe>
 800e730:	f04f 0900 	mov.w	r9, #0
 800e734:	f104 0a1a 	add.w	sl, r4, #26
 800e738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e73a:	425b      	negs	r3, r3
 800e73c:	454b      	cmp	r3, r9
 800e73e:	dc01      	bgt.n	800e744 <_printf_float+0x2c0>
 800e740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e742:	e792      	b.n	800e66a <_printf_float+0x1e6>
 800e744:	2301      	movs	r3, #1
 800e746:	4652      	mov	r2, sl
 800e748:	4631      	mov	r1, r6
 800e74a:	4628      	mov	r0, r5
 800e74c:	47b8      	blx	r7
 800e74e:	3001      	adds	r0, #1
 800e750:	f43f aef7 	beq.w	800e542 <_printf_float+0xbe>
 800e754:	f109 0901 	add.w	r9, r9, #1
 800e758:	e7ee      	b.n	800e738 <_printf_float+0x2b4>
 800e75a:	bf00      	nop
 800e75c:	7fefffff 	.word	0x7fefffff
 800e760:	08012229 	.word	0x08012229
 800e764:	0801222d 	.word	0x0801222d
 800e768:	08012231 	.word	0x08012231
 800e76c:	08012235 	.word	0x08012235
 800e770:	08012239 	.word	0x08012239
 800e774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e776:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e778:	429a      	cmp	r2, r3
 800e77a:	bfa8      	it	ge
 800e77c:	461a      	movge	r2, r3
 800e77e:	2a00      	cmp	r2, #0
 800e780:	4691      	mov	r9, r2
 800e782:	dc37      	bgt.n	800e7f4 <_printf_float+0x370>
 800e784:	f04f 0b00 	mov.w	fp, #0
 800e788:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e78c:	f104 021a 	add.w	r2, r4, #26
 800e790:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e792:	9305      	str	r3, [sp, #20]
 800e794:	eba3 0309 	sub.w	r3, r3, r9
 800e798:	455b      	cmp	r3, fp
 800e79a:	dc33      	bgt.n	800e804 <_printf_float+0x380>
 800e79c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	db3b      	blt.n	800e81c <_printf_float+0x398>
 800e7a4:	6823      	ldr	r3, [r4, #0]
 800e7a6:	07da      	lsls	r2, r3, #31
 800e7a8:	d438      	bmi.n	800e81c <_printf_float+0x398>
 800e7aa:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e7ae:	eba2 0903 	sub.w	r9, r2, r3
 800e7b2:	9b05      	ldr	r3, [sp, #20]
 800e7b4:	1ad2      	subs	r2, r2, r3
 800e7b6:	4591      	cmp	r9, r2
 800e7b8:	bfa8      	it	ge
 800e7ba:	4691      	movge	r9, r2
 800e7bc:	f1b9 0f00 	cmp.w	r9, #0
 800e7c0:	dc35      	bgt.n	800e82e <_printf_float+0x3aa>
 800e7c2:	f04f 0800 	mov.w	r8, #0
 800e7c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e7ca:	f104 0a1a 	add.w	sl, r4, #26
 800e7ce:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e7d2:	1a9b      	subs	r3, r3, r2
 800e7d4:	eba3 0309 	sub.w	r3, r3, r9
 800e7d8:	4543      	cmp	r3, r8
 800e7da:	f77f af79 	ble.w	800e6d0 <_printf_float+0x24c>
 800e7de:	2301      	movs	r3, #1
 800e7e0:	4652      	mov	r2, sl
 800e7e2:	4631      	mov	r1, r6
 800e7e4:	4628      	mov	r0, r5
 800e7e6:	47b8      	blx	r7
 800e7e8:	3001      	adds	r0, #1
 800e7ea:	f43f aeaa 	beq.w	800e542 <_printf_float+0xbe>
 800e7ee:	f108 0801 	add.w	r8, r8, #1
 800e7f2:	e7ec      	b.n	800e7ce <_printf_float+0x34a>
 800e7f4:	4613      	mov	r3, r2
 800e7f6:	4631      	mov	r1, r6
 800e7f8:	4642      	mov	r2, r8
 800e7fa:	4628      	mov	r0, r5
 800e7fc:	47b8      	blx	r7
 800e7fe:	3001      	adds	r0, #1
 800e800:	d1c0      	bne.n	800e784 <_printf_float+0x300>
 800e802:	e69e      	b.n	800e542 <_printf_float+0xbe>
 800e804:	2301      	movs	r3, #1
 800e806:	4631      	mov	r1, r6
 800e808:	4628      	mov	r0, r5
 800e80a:	9205      	str	r2, [sp, #20]
 800e80c:	47b8      	blx	r7
 800e80e:	3001      	adds	r0, #1
 800e810:	f43f ae97 	beq.w	800e542 <_printf_float+0xbe>
 800e814:	9a05      	ldr	r2, [sp, #20]
 800e816:	f10b 0b01 	add.w	fp, fp, #1
 800e81a:	e7b9      	b.n	800e790 <_printf_float+0x30c>
 800e81c:	ee18 3a10 	vmov	r3, s16
 800e820:	4652      	mov	r2, sl
 800e822:	4631      	mov	r1, r6
 800e824:	4628      	mov	r0, r5
 800e826:	47b8      	blx	r7
 800e828:	3001      	adds	r0, #1
 800e82a:	d1be      	bne.n	800e7aa <_printf_float+0x326>
 800e82c:	e689      	b.n	800e542 <_printf_float+0xbe>
 800e82e:	9a05      	ldr	r2, [sp, #20]
 800e830:	464b      	mov	r3, r9
 800e832:	4442      	add	r2, r8
 800e834:	4631      	mov	r1, r6
 800e836:	4628      	mov	r0, r5
 800e838:	47b8      	blx	r7
 800e83a:	3001      	adds	r0, #1
 800e83c:	d1c1      	bne.n	800e7c2 <_printf_float+0x33e>
 800e83e:	e680      	b.n	800e542 <_printf_float+0xbe>
 800e840:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e842:	2a01      	cmp	r2, #1
 800e844:	dc01      	bgt.n	800e84a <_printf_float+0x3c6>
 800e846:	07db      	lsls	r3, r3, #31
 800e848:	d53a      	bpl.n	800e8c0 <_printf_float+0x43c>
 800e84a:	2301      	movs	r3, #1
 800e84c:	4642      	mov	r2, r8
 800e84e:	4631      	mov	r1, r6
 800e850:	4628      	mov	r0, r5
 800e852:	47b8      	blx	r7
 800e854:	3001      	adds	r0, #1
 800e856:	f43f ae74 	beq.w	800e542 <_printf_float+0xbe>
 800e85a:	ee18 3a10 	vmov	r3, s16
 800e85e:	4652      	mov	r2, sl
 800e860:	4631      	mov	r1, r6
 800e862:	4628      	mov	r0, r5
 800e864:	47b8      	blx	r7
 800e866:	3001      	adds	r0, #1
 800e868:	f43f ae6b 	beq.w	800e542 <_printf_float+0xbe>
 800e86c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e870:	2200      	movs	r2, #0
 800e872:	2300      	movs	r3, #0
 800e874:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800e878:	f7f2 f95e 	bl	8000b38 <__aeabi_dcmpeq>
 800e87c:	b9d8      	cbnz	r0, 800e8b6 <_printf_float+0x432>
 800e87e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800e882:	f108 0201 	add.w	r2, r8, #1
 800e886:	4631      	mov	r1, r6
 800e888:	4628      	mov	r0, r5
 800e88a:	47b8      	blx	r7
 800e88c:	3001      	adds	r0, #1
 800e88e:	d10e      	bne.n	800e8ae <_printf_float+0x42a>
 800e890:	e657      	b.n	800e542 <_printf_float+0xbe>
 800e892:	2301      	movs	r3, #1
 800e894:	4652      	mov	r2, sl
 800e896:	4631      	mov	r1, r6
 800e898:	4628      	mov	r0, r5
 800e89a:	47b8      	blx	r7
 800e89c:	3001      	adds	r0, #1
 800e89e:	f43f ae50 	beq.w	800e542 <_printf_float+0xbe>
 800e8a2:	f108 0801 	add.w	r8, r8, #1
 800e8a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8a8:	3b01      	subs	r3, #1
 800e8aa:	4543      	cmp	r3, r8
 800e8ac:	dcf1      	bgt.n	800e892 <_printf_float+0x40e>
 800e8ae:	464b      	mov	r3, r9
 800e8b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e8b4:	e6da      	b.n	800e66c <_printf_float+0x1e8>
 800e8b6:	f04f 0800 	mov.w	r8, #0
 800e8ba:	f104 0a1a 	add.w	sl, r4, #26
 800e8be:	e7f2      	b.n	800e8a6 <_printf_float+0x422>
 800e8c0:	2301      	movs	r3, #1
 800e8c2:	4642      	mov	r2, r8
 800e8c4:	e7df      	b.n	800e886 <_printf_float+0x402>
 800e8c6:	2301      	movs	r3, #1
 800e8c8:	464a      	mov	r2, r9
 800e8ca:	4631      	mov	r1, r6
 800e8cc:	4628      	mov	r0, r5
 800e8ce:	47b8      	blx	r7
 800e8d0:	3001      	adds	r0, #1
 800e8d2:	f43f ae36 	beq.w	800e542 <_printf_float+0xbe>
 800e8d6:	f108 0801 	add.w	r8, r8, #1
 800e8da:	68e3      	ldr	r3, [r4, #12]
 800e8dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8de:	1a5b      	subs	r3, r3, r1
 800e8e0:	4543      	cmp	r3, r8
 800e8e2:	dcf0      	bgt.n	800e8c6 <_printf_float+0x442>
 800e8e4:	e6f8      	b.n	800e6d8 <_printf_float+0x254>
 800e8e6:	f04f 0800 	mov.w	r8, #0
 800e8ea:	f104 0919 	add.w	r9, r4, #25
 800e8ee:	e7f4      	b.n	800e8da <_printf_float+0x456>

0800e8f0 <_printf_common>:
 800e8f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8f4:	4616      	mov	r6, r2
 800e8f6:	4699      	mov	r9, r3
 800e8f8:	688a      	ldr	r2, [r1, #8]
 800e8fa:	690b      	ldr	r3, [r1, #16]
 800e8fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e900:	4293      	cmp	r3, r2
 800e902:	bfb8      	it	lt
 800e904:	4613      	movlt	r3, r2
 800e906:	6033      	str	r3, [r6, #0]
 800e908:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e90c:	4607      	mov	r7, r0
 800e90e:	460c      	mov	r4, r1
 800e910:	b10a      	cbz	r2, 800e916 <_printf_common+0x26>
 800e912:	3301      	adds	r3, #1
 800e914:	6033      	str	r3, [r6, #0]
 800e916:	6823      	ldr	r3, [r4, #0]
 800e918:	0699      	lsls	r1, r3, #26
 800e91a:	bf42      	ittt	mi
 800e91c:	6833      	ldrmi	r3, [r6, #0]
 800e91e:	3302      	addmi	r3, #2
 800e920:	6033      	strmi	r3, [r6, #0]
 800e922:	6825      	ldr	r5, [r4, #0]
 800e924:	f015 0506 	ands.w	r5, r5, #6
 800e928:	d106      	bne.n	800e938 <_printf_common+0x48>
 800e92a:	f104 0a19 	add.w	sl, r4, #25
 800e92e:	68e3      	ldr	r3, [r4, #12]
 800e930:	6832      	ldr	r2, [r6, #0]
 800e932:	1a9b      	subs	r3, r3, r2
 800e934:	42ab      	cmp	r3, r5
 800e936:	dc26      	bgt.n	800e986 <_printf_common+0x96>
 800e938:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e93c:	1e13      	subs	r3, r2, #0
 800e93e:	6822      	ldr	r2, [r4, #0]
 800e940:	bf18      	it	ne
 800e942:	2301      	movne	r3, #1
 800e944:	0692      	lsls	r2, r2, #26
 800e946:	d42b      	bmi.n	800e9a0 <_printf_common+0xb0>
 800e948:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e94c:	4649      	mov	r1, r9
 800e94e:	4638      	mov	r0, r7
 800e950:	47c0      	blx	r8
 800e952:	3001      	adds	r0, #1
 800e954:	d01e      	beq.n	800e994 <_printf_common+0xa4>
 800e956:	6823      	ldr	r3, [r4, #0]
 800e958:	6922      	ldr	r2, [r4, #16]
 800e95a:	f003 0306 	and.w	r3, r3, #6
 800e95e:	2b04      	cmp	r3, #4
 800e960:	bf02      	ittt	eq
 800e962:	68e5      	ldreq	r5, [r4, #12]
 800e964:	6833      	ldreq	r3, [r6, #0]
 800e966:	1aed      	subeq	r5, r5, r3
 800e968:	68a3      	ldr	r3, [r4, #8]
 800e96a:	bf0c      	ite	eq
 800e96c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e970:	2500      	movne	r5, #0
 800e972:	4293      	cmp	r3, r2
 800e974:	bfc4      	itt	gt
 800e976:	1a9b      	subgt	r3, r3, r2
 800e978:	18ed      	addgt	r5, r5, r3
 800e97a:	2600      	movs	r6, #0
 800e97c:	341a      	adds	r4, #26
 800e97e:	42b5      	cmp	r5, r6
 800e980:	d11a      	bne.n	800e9b8 <_printf_common+0xc8>
 800e982:	2000      	movs	r0, #0
 800e984:	e008      	b.n	800e998 <_printf_common+0xa8>
 800e986:	2301      	movs	r3, #1
 800e988:	4652      	mov	r2, sl
 800e98a:	4649      	mov	r1, r9
 800e98c:	4638      	mov	r0, r7
 800e98e:	47c0      	blx	r8
 800e990:	3001      	adds	r0, #1
 800e992:	d103      	bne.n	800e99c <_printf_common+0xac>
 800e994:	f04f 30ff 	mov.w	r0, #4294967295
 800e998:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e99c:	3501      	adds	r5, #1
 800e99e:	e7c6      	b.n	800e92e <_printf_common+0x3e>
 800e9a0:	18e1      	adds	r1, r4, r3
 800e9a2:	1c5a      	adds	r2, r3, #1
 800e9a4:	2030      	movs	r0, #48	; 0x30
 800e9a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e9aa:	4422      	add	r2, r4
 800e9ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e9b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e9b4:	3302      	adds	r3, #2
 800e9b6:	e7c7      	b.n	800e948 <_printf_common+0x58>
 800e9b8:	2301      	movs	r3, #1
 800e9ba:	4622      	mov	r2, r4
 800e9bc:	4649      	mov	r1, r9
 800e9be:	4638      	mov	r0, r7
 800e9c0:	47c0      	blx	r8
 800e9c2:	3001      	adds	r0, #1
 800e9c4:	d0e6      	beq.n	800e994 <_printf_common+0xa4>
 800e9c6:	3601      	adds	r6, #1
 800e9c8:	e7d9      	b.n	800e97e <_printf_common+0x8e>
	...

0800e9cc <_printf_i>:
 800e9cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9d0:	7e0f      	ldrb	r7, [r1, #24]
 800e9d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e9d4:	2f78      	cmp	r7, #120	; 0x78
 800e9d6:	4691      	mov	r9, r2
 800e9d8:	4680      	mov	r8, r0
 800e9da:	460c      	mov	r4, r1
 800e9dc:	469a      	mov	sl, r3
 800e9de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e9e2:	d807      	bhi.n	800e9f4 <_printf_i+0x28>
 800e9e4:	2f62      	cmp	r7, #98	; 0x62
 800e9e6:	d80a      	bhi.n	800e9fe <_printf_i+0x32>
 800e9e8:	2f00      	cmp	r7, #0
 800e9ea:	f000 80d4 	beq.w	800eb96 <_printf_i+0x1ca>
 800e9ee:	2f58      	cmp	r7, #88	; 0x58
 800e9f0:	f000 80c0 	beq.w	800eb74 <_printf_i+0x1a8>
 800e9f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e9f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e9fc:	e03a      	b.n	800ea74 <_printf_i+0xa8>
 800e9fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ea02:	2b15      	cmp	r3, #21
 800ea04:	d8f6      	bhi.n	800e9f4 <_printf_i+0x28>
 800ea06:	a101      	add	r1, pc, #4	; (adr r1, 800ea0c <_printf_i+0x40>)
 800ea08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ea0c:	0800ea65 	.word	0x0800ea65
 800ea10:	0800ea79 	.word	0x0800ea79
 800ea14:	0800e9f5 	.word	0x0800e9f5
 800ea18:	0800e9f5 	.word	0x0800e9f5
 800ea1c:	0800e9f5 	.word	0x0800e9f5
 800ea20:	0800e9f5 	.word	0x0800e9f5
 800ea24:	0800ea79 	.word	0x0800ea79
 800ea28:	0800e9f5 	.word	0x0800e9f5
 800ea2c:	0800e9f5 	.word	0x0800e9f5
 800ea30:	0800e9f5 	.word	0x0800e9f5
 800ea34:	0800e9f5 	.word	0x0800e9f5
 800ea38:	0800eb7d 	.word	0x0800eb7d
 800ea3c:	0800eaa5 	.word	0x0800eaa5
 800ea40:	0800eb37 	.word	0x0800eb37
 800ea44:	0800e9f5 	.word	0x0800e9f5
 800ea48:	0800e9f5 	.word	0x0800e9f5
 800ea4c:	0800eb9f 	.word	0x0800eb9f
 800ea50:	0800e9f5 	.word	0x0800e9f5
 800ea54:	0800eaa5 	.word	0x0800eaa5
 800ea58:	0800e9f5 	.word	0x0800e9f5
 800ea5c:	0800e9f5 	.word	0x0800e9f5
 800ea60:	0800eb3f 	.word	0x0800eb3f
 800ea64:	682b      	ldr	r3, [r5, #0]
 800ea66:	1d1a      	adds	r2, r3, #4
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	602a      	str	r2, [r5, #0]
 800ea6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ea74:	2301      	movs	r3, #1
 800ea76:	e09f      	b.n	800ebb8 <_printf_i+0x1ec>
 800ea78:	6820      	ldr	r0, [r4, #0]
 800ea7a:	682b      	ldr	r3, [r5, #0]
 800ea7c:	0607      	lsls	r7, r0, #24
 800ea7e:	f103 0104 	add.w	r1, r3, #4
 800ea82:	6029      	str	r1, [r5, #0]
 800ea84:	d501      	bpl.n	800ea8a <_printf_i+0xbe>
 800ea86:	681e      	ldr	r6, [r3, #0]
 800ea88:	e003      	b.n	800ea92 <_printf_i+0xc6>
 800ea8a:	0646      	lsls	r6, r0, #25
 800ea8c:	d5fb      	bpl.n	800ea86 <_printf_i+0xba>
 800ea8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ea92:	2e00      	cmp	r6, #0
 800ea94:	da03      	bge.n	800ea9e <_printf_i+0xd2>
 800ea96:	232d      	movs	r3, #45	; 0x2d
 800ea98:	4276      	negs	r6, r6
 800ea9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea9e:	485a      	ldr	r0, [pc, #360]	; (800ec08 <_printf_i+0x23c>)
 800eaa0:	230a      	movs	r3, #10
 800eaa2:	e012      	b.n	800eaca <_printf_i+0xfe>
 800eaa4:	682b      	ldr	r3, [r5, #0]
 800eaa6:	6820      	ldr	r0, [r4, #0]
 800eaa8:	1d19      	adds	r1, r3, #4
 800eaaa:	6029      	str	r1, [r5, #0]
 800eaac:	0605      	lsls	r5, r0, #24
 800eaae:	d501      	bpl.n	800eab4 <_printf_i+0xe8>
 800eab0:	681e      	ldr	r6, [r3, #0]
 800eab2:	e002      	b.n	800eaba <_printf_i+0xee>
 800eab4:	0641      	lsls	r1, r0, #25
 800eab6:	d5fb      	bpl.n	800eab0 <_printf_i+0xe4>
 800eab8:	881e      	ldrh	r6, [r3, #0]
 800eaba:	4853      	ldr	r0, [pc, #332]	; (800ec08 <_printf_i+0x23c>)
 800eabc:	2f6f      	cmp	r7, #111	; 0x6f
 800eabe:	bf0c      	ite	eq
 800eac0:	2308      	moveq	r3, #8
 800eac2:	230a      	movne	r3, #10
 800eac4:	2100      	movs	r1, #0
 800eac6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eaca:	6865      	ldr	r5, [r4, #4]
 800eacc:	60a5      	str	r5, [r4, #8]
 800eace:	2d00      	cmp	r5, #0
 800ead0:	bfa2      	ittt	ge
 800ead2:	6821      	ldrge	r1, [r4, #0]
 800ead4:	f021 0104 	bicge.w	r1, r1, #4
 800ead8:	6021      	strge	r1, [r4, #0]
 800eada:	b90e      	cbnz	r6, 800eae0 <_printf_i+0x114>
 800eadc:	2d00      	cmp	r5, #0
 800eade:	d04b      	beq.n	800eb78 <_printf_i+0x1ac>
 800eae0:	4615      	mov	r5, r2
 800eae2:	fbb6 f1f3 	udiv	r1, r6, r3
 800eae6:	fb03 6711 	mls	r7, r3, r1, r6
 800eaea:	5dc7      	ldrb	r7, [r0, r7]
 800eaec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eaf0:	4637      	mov	r7, r6
 800eaf2:	42bb      	cmp	r3, r7
 800eaf4:	460e      	mov	r6, r1
 800eaf6:	d9f4      	bls.n	800eae2 <_printf_i+0x116>
 800eaf8:	2b08      	cmp	r3, #8
 800eafa:	d10b      	bne.n	800eb14 <_printf_i+0x148>
 800eafc:	6823      	ldr	r3, [r4, #0]
 800eafe:	07de      	lsls	r6, r3, #31
 800eb00:	d508      	bpl.n	800eb14 <_printf_i+0x148>
 800eb02:	6923      	ldr	r3, [r4, #16]
 800eb04:	6861      	ldr	r1, [r4, #4]
 800eb06:	4299      	cmp	r1, r3
 800eb08:	bfde      	ittt	le
 800eb0a:	2330      	movle	r3, #48	; 0x30
 800eb0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eb10:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eb14:	1b52      	subs	r2, r2, r5
 800eb16:	6122      	str	r2, [r4, #16]
 800eb18:	f8cd a000 	str.w	sl, [sp]
 800eb1c:	464b      	mov	r3, r9
 800eb1e:	aa03      	add	r2, sp, #12
 800eb20:	4621      	mov	r1, r4
 800eb22:	4640      	mov	r0, r8
 800eb24:	f7ff fee4 	bl	800e8f0 <_printf_common>
 800eb28:	3001      	adds	r0, #1
 800eb2a:	d14a      	bne.n	800ebc2 <_printf_i+0x1f6>
 800eb2c:	f04f 30ff 	mov.w	r0, #4294967295
 800eb30:	b004      	add	sp, #16
 800eb32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb36:	6823      	ldr	r3, [r4, #0]
 800eb38:	f043 0320 	orr.w	r3, r3, #32
 800eb3c:	6023      	str	r3, [r4, #0]
 800eb3e:	4833      	ldr	r0, [pc, #204]	; (800ec0c <_printf_i+0x240>)
 800eb40:	2778      	movs	r7, #120	; 0x78
 800eb42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800eb46:	6823      	ldr	r3, [r4, #0]
 800eb48:	6829      	ldr	r1, [r5, #0]
 800eb4a:	061f      	lsls	r7, r3, #24
 800eb4c:	f851 6b04 	ldr.w	r6, [r1], #4
 800eb50:	d402      	bmi.n	800eb58 <_printf_i+0x18c>
 800eb52:	065f      	lsls	r7, r3, #25
 800eb54:	bf48      	it	mi
 800eb56:	b2b6      	uxthmi	r6, r6
 800eb58:	07df      	lsls	r7, r3, #31
 800eb5a:	bf48      	it	mi
 800eb5c:	f043 0320 	orrmi.w	r3, r3, #32
 800eb60:	6029      	str	r1, [r5, #0]
 800eb62:	bf48      	it	mi
 800eb64:	6023      	strmi	r3, [r4, #0]
 800eb66:	b91e      	cbnz	r6, 800eb70 <_printf_i+0x1a4>
 800eb68:	6823      	ldr	r3, [r4, #0]
 800eb6a:	f023 0320 	bic.w	r3, r3, #32
 800eb6e:	6023      	str	r3, [r4, #0]
 800eb70:	2310      	movs	r3, #16
 800eb72:	e7a7      	b.n	800eac4 <_printf_i+0xf8>
 800eb74:	4824      	ldr	r0, [pc, #144]	; (800ec08 <_printf_i+0x23c>)
 800eb76:	e7e4      	b.n	800eb42 <_printf_i+0x176>
 800eb78:	4615      	mov	r5, r2
 800eb7a:	e7bd      	b.n	800eaf8 <_printf_i+0x12c>
 800eb7c:	682b      	ldr	r3, [r5, #0]
 800eb7e:	6826      	ldr	r6, [r4, #0]
 800eb80:	6961      	ldr	r1, [r4, #20]
 800eb82:	1d18      	adds	r0, r3, #4
 800eb84:	6028      	str	r0, [r5, #0]
 800eb86:	0635      	lsls	r5, r6, #24
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	d501      	bpl.n	800eb90 <_printf_i+0x1c4>
 800eb8c:	6019      	str	r1, [r3, #0]
 800eb8e:	e002      	b.n	800eb96 <_printf_i+0x1ca>
 800eb90:	0670      	lsls	r0, r6, #25
 800eb92:	d5fb      	bpl.n	800eb8c <_printf_i+0x1c0>
 800eb94:	8019      	strh	r1, [r3, #0]
 800eb96:	2300      	movs	r3, #0
 800eb98:	6123      	str	r3, [r4, #16]
 800eb9a:	4615      	mov	r5, r2
 800eb9c:	e7bc      	b.n	800eb18 <_printf_i+0x14c>
 800eb9e:	682b      	ldr	r3, [r5, #0]
 800eba0:	1d1a      	adds	r2, r3, #4
 800eba2:	602a      	str	r2, [r5, #0]
 800eba4:	681d      	ldr	r5, [r3, #0]
 800eba6:	6862      	ldr	r2, [r4, #4]
 800eba8:	2100      	movs	r1, #0
 800ebaa:	4628      	mov	r0, r5
 800ebac:	f7f1 fb48 	bl	8000240 <memchr>
 800ebb0:	b108      	cbz	r0, 800ebb6 <_printf_i+0x1ea>
 800ebb2:	1b40      	subs	r0, r0, r5
 800ebb4:	6060      	str	r0, [r4, #4]
 800ebb6:	6863      	ldr	r3, [r4, #4]
 800ebb8:	6123      	str	r3, [r4, #16]
 800ebba:	2300      	movs	r3, #0
 800ebbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebc0:	e7aa      	b.n	800eb18 <_printf_i+0x14c>
 800ebc2:	6923      	ldr	r3, [r4, #16]
 800ebc4:	462a      	mov	r2, r5
 800ebc6:	4649      	mov	r1, r9
 800ebc8:	4640      	mov	r0, r8
 800ebca:	47d0      	blx	sl
 800ebcc:	3001      	adds	r0, #1
 800ebce:	d0ad      	beq.n	800eb2c <_printf_i+0x160>
 800ebd0:	6823      	ldr	r3, [r4, #0]
 800ebd2:	079b      	lsls	r3, r3, #30
 800ebd4:	d413      	bmi.n	800ebfe <_printf_i+0x232>
 800ebd6:	68e0      	ldr	r0, [r4, #12]
 800ebd8:	9b03      	ldr	r3, [sp, #12]
 800ebda:	4298      	cmp	r0, r3
 800ebdc:	bfb8      	it	lt
 800ebde:	4618      	movlt	r0, r3
 800ebe0:	e7a6      	b.n	800eb30 <_printf_i+0x164>
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	4632      	mov	r2, r6
 800ebe6:	4649      	mov	r1, r9
 800ebe8:	4640      	mov	r0, r8
 800ebea:	47d0      	blx	sl
 800ebec:	3001      	adds	r0, #1
 800ebee:	d09d      	beq.n	800eb2c <_printf_i+0x160>
 800ebf0:	3501      	adds	r5, #1
 800ebf2:	68e3      	ldr	r3, [r4, #12]
 800ebf4:	9903      	ldr	r1, [sp, #12]
 800ebf6:	1a5b      	subs	r3, r3, r1
 800ebf8:	42ab      	cmp	r3, r5
 800ebfa:	dcf2      	bgt.n	800ebe2 <_printf_i+0x216>
 800ebfc:	e7eb      	b.n	800ebd6 <_printf_i+0x20a>
 800ebfe:	2500      	movs	r5, #0
 800ec00:	f104 0619 	add.w	r6, r4, #25
 800ec04:	e7f5      	b.n	800ebf2 <_printf_i+0x226>
 800ec06:	bf00      	nop
 800ec08:	0801223b 	.word	0x0801223b
 800ec0c:	0801224c 	.word	0x0801224c

0800ec10 <std>:
 800ec10:	2300      	movs	r3, #0
 800ec12:	b510      	push	{r4, lr}
 800ec14:	4604      	mov	r4, r0
 800ec16:	e9c0 3300 	strd	r3, r3, [r0]
 800ec1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ec1e:	6083      	str	r3, [r0, #8]
 800ec20:	8181      	strh	r1, [r0, #12]
 800ec22:	6643      	str	r3, [r0, #100]	; 0x64
 800ec24:	81c2      	strh	r2, [r0, #14]
 800ec26:	6183      	str	r3, [r0, #24]
 800ec28:	4619      	mov	r1, r3
 800ec2a:	2208      	movs	r2, #8
 800ec2c:	305c      	adds	r0, #92	; 0x5c
 800ec2e:	f000 f914 	bl	800ee5a <memset>
 800ec32:	4b0d      	ldr	r3, [pc, #52]	; (800ec68 <std+0x58>)
 800ec34:	6263      	str	r3, [r4, #36]	; 0x24
 800ec36:	4b0d      	ldr	r3, [pc, #52]	; (800ec6c <std+0x5c>)
 800ec38:	62a3      	str	r3, [r4, #40]	; 0x28
 800ec3a:	4b0d      	ldr	r3, [pc, #52]	; (800ec70 <std+0x60>)
 800ec3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ec3e:	4b0d      	ldr	r3, [pc, #52]	; (800ec74 <std+0x64>)
 800ec40:	6323      	str	r3, [r4, #48]	; 0x30
 800ec42:	4b0d      	ldr	r3, [pc, #52]	; (800ec78 <std+0x68>)
 800ec44:	6224      	str	r4, [r4, #32]
 800ec46:	429c      	cmp	r4, r3
 800ec48:	d006      	beq.n	800ec58 <std+0x48>
 800ec4a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800ec4e:	4294      	cmp	r4, r2
 800ec50:	d002      	beq.n	800ec58 <std+0x48>
 800ec52:	33d0      	adds	r3, #208	; 0xd0
 800ec54:	429c      	cmp	r4, r3
 800ec56:	d105      	bne.n	800ec64 <std+0x54>
 800ec58:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec60:	f000 b98a 	b.w	800ef78 <__retarget_lock_init_recursive>
 800ec64:	bd10      	pop	{r4, pc}
 800ec66:	bf00      	nop
 800ec68:	0800edd5 	.word	0x0800edd5
 800ec6c:	0800edf7 	.word	0x0800edf7
 800ec70:	0800ee2f 	.word	0x0800ee2f
 800ec74:	0800ee53 	.word	0x0800ee53
 800ec78:	200041bc 	.word	0x200041bc

0800ec7c <stdio_exit_handler>:
 800ec7c:	4a02      	ldr	r2, [pc, #8]	; (800ec88 <stdio_exit_handler+0xc>)
 800ec7e:	4903      	ldr	r1, [pc, #12]	; (800ec8c <stdio_exit_handler+0x10>)
 800ec80:	4803      	ldr	r0, [pc, #12]	; (800ec90 <stdio_exit_handler+0x14>)
 800ec82:	f000 b869 	b.w	800ed58 <_fwalk_sglue>
 800ec86:	bf00      	nop
 800ec88:	20000194 	.word	0x20000194
 800ec8c:	08010949 	.word	0x08010949
 800ec90:	200001a0 	.word	0x200001a0

0800ec94 <cleanup_stdio>:
 800ec94:	6841      	ldr	r1, [r0, #4]
 800ec96:	4b0c      	ldr	r3, [pc, #48]	; (800ecc8 <cleanup_stdio+0x34>)
 800ec98:	4299      	cmp	r1, r3
 800ec9a:	b510      	push	{r4, lr}
 800ec9c:	4604      	mov	r4, r0
 800ec9e:	d001      	beq.n	800eca4 <cleanup_stdio+0x10>
 800eca0:	f001 fe52 	bl	8010948 <_fflush_r>
 800eca4:	68a1      	ldr	r1, [r4, #8]
 800eca6:	4b09      	ldr	r3, [pc, #36]	; (800eccc <cleanup_stdio+0x38>)
 800eca8:	4299      	cmp	r1, r3
 800ecaa:	d002      	beq.n	800ecb2 <cleanup_stdio+0x1e>
 800ecac:	4620      	mov	r0, r4
 800ecae:	f001 fe4b 	bl	8010948 <_fflush_r>
 800ecb2:	68e1      	ldr	r1, [r4, #12]
 800ecb4:	4b06      	ldr	r3, [pc, #24]	; (800ecd0 <cleanup_stdio+0x3c>)
 800ecb6:	4299      	cmp	r1, r3
 800ecb8:	d004      	beq.n	800ecc4 <cleanup_stdio+0x30>
 800ecba:	4620      	mov	r0, r4
 800ecbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecc0:	f001 be42 	b.w	8010948 <_fflush_r>
 800ecc4:	bd10      	pop	{r4, pc}
 800ecc6:	bf00      	nop
 800ecc8:	200041bc 	.word	0x200041bc
 800eccc:	20004224 	.word	0x20004224
 800ecd0:	2000428c 	.word	0x2000428c

0800ecd4 <global_stdio_init.part.0>:
 800ecd4:	b510      	push	{r4, lr}
 800ecd6:	4b0b      	ldr	r3, [pc, #44]	; (800ed04 <global_stdio_init.part.0+0x30>)
 800ecd8:	4c0b      	ldr	r4, [pc, #44]	; (800ed08 <global_stdio_init.part.0+0x34>)
 800ecda:	4a0c      	ldr	r2, [pc, #48]	; (800ed0c <global_stdio_init.part.0+0x38>)
 800ecdc:	601a      	str	r2, [r3, #0]
 800ecde:	4620      	mov	r0, r4
 800ece0:	2200      	movs	r2, #0
 800ece2:	2104      	movs	r1, #4
 800ece4:	f7ff ff94 	bl	800ec10 <std>
 800ece8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ecec:	2201      	movs	r2, #1
 800ecee:	2109      	movs	r1, #9
 800ecf0:	f7ff ff8e 	bl	800ec10 <std>
 800ecf4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ecf8:	2202      	movs	r2, #2
 800ecfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ecfe:	2112      	movs	r1, #18
 800ed00:	f7ff bf86 	b.w	800ec10 <std>
 800ed04:	200042f4 	.word	0x200042f4
 800ed08:	200041bc 	.word	0x200041bc
 800ed0c:	0800ec7d 	.word	0x0800ec7d

0800ed10 <__sfp_lock_acquire>:
 800ed10:	4801      	ldr	r0, [pc, #4]	; (800ed18 <__sfp_lock_acquire+0x8>)
 800ed12:	f000 b932 	b.w	800ef7a <__retarget_lock_acquire_recursive>
 800ed16:	bf00      	nop
 800ed18:	200042fd 	.word	0x200042fd

0800ed1c <__sfp_lock_release>:
 800ed1c:	4801      	ldr	r0, [pc, #4]	; (800ed24 <__sfp_lock_release+0x8>)
 800ed1e:	f000 b92d 	b.w	800ef7c <__retarget_lock_release_recursive>
 800ed22:	bf00      	nop
 800ed24:	200042fd 	.word	0x200042fd

0800ed28 <__sinit>:
 800ed28:	b510      	push	{r4, lr}
 800ed2a:	4604      	mov	r4, r0
 800ed2c:	f7ff fff0 	bl	800ed10 <__sfp_lock_acquire>
 800ed30:	6a23      	ldr	r3, [r4, #32]
 800ed32:	b11b      	cbz	r3, 800ed3c <__sinit+0x14>
 800ed34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ed38:	f7ff bff0 	b.w	800ed1c <__sfp_lock_release>
 800ed3c:	4b04      	ldr	r3, [pc, #16]	; (800ed50 <__sinit+0x28>)
 800ed3e:	6223      	str	r3, [r4, #32]
 800ed40:	4b04      	ldr	r3, [pc, #16]	; (800ed54 <__sinit+0x2c>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d1f5      	bne.n	800ed34 <__sinit+0xc>
 800ed48:	f7ff ffc4 	bl	800ecd4 <global_stdio_init.part.0>
 800ed4c:	e7f2      	b.n	800ed34 <__sinit+0xc>
 800ed4e:	bf00      	nop
 800ed50:	0800ec95 	.word	0x0800ec95
 800ed54:	200042f4 	.word	0x200042f4

0800ed58 <_fwalk_sglue>:
 800ed58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed5c:	4607      	mov	r7, r0
 800ed5e:	4688      	mov	r8, r1
 800ed60:	4614      	mov	r4, r2
 800ed62:	2600      	movs	r6, #0
 800ed64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ed68:	f1b9 0901 	subs.w	r9, r9, #1
 800ed6c:	d505      	bpl.n	800ed7a <_fwalk_sglue+0x22>
 800ed6e:	6824      	ldr	r4, [r4, #0]
 800ed70:	2c00      	cmp	r4, #0
 800ed72:	d1f7      	bne.n	800ed64 <_fwalk_sglue+0xc>
 800ed74:	4630      	mov	r0, r6
 800ed76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed7a:	89ab      	ldrh	r3, [r5, #12]
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	d907      	bls.n	800ed90 <_fwalk_sglue+0x38>
 800ed80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ed84:	3301      	adds	r3, #1
 800ed86:	d003      	beq.n	800ed90 <_fwalk_sglue+0x38>
 800ed88:	4629      	mov	r1, r5
 800ed8a:	4638      	mov	r0, r7
 800ed8c:	47c0      	blx	r8
 800ed8e:	4306      	orrs	r6, r0
 800ed90:	3568      	adds	r5, #104	; 0x68
 800ed92:	e7e9      	b.n	800ed68 <_fwalk_sglue+0x10>

0800ed94 <siprintf>:
 800ed94:	b40e      	push	{r1, r2, r3}
 800ed96:	b500      	push	{lr}
 800ed98:	b09c      	sub	sp, #112	; 0x70
 800ed9a:	ab1d      	add	r3, sp, #116	; 0x74
 800ed9c:	9002      	str	r0, [sp, #8]
 800ed9e:	9006      	str	r0, [sp, #24]
 800eda0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eda4:	4809      	ldr	r0, [pc, #36]	; (800edcc <siprintf+0x38>)
 800eda6:	9107      	str	r1, [sp, #28]
 800eda8:	9104      	str	r1, [sp, #16]
 800edaa:	4909      	ldr	r1, [pc, #36]	; (800edd0 <siprintf+0x3c>)
 800edac:	f853 2b04 	ldr.w	r2, [r3], #4
 800edb0:	9105      	str	r1, [sp, #20]
 800edb2:	6800      	ldr	r0, [r0, #0]
 800edb4:	9301      	str	r3, [sp, #4]
 800edb6:	a902      	add	r1, sp, #8
 800edb8:	f001 fc42 	bl	8010640 <_svfiprintf_r>
 800edbc:	9b02      	ldr	r3, [sp, #8]
 800edbe:	2200      	movs	r2, #0
 800edc0:	701a      	strb	r2, [r3, #0]
 800edc2:	b01c      	add	sp, #112	; 0x70
 800edc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800edc8:	b003      	add	sp, #12
 800edca:	4770      	bx	lr
 800edcc:	200001ec 	.word	0x200001ec
 800edd0:	ffff0208 	.word	0xffff0208

0800edd4 <__sread>:
 800edd4:	b510      	push	{r4, lr}
 800edd6:	460c      	mov	r4, r1
 800edd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eddc:	f000 f87e 	bl	800eedc <_read_r>
 800ede0:	2800      	cmp	r0, #0
 800ede2:	bfab      	itete	ge
 800ede4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ede6:	89a3      	ldrhlt	r3, [r4, #12]
 800ede8:	181b      	addge	r3, r3, r0
 800edea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800edee:	bfac      	ite	ge
 800edf0:	6563      	strge	r3, [r4, #84]	; 0x54
 800edf2:	81a3      	strhlt	r3, [r4, #12]
 800edf4:	bd10      	pop	{r4, pc}

0800edf6 <__swrite>:
 800edf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800edfa:	461f      	mov	r7, r3
 800edfc:	898b      	ldrh	r3, [r1, #12]
 800edfe:	05db      	lsls	r3, r3, #23
 800ee00:	4605      	mov	r5, r0
 800ee02:	460c      	mov	r4, r1
 800ee04:	4616      	mov	r6, r2
 800ee06:	d505      	bpl.n	800ee14 <__swrite+0x1e>
 800ee08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee0c:	2302      	movs	r3, #2
 800ee0e:	2200      	movs	r2, #0
 800ee10:	f000 f852 	bl	800eeb8 <_lseek_r>
 800ee14:	89a3      	ldrh	r3, [r4, #12]
 800ee16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ee1e:	81a3      	strh	r3, [r4, #12]
 800ee20:	4632      	mov	r2, r6
 800ee22:	463b      	mov	r3, r7
 800ee24:	4628      	mov	r0, r5
 800ee26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ee2a:	f000 b869 	b.w	800ef00 <_write_r>

0800ee2e <__sseek>:
 800ee2e:	b510      	push	{r4, lr}
 800ee30:	460c      	mov	r4, r1
 800ee32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee36:	f000 f83f 	bl	800eeb8 <_lseek_r>
 800ee3a:	1c43      	adds	r3, r0, #1
 800ee3c:	89a3      	ldrh	r3, [r4, #12]
 800ee3e:	bf15      	itete	ne
 800ee40:	6560      	strne	r0, [r4, #84]	; 0x54
 800ee42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ee46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ee4a:	81a3      	strheq	r3, [r4, #12]
 800ee4c:	bf18      	it	ne
 800ee4e:	81a3      	strhne	r3, [r4, #12]
 800ee50:	bd10      	pop	{r4, pc}

0800ee52 <__sclose>:
 800ee52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ee56:	f000 b81f 	b.w	800ee98 <_close_r>

0800ee5a <memset>:
 800ee5a:	4402      	add	r2, r0
 800ee5c:	4603      	mov	r3, r0
 800ee5e:	4293      	cmp	r3, r2
 800ee60:	d100      	bne.n	800ee64 <memset+0xa>
 800ee62:	4770      	bx	lr
 800ee64:	f803 1b01 	strb.w	r1, [r3], #1
 800ee68:	e7f9      	b.n	800ee5e <memset+0x4>

0800ee6a <strncpy>:
 800ee6a:	b510      	push	{r4, lr}
 800ee6c:	3901      	subs	r1, #1
 800ee6e:	4603      	mov	r3, r0
 800ee70:	b132      	cbz	r2, 800ee80 <strncpy+0x16>
 800ee72:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ee76:	f803 4b01 	strb.w	r4, [r3], #1
 800ee7a:	3a01      	subs	r2, #1
 800ee7c:	2c00      	cmp	r4, #0
 800ee7e:	d1f7      	bne.n	800ee70 <strncpy+0x6>
 800ee80:	441a      	add	r2, r3
 800ee82:	2100      	movs	r1, #0
 800ee84:	4293      	cmp	r3, r2
 800ee86:	d100      	bne.n	800ee8a <strncpy+0x20>
 800ee88:	bd10      	pop	{r4, pc}
 800ee8a:	f803 1b01 	strb.w	r1, [r3], #1
 800ee8e:	e7f9      	b.n	800ee84 <strncpy+0x1a>

0800ee90 <_localeconv_r>:
 800ee90:	4800      	ldr	r0, [pc, #0]	; (800ee94 <_localeconv_r+0x4>)
 800ee92:	4770      	bx	lr
 800ee94:	200002e0 	.word	0x200002e0

0800ee98 <_close_r>:
 800ee98:	b538      	push	{r3, r4, r5, lr}
 800ee9a:	4d06      	ldr	r5, [pc, #24]	; (800eeb4 <_close_r+0x1c>)
 800ee9c:	2300      	movs	r3, #0
 800ee9e:	4604      	mov	r4, r0
 800eea0:	4608      	mov	r0, r1
 800eea2:	602b      	str	r3, [r5, #0]
 800eea4:	f7f3 fc99 	bl	80027da <_close>
 800eea8:	1c43      	adds	r3, r0, #1
 800eeaa:	d102      	bne.n	800eeb2 <_close_r+0x1a>
 800eeac:	682b      	ldr	r3, [r5, #0]
 800eeae:	b103      	cbz	r3, 800eeb2 <_close_r+0x1a>
 800eeb0:	6023      	str	r3, [r4, #0]
 800eeb2:	bd38      	pop	{r3, r4, r5, pc}
 800eeb4:	200042f8 	.word	0x200042f8

0800eeb8 <_lseek_r>:
 800eeb8:	b538      	push	{r3, r4, r5, lr}
 800eeba:	4d07      	ldr	r5, [pc, #28]	; (800eed8 <_lseek_r+0x20>)
 800eebc:	4604      	mov	r4, r0
 800eebe:	4608      	mov	r0, r1
 800eec0:	4611      	mov	r1, r2
 800eec2:	2200      	movs	r2, #0
 800eec4:	602a      	str	r2, [r5, #0]
 800eec6:	461a      	mov	r2, r3
 800eec8:	f7f3 fcae 	bl	8002828 <_lseek>
 800eecc:	1c43      	adds	r3, r0, #1
 800eece:	d102      	bne.n	800eed6 <_lseek_r+0x1e>
 800eed0:	682b      	ldr	r3, [r5, #0]
 800eed2:	b103      	cbz	r3, 800eed6 <_lseek_r+0x1e>
 800eed4:	6023      	str	r3, [r4, #0]
 800eed6:	bd38      	pop	{r3, r4, r5, pc}
 800eed8:	200042f8 	.word	0x200042f8

0800eedc <_read_r>:
 800eedc:	b538      	push	{r3, r4, r5, lr}
 800eede:	4d07      	ldr	r5, [pc, #28]	; (800eefc <_read_r+0x20>)
 800eee0:	4604      	mov	r4, r0
 800eee2:	4608      	mov	r0, r1
 800eee4:	4611      	mov	r1, r2
 800eee6:	2200      	movs	r2, #0
 800eee8:	602a      	str	r2, [r5, #0]
 800eeea:	461a      	mov	r2, r3
 800eeec:	f7f3 fc3c 	bl	8002768 <_read>
 800eef0:	1c43      	adds	r3, r0, #1
 800eef2:	d102      	bne.n	800eefa <_read_r+0x1e>
 800eef4:	682b      	ldr	r3, [r5, #0]
 800eef6:	b103      	cbz	r3, 800eefa <_read_r+0x1e>
 800eef8:	6023      	str	r3, [r4, #0]
 800eefa:	bd38      	pop	{r3, r4, r5, pc}
 800eefc:	200042f8 	.word	0x200042f8

0800ef00 <_write_r>:
 800ef00:	b538      	push	{r3, r4, r5, lr}
 800ef02:	4d07      	ldr	r5, [pc, #28]	; (800ef20 <_write_r+0x20>)
 800ef04:	4604      	mov	r4, r0
 800ef06:	4608      	mov	r0, r1
 800ef08:	4611      	mov	r1, r2
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	602a      	str	r2, [r5, #0]
 800ef0e:	461a      	mov	r2, r3
 800ef10:	f7f3 fc47 	bl	80027a2 <_write>
 800ef14:	1c43      	adds	r3, r0, #1
 800ef16:	d102      	bne.n	800ef1e <_write_r+0x1e>
 800ef18:	682b      	ldr	r3, [r5, #0]
 800ef1a:	b103      	cbz	r3, 800ef1e <_write_r+0x1e>
 800ef1c:	6023      	str	r3, [r4, #0]
 800ef1e:	bd38      	pop	{r3, r4, r5, pc}
 800ef20:	200042f8 	.word	0x200042f8

0800ef24 <__errno>:
 800ef24:	4b01      	ldr	r3, [pc, #4]	; (800ef2c <__errno+0x8>)
 800ef26:	6818      	ldr	r0, [r3, #0]
 800ef28:	4770      	bx	lr
 800ef2a:	bf00      	nop
 800ef2c:	200001ec 	.word	0x200001ec

0800ef30 <__libc_init_array>:
 800ef30:	b570      	push	{r4, r5, r6, lr}
 800ef32:	4d0d      	ldr	r5, [pc, #52]	; (800ef68 <__libc_init_array+0x38>)
 800ef34:	4c0d      	ldr	r4, [pc, #52]	; (800ef6c <__libc_init_array+0x3c>)
 800ef36:	1b64      	subs	r4, r4, r5
 800ef38:	10a4      	asrs	r4, r4, #2
 800ef3a:	2600      	movs	r6, #0
 800ef3c:	42a6      	cmp	r6, r4
 800ef3e:	d109      	bne.n	800ef54 <__libc_init_array+0x24>
 800ef40:	4d0b      	ldr	r5, [pc, #44]	; (800ef70 <__libc_init_array+0x40>)
 800ef42:	4c0c      	ldr	r4, [pc, #48]	; (800ef74 <__libc_init_array+0x44>)
 800ef44:	f002 ffd0 	bl	8011ee8 <_init>
 800ef48:	1b64      	subs	r4, r4, r5
 800ef4a:	10a4      	asrs	r4, r4, #2
 800ef4c:	2600      	movs	r6, #0
 800ef4e:	42a6      	cmp	r6, r4
 800ef50:	d105      	bne.n	800ef5e <__libc_init_array+0x2e>
 800ef52:	bd70      	pop	{r4, r5, r6, pc}
 800ef54:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef58:	4798      	blx	r3
 800ef5a:	3601      	adds	r6, #1
 800ef5c:	e7ee      	b.n	800ef3c <__libc_init_array+0xc>
 800ef5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ef62:	4798      	blx	r3
 800ef64:	3601      	adds	r6, #1
 800ef66:	e7f2      	b.n	800ef4e <__libc_init_array+0x1e>
 800ef68:	080124d0 	.word	0x080124d0
 800ef6c:	080124d0 	.word	0x080124d0
 800ef70:	080124d0 	.word	0x080124d0
 800ef74:	080124d4 	.word	0x080124d4

0800ef78 <__retarget_lock_init_recursive>:
 800ef78:	4770      	bx	lr

0800ef7a <__retarget_lock_acquire_recursive>:
 800ef7a:	4770      	bx	lr

0800ef7c <__retarget_lock_release_recursive>:
 800ef7c:	4770      	bx	lr

0800ef7e <memcpy>:
 800ef7e:	440a      	add	r2, r1
 800ef80:	4291      	cmp	r1, r2
 800ef82:	f100 33ff 	add.w	r3, r0, #4294967295
 800ef86:	d100      	bne.n	800ef8a <memcpy+0xc>
 800ef88:	4770      	bx	lr
 800ef8a:	b510      	push	{r4, lr}
 800ef8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ef90:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ef94:	4291      	cmp	r1, r2
 800ef96:	d1f9      	bne.n	800ef8c <memcpy+0xe>
 800ef98:	bd10      	pop	{r4, pc}

0800ef9a <quorem>:
 800ef9a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef9e:	6903      	ldr	r3, [r0, #16]
 800efa0:	690c      	ldr	r4, [r1, #16]
 800efa2:	42a3      	cmp	r3, r4
 800efa4:	4607      	mov	r7, r0
 800efa6:	db7e      	blt.n	800f0a6 <quorem+0x10c>
 800efa8:	3c01      	subs	r4, #1
 800efaa:	f101 0814 	add.w	r8, r1, #20
 800efae:	f100 0514 	add.w	r5, r0, #20
 800efb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800efb6:	9301      	str	r3, [sp, #4]
 800efb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800efbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800efc0:	3301      	adds	r3, #1
 800efc2:	429a      	cmp	r2, r3
 800efc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800efc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800efcc:	fbb2 f6f3 	udiv	r6, r2, r3
 800efd0:	d331      	bcc.n	800f036 <quorem+0x9c>
 800efd2:	f04f 0e00 	mov.w	lr, #0
 800efd6:	4640      	mov	r0, r8
 800efd8:	46ac      	mov	ip, r5
 800efda:	46f2      	mov	sl, lr
 800efdc:	f850 2b04 	ldr.w	r2, [r0], #4
 800efe0:	b293      	uxth	r3, r2
 800efe2:	fb06 e303 	mla	r3, r6, r3, lr
 800efe6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800efea:	0c1a      	lsrs	r2, r3, #16
 800efec:	b29b      	uxth	r3, r3
 800efee:	ebaa 0303 	sub.w	r3, sl, r3
 800eff2:	f8dc a000 	ldr.w	sl, [ip]
 800eff6:	fa13 f38a 	uxtah	r3, r3, sl
 800effa:	fb06 220e 	mla	r2, r6, lr, r2
 800effe:	9300      	str	r3, [sp, #0]
 800f000:	9b00      	ldr	r3, [sp, #0]
 800f002:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f006:	b292      	uxth	r2, r2
 800f008:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f00c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f010:	f8bd 3000 	ldrh.w	r3, [sp]
 800f014:	4581      	cmp	r9, r0
 800f016:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f01a:	f84c 3b04 	str.w	r3, [ip], #4
 800f01e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f022:	d2db      	bcs.n	800efdc <quorem+0x42>
 800f024:	f855 300b 	ldr.w	r3, [r5, fp]
 800f028:	b92b      	cbnz	r3, 800f036 <quorem+0x9c>
 800f02a:	9b01      	ldr	r3, [sp, #4]
 800f02c:	3b04      	subs	r3, #4
 800f02e:	429d      	cmp	r5, r3
 800f030:	461a      	mov	r2, r3
 800f032:	d32c      	bcc.n	800f08e <quorem+0xf4>
 800f034:	613c      	str	r4, [r7, #16]
 800f036:	4638      	mov	r0, r7
 800f038:	f001 f9a8 	bl	801038c <__mcmp>
 800f03c:	2800      	cmp	r0, #0
 800f03e:	db22      	blt.n	800f086 <quorem+0xec>
 800f040:	3601      	adds	r6, #1
 800f042:	4629      	mov	r1, r5
 800f044:	2000      	movs	r0, #0
 800f046:	f858 2b04 	ldr.w	r2, [r8], #4
 800f04a:	f8d1 c000 	ldr.w	ip, [r1]
 800f04e:	b293      	uxth	r3, r2
 800f050:	1ac3      	subs	r3, r0, r3
 800f052:	0c12      	lsrs	r2, r2, #16
 800f054:	fa13 f38c 	uxtah	r3, r3, ip
 800f058:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f05c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f060:	b29b      	uxth	r3, r3
 800f062:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f066:	45c1      	cmp	r9, r8
 800f068:	f841 3b04 	str.w	r3, [r1], #4
 800f06c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f070:	d2e9      	bcs.n	800f046 <quorem+0xac>
 800f072:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f076:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f07a:	b922      	cbnz	r2, 800f086 <quorem+0xec>
 800f07c:	3b04      	subs	r3, #4
 800f07e:	429d      	cmp	r5, r3
 800f080:	461a      	mov	r2, r3
 800f082:	d30a      	bcc.n	800f09a <quorem+0x100>
 800f084:	613c      	str	r4, [r7, #16]
 800f086:	4630      	mov	r0, r6
 800f088:	b003      	add	sp, #12
 800f08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f08e:	6812      	ldr	r2, [r2, #0]
 800f090:	3b04      	subs	r3, #4
 800f092:	2a00      	cmp	r2, #0
 800f094:	d1ce      	bne.n	800f034 <quorem+0x9a>
 800f096:	3c01      	subs	r4, #1
 800f098:	e7c9      	b.n	800f02e <quorem+0x94>
 800f09a:	6812      	ldr	r2, [r2, #0]
 800f09c:	3b04      	subs	r3, #4
 800f09e:	2a00      	cmp	r2, #0
 800f0a0:	d1f0      	bne.n	800f084 <quorem+0xea>
 800f0a2:	3c01      	subs	r4, #1
 800f0a4:	e7eb      	b.n	800f07e <quorem+0xe4>
 800f0a6:	2000      	movs	r0, #0
 800f0a8:	e7ee      	b.n	800f088 <quorem+0xee>
 800f0aa:	0000      	movs	r0, r0
 800f0ac:	0000      	movs	r0, r0
	...

0800f0b0 <_dtoa_r>:
 800f0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0b4:	ed2d 8b04 	vpush	{d8-d9}
 800f0b8:	69c5      	ldr	r5, [r0, #28]
 800f0ba:	b093      	sub	sp, #76	; 0x4c
 800f0bc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f0c0:	ec57 6b10 	vmov	r6, r7, d0
 800f0c4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f0c8:	9107      	str	r1, [sp, #28]
 800f0ca:	4604      	mov	r4, r0
 800f0cc:	920a      	str	r2, [sp, #40]	; 0x28
 800f0ce:	930d      	str	r3, [sp, #52]	; 0x34
 800f0d0:	b975      	cbnz	r5, 800f0f0 <_dtoa_r+0x40>
 800f0d2:	2010      	movs	r0, #16
 800f0d4:	f000 fe2a 	bl	800fd2c <malloc>
 800f0d8:	4602      	mov	r2, r0
 800f0da:	61e0      	str	r0, [r4, #28]
 800f0dc:	b920      	cbnz	r0, 800f0e8 <_dtoa_r+0x38>
 800f0de:	4bae      	ldr	r3, [pc, #696]	; (800f398 <_dtoa_r+0x2e8>)
 800f0e0:	21ef      	movs	r1, #239	; 0xef
 800f0e2:	48ae      	ldr	r0, [pc, #696]	; (800f39c <_dtoa_r+0x2ec>)
 800f0e4:	f001 fc82 	bl	80109ec <__assert_func>
 800f0e8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f0ec:	6005      	str	r5, [r0, #0]
 800f0ee:	60c5      	str	r5, [r0, #12]
 800f0f0:	69e3      	ldr	r3, [r4, #28]
 800f0f2:	6819      	ldr	r1, [r3, #0]
 800f0f4:	b151      	cbz	r1, 800f10c <_dtoa_r+0x5c>
 800f0f6:	685a      	ldr	r2, [r3, #4]
 800f0f8:	604a      	str	r2, [r1, #4]
 800f0fa:	2301      	movs	r3, #1
 800f0fc:	4093      	lsls	r3, r2
 800f0fe:	608b      	str	r3, [r1, #8]
 800f100:	4620      	mov	r0, r4
 800f102:	f000 ff07 	bl	800ff14 <_Bfree>
 800f106:	69e3      	ldr	r3, [r4, #28]
 800f108:	2200      	movs	r2, #0
 800f10a:	601a      	str	r2, [r3, #0]
 800f10c:	1e3b      	subs	r3, r7, #0
 800f10e:	bfbb      	ittet	lt
 800f110:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f114:	9303      	strlt	r3, [sp, #12]
 800f116:	2300      	movge	r3, #0
 800f118:	2201      	movlt	r2, #1
 800f11a:	bfac      	ite	ge
 800f11c:	f8c8 3000 	strge.w	r3, [r8]
 800f120:	f8c8 2000 	strlt.w	r2, [r8]
 800f124:	4b9e      	ldr	r3, [pc, #632]	; (800f3a0 <_dtoa_r+0x2f0>)
 800f126:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f12a:	ea33 0308 	bics.w	r3, r3, r8
 800f12e:	d11b      	bne.n	800f168 <_dtoa_r+0xb8>
 800f130:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f132:	f242 730f 	movw	r3, #9999	; 0x270f
 800f136:	6013      	str	r3, [r2, #0]
 800f138:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f13c:	4333      	orrs	r3, r6
 800f13e:	f000 8593 	beq.w	800fc68 <_dtoa_r+0xbb8>
 800f142:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f144:	b963      	cbnz	r3, 800f160 <_dtoa_r+0xb0>
 800f146:	4b97      	ldr	r3, [pc, #604]	; (800f3a4 <_dtoa_r+0x2f4>)
 800f148:	e027      	b.n	800f19a <_dtoa_r+0xea>
 800f14a:	4b97      	ldr	r3, [pc, #604]	; (800f3a8 <_dtoa_r+0x2f8>)
 800f14c:	9300      	str	r3, [sp, #0]
 800f14e:	3308      	adds	r3, #8
 800f150:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f152:	6013      	str	r3, [r2, #0]
 800f154:	9800      	ldr	r0, [sp, #0]
 800f156:	b013      	add	sp, #76	; 0x4c
 800f158:	ecbd 8b04 	vpop	{d8-d9}
 800f15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f160:	4b90      	ldr	r3, [pc, #576]	; (800f3a4 <_dtoa_r+0x2f4>)
 800f162:	9300      	str	r3, [sp, #0]
 800f164:	3303      	adds	r3, #3
 800f166:	e7f3      	b.n	800f150 <_dtoa_r+0xa0>
 800f168:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f16c:	2200      	movs	r2, #0
 800f16e:	ec51 0b17 	vmov	r0, r1, d7
 800f172:	eeb0 8a47 	vmov.f32	s16, s14
 800f176:	eef0 8a67 	vmov.f32	s17, s15
 800f17a:	2300      	movs	r3, #0
 800f17c:	f7f1 fcdc 	bl	8000b38 <__aeabi_dcmpeq>
 800f180:	4681      	mov	r9, r0
 800f182:	b160      	cbz	r0, 800f19e <_dtoa_r+0xee>
 800f184:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f186:	2301      	movs	r3, #1
 800f188:	6013      	str	r3, [r2, #0]
 800f18a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f18c:	2b00      	cmp	r3, #0
 800f18e:	f000 8568 	beq.w	800fc62 <_dtoa_r+0xbb2>
 800f192:	4b86      	ldr	r3, [pc, #536]	; (800f3ac <_dtoa_r+0x2fc>)
 800f194:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f196:	6013      	str	r3, [r2, #0]
 800f198:	3b01      	subs	r3, #1
 800f19a:	9300      	str	r3, [sp, #0]
 800f19c:	e7da      	b.n	800f154 <_dtoa_r+0xa4>
 800f19e:	aa10      	add	r2, sp, #64	; 0x40
 800f1a0:	a911      	add	r1, sp, #68	; 0x44
 800f1a2:	4620      	mov	r0, r4
 800f1a4:	eeb0 0a48 	vmov.f32	s0, s16
 800f1a8:	eef0 0a68 	vmov.f32	s1, s17
 800f1ac:	f001 f994 	bl	80104d8 <__d2b>
 800f1b0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f1b4:	4682      	mov	sl, r0
 800f1b6:	2d00      	cmp	r5, #0
 800f1b8:	d07f      	beq.n	800f2ba <_dtoa_r+0x20a>
 800f1ba:	ee18 3a90 	vmov	r3, s17
 800f1be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f1c2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f1c6:	ec51 0b18 	vmov	r0, r1, d8
 800f1ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f1ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f1d2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f1d6:	4619      	mov	r1, r3
 800f1d8:	2200      	movs	r2, #0
 800f1da:	4b75      	ldr	r3, [pc, #468]	; (800f3b0 <_dtoa_r+0x300>)
 800f1dc:	f7f1 f88c 	bl	80002f8 <__aeabi_dsub>
 800f1e0:	a367      	add	r3, pc, #412	; (adr r3, 800f380 <_dtoa_r+0x2d0>)
 800f1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1e6:	f7f1 fa3f 	bl	8000668 <__aeabi_dmul>
 800f1ea:	a367      	add	r3, pc, #412	; (adr r3, 800f388 <_dtoa_r+0x2d8>)
 800f1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f0:	f7f1 f884 	bl	80002fc <__adddf3>
 800f1f4:	4606      	mov	r6, r0
 800f1f6:	4628      	mov	r0, r5
 800f1f8:	460f      	mov	r7, r1
 800f1fa:	f7f1 f9cb 	bl	8000594 <__aeabi_i2d>
 800f1fe:	a364      	add	r3, pc, #400	; (adr r3, 800f390 <_dtoa_r+0x2e0>)
 800f200:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f204:	f7f1 fa30 	bl	8000668 <__aeabi_dmul>
 800f208:	4602      	mov	r2, r0
 800f20a:	460b      	mov	r3, r1
 800f20c:	4630      	mov	r0, r6
 800f20e:	4639      	mov	r1, r7
 800f210:	f7f1 f874 	bl	80002fc <__adddf3>
 800f214:	4606      	mov	r6, r0
 800f216:	460f      	mov	r7, r1
 800f218:	f7f1 fcd6 	bl	8000bc8 <__aeabi_d2iz>
 800f21c:	2200      	movs	r2, #0
 800f21e:	4683      	mov	fp, r0
 800f220:	2300      	movs	r3, #0
 800f222:	4630      	mov	r0, r6
 800f224:	4639      	mov	r1, r7
 800f226:	f7f1 fc91 	bl	8000b4c <__aeabi_dcmplt>
 800f22a:	b148      	cbz	r0, 800f240 <_dtoa_r+0x190>
 800f22c:	4658      	mov	r0, fp
 800f22e:	f7f1 f9b1 	bl	8000594 <__aeabi_i2d>
 800f232:	4632      	mov	r2, r6
 800f234:	463b      	mov	r3, r7
 800f236:	f7f1 fc7f 	bl	8000b38 <__aeabi_dcmpeq>
 800f23a:	b908      	cbnz	r0, 800f240 <_dtoa_r+0x190>
 800f23c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f240:	f1bb 0f16 	cmp.w	fp, #22
 800f244:	d857      	bhi.n	800f2f6 <_dtoa_r+0x246>
 800f246:	4b5b      	ldr	r3, [pc, #364]	; (800f3b4 <_dtoa_r+0x304>)
 800f248:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f24c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f250:	ec51 0b18 	vmov	r0, r1, d8
 800f254:	f7f1 fc7a 	bl	8000b4c <__aeabi_dcmplt>
 800f258:	2800      	cmp	r0, #0
 800f25a:	d04e      	beq.n	800f2fa <_dtoa_r+0x24a>
 800f25c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f260:	2300      	movs	r3, #0
 800f262:	930c      	str	r3, [sp, #48]	; 0x30
 800f264:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f266:	1b5b      	subs	r3, r3, r5
 800f268:	1e5a      	subs	r2, r3, #1
 800f26a:	bf45      	ittet	mi
 800f26c:	f1c3 0301 	rsbmi	r3, r3, #1
 800f270:	9305      	strmi	r3, [sp, #20]
 800f272:	2300      	movpl	r3, #0
 800f274:	2300      	movmi	r3, #0
 800f276:	9206      	str	r2, [sp, #24]
 800f278:	bf54      	ite	pl
 800f27a:	9305      	strpl	r3, [sp, #20]
 800f27c:	9306      	strmi	r3, [sp, #24]
 800f27e:	f1bb 0f00 	cmp.w	fp, #0
 800f282:	db3c      	blt.n	800f2fe <_dtoa_r+0x24e>
 800f284:	9b06      	ldr	r3, [sp, #24]
 800f286:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f28a:	445b      	add	r3, fp
 800f28c:	9306      	str	r3, [sp, #24]
 800f28e:	2300      	movs	r3, #0
 800f290:	9308      	str	r3, [sp, #32]
 800f292:	9b07      	ldr	r3, [sp, #28]
 800f294:	2b09      	cmp	r3, #9
 800f296:	d868      	bhi.n	800f36a <_dtoa_r+0x2ba>
 800f298:	2b05      	cmp	r3, #5
 800f29a:	bfc4      	itt	gt
 800f29c:	3b04      	subgt	r3, #4
 800f29e:	9307      	strgt	r3, [sp, #28]
 800f2a0:	9b07      	ldr	r3, [sp, #28]
 800f2a2:	f1a3 0302 	sub.w	r3, r3, #2
 800f2a6:	bfcc      	ite	gt
 800f2a8:	2500      	movgt	r5, #0
 800f2aa:	2501      	movle	r5, #1
 800f2ac:	2b03      	cmp	r3, #3
 800f2ae:	f200 8085 	bhi.w	800f3bc <_dtoa_r+0x30c>
 800f2b2:	e8df f003 	tbb	[pc, r3]
 800f2b6:	3b2e      	.short	0x3b2e
 800f2b8:	5839      	.short	0x5839
 800f2ba:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f2be:	441d      	add	r5, r3
 800f2c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f2c4:	2b20      	cmp	r3, #32
 800f2c6:	bfc1      	itttt	gt
 800f2c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f2cc:	fa08 f803 	lslgt.w	r8, r8, r3
 800f2d0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f2d4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f2d8:	bfd6      	itet	le
 800f2da:	f1c3 0320 	rsble	r3, r3, #32
 800f2de:	ea48 0003 	orrgt.w	r0, r8, r3
 800f2e2:	fa06 f003 	lslle.w	r0, r6, r3
 800f2e6:	f7f1 f945 	bl	8000574 <__aeabi_ui2d>
 800f2ea:	2201      	movs	r2, #1
 800f2ec:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f2f0:	3d01      	subs	r5, #1
 800f2f2:	920e      	str	r2, [sp, #56]	; 0x38
 800f2f4:	e76f      	b.n	800f1d6 <_dtoa_r+0x126>
 800f2f6:	2301      	movs	r3, #1
 800f2f8:	e7b3      	b.n	800f262 <_dtoa_r+0x1b2>
 800f2fa:	900c      	str	r0, [sp, #48]	; 0x30
 800f2fc:	e7b2      	b.n	800f264 <_dtoa_r+0x1b4>
 800f2fe:	9b05      	ldr	r3, [sp, #20]
 800f300:	eba3 030b 	sub.w	r3, r3, fp
 800f304:	9305      	str	r3, [sp, #20]
 800f306:	f1cb 0300 	rsb	r3, fp, #0
 800f30a:	9308      	str	r3, [sp, #32]
 800f30c:	2300      	movs	r3, #0
 800f30e:	930b      	str	r3, [sp, #44]	; 0x2c
 800f310:	e7bf      	b.n	800f292 <_dtoa_r+0x1e2>
 800f312:	2300      	movs	r3, #0
 800f314:	9309      	str	r3, [sp, #36]	; 0x24
 800f316:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f318:	2b00      	cmp	r3, #0
 800f31a:	dc52      	bgt.n	800f3c2 <_dtoa_r+0x312>
 800f31c:	2301      	movs	r3, #1
 800f31e:	9301      	str	r3, [sp, #4]
 800f320:	9304      	str	r3, [sp, #16]
 800f322:	461a      	mov	r2, r3
 800f324:	920a      	str	r2, [sp, #40]	; 0x28
 800f326:	e00b      	b.n	800f340 <_dtoa_r+0x290>
 800f328:	2301      	movs	r3, #1
 800f32a:	e7f3      	b.n	800f314 <_dtoa_r+0x264>
 800f32c:	2300      	movs	r3, #0
 800f32e:	9309      	str	r3, [sp, #36]	; 0x24
 800f330:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f332:	445b      	add	r3, fp
 800f334:	9301      	str	r3, [sp, #4]
 800f336:	3301      	adds	r3, #1
 800f338:	2b01      	cmp	r3, #1
 800f33a:	9304      	str	r3, [sp, #16]
 800f33c:	bfb8      	it	lt
 800f33e:	2301      	movlt	r3, #1
 800f340:	69e0      	ldr	r0, [r4, #28]
 800f342:	2100      	movs	r1, #0
 800f344:	2204      	movs	r2, #4
 800f346:	f102 0614 	add.w	r6, r2, #20
 800f34a:	429e      	cmp	r6, r3
 800f34c:	d93d      	bls.n	800f3ca <_dtoa_r+0x31a>
 800f34e:	6041      	str	r1, [r0, #4]
 800f350:	4620      	mov	r0, r4
 800f352:	f000 fd9f 	bl	800fe94 <_Balloc>
 800f356:	9000      	str	r0, [sp, #0]
 800f358:	2800      	cmp	r0, #0
 800f35a:	d139      	bne.n	800f3d0 <_dtoa_r+0x320>
 800f35c:	4b16      	ldr	r3, [pc, #88]	; (800f3b8 <_dtoa_r+0x308>)
 800f35e:	4602      	mov	r2, r0
 800f360:	f240 11af 	movw	r1, #431	; 0x1af
 800f364:	e6bd      	b.n	800f0e2 <_dtoa_r+0x32>
 800f366:	2301      	movs	r3, #1
 800f368:	e7e1      	b.n	800f32e <_dtoa_r+0x27e>
 800f36a:	2501      	movs	r5, #1
 800f36c:	2300      	movs	r3, #0
 800f36e:	9307      	str	r3, [sp, #28]
 800f370:	9509      	str	r5, [sp, #36]	; 0x24
 800f372:	f04f 33ff 	mov.w	r3, #4294967295
 800f376:	9301      	str	r3, [sp, #4]
 800f378:	9304      	str	r3, [sp, #16]
 800f37a:	2200      	movs	r2, #0
 800f37c:	2312      	movs	r3, #18
 800f37e:	e7d1      	b.n	800f324 <_dtoa_r+0x274>
 800f380:	636f4361 	.word	0x636f4361
 800f384:	3fd287a7 	.word	0x3fd287a7
 800f388:	8b60c8b3 	.word	0x8b60c8b3
 800f38c:	3fc68a28 	.word	0x3fc68a28
 800f390:	509f79fb 	.word	0x509f79fb
 800f394:	3fd34413 	.word	0x3fd34413
 800f398:	0801226a 	.word	0x0801226a
 800f39c:	08012281 	.word	0x08012281
 800f3a0:	7ff00000 	.word	0x7ff00000
 800f3a4:	08012266 	.word	0x08012266
 800f3a8:	0801225d 	.word	0x0801225d
 800f3ac:	0801223a 	.word	0x0801223a
 800f3b0:	3ff80000 	.word	0x3ff80000
 800f3b4:	08012370 	.word	0x08012370
 800f3b8:	080122d9 	.word	0x080122d9
 800f3bc:	2301      	movs	r3, #1
 800f3be:	9309      	str	r3, [sp, #36]	; 0x24
 800f3c0:	e7d7      	b.n	800f372 <_dtoa_r+0x2c2>
 800f3c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f3c4:	9301      	str	r3, [sp, #4]
 800f3c6:	9304      	str	r3, [sp, #16]
 800f3c8:	e7ba      	b.n	800f340 <_dtoa_r+0x290>
 800f3ca:	3101      	adds	r1, #1
 800f3cc:	0052      	lsls	r2, r2, #1
 800f3ce:	e7ba      	b.n	800f346 <_dtoa_r+0x296>
 800f3d0:	69e3      	ldr	r3, [r4, #28]
 800f3d2:	9a00      	ldr	r2, [sp, #0]
 800f3d4:	601a      	str	r2, [r3, #0]
 800f3d6:	9b04      	ldr	r3, [sp, #16]
 800f3d8:	2b0e      	cmp	r3, #14
 800f3da:	f200 80a8 	bhi.w	800f52e <_dtoa_r+0x47e>
 800f3de:	2d00      	cmp	r5, #0
 800f3e0:	f000 80a5 	beq.w	800f52e <_dtoa_r+0x47e>
 800f3e4:	f1bb 0f00 	cmp.w	fp, #0
 800f3e8:	dd38      	ble.n	800f45c <_dtoa_r+0x3ac>
 800f3ea:	4bc0      	ldr	r3, [pc, #768]	; (800f6ec <_dtoa_r+0x63c>)
 800f3ec:	f00b 020f 	and.w	r2, fp, #15
 800f3f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f3f8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f3fc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f400:	d019      	beq.n	800f436 <_dtoa_r+0x386>
 800f402:	4bbb      	ldr	r3, [pc, #748]	; (800f6f0 <_dtoa_r+0x640>)
 800f404:	ec51 0b18 	vmov	r0, r1, d8
 800f408:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f40c:	f7f1 fa56 	bl	80008bc <__aeabi_ddiv>
 800f410:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f414:	f008 080f 	and.w	r8, r8, #15
 800f418:	2503      	movs	r5, #3
 800f41a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f6f0 <_dtoa_r+0x640>
 800f41e:	f1b8 0f00 	cmp.w	r8, #0
 800f422:	d10a      	bne.n	800f43a <_dtoa_r+0x38a>
 800f424:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f428:	4632      	mov	r2, r6
 800f42a:	463b      	mov	r3, r7
 800f42c:	f7f1 fa46 	bl	80008bc <__aeabi_ddiv>
 800f430:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f434:	e02b      	b.n	800f48e <_dtoa_r+0x3de>
 800f436:	2502      	movs	r5, #2
 800f438:	e7ef      	b.n	800f41a <_dtoa_r+0x36a>
 800f43a:	f018 0f01 	tst.w	r8, #1
 800f43e:	d008      	beq.n	800f452 <_dtoa_r+0x3a2>
 800f440:	4630      	mov	r0, r6
 800f442:	4639      	mov	r1, r7
 800f444:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f448:	f7f1 f90e 	bl	8000668 <__aeabi_dmul>
 800f44c:	3501      	adds	r5, #1
 800f44e:	4606      	mov	r6, r0
 800f450:	460f      	mov	r7, r1
 800f452:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f456:	f109 0908 	add.w	r9, r9, #8
 800f45a:	e7e0      	b.n	800f41e <_dtoa_r+0x36e>
 800f45c:	f000 809f 	beq.w	800f59e <_dtoa_r+0x4ee>
 800f460:	f1cb 0600 	rsb	r6, fp, #0
 800f464:	4ba1      	ldr	r3, [pc, #644]	; (800f6ec <_dtoa_r+0x63c>)
 800f466:	4fa2      	ldr	r7, [pc, #648]	; (800f6f0 <_dtoa_r+0x640>)
 800f468:	f006 020f 	and.w	r2, r6, #15
 800f46c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f474:	ec51 0b18 	vmov	r0, r1, d8
 800f478:	f7f1 f8f6 	bl	8000668 <__aeabi_dmul>
 800f47c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f480:	1136      	asrs	r6, r6, #4
 800f482:	2300      	movs	r3, #0
 800f484:	2502      	movs	r5, #2
 800f486:	2e00      	cmp	r6, #0
 800f488:	d17e      	bne.n	800f588 <_dtoa_r+0x4d8>
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d1d0      	bne.n	800f430 <_dtoa_r+0x380>
 800f48e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f490:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f494:	2b00      	cmp	r3, #0
 800f496:	f000 8084 	beq.w	800f5a2 <_dtoa_r+0x4f2>
 800f49a:	4b96      	ldr	r3, [pc, #600]	; (800f6f4 <_dtoa_r+0x644>)
 800f49c:	2200      	movs	r2, #0
 800f49e:	4640      	mov	r0, r8
 800f4a0:	4649      	mov	r1, r9
 800f4a2:	f7f1 fb53 	bl	8000b4c <__aeabi_dcmplt>
 800f4a6:	2800      	cmp	r0, #0
 800f4a8:	d07b      	beq.n	800f5a2 <_dtoa_r+0x4f2>
 800f4aa:	9b04      	ldr	r3, [sp, #16]
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d078      	beq.n	800f5a2 <_dtoa_r+0x4f2>
 800f4b0:	9b01      	ldr	r3, [sp, #4]
 800f4b2:	2b00      	cmp	r3, #0
 800f4b4:	dd39      	ble.n	800f52a <_dtoa_r+0x47a>
 800f4b6:	4b90      	ldr	r3, [pc, #576]	; (800f6f8 <_dtoa_r+0x648>)
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	4640      	mov	r0, r8
 800f4bc:	4649      	mov	r1, r9
 800f4be:	f7f1 f8d3 	bl	8000668 <__aeabi_dmul>
 800f4c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4c6:	9e01      	ldr	r6, [sp, #4]
 800f4c8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f4cc:	3501      	adds	r5, #1
 800f4ce:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f4d2:	4628      	mov	r0, r5
 800f4d4:	f7f1 f85e 	bl	8000594 <__aeabi_i2d>
 800f4d8:	4642      	mov	r2, r8
 800f4da:	464b      	mov	r3, r9
 800f4dc:	f7f1 f8c4 	bl	8000668 <__aeabi_dmul>
 800f4e0:	4b86      	ldr	r3, [pc, #536]	; (800f6fc <_dtoa_r+0x64c>)
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	f7f0 ff0a 	bl	80002fc <__adddf3>
 800f4e8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f4ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4f0:	9303      	str	r3, [sp, #12]
 800f4f2:	2e00      	cmp	r6, #0
 800f4f4:	d158      	bne.n	800f5a8 <_dtoa_r+0x4f8>
 800f4f6:	4b82      	ldr	r3, [pc, #520]	; (800f700 <_dtoa_r+0x650>)
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	4640      	mov	r0, r8
 800f4fc:	4649      	mov	r1, r9
 800f4fe:	f7f0 fefb 	bl	80002f8 <__aeabi_dsub>
 800f502:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f506:	4680      	mov	r8, r0
 800f508:	4689      	mov	r9, r1
 800f50a:	f7f1 fb3d 	bl	8000b88 <__aeabi_dcmpgt>
 800f50e:	2800      	cmp	r0, #0
 800f510:	f040 8296 	bne.w	800fa40 <_dtoa_r+0x990>
 800f514:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f518:	4640      	mov	r0, r8
 800f51a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f51e:	4649      	mov	r1, r9
 800f520:	f7f1 fb14 	bl	8000b4c <__aeabi_dcmplt>
 800f524:	2800      	cmp	r0, #0
 800f526:	f040 8289 	bne.w	800fa3c <_dtoa_r+0x98c>
 800f52a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f52e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f530:	2b00      	cmp	r3, #0
 800f532:	f2c0 814e 	blt.w	800f7d2 <_dtoa_r+0x722>
 800f536:	f1bb 0f0e 	cmp.w	fp, #14
 800f53a:	f300 814a 	bgt.w	800f7d2 <_dtoa_r+0x722>
 800f53e:	4b6b      	ldr	r3, [pc, #428]	; (800f6ec <_dtoa_r+0x63c>)
 800f540:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f544:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f54a:	2b00      	cmp	r3, #0
 800f54c:	f280 80dc 	bge.w	800f708 <_dtoa_r+0x658>
 800f550:	9b04      	ldr	r3, [sp, #16]
 800f552:	2b00      	cmp	r3, #0
 800f554:	f300 80d8 	bgt.w	800f708 <_dtoa_r+0x658>
 800f558:	f040 826f 	bne.w	800fa3a <_dtoa_r+0x98a>
 800f55c:	4b68      	ldr	r3, [pc, #416]	; (800f700 <_dtoa_r+0x650>)
 800f55e:	2200      	movs	r2, #0
 800f560:	4640      	mov	r0, r8
 800f562:	4649      	mov	r1, r9
 800f564:	f7f1 f880 	bl	8000668 <__aeabi_dmul>
 800f568:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f56c:	f7f1 fb02 	bl	8000b74 <__aeabi_dcmpge>
 800f570:	9e04      	ldr	r6, [sp, #16]
 800f572:	4637      	mov	r7, r6
 800f574:	2800      	cmp	r0, #0
 800f576:	f040 8245 	bne.w	800fa04 <_dtoa_r+0x954>
 800f57a:	9d00      	ldr	r5, [sp, #0]
 800f57c:	2331      	movs	r3, #49	; 0x31
 800f57e:	f805 3b01 	strb.w	r3, [r5], #1
 800f582:	f10b 0b01 	add.w	fp, fp, #1
 800f586:	e241      	b.n	800fa0c <_dtoa_r+0x95c>
 800f588:	07f2      	lsls	r2, r6, #31
 800f58a:	d505      	bpl.n	800f598 <_dtoa_r+0x4e8>
 800f58c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f590:	f7f1 f86a 	bl	8000668 <__aeabi_dmul>
 800f594:	3501      	adds	r5, #1
 800f596:	2301      	movs	r3, #1
 800f598:	1076      	asrs	r6, r6, #1
 800f59a:	3708      	adds	r7, #8
 800f59c:	e773      	b.n	800f486 <_dtoa_r+0x3d6>
 800f59e:	2502      	movs	r5, #2
 800f5a0:	e775      	b.n	800f48e <_dtoa_r+0x3de>
 800f5a2:	9e04      	ldr	r6, [sp, #16]
 800f5a4:	465f      	mov	r7, fp
 800f5a6:	e792      	b.n	800f4ce <_dtoa_r+0x41e>
 800f5a8:	9900      	ldr	r1, [sp, #0]
 800f5aa:	4b50      	ldr	r3, [pc, #320]	; (800f6ec <_dtoa_r+0x63c>)
 800f5ac:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f5b0:	4431      	add	r1, r6
 800f5b2:	9102      	str	r1, [sp, #8]
 800f5b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f5b6:	eeb0 9a47 	vmov.f32	s18, s14
 800f5ba:	eef0 9a67 	vmov.f32	s19, s15
 800f5be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f5c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f5c6:	2900      	cmp	r1, #0
 800f5c8:	d044      	beq.n	800f654 <_dtoa_r+0x5a4>
 800f5ca:	494e      	ldr	r1, [pc, #312]	; (800f704 <_dtoa_r+0x654>)
 800f5cc:	2000      	movs	r0, #0
 800f5ce:	f7f1 f975 	bl	80008bc <__aeabi_ddiv>
 800f5d2:	ec53 2b19 	vmov	r2, r3, d9
 800f5d6:	f7f0 fe8f 	bl	80002f8 <__aeabi_dsub>
 800f5da:	9d00      	ldr	r5, [sp, #0]
 800f5dc:	ec41 0b19 	vmov	d9, r0, r1
 800f5e0:	4649      	mov	r1, r9
 800f5e2:	4640      	mov	r0, r8
 800f5e4:	f7f1 faf0 	bl	8000bc8 <__aeabi_d2iz>
 800f5e8:	4606      	mov	r6, r0
 800f5ea:	f7f0 ffd3 	bl	8000594 <__aeabi_i2d>
 800f5ee:	4602      	mov	r2, r0
 800f5f0:	460b      	mov	r3, r1
 800f5f2:	4640      	mov	r0, r8
 800f5f4:	4649      	mov	r1, r9
 800f5f6:	f7f0 fe7f 	bl	80002f8 <__aeabi_dsub>
 800f5fa:	3630      	adds	r6, #48	; 0x30
 800f5fc:	f805 6b01 	strb.w	r6, [r5], #1
 800f600:	ec53 2b19 	vmov	r2, r3, d9
 800f604:	4680      	mov	r8, r0
 800f606:	4689      	mov	r9, r1
 800f608:	f7f1 faa0 	bl	8000b4c <__aeabi_dcmplt>
 800f60c:	2800      	cmp	r0, #0
 800f60e:	d164      	bne.n	800f6da <_dtoa_r+0x62a>
 800f610:	4642      	mov	r2, r8
 800f612:	464b      	mov	r3, r9
 800f614:	4937      	ldr	r1, [pc, #220]	; (800f6f4 <_dtoa_r+0x644>)
 800f616:	2000      	movs	r0, #0
 800f618:	f7f0 fe6e 	bl	80002f8 <__aeabi_dsub>
 800f61c:	ec53 2b19 	vmov	r2, r3, d9
 800f620:	f7f1 fa94 	bl	8000b4c <__aeabi_dcmplt>
 800f624:	2800      	cmp	r0, #0
 800f626:	f040 80b6 	bne.w	800f796 <_dtoa_r+0x6e6>
 800f62a:	9b02      	ldr	r3, [sp, #8]
 800f62c:	429d      	cmp	r5, r3
 800f62e:	f43f af7c 	beq.w	800f52a <_dtoa_r+0x47a>
 800f632:	4b31      	ldr	r3, [pc, #196]	; (800f6f8 <_dtoa_r+0x648>)
 800f634:	ec51 0b19 	vmov	r0, r1, d9
 800f638:	2200      	movs	r2, #0
 800f63a:	f7f1 f815 	bl	8000668 <__aeabi_dmul>
 800f63e:	4b2e      	ldr	r3, [pc, #184]	; (800f6f8 <_dtoa_r+0x648>)
 800f640:	ec41 0b19 	vmov	d9, r0, r1
 800f644:	2200      	movs	r2, #0
 800f646:	4640      	mov	r0, r8
 800f648:	4649      	mov	r1, r9
 800f64a:	f7f1 f80d 	bl	8000668 <__aeabi_dmul>
 800f64e:	4680      	mov	r8, r0
 800f650:	4689      	mov	r9, r1
 800f652:	e7c5      	b.n	800f5e0 <_dtoa_r+0x530>
 800f654:	ec51 0b17 	vmov	r0, r1, d7
 800f658:	f7f1 f806 	bl	8000668 <__aeabi_dmul>
 800f65c:	9b02      	ldr	r3, [sp, #8]
 800f65e:	9d00      	ldr	r5, [sp, #0]
 800f660:	930f      	str	r3, [sp, #60]	; 0x3c
 800f662:	ec41 0b19 	vmov	d9, r0, r1
 800f666:	4649      	mov	r1, r9
 800f668:	4640      	mov	r0, r8
 800f66a:	f7f1 faad 	bl	8000bc8 <__aeabi_d2iz>
 800f66e:	4606      	mov	r6, r0
 800f670:	f7f0 ff90 	bl	8000594 <__aeabi_i2d>
 800f674:	3630      	adds	r6, #48	; 0x30
 800f676:	4602      	mov	r2, r0
 800f678:	460b      	mov	r3, r1
 800f67a:	4640      	mov	r0, r8
 800f67c:	4649      	mov	r1, r9
 800f67e:	f7f0 fe3b 	bl	80002f8 <__aeabi_dsub>
 800f682:	f805 6b01 	strb.w	r6, [r5], #1
 800f686:	9b02      	ldr	r3, [sp, #8]
 800f688:	429d      	cmp	r5, r3
 800f68a:	4680      	mov	r8, r0
 800f68c:	4689      	mov	r9, r1
 800f68e:	f04f 0200 	mov.w	r2, #0
 800f692:	d124      	bne.n	800f6de <_dtoa_r+0x62e>
 800f694:	4b1b      	ldr	r3, [pc, #108]	; (800f704 <_dtoa_r+0x654>)
 800f696:	ec51 0b19 	vmov	r0, r1, d9
 800f69a:	f7f0 fe2f 	bl	80002fc <__adddf3>
 800f69e:	4602      	mov	r2, r0
 800f6a0:	460b      	mov	r3, r1
 800f6a2:	4640      	mov	r0, r8
 800f6a4:	4649      	mov	r1, r9
 800f6a6:	f7f1 fa6f 	bl	8000b88 <__aeabi_dcmpgt>
 800f6aa:	2800      	cmp	r0, #0
 800f6ac:	d173      	bne.n	800f796 <_dtoa_r+0x6e6>
 800f6ae:	ec53 2b19 	vmov	r2, r3, d9
 800f6b2:	4914      	ldr	r1, [pc, #80]	; (800f704 <_dtoa_r+0x654>)
 800f6b4:	2000      	movs	r0, #0
 800f6b6:	f7f0 fe1f 	bl	80002f8 <__aeabi_dsub>
 800f6ba:	4602      	mov	r2, r0
 800f6bc:	460b      	mov	r3, r1
 800f6be:	4640      	mov	r0, r8
 800f6c0:	4649      	mov	r1, r9
 800f6c2:	f7f1 fa43 	bl	8000b4c <__aeabi_dcmplt>
 800f6c6:	2800      	cmp	r0, #0
 800f6c8:	f43f af2f 	beq.w	800f52a <_dtoa_r+0x47a>
 800f6cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f6ce:	1e6b      	subs	r3, r5, #1
 800f6d0:	930f      	str	r3, [sp, #60]	; 0x3c
 800f6d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f6d6:	2b30      	cmp	r3, #48	; 0x30
 800f6d8:	d0f8      	beq.n	800f6cc <_dtoa_r+0x61c>
 800f6da:	46bb      	mov	fp, r7
 800f6dc:	e04a      	b.n	800f774 <_dtoa_r+0x6c4>
 800f6de:	4b06      	ldr	r3, [pc, #24]	; (800f6f8 <_dtoa_r+0x648>)
 800f6e0:	f7f0 ffc2 	bl	8000668 <__aeabi_dmul>
 800f6e4:	4680      	mov	r8, r0
 800f6e6:	4689      	mov	r9, r1
 800f6e8:	e7bd      	b.n	800f666 <_dtoa_r+0x5b6>
 800f6ea:	bf00      	nop
 800f6ec:	08012370 	.word	0x08012370
 800f6f0:	08012348 	.word	0x08012348
 800f6f4:	3ff00000 	.word	0x3ff00000
 800f6f8:	40240000 	.word	0x40240000
 800f6fc:	401c0000 	.word	0x401c0000
 800f700:	40140000 	.word	0x40140000
 800f704:	3fe00000 	.word	0x3fe00000
 800f708:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800f70c:	9d00      	ldr	r5, [sp, #0]
 800f70e:	4642      	mov	r2, r8
 800f710:	464b      	mov	r3, r9
 800f712:	4630      	mov	r0, r6
 800f714:	4639      	mov	r1, r7
 800f716:	f7f1 f8d1 	bl	80008bc <__aeabi_ddiv>
 800f71a:	f7f1 fa55 	bl	8000bc8 <__aeabi_d2iz>
 800f71e:	9001      	str	r0, [sp, #4]
 800f720:	f7f0 ff38 	bl	8000594 <__aeabi_i2d>
 800f724:	4642      	mov	r2, r8
 800f726:	464b      	mov	r3, r9
 800f728:	f7f0 ff9e 	bl	8000668 <__aeabi_dmul>
 800f72c:	4602      	mov	r2, r0
 800f72e:	460b      	mov	r3, r1
 800f730:	4630      	mov	r0, r6
 800f732:	4639      	mov	r1, r7
 800f734:	f7f0 fde0 	bl	80002f8 <__aeabi_dsub>
 800f738:	9e01      	ldr	r6, [sp, #4]
 800f73a:	9f04      	ldr	r7, [sp, #16]
 800f73c:	3630      	adds	r6, #48	; 0x30
 800f73e:	f805 6b01 	strb.w	r6, [r5], #1
 800f742:	9e00      	ldr	r6, [sp, #0]
 800f744:	1bae      	subs	r6, r5, r6
 800f746:	42b7      	cmp	r7, r6
 800f748:	4602      	mov	r2, r0
 800f74a:	460b      	mov	r3, r1
 800f74c:	d134      	bne.n	800f7b8 <_dtoa_r+0x708>
 800f74e:	f7f0 fdd5 	bl	80002fc <__adddf3>
 800f752:	4642      	mov	r2, r8
 800f754:	464b      	mov	r3, r9
 800f756:	4606      	mov	r6, r0
 800f758:	460f      	mov	r7, r1
 800f75a:	f7f1 fa15 	bl	8000b88 <__aeabi_dcmpgt>
 800f75e:	b9c8      	cbnz	r0, 800f794 <_dtoa_r+0x6e4>
 800f760:	4642      	mov	r2, r8
 800f762:	464b      	mov	r3, r9
 800f764:	4630      	mov	r0, r6
 800f766:	4639      	mov	r1, r7
 800f768:	f7f1 f9e6 	bl	8000b38 <__aeabi_dcmpeq>
 800f76c:	b110      	cbz	r0, 800f774 <_dtoa_r+0x6c4>
 800f76e:	9b01      	ldr	r3, [sp, #4]
 800f770:	07db      	lsls	r3, r3, #31
 800f772:	d40f      	bmi.n	800f794 <_dtoa_r+0x6e4>
 800f774:	4651      	mov	r1, sl
 800f776:	4620      	mov	r0, r4
 800f778:	f000 fbcc 	bl	800ff14 <_Bfree>
 800f77c:	2300      	movs	r3, #0
 800f77e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f780:	702b      	strb	r3, [r5, #0]
 800f782:	f10b 0301 	add.w	r3, fp, #1
 800f786:	6013      	str	r3, [r2, #0]
 800f788:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	f43f ace2 	beq.w	800f154 <_dtoa_r+0xa4>
 800f790:	601d      	str	r5, [r3, #0]
 800f792:	e4df      	b.n	800f154 <_dtoa_r+0xa4>
 800f794:	465f      	mov	r7, fp
 800f796:	462b      	mov	r3, r5
 800f798:	461d      	mov	r5, r3
 800f79a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f79e:	2a39      	cmp	r2, #57	; 0x39
 800f7a0:	d106      	bne.n	800f7b0 <_dtoa_r+0x700>
 800f7a2:	9a00      	ldr	r2, [sp, #0]
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	d1f7      	bne.n	800f798 <_dtoa_r+0x6e8>
 800f7a8:	9900      	ldr	r1, [sp, #0]
 800f7aa:	2230      	movs	r2, #48	; 0x30
 800f7ac:	3701      	adds	r7, #1
 800f7ae:	700a      	strb	r2, [r1, #0]
 800f7b0:	781a      	ldrb	r2, [r3, #0]
 800f7b2:	3201      	adds	r2, #1
 800f7b4:	701a      	strb	r2, [r3, #0]
 800f7b6:	e790      	b.n	800f6da <_dtoa_r+0x62a>
 800f7b8:	4ba3      	ldr	r3, [pc, #652]	; (800fa48 <_dtoa_r+0x998>)
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	f7f0 ff54 	bl	8000668 <__aeabi_dmul>
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	4606      	mov	r6, r0
 800f7c6:	460f      	mov	r7, r1
 800f7c8:	f7f1 f9b6 	bl	8000b38 <__aeabi_dcmpeq>
 800f7cc:	2800      	cmp	r0, #0
 800f7ce:	d09e      	beq.n	800f70e <_dtoa_r+0x65e>
 800f7d0:	e7d0      	b.n	800f774 <_dtoa_r+0x6c4>
 800f7d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f7d4:	2a00      	cmp	r2, #0
 800f7d6:	f000 80ca 	beq.w	800f96e <_dtoa_r+0x8be>
 800f7da:	9a07      	ldr	r2, [sp, #28]
 800f7dc:	2a01      	cmp	r2, #1
 800f7de:	f300 80ad 	bgt.w	800f93c <_dtoa_r+0x88c>
 800f7e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f7e4:	2a00      	cmp	r2, #0
 800f7e6:	f000 80a5 	beq.w	800f934 <_dtoa_r+0x884>
 800f7ea:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f7ee:	9e08      	ldr	r6, [sp, #32]
 800f7f0:	9d05      	ldr	r5, [sp, #20]
 800f7f2:	9a05      	ldr	r2, [sp, #20]
 800f7f4:	441a      	add	r2, r3
 800f7f6:	9205      	str	r2, [sp, #20]
 800f7f8:	9a06      	ldr	r2, [sp, #24]
 800f7fa:	2101      	movs	r1, #1
 800f7fc:	441a      	add	r2, r3
 800f7fe:	4620      	mov	r0, r4
 800f800:	9206      	str	r2, [sp, #24]
 800f802:	f000 fc3d 	bl	8010080 <__i2b>
 800f806:	4607      	mov	r7, r0
 800f808:	b165      	cbz	r5, 800f824 <_dtoa_r+0x774>
 800f80a:	9b06      	ldr	r3, [sp, #24]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	dd09      	ble.n	800f824 <_dtoa_r+0x774>
 800f810:	42ab      	cmp	r3, r5
 800f812:	9a05      	ldr	r2, [sp, #20]
 800f814:	bfa8      	it	ge
 800f816:	462b      	movge	r3, r5
 800f818:	1ad2      	subs	r2, r2, r3
 800f81a:	9205      	str	r2, [sp, #20]
 800f81c:	9a06      	ldr	r2, [sp, #24]
 800f81e:	1aed      	subs	r5, r5, r3
 800f820:	1ad3      	subs	r3, r2, r3
 800f822:	9306      	str	r3, [sp, #24]
 800f824:	9b08      	ldr	r3, [sp, #32]
 800f826:	b1f3      	cbz	r3, 800f866 <_dtoa_r+0x7b6>
 800f828:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	f000 80a3 	beq.w	800f976 <_dtoa_r+0x8c6>
 800f830:	2e00      	cmp	r6, #0
 800f832:	dd10      	ble.n	800f856 <_dtoa_r+0x7a6>
 800f834:	4639      	mov	r1, r7
 800f836:	4632      	mov	r2, r6
 800f838:	4620      	mov	r0, r4
 800f83a:	f000 fce1 	bl	8010200 <__pow5mult>
 800f83e:	4652      	mov	r2, sl
 800f840:	4601      	mov	r1, r0
 800f842:	4607      	mov	r7, r0
 800f844:	4620      	mov	r0, r4
 800f846:	f000 fc31 	bl	80100ac <__multiply>
 800f84a:	4651      	mov	r1, sl
 800f84c:	4680      	mov	r8, r0
 800f84e:	4620      	mov	r0, r4
 800f850:	f000 fb60 	bl	800ff14 <_Bfree>
 800f854:	46c2      	mov	sl, r8
 800f856:	9b08      	ldr	r3, [sp, #32]
 800f858:	1b9a      	subs	r2, r3, r6
 800f85a:	d004      	beq.n	800f866 <_dtoa_r+0x7b6>
 800f85c:	4651      	mov	r1, sl
 800f85e:	4620      	mov	r0, r4
 800f860:	f000 fcce 	bl	8010200 <__pow5mult>
 800f864:	4682      	mov	sl, r0
 800f866:	2101      	movs	r1, #1
 800f868:	4620      	mov	r0, r4
 800f86a:	f000 fc09 	bl	8010080 <__i2b>
 800f86e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f870:	2b00      	cmp	r3, #0
 800f872:	4606      	mov	r6, r0
 800f874:	f340 8081 	ble.w	800f97a <_dtoa_r+0x8ca>
 800f878:	461a      	mov	r2, r3
 800f87a:	4601      	mov	r1, r0
 800f87c:	4620      	mov	r0, r4
 800f87e:	f000 fcbf 	bl	8010200 <__pow5mult>
 800f882:	9b07      	ldr	r3, [sp, #28]
 800f884:	2b01      	cmp	r3, #1
 800f886:	4606      	mov	r6, r0
 800f888:	dd7a      	ble.n	800f980 <_dtoa_r+0x8d0>
 800f88a:	f04f 0800 	mov.w	r8, #0
 800f88e:	6933      	ldr	r3, [r6, #16]
 800f890:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f894:	6918      	ldr	r0, [r3, #16]
 800f896:	f000 fba5 	bl	800ffe4 <__hi0bits>
 800f89a:	f1c0 0020 	rsb	r0, r0, #32
 800f89e:	9b06      	ldr	r3, [sp, #24]
 800f8a0:	4418      	add	r0, r3
 800f8a2:	f010 001f 	ands.w	r0, r0, #31
 800f8a6:	f000 8094 	beq.w	800f9d2 <_dtoa_r+0x922>
 800f8aa:	f1c0 0320 	rsb	r3, r0, #32
 800f8ae:	2b04      	cmp	r3, #4
 800f8b0:	f340 8085 	ble.w	800f9be <_dtoa_r+0x90e>
 800f8b4:	9b05      	ldr	r3, [sp, #20]
 800f8b6:	f1c0 001c 	rsb	r0, r0, #28
 800f8ba:	4403      	add	r3, r0
 800f8bc:	9305      	str	r3, [sp, #20]
 800f8be:	9b06      	ldr	r3, [sp, #24]
 800f8c0:	4403      	add	r3, r0
 800f8c2:	4405      	add	r5, r0
 800f8c4:	9306      	str	r3, [sp, #24]
 800f8c6:	9b05      	ldr	r3, [sp, #20]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	dd05      	ble.n	800f8d8 <_dtoa_r+0x828>
 800f8cc:	4651      	mov	r1, sl
 800f8ce:	461a      	mov	r2, r3
 800f8d0:	4620      	mov	r0, r4
 800f8d2:	f000 fcef 	bl	80102b4 <__lshift>
 800f8d6:	4682      	mov	sl, r0
 800f8d8:	9b06      	ldr	r3, [sp, #24]
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	dd05      	ble.n	800f8ea <_dtoa_r+0x83a>
 800f8de:	4631      	mov	r1, r6
 800f8e0:	461a      	mov	r2, r3
 800f8e2:	4620      	mov	r0, r4
 800f8e4:	f000 fce6 	bl	80102b4 <__lshift>
 800f8e8:	4606      	mov	r6, r0
 800f8ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d072      	beq.n	800f9d6 <_dtoa_r+0x926>
 800f8f0:	4631      	mov	r1, r6
 800f8f2:	4650      	mov	r0, sl
 800f8f4:	f000 fd4a 	bl	801038c <__mcmp>
 800f8f8:	2800      	cmp	r0, #0
 800f8fa:	da6c      	bge.n	800f9d6 <_dtoa_r+0x926>
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	4651      	mov	r1, sl
 800f900:	220a      	movs	r2, #10
 800f902:	4620      	mov	r0, r4
 800f904:	f000 fb28 	bl	800ff58 <__multadd>
 800f908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f90a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f90e:	4682      	mov	sl, r0
 800f910:	2b00      	cmp	r3, #0
 800f912:	f000 81b0 	beq.w	800fc76 <_dtoa_r+0xbc6>
 800f916:	2300      	movs	r3, #0
 800f918:	4639      	mov	r1, r7
 800f91a:	220a      	movs	r2, #10
 800f91c:	4620      	mov	r0, r4
 800f91e:	f000 fb1b 	bl	800ff58 <__multadd>
 800f922:	9b01      	ldr	r3, [sp, #4]
 800f924:	2b00      	cmp	r3, #0
 800f926:	4607      	mov	r7, r0
 800f928:	f300 8096 	bgt.w	800fa58 <_dtoa_r+0x9a8>
 800f92c:	9b07      	ldr	r3, [sp, #28]
 800f92e:	2b02      	cmp	r3, #2
 800f930:	dc59      	bgt.n	800f9e6 <_dtoa_r+0x936>
 800f932:	e091      	b.n	800fa58 <_dtoa_r+0x9a8>
 800f934:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f936:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f93a:	e758      	b.n	800f7ee <_dtoa_r+0x73e>
 800f93c:	9b04      	ldr	r3, [sp, #16]
 800f93e:	1e5e      	subs	r6, r3, #1
 800f940:	9b08      	ldr	r3, [sp, #32]
 800f942:	42b3      	cmp	r3, r6
 800f944:	bfbf      	itttt	lt
 800f946:	9b08      	ldrlt	r3, [sp, #32]
 800f948:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800f94a:	9608      	strlt	r6, [sp, #32]
 800f94c:	1af3      	sublt	r3, r6, r3
 800f94e:	bfb4      	ite	lt
 800f950:	18d2      	addlt	r2, r2, r3
 800f952:	1b9e      	subge	r6, r3, r6
 800f954:	9b04      	ldr	r3, [sp, #16]
 800f956:	bfbc      	itt	lt
 800f958:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800f95a:	2600      	movlt	r6, #0
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	bfb7      	itett	lt
 800f960:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800f964:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800f968:	1a9d      	sublt	r5, r3, r2
 800f96a:	2300      	movlt	r3, #0
 800f96c:	e741      	b.n	800f7f2 <_dtoa_r+0x742>
 800f96e:	9e08      	ldr	r6, [sp, #32]
 800f970:	9d05      	ldr	r5, [sp, #20]
 800f972:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800f974:	e748      	b.n	800f808 <_dtoa_r+0x758>
 800f976:	9a08      	ldr	r2, [sp, #32]
 800f978:	e770      	b.n	800f85c <_dtoa_r+0x7ac>
 800f97a:	9b07      	ldr	r3, [sp, #28]
 800f97c:	2b01      	cmp	r3, #1
 800f97e:	dc19      	bgt.n	800f9b4 <_dtoa_r+0x904>
 800f980:	9b02      	ldr	r3, [sp, #8]
 800f982:	b9bb      	cbnz	r3, 800f9b4 <_dtoa_r+0x904>
 800f984:	9b03      	ldr	r3, [sp, #12]
 800f986:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f98a:	b99b      	cbnz	r3, 800f9b4 <_dtoa_r+0x904>
 800f98c:	9b03      	ldr	r3, [sp, #12]
 800f98e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f992:	0d1b      	lsrs	r3, r3, #20
 800f994:	051b      	lsls	r3, r3, #20
 800f996:	b183      	cbz	r3, 800f9ba <_dtoa_r+0x90a>
 800f998:	9b05      	ldr	r3, [sp, #20]
 800f99a:	3301      	adds	r3, #1
 800f99c:	9305      	str	r3, [sp, #20]
 800f99e:	9b06      	ldr	r3, [sp, #24]
 800f9a0:	3301      	adds	r3, #1
 800f9a2:	9306      	str	r3, [sp, #24]
 800f9a4:	f04f 0801 	mov.w	r8, #1
 800f9a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	f47f af6f 	bne.w	800f88e <_dtoa_r+0x7de>
 800f9b0:	2001      	movs	r0, #1
 800f9b2:	e774      	b.n	800f89e <_dtoa_r+0x7ee>
 800f9b4:	f04f 0800 	mov.w	r8, #0
 800f9b8:	e7f6      	b.n	800f9a8 <_dtoa_r+0x8f8>
 800f9ba:	4698      	mov	r8, r3
 800f9bc:	e7f4      	b.n	800f9a8 <_dtoa_r+0x8f8>
 800f9be:	d082      	beq.n	800f8c6 <_dtoa_r+0x816>
 800f9c0:	9a05      	ldr	r2, [sp, #20]
 800f9c2:	331c      	adds	r3, #28
 800f9c4:	441a      	add	r2, r3
 800f9c6:	9205      	str	r2, [sp, #20]
 800f9c8:	9a06      	ldr	r2, [sp, #24]
 800f9ca:	441a      	add	r2, r3
 800f9cc:	441d      	add	r5, r3
 800f9ce:	9206      	str	r2, [sp, #24]
 800f9d0:	e779      	b.n	800f8c6 <_dtoa_r+0x816>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	e7f4      	b.n	800f9c0 <_dtoa_r+0x910>
 800f9d6:	9b04      	ldr	r3, [sp, #16]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	dc37      	bgt.n	800fa4c <_dtoa_r+0x99c>
 800f9dc:	9b07      	ldr	r3, [sp, #28]
 800f9de:	2b02      	cmp	r3, #2
 800f9e0:	dd34      	ble.n	800fa4c <_dtoa_r+0x99c>
 800f9e2:	9b04      	ldr	r3, [sp, #16]
 800f9e4:	9301      	str	r3, [sp, #4]
 800f9e6:	9b01      	ldr	r3, [sp, #4]
 800f9e8:	b963      	cbnz	r3, 800fa04 <_dtoa_r+0x954>
 800f9ea:	4631      	mov	r1, r6
 800f9ec:	2205      	movs	r2, #5
 800f9ee:	4620      	mov	r0, r4
 800f9f0:	f000 fab2 	bl	800ff58 <__multadd>
 800f9f4:	4601      	mov	r1, r0
 800f9f6:	4606      	mov	r6, r0
 800f9f8:	4650      	mov	r0, sl
 800f9fa:	f000 fcc7 	bl	801038c <__mcmp>
 800f9fe:	2800      	cmp	r0, #0
 800fa00:	f73f adbb 	bgt.w	800f57a <_dtoa_r+0x4ca>
 800fa04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa06:	9d00      	ldr	r5, [sp, #0]
 800fa08:	ea6f 0b03 	mvn.w	fp, r3
 800fa0c:	f04f 0800 	mov.w	r8, #0
 800fa10:	4631      	mov	r1, r6
 800fa12:	4620      	mov	r0, r4
 800fa14:	f000 fa7e 	bl	800ff14 <_Bfree>
 800fa18:	2f00      	cmp	r7, #0
 800fa1a:	f43f aeab 	beq.w	800f774 <_dtoa_r+0x6c4>
 800fa1e:	f1b8 0f00 	cmp.w	r8, #0
 800fa22:	d005      	beq.n	800fa30 <_dtoa_r+0x980>
 800fa24:	45b8      	cmp	r8, r7
 800fa26:	d003      	beq.n	800fa30 <_dtoa_r+0x980>
 800fa28:	4641      	mov	r1, r8
 800fa2a:	4620      	mov	r0, r4
 800fa2c:	f000 fa72 	bl	800ff14 <_Bfree>
 800fa30:	4639      	mov	r1, r7
 800fa32:	4620      	mov	r0, r4
 800fa34:	f000 fa6e 	bl	800ff14 <_Bfree>
 800fa38:	e69c      	b.n	800f774 <_dtoa_r+0x6c4>
 800fa3a:	2600      	movs	r6, #0
 800fa3c:	4637      	mov	r7, r6
 800fa3e:	e7e1      	b.n	800fa04 <_dtoa_r+0x954>
 800fa40:	46bb      	mov	fp, r7
 800fa42:	4637      	mov	r7, r6
 800fa44:	e599      	b.n	800f57a <_dtoa_r+0x4ca>
 800fa46:	bf00      	nop
 800fa48:	40240000 	.word	0x40240000
 800fa4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	f000 80c8 	beq.w	800fbe4 <_dtoa_r+0xb34>
 800fa54:	9b04      	ldr	r3, [sp, #16]
 800fa56:	9301      	str	r3, [sp, #4]
 800fa58:	2d00      	cmp	r5, #0
 800fa5a:	dd05      	ble.n	800fa68 <_dtoa_r+0x9b8>
 800fa5c:	4639      	mov	r1, r7
 800fa5e:	462a      	mov	r2, r5
 800fa60:	4620      	mov	r0, r4
 800fa62:	f000 fc27 	bl	80102b4 <__lshift>
 800fa66:	4607      	mov	r7, r0
 800fa68:	f1b8 0f00 	cmp.w	r8, #0
 800fa6c:	d05b      	beq.n	800fb26 <_dtoa_r+0xa76>
 800fa6e:	6879      	ldr	r1, [r7, #4]
 800fa70:	4620      	mov	r0, r4
 800fa72:	f000 fa0f 	bl	800fe94 <_Balloc>
 800fa76:	4605      	mov	r5, r0
 800fa78:	b928      	cbnz	r0, 800fa86 <_dtoa_r+0x9d6>
 800fa7a:	4b83      	ldr	r3, [pc, #524]	; (800fc88 <_dtoa_r+0xbd8>)
 800fa7c:	4602      	mov	r2, r0
 800fa7e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800fa82:	f7ff bb2e 	b.w	800f0e2 <_dtoa_r+0x32>
 800fa86:	693a      	ldr	r2, [r7, #16]
 800fa88:	3202      	adds	r2, #2
 800fa8a:	0092      	lsls	r2, r2, #2
 800fa8c:	f107 010c 	add.w	r1, r7, #12
 800fa90:	300c      	adds	r0, #12
 800fa92:	f7ff fa74 	bl	800ef7e <memcpy>
 800fa96:	2201      	movs	r2, #1
 800fa98:	4629      	mov	r1, r5
 800fa9a:	4620      	mov	r0, r4
 800fa9c:	f000 fc0a 	bl	80102b4 <__lshift>
 800faa0:	9b00      	ldr	r3, [sp, #0]
 800faa2:	3301      	adds	r3, #1
 800faa4:	9304      	str	r3, [sp, #16]
 800faa6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800faaa:	4413      	add	r3, r2
 800faac:	9308      	str	r3, [sp, #32]
 800faae:	9b02      	ldr	r3, [sp, #8]
 800fab0:	f003 0301 	and.w	r3, r3, #1
 800fab4:	46b8      	mov	r8, r7
 800fab6:	9306      	str	r3, [sp, #24]
 800fab8:	4607      	mov	r7, r0
 800faba:	9b04      	ldr	r3, [sp, #16]
 800fabc:	4631      	mov	r1, r6
 800fabe:	3b01      	subs	r3, #1
 800fac0:	4650      	mov	r0, sl
 800fac2:	9301      	str	r3, [sp, #4]
 800fac4:	f7ff fa69 	bl	800ef9a <quorem>
 800fac8:	4641      	mov	r1, r8
 800faca:	9002      	str	r0, [sp, #8]
 800facc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fad0:	4650      	mov	r0, sl
 800fad2:	f000 fc5b 	bl	801038c <__mcmp>
 800fad6:	463a      	mov	r2, r7
 800fad8:	9005      	str	r0, [sp, #20]
 800fada:	4631      	mov	r1, r6
 800fadc:	4620      	mov	r0, r4
 800fade:	f000 fc71 	bl	80103c4 <__mdiff>
 800fae2:	68c2      	ldr	r2, [r0, #12]
 800fae4:	4605      	mov	r5, r0
 800fae6:	bb02      	cbnz	r2, 800fb2a <_dtoa_r+0xa7a>
 800fae8:	4601      	mov	r1, r0
 800faea:	4650      	mov	r0, sl
 800faec:	f000 fc4e 	bl	801038c <__mcmp>
 800faf0:	4602      	mov	r2, r0
 800faf2:	4629      	mov	r1, r5
 800faf4:	4620      	mov	r0, r4
 800faf6:	9209      	str	r2, [sp, #36]	; 0x24
 800faf8:	f000 fa0c 	bl	800ff14 <_Bfree>
 800fafc:	9b07      	ldr	r3, [sp, #28]
 800fafe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fb00:	9d04      	ldr	r5, [sp, #16]
 800fb02:	ea43 0102 	orr.w	r1, r3, r2
 800fb06:	9b06      	ldr	r3, [sp, #24]
 800fb08:	4319      	orrs	r1, r3
 800fb0a:	d110      	bne.n	800fb2e <_dtoa_r+0xa7e>
 800fb0c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fb10:	d029      	beq.n	800fb66 <_dtoa_r+0xab6>
 800fb12:	9b05      	ldr	r3, [sp, #20]
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	dd02      	ble.n	800fb1e <_dtoa_r+0xa6e>
 800fb18:	9b02      	ldr	r3, [sp, #8]
 800fb1a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800fb1e:	9b01      	ldr	r3, [sp, #4]
 800fb20:	f883 9000 	strb.w	r9, [r3]
 800fb24:	e774      	b.n	800fa10 <_dtoa_r+0x960>
 800fb26:	4638      	mov	r0, r7
 800fb28:	e7ba      	b.n	800faa0 <_dtoa_r+0x9f0>
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	e7e1      	b.n	800faf2 <_dtoa_r+0xa42>
 800fb2e:	9b05      	ldr	r3, [sp, #20]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	db04      	blt.n	800fb3e <_dtoa_r+0xa8e>
 800fb34:	9907      	ldr	r1, [sp, #28]
 800fb36:	430b      	orrs	r3, r1
 800fb38:	9906      	ldr	r1, [sp, #24]
 800fb3a:	430b      	orrs	r3, r1
 800fb3c:	d120      	bne.n	800fb80 <_dtoa_r+0xad0>
 800fb3e:	2a00      	cmp	r2, #0
 800fb40:	dded      	ble.n	800fb1e <_dtoa_r+0xa6e>
 800fb42:	4651      	mov	r1, sl
 800fb44:	2201      	movs	r2, #1
 800fb46:	4620      	mov	r0, r4
 800fb48:	f000 fbb4 	bl	80102b4 <__lshift>
 800fb4c:	4631      	mov	r1, r6
 800fb4e:	4682      	mov	sl, r0
 800fb50:	f000 fc1c 	bl	801038c <__mcmp>
 800fb54:	2800      	cmp	r0, #0
 800fb56:	dc03      	bgt.n	800fb60 <_dtoa_r+0xab0>
 800fb58:	d1e1      	bne.n	800fb1e <_dtoa_r+0xa6e>
 800fb5a:	f019 0f01 	tst.w	r9, #1
 800fb5e:	d0de      	beq.n	800fb1e <_dtoa_r+0xa6e>
 800fb60:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fb64:	d1d8      	bne.n	800fb18 <_dtoa_r+0xa68>
 800fb66:	9a01      	ldr	r2, [sp, #4]
 800fb68:	2339      	movs	r3, #57	; 0x39
 800fb6a:	7013      	strb	r3, [r2, #0]
 800fb6c:	462b      	mov	r3, r5
 800fb6e:	461d      	mov	r5, r3
 800fb70:	3b01      	subs	r3, #1
 800fb72:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fb76:	2a39      	cmp	r2, #57	; 0x39
 800fb78:	d06c      	beq.n	800fc54 <_dtoa_r+0xba4>
 800fb7a:	3201      	adds	r2, #1
 800fb7c:	701a      	strb	r2, [r3, #0]
 800fb7e:	e747      	b.n	800fa10 <_dtoa_r+0x960>
 800fb80:	2a00      	cmp	r2, #0
 800fb82:	dd07      	ble.n	800fb94 <_dtoa_r+0xae4>
 800fb84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fb88:	d0ed      	beq.n	800fb66 <_dtoa_r+0xab6>
 800fb8a:	9a01      	ldr	r2, [sp, #4]
 800fb8c:	f109 0301 	add.w	r3, r9, #1
 800fb90:	7013      	strb	r3, [r2, #0]
 800fb92:	e73d      	b.n	800fa10 <_dtoa_r+0x960>
 800fb94:	9b04      	ldr	r3, [sp, #16]
 800fb96:	9a08      	ldr	r2, [sp, #32]
 800fb98:	f803 9c01 	strb.w	r9, [r3, #-1]
 800fb9c:	4293      	cmp	r3, r2
 800fb9e:	d043      	beq.n	800fc28 <_dtoa_r+0xb78>
 800fba0:	4651      	mov	r1, sl
 800fba2:	2300      	movs	r3, #0
 800fba4:	220a      	movs	r2, #10
 800fba6:	4620      	mov	r0, r4
 800fba8:	f000 f9d6 	bl	800ff58 <__multadd>
 800fbac:	45b8      	cmp	r8, r7
 800fbae:	4682      	mov	sl, r0
 800fbb0:	f04f 0300 	mov.w	r3, #0
 800fbb4:	f04f 020a 	mov.w	r2, #10
 800fbb8:	4641      	mov	r1, r8
 800fbba:	4620      	mov	r0, r4
 800fbbc:	d107      	bne.n	800fbce <_dtoa_r+0xb1e>
 800fbbe:	f000 f9cb 	bl	800ff58 <__multadd>
 800fbc2:	4680      	mov	r8, r0
 800fbc4:	4607      	mov	r7, r0
 800fbc6:	9b04      	ldr	r3, [sp, #16]
 800fbc8:	3301      	adds	r3, #1
 800fbca:	9304      	str	r3, [sp, #16]
 800fbcc:	e775      	b.n	800faba <_dtoa_r+0xa0a>
 800fbce:	f000 f9c3 	bl	800ff58 <__multadd>
 800fbd2:	4639      	mov	r1, r7
 800fbd4:	4680      	mov	r8, r0
 800fbd6:	2300      	movs	r3, #0
 800fbd8:	220a      	movs	r2, #10
 800fbda:	4620      	mov	r0, r4
 800fbdc:	f000 f9bc 	bl	800ff58 <__multadd>
 800fbe0:	4607      	mov	r7, r0
 800fbe2:	e7f0      	b.n	800fbc6 <_dtoa_r+0xb16>
 800fbe4:	9b04      	ldr	r3, [sp, #16]
 800fbe6:	9301      	str	r3, [sp, #4]
 800fbe8:	9d00      	ldr	r5, [sp, #0]
 800fbea:	4631      	mov	r1, r6
 800fbec:	4650      	mov	r0, sl
 800fbee:	f7ff f9d4 	bl	800ef9a <quorem>
 800fbf2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fbf6:	9b00      	ldr	r3, [sp, #0]
 800fbf8:	f805 9b01 	strb.w	r9, [r5], #1
 800fbfc:	1aea      	subs	r2, r5, r3
 800fbfe:	9b01      	ldr	r3, [sp, #4]
 800fc00:	4293      	cmp	r3, r2
 800fc02:	dd07      	ble.n	800fc14 <_dtoa_r+0xb64>
 800fc04:	4651      	mov	r1, sl
 800fc06:	2300      	movs	r3, #0
 800fc08:	220a      	movs	r2, #10
 800fc0a:	4620      	mov	r0, r4
 800fc0c:	f000 f9a4 	bl	800ff58 <__multadd>
 800fc10:	4682      	mov	sl, r0
 800fc12:	e7ea      	b.n	800fbea <_dtoa_r+0xb3a>
 800fc14:	9b01      	ldr	r3, [sp, #4]
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	bfc8      	it	gt
 800fc1a:	461d      	movgt	r5, r3
 800fc1c:	9b00      	ldr	r3, [sp, #0]
 800fc1e:	bfd8      	it	le
 800fc20:	2501      	movle	r5, #1
 800fc22:	441d      	add	r5, r3
 800fc24:	f04f 0800 	mov.w	r8, #0
 800fc28:	4651      	mov	r1, sl
 800fc2a:	2201      	movs	r2, #1
 800fc2c:	4620      	mov	r0, r4
 800fc2e:	f000 fb41 	bl	80102b4 <__lshift>
 800fc32:	4631      	mov	r1, r6
 800fc34:	4682      	mov	sl, r0
 800fc36:	f000 fba9 	bl	801038c <__mcmp>
 800fc3a:	2800      	cmp	r0, #0
 800fc3c:	dc96      	bgt.n	800fb6c <_dtoa_r+0xabc>
 800fc3e:	d102      	bne.n	800fc46 <_dtoa_r+0xb96>
 800fc40:	f019 0f01 	tst.w	r9, #1
 800fc44:	d192      	bne.n	800fb6c <_dtoa_r+0xabc>
 800fc46:	462b      	mov	r3, r5
 800fc48:	461d      	mov	r5, r3
 800fc4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fc4e:	2a30      	cmp	r2, #48	; 0x30
 800fc50:	d0fa      	beq.n	800fc48 <_dtoa_r+0xb98>
 800fc52:	e6dd      	b.n	800fa10 <_dtoa_r+0x960>
 800fc54:	9a00      	ldr	r2, [sp, #0]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d189      	bne.n	800fb6e <_dtoa_r+0xabe>
 800fc5a:	f10b 0b01 	add.w	fp, fp, #1
 800fc5e:	2331      	movs	r3, #49	; 0x31
 800fc60:	e796      	b.n	800fb90 <_dtoa_r+0xae0>
 800fc62:	4b0a      	ldr	r3, [pc, #40]	; (800fc8c <_dtoa_r+0xbdc>)
 800fc64:	f7ff ba99 	b.w	800f19a <_dtoa_r+0xea>
 800fc68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	f47f aa6d 	bne.w	800f14a <_dtoa_r+0x9a>
 800fc70:	4b07      	ldr	r3, [pc, #28]	; (800fc90 <_dtoa_r+0xbe0>)
 800fc72:	f7ff ba92 	b.w	800f19a <_dtoa_r+0xea>
 800fc76:	9b01      	ldr	r3, [sp, #4]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	dcb5      	bgt.n	800fbe8 <_dtoa_r+0xb38>
 800fc7c:	9b07      	ldr	r3, [sp, #28]
 800fc7e:	2b02      	cmp	r3, #2
 800fc80:	f73f aeb1 	bgt.w	800f9e6 <_dtoa_r+0x936>
 800fc84:	e7b0      	b.n	800fbe8 <_dtoa_r+0xb38>
 800fc86:	bf00      	nop
 800fc88:	080122d9 	.word	0x080122d9
 800fc8c:	08012239 	.word	0x08012239
 800fc90:	0801225d 	.word	0x0801225d

0800fc94 <_free_r>:
 800fc94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fc96:	2900      	cmp	r1, #0
 800fc98:	d044      	beq.n	800fd24 <_free_r+0x90>
 800fc9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fc9e:	9001      	str	r0, [sp, #4]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	f1a1 0404 	sub.w	r4, r1, #4
 800fca6:	bfb8      	it	lt
 800fca8:	18e4      	addlt	r4, r4, r3
 800fcaa:	f000 f8e7 	bl	800fe7c <__malloc_lock>
 800fcae:	4a1e      	ldr	r2, [pc, #120]	; (800fd28 <_free_r+0x94>)
 800fcb0:	9801      	ldr	r0, [sp, #4]
 800fcb2:	6813      	ldr	r3, [r2, #0]
 800fcb4:	b933      	cbnz	r3, 800fcc4 <_free_r+0x30>
 800fcb6:	6063      	str	r3, [r4, #4]
 800fcb8:	6014      	str	r4, [r2, #0]
 800fcba:	b003      	add	sp, #12
 800fcbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fcc0:	f000 b8e2 	b.w	800fe88 <__malloc_unlock>
 800fcc4:	42a3      	cmp	r3, r4
 800fcc6:	d908      	bls.n	800fcda <_free_r+0x46>
 800fcc8:	6825      	ldr	r5, [r4, #0]
 800fcca:	1961      	adds	r1, r4, r5
 800fccc:	428b      	cmp	r3, r1
 800fcce:	bf01      	itttt	eq
 800fcd0:	6819      	ldreq	r1, [r3, #0]
 800fcd2:	685b      	ldreq	r3, [r3, #4]
 800fcd4:	1949      	addeq	r1, r1, r5
 800fcd6:	6021      	streq	r1, [r4, #0]
 800fcd8:	e7ed      	b.n	800fcb6 <_free_r+0x22>
 800fcda:	461a      	mov	r2, r3
 800fcdc:	685b      	ldr	r3, [r3, #4]
 800fcde:	b10b      	cbz	r3, 800fce4 <_free_r+0x50>
 800fce0:	42a3      	cmp	r3, r4
 800fce2:	d9fa      	bls.n	800fcda <_free_r+0x46>
 800fce4:	6811      	ldr	r1, [r2, #0]
 800fce6:	1855      	adds	r5, r2, r1
 800fce8:	42a5      	cmp	r5, r4
 800fcea:	d10b      	bne.n	800fd04 <_free_r+0x70>
 800fcec:	6824      	ldr	r4, [r4, #0]
 800fcee:	4421      	add	r1, r4
 800fcf0:	1854      	adds	r4, r2, r1
 800fcf2:	42a3      	cmp	r3, r4
 800fcf4:	6011      	str	r1, [r2, #0]
 800fcf6:	d1e0      	bne.n	800fcba <_free_r+0x26>
 800fcf8:	681c      	ldr	r4, [r3, #0]
 800fcfa:	685b      	ldr	r3, [r3, #4]
 800fcfc:	6053      	str	r3, [r2, #4]
 800fcfe:	440c      	add	r4, r1
 800fd00:	6014      	str	r4, [r2, #0]
 800fd02:	e7da      	b.n	800fcba <_free_r+0x26>
 800fd04:	d902      	bls.n	800fd0c <_free_r+0x78>
 800fd06:	230c      	movs	r3, #12
 800fd08:	6003      	str	r3, [r0, #0]
 800fd0a:	e7d6      	b.n	800fcba <_free_r+0x26>
 800fd0c:	6825      	ldr	r5, [r4, #0]
 800fd0e:	1961      	adds	r1, r4, r5
 800fd10:	428b      	cmp	r3, r1
 800fd12:	bf04      	itt	eq
 800fd14:	6819      	ldreq	r1, [r3, #0]
 800fd16:	685b      	ldreq	r3, [r3, #4]
 800fd18:	6063      	str	r3, [r4, #4]
 800fd1a:	bf04      	itt	eq
 800fd1c:	1949      	addeq	r1, r1, r5
 800fd1e:	6021      	streq	r1, [r4, #0]
 800fd20:	6054      	str	r4, [r2, #4]
 800fd22:	e7ca      	b.n	800fcba <_free_r+0x26>
 800fd24:	b003      	add	sp, #12
 800fd26:	bd30      	pop	{r4, r5, pc}
 800fd28:	20004300 	.word	0x20004300

0800fd2c <malloc>:
 800fd2c:	4b02      	ldr	r3, [pc, #8]	; (800fd38 <malloc+0xc>)
 800fd2e:	4601      	mov	r1, r0
 800fd30:	6818      	ldr	r0, [r3, #0]
 800fd32:	f000 b823 	b.w	800fd7c <_malloc_r>
 800fd36:	bf00      	nop
 800fd38:	200001ec 	.word	0x200001ec

0800fd3c <sbrk_aligned>:
 800fd3c:	b570      	push	{r4, r5, r6, lr}
 800fd3e:	4e0e      	ldr	r6, [pc, #56]	; (800fd78 <sbrk_aligned+0x3c>)
 800fd40:	460c      	mov	r4, r1
 800fd42:	6831      	ldr	r1, [r6, #0]
 800fd44:	4605      	mov	r5, r0
 800fd46:	b911      	cbnz	r1, 800fd4e <sbrk_aligned+0x12>
 800fd48:	f000 fe40 	bl	80109cc <_sbrk_r>
 800fd4c:	6030      	str	r0, [r6, #0]
 800fd4e:	4621      	mov	r1, r4
 800fd50:	4628      	mov	r0, r5
 800fd52:	f000 fe3b 	bl	80109cc <_sbrk_r>
 800fd56:	1c43      	adds	r3, r0, #1
 800fd58:	d00a      	beq.n	800fd70 <sbrk_aligned+0x34>
 800fd5a:	1cc4      	adds	r4, r0, #3
 800fd5c:	f024 0403 	bic.w	r4, r4, #3
 800fd60:	42a0      	cmp	r0, r4
 800fd62:	d007      	beq.n	800fd74 <sbrk_aligned+0x38>
 800fd64:	1a21      	subs	r1, r4, r0
 800fd66:	4628      	mov	r0, r5
 800fd68:	f000 fe30 	bl	80109cc <_sbrk_r>
 800fd6c:	3001      	adds	r0, #1
 800fd6e:	d101      	bne.n	800fd74 <sbrk_aligned+0x38>
 800fd70:	f04f 34ff 	mov.w	r4, #4294967295
 800fd74:	4620      	mov	r0, r4
 800fd76:	bd70      	pop	{r4, r5, r6, pc}
 800fd78:	20004304 	.word	0x20004304

0800fd7c <_malloc_r>:
 800fd7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fd80:	1ccd      	adds	r5, r1, #3
 800fd82:	f025 0503 	bic.w	r5, r5, #3
 800fd86:	3508      	adds	r5, #8
 800fd88:	2d0c      	cmp	r5, #12
 800fd8a:	bf38      	it	cc
 800fd8c:	250c      	movcc	r5, #12
 800fd8e:	2d00      	cmp	r5, #0
 800fd90:	4607      	mov	r7, r0
 800fd92:	db01      	blt.n	800fd98 <_malloc_r+0x1c>
 800fd94:	42a9      	cmp	r1, r5
 800fd96:	d905      	bls.n	800fda4 <_malloc_r+0x28>
 800fd98:	230c      	movs	r3, #12
 800fd9a:	603b      	str	r3, [r7, #0]
 800fd9c:	2600      	movs	r6, #0
 800fd9e:	4630      	mov	r0, r6
 800fda0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fda4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800fe78 <_malloc_r+0xfc>
 800fda8:	f000 f868 	bl	800fe7c <__malloc_lock>
 800fdac:	f8d8 3000 	ldr.w	r3, [r8]
 800fdb0:	461c      	mov	r4, r3
 800fdb2:	bb5c      	cbnz	r4, 800fe0c <_malloc_r+0x90>
 800fdb4:	4629      	mov	r1, r5
 800fdb6:	4638      	mov	r0, r7
 800fdb8:	f7ff ffc0 	bl	800fd3c <sbrk_aligned>
 800fdbc:	1c43      	adds	r3, r0, #1
 800fdbe:	4604      	mov	r4, r0
 800fdc0:	d155      	bne.n	800fe6e <_malloc_r+0xf2>
 800fdc2:	f8d8 4000 	ldr.w	r4, [r8]
 800fdc6:	4626      	mov	r6, r4
 800fdc8:	2e00      	cmp	r6, #0
 800fdca:	d145      	bne.n	800fe58 <_malloc_r+0xdc>
 800fdcc:	2c00      	cmp	r4, #0
 800fdce:	d048      	beq.n	800fe62 <_malloc_r+0xe6>
 800fdd0:	6823      	ldr	r3, [r4, #0]
 800fdd2:	4631      	mov	r1, r6
 800fdd4:	4638      	mov	r0, r7
 800fdd6:	eb04 0903 	add.w	r9, r4, r3
 800fdda:	f000 fdf7 	bl	80109cc <_sbrk_r>
 800fdde:	4581      	cmp	r9, r0
 800fde0:	d13f      	bne.n	800fe62 <_malloc_r+0xe6>
 800fde2:	6821      	ldr	r1, [r4, #0]
 800fde4:	1a6d      	subs	r5, r5, r1
 800fde6:	4629      	mov	r1, r5
 800fde8:	4638      	mov	r0, r7
 800fdea:	f7ff ffa7 	bl	800fd3c <sbrk_aligned>
 800fdee:	3001      	adds	r0, #1
 800fdf0:	d037      	beq.n	800fe62 <_malloc_r+0xe6>
 800fdf2:	6823      	ldr	r3, [r4, #0]
 800fdf4:	442b      	add	r3, r5
 800fdf6:	6023      	str	r3, [r4, #0]
 800fdf8:	f8d8 3000 	ldr.w	r3, [r8]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d038      	beq.n	800fe72 <_malloc_r+0xf6>
 800fe00:	685a      	ldr	r2, [r3, #4]
 800fe02:	42a2      	cmp	r2, r4
 800fe04:	d12b      	bne.n	800fe5e <_malloc_r+0xe2>
 800fe06:	2200      	movs	r2, #0
 800fe08:	605a      	str	r2, [r3, #4]
 800fe0a:	e00f      	b.n	800fe2c <_malloc_r+0xb0>
 800fe0c:	6822      	ldr	r2, [r4, #0]
 800fe0e:	1b52      	subs	r2, r2, r5
 800fe10:	d41f      	bmi.n	800fe52 <_malloc_r+0xd6>
 800fe12:	2a0b      	cmp	r2, #11
 800fe14:	d917      	bls.n	800fe46 <_malloc_r+0xca>
 800fe16:	1961      	adds	r1, r4, r5
 800fe18:	42a3      	cmp	r3, r4
 800fe1a:	6025      	str	r5, [r4, #0]
 800fe1c:	bf18      	it	ne
 800fe1e:	6059      	strne	r1, [r3, #4]
 800fe20:	6863      	ldr	r3, [r4, #4]
 800fe22:	bf08      	it	eq
 800fe24:	f8c8 1000 	streq.w	r1, [r8]
 800fe28:	5162      	str	r2, [r4, r5]
 800fe2a:	604b      	str	r3, [r1, #4]
 800fe2c:	4638      	mov	r0, r7
 800fe2e:	f104 060b 	add.w	r6, r4, #11
 800fe32:	f000 f829 	bl	800fe88 <__malloc_unlock>
 800fe36:	f026 0607 	bic.w	r6, r6, #7
 800fe3a:	1d23      	adds	r3, r4, #4
 800fe3c:	1af2      	subs	r2, r6, r3
 800fe3e:	d0ae      	beq.n	800fd9e <_malloc_r+0x22>
 800fe40:	1b9b      	subs	r3, r3, r6
 800fe42:	50a3      	str	r3, [r4, r2]
 800fe44:	e7ab      	b.n	800fd9e <_malloc_r+0x22>
 800fe46:	42a3      	cmp	r3, r4
 800fe48:	6862      	ldr	r2, [r4, #4]
 800fe4a:	d1dd      	bne.n	800fe08 <_malloc_r+0x8c>
 800fe4c:	f8c8 2000 	str.w	r2, [r8]
 800fe50:	e7ec      	b.n	800fe2c <_malloc_r+0xb0>
 800fe52:	4623      	mov	r3, r4
 800fe54:	6864      	ldr	r4, [r4, #4]
 800fe56:	e7ac      	b.n	800fdb2 <_malloc_r+0x36>
 800fe58:	4634      	mov	r4, r6
 800fe5a:	6876      	ldr	r6, [r6, #4]
 800fe5c:	e7b4      	b.n	800fdc8 <_malloc_r+0x4c>
 800fe5e:	4613      	mov	r3, r2
 800fe60:	e7cc      	b.n	800fdfc <_malloc_r+0x80>
 800fe62:	230c      	movs	r3, #12
 800fe64:	603b      	str	r3, [r7, #0]
 800fe66:	4638      	mov	r0, r7
 800fe68:	f000 f80e 	bl	800fe88 <__malloc_unlock>
 800fe6c:	e797      	b.n	800fd9e <_malloc_r+0x22>
 800fe6e:	6025      	str	r5, [r4, #0]
 800fe70:	e7dc      	b.n	800fe2c <_malloc_r+0xb0>
 800fe72:	605b      	str	r3, [r3, #4]
 800fe74:	deff      	udf	#255	; 0xff
 800fe76:	bf00      	nop
 800fe78:	20004300 	.word	0x20004300

0800fe7c <__malloc_lock>:
 800fe7c:	4801      	ldr	r0, [pc, #4]	; (800fe84 <__malloc_lock+0x8>)
 800fe7e:	f7ff b87c 	b.w	800ef7a <__retarget_lock_acquire_recursive>
 800fe82:	bf00      	nop
 800fe84:	200042fc 	.word	0x200042fc

0800fe88 <__malloc_unlock>:
 800fe88:	4801      	ldr	r0, [pc, #4]	; (800fe90 <__malloc_unlock+0x8>)
 800fe8a:	f7ff b877 	b.w	800ef7c <__retarget_lock_release_recursive>
 800fe8e:	bf00      	nop
 800fe90:	200042fc 	.word	0x200042fc

0800fe94 <_Balloc>:
 800fe94:	b570      	push	{r4, r5, r6, lr}
 800fe96:	69c6      	ldr	r6, [r0, #28]
 800fe98:	4604      	mov	r4, r0
 800fe9a:	460d      	mov	r5, r1
 800fe9c:	b976      	cbnz	r6, 800febc <_Balloc+0x28>
 800fe9e:	2010      	movs	r0, #16
 800fea0:	f7ff ff44 	bl	800fd2c <malloc>
 800fea4:	4602      	mov	r2, r0
 800fea6:	61e0      	str	r0, [r4, #28]
 800fea8:	b920      	cbnz	r0, 800feb4 <_Balloc+0x20>
 800feaa:	4b18      	ldr	r3, [pc, #96]	; (800ff0c <_Balloc+0x78>)
 800feac:	4818      	ldr	r0, [pc, #96]	; (800ff10 <_Balloc+0x7c>)
 800feae:	216b      	movs	r1, #107	; 0x6b
 800feb0:	f000 fd9c 	bl	80109ec <__assert_func>
 800feb4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800feb8:	6006      	str	r6, [r0, #0]
 800feba:	60c6      	str	r6, [r0, #12]
 800febc:	69e6      	ldr	r6, [r4, #28]
 800febe:	68f3      	ldr	r3, [r6, #12]
 800fec0:	b183      	cbz	r3, 800fee4 <_Balloc+0x50>
 800fec2:	69e3      	ldr	r3, [r4, #28]
 800fec4:	68db      	ldr	r3, [r3, #12]
 800fec6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800feca:	b9b8      	cbnz	r0, 800fefc <_Balloc+0x68>
 800fecc:	2101      	movs	r1, #1
 800fece:	fa01 f605 	lsl.w	r6, r1, r5
 800fed2:	1d72      	adds	r2, r6, #5
 800fed4:	0092      	lsls	r2, r2, #2
 800fed6:	4620      	mov	r0, r4
 800fed8:	f000 fda6 	bl	8010a28 <_calloc_r>
 800fedc:	b160      	cbz	r0, 800fef8 <_Balloc+0x64>
 800fede:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fee2:	e00e      	b.n	800ff02 <_Balloc+0x6e>
 800fee4:	2221      	movs	r2, #33	; 0x21
 800fee6:	2104      	movs	r1, #4
 800fee8:	4620      	mov	r0, r4
 800feea:	f000 fd9d 	bl	8010a28 <_calloc_r>
 800feee:	69e3      	ldr	r3, [r4, #28]
 800fef0:	60f0      	str	r0, [r6, #12]
 800fef2:	68db      	ldr	r3, [r3, #12]
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d1e4      	bne.n	800fec2 <_Balloc+0x2e>
 800fef8:	2000      	movs	r0, #0
 800fefa:	bd70      	pop	{r4, r5, r6, pc}
 800fefc:	6802      	ldr	r2, [r0, #0]
 800fefe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ff02:	2300      	movs	r3, #0
 800ff04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ff08:	e7f7      	b.n	800fefa <_Balloc+0x66>
 800ff0a:	bf00      	nop
 800ff0c:	0801226a 	.word	0x0801226a
 800ff10:	080122ea 	.word	0x080122ea

0800ff14 <_Bfree>:
 800ff14:	b570      	push	{r4, r5, r6, lr}
 800ff16:	69c6      	ldr	r6, [r0, #28]
 800ff18:	4605      	mov	r5, r0
 800ff1a:	460c      	mov	r4, r1
 800ff1c:	b976      	cbnz	r6, 800ff3c <_Bfree+0x28>
 800ff1e:	2010      	movs	r0, #16
 800ff20:	f7ff ff04 	bl	800fd2c <malloc>
 800ff24:	4602      	mov	r2, r0
 800ff26:	61e8      	str	r0, [r5, #28]
 800ff28:	b920      	cbnz	r0, 800ff34 <_Bfree+0x20>
 800ff2a:	4b09      	ldr	r3, [pc, #36]	; (800ff50 <_Bfree+0x3c>)
 800ff2c:	4809      	ldr	r0, [pc, #36]	; (800ff54 <_Bfree+0x40>)
 800ff2e:	218f      	movs	r1, #143	; 0x8f
 800ff30:	f000 fd5c 	bl	80109ec <__assert_func>
 800ff34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff38:	6006      	str	r6, [r0, #0]
 800ff3a:	60c6      	str	r6, [r0, #12]
 800ff3c:	b13c      	cbz	r4, 800ff4e <_Bfree+0x3a>
 800ff3e:	69eb      	ldr	r3, [r5, #28]
 800ff40:	6862      	ldr	r2, [r4, #4]
 800ff42:	68db      	ldr	r3, [r3, #12]
 800ff44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ff48:	6021      	str	r1, [r4, #0]
 800ff4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ff4e:	bd70      	pop	{r4, r5, r6, pc}
 800ff50:	0801226a 	.word	0x0801226a
 800ff54:	080122ea 	.word	0x080122ea

0800ff58 <__multadd>:
 800ff58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff5c:	690d      	ldr	r5, [r1, #16]
 800ff5e:	4607      	mov	r7, r0
 800ff60:	460c      	mov	r4, r1
 800ff62:	461e      	mov	r6, r3
 800ff64:	f101 0c14 	add.w	ip, r1, #20
 800ff68:	2000      	movs	r0, #0
 800ff6a:	f8dc 3000 	ldr.w	r3, [ip]
 800ff6e:	b299      	uxth	r1, r3
 800ff70:	fb02 6101 	mla	r1, r2, r1, r6
 800ff74:	0c1e      	lsrs	r6, r3, #16
 800ff76:	0c0b      	lsrs	r3, r1, #16
 800ff78:	fb02 3306 	mla	r3, r2, r6, r3
 800ff7c:	b289      	uxth	r1, r1
 800ff7e:	3001      	adds	r0, #1
 800ff80:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ff84:	4285      	cmp	r5, r0
 800ff86:	f84c 1b04 	str.w	r1, [ip], #4
 800ff8a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ff8e:	dcec      	bgt.n	800ff6a <__multadd+0x12>
 800ff90:	b30e      	cbz	r6, 800ffd6 <__multadd+0x7e>
 800ff92:	68a3      	ldr	r3, [r4, #8]
 800ff94:	42ab      	cmp	r3, r5
 800ff96:	dc19      	bgt.n	800ffcc <__multadd+0x74>
 800ff98:	6861      	ldr	r1, [r4, #4]
 800ff9a:	4638      	mov	r0, r7
 800ff9c:	3101      	adds	r1, #1
 800ff9e:	f7ff ff79 	bl	800fe94 <_Balloc>
 800ffa2:	4680      	mov	r8, r0
 800ffa4:	b928      	cbnz	r0, 800ffb2 <__multadd+0x5a>
 800ffa6:	4602      	mov	r2, r0
 800ffa8:	4b0c      	ldr	r3, [pc, #48]	; (800ffdc <__multadd+0x84>)
 800ffaa:	480d      	ldr	r0, [pc, #52]	; (800ffe0 <__multadd+0x88>)
 800ffac:	21ba      	movs	r1, #186	; 0xba
 800ffae:	f000 fd1d 	bl	80109ec <__assert_func>
 800ffb2:	6922      	ldr	r2, [r4, #16]
 800ffb4:	3202      	adds	r2, #2
 800ffb6:	f104 010c 	add.w	r1, r4, #12
 800ffba:	0092      	lsls	r2, r2, #2
 800ffbc:	300c      	adds	r0, #12
 800ffbe:	f7fe ffde 	bl	800ef7e <memcpy>
 800ffc2:	4621      	mov	r1, r4
 800ffc4:	4638      	mov	r0, r7
 800ffc6:	f7ff ffa5 	bl	800ff14 <_Bfree>
 800ffca:	4644      	mov	r4, r8
 800ffcc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ffd0:	3501      	adds	r5, #1
 800ffd2:	615e      	str	r6, [r3, #20]
 800ffd4:	6125      	str	r5, [r4, #16]
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ffdc:	080122d9 	.word	0x080122d9
 800ffe0:	080122ea 	.word	0x080122ea

0800ffe4 <__hi0bits>:
 800ffe4:	0c03      	lsrs	r3, r0, #16
 800ffe6:	041b      	lsls	r3, r3, #16
 800ffe8:	b9d3      	cbnz	r3, 8010020 <__hi0bits+0x3c>
 800ffea:	0400      	lsls	r0, r0, #16
 800ffec:	2310      	movs	r3, #16
 800ffee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fff2:	bf04      	itt	eq
 800fff4:	0200      	lsleq	r0, r0, #8
 800fff6:	3308      	addeq	r3, #8
 800fff8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fffc:	bf04      	itt	eq
 800fffe:	0100      	lsleq	r0, r0, #4
 8010000:	3304      	addeq	r3, #4
 8010002:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010006:	bf04      	itt	eq
 8010008:	0080      	lsleq	r0, r0, #2
 801000a:	3302      	addeq	r3, #2
 801000c:	2800      	cmp	r0, #0
 801000e:	db05      	blt.n	801001c <__hi0bits+0x38>
 8010010:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010014:	f103 0301 	add.w	r3, r3, #1
 8010018:	bf08      	it	eq
 801001a:	2320      	moveq	r3, #32
 801001c:	4618      	mov	r0, r3
 801001e:	4770      	bx	lr
 8010020:	2300      	movs	r3, #0
 8010022:	e7e4      	b.n	800ffee <__hi0bits+0xa>

08010024 <__lo0bits>:
 8010024:	6803      	ldr	r3, [r0, #0]
 8010026:	f013 0207 	ands.w	r2, r3, #7
 801002a:	d00c      	beq.n	8010046 <__lo0bits+0x22>
 801002c:	07d9      	lsls	r1, r3, #31
 801002e:	d422      	bmi.n	8010076 <__lo0bits+0x52>
 8010030:	079a      	lsls	r2, r3, #30
 8010032:	bf49      	itett	mi
 8010034:	085b      	lsrmi	r3, r3, #1
 8010036:	089b      	lsrpl	r3, r3, #2
 8010038:	6003      	strmi	r3, [r0, #0]
 801003a:	2201      	movmi	r2, #1
 801003c:	bf5c      	itt	pl
 801003e:	6003      	strpl	r3, [r0, #0]
 8010040:	2202      	movpl	r2, #2
 8010042:	4610      	mov	r0, r2
 8010044:	4770      	bx	lr
 8010046:	b299      	uxth	r1, r3
 8010048:	b909      	cbnz	r1, 801004e <__lo0bits+0x2a>
 801004a:	0c1b      	lsrs	r3, r3, #16
 801004c:	2210      	movs	r2, #16
 801004e:	b2d9      	uxtb	r1, r3
 8010050:	b909      	cbnz	r1, 8010056 <__lo0bits+0x32>
 8010052:	3208      	adds	r2, #8
 8010054:	0a1b      	lsrs	r3, r3, #8
 8010056:	0719      	lsls	r1, r3, #28
 8010058:	bf04      	itt	eq
 801005a:	091b      	lsreq	r3, r3, #4
 801005c:	3204      	addeq	r2, #4
 801005e:	0799      	lsls	r1, r3, #30
 8010060:	bf04      	itt	eq
 8010062:	089b      	lsreq	r3, r3, #2
 8010064:	3202      	addeq	r2, #2
 8010066:	07d9      	lsls	r1, r3, #31
 8010068:	d403      	bmi.n	8010072 <__lo0bits+0x4e>
 801006a:	085b      	lsrs	r3, r3, #1
 801006c:	f102 0201 	add.w	r2, r2, #1
 8010070:	d003      	beq.n	801007a <__lo0bits+0x56>
 8010072:	6003      	str	r3, [r0, #0]
 8010074:	e7e5      	b.n	8010042 <__lo0bits+0x1e>
 8010076:	2200      	movs	r2, #0
 8010078:	e7e3      	b.n	8010042 <__lo0bits+0x1e>
 801007a:	2220      	movs	r2, #32
 801007c:	e7e1      	b.n	8010042 <__lo0bits+0x1e>
	...

08010080 <__i2b>:
 8010080:	b510      	push	{r4, lr}
 8010082:	460c      	mov	r4, r1
 8010084:	2101      	movs	r1, #1
 8010086:	f7ff ff05 	bl	800fe94 <_Balloc>
 801008a:	4602      	mov	r2, r0
 801008c:	b928      	cbnz	r0, 801009a <__i2b+0x1a>
 801008e:	4b05      	ldr	r3, [pc, #20]	; (80100a4 <__i2b+0x24>)
 8010090:	4805      	ldr	r0, [pc, #20]	; (80100a8 <__i2b+0x28>)
 8010092:	f240 1145 	movw	r1, #325	; 0x145
 8010096:	f000 fca9 	bl	80109ec <__assert_func>
 801009a:	2301      	movs	r3, #1
 801009c:	6144      	str	r4, [r0, #20]
 801009e:	6103      	str	r3, [r0, #16]
 80100a0:	bd10      	pop	{r4, pc}
 80100a2:	bf00      	nop
 80100a4:	080122d9 	.word	0x080122d9
 80100a8:	080122ea 	.word	0x080122ea

080100ac <__multiply>:
 80100ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100b0:	4691      	mov	r9, r2
 80100b2:	690a      	ldr	r2, [r1, #16]
 80100b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80100b8:	429a      	cmp	r2, r3
 80100ba:	bfb8      	it	lt
 80100bc:	460b      	movlt	r3, r1
 80100be:	460c      	mov	r4, r1
 80100c0:	bfbc      	itt	lt
 80100c2:	464c      	movlt	r4, r9
 80100c4:	4699      	movlt	r9, r3
 80100c6:	6927      	ldr	r7, [r4, #16]
 80100c8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80100cc:	68a3      	ldr	r3, [r4, #8]
 80100ce:	6861      	ldr	r1, [r4, #4]
 80100d0:	eb07 060a 	add.w	r6, r7, sl
 80100d4:	42b3      	cmp	r3, r6
 80100d6:	b085      	sub	sp, #20
 80100d8:	bfb8      	it	lt
 80100da:	3101      	addlt	r1, #1
 80100dc:	f7ff feda 	bl	800fe94 <_Balloc>
 80100e0:	b930      	cbnz	r0, 80100f0 <__multiply+0x44>
 80100e2:	4602      	mov	r2, r0
 80100e4:	4b44      	ldr	r3, [pc, #272]	; (80101f8 <__multiply+0x14c>)
 80100e6:	4845      	ldr	r0, [pc, #276]	; (80101fc <__multiply+0x150>)
 80100e8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80100ec:	f000 fc7e 	bl	80109ec <__assert_func>
 80100f0:	f100 0514 	add.w	r5, r0, #20
 80100f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80100f8:	462b      	mov	r3, r5
 80100fa:	2200      	movs	r2, #0
 80100fc:	4543      	cmp	r3, r8
 80100fe:	d321      	bcc.n	8010144 <__multiply+0x98>
 8010100:	f104 0314 	add.w	r3, r4, #20
 8010104:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010108:	f109 0314 	add.w	r3, r9, #20
 801010c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010110:	9202      	str	r2, [sp, #8]
 8010112:	1b3a      	subs	r2, r7, r4
 8010114:	3a15      	subs	r2, #21
 8010116:	f022 0203 	bic.w	r2, r2, #3
 801011a:	3204      	adds	r2, #4
 801011c:	f104 0115 	add.w	r1, r4, #21
 8010120:	428f      	cmp	r7, r1
 8010122:	bf38      	it	cc
 8010124:	2204      	movcc	r2, #4
 8010126:	9201      	str	r2, [sp, #4]
 8010128:	9a02      	ldr	r2, [sp, #8]
 801012a:	9303      	str	r3, [sp, #12]
 801012c:	429a      	cmp	r2, r3
 801012e:	d80c      	bhi.n	801014a <__multiply+0x9e>
 8010130:	2e00      	cmp	r6, #0
 8010132:	dd03      	ble.n	801013c <__multiply+0x90>
 8010134:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010138:	2b00      	cmp	r3, #0
 801013a:	d05b      	beq.n	80101f4 <__multiply+0x148>
 801013c:	6106      	str	r6, [r0, #16]
 801013e:	b005      	add	sp, #20
 8010140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010144:	f843 2b04 	str.w	r2, [r3], #4
 8010148:	e7d8      	b.n	80100fc <__multiply+0x50>
 801014a:	f8b3 a000 	ldrh.w	sl, [r3]
 801014e:	f1ba 0f00 	cmp.w	sl, #0
 8010152:	d024      	beq.n	801019e <__multiply+0xf2>
 8010154:	f104 0e14 	add.w	lr, r4, #20
 8010158:	46a9      	mov	r9, r5
 801015a:	f04f 0c00 	mov.w	ip, #0
 801015e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8010162:	f8d9 1000 	ldr.w	r1, [r9]
 8010166:	fa1f fb82 	uxth.w	fp, r2
 801016a:	b289      	uxth	r1, r1
 801016c:	fb0a 110b 	mla	r1, sl, fp, r1
 8010170:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010174:	f8d9 2000 	ldr.w	r2, [r9]
 8010178:	4461      	add	r1, ip
 801017a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801017e:	fb0a c20b 	mla	r2, sl, fp, ip
 8010182:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010186:	b289      	uxth	r1, r1
 8010188:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801018c:	4577      	cmp	r7, lr
 801018e:	f849 1b04 	str.w	r1, [r9], #4
 8010192:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010196:	d8e2      	bhi.n	801015e <__multiply+0xb2>
 8010198:	9a01      	ldr	r2, [sp, #4]
 801019a:	f845 c002 	str.w	ip, [r5, r2]
 801019e:	9a03      	ldr	r2, [sp, #12]
 80101a0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80101a4:	3304      	adds	r3, #4
 80101a6:	f1b9 0f00 	cmp.w	r9, #0
 80101aa:	d021      	beq.n	80101f0 <__multiply+0x144>
 80101ac:	6829      	ldr	r1, [r5, #0]
 80101ae:	f104 0c14 	add.w	ip, r4, #20
 80101b2:	46ae      	mov	lr, r5
 80101b4:	f04f 0a00 	mov.w	sl, #0
 80101b8:	f8bc b000 	ldrh.w	fp, [ip]
 80101bc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80101c0:	fb09 220b 	mla	r2, r9, fp, r2
 80101c4:	4452      	add	r2, sl
 80101c6:	b289      	uxth	r1, r1
 80101c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80101cc:	f84e 1b04 	str.w	r1, [lr], #4
 80101d0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80101d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80101d8:	f8be 1000 	ldrh.w	r1, [lr]
 80101dc:	fb09 110a 	mla	r1, r9, sl, r1
 80101e0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80101e4:	4567      	cmp	r7, ip
 80101e6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80101ea:	d8e5      	bhi.n	80101b8 <__multiply+0x10c>
 80101ec:	9a01      	ldr	r2, [sp, #4]
 80101ee:	50a9      	str	r1, [r5, r2]
 80101f0:	3504      	adds	r5, #4
 80101f2:	e799      	b.n	8010128 <__multiply+0x7c>
 80101f4:	3e01      	subs	r6, #1
 80101f6:	e79b      	b.n	8010130 <__multiply+0x84>
 80101f8:	080122d9 	.word	0x080122d9
 80101fc:	080122ea 	.word	0x080122ea

08010200 <__pow5mult>:
 8010200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010204:	4615      	mov	r5, r2
 8010206:	f012 0203 	ands.w	r2, r2, #3
 801020a:	4606      	mov	r6, r0
 801020c:	460f      	mov	r7, r1
 801020e:	d007      	beq.n	8010220 <__pow5mult+0x20>
 8010210:	4c25      	ldr	r4, [pc, #148]	; (80102a8 <__pow5mult+0xa8>)
 8010212:	3a01      	subs	r2, #1
 8010214:	2300      	movs	r3, #0
 8010216:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801021a:	f7ff fe9d 	bl	800ff58 <__multadd>
 801021e:	4607      	mov	r7, r0
 8010220:	10ad      	asrs	r5, r5, #2
 8010222:	d03d      	beq.n	80102a0 <__pow5mult+0xa0>
 8010224:	69f4      	ldr	r4, [r6, #28]
 8010226:	b97c      	cbnz	r4, 8010248 <__pow5mult+0x48>
 8010228:	2010      	movs	r0, #16
 801022a:	f7ff fd7f 	bl	800fd2c <malloc>
 801022e:	4602      	mov	r2, r0
 8010230:	61f0      	str	r0, [r6, #28]
 8010232:	b928      	cbnz	r0, 8010240 <__pow5mult+0x40>
 8010234:	4b1d      	ldr	r3, [pc, #116]	; (80102ac <__pow5mult+0xac>)
 8010236:	481e      	ldr	r0, [pc, #120]	; (80102b0 <__pow5mult+0xb0>)
 8010238:	f240 11b3 	movw	r1, #435	; 0x1b3
 801023c:	f000 fbd6 	bl	80109ec <__assert_func>
 8010240:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010244:	6004      	str	r4, [r0, #0]
 8010246:	60c4      	str	r4, [r0, #12]
 8010248:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801024c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010250:	b94c      	cbnz	r4, 8010266 <__pow5mult+0x66>
 8010252:	f240 2171 	movw	r1, #625	; 0x271
 8010256:	4630      	mov	r0, r6
 8010258:	f7ff ff12 	bl	8010080 <__i2b>
 801025c:	2300      	movs	r3, #0
 801025e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010262:	4604      	mov	r4, r0
 8010264:	6003      	str	r3, [r0, #0]
 8010266:	f04f 0900 	mov.w	r9, #0
 801026a:	07eb      	lsls	r3, r5, #31
 801026c:	d50a      	bpl.n	8010284 <__pow5mult+0x84>
 801026e:	4639      	mov	r1, r7
 8010270:	4622      	mov	r2, r4
 8010272:	4630      	mov	r0, r6
 8010274:	f7ff ff1a 	bl	80100ac <__multiply>
 8010278:	4639      	mov	r1, r7
 801027a:	4680      	mov	r8, r0
 801027c:	4630      	mov	r0, r6
 801027e:	f7ff fe49 	bl	800ff14 <_Bfree>
 8010282:	4647      	mov	r7, r8
 8010284:	106d      	asrs	r5, r5, #1
 8010286:	d00b      	beq.n	80102a0 <__pow5mult+0xa0>
 8010288:	6820      	ldr	r0, [r4, #0]
 801028a:	b938      	cbnz	r0, 801029c <__pow5mult+0x9c>
 801028c:	4622      	mov	r2, r4
 801028e:	4621      	mov	r1, r4
 8010290:	4630      	mov	r0, r6
 8010292:	f7ff ff0b 	bl	80100ac <__multiply>
 8010296:	6020      	str	r0, [r4, #0]
 8010298:	f8c0 9000 	str.w	r9, [r0]
 801029c:	4604      	mov	r4, r0
 801029e:	e7e4      	b.n	801026a <__pow5mult+0x6a>
 80102a0:	4638      	mov	r0, r7
 80102a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102a6:	bf00      	nop
 80102a8:	08012438 	.word	0x08012438
 80102ac:	0801226a 	.word	0x0801226a
 80102b0:	080122ea 	.word	0x080122ea

080102b4 <__lshift>:
 80102b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102b8:	460c      	mov	r4, r1
 80102ba:	6849      	ldr	r1, [r1, #4]
 80102bc:	6923      	ldr	r3, [r4, #16]
 80102be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80102c2:	68a3      	ldr	r3, [r4, #8]
 80102c4:	4607      	mov	r7, r0
 80102c6:	4691      	mov	r9, r2
 80102c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80102cc:	f108 0601 	add.w	r6, r8, #1
 80102d0:	42b3      	cmp	r3, r6
 80102d2:	db0b      	blt.n	80102ec <__lshift+0x38>
 80102d4:	4638      	mov	r0, r7
 80102d6:	f7ff fddd 	bl	800fe94 <_Balloc>
 80102da:	4605      	mov	r5, r0
 80102dc:	b948      	cbnz	r0, 80102f2 <__lshift+0x3e>
 80102de:	4602      	mov	r2, r0
 80102e0:	4b28      	ldr	r3, [pc, #160]	; (8010384 <__lshift+0xd0>)
 80102e2:	4829      	ldr	r0, [pc, #164]	; (8010388 <__lshift+0xd4>)
 80102e4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80102e8:	f000 fb80 	bl	80109ec <__assert_func>
 80102ec:	3101      	adds	r1, #1
 80102ee:	005b      	lsls	r3, r3, #1
 80102f0:	e7ee      	b.n	80102d0 <__lshift+0x1c>
 80102f2:	2300      	movs	r3, #0
 80102f4:	f100 0114 	add.w	r1, r0, #20
 80102f8:	f100 0210 	add.w	r2, r0, #16
 80102fc:	4618      	mov	r0, r3
 80102fe:	4553      	cmp	r3, sl
 8010300:	db33      	blt.n	801036a <__lshift+0xb6>
 8010302:	6920      	ldr	r0, [r4, #16]
 8010304:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010308:	f104 0314 	add.w	r3, r4, #20
 801030c:	f019 091f 	ands.w	r9, r9, #31
 8010310:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010314:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010318:	d02b      	beq.n	8010372 <__lshift+0xbe>
 801031a:	f1c9 0e20 	rsb	lr, r9, #32
 801031e:	468a      	mov	sl, r1
 8010320:	2200      	movs	r2, #0
 8010322:	6818      	ldr	r0, [r3, #0]
 8010324:	fa00 f009 	lsl.w	r0, r0, r9
 8010328:	4310      	orrs	r0, r2
 801032a:	f84a 0b04 	str.w	r0, [sl], #4
 801032e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010332:	459c      	cmp	ip, r3
 8010334:	fa22 f20e 	lsr.w	r2, r2, lr
 8010338:	d8f3      	bhi.n	8010322 <__lshift+0x6e>
 801033a:	ebac 0304 	sub.w	r3, ip, r4
 801033e:	3b15      	subs	r3, #21
 8010340:	f023 0303 	bic.w	r3, r3, #3
 8010344:	3304      	adds	r3, #4
 8010346:	f104 0015 	add.w	r0, r4, #21
 801034a:	4584      	cmp	ip, r0
 801034c:	bf38      	it	cc
 801034e:	2304      	movcc	r3, #4
 8010350:	50ca      	str	r2, [r1, r3]
 8010352:	b10a      	cbz	r2, 8010358 <__lshift+0xa4>
 8010354:	f108 0602 	add.w	r6, r8, #2
 8010358:	3e01      	subs	r6, #1
 801035a:	4638      	mov	r0, r7
 801035c:	612e      	str	r6, [r5, #16]
 801035e:	4621      	mov	r1, r4
 8010360:	f7ff fdd8 	bl	800ff14 <_Bfree>
 8010364:	4628      	mov	r0, r5
 8010366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801036a:	f842 0f04 	str.w	r0, [r2, #4]!
 801036e:	3301      	adds	r3, #1
 8010370:	e7c5      	b.n	80102fe <__lshift+0x4a>
 8010372:	3904      	subs	r1, #4
 8010374:	f853 2b04 	ldr.w	r2, [r3], #4
 8010378:	f841 2f04 	str.w	r2, [r1, #4]!
 801037c:	459c      	cmp	ip, r3
 801037e:	d8f9      	bhi.n	8010374 <__lshift+0xc0>
 8010380:	e7ea      	b.n	8010358 <__lshift+0xa4>
 8010382:	bf00      	nop
 8010384:	080122d9 	.word	0x080122d9
 8010388:	080122ea 	.word	0x080122ea

0801038c <__mcmp>:
 801038c:	b530      	push	{r4, r5, lr}
 801038e:	6902      	ldr	r2, [r0, #16]
 8010390:	690c      	ldr	r4, [r1, #16]
 8010392:	1b12      	subs	r2, r2, r4
 8010394:	d10e      	bne.n	80103b4 <__mcmp+0x28>
 8010396:	f100 0314 	add.w	r3, r0, #20
 801039a:	3114      	adds	r1, #20
 801039c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80103a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80103a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80103a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80103ac:	42a5      	cmp	r5, r4
 80103ae:	d003      	beq.n	80103b8 <__mcmp+0x2c>
 80103b0:	d305      	bcc.n	80103be <__mcmp+0x32>
 80103b2:	2201      	movs	r2, #1
 80103b4:	4610      	mov	r0, r2
 80103b6:	bd30      	pop	{r4, r5, pc}
 80103b8:	4283      	cmp	r3, r0
 80103ba:	d3f3      	bcc.n	80103a4 <__mcmp+0x18>
 80103bc:	e7fa      	b.n	80103b4 <__mcmp+0x28>
 80103be:	f04f 32ff 	mov.w	r2, #4294967295
 80103c2:	e7f7      	b.n	80103b4 <__mcmp+0x28>

080103c4 <__mdiff>:
 80103c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103c8:	460c      	mov	r4, r1
 80103ca:	4606      	mov	r6, r0
 80103cc:	4611      	mov	r1, r2
 80103ce:	4620      	mov	r0, r4
 80103d0:	4690      	mov	r8, r2
 80103d2:	f7ff ffdb 	bl	801038c <__mcmp>
 80103d6:	1e05      	subs	r5, r0, #0
 80103d8:	d110      	bne.n	80103fc <__mdiff+0x38>
 80103da:	4629      	mov	r1, r5
 80103dc:	4630      	mov	r0, r6
 80103de:	f7ff fd59 	bl	800fe94 <_Balloc>
 80103e2:	b930      	cbnz	r0, 80103f2 <__mdiff+0x2e>
 80103e4:	4b3a      	ldr	r3, [pc, #232]	; (80104d0 <__mdiff+0x10c>)
 80103e6:	4602      	mov	r2, r0
 80103e8:	f240 2137 	movw	r1, #567	; 0x237
 80103ec:	4839      	ldr	r0, [pc, #228]	; (80104d4 <__mdiff+0x110>)
 80103ee:	f000 fafd 	bl	80109ec <__assert_func>
 80103f2:	2301      	movs	r3, #1
 80103f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80103f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103fc:	bfa4      	itt	ge
 80103fe:	4643      	movge	r3, r8
 8010400:	46a0      	movge	r8, r4
 8010402:	4630      	mov	r0, r6
 8010404:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010408:	bfa6      	itte	ge
 801040a:	461c      	movge	r4, r3
 801040c:	2500      	movge	r5, #0
 801040e:	2501      	movlt	r5, #1
 8010410:	f7ff fd40 	bl	800fe94 <_Balloc>
 8010414:	b920      	cbnz	r0, 8010420 <__mdiff+0x5c>
 8010416:	4b2e      	ldr	r3, [pc, #184]	; (80104d0 <__mdiff+0x10c>)
 8010418:	4602      	mov	r2, r0
 801041a:	f240 2145 	movw	r1, #581	; 0x245
 801041e:	e7e5      	b.n	80103ec <__mdiff+0x28>
 8010420:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010424:	6926      	ldr	r6, [r4, #16]
 8010426:	60c5      	str	r5, [r0, #12]
 8010428:	f104 0914 	add.w	r9, r4, #20
 801042c:	f108 0514 	add.w	r5, r8, #20
 8010430:	f100 0e14 	add.w	lr, r0, #20
 8010434:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010438:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801043c:	f108 0210 	add.w	r2, r8, #16
 8010440:	46f2      	mov	sl, lr
 8010442:	2100      	movs	r1, #0
 8010444:	f859 3b04 	ldr.w	r3, [r9], #4
 8010448:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801044c:	fa11 f88b 	uxtah	r8, r1, fp
 8010450:	b299      	uxth	r1, r3
 8010452:	0c1b      	lsrs	r3, r3, #16
 8010454:	eba8 0801 	sub.w	r8, r8, r1
 8010458:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801045c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010460:	fa1f f888 	uxth.w	r8, r8
 8010464:	1419      	asrs	r1, r3, #16
 8010466:	454e      	cmp	r6, r9
 8010468:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801046c:	f84a 3b04 	str.w	r3, [sl], #4
 8010470:	d8e8      	bhi.n	8010444 <__mdiff+0x80>
 8010472:	1b33      	subs	r3, r6, r4
 8010474:	3b15      	subs	r3, #21
 8010476:	f023 0303 	bic.w	r3, r3, #3
 801047a:	3304      	adds	r3, #4
 801047c:	3415      	adds	r4, #21
 801047e:	42a6      	cmp	r6, r4
 8010480:	bf38      	it	cc
 8010482:	2304      	movcc	r3, #4
 8010484:	441d      	add	r5, r3
 8010486:	4473      	add	r3, lr
 8010488:	469e      	mov	lr, r3
 801048a:	462e      	mov	r6, r5
 801048c:	4566      	cmp	r6, ip
 801048e:	d30e      	bcc.n	80104ae <__mdiff+0xea>
 8010490:	f10c 0203 	add.w	r2, ip, #3
 8010494:	1b52      	subs	r2, r2, r5
 8010496:	f022 0203 	bic.w	r2, r2, #3
 801049a:	3d03      	subs	r5, #3
 801049c:	45ac      	cmp	ip, r5
 801049e:	bf38      	it	cc
 80104a0:	2200      	movcc	r2, #0
 80104a2:	4413      	add	r3, r2
 80104a4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80104a8:	b17a      	cbz	r2, 80104ca <__mdiff+0x106>
 80104aa:	6107      	str	r7, [r0, #16]
 80104ac:	e7a4      	b.n	80103f8 <__mdiff+0x34>
 80104ae:	f856 8b04 	ldr.w	r8, [r6], #4
 80104b2:	fa11 f288 	uxtah	r2, r1, r8
 80104b6:	1414      	asrs	r4, r2, #16
 80104b8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80104bc:	b292      	uxth	r2, r2
 80104be:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80104c2:	f84e 2b04 	str.w	r2, [lr], #4
 80104c6:	1421      	asrs	r1, r4, #16
 80104c8:	e7e0      	b.n	801048c <__mdiff+0xc8>
 80104ca:	3f01      	subs	r7, #1
 80104cc:	e7ea      	b.n	80104a4 <__mdiff+0xe0>
 80104ce:	bf00      	nop
 80104d0:	080122d9 	.word	0x080122d9
 80104d4:	080122ea 	.word	0x080122ea

080104d8 <__d2b>:
 80104d8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80104dc:	460f      	mov	r7, r1
 80104de:	2101      	movs	r1, #1
 80104e0:	ec59 8b10 	vmov	r8, r9, d0
 80104e4:	4616      	mov	r6, r2
 80104e6:	f7ff fcd5 	bl	800fe94 <_Balloc>
 80104ea:	4604      	mov	r4, r0
 80104ec:	b930      	cbnz	r0, 80104fc <__d2b+0x24>
 80104ee:	4602      	mov	r2, r0
 80104f0:	4b24      	ldr	r3, [pc, #144]	; (8010584 <__d2b+0xac>)
 80104f2:	4825      	ldr	r0, [pc, #148]	; (8010588 <__d2b+0xb0>)
 80104f4:	f240 310f 	movw	r1, #783	; 0x30f
 80104f8:	f000 fa78 	bl	80109ec <__assert_func>
 80104fc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010500:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010504:	bb2d      	cbnz	r5, 8010552 <__d2b+0x7a>
 8010506:	9301      	str	r3, [sp, #4]
 8010508:	f1b8 0300 	subs.w	r3, r8, #0
 801050c:	d026      	beq.n	801055c <__d2b+0x84>
 801050e:	4668      	mov	r0, sp
 8010510:	9300      	str	r3, [sp, #0]
 8010512:	f7ff fd87 	bl	8010024 <__lo0bits>
 8010516:	e9dd 1200 	ldrd	r1, r2, [sp]
 801051a:	b1e8      	cbz	r0, 8010558 <__d2b+0x80>
 801051c:	f1c0 0320 	rsb	r3, r0, #32
 8010520:	fa02 f303 	lsl.w	r3, r2, r3
 8010524:	430b      	orrs	r3, r1
 8010526:	40c2      	lsrs	r2, r0
 8010528:	6163      	str	r3, [r4, #20]
 801052a:	9201      	str	r2, [sp, #4]
 801052c:	9b01      	ldr	r3, [sp, #4]
 801052e:	61a3      	str	r3, [r4, #24]
 8010530:	2b00      	cmp	r3, #0
 8010532:	bf14      	ite	ne
 8010534:	2202      	movne	r2, #2
 8010536:	2201      	moveq	r2, #1
 8010538:	6122      	str	r2, [r4, #16]
 801053a:	b1bd      	cbz	r5, 801056c <__d2b+0x94>
 801053c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010540:	4405      	add	r5, r0
 8010542:	603d      	str	r5, [r7, #0]
 8010544:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010548:	6030      	str	r0, [r6, #0]
 801054a:	4620      	mov	r0, r4
 801054c:	b003      	add	sp, #12
 801054e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010556:	e7d6      	b.n	8010506 <__d2b+0x2e>
 8010558:	6161      	str	r1, [r4, #20]
 801055a:	e7e7      	b.n	801052c <__d2b+0x54>
 801055c:	a801      	add	r0, sp, #4
 801055e:	f7ff fd61 	bl	8010024 <__lo0bits>
 8010562:	9b01      	ldr	r3, [sp, #4]
 8010564:	6163      	str	r3, [r4, #20]
 8010566:	3020      	adds	r0, #32
 8010568:	2201      	movs	r2, #1
 801056a:	e7e5      	b.n	8010538 <__d2b+0x60>
 801056c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010570:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010574:	6038      	str	r0, [r7, #0]
 8010576:	6918      	ldr	r0, [r3, #16]
 8010578:	f7ff fd34 	bl	800ffe4 <__hi0bits>
 801057c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010580:	e7e2      	b.n	8010548 <__d2b+0x70>
 8010582:	bf00      	nop
 8010584:	080122d9 	.word	0x080122d9
 8010588:	080122ea 	.word	0x080122ea

0801058c <__ssputs_r>:
 801058c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010590:	688e      	ldr	r6, [r1, #8]
 8010592:	461f      	mov	r7, r3
 8010594:	42be      	cmp	r6, r7
 8010596:	680b      	ldr	r3, [r1, #0]
 8010598:	4682      	mov	sl, r0
 801059a:	460c      	mov	r4, r1
 801059c:	4690      	mov	r8, r2
 801059e:	d82c      	bhi.n	80105fa <__ssputs_r+0x6e>
 80105a0:	898a      	ldrh	r2, [r1, #12]
 80105a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80105a6:	d026      	beq.n	80105f6 <__ssputs_r+0x6a>
 80105a8:	6965      	ldr	r5, [r4, #20]
 80105aa:	6909      	ldr	r1, [r1, #16]
 80105ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80105b0:	eba3 0901 	sub.w	r9, r3, r1
 80105b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80105b8:	1c7b      	adds	r3, r7, #1
 80105ba:	444b      	add	r3, r9
 80105bc:	106d      	asrs	r5, r5, #1
 80105be:	429d      	cmp	r5, r3
 80105c0:	bf38      	it	cc
 80105c2:	461d      	movcc	r5, r3
 80105c4:	0553      	lsls	r3, r2, #21
 80105c6:	d527      	bpl.n	8010618 <__ssputs_r+0x8c>
 80105c8:	4629      	mov	r1, r5
 80105ca:	f7ff fbd7 	bl	800fd7c <_malloc_r>
 80105ce:	4606      	mov	r6, r0
 80105d0:	b360      	cbz	r0, 801062c <__ssputs_r+0xa0>
 80105d2:	6921      	ldr	r1, [r4, #16]
 80105d4:	464a      	mov	r2, r9
 80105d6:	f7fe fcd2 	bl	800ef7e <memcpy>
 80105da:	89a3      	ldrh	r3, [r4, #12]
 80105dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80105e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80105e4:	81a3      	strh	r3, [r4, #12]
 80105e6:	6126      	str	r6, [r4, #16]
 80105e8:	6165      	str	r5, [r4, #20]
 80105ea:	444e      	add	r6, r9
 80105ec:	eba5 0509 	sub.w	r5, r5, r9
 80105f0:	6026      	str	r6, [r4, #0]
 80105f2:	60a5      	str	r5, [r4, #8]
 80105f4:	463e      	mov	r6, r7
 80105f6:	42be      	cmp	r6, r7
 80105f8:	d900      	bls.n	80105fc <__ssputs_r+0x70>
 80105fa:	463e      	mov	r6, r7
 80105fc:	6820      	ldr	r0, [r4, #0]
 80105fe:	4632      	mov	r2, r6
 8010600:	4641      	mov	r1, r8
 8010602:	f000 f9c9 	bl	8010998 <memmove>
 8010606:	68a3      	ldr	r3, [r4, #8]
 8010608:	1b9b      	subs	r3, r3, r6
 801060a:	60a3      	str	r3, [r4, #8]
 801060c:	6823      	ldr	r3, [r4, #0]
 801060e:	4433      	add	r3, r6
 8010610:	6023      	str	r3, [r4, #0]
 8010612:	2000      	movs	r0, #0
 8010614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010618:	462a      	mov	r2, r5
 801061a:	f000 fa2d 	bl	8010a78 <_realloc_r>
 801061e:	4606      	mov	r6, r0
 8010620:	2800      	cmp	r0, #0
 8010622:	d1e0      	bne.n	80105e6 <__ssputs_r+0x5a>
 8010624:	6921      	ldr	r1, [r4, #16]
 8010626:	4650      	mov	r0, sl
 8010628:	f7ff fb34 	bl	800fc94 <_free_r>
 801062c:	230c      	movs	r3, #12
 801062e:	f8ca 3000 	str.w	r3, [sl]
 8010632:	89a3      	ldrh	r3, [r4, #12]
 8010634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010638:	81a3      	strh	r3, [r4, #12]
 801063a:	f04f 30ff 	mov.w	r0, #4294967295
 801063e:	e7e9      	b.n	8010614 <__ssputs_r+0x88>

08010640 <_svfiprintf_r>:
 8010640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010644:	4698      	mov	r8, r3
 8010646:	898b      	ldrh	r3, [r1, #12]
 8010648:	061b      	lsls	r3, r3, #24
 801064a:	b09d      	sub	sp, #116	; 0x74
 801064c:	4607      	mov	r7, r0
 801064e:	460d      	mov	r5, r1
 8010650:	4614      	mov	r4, r2
 8010652:	d50e      	bpl.n	8010672 <_svfiprintf_r+0x32>
 8010654:	690b      	ldr	r3, [r1, #16]
 8010656:	b963      	cbnz	r3, 8010672 <_svfiprintf_r+0x32>
 8010658:	2140      	movs	r1, #64	; 0x40
 801065a:	f7ff fb8f 	bl	800fd7c <_malloc_r>
 801065e:	6028      	str	r0, [r5, #0]
 8010660:	6128      	str	r0, [r5, #16]
 8010662:	b920      	cbnz	r0, 801066e <_svfiprintf_r+0x2e>
 8010664:	230c      	movs	r3, #12
 8010666:	603b      	str	r3, [r7, #0]
 8010668:	f04f 30ff 	mov.w	r0, #4294967295
 801066c:	e0d0      	b.n	8010810 <_svfiprintf_r+0x1d0>
 801066e:	2340      	movs	r3, #64	; 0x40
 8010670:	616b      	str	r3, [r5, #20]
 8010672:	2300      	movs	r3, #0
 8010674:	9309      	str	r3, [sp, #36]	; 0x24
 8010676:	2320      	movs	r3, #32
 8010678:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801067c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010680:	2330      	movs	r3, #48	; 0x30
 8010682:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010828 <_svfiprintf_r+0x1e8>
 8010686:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801068a:	f04f 0901 	mov.w	r9, #1
 801068e:	4623      	mov	r3, r4
 8010690:	469a      	mov	sl, r3
 8010692:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010696:	b10a      	cbz	r2, 801069c <_svfiprintf_r+0x5c>
 8010698:	2a25      	cmp	r2, #37	; 0x25
 801069a:	d1f9      	bne.n	8010690 <_svfiprintf_r+0x50>
 801069c:	ebba 0b04 	subs.w	fp, sl, r4
 80106a0:	d00b      	beq.n	80106ba <_svfiprintf_r+0x7a>
 80106a2:	465b      	mov	r3, fp
 80106a4:	4622      	mov	r2, r4
 80106a6:	4629      	mov	r1, r5
 80106a8:	4638      	mov	r0, r7
 80106aa:	f7ff ff6f 	bl	801058c <__ssputs_r>
 80106ae:	3001      	adds	r0, #1
 80106b0:	f000 80a9 	beq.w	8010806 <_svfiprintf_r+0x1c6>
 80106b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80106b6:	445a      	add	r2, fp
 80106b8:	9209      	str	r2, [sp, #36]	; 0x24
 80106ba:	f89a 3000 	ldrb.w	r3, [sl]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	f000 80a1 	beq.w	8010806 <_svfiprintf_r+0x1c6>
 80106c4:	2300      	movs	r3, #0
 80106c6:	f04f 32ff 	mov.w	r2, #4294967295
 80106ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80106ce:	f10a 0a01 	add.w	sl, sl, #1
 80106d2:	9304      	str	r3, [sp, #16]
 80106d4:	9307      	str	r3, [sp, #28]
 80106d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80106da:	931a      	str	r3, [sp, #104]	; 0x68
 80106dc:	4654      	mov	r4, sl
 80106de:	2205      	movs	r2, #5
 80106e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106e4:	4850      	ldr	r0, [pc, #320]	; (8010828 <_svfiprintf_r+0x1e8>)
 80106e6:	f7ef fdab 	bl	8000240 <memchr>
 80106ea:	9a04      	ldr	r2, [sp, #16]
 80106ec:	b9d8      	cbnz	r0, 8010726 <_svfiprintf_r+0xe6>
 80106ee:	06d0      	lsls	r0, r2, #27
 80106f0:	bf44      	itt	mi
 80106f2:	2320      	movmi	r3, #32
 80106f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80106f8:	0711      	lsls	r1, r2, #28
 80106fa:	bf44      	itt	mi
 80106fc:	232b      	movmi	r3, #43	; 0x2b
 80106fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010702:	f89a 3000 	ldrb.w	r3, [sl]
 8010706:	2b2a      	cmp	r3, #42	; 0x2a
 8010708:	d015      	beq.n	8010736 <_svfiprintf_r+0xf6>
 801070a:	9a07      	ldr	r2, [sp, #28]
 801070c:	4654      	mov	r4, sl
 801070e:	2000      	movs	r0, #0
 8010710:	f04f 0c0a 	mov.w	ip, #10
 8010714:	4621      	mov	r1, r4
 8010716:	f811 3b01 	ldrb.w	r3, [r1], #1
 801071a:	3b30      	subs	r3, #48	; 0x30
 801071c:	2b09      	cmp	r3, #9
 801071e:	d94d      	bls.n	80107bc <_svfiprintf_r+0x17c>
 8010720:	b1b0      	cbz	r0, 8010750 <_svfiprintf_r+0x110>
 8010722:	9207      	str	r2, [sp, #28]
 8010724:	e014      	b.n	8010750 <_svfiprintf_r+0x110>
 8010726:	eba0 0308 	sub.w	r3, r0, r8
 801072a:	fa09 f303 	lsl.w	r3, r9, r3
 801072e:	4313      	orrs	r3, r2
 8010730:	9304      	str	r3, [sp, #16]
 8010732:	46a2      	mov	sl, r4
 8010734:	e7d2      	b.n	80106dc <_svfiprintf_r+0x9c>
 8010736:	9b03      	ldr	r3, [sp, #12]
 8010738:	1d19      	adds	r1, r3, #4
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	9103      	str	r1, [sp, #12]
 801073e:	2b00      	cmp	r3, #0
 8010740:	bfbb      	ittet	lt
 8010742:	425b      	neglt	r3, r3
 8010744:	f042 0202 	orrlt.w	r2, r2, #2
 8010748:	9307      	strge	r3, [sp, #28]
 801074a:	9307      	strlt	r3, [sp, #28]
 801074c:	bfb8      	it	lt
 801074e:	9204      	strlt	r2, [sp, #16]
 8010750:	7823      	ldrb	r3, [r4, #0]
 8010752:	2b2e      	cmp	r3, #46	; 0x2e
 8010754:	d10c      	bne.n	8010770 <_svfiprintf_r+0x130>
 8010756:	7863      	ldrb	r3, [r4, #1]
 8010758:	2b2a      	cmp	r3, #42	; 0x2a
 801075a:	d134      	bne.n	80107c6 <_svfiprintf_r+0x186>
 801075c:	9b03      	ldr	r3, [sp, #12]
 801075e:	1d1a      	adds	r2, r3, #4
 8010760:	681b      	ldr	r3, [r3, #0]
 8010762:	9203      	str	r2, [sp, #12]
 8010764:	2b00      	cmp	r3, #0
 8010766:	bfb8      	it	lt
 8010768:	f04f 33ff 	movlt.w	r3, #4294967295
 801076c:	3402      	adds	r4, #2
 801076e:	9305      	str	r3, [sp, #20]
 8010770:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010838 <_svfiprintf_r+0x1f8>
 8010774:	7821      	ldrb	r1, [r4, #0]
 8010776:	2203      	movs	r2, #3
 8010778:	4650      	mov	r0, sl
 801077a:	f7ef fd61 	bl	8000240 <memchr>
 801077e:	b138      	cbz	r0, 8010790 <_svfiprintf_r+0x150>
 8010780:	9b04      	ldr	r3, [sp, #16]
 8010782:	eba0 000a 	sub.w	r0, r0, sl
 8010786:	2240      	movs	r2, #64	; 0x40
 8010788:	4082      	lsls	r2, r0
 801078a:	4313      	orrs	r3, r2
 801078c:	3401      	adds	r4, #1
 801078e:	9304      	str	r3, [sp, #16]
 8010790:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010794:	4825      	ldr	r0, [pc, #148]	; (801082c <_svfiprintf_r+0x1ec>)
 8010796:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801079a:	2206      	movs	r2, #6
 801079c:	f7ef fd50 	bl	8000240 <memchr>
 80107a0:	2800      	cmp	r0, #0
 80107a2:	d038      	beq.n	8010816 <_svfiprintf_r+0x1d6>
 80107a4:	4b22      	ldr	r3, [pc, #136]	; (8010830 <_svfiprintf_r+0x1f0>)
 80107a6:	bb1b      	cbnz	r3, 80107f0 <_svfiprintf_r+0x1b0>
 80107a8:	9b03      	ldr	r3, [sp, #12]
 80107aa:	3307      	adds	r3, #7
 80107ac:	f023 0307 	bic.w	r3, r3, #7
 80107b0:	3308      	adds	r3, #8
 80107b2:	9303      	str	r3, [sp, #12]
 80107b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80107b6:	4433      	add	r3, r6
 80107b8:	9309      	str	r3, [sp, #36]	; 0x24
 80107ba:	e768      	b.n	801068e <_svfiprintf_r+0x4e>
 80107bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80107c0:	460c      	mov	r4, r1
 80107c2:	2001      	movs	r0, #1
 80107c4:	e7a6      	b.n	8010714 <_svfiprintf_r+0xd4>
 80107c6:	2300      	movs	r3, #0
 80107c8:	3401      	adds	r4, #1
 80107ca:	9305      	str	r3, [sp, #20]
 80107cc:	4619      	mov	r1, r3
 80107ce:	f04f 0c0a 	mov.w	ip, #10
 80107d2:	4620      	mov	r0, r4
 80107d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80107d8:	3a30      	subs	r2, #48	; 0x30
 80107da:	2a09      	cmp	r2, #9
 80107dc:	d903      	bls.n	80107e6 <_svfiprintf_r+0x1a6>
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d0c6      	beq.n	8010770 <_svfiprintf_r+0x130>
 80107e2:	9105      	str	r1, [sp, #20]
 80107e4:	e7c4      	b.n	8010770 <_svfiprintf_r+0x130>
 80107e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80107ea:	4604      	mov	r4, r0
 80107ec:	2301      	movs	r3, #1
 80107ee:	e7f0      	b.n	80107d2 <_svfiprintf_r+0x192>
 80107f0:	ab03      	add	r3, sp, #12
 80107f2:	9300      	str	r3, [sp, #0]
 80107f4:	462a      	mov	r2, r5
 80107f6:	4b0f      	ldr	r3, [pc, #60]	; (8010834 <_svfiprintf_r+0x1f4>)
 80107f8:	a904      	add	r1, sp, #16
 80107fa:	4638      	mov	r0, r7
 80107fc:	f7fd fe42 	bl	800e484 <_printf_float>
 8010800:	1c42      	adds	r2, r0, #1
 8010802:	4606      	mov	r6, r0
 8010804:	d1d6      	bne.n	80107b4 <_svfiprintf_r+0x174>
 8010806:	89ab      	ldrh	r3, [r5, #12]
 8010808:	065b      	lsls	r3, r3, #25
 801080a:	f53f af2d 	bmi.w	8010668 <_svfiprintf_r+0x28>
 801080e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010810:	b01d      	add	sp, #116	; 0x74
 8010812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010816:	ab03      	add	r3, sp, #12
 8010818:	9300      	str	r3, [sp, #0]
 801081a:	462a      	mov	r2, r5
 801081c:	4b05      	ldr	r3, [pc, #20]	; (8010834 <_svfiprintf_r+0x1f4>)
 801081e:	a904      	add	r1, sp, #16
 8010820:	4638      	mov	r0, r7
 8010822:	f7fe f8d3 	bl	800e9cc <_printf_i>
 8010826:	e7eb      	b.n	8010800 <_svfiprintf_r+0x1c0>
 8010828:	08012444 	.word	0x08012444
 801082c:	0801244e 	.word	0x0801244e
 8010830:	0800e485 	.word	0x0800e485
 8010834:	0801058d 	.word	0x0801058d
 8010838:	0801244a 	.word	0x0801244a

0801083c <__sflush_r>:
 801083c:	898a      	ldrh	r2, [r1, #12]
 801083e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010842:	4605      	mov	r5, r0
 8010844:	0710      	lsls	r0, r2, #28
 8010846:	460c      	mov	r4, r1
 8010848:	d458      	bmi.n	80108fc <__sflush_r+0xc0>
 801084a:	684b      	ldr	r3, [r1, #4]
 801084c:	2b00      	cmp	r3, #0
 801084e:	dc05      	bgt.n	801085c <__sflush_r+0x20>
 8010850:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010852:	2b00      	cmp	r3, #0
 8010854:	dc02      	bgt.n	801085c <__sflush_r+0x20>
 8010856:	2000      	movs	r0, #0
 8010858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801085c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801085e:	2e00      	cmp	r6, #0
 8010860:	d0f9      	beq.n	8010856 <__sflush_r+0x1a>
 8010862:	2300      	movs	r3, #0
 8010864:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010868:	682f      	ldr	r7, [r5, #0]
 801086a:	6a21      	ldr	r1, [r4, #32]
 801086c:	602b      	str	r3, [r5, #0]
 801086e:	d032      	beq.n	80108d6 <__sflush_r+0x9a>
 8010870:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010872:	89a3      	ldrh	r3, [r4, #12]
 8010874:	075a      	lsls	r2, r3, #29
 8010876:	d505      	bpl.n	8010884 <__sflush_r+0x48>
 8010878:	6863      	ldr	r3, [r4, #4]
 801087a:	1ac0      	subs	r0, r0, r3
 801087c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801087e:	b10b      	cbz	r3, 8010884 <__sflush_r+0x48>
 8010880:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010882:	1ac0      	subs	r0, r0, r3
 8010884:	2300      	movs	r3, #0
 8010886:	4602      	mov	r2, r0
 8010888:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801088a:	6a21      	ldr	r1, [r4, #32]
 801088c:	4628      	mov	r0, r5
 801088e:	47b0      	blx	r6
 8010890:	1c43      	adds	r3, r0, #1
 8010892:	89a3      	ldrh	r3, [r4, #12]
 8010894:	d106      	bne.n	80108a4 <__sflush_r+0x68>
 8010896:	6829      	ldr	r1, [r5, #0]
 8010898:	291d      	cmp	r1, #29
 801089a:	d82b      	bhi.n	80108f4 <__sflush_r+0xb8>
 801089c:	4a29      	ldr	r2, [pc, #164]	; (8010944 <__sflush_r+0x108>)
 801089e:	410a      	asrs	r2, r1
 80108a0:	07d6      	lsls	r6, r2, #31
 80108a2:	d427      	bmi.n	80108f4 <__sflush_r+0xb8>
 80108a4:	2200      	movs	r2, #0
 80108a6:	6062      	str	r2, [r4, #4]
 80108a8:	04d9      	lsls	r1, r3, #19
 80108aa:	6922      	ldr	r2, [r4, #16]
 80108ac:	6022      	str	r2, [r4, #0]
 80108ae:	d504      	bpl.n	80108ba <__sflush_r+0x7e>
 80108b0:	1c42      	adds	r2, r0, #1
 80108b2:	d101      	bne.n	80108b8 <__sflush_r+0x7c>
 80108b4:	682b      	ldr	r3, [r5, #0]
 80108b6:	b903      	cbnz	r3, 80108ba <__sflush_r+0x7e>
 80108b8:	6560      	str	r0, [r4, #84]	; 0x54
 80108ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80108bc:	602f      	str	r7, [r5, #0]
 80108be:	2900      	cmp	r1, #0
 80108c0:	d0c9      	beq.n	8010856 <__sflush_r+0x1a>
 80108c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80108c6:	4299      	cmp	r1, r3
 80108c8:	d002      	beq.n	80108d0 <__sflush_r+0x94>
 80108ca:	4628      	mov	r0, r5
 80108cc:	f7ff f9e2 	bl	800fc94 <_free_r>
 80108d0:	2000      	movs	r0, #0
 80108d2:	6360      	str	r0, [r4, #52]	; 0x34
 80108d4:	e7c0      	b.n	8010858 <__sflush_r+0x1c>
 80108d6:	2301      	movs	r3, #1
 80108d8:	4628      	mov	r0, r5
 80108da:	47b0      	blx	r6
 80108dc:	1c41      	adds	r1, r0, #1
 80108de:	d1c8      	bne.n	8010872 <__sflush_r+0x36>
 80108e0:	682b      	ldr	r3, [r5, #0]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d0c5      	beq.n	8010872 <__sflush_r+0x36>
 80108e6:	2b1d      	cmp	r3, #29
 80108e8:	d001      	beq.n	80108ee <__sflush_r+0xb2>
 80108ea:	2b16      	cmp	r3, #22
 80108ec:	d101      	bne.n	80108f2 <__sflush_r+0xb6>
 80108ee:	602f      	str	r7, [r5, #0]
 80108f0:	e7b1      	b.n	8010856 <__sflush_r+0x1a>
 80108f2:	89a3      	ldrh	r3, [r4, #12]
 80108f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108f8:	81a3      	strh	r3, [r4, #12]
 80108fa:	e7ad      	b.n	8010858 <__sflush_r+0x1c>
 80108fc:	690f      	ldr	r7, [r1, #16]
 80108fe:	2f00      	cmp	r7, #0
 8010900:	d0a9      	beq.n	8010856 <__sflush_r+0x1a>
 8010902:	0793      	lsls	r3, r2, #30
 8010904:	680e      	ldr	r6, [r1, #0]
 8010906:	bf08      	it	eq
 8010908:	694b      	ldreq	r3, [r1, #20]
 801090a:	600f      	str	r7, [r1, #0]
 801090c:	bf18      	it	ne
 801090e:	2300      	movne	r3, #0
 8010910:	eba6 0807 	sub.w	r8, r6, r7
 8010914:	608b      	str	r3, [r1, #8]
 8010916:	f1b8 0f00 	cmp.w	r8, #0
 801091a:	dd9c      	ble.n	8010856 <__sflush_r+0x1a>
 801091c:	6a21      	ldr	r1, [r4, #32]
 801091e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010920:	4643      	mov	r3, r8
 8010922:	463a      	mov	r2, r7
 8010924:	4628      	mov	r0, r5
 8010926:	47b0      	blx	r6
 8010928:	2800      	cmp	r0, #0
 801092a:	dc06      	bgt.n	801093a <__sflush_r+0xfe>
 801092c:	89a3      	ldrh	r3, [r4, #12]
 801092e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010932:	81a3      	strh	r3, [r4, #12]
 8010934:	f04f 30ff 	mov.w	r0, #4294967295
 8010938:	e78e      	b.n	8010858 <__sflush_r+0x1c>
 801093a:	4407      	add	r7, r0
 801093c:	eba8 0800 	sub.w	r8, r8, r0
 8010940:	e7e9      	b.n	8010916 <__sflush_r+0xda>
 8010942:	bf00      	nop
 8010944:	dfbffffe 	.word	0xdfbffffe

08010948 <_fflush_r>:
 8010948:	b538      	push	{r3, r4, r5, lr}
 801094a:	690b      	ldr	r3, [r1, #16]
 801094c:	4605      	mov	r5, r0
 801094e:	460c      	mov	r4, r1
 8010950:	b913      	cbnz	r3, 8010958 <_fflush_r+0x10>
 8010952:	2500      	movs	r5, #0
 8010954:	4628      	mov	r0, r5
 8010956:	bd38      	pop	{r3, r4, r5, pc}
 8010958:	b118      	cbz	r0, 8010962 <_fflush_r+0x1a>
 801095a:	6a03      	ldr	r3, [r0, #32]
 801095c:	b90b      	cbnz	r3, 8010962 <_fflush_r+0x1a>
 801095e:	f7fe f9e3 	bl	800ed28 <__sinit>
 8010962:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d0f3      	beq.n	8010952 <_fflush_r+0xa>
 801096a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801096c:	07d0      	lsls	r0, r2, #31
 801096e:	d404      	bmi.n	801097a <_fflush_r+0x32>
 8010970:	0599      	lsls	r1, r3, #22
 8010972:	d402      	bmi.n	801097a <_fflush_r+0x32>
 8010974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010976:	f7fe fb00 	bl	800ef7a <__retarget_lock_acquire_recursive>
 801097a:	4628      	mov	r0, r5
 801097c:	4621      	mov	r1, r4
 801097e:	f7ff ff5d 	bl	801083c <__sflush_r>
 8010982:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010984:	07da      	lsls	r2, r3, #31
 8010986:	4605      	mov	r5, r0
 8010988:	d4e4      	bmi.n	8010954 <_fflush_r+0xc>
 801098a:	89a3      	ldrh	r3, [r4, #12]
 801098c:	059b      	lsls	r3, r3, #22
 801098e:	d4e1      	bmi.n	8010954 <_fflush_r+0xc>
 8010990:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010992:	f7fe faf3 	bl	800ef7c <__retarget_lock_release_recursive>
 8010996:	e7dd      	b.n	8010954 <_fflush_r+0xc>

08010998 <memmove>:
 8010998:	4288      	cmp	r0, r1
 801099a:	b510      	push	{r4, lr}
 801099c:	eb01 0402 	add.w	r4, r1, r2
 80109a0:	d902      	bls.n	80109a8 <memmove+0x10>
 80109a2:	4284      	cmp	r4, r0
 80109a4:	4623      	mov	r3, r4
 80109a6:	d807      	bhi.n	80109b8 <memmove+0x20>
 80109a8:	1e43      	subs	r3, r0, #1
 80109aa:	42a1      	cmp	r1, r4
 80109ac:	d008      	beq.n	80109c0 <memmove+0x28>
 80109ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80109b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80109b6:	e7f8      	b.n	80109aa <memmove+0x12>
 80109b8:	4402      	add	r2, r0
 80109ba:	4601      	mov	r1, r0
 80109bc:	428a      	cmp	r2, r1
 80109be:	d100      	bne.n	80109c2 <memmove+0x2a>
 80109c0:	bd10      	pop	{r4, pc}
 80109c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80109c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80109ca:	e7f7      	b.n	80109bc <memmove+0x24>

080109cc <_sbrk_r>:
 80109cc:	b538      	push	{r3, r4, r5, lr}
 80109ce:	4d06      	ldr	r5, [pc, #24]	; (80109e8 <_sbrk_r+0x1c>)
 80109d0:	2300      	movs	r3, #0
 80109d2:	4604      	mov	r4, r0
 80109d4:	4608      	mov	r0, r1
 80109d6:	602b      	str	r3, [r5, #0]
 80109d8:	f7f1 ff34 	bl	8002844 <_sbrk>
 80109dc:	1c43      	adds	r3, r0, #1
 80109de:	d102      	bne.n	80109e6 <_sbrk_r+0x1a>
 80109e0:	682b      	ldr	r3, [r5, #0]
 80109e2:	b103      	cbz	r3, 80109e6 <_sbrk_r+0x1a>
 80109e4:	6023      	str	r3, [r4, #0]
 80109e6:	bd38      	pop	{r3, r4, r5, pc}
 80109e8:	200042f8 	.word	0x200042f8

080109ec <__assert_func>:
 80109ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80109ee:	4614      	mov	r4, r2
 80109f0:	461a      	mov	r2, r3
 80109f2:	4b09      	ldr	r3, [pc, #36]	; (8010a18 <__assert_func+0x2c>)
 80109f4:	681b      	ldr	r3, [r3, #0]
 80109f6:	4605      	mov	r5, r0
 80109f8:	68d8      	ldr	r0, [r3, #12]
 80109fa:	b14c      	cbz	r4, 8010a10 <__assert_func+0x24>
 80109fc:	4b07      	ldr	r3, [pc, #28]	; (8010a1c <__assert_func+0x30>)
 80109fe:	9100      	str	r1, [sp, #0]
 8010a00:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010a04:	4906      	ldr	r1, [pc, #24]	; (8010a20 <__assert_func+0x34>)
 8010a06:	462b      	mov	r3, r5
 8010a08:	f000 f872 	bl	8010af0 <fiprintf>
 8010a0c:	f000 f882 	bl	8010b14 <abort>
 8010a10:	4b04      	ldr	r3, [pc, #16]	; (8010a24 <__assert_func+0x38>)
 8010a12:	461c      	mov	r4, r3
 8010a14:	e7f3      	b.n	80109fe <__assert_func+0x12>
 8010a16:	bf00      	nop
 8010a18:	200001ec 	.word	0x200001ec
 8010a1c:	0801245f 	.word	0x0801245f
 8010a20:	0801246c 	.word	0x0801246c
 8010a24:	0801249a 	.word	0x0801249a

08010a28 <_calloc_r>:
 8010a28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010a2a:	fba1 2402 	umull	r2, r4, r1, r2
 8010a2e:	b94c      	cbnz	r4, 8010a44 <_calloc_r+0x1c>
 8010a30:	4611      	mov	r1, r2
 8010a32:	9201      	str	r2, [sp, #4]
 8010a34:	f7ff f9a2 	bl	800fd7c <_malloc_r>
 8010a38:	9a01      	ldr	r2, [sp, #4]
 8010a3a:	4605      	mov	r5, r0
 8010a3c:	b930      	cbnz	r0, 8010a4c <_calloc_r+0x24>
 8010a3e:	4628      	mov	r0, r5
 8010a40:	b003      	add	sp, #12
 8010a42:	bd30      	pop	{r4, r5, pc}
 8010a44:	220c      	movs	r2, #12
 8010a46:	6002      	str	r2, [r0, #0]
 8010a48:	2500      	movs	r5, #0
 8010a4a:	e7f8      	b.n	8010a3e <_calloc_r+0x16>
 8010a4c:	4621      	mov	r1, r4
 8010a4e:	f7fe fa04 	bl	800ee5a <memset>
 8010a52:	e7f4      	b.n	8010a3e <_calloc_r+0x16>

08010a54 <__ascii_mbtowc>:
 8010a54:	b082      	sub	sp, #8
 8010a56:	b901      	cbnz	r1, 8010a5a <__ascii_mbtowc+0x6>
 8010a58:	a901      	add	r1, sp, #4
 8010a5a:	b142      	cbz	r2, 8010a6e <__ascii_mbtowc+0x1a>
 8010a5c:	b14b      	cbz	r3, 8010a72 <__ascii_mbtowc+0x1e>
 8010a5e:	7813      	ldrb	r3, [r2, #0]
 8010a60:	600b      	str	r3, [r1, #0]
 8010a62:	7812      	ldrb	r2, [r2, #0]
 8010a64:	1e10      	subs	r0, r2, #0
 8010a66:	bf18      	it	ne
 8010a68:	2001      	movne	r0, #1
 8010a6a:	b002      	add	sp, #8
 8010a6c:	4770      	bx	lr
 8010a6e:	4610      	mov	r0, r2
 8010a70:	e7fb      	b.n	8010a6a <__ascii_mbtowc+0x16>
 8010a72:	f06f 0001 	mvn.w	r0, #1
 8010a76:	e7f8      	b.n	8010a6a <__ascii_mbtowc+0x16>

08010a78 <_realloc_r>:
 8010a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a7c:	4680      	mov	r8, r0
 8010a7e:	4614      	mov	r4, r2
 8010a80:	460e      	mov	r6, r1
 8010a82:	b921      	cbnz	r1, 8010a8e <_realloc_r+0x16>
 8010a84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010a88:	4611      	mov	r1, r2
 8010a8a:	f7ff b977 	b.w	800fd7c <_malloc_r>
 8010a8e:	b92a      	cbnz	r2, 8010a9c <_realloc_r+0x24>
 8010a90:	f7ff f900 	bl	800fc94 <_free_r>
 8010a94:	4625      	mov	r5, r4
 8010a96:	4628      	mov	r0, r5
 8010a98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a9c:	f000 f841 	bl	8010b22 <_malloc_usable_size_r>
 8010aa0:	4284      	cmp	r4, r0
 8010aa2:	4607      	mov	r7, r0
 8010aa4:	d802      	bhi.n	8010aac <_realloc_r+0x34>
 8010aa6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010aaa:	d812      	bhi.n	8010ad2 <_realloc_r+0x5a>
 8010aac:	4621      	mov	r1, r4
 8010aae:	4640      	mov	r0, r8
 8010ab0:	f7ff f964 	bl	800fd7c <_malloc_r>
 8010ab4:	4605      	mov	r5, r0
 8010ab6:	2800      	cmp	r0, #0
 8010ab8:	d0ed      	beq.n	8010a96 <_realloc_r+0x1e>
 8010aba:	42bc      	cmp	r4, r7
 8010abc:	4622      	mov	r2, r4
 8010abe:	4631      	mov	r1, r6
 8010ac0:	bf28      	it	cs
 8010ac2:	463a      	movcs	r2, r7
 8010ac4:	f7fe fa5b 	bl	800ef7e <memcpy>
 8010ac8:	4631      	mov	r1, r6
 8010aca:	4640      	mov	r0, r8
 8010acc:	f7ff f8e2 	bl	800fc94 <_free_r>
 8010ad0:	e7e1      	b.n	8010a96 <_realloc_r+0x1e>
 8010ad2:	4635      	mov	r5, r6
 8010ad4:	e7df      	b.n	8010a96 <_realloc_r+0x1e>

08010ad6 <__ascii_wctomb>:
 8010ad6:	b149      	cbz	r1, 8010aec <__ascii_wctomb+0x16>
 8010ad8:	2aff      	cmp	r2, #255	; 0xff
 8010ada:	bf85      	ittet	hi
 8010adc:	238a      	movhi	r3, #138	; 0x8a
 8010ade:	6003      	strhi	r3, [r0, #0]
 8010ae0:	700a      	strbls	r2, [r1, #0]
 8010ae2:	f04f 30ff 	movhi.w	r0, #4294967295
 8010ae6:	bf98      	it	ls
 8010ae8:	2001      	movls	r0, #1
 8010aea:	4770      	bx	lr
 8010aec:	4608      	mov	r0, r1
 8010aee:	4770      	bx	lr

08010af0 <fiprintf>:
 8010af0:	b40e      	push	{r1, r2, r3}
 8010af2:	b503      	push	{r0, r1, lr}
 8010af4:	4601      	mov	r1, r0
 8010af6:	ab03      	add	r3, sp, #12
 8010af8:	4805      	ldr	r0, [pc, #20]	; (8010b10 <fiprintf+0x20>)
 8010afa:	f853 2b04 	ldr.w	r2, [r3], #4
 8010afe:	6800      	ldr	r0, [r0, #0]
 8010b00:	9301      	str	r3, [sp, #4]
 8010b02:	f000 f83f 	bl	8010b84 <_vfiprintf_r>
 8010b06:	b002      	add	sp, #8
 8010b08:	f85d eb04 	ldr.w	lr, [sp], #4
 8010b0c:	b003      	add	sp, #12
 8010b0e:	4770      	bx	lr
 8010b10:	200001ec 	.word	0x200001ec

08010b14 <abort>:
 8010b14:	b508      	push	{r3, lr}
 8010b16:	2006      	movs	r0, #6
 8010b18:	f000 fa0c 	bl	8010f34 <raise>
 8010b1c:	2001      	movs	r0, #1
 8010b1e:	f7f1 fe19 	bl	8002754 <_exit>

08010b22 <_malloc_usable_size_r>:
 8010b22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010b26:	1f18      	subs	r0, r3, #4
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	bfbc      	itt	lt
 8010b2c:	580b      	ldrlt	r3, [r1, r0]
 8010b2e:	18c0      	addlt	r0, r0, r3
 8010b30:	4770      	bx	lr

08010b32 <__sfputc_r>:
 8010b32:	6893      	ldr	r3, [r2, #8]
 8010b34:	3b01      	subs	r3, #1
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	b410      	push	{r4}
 8010b3a:	6093      	str	r3, [r2, #8]
 8010b3c:	da08      	bge.n	8010b50 <__sfputc_r+0x1e>
 8010b3e:	6994      	ldr	r4, [r2, #24]
 8010b40:	42a3      	cmp	r3, r4
 8010b42:	db01      	blt.n	8010b48 <__sfputc_r+0x16>
 8010b44:	290a      	cmp	r1, #10
 8010b46:	d103      	bne.n	8010b50 <__sfputc_r+0x1e>
 8010b48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b4c:	f000 b934 	b.w	8010db8 <__swbuf_r>
 8010b50:	6813      	ldr	r3, [r2, #0]
 8010b52:	1c58      	adds	r0, r3, #1
 8010b54:	6010      	str	r0, [r2, #0]
 8010b56:	7019      	strb	r1, [r3, #0]
 8010b58:	4608      	mov	r0, r1
 8010b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010b5e:	4770      	bx	lr

08010b60 <__sfputs_r>:
 8010b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b62:	4606      	mov	r6, r0
 8010b64:	460f      	mov	r7, r1
 8010b66:	4614      	mov	r4, r2
 8010b68:	18d5      	adds	r5, r2, r3
 8010b6a:	42ac      	cmp	r4, r5
 8010b6c:	d101      	bne.n	8010b72 <__sfputs_r+0x12>
 8010b6e:	2000      	movs	r0, #0
 8010b70:	e007      	b.n	8010b82 <__sfputs_r+0x22>
 8010b72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b76:	463a      	mov	r2, r7
 8010b78:	4630      	mov	r0, r6
 8010b7a:	f7ff ffda 	bl	8010b32 <__sfputc_r>
 8010b7e:	1c43      	adds	r3, r0, #1
 8010b80:	d1f3      	bne.n	8010b6a <__sfputs_r+0xa>
 8010b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010b84 <_vfiprintf_r>:
 8010b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b88:	460d      	mov	r5, r1
 8010b8a:	b09d      	sub	sp, #116	; 0x74
 8010b8c:	4614      	mov	r4, r2
 8010b8e:	4698      	mov	r8, r3
 8010b90:	4606      	mov	r6, r0
 8010b92:	b118      	cbz	r0, 8010b9c <_vfiprintf_r+0x18>
 8010b94:	6a03      	ldr	r3, [r0, #32]
 8010b96:	b90b      	cbnz	r3, 8010b9c <_vfiprintf_r+0x18>
 8010b98:	f7fe f8c6 	bl	800ed28 <__sinit>
 8010b9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010b9e:	07d9      	lsls	r1, r3, #31
 8010ba0:	d405      	bmi.n	8010bae <_vfiprintf_r+0x2a>
 8010ba2:	89ab      	ldrh	r3, [r5, #12]
 8010ba4:	059a      	lsls	r2, r3, #22
 8010ba6:	d402      	bmi.n	8010bae <_vfiprintf_r+0x2a>
 8010ba8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010baa:	f7fe f9e6 	bl	800ef7a <__retarget_lock_acquire_recursive>
 8010bae:	89ab      	ldrh	r3, [r5, #12]
 8010bb0:	071b      	lsls	r3, r3, #28
 8010bb2:	d501      	bpl.n	8010bb8 <_vfiprintf_r+0x34>
 8010bb4:	692b      	ldr	r3, [r5, #16]
 8010bb6:	b99b      	cbnz	r3, 8010be0 <_vfiprintf_r+0x5c>
 8010bb8:	4629      	mov	r1, r5
 8010bba:	4630      	mov	r0, r6
 8010bbc:	f000 f93a 	bl	8010e34 <__swsetup_r>
 8010bc0:	b170      	cbz	r0, 8010be0 <_vfiprintf_r+0x5c>
 8010bc2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010bc4:	07dc      	lsls	r4, r3, #31
 8010bc6:	d504      	bpl.n	8010bd2 <_vfiprintf_r+0x4e>
 8010bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8010bcc:	b01d      	add	sp, #116	; 0x74
 8010bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bd2:	89ab      	ldrh	r3, [r5, #12]
 8010bd4:	0598      	lsls	r0, r3, #22
 8010bd6:	d4f7      	bmi.n	8010bc8 <_vfiprintf_r+0x44>
 8010bd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010bda:	f7fe f9cf 	bl	800ef7c <__retarget_lock_release_recursive>
 8010bde:	e7f3      	b.n	8010bc8 <_vfiprintf_r+0x44>
 8010be0:	2300      	movs	r3, #0
 8010be2:	9309      	str	r3, [sp, #36]	; 0x24
 8010be4:	2320      	movs	r3, #32
 8010be6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010bea:	f8cd 800c 	str.w	r8, [sp, #12]
 8010bee:	2330      	movs	r3, #48	; 0x30
 8010bf0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8010da4 <_vfiprintf_r+0x220>
 8010bf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010bf8:	f04f 0901 	mov.w	r9, #1
 8010bfc:	4623      	mov	r3, r4
 8010bfe:	469a      	mov	sl, r3
 8010c00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010c04:	b10a      	cbz	r2, 8010c0a <_vfiprintf_r+0x86>
 8010c06:	2a25      	cmp	r2, #37	; 0x25
 8010c08:	d1f9      	bne.n	8010bfe <_vfiprintf_r+0x7a>
 8010c0a:	ebba 0b04 	subs.w	fp, sl, r4
 8010c0e:	d00b      	beq.n	8010c28 <_vfiprintf_r+0xa4>
 8010c10:	465b      	mov	r3, fp
 8010c12:	4622      	mov	r2, r4
 8010c14:	4629      	mov	r1, r5
 8010c16:	4630      	mov	r0, r6
 8010c18:	f7ff ffa2 	bl	8010b60 <__sfputs_r>
 8010c1c:	3001      	adds	r0, #1
 8010c1e:	f000 80a9 	beq.w	8010d74 <_vfiprintf_r+0x1f0>
 8010c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010c24:	445a      	add	r2, fp
 8010c26:	9209      	str	r2, [sp, #36]	; 0x24
 8010c28:	f89a 3000 	ldrb.w	r3, [sl]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	f000 80a1 	beq.w	8010d74 <_vfiprintf_r+0x1f0>
 8010c32:	2300      	movs	r3, #0
 8010c34:	f04f 32ff 	mov.w	r2, #4294967295
 8010c38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010c3c:	f10a 0a01 	add.w	sl, sl, #1
 8010c40:	9304      	str	r3, [sp, #16]
 8010c42:	9307      	str	r3, [sp, #28]
 8010c44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010c48:	931a      	str	r3, [sp, #104]	; 0x68
 8010c4a:	4654      	mov	r4, sl
 8010c4c:	2205      	movs	r2, #5
 8010c4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c52:	4854      	ldr	r0, [pc, #336]	; (8010da4 <_vfiprintf_r+0x220>)
 8010c54:	f7ef faf4 	bl	8000240 <memchr>
 8010c58:	9a04      	ldr	r2, [sp, #16]
 8010c5a:	b9d8      	cbnz	r0, 8010c94 <_vfiprintf_r+0x110>
 8010c5c:	06d1      	lsls	r1, r2, #27
 8010c5e:	bf44      	itt	mi
 8010c60:	2320      	movmi	r3, #32
 8010c62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c66:	0713      	lsls	r3, r2, #28
 8010c68:	bf44      	itt	mi
 8010c6a:	232b      	movmi	r3, #43	; 0x2b
 8010c6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c70:	f89a 3000 	ldrb.w	r3, [sl]
 8010c74:	2b2a      	cmp	r3, #42	; 0x2a
 8010c76:	d015      	beq.n	8010ca4 <_vfiprintf_r+0x120>
 8010c78:	9a07      	ldr	r2, [sp, #28]
 8010c7a:	4654      	mov	r4, sl
 8010c7c:	2000      	movs	r0, #0
 8010c7e:	f04f 0c0a 	mov.w	ip, #10
 8010c82:	4621      	mov	r1, r4
 8010c84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c88:	3b30      	subs	r3, #48	; 0x30
 8010c8a:	2b09      	cmp	r3, #9
 8010c8c:	d94d      	bls.n	8010d2a <_vfiprintf_r+0x1a6>
 8010c8e:	b1b0      	cbz	r0, 8010cbe <_vfiprintf_r+0x13a>
 8010c90:	9207      	str	r2, [sp, #28]
 8010c92:	e014      	b.n	8010cbe <_vfiprintf_r+0x13a>
 8010c94:	eba0 0308 	sub.w	r3, r0, r8
 8010c98:	fa09 f303 	lsl.w	r3, r9, r3
 8010c9c:	4313      	orrs	r3, r2
 8010c9e:	9304      	str	r3, [sp, #16]
 8010ca0:	46a2      	mov	sl, r4
 8010ca2:	e7d2      	b.n	8010c4a <_vfiprintf_r+0xc6>
 8010ca4:	9b03      	ldr	r3, [sp, #12]
 8010ca6:	1d19      	adds	r1, r3, #4
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	9103      	str	r1, [sp, #12]
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	bfbb      	ittet	lt
 8010cb0:	425b      	neglt	r3, r3
 8010cb2:	f042 0202 	orrlt.w	r2, r2, #2
 8010cb6:	9307      	strge	r3, [sp, #28]
 8010cb8:	9307      	strlt	r3, [sp, #28]
 8010cba:	bfb8      	it	lt
 8010cbc:	9204      	strlt	r2, [sp, #16]
 8010cbe:	7823      	ldrb	r3, [r4, #0]
 8010cc0:	2b2e      	cmp	r3, #46	; 0x2e
 8010cc2:	d10c      	bne.n	8010cde <_vfiprintf_r+0x15a>
 8010cc4:	7863      	ldrb	r3, [r4, #1]
 8010cc6:	2b2a      	cmp	r3, #42	; 0x2a
 8010cc8:	d134      	bne.n	8010d34 <_vfiprintf_r+0x1b0>
 8010cca:	9b03      	ldr	r3, [sp, #12]
 8010ccc:	1d1a      	adds	r2, r3, #4
 8010cce:	681b      	ldr	r3, [r3, #0]
 8010cd0:	9203      	str	r2, [sp, #12]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	bfb8      	it	lt
 8010cd6:	f04f 33ff 	movlt.w	r3, #4294967295
 8010cda:	3402      	adds	r4, #2
 8010cdc:	9305      	str	r3, [sp, #20]
 8010cde:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8010db4 <_vfiprintf_r+0x230>
 8010ce2:	7821      	ldrb	r1, [r4, #0]
 8010ce4:	2203      	movs	r2, #3
 8010ce6:	4650      	mov	r0, sl
 8010ce8:	f7ef faaa 	bl	8000240 <memchr>
 8010cec:	b138      	cbz	r0, 8010cfe <_vfiprintf_r+0x17a>
 8010cee:	9b04      	ldr	r3, [sp, #16]
 8010cf0:	eba0 000a 	sub.w	r0, r0, sl
 8010cf4:	2240      	movs	r2, #64	; 0x40
 8010cf6:	4082      	lsls	r2, r0
 8010cf8:	4313      	orrs	r3, r2
 8010cfa:	3401      	adds	r4, #1
 8010cfc:	9304      	str	r3, [sp, #16]
 8010cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010d02:	4829      	ldr	r0, [pc, #164]	; (8010da8 <_vfiprintf_r+0x224>)
 8010d04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010d08:	2206      	movs	r2, #6
 8010d0a:	f7ef fa99 	bl	8000240 <memchr>
 8010d0e:	2800      	cmp	r0, #0
 8010d10:	d03f      	beq.n	8010d92 <_vfiprintf_r+0x20e>
 8010d12:	4b26      	ldr	r3, [pc, #152]	; (8010dac <_vfiprintf_r+0x228>)
 8010d14:	bb1b      	cbnz	r3, 8010d5e <_vfiprintf_r+0x1da>
 8010d16:	9b03      	ldr	r3, [sp, #12]
 8010d18:	3307      	adds	r3, #7
 8010d1a:	f023 0307 	bic.w	r3, r3, #7
 8010d1e:	3308      	adds	r3, #8
 8010d20:	9303      	str	r3, [sp, #12]
 8010d22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010d24:	443b      	add	r3, r7
 8010d26:	9309      	str	r3, [sp, #36]	; 0x24
 8010d28:	e768      	b.n	8010bfc <_vfiprintf_r+0x78>
 8010d2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8010d2e:	460c      	mov	r4, r1
 8010d30:	2001      	movs	r0, #1
 8010d32:	e7a6      	b.n	8010c82 <_vfiprintf_r+0xfe>
 8010d34:	2300      	movs	r3, #0
 8010d36:	3401      	adds	r4, #1
 8010d38:	9305      	str	r3, [sp, #20]
 8010d3a:	4619      	mov	r1, r3
 8010d3c:	f04f 0c0a 	mov.w	ip, #10
 8010d40:	4620      	mov	r0, r4
 8010d42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010d46:	3a30      	subs	r2, #48	; 0x30
 8010d48:	2a09      	cmp	r2, #9
 8010d4a:	d903      	bls.n	8010d54 <_vfiprintf_r+0x1d0>
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d0c6      	beq.n	8010cde <_vfiprintf_r+0x15a>
 8010d50:	9105      	str	r1, [sp, #20]
 8010d52:	e7c4      	b.n	8010cde <_vfiprintf_r+0x15a>
 8010d54:	fb0c 2101 	mla	r1, ip, r1, r2
 8010d58:	4604      	mov	r4, r0
 8010d5a:	2301      	movs	r3, #1
 8010d5c:	e7f0      	b.n	8010d40 <_vfiprintf_r+0x1bc>
 8010d5e:	ab03      	add	r3, sp, #12
 8010d60:	9300      	str	r3, [sp, #0]
 8010d62:	462a      	mov	r2, r5
 8010d64:	4b12      	ldr	r3, [pc, #72]	; (8010db0 <_vfiprintf_r+0x22c>)
 8010d66:	a904      	add	r1, sp, #16
 8010d68:	4630      	mov	r0, r6
 8010d6a:	f7fd fb8b 	bl	800e484 <_printf_float>
 8010d6e:	4607      	mov	r7, r0
 8010d70:	1c78      	adds	r0, r7, #1
 8010d72:	d1d6      	bne.n	8010d22 <_vfiprintf_r+0x19e>
 8010d74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d76:	07d9      	lsls	r1, r3, #31
 8010d78:	d405      	bmi.n	8010d86 <_vfiprintf_r+0x202>
 8010d7a:	89ab      	ldrh	r3, [r5, #12]
 8010d7c:	059a      	lsls	r2, r3, #22
 8010d7e:	d402      	bmi.n	8010d86 <_vfiprintf_r+0x202>
 8010d80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d82:	f7fe f8fb 	bl	800ef7c <__retarget_lock_release_recursive>
 8010d86:	89ab      	ldrh	r3, [r5, #12]
 8010d88:	065b      	lsls	r3, r3, #25
 8010d8a:	f53f af1d 	bmi.w	8010bc8 <_vfiprintf_r+0x44>
 8010d8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010d90:	e71c      	b.n	8010bcc <_vfiprintf_r+0x48>
 8010d92:	ab03      	add	r3, sp, #12
 8010d94:	9300      	str	r3, [sp, #0]
 8010d96:	462a      	mov	r2, r5
 8010d98:	4b05      	ldr	r3, [pc, #20]	; (8010db0 <_vfiprintf_r+0x22c>)
 8010d9a:	a904      	add	r1, sp, #16
 8010d9c:	4630      	mov	r0, r6
 8010d9e:	f7fd fe15 	bl	800e9cc <_printf_i>
 8010da2:	e7e4      	b.n	8010d6e <_vfiprintf_r+0x1ea>
 8010da4:	08012444 	.word	0x08012444
 8010da8:	0801244e 	.word	0x0801244e
 8010dac:	0800e485 	.word	0x0800e485
 8010db0:	08010b61 	.word	0x08010b61
 8010db4:	0801244a 	.word	0x0801244a

08010db8 <__swbuf_r>:
 8010db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010dba:	460e      	mov	r6, r1
 8010dbc:	4614      	mov	r4, r2
 8010dbe:	4605      	mov	r5, r0
 8010dc0:	b118      	cbz	r0, 8010dca <__swbuf_r+0x12>
 8010dc2:	6a03      	ldr	r3, [r0, #32]
 8010dc4:	b90b      	cbnz	r3, 8010dca <__swbuf_r+0x12>
 8010dc6:	f7fd ffaf 	bl	800ed28 <__sinit>
 8010dca:	69a3      	ldr	r3, [r4, #24]
 8010dcc:	60a3      	str	r3, [r4, #8]
 8010dce:	89a3      	ldrh	r3, [r4, #12]
 8010dd0:	071a      	lsls	r2, r3, #28
 8010dd2:	d525      	bpl.n	8010e20 <__swbuf_r+0x68>
 8010dd4:	6923      	ldr	r3, [r4, #16]
 8010dd6:	b31b      	cbz	r3, 8010e20 <__swbuf_r+0x68>
 8010dd8:	6823      	ldr	r3, [r4, #0]
 8010dda:	6922      	ldr	r2, [r4, #16]
 8010ddc:	1a98      	subs	r0, r3, r2
 8010dde:	6963      	ldr	r3, [r4, #20]
 8010de0:	b2f6      	uxtb	r6, r6
 8010de2:	4283      	cmp	r3, r0
 8010de4:	4637      	mov	r7, r6
 8010de6:	dc04      	bgt.n	8010df2 <__swbuf_r+0x3a>
 8010de8:	4621      	mov	r1, r4
 8010dea:	4628      	mov	r0, r5
 8010dec:	f7ff fdac 	bl	8010948 <_fflush_r>
 8010df0:	b9e0      	cbnz	r0, 8010e2c <__swbuf_r+0x74>
 8010df2:	68a3      	ldr	r3, [r4, #8]
 8010df4:	3b01      	subs	r3, #1
 8010df6:	60a3      	str	r3, [r4, #8]
 8010df8:	6823      	ldr	r3, [r4, #0]
 8010dfa:	1c5a      	adds	r2, r3, #1
 8010dfc:	6022      	str	r2, [r4, #0]
 8010dfe:	701e      	strb	r6, [r3, #0]
 8010e00:	6962      	ldr	r2, [r4, #20]
 8010e02:	1c43      	adds	r3, r0, #1
 8010e04:	429a      	cmp	r2, r3
 8010e06:	d004      	beq.n	8010e12 <__swbuf_r+0x5a>
 8010e08:	89a3      	ldrh	r3, [r4, #12]
 8010e0a:	07db      	lsls	r3, r3, #31
 8010e0c:	d506      	bpl.n	8010e1c <__swbuf_r+0x64>
 8010e0e:	2e0a      	cmp	r6, #10
 8010e10:	d104      	bne.n	8010e1c <__swbuf_r+0x64>
 8010e12:	4621      	mov	r1, r4
 8010e14:	4628      	mov	r0, r5
 8010e16:	f7ff fd97 	bl	8010948 <_fflush_r>
 8010e1a:	b938      	cbnz	r0, 8010e2c <__swbuf_r+0x74>
 8010e1c:	4638      	mov	r0, r7
 8010e1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010e20:	4621      	mov	r1, r4
 8010e22:	4628      	mov	r0, r5
 8010e24:	f000 f806 	bl	8010e34 <__swsetup_r>
 8010e28:	2800      	cmp	r0, #0
 8010e2a:	d0d5      	beq.n	8010dd8 <__swbuf_r+0x20>
 8010e2c:	f04f 37ff 	mov.w	r7, #4294967295
 8010e30:	e7f4      	b.n	8010e1c <__swbuf_r+0x64>
	...

08010e34 <__swsetup_r>:
 8010e34:	b538      	push	{r3, r4, r5, lr}
 8010e36:	4b2a      	ldr	r3, [pc, #168]	; (8010ee0 <__swsetup_r+0xac>)
 8010e38:	4605      	mov	r5, r0
 8010e3a:	6818      	ldr	r0, [r3, #0]
 8010e3c:	460c      	mov	r4, r1
 8010e3e:	b118      	cbz	r0, 8010e48 <__swsetup_r+0x14>
 8010e40:	6a03      	ldr	r3, [r0, #32]
 8010e42:	b90b      	cbnz	r3, 8010e48 <__swsetup_r+0x14>
 8010e44:	f7fd ff70 	bl	800ed28 <__sinit>
 8010e48:	89a3      	ldrh	r3, [r4, #12]
 8010e4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010e4e:	0718      	lsls	r0, r3, #28
 8010e50:	d422      	bmi.n	8010e98 <__swsetup_r+0x64>
 8010e52:	06d9      	lsls	r1, r3, #27
 8010e54:	d407      	bmi.n	8010e66 <__swsetup_r+0x32>
 8010e56:	2309      	movs	r3, #9
 8010e58:	602b      	str	r3, [r5, #0]
 8010e5a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010e5e:	81a3      	strh	r3, [r4, #12]
 8010e60:	f04f 30ff 	mov.w	r0, #4294967295
 8010e64:	e034      	b.n	8010ed0 <__swsetup_r+0x9c>
 8010e66:	0758      	lsls	r0, r3, #29
 8010e68:	d512      	bpl.n	8010e90 <__swsetup_r+0x5c>
 8010e6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010e6c:	b141      	cbz	r1, 8010e80 <__swsetup_r+0x4c>
 8010e6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010e72:	4299      	cmp	r1, r3
 8010e74:	d002      	beq.n	8010e7c <__swsetup_r+0x48>
 8010e76:	4628      	mov	r0, r5
 8010e78:	f7fe ff0c 	bl	800fc94 <_free_r>
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	6363      	str	r3, [r4, #52]	; 0x34
 8010e80:	89a3      	ldrh	r3, [r4, #12]
 8010e82:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010e86:	81a3      	strh	r3, [r4, #12]
 8010e88:	2300      	movs	r3, #0
 8010e8a:	6063      	str	r3, [r4, #4]
 8010e8c:	6923      	ldr	r3, [r4, #16]
 8010e8e:	6023      	str	r3, [r4, #0]
 8010e90:	89a3      	ldrh	r3, [r4, #12]
 8010e92:	f043 0308 	orr.w	r3, r3, #8
 8010e96:	81a3      	strh	r3, [r4, #12]
 8010e98:	6923      	ldr	r3, [r4, #16]
 8010e9a:	b94b      	cbnz	r3, 8010eb0 <__swsetup_r+0x7c>
 8010e9c:	89a3      	ldrh	r3, [r4, #12]
 8010e9e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010ea2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ea6:	d003      	beq.n	8010eb0 <__swsetup_r+0x7c>
 8010ea8:	4621      	mov	r1, r4
 8010eaa:	4628      	mov	r0, r5
 8010eac:	f000 f884 	bl	8010fb8 <__smakebuf_r>
 8010eb0:	89a0      	ldrh	r0, [r4, #12]
 8010eb2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010eb6:	f010 0301 	ands.w	r3, r0, #1
 8010eba:	d00a      	beq.n	8010ed2 <__swsetup_r+0x9e>
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	60a3      	str	r3, [r4, #8]
 8010ec0:	6963      	ldr	r3, [r4, #20]
 8010ec2:	425b      	negs	r3, r3
 8010ec4:	61a3      	str	r3, [r4, #24]
 8010ec6:	6923      	ldr	r3, [r4, #16]
 8010ec8:	b943      	cbnz	r3, 8010edc <__swsetup_r+0xa8>
 8010eca:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010ece:	d1c4      	bne.n	8010e5a <__swsetup_r+0x26>
 8010ed0:	bd38      	pop	{r3, r4, r5, pc}
 8010ed2:	0781      	lsls	r1, r0, #30
 8010ed4:	bf58      	it	pl
 8010ed6:	6963      	ldrpl	r3, [r4, #20]
 8010ed8:	60a3      	str	r3, [r4, #8]
 8010eda:	e7f4      	b.n	8010ec6 <__swsetup_r+0x92>
 8010edc:	2000      	movs	r0, #0
 8010ede:	e7f7      	b.n	8010ed0 <__swsetup_r+0x9c>
 8010ee0:	200001ec 	.word	0x200001ec

08010ee4 <_raise_r>:
 8010ee4:	291f      	cmp	r1, #31
 8010ee6:	b538      	push	{r3, r4, r5, lr}
 8010ee8:	4604      	mov	r4, r0
 8010eea:	460d      	mov	r5, r1
 8010eec:	d904      	bls.n	8010ef8 <_raise_r+0x14>
 8010eee:	2316      	movs	r3, #22
 8010ef0:	6003      	str	r3, [r0, #0]
 8010ef2:	f04f 30ff 	mov.w	r0, #4294967295
 8010ef6:	bd38      	pop	{r3, r4, r5, pc}
 8010ef8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8010efa:	b112      	cbz	r2, 8010f02 <_raise_r+0x1e>
 8010efc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010f00:	b94b      	cbnz	r3, 8010f16 <_raise_r+0x32>
 8010f02:	4620      	mov	r0, r4
 8010f04:	f000 f830 	bl	8010f68 <_getpid_r>
 8010f08:	462a      	mov	r2, r5
 8010f0a:	4601      	mov	r1, r0
 8010f0c:	4620      	mov	r0, r4
 8010f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010f12:	f000 b817 	b.w	8010f44 <_kill_r>
 8010f16:	2b01      	cmp	r3, #1
 8010f18:	d00a      	beq.n	8010f30 <_raise_r+0x4c>
 8010f1a:	1c59      	adds	r1, r3, #1
 8010f1c:	d103      	bne.n	8010f26 <_raise_r+0x42>
 8010f1e:	2316      	movs	r3, #22
 8010f20:	6003      	str	r3, [r0, #0]
 8010f22:	2001      	movs	r0, #1
 8010f24:	e7e7      	b.n	8010ef6 <_raise_r+0x12>
 8010f26:	2400      	movs	r4, #0
 8010f28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010f2c:	4628      	mov	r0, r5
 8010f2e:	4798      	blx	r3
 8010f30:	2000      	movs	r0, #0
 8010f32:	e7e0      	b.n	8010ef6 <_raise_r+0x12>

08010f34 <raise>:
 8010f34:	4b02      	ldr	r3, [pc, #8]	; (8010f40 <raise+0xc>)
 8010f36:	4601      	mov	r1, r0
 8010f38:	6818      	ldr	r0, [r3, #0]
 8010f3a:	f7ff bfd3 	b.w	8010ee4 <_raise_r>
 8010f3e:	bf00      	nop
 8010f40:	200001ec 	.word	0x200001ec

08010f44 <_kill_r>:
 8010f44:	b538      	push	{r3, r4, r5, lr}
 8010f46:	4d07      	ldr	r5, [pc, #28]	; (8010f64 <_kill_r+0x20>)
 8010f48:	2300      	movs	r3, #0
 8010f4a:	4604      	mov	r4, r0
 8010f4c:	4608      	mov	r0, r1
 8010f4e:	4611      	mov	r1, r2
 8010f50:	602b      	str	r3, [r5, #0]
 8010f52:	f7f1 fbef 	bl	8002734 <_kill>
 8010f56:	1c43      	adds	r3, r0, #1
 8010f58:	d102      	bne.n	8010f60 <_kill_r+0x1c>
 8010f5a:	682b      	ldr	r3, [r5, #0]
 8010f5c:	b103      	cbz	r3, 8010f60 <_kill_r+0x1c>
 8010f5e:	6023      	str	r3, [r4, #0]
 8010f60:	bd38      	pop	{r3, r4, r5, pc}
 8010f62:	bf00      	nop
 8010f64:	200042f8 	.word	0x200042f8

08010f68 <_getpid_r>:
 8010f68:	f7f1 bbdc 	b.w	8002724 <_getpid>

08010f6c <__swhatbuf_r>:
 8010f6c:	b570      	push	{r4, r5, r6, lr}
 8010f6e:	460c      	mov	r4, r1
 8010f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f74:	2900      	cmp	r1, #0
 8010f76:	b096      	sub	sp, #88	; 0x58
 8010f78:	4615      	mov	r5, r2
 8010f7a:	461e      	mov	r6, r3
 8010f7c:	da0d      	bge.n	8010f9a <__swhatbuf_r+0x2e>
 8010f7e:	89a3      	ldrh	r3, [r4, #12]
 8010f80:	f013 0f80 	tst.w	r3, #128	; 0x80
 8010f84:	f04f 0100 	mov.w	r1, #0
 8010f88:	bf0c      	ite	eq
 8010f8a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8010f8e:	2340      	movne	r3, #64	; 0x40
 8010f90:	2000      	movs	r0, #0
 8010f92:	6031      	str	r1, [r6, #0]
 8010f94:	602b      	str	r3, [r5, #0]
 8010f96:	b016      	add	sp, #88	; 0x58
 8010f98:	bd70      	pop	{r4, r5, r6, pc}
 8010f9a:	466a      	mov	r2, sp
 8010f9c:	f000 f848 	bl	8011030 <_fstat_r>
 8010fa0:	2800      	cmp	r0, #0
 8010fa2:	dbec      	blt.n	8010f7e <__swhatbuf_r+0x12>
 8010fa4:	9901      	ldr	r1, [sp, #4]
 8010fa6:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8010faa:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8010fae:	4259      	negs	r1, r3
 8010fb0:	4159      	adcs	r1, r3
 8010fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010fb6:	e7eb      	b.n	8010f90 <__swhatbuf_r+0x24>

08010fb8 <__smakebuf_r>:
 8010fb8:	898b      	ldrh	r3, [r1, #12]
 8010fba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010fbc:	079d      	lsls	r5, r3, #30
 8010fbe:	4606      	mov	r6, r0
 8010fc0:	460c      	mov	r4, r1
 8010fc2:	d507      	bpl.n	8010fd4 <__smakebuf_r+0x1c>
 8010fc4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010fc8:	6023      	str	r3, [r4, #0]
 8010fca:	6123      	str	r3, [r4, #16]
 8010fcc:	2301      	movs	r3, #1
 8010fce:	6163      	str	r3, [r4, #20]
 8010fd0:	b002      	add	sp, #8
 8010fd2:	bd70      	pop	{r4, r5, r6, pc}
 8010fd4:	ab01      	add	r3, sp, #4
 8010fd6:	466a      	mov	r2, sp
 8010fd8:	f7ff ffc8 	bl	8010f6c <__swhatbuf_r>
 8010fdc:	9900      	ldr	r1, [sp, #0]
 8010fde:	4605      	mov	r5, r0
 8010fe0:	4630      	mov	r0, r6
 8010fe2:	f7fe fecb 	bl	800fd7c <_malloc_r>
 8010fe6:	b948      	cbnz	r0, 8010ffc <__smakebuf_r+0x44>
 8010fe8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010fec:	059a      	lsls	r2, r3, #22
 8010fee:	d4ef      	bmi.n	8010fd0 <__smakebuf_r+0x18>
 8010ff0:	f023 0303 	bic.w	r3, r3, #3
 8010ff4:	f043 0302 	orr.w	r3, r3, #2
 8010ff8:	81a3      	strh	r3, [r4, #12]
 8010ffa:	e7e3      	b.n	8010fc4 <__smakebuf_r+0xc>
 8010ffc:	89a3      	ldrh	r3, [r4, #12]
 8010ffe:	6020      	str	r0, [r4, #0]
 8011000:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011004:	81a3      	strh	r3, [r4, #12]
 8011006:	9b00      	ldr	r3, [sp, #0]
 8011008:	6163      	str	r3, [r4, #20]
 801100a:	9b01      	ldr	r3, [sp, #4]
 801100c:	6120      	str	r0, [r4, #16]
 801100e:	b15b      	cbz	r3, 8011028 <__smakebuf_r+0x70>
 8011010:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011014:	4630      	mov	r0, r6
 8011016:	f000 f81d 	bl	8011054 <_isatty_r>
 801101a:	b128      	cbz	r0, 8011028 <__smakebuf_r+0x70>
 801101c:	89a3      	ldrh	r3, [r4, #12]
 801101e:	f023 0303 	bic.w	r3, r3, #3
 8011022:	f043 0301 	orr.w	r3, r3, #1
 8011026:	81a3      	strh	r3, [r4, #12]
 8011028:	89a3      	ldrh	r3, [r4, #12]
 801102a:	431d      	orrs	r5, r3
 801102c:	81a5      	strh	r5, [r4, #12]
 801102e:	e7cf      	b.n	8010fd0 <__smakebuf_r+0x18>

08011030 <_fstat_r>:
 8011030:	b538      	push	{r3, r4, r5, lr}
 8011032:	4d07      	ldr	r5, [pc, #28]	; (8011050 <_fstat_r+0x20>)
 8011034:	2300      	movs	r3, #0
 8011036:	4604      	mov	r4, r0
 8011038:	4608      	mov	r0, r1
 801103a:	4611      	mov	r1, r2
 801103c:	602b      	str	r3, [r5, #0]
 801103e:	f7f1 fbd8 	bl	80027f2 <_fstat>
 8011042:	1c43      	adds	r3, r0, #1
 8011044:	d102      	bne.n	801104c <_fstat_r+0x1c>
 8011046:	682b      	ldr	r3, [r5, #0]
 8011048:	b103      	cbz	r3, 801104c <_fstat_r+0x1c>
 801104a:	6023      	str	r3, [r4, #0]
 801104c:	bd38      	pop	{r3, r4, r5, pc}
 801104e:	bf00      	nop
 8011050:	200042f8 	.word	0x200042f8

08011054 <_isatty_r>:
 8011054:	b538      	push	{r3, r4, r5, lr}
 8011056:	4d06      	ldr	r5, [pc, #24]	; (8011070 <_isatty_r+0x1c>)
 8011058:	2300      	movs	r3, #0
 801105a:	4604      	mov	r4, r0
 801105c:	4608      	mov	r0, r1
 801105e:	602b      	str	r3, [r5, #0]
 8011060:	f7f1 fbd7 	bl	8002812 <_isatty>
 8011064:	1c43      	adds	r3, r0, #1
 8011066:	d102      	bne.n	801106e <_isatty_r+0x1a>
 8011068:	682b      	ldr	r3, [r5, #0]
 801106a:	b103      	cbz	r3, 801106e <_isatty_r+0x1a>
 801106c:	6023      	str	r3, [r4, #0]
 801106e:	bd38      	pop	{r3, r4, r5, pc}
 8011070:	200042f8 	.word	0x200042f8

08011074 <pow>:
 8011074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011076:	ed2d 8b02 	vpush	{d8}
 801107a:	eeb0 8a40 	vmov.f32	s16, s0
 801107e:	eef0 8a60 	vmov.f32	s17, s1
 8011082:	ec55 4b11 	vmov	r4, r5, d1
 8011086:	f000 f873 	bl	8011170 <__ieee754_pow>
 801108a:	4622      	mov	r2, r4
 801108c:	462b      	mov	r3, r5
 801108e:	4620      	mov	r0, r4
 8011090:	4629      	mov	r1, r5
 8011092:	ec57 6b10 	vmov	r6, r7, d0
 8011096:	f7ef fd81 	bl	8000b9c <__aeabi_dcmpun>
 801109a:	2800      	cmp	r0, #0
 801109c:	d13b      	bne.n	8011116 <pow+0xa2>
 801109e:	ec51 0b18 	vmov	r0, r1, d8
 80110a2:	2200      	movs	r2, #0
 80110a4:	2300      	movs	r3, #0
 80110a6:	f7ef fd47 	bl	8000b38 <__aeabi_dcmpeq>
 80110aa:	b1b8      	cbz	r0, 80110dc <pow+0x68>
 80110ac:	2200      	movs	r2, #0
 80110ae:	2300      	movs	r3, #0
 80110b0:	4620      	mov	r0, r4
 80110b2:	4629      	mov	r1, r5
 80110b4:	f7ef fd40 	bl	8000b38 <__aeabi_dcmpeq>
 80110b8:	2800      	cmp	r0, #0
 80110ba:	d146      	bne.n	801114a <pow+0xd6>
 80110bc:	ec45 4b10 	vmov	d0, r4, r5
 80110c0:	f000 f848 	bl	8011154 <finite>
 80110c4:	b338      	cbz	r0, 8011116 <pow+0xa2>
 80110c6:	2200      	movs	r2, #0
 80110c8:	2300      	movs	r3, #0
 80110ca:	4620      	mov	r0, r4
 80110cc:	4629      	mov	r1, r5
 80110ce:	f7ef fd3d 	bl	8000b4c <__aeabi_dcmplt>
 80110d2:	b300      	cbz	r0, 8011116 <pow+0xa2>
 80110d4:	f7fd ff26 	bl	800ef24 <__errno>
 80110d8:	2322      	movs	r3, #34	; 0x22
 80110da:	e01b      	b.n	8011114 <pow+0xa0>
 80110dc:	ec47 6b10 	vmov	d0, r6, r7
 80110e0:	f000 f838 	bl	8011154 <finite>
 80110e4:	b9e0      	cbnz	r0, 8011120 <pow+0xac>
 80110e6:	eeb0 0a48 	vmov.f32	s0, s16
 80110ea:	eef0 0a68 	vmov.f32	s1, s17
 80110ee:	f000 f831 	bl	8011154 <finite>
 80110f2:	b1a8      	cbz	r0, 8011120 <pow+0xac>
 80110f4:	ec45 4b10 	vmov	d0, r4, r5
 80110f8:	f000 f82c 	bl	8011154 <finite>
 80110fc:	b180      	cbz	r0, 8011120 <pow+0xac>
 80110fe:	4632      	mov	r2, r6
 8011100:	463b      	mov	r3, r7
 8011102:	4630      	mov	r0, r6
 8011104:	4639      	mov	r1, r7
 8011106:	f7ef fd49 	bl	8000b9c <__aeabi_dcmpun>
 801110a:	2800      	cmp	r0, #0
 801110c:	d0e2      	beq.n	80110d4 <pow+0x60>
 801110e:	f7fd ff09 	bl	800ef24 <__errno>
 8011112:	2321      	movs	r3, #33	; 0x21
 8011114:	6003      	str	r3, [r0, #0]
 8011116:	ecbd 8b02 	vpop	{d8}
 801111a:	ec47 6b10 	vmov	d0, r6, r7
 801111e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011120:	2200      	movs	r2, #0
 8011122:	2300      	movs	r3, #0
 8011124:	4630      	mov	r0, r6
 8011126:	4639      	mov	r1, r7
 8011128:	f7ef fd06 	bl	8000b38 <__aeabi_dcmpeq>
 801112c:	2800      	cmp	r0, #0
 801112e:	d0f2      	beq.n	8011116 <pow+0xa2>
 8011130:	eeb0 0a48 	vmov.f32	s0, s16
 8011134:	eef0 0a68 	vmov.f32	s1, s17
 8011138:	f000 f80c 	bl	8011154 <finite>
 801113c:	2800      	cmp	r0, #0
 801113e:	d0ea      	beq.n	8011116 <pow+0xa2>
 8011140:	ec45 4b10 	vmov	d0, r4, r5
 8011144:	f000 f806 	bl	8011154 <finite>
 8011148:	e7c3      	b.n	80110d2 <pow+0x5e>
 801114a:	4f01      	ldr	r7, [pc, #4]	; (8011150 <pow+0xdc>)
 801114c:	2600      	movs	r6, #0
 801114e:	e7e2      	b.n	8011116 <pow+0xa2>
 8011150:	3ff00000 	.word	0x3ff00000

08011154 <finite>:
 8011154:	b082      	sub	sp, #8
 8011156:	ed8d 0b00 	vstr	d0, [sp]
 801115a:	9801      	ldr	r0, [sp, #4]
 801115c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011160:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011164:	0fc0      	lsrs	r0, r0, #31
 8011166:	b002      	add	sp, #8
 8011168:	4770      	bx	lr
 801116a:	0000      	movs	r0, r0
 801116c:	0000      	movs	r0, r0
	...

08011170 <__ieee754_pow>:
 8011170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011174:	ed2d 8b06 	vpush	{d8-d10}
 8011178:	b089      	sub	sp, #36	; 0x24
 801117a:	ed8d 1b00 	vstr	d1, [sp]
 801117e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011182:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011186:	ea58 0102 	orrs.w	r1, r8, r2
 801118a:	ec57 6b10 	vmov	r6, r7, d0
 801118e:	d115      	bne.n	80111bc <__ieee754_pow+0x4c>
 8011190:	19b3      	adds	r3, r6, r6
 8011192:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8011196:	4152      	adcs	r2, r2
 8011198:	4299      	cmp	r1, r3
 801119a:	4b89      	ldr	r3, [pc, #548]	; (80113c0 <__ieee754_pow+0x250>)
 801119c:	4193      	sbcs	r3, r2
 801119e:	f080 84d1 	bcs.w	8011b44 <__ieee754_pow+0x9d4>
 80111a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80111a6:	4630      	mov	r0, r6
 80111a8:	4639      	mov	r1, r7
 80111aa:	f7ef f8a7 	bl	80002fc <__adddf3>
 80111ae:	ec41 0b10 	vmov	d0, r0, r1
 80111b2:	b009      	add	sp, #36	; 0x24
 80111b4:	ecbd 8b06 	vpop	{d8-d10}
 80111b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80111bc:	4b81      	ldr	r3, [pc, #516]	; (80113c4 <__ieee754_pow+0x254>)
 80111be:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80111c2:	429c      	cmp	r4, r3
 80111c4:	ee10 aa10 	vmov	sl, s0
 80111c8:	463d      	mov	r5, r7
 80111ca:	dc06      	bgt.n	80111da <__ieee754_pow+0x6a>
 80111cc:	d101      	bne.n	80111d2 <__ieee754_pow+0x62>
 80111ce:	2e00      	cmp	r6, #0
 80111d0:	d1e7      	bne.n	80111a2 <__ieee754_pow+0x32>
 80111d2:	4598      	cmp	r8, r3
 80111d4:	dc01      	bgt.n	80111da <__ieee754_pow+0x6a>
 80111d6:	d10f      	bne.n	80111f8 <__ieee754_pow+0x88>
 80111d8:	b172      	cbz	r2, 80111f8 <__ieee754_pow+0x88>
 80111da:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80111de:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80111e2:	ea55 050a 	orrs.w	r5, r5, sl
 80111e6:	d1dc      	bne.n	80111a2 <__ieee754_pow+0x32>
 80111e8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80111ec:	18db      	adds	r3, r3, r3
 80111ee:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80111f2:	4152      	adcs	r2, r2
 80111f4:	429d      	cmp	r5, r3
 80111f6:	e7d0      	b.n	801119a <__ieee754_pow+0x2a>
 80111f8:	2d00      	cmp	r5, #0
 80111fa:	da3b      	bge.n	8011274 <__ieee754_pow+0x104>
 80111fc:	4b72      	ldr	r3, [pc, #456]	; (80113c8 <__ieee754_pow+0x258>)
 80111fe:	4598      	cmp	r8, r3
 8011200:	dc51      	bgt.n	80112a6 <__ieee754_pow+0x136>
 8011202:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8011206:	4598      	cmp	r8, r3
 8011208:	f340 84ab 	ble.w	8011b62 <__ieee754_pow+0x9f2>
 801120c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011210:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011214:	2b14      	cmp	r3, #20
 8011216:	dd0f      	ble.n	8011238 <__ieee754_pow+0xc8>
 8011218:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801121c:	fa22 f103 	lsr.w	r1, r2, r3
 8011220:	fa01 f303 	lsl.w	r3, r1, r3
 8011224:	4293      	cmp	r3, r2
 8011226:	f040 849c 	bne.w	8011b62 <__ieee754_pow+0x9f2>
 801122a:	f001 0101 	and.w	r1, r1, #1
 801122e:	f1c1 0302 	rsb	r3, r1, #2
 8011232:	9304      	str	r3, [sp, #16]
 8011234:	b182      	cbz	r2, 8011258 <__ieee754_pow+0xe8>
 8011236:	e05f      	b.n	80112f8 <__ieee754_pow+0x188>
 8011238:	2a00      	cmp	r2, #0
 801123a:	d15b      	bne.n	80112f4 <__ieee754_pow+0x184>
 801123c:	f1c3 0314 	rsb	r3, r3, #20
 8011240:	fa48 f103 	asr.w	r1, r8, r3
 8011244:	fa01 f303 	lsl.w	r3, r1, r3
 8011248:	4543      	cmp	r3, r8
 801124a:	f040 8487 	bne.w	8011b5c <__ieee754_pow+0x9ec>
 801124e:	f001 0101 	and.w	r1, r1, #1
 8011252:	f1c1 0302 	rsb	r3, r1, #2
 8011256:	9304      	str	r3, [sp, #16]
 8011258:	4b5c      	ldr	r3, [pc, #368]	; (80113cc <__ieee754_pow+0x25c>)
 801125a:	4598      	cmp	r8, r3
 801125c:	d132      	bne.n	80112c4 <__ieee754_pow+0x154>
 801125e:	f1b9 0f00 	cmp.w	r9, #0
 8011262:	f280 8477 	bge.w	8011b54 <__ieee754_pow+0x9e4>
 8011266:	4959      	ldr	r1, [pc, #356]	; (80113cc <__ieee754_pow+0x25c>)
 8011268:	4632      	mov	r2, r6
 801126a:	463b      	mov	r3, r7
 801126c:	2000      	movs	r0, #0
 801126e:	f7ef fb25 	bl	80008bc <__aeabi_ddiv>
 8011272:	e79c      	b.n	80111ae <__ieee754_pow+0x3e>
 8011274:	2300      	movs	r3, #0
 8011276:	9304      	str	r3, [sp, #16]
 8011278:	2a00      	cmp	r2, #0
 801127a:	d13d      	bne.n	80112f8 <__ieee754_pow+0x188>
 801127c:	4b51      	ldr	r3, [pc, #324]	; (80113c4 <__ieee754_pow+0x254>)
 801127e:	4598      	cmp	r8, r3
 8011280:	d1ea      	bne.n	8011258 <__ieee754_pow+0xe8>
 8011282:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011286:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801128a:	ea53 030a 	orrs.w	r3, r3, sl
 801128e:	f000 8459 	beq.w	8011b44 <__ieee754_pow+0x9d4>
 8011292:	4b4f      	ldr	r3, [pc, #316]	; (80113d0 <__ieee754_pow+0x260>)
 8011294:	429c      	cmp	r4, r3
 8011296:	dd08      	ble.n	80112aa <__ieee754_pow+0x13a>
 8011298:	f1b9 0f00 	cmp.w	r9, #0
 801129c:	f2c0 8456 	blt.w	8011b4c <__ieee754_pow+0x9dc>
 80112a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80112a4:	e783      	b.n	80111ae <__ieee754_pow+0x3e>
 80112a6:	2302      	movs	r3, #2
 80112a8:	e7e5      	b.n	8011276 <__ieee754_pow+0x106>
 80112aa:	f1b9 0f00 	cmp.w	r9, #0
 80112ae:	f04f 0000 	mov.w	r0, #0
 80112b2:	f04f 0100 	mov.w	r1, #0
 80112b6:	f6bf af7a 	bge.w	80111ae <__ieee754_pow+0x3e>
 80112ba:	e9dd 0300 	ldrd	r0, r3, [sp]
 80112be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80112c2:	e774      	b.n	80111ae <__ieee754_pow+0x3e>
 80112c4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80112c8:	d106      	bne.n	80112d8 <__ieee754_pow+0x168>
 80112ca:	4632      	mov	r2, r6
 80112cc:	463b      	mov	r3, r7
 80112ce:	4630      	mov	r0, r6
 80112d0:	4639      	mov	r1, r7
 80112d2:	f7ef f9c9 	bl	8000668 <__aeabi_dmul>
 80112d6:	e76a      	b.n	80111ae <__ieee754_pow+0x3e>
 80112d8:	4b3e      	ldr	r3, [pc, #248]	; (80113d4 <__ieee754_pow+0x264>)
 80112da:	4599      	cmp	r9, r3
 80112dc:	d10c      	bne.n	80112f8 <__ieee754_pow+0x188>
 80112de:	2d00      	cmp	r5, #0
 80112e0:	db0a      	blt.n	80112f8 <__ieee754_pow+0x188>
 80112e2:	ec47 6b10 	vmov	d0, r6, r7
 80112e6:	b009      	add	sp, #36	; 0x24
 80112e8:	ecbd 8b06 	vpop	{d8-d10}
 80112ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112f0:	f000 bd20 	b.w	8011d34 <__ieee754_sqrt>
 80112f4:	2300      	movs	r3, #0
 80112f6:	9304      	str	r3, [sp, #16]
 80112f8:	ec47 6b10 	vmov	d0, r6, r7
 80112fc:	f000 fc62 	bl	8011bc4 <fabs>
 8011300:	ec51 0b10 	vmov	r0, r1, d0
 8011304:	f1ba 0f00 	cmp.w	sl, #0
 8011308:	d129      	bne.n	801135e <__ieee754_pow+0x1ee>
 801130a:	b124      	cbz	r4, 8011316 <__ieee754_pow+0x1a6>
 801130c:	4b2f      	ldr	r3, [pc, #188]	; (80113cc <__ieee754_pow+0x25c>)
 801130e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8011312:	429a      	cmp	r2, r3
 8011314:	d123      	bne.n	801135e <__ieee754_pow+0x1ee>
 8011316:	f1b9 0f00 	cmp.w	r9, #0
 801131a:	da05      	bge.n	8011328 <__ieee754_pow+0x1b8>
 801131c:	4602      	mov	r2, r0
 801131e:	460b      	mov	r3, r1
 8011320:	2000      	movs	r0, #0
 8011322:	492a      	ldr	r1, [pc, #168]	; (80113cc <__ieee754_pow+0x25c>)
 8011324:	f7ef faca 	bl	80008bc <__aeabi_ddiv>
 8011328:	2d00      	cmp	r5, #0
 801132a:	f6bf af40 	bge.w	80111ae <__ieee754_pow+0x3e>
 801132e:	9b04      	ldr	r3, [sp, #16]
 8011330:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011334:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011338:	431c      	orrs	r4, r3
 801133a:	d108      	bne.n	801134e <__ieee754_pow+0x1de>
 801133c:	4602      	mov	r2, r0
 801133e:	460b      	mov	r3, r1
 8011340:	4610      	mov	r0, r2
 8011342:	4619      	mov	r1, r3
 8011344:	f7ee ffd8 	bl	80002f8 <__aeabi_dsub>
 8011348:	4602      	mov	r2, r0
 801134a:	460b      	mov	r3, r1
 801134c:	e78f      	b.n	801126e <__ieee754_pow+0xfe>
 801134e:	9b04      	ldr	r3, [sp, #16]
 8011350:	2b01      	cmp	r3, #1
 8011352:	f47f af2c 	bne.w	80111ae <__ieee754_pow+0x3e>
 8011356:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801135a:	4619      	mov	r1, r3
 801135c:	e727      	b.n	80111ae <__ieee754_pow+0x3e>
 801135e:	0feb      	lsrs	r3, r5, #31
 8011360:	3b01      	subs	r3, #1
 8011362:	9306      	str	r3, [sp, #24]
 8011364:	9a06      	ldr	r2, [sp, #24]
 8011366:	9b04      	ldr	r3, [sp, #16]
 8011368:	4313      	orrs	r3, r2
 801136a:	d102      	bne.n	8011372 <__ieee754_pow+0x202>
 801136c:	4632      	mov	r2, r6
 801136e:	463b      	mov	r3, r7
 8011370:	e7e6      	b.n	8011340 <__ieee754_pow+0x1d0>
 8011372:	4b19      	ldr	r3, [pc, #100]	; (80113d8 <__ieee754_pow+0x268>)
 8011374:	4598      	cmp	r8, r3
 8011376:	f340 80fb 	ble.w	8011570 <__ieee754_pow+0x400>
 801137a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801137e:	4598      	cmp	r8, r3
 8011380:	4b13      	ldr	r3, [pc, #76]	; (80113d0 <__ieee754_pow+0x260>)
 8011382:	dd0c      	ble.n	801139e <__ieee754_pow+0x22e>
 8011384:	429c      	cmp	r4, r3
 8011386:	dc0f      	bgt.n	80113a8 <__ieee754_pow+0x238>
 8011388:	f1b9 0f00 	cmp.w	r9, #0
 801138c:	da0f      	bge.n	80113ae <__ieee754_pow+0x23e>
 801138e:	2000      	movs	r0, #0
 8011390:	b009      	add	sp, #36	; 0x24
 8011392:	ecbd 8b06 	vpop	{d8-d10}
 8011396:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801139a:	f000 bcc2 	b.w	8011d22 <__math_oflow>
 801139e:	429c      	cmp	r4, r3
 80113a0:	dbf2      	blt.n	8011388 <__ieee754_pow+0x218>
 80113a2:	4b0a      	ldr	r3, [pc, #40]	; (80113cc <__ieee754_pow+0x25c>)
 80113a4:	429c      	cmp	r4, r3
 80113a6:	dd19      	ble.n	80113dc <__ieee754_pow+0x26c>
 80113a8:	f1b9 0f00 	cmp.w	r9, #0
 80113ac:	dcef      	bgt.n	801138e <__ieee754_pow+0x21e>
 80113ae:	2000      	movs	r0, #0
 80113b0:	b009      	add	sp, #36	; 0x24
 80113b2:	ecbd 8b06 	vpop	{d8-d10}
 80113b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113ba:	f000 bca9 	b.w	8011d10 <__math_uflow>
 80113be:	bf00      	nop
 80113c0:	fff00000 	.word	0xfff00000
 80113c4:	7ff00000 	.word	0x7ff00000
 80113c8:	433fffff 	.word	0x433fffff
 80113cc:	3ff00000 	.word	0x3ff00000
 80113d0:	3fefffff 	.word	0x3fefffff
 80113d4:	3fe00000 	.word	0x3fe00000
 80113d8:	41e00000 	.word	0x41e00000
 80113dc:	4b60      	ldr	r3, [pc, #384]	; (8011560 <__ieee754_pow+0x3f0>)
 80113de:	2200      	movs	r2, #0
 80113e0:	f7ee ff8a 	bl	80002f8 <__aeabi_dsub>
 80113e4:	a354      	add	r3, pc, #336	; (adr r3, 8011538 <__ieee754_pow+0x3c8>)
 80113e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ea:	4604      	mov	r4, r0
 80113ec:	460d      	mov	r5, r1
 80113ee:	f7ef f93b 	bl	8000668 <__aeabi_dmul>
 80113f2:	a353      	add	r3, pc, #332	; (adr r3, 8011540 <__ieee754_pow+0x3d0>)
 80113f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113f8:	4606      	mov	r6, r0
 80113fa:	460f      	mov	r7, r1
 80113fc:	4620      	mov	r0, r4
 80113fe:	4629      	mov	r1, r5
 8011400:	f7ef f932 	bl	8000668 <__aeabi_dmul>
 8011404:	4b57      	ldr	r3, [pc, #348]	; (8011564 <__ieee754_pow+0x3f4>)
 8011406:	4682      	mov	sl, r0
 8011408:	468b      	mov	fp, r1
 801140a:	2200      	movs	r2, #0
 801140c:	4620      	mov	r0, r4
 801140e:	4629      	mov	r1, r5
 8011410:	f7ef f92a 	bl	8000668 <__aeabi_dmul>
 8011414:	4602      	mov	r2, r0
 8011416:	460b      	mov	r3, r1
 8011418:	a14b      	add	r1, pc, #300	; (adr r1, 8011548 <__ieee754_pow+0x3d8>)
 801141a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801141e:	f7ee ff6b 	bl	80002f8 <__aeabi_dsub>
 8011422:	4622      	mov	r2, r4
 8011424:	462b      	mov	r3, r5
 8011426:	f7ef f91f 	bl	8000668 <__aeabi_dmul>
 801142a:	4602      	mov	r2, r0
 801142c:	460b      	mov	r3, r1
 801142e:	2000      	movs	r0, #0
 8011430:	494d      	ldr	r1, [pc, #308]	; (8011568 <__ieee754_pow+0x3f8>)
 8011432:	f7ee ff61 	bl	80002f8 <__aeabi_dsub>
 8011436:	4622      	mov	r2, r4
 8011438:	4680      	mov	r8, r0
 801143a:	4689      	mov	r9, r1
 801143c:	462b      	mov	r3, r5
 801143e:	4620      	mov	r0, r4
 8011440:	4629      	mov	r1, r5
 8011442:	f7ef f911 	bl	8000668 <__aeabi_dmul>
 8011446:	4602      	mov	r2, r0
 8011448:	460b      	mov	r3, r1
 801144a:	4640      	mov	r0, r8
 801144c:	4649      	mov	r1, r9
 801144e:	f7ef f90b 	bl	8000668 <__aeabi_dmul>
 8011452:	a33f      	add	r3, pc, #252	; (adr r3, 8011550 <__ieee754_pow+0x3e0>)
 8011454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011458:	f7ef f906 	bl	8000668 <__aeabi_dmul>
 801145c:	4602      	mov	r2, r0
 801145e:	460b      	mov	r3, r1
 8011460:	4650      	mov	r0, sl
 8011462:	4659      	mov	r1, fp
 8011464:	f7ee ff48 	bl	80002f8 <__aeabi_dsub>
 8011468:	4602      	mov	r2, r0
 801146a:	460b      	mov	r3, r1
 801146c:	4680      	mov	r8, r0
 801146e:	4689      	mov	r9, r1
 8011470:	4630      	mov	r0, r6
 8011472:	4639      	mov	r1, r7
 8011474:	f7ee ff42 	bl	80002fc <__adddf3>
 8011478:	2000      	movs	r0, #0
 801147a:	4632      	mov	r2, r6
 801147c:	463b      	mov	r3, r7
 801147e:	4604      	mov	r4, r0
 8011480:	460d      	mov	r5, r1
 8011482:	f7ee ff39 	bl	80002f8 <__aeabi_dsub>
 8011486:	4602      	mov	r2, r0
 8011488:	460b      	mov	r3, r1
 801148a:	4640      	mov	r0, r8
 801148c:	4649      	mov	r1, r9
 801148e:	f7ee ff33 	bl	80002f8 <__aeabi_dsub>
 8011492:	9b04      	ldr	r3, [sp, #16]
 8011494:	9a06      	ldr	r2, [sp, #24]
 8011496:	3b01      	subs	r3, #1
 8011498:	4313      	orrs	r3, r2
 801149a:	4682      	mov	sl, r0
 801149c:	468b      	mov	fp, r1
 801149e:	f040 81e7 	bne.w	8011870 <__ieee754_pow+0x700>
 80114a2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011558 <__ieee754_pow+0x3e8>
 80114a6:	eeb0 8a47 	vmov.f32	s16, s14
 80114aa:	eef0 8a67 	vmov.f32	s17, s15
 80114ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80114b2:	2600      	movs	r6, #0
 80114b4:	4632      	mov	r2, r6
 80114b6:	463b      	mov	r3, r7
 80114b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80114bc:	f7ee ff1c 	bl	80002f8 <__aeabi_dsub>
 80114c0:	4622      	mov	r2, r4
 80114c2:	462b      	mov	r3, r5
 80114c4:	f7ef f8d0 	bl	8000668 <__aeabi_dmul>
 80114c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80114cc:	4680      	mov	r8, r0
 80114ce:	4689      	mov	r9, r1
 80114d0:	4650      	mov	r0, sl
 80114d2:	4659      	mov	r1, fp
 80114d4:	f7ef f8c8 	bl	8000668 <__aeabi_dmul>
 80114d8:	4602      	mov	r2, r0
 80114da:	460b      	mov	r3, r1
 80114dc:	4640      	mov	r0, r8
 80114de:	4649      	mov	r1, r9
 80114e0:	f7ee ff0c 	bl	80002fc <__adddf3>
 80114e4:	4632      	mov	r2, r6
 80114e6:	463b      	mov	r3, r7
 80114e8:	4680      	mov	r8, r0
 80114ea:	4689      	mov	r9, r1
 80114ec:	4620      	mov	r0, r4
 80114ee:	4629      	mov	r1, r5
 80114f0:	f7ef f8ba 	bl	8000668 <__aeabi_dmul>
 80114f4:	460b      	mov	r3, r1
 80114f6:	4604      	mov	r4, r0
 80114f8:	460d      	mov	r5, r1
 80114fa:	4602      	mov	r2, r0
 80114fc:	4649      	mov	r1, r9
 80114fe:	4640      	mov	r0, r8
 8011500:	f7ee fefc 	bl	80002fc <__adddf3>
 8011504:	4b19      	ldr	r3, [pc, #100]	; (801156c <__ieee754_pow+0x3fc>)
 8011506:	4299      	cmp	r1, r3
 8011508:	ec45 4b19 	vmov	d9, r4, r5
 801150c:	4606      	mov	r6, r0
 801150e:	460f      	mov	r7, r1
 8011510:	468b      	mov	fp, r1
 8011512:	f340 82f0 	ble.w	8011af6 <__ieee754_pow+0x986>
 8011516:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801151a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801151e:	4303      	orrs	r3, r0
 8011520:	f000 81e4 	beq.w	80118ec <__ieee754_pow+0x77c>
 8011524:	ec51 0b18 	vmov	r0, r1, d8
 8011528:	2200      	movs	r2, #0
 801152a:	2300      	movs	r3, #0
 801152c:	f7ef fb0e 	bl	8000b4c <__aeabi_dcmplt>
 8011530:	3800      	subs	r0, #0
 8011532:	bf18      	it	ne
 8011534:	2001      	movne	r0, #1
 8011536:	e72b      	b.n	8011390 <__ieee754_pow+0x220>
 8011538:	60000000 	.word	0x60000000
 801153c:	3ff71547 	.word	0x3ff71547
 8011540:	f85ddf44 	.word	0xf85ddf44
 8011544:	3e54ae0b 	.word	0x3e54ae0b
 8011548:	55555555 	.word	0x55555555
 801154c:	3fd55555 	.word	0x3fd55555
 8011550:	652b82fe 	.word	0x652b82fe
 8011554:	3ff71547 	.word	0x3ff71547
 8011558:	00000000 	.word	0x00000000
 801155c:	bff00000 	.word	0xbff00000
 8011560:	3ff00000 	.word	0x3ff00000
 8011564:	3fd00000 	.word	0x3fd00000
 8011568:	3fe00000 	.word	0x3fe00000
 801156c:	408fffff 	.word	0x408fffff
 8011570:	4bd5      	ldr	r3, [pc, #852]	; (80118c8 <__ieee754_pow+0x758>)
 8011572:	402b      	ands	r3, r5
 8011574:	2200      	movs	r2, #0
 8011576:	b92b      	cbnz	r3, 8011584 <__ieee754_pow+0x414>
 8011578:	4bd4      	ldr	r3, [pc, #848]	; (80118cc <__ieee754_pow+0x75c>)
 801157a:	f7ef f875 	bl	8000668 <__aeabi_dmul>
 801157e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011582:	460c      	mov	r4, r1
 8011584:	1523      	asrs	r3, r4, #20
 8011586:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801158a:	4413      	add	r3, r2
 801158c:	9305      	str	r3, [sp, #20]
 801158e:	4bd0      	ldr	r3, [pc, #832]	; (80118d0 <__ieee754_pow+0x760>)
 8011590:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011594:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011598:	429c      	cmp	r4, r3
 801159a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801159e:	dd08      	ble.n	80115b2 <__ieee754_pow+0x442>
 80115a0:	4bcc      	ldr	r3, [pc, #816]	; (80118d4 <__ieee754_pow+0x764>)
 80115a2:	429c      	cmp	r4, r3
 80115a4:	f340 8162 	ble.w	801186c <__ieee754_pow+0x6fc>
 80115a8:	9b05      	ldr	r3, [sp, #20]
 80115aa:	3301      	adds	r3, #1
 80115ac:	9305      	str	r3, [sp, #20]
 80115ae:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80115b2:	2400      	movs	r4, #0
 80115b4:	00e3      	lsls	r3, r4, #3
 80115b6:	9307      	str	r3, [sp, #28]
 80115b8:	4bc7      	ldr	r3, [pc, #796]	; (80118d8 <__ieee754_pow+0x768>)
 80115ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80115be:	ed93 7b00 	vldr	d7, [r3]
 80115c2:	4629      	mov	r1, r5
 80115c4:	ec53 2b17 	vmov	r2, r3, d7
 80115c8:	eeb0 9a47 	vmov.f32	s18, s14
 80115cc:	eef0 9a67 	vmov.f32	s19, s15
 80115d0:	4682      	mov	sl, r0
 80115d2:	f7ee fe91 	bl	80002f8 <__aeabi_dsub>
 80115d6:	4652      	mov	r2, sl
 80115d8:	4606      	mov	r6, r0
 80115da:	460f      	mov	r7, r1
 80115dc:	462b      	mov	r3, r5
 80115de:	ec51 0b19 	vmov	r0, r1, d9
 80115e2:	f7ee fe8b 	bl	80002fc <__adddf3>
 80115e6:	4602      	mov	r2, r0
 80115e8:	460b      	mov	r3, r1
 80115ea:	2000      	movs	r0, #0
 80115ec:	49bb      	ldr	r1, [pc, #748]	; (80118dc <__ieee754_pow+0x76c>)
 80115ee:	f7ef f965 	bl	80008bc <__aeabi_ddiv>
 80115f2:	ec41 0b1a 	vmov	d10, r0, r1
 80115f6:	4602      	mov	r2, r0
 80115f8:	460b      	mov	r3, r1
 80115fa:	4630      	mov	r0, r6
 80115fc:	4639      	mov	r1, r7
 80115fe:	f7ef f833 	bl	8000668 <__aeabi_dmul>
 8011602:	2300      	movs	r3, #0
 8011604:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011608:	9302      	str	r3, [sp, #8]
 801160a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801160e:	46ab      	mov	fp, r5
 8011610:	106d      	asrs	r5, r5, #1
 8011612:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011616:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801161a:	ec41 0b18 	vmov	d8, r0, r1
 801161e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011622:	2200      	movs	r2, #0
 8011624:	4640      	mov	r0, r8
 8011626:	4649      	mov	r1, r9
 8011628:	4614      	mov	r4, r2
 801162a:	461d      	mov	r5, r3
 801162c:	f7ef f81c 	bl	8000668 <__aeabi_dmul>
 8011630:	4602      	mov	r2, r0
 8011632:	460b      	mov	r3, r1
 8011634:	4630      	mov	r0, r6
 8011636:	4639      	mov	r1, r7
 8011638:	f7ee fe5e 	bl	80002f8 <__aeabi_dsub>
 801163c:	ec53 2b19 	vmov	r2, r3, d9
 8011640:	4606      	mov	r6, r0
 8011642:	460f      	mov	r7, r1
 8011644:	4620      	mov	r0, r4
 8011646:	4629      	mov	r1, r5
 8011648:	f7ee fe56 	bl	80002f8 <__aeabi_dsub>
 801164c:	4602      	mov	r2, r0
 801164e:	460b      	mov	r3, r1
 8011650:	4650      	mov	r0, sl
 8011652:	4659      	mov	r1, fp
 8011654:	f7ee fe50 	bl	80002f8 <__aeabi_dsub>
 8011658:	4642      	mov	r2, r8
 801165a:	464b      	mov	r3, r9
 801165c:	f7ef f804 	bl	8000668 <__aeabi_dmul>
 8011660:	4602      	mov	r2, r0
 8011662:	460b      	mov	r3, r1
 8011664:	4630      	mov	r0, r6
 8011666:	4639      	mov	r1, r7
 8011668:	f7ee fe46 	bl	80002f8 <__aeabi_dsub>
 801166c:	ec53 2b1a 	vmov	r2, r3, d10
 8011670:	f7ee fffa 	bl	8000668 <__aeabi_dmul>
 8011674:	ec53 2b18 	vmov	r2, r3, d8
 8011678:	ec41 0b19 	vmov	d9, r0, r1
 801167c:	ec51 0b18 	vmov	r0, r1, d8
 8011680:	f7ee fff2 	bl	8000668 <__aeabi_dmul>
 8011684:	a37c      	add	r3, pc, #496	; (adr r3, 8011878 <__ieee754_pow+0x708>)
 8011686:	e9d3 2300 	ldrd	r2, r3, [r3]
 801168a:	4604      	mov	r4, r0
 801168c:	460d      	mov	r5, r1
 801168e:	f7ee ffeb 	bl	8000668 <__aeabi_dmul>
 8011692:	a37b      	add	r3, pc, #492	; (adr r3, 8011880 <__ieee754_pow+0x710>)
 8011694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011698:	f7ee fe30 	bl	80002fc <__adddf3>
 801169c:	4622      	mov	r2, r4
 801169e:	462b      	mov	r3, r5
 80116a0:	f7ee ffe2 	bl	8000668 <__aeabi_dmul>
 80116a4:	a378      	add	r3, pc, #480	; (adr r3, 8011888 <__ieee754_pow+0x718>)
 80116a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116aa:	f7ee fe27 	bl	80002fc <__adddf3>
 80116ae:	4622      	mov	r2, r4
 80116b0:	462b      	mov	r3, r5
 80116b2:	f7ee ffd9 	bl	8000668 <__aeabi_dmul>
 80116b6:	a376      	add	r3, pc, #472	; (adr r3, 8011890 <__ieee754_pow+0x720>)
 80116b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116bc:	f7ee fe1e 	bl	80002fc <__adddf3>
 80116c0:	4622      	mov	r2, r4
 80116c2:	462b      	mov	r3, r5
 80116c4:	f7ee ffd0 	bl	8000668 <__aeabi_dmul>
 80116c8:	a373      	add	r3, pc, #460	; (adr r3, 8011898 <__ieee754_pow+0x728>)
 80116ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ce:	f7ee fe15 	bl	80002fc <__adddf3>
 80116d2:	4622      	mov	r2, r4
 80116d4:	462b      	mov	r3, r5
 80116d6:	f7ee ffc7 	bl	8000668 <__aeabi_dmul>
 80116da:	a371      	add	r3, pc, #452	; (adr r3, 80118a0 <__ieee754_pow+0x730>)
 80116dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e0:	f7ee fe0c 	bl	80002fc <__adddf3>
 80116e4:	4622      	mov	r2, r4
 80116e6:	4606      	mov	r6, r0
 80116e8:	460f      	mov	r7, r1
 80116ea:	462b      	mov	r3, r5
 80116ec:	4620      	mov	r0, r4
 80116ee:	4629      	mov	r1, r5
 80116f0:	f7ee ffba 	bl	8000668 <__aeabi_dmul>
 80116f4:	4602      	mov	r2, r0
 80116f6:	460b      	mov	r3, r1
 80116f8:	4630      	mov	r0, r6
 80116fa:	4639      	mov	r1, r7
 80116fc:	f7ee ffb4 	bl	8000668 <__aeabi_dmul>
 8011700:	4642      	mov	r2, r8
 8011702:	4604      	mov	r4, r0
 8011704:	460d      	mov	r5, r1
 8011706:	464b      	mov	r3, r9
 8011708:	ec51 0b18 	vmov	r0, r1, d8
 801170c:	f7ee fdf6 	bl	80002fc <__adddf3>
 8011710:	ec53 2b19 	vmov	r2, r3, d9
 8011714:	f7ee ffa8 	bl	8000668 <__aeabi_dmul>
 8011718:	4622      	mov	r2, r4
 801171a:	462b      	mov	r3, r5
 801171c:	f7ee fdee 	bl	80002fc <__adddf3>
 8011720:	4642      	mov	r2, r8
 8011722:	4682      	mov	sl, r0
 8011724:	468b      	mov	fp, r1
 8011726:	464b      	mov	r3, r9
 8011728:	4640      	mov	r0, r8
 801172a:	4649      	mov	r1, r9
 801172c:	f7ee ff9c 	bl	8000668 <__aeabi_dmul>
 8011730:	4b6b      	ldr	r3, [pc, #428]	; (80118e0 <__ieee754_pow+0x770>)
 8011732:	2200      	movs	r2, #0
 8011734:	4606      	mov	r6, r0
 8011736:	460f      	mov	r7, r1
 8011738:	f7ee fde0 	bl	80002fc <__adddf3>
 801173c:	4652      	mov	r2, sl
 801173e:	465b      	mov	r3, fp
 8011740:	f7ee fddc 	bl	80002fc <__adddf3>
 8011744:	2000      	movs	r0, #0
 8011746:	4604      	mov	r4, r0
 8011748:	460d      	mov	r5, r1
 801174a:	4602      	mov	r2, r0
 801174c:	460b      	mov	r3, r1
 801174e:	4640      	mov	r0, r8
 8011750:	4649      	mov	r1, r9
 8011752:	f7ee ff89 	bl	8000668 <__aeabi_dmul>
 8011756:	4b62      	ldr	r3, [pc, #392]	; (80118e0 <__ieee754_pow+0x770>)
 8011758:	4680      	mov	r8, r0
 801175a:	4689      	mov	r9, r1
 801175c:	2200      	movs	r2, #0
 801175e:	4620      	mov	r0, r4
 8011760:	4629      	mov	r1, r5
 8011762:	f7ee fdc9 	bl	80002f8 <__aeabi_dsub>
 8011766:	4632      	mov	r2, r6
 8011768:	463b      	mov	r3, r7
 801176a:	f7ee fdc5 	bl	80002f8 <__aeabi_dsub>
 801176e:	4602      	mov	r2, r0
 8011770:	460b      	mov	r3, r1
 8011772:	4650      	mov	r0, sl
 8011774:	4659      	mov	r1, fp
 8011776:	f7ee fdbf 	bl	80002f8 <__aeabi_dsub>
 801177a:	ec53 2b18 	vmov	r2, r3, d8
 801177e:	f7ee ff73 	bl	8000668 <__aeabi_dmul>
 8011782:	4622      	mov	r2, r4
 8011784:	4606      	mov	r6, r0
 8011786:	460f      	mov	r7, r1
 8011788:	462b      	mov	r3, r5
 801178a:	ec51 0b19 	vmov	r0, r1, d9
 801178e:	f7ee ff6b 	bl	8000668 <__aeabi_dmul>
 8011792:	4602      	mov	r2, r0
 8011794:	460b      	mov	r3, r1
 8011796:	4630      	mov	r0, r6
 8011798:	4639      	mov	r1, r7
 801179a:	f7ee fdaf 	bl	80002fc <__adddf3>
 801179e:	4606      	mov	r6, r0
 80117a0:	460f      	mov	r7, r1
 80117a2:	4602      	mov	r2, r0
 80117a4:	460b      	mov	r3, r1
 80117a6:	4640      	mov	r0, r8
 80117a8:	4649      	mov	r1, r9
 80117aa:	f7ee fda7 	bl	80002fc <__adddf3>
 80117ae:	a33e      	add	r3, pc, #248	; (adr r3, 80118a8 <__ieee754_pow+0x738>)
 80117b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117b4:	2000      	movs	r0, #0
 80117b6:	4604      	mov	r4, r0
 80117b8:	460d      	mov	r5, r1
 80117ba:	f7ee ff55 	bl	8000668 <__aeabi_dmul>
 80117be:	4642      	mov	r2, r8
 80117c0:	ec41 0b18 	vmov	d8, r0, r1
 80117c4:	464b      	mov	r3, r9
 80117c6:	4620      	mov	r0, r4
 80117c8:	4629      	mov	r1, r5
 80117ca:	f7ee fd95 	bl	80002f8 <__aeabi_dsub>
 80117ce:	4602      	mov	r2, r0
 80117d0:	460b      	mov	r3, r1
 80117d2:	4630      	mov	r0, r6
 80117d4:	4639      	mov	r1, r7
 80117d6:	f7ee fd8f 	bl	80002f8 <__aeabi_dsub>
 80117da:	a335      	add	r3, pc, #212	; (adr r3, 80118b0 <__ieee754_pow+0x740>)
 80117dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117e0:	f7ee ff42 	bl	8000668 <__aeabi_dmul>
 80117e4:	a334      	add	r3, pc, #208	; (adr r3, 80118b8 <__ieee754_pow+0x748>)
 80117e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ea:	4606      	mov	r6, r0
 80117ec:	460f      	mov	r7, r1
 80117ee:	4620      	mov	r0, r4
 80117f0:	4629      	mov	r1, r5
 80117f2:	f7ee ff39 	bl	8000668 <__aeabi_dmul>
 80117f6:	4602      	mov	r2, r0
 80117f8:	460b      	mov	r3, r1
 80117fa:	4630      	mov	r0, r6
 80117fc:	4639      	mov	r1, r7
 80117fe:	f7ee fd7d 	bl	80002fc <__adddf3>
 8011802:	9a07      	ldr	r2, [sp, #28]
 8011804:	4b37      	ldr	r3, [pc, #220]	; (80118e4 <__ieee754_pow+0x774>)
 8011806:	4413      	add	r3, r2
 8011808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801180c:	f7ee fd76 	bl	80002fc <__adddf3>
 8011810:	4682      	mov	sl, r0
 8011812:	9805      	ldr	r0, [sp, #20]
 8011814:	468b      	mov	fp, r1
 8011816:	f7ee febd 	bl	8000594 <__aeabi_i2d>
 801181a:	9a07      	ldr	r2, [sp, #28]
 801181c:	4b32      	ldr	r3, [pc, #200]	; (80118e8 <__ieee754_pow+0x778>)
 801181e:	4413      	add	r3, r2
 8011820:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011824:	4606      	mov	r6, r0
 8011826:	460f      	mov	r7, r1
 8011828:	4652      	mov	r2, sl
 801182a:	465b      	mov	r3, fp
 801182c:	ec51 0b18 	vmov	r0, r1, d8
 8011830:	f7ee fd64 	bl	80002fc <__adddf3>
 8011834:	4642      	mov	r2, r8
 8011836:	464b      	mov	r3, r9
 8011838:	f7ee fd60 	bl	80002fc <__adddf3>
 801183c:	4632      	mov	r2, r6
 801183e:	463b      	mov	r3, r7
 8011840:	f7ee fd5c 	bl	80002fc <__adddf3>
 8011844:	2000      	movs	r0, #0
 8011846:	4632      	mov	r2, r6
 8011848:	463b      	mov	r3, r7
 801184a:	4604      	mov	r4, r0
 801184c:	460d      	mov	r5, r1
 801184e:	f7ee fd53 	bl	80002f8 <__aeabi_dsub>
 8011852:	4642      	mov	r2, r8
 8011854:	464b      	mov	r3, r9
 8011856:	f7ee fd4f 	bl	80002f8 <__aeabi_dsub>
 801185a:	ec53 2b18 	vmov	r2, r3, d8
 801185e:	f7ee fd4b 	bl	80002f8 <__aeabi_dsub>
 8011862:	4602      	mov	r2, r0
 8011864:	460b      	mov	r3, r1
 8011866:	4650      	mov	r0, sl
 8011868:	4659      	mov	r1, fp
 801186a:	e610      	b.n	801148e <__ieee754_pow+0x31e>
 801186c:	2401      	movs	r4, #1
 801186e:	e6a1      	b.n	80115b4 <__ieee754_pow+0x444>
 8011870:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80118c0 <__ieee754_pow+0x750>
 8011874:	e617      	b.n	80114a6 <__ieee754_pow+0x336>
 8011876:	bf00      	nop
 8011878:	4a454eef 	.word	0x4a454eef
 801187c:	3fca7e28 	.word	0x3fca7e28
 8011880:	93c9db65 	.word	0x93c9db65
 8011884:	3fcd864a 	.word	0x3fcd864a
 8011888:	a91d4101 	.word	0xa91d4101
 801188c:	3fd17460 	.word	0x3fd17460
 8011890:	518f264d 	.word	0x518f264d
 8011894:	3fd55555 	.word	0x3fd55555
 8011898:	db6fabff 	.word	0xdb6fabff
 801189c:	3fdb6db6 	.word	0x3fdb6db6
 80118a0:	33333303 	.word	0x33333303
 80118a4:	3fe33333 	.word	0x3fe33333
 80118a8:	e0000000 	.word	0xe0000000
 80118ac:	3feec709 	.word	0x3feec709
 80118b0:	dc3a03fd 	.word	0xdc3a03fd
 80118b4:	3feec709 	.word	0x3feec709
 80118b8:	145b01f5 	.word	0x145b01f5
 80118bc:	be3e2fe0 	.word	0xbe3e2fe0
 80118c0:	00000000 	.word	0x00000000
 80118c4:	3ff00000 	.word	0x3ff00000
 80118c8:	7ff00000 	.word	0x7ff00000
 80118cc:	43400000 	.word	0x43400000
 80118d0:	0003988e 	.word	0x0003988e
 80118d4:	000bb679 	.word	0x000bb679
 80118d8:	080124a0 	.word	0x080124a0
 80118dc:	3ff00000 	.word	0x3ff00000
 80118e0:	40080000 	.word	0x40080000
 80118e4:	080124c0 	.word	0x080124c0
 80118e8:	080124b0 	.word	0x080124b0
 80118ec:	a3b3      	add	r3, pc, #716	; (adr r3, 8011bbc <__ieee754_pow+0xa4c>)
 80118ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118f2:	4640      	mov	r0, r8
 80118f4:	4649      	mov	r1, r9
 80118f6:	f7ee fd01 	bl	80002fc <__adddf3>
 80118fa:	4622      	mov	r2, r4
 80118fc:	ec41 0b1a 	vmov	d10, r0, r1
 8011900:	462b      	mov	r3, r5
 8011902:	4630      	mov	r0, r6
 8011904:	4639      	mov	r1, r7
 8011906:	f7ee fcf7 	bl	80002f8 <__aeabi_dsub>
 801190a:	4602      	mov	r2, r0
 801190c:	460b      	mov	r3, r1
 801190e:	ec51 0b1a 	vmov	r0, r1, d10
 8011912:	f7ef f939 	bl	8000b88 <__aeabi_dcmpgt>
 8011916:	2800      	cmp	r0, #0
 8011918:	f47f ae04 	bne.w	8011524 <__ieee754_pow+0x3b4>
 801191c:	4aa2      	ldr	r2, [pc, #648]	; (8011ba8 <__ieee754_pow+0xa38>)
 801191e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011922:	4293      	cmp	r3, r2
 8011924:	f340 8107 	ble.w	8011b36 <__ieee754_pow+0x9c6>
 8011928:	151b      	asrs	r3, r3, #20
 801192a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801192e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8011932:	fa4a fa03 	asr.w	sl, sl, r3
 8011936:	44da      	add	sl, fp
 8011938:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801193c:	489b      	ldr	r0, [pc, #620]	; (8011bac <__ieee754_pow+0xa3c>)
 801193e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8011942:	4108      	asrs	r0, r1
 8011944:	ea00 030a 	and.w	r3, r0, sl
 8011948:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801194c:	f1c1 0114 	rsb	r1, r1, #20
 8011950:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011954:	fa4a fa01 	asr.w	sl, sl, r1
 8011958:	f1bb 0f00 	cmp.w	fp, #0
 801195c:	f04f 0200 	mov.w	r2, #0
 8011960:	4620      	mov	r0, r4
 8011962:	4629      	mov	r1, r5
 8011964:	bfb8      	it	lt
 8011966:	f1ca 0a00 	rsblt	sl, sl, #0
 801196a:	f7ee fcc5 	bl	80002f8 <__aeabi_dsub>
 801196e:	ec41 0b19 	vmov	d9, r0, r1
 8011972:	4642      	mov	r2, r8
 8011974:	464b      	mov	r3, r9
 8011976:	ec51 0b19 	vmov	r0, r1, d9
 801197a:	f7ee fcbf 	bl	80002fc <__adddf3>
 801197e:	a37a      	add	r3, pc, #488	; (adr r3, 8011b68 <__ieee754_pow+0x9f8>)
 8011980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011984:	2000      	movs	r0, #0
 8011986:	4604      	mov	r4, r0
 8011988:	460d      	mov	r5, r1
 801198a:	f7ee fe6d 	bl	8000668 <__aeabi_dmul>
 801198e:	ec53 2b19 	vmov	r2, r3, d9
 8011992:	4606      	mov	r6, r0
 8011994:	460f      	mov	r7, r1
 8011996:	4620      	mov	r0, r4
 8011998:	4629      	mov	r1, r5
 801199a:	f7ee fcad 	bl	80002f8 <__aeabi_dsub>
 801199e:	4602      	mov	r2, r0
 80119a0:	460b      	mov	r3, r1
 80119a2:	4640      	mov	r0, r8
 80119a4:	4649      	mov	r1, r9
 80119a6:	f7ee fca7 	bl	80002f8 <__aeabi_dsub>
 80119aa:	a371      	add	r3, pc, #452	; (adr r3, 8011b70 <__ieee754_pow+0xa00>)
 80119ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119b0:	f7ee fe5a 	bl	8000668 <__aeabi_dmul>
 80119b4:	a370      	add	r3, pc, #448	; (adr r3, 8011b78 <__ieee754_pow+0xa08>)
 80119b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ba:	4680      	mov	r8, r0
 80119bc:	4689      	mov	r9, r1
 80119be:	4620      	mov	r0, r4
 80119c0:	4629      	mov	r1, r5
 80119c2:	f7ee fe51 	bl	8000668 <__aeabi_dmul>
 80119c6:	4602      	mov	r2, r0
 80119c8:	460b      	mov	r3, r1
 80119ca:	4640      	mov	r0, r8
 80119cc:	4649      	mov	r1, r9
 80119ce:	f7ee fc95 	bl	80002fc <__adddf3>
 80119d2:	4604      	mov	r4, r0
 80119d4:	460d      	mov	r5, r1
 80119d6:	4602      	mov	r2, r0
 80119d8:	460b      	mov	r3, r1
 80119da:	4630      	mov	r0, r6
 80119dc:	4639      	mov	r1, r7
 80119de:	f7ee fc8d 	bl	80002fc <__adddf3>
 80119e2:	4632      	mov	r2, r6
 80119e4:	463b      	mov	r3, r7
 80119e6:	4680      	mov	r8, r0
 80119e8:	4689      	mov	r9, r1
 80119ea:	f7ee fc85 	bl	80002f8 <__aeabi_dsub>
 80119ee:	4602      	mov	r2, r0
 80119f0:	460b      	mov	r3, r1
 80119f2:	4620      	mov	r0, r4
 80119f4:	4629      	mov	r1, r5
 80119f6:	f7ee fc7f 	bl	80002f8 <__aeabi_dsub>
 80119fa:	4642      	mov	r2, r8
 80119fc:	4606      	mov	r6, r0
 80119fe:	460f      	mov	r7, r1
 8011a00:	464b      	mov	r3, r9
 8011a02:	4640      	mov	r0, r8
 8011a04:	4649      	mov	r1, r9
 8011a06:	f7ee fe2f 	bl	8000668 <__aeabi_dmul>
 8011a0a:	a35d      	add	r3, pc, #372	; (adr r3, 8011b80 <__ieee754_pow+0xa10>)
 8011a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a10:	4604      	mov	r4, r0
 8011a12:	460d      	mov	r5, r1
 8011a14:	f7ee fe28 	bl	8000668 <__aeabi_dmul>
 8011a18:	a35b      	add	r3, pc, #364	; (adr r3, 8011b88 <__ieee754_pow+0xa18>)
 8011a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a1e:	f7ee fc6b 	bl	80002f8 <__aeabi_dsub>
 8011a22:	4622      	mov	r2, r4
 8011a24:	462b      	mov	r3, r5
 8011a26:	f7ee fe1f 	bl	8000668 <__aeabi_dmul>
 8011a2a:	a359      	add	r3, pc, #356	; (adr r3, 8011b90 <__ieee754_pow+0xa20>)
 8011a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a30:	f7ee fc64 	bl	80002fc <__adddf3>
 8011a34:	4622      	mov	r2, r4
 8011a36:	462b      	mov	r3, r5
 8011a38:	f7ee fe16 	bl	8000668 <__aeabi_dmul>
 8011a3c:	a356      	add	r3, pc, #344	; (adr r3, 8011b98 <__ieee754_pow+0xa28>)
 8011a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a42:	f7ee fc59 	bl	80002f8 <__aeabi_dsub>
 8011a46:	4622      	mov	r2, r4
 8011a48:	462b      	mov	r3, r5
 8011a4a:	f7ee fe0d 	bl	8000668 <__aeabi_dmul>
 8011a4e:	a354      	add	r3, pc, #336	; (adr r3, 8011ba0 <__ieee754_pow+0xa30>)
 8011a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a54:	f7ee fc52 	bl	80002fc <__adddf3>
 8011a58:	4622      	mov	r2, r4
 8011a5a:	462b      	mov	r3, r5
 8011a5c:	f7ee fe04 	bl	8000668 <__aeabi_dmul>
 8011a60:	4602      	mov	r2, r0
 8011a62:	460b      	mov	r3, r1
 8011a64:	4640      	mov	r0, r8
 8011a66:	4649      	mov	r1, r9
 8011a68:	f7ee fc46 	bl	80002f8 <__aeabi_dsub>
 8011a6c:	4604      	mov	r4, r0
 8011a6e:	460d      	mov	r5, r1
 8011a70:	4602      	mov	r2, r0
 8011a72:	460b      	mov	r3, r1
 8011a74:	4640      	mov	r0, r8
 8011a76:	4649      	mov	r1, r9
 8011a78:	f7ee fdf6 	bl	8000668 <__aeabi_dmul>
 8011a7c:	2200      	movs	r2, #0
 8011a7e:	ec41 0b19 	vmov	d9, r0, r1
 8011a82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011a86:	4620      	mov	r0, r4
 8011a88:	4629      	mov	r1, r5
 8011a8a:	f7ee fc35 	bl	80002f8 <__aeabi_dsub>
 8011a8e:	4602      	mov	r2, r0
 8011a90:	460b      	mov	r3, r1
 8011a92:	ec51 0b19 	vmov	r0, r1, d9
 8011a96:	f7ee ff11 	bl	80008bc <__aeabi_ddiv>
 8011a9a:	4632      	mov	r2, r6
 8011a9c:	4604      	mov	r4, r0
 8011a9e:	460d      	mov	r5, r1
 8011aa0:	463b      	mov	r3, r7
 8011aa2:	4640      	mov	r0, r8
 8011aa4:	4649      	mov	r1, r9
 8011aa6:	f7ee fddf 	bl	8000668 <__aeabi_dmul>
 8011aaa:	4632      	mov	r2, r6
 8011aac:	463b      	mov	r3, r7
 8011aae:	f7ee fc25 	bl	80002fc <__adddf3>
 8011ab2:	4602      	mov	r2, r0
 8011ab4:	460b      	mov	r3, r1
 8011ab6:	4620      	mov	r0, r4
 8011ab8:	4629      	mov	r1, r5
 8011aba:	f7ee fc1d 	bl	80002f8 <__aeabi_dsub>
 8011abe:	4642      	mov	r2, r8
 8011ac0:	464b      	mov	r3, r9
 8011ac2:	f7ee fc19 	bl	80002f8 <__aeabi_dsub>
 8011ac6:	460b      	mov	r3, r1
 8011ac8:	4602      	mov	r2, r0
 8011aca:	4939      	ldr	r1, [pc, #228]	; (8011bb0 <__ieee754_pow+0xa40>)
 8011acc:	2000      	movs	r0, #0
 8011ace:	f7ee fc13 	bl	80002f8 <__aeabi_dsub>
 8011ad2:	ec41 0b10 	vmov	d0, r0, r1
 8011ad6:	ee10 3a90 	vmov	r3, s1
 8011ada:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011ade:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011ae2:	da2b      	bge.n	8011b3c <__ieee754_pow+0x9cc>
 8011ae4:	4650      	mov	r0, sl
 8011ae6:	f000 f877 	bl	8011bd8 <scalbn>
 8011aea:	ec51 0b10 	vmov	r0, r1, d0
 8011aee:	ec53 2b18 	vmov	r2, r3, d8
 8011af2:	f7ff bbee 	b.w	80112d2 <__ieee754_pow+0x162>
 8011af6:	4b2f      	ldr	r3, [pc, #188]	; (8011bb4 <__ieee754_pow+0xa44>)
 8011af8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8011afc:	429e      	cmp	r6, r3
 8011afe:	f77f af0d 	ble.w	801191c <__ieee754_pow+0x7ac>
 8011b02:	4b2d      	ldr	r3, [pc, #180]	; (8011bb8 <__ieee754_pow+0xa48>)
 8011b04:	440b      	add	r3, r1
 8011b06:	4303      	orrs	r3, r0
 8011b08:	d009      	beq.n	8011b1e <__ieee754_pow+0x9ae>
 8011b0a:	ec51 0b18 	vmov	r0, r1, d8
 8011b0e:	2200      	movs	r2, #0
 8011b10:	2300      	movs	r3, #0
 8011b12:	f7ef f81b 	bl	8000b4c <__aeabi_dcmplt>
 8011b16:	3800      	subs	r0, #0
 8011b18:	bf18      	it	ne
 8011b1a:	2001      	movne	r0, #1
 8011b1c:	e448      	b.n	80113b0 <__ieee754_pow+0x240>
 8011b1e:	4622      	mov	r2, r4
 8011b20:	462b      	mov	r3, r5
 8011b22:	f7ee fbe9 	bl	80002f8 <__aeabi_dsub>
 8011b26:	4642      	mov	r2, r8
 8011b28:	464b      	mov	r3, r9
 8011b2a:	f7ef f823 	bl	8000b74 <__aeabi_dcmpge>
 8011b2e:	2800      	cmp	r0, #0
 8011b30:	f43f aef4 	beq.w	801191c <__ieee754_pow+0x7ac>
 8011b34:	e7e9      	b.n	8011b0a <__ieee754_pow+0x99a>
 8011b36:	f04f 0a00 	mov.w	sl, #0
 8011b3a:	e71a      	b.n	8011972 <__ieee754_pow+0x802>
 8011b3c:	ec51 0b10 	vmov	r0, r1, d0
 8011b40:	4619      	mov	r1, r3
 8011b42:	e7d4      	b.n	8011aee <__ieee754_pow+0x97e>
 8011b44:	491a      	ldr	r1, [pc, #104]	; (8011bb0 <__ieee754_pow+0xa40>)
 8011b46:	2000      	movs	r0, #0
 8011b48:	f7ff bb31 	b.w	80111ae <__ieee754_pow+0x3e>
 8011b4c:	2000      	movs	r0, #0
 8011b4e:	2100      	movs	r1, #0
 8011b50:	f7ff bb2d 	b.w	80111ae <__ieee754_pow+0x3e>
 8011b54:	4630      	mov	r0, r6
 8011b56:	4639      	mov	r1, r7
 8011b58:	f7ff bb29 	b.w	80111ae <__ieee754_pow+0x3e>
 8011b5c:	9204      	str	r2, [sp, #16]
 8011b5e:	f7ff bb7b 	b.w	8011258 <__ieee754_pow+0xe8>
 8011b62:	2300      	movs	r3, #0
 8011b64:	f7ff bb65 	b.w	8011232 <__ieee754_pow+0xc2>
 8011b68:	00000000 	.word	0x00000000
 8011b6c:	3fe62e43 	.word	0x3fe62e43
 8011b70:	fefa39ef 	.word	0xfefa39ef
 8011b74:	3fe62e42 	.word	0x3fe62e42
 8011b78:	0ca86c39 	.word	0x0ca86c39
 8011b7c:	be205c61 	.word	0xbe205c61
 8011b80:	72bea4d0 	.word	0x72bea4d0
 8011b84:	3e663769 	.word	0x3e663769
 8011b88:	c5d26bf1 	.word	0xc5d26bf1
 8011b8c:	3ebbbd41 	.word	0x3ebbbd41
 8011b90:	af25de2c 	.word	0xaf25de2c
 8011b94:	3f11566a 	.word	0x3f11566a
 8011b98:	16bebd93 	.word	0x16bebd93
 8011b9c:	3f66c16c 	.word	0x3f66c16c
 8011ba0:	5555553e 	.word	0x5555553e
 8011ba4:	3fc55555 	.word	0x3fc55555
 8011ba8:	3fe00000 	.word	0x3fe00000
 8011bac:	fff00000 	.word	0xfff00000
 8011bb0:	3ff00000 	.word	0x3ff00000
 8011bb4:	4090cbff 	.word	0x4090cbff
 8011bb8:	3f6f3400 	.word	0x3f6f3400
 8011bbc:	652b82fe 	.word	0x652b82fe
 8011bc0:	3c971547 	.word	0x3c971547

08011bc4 <fabs>:
 8011bc4:	ec51 0b10 	vmov	r0, r1, d0
 8011bc8:	ee10 2a10 	vmov	r2, s0
 8011bcc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011bd0:	ec43 2b10 	vmov	d0, r2, r3
 8011bd4:	4770      	bx	lr
	...

08011bd8 <scalbn>:
 8011bd8:	b570      	push	{r4, r5, r6, lr}
 8011bda:	ec55 4b10 	vmov	r4, r5, d0
 8011bde:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8011be2:	4606      	mov	r6, r0
 8011be4:	462b      	mov	r3, r5
 8011be6:	b999      	cbnz	r1, 8011c10 <scalbn+0x38>
 8011be8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011bec:	4323      	orrs	r3, r4
 8011bee:	d03f      	beq.n	8011c70 <scalbn+0x98>
 8011bf0:	4b35      	ldr	r3, [pc, #212]	; (8011cc8 <scalbn+0xf0>)
 8011bf2:	4629      	mov	r1, r5
 8011bf4:	ee10 0a10 	vmov	r0, s0
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	f7ee fd35 	bl	8000668 <__aeabi_dmul>
 8011bfe:	4b33      	ldr	r3, [pc, #204]	; (8011ccc <scalbn+0xf4>)
 8011c00:	429e      	cmp	r6, r3
 8011c02:	4604      	mov	r4, r0
 8011c04:	460d      	mov	r5, r1
 8011c06:	da10      	bge.n	8011c2a <scalbn+0x52>
 8011c08:	a327      	add	r3, pc, #156	; (adr r3, 8011ca8 <scalbn+0xd0>)
 8011c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c0e:	e01f      	b.n	8011c50 <scalbn+0x78>
 8011c10:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8011c14:	4291      	cmp	r1, r2
 8011c16:	d10c      	bne.n	8011c32 <scalbn+0x5a>
 8011c18:	ee10 2a10 	vmov	r2, s0
 8011c1c:	4620      	mov	r0, r4
 8011c1e:	4629      	mov	r1, r5
 8011c20:	f7ee fb6c 	bl	80002fc <__adddf3>
 8011c24:	4604      	mov	r4, r0
 8011c26:	460d      	mov	r5, r1
 8011c28:	e022      	b.n	8011c70 <scalbn+0x98>
 8011c2a:	460b      	mov	r3, r1
 8011c2c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8011c30:	3936      	subs	r1, #54	; 0x36
 8011c32:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011c36:	4296      	cmp	r6, r2
 8011c38:	dd0d      	ble.n	8011c56 <scalbn+0x7e>
 8011c3a:	2d00      	cmp	r5, #0
 8011c3c:	a11c      	add	r1, pc, #112	; (adr r1, 8011cb0 <scalbn+0xd8>)
 8011c3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c42:	da02      	bge.n	8011c4a <scalbn+0x72>
 8011c44:	a11c      	add	r1, pc, #112	; (adr r1, 8011cb8 <scalbn+0xe0>)
 8011c46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c4a:	a319      	add	r3, pc, #100	; (adr r3, 8011cb0 <scalbn+0xd8>)
 8011c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c50:	f7ee fd0a 	bl	8000668 <__aeabi_dmul>
 8011c54:	e7e6      	b.n	8011c24 <scalbn+0x4c>
 8011c56:	1872      	adds	r2, r6, r1
 8011c58:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011c5c:	428a      	cmp	r2, r1
 8011c5e:	dcec      	bgt.n	8011c3a <scalbn+0x62>
 8011c60:	2a00      	cmp	r2, #0
 8011c62:	dd08      	ble.n	8011c76 <scalbn+0x9e>
 8011c64:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011c68:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011c6c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011c70:	ec45 4b10 	vmov	d0, r4, r5
 8011c74:	bd70      	pop	{r4, r5, r6, pc}
 8011c76:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011c7a:	da08      	bge.n	8011c8e <scalbn+0xb6>
 8011c7c:	2d00      	cmp	r5, #0
 8011c7e:	a10a      	add	r1, pc, #40	; (adr r1, 8011ca8 <scalbn+0xd0>)
 8011c80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c84:	dac0      	bge.n	8011c08 <scalbn+0x30>
 8011c86:	a10e      	add	r1, pc, #56	; (adr r1, 8011cc0 <scalbn+0xe8>)
 8011c88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011c8c:	e7bc      	b.n	8011c08 <scalbn+0x30>
 8011c8e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011c92:	3236      	adds	r2, #54	; 0x36
 8011c94:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011c98:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8011c9c:	4620      	mov	r0, r4
 8011c9e:	4b0c      	ldr	r3, [pc, #48]	; (8011cd0 <scalbn+0xf8>)
 8011ca0:	2200      	movs	r2, #0
 8011ca2:	e7d5      	b.n	8011c50 <scalbn+0x78>
 8011ca4:	f3af 8000 	nop.w
 8011ca8:	c2f8f359 	.word	0xc2f8f359
 8011cac:	01a56e1f 	.word	0x01a56e1f
 8011cb0:	8800759c 	.word	0x8800759c
 8011cb4:	7e37e43c 	.word	0x7e37e43c
 8011cb8:	8800759c 	.word	0x8800759c
 8011cbc:	fe37e43c 	.word	0xfe37e43c
 8011cc0:	c2f8f359 	.word	0xc2f8f359
 8011cc4:	81a56e1f 	.word	0x81a56e1f
 8011cc8:	43500000 	.word	0x43500000
 8011ccc:	ffff3cb0 	.word	0xffff3cb0
 8011cd0:	3c900000 	.word	0x3c900000

08011cd4 <with_errno>:
 8011cd4:	b570      	push	{r4, r5, r6, lr}
 8011cd6:	4604      	mov	r4, r0
 8011cd8:	460d      	mov	r5, r1
 8011cda:	4616      	mov	r6, r2
 8011cdc:	f7fd f922 	bl	800ef24 <__errno>
 8011ce0:	4629      	mov	r1, r5
 8011ce2:	6006      	str	r6, [r0, #0]
 8011ce4:	4620      	mov	r0, r4
 8011ce6:	bd70      	pop	{r4, r5, r6, pc}

08011ce8 <xflow>:
 8011ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011cea:	4614      	mov	r4, r2
 8011cec:	461d      	mov	r5, r3
 8011cee:	b108      	cbz	r0, 8011cf4 <xflow+0xc>
 8011cf0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011cf4:	e9cd 2300 	strd	r2, r3, [sp]
 8011cf8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011cfc:	4620      	mov	r0, r4
 8011cfe:	4629      	mov	r1, r5
 8011d00:	f7ee fcb2 	bl	8000668 <__aeabi_dmul>
 8011d04:	2222      	movs	r2, #34	; 0x22
 8011d06:	b003      	add	sp, #12
 8011d08:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d0c:	f7ff bfe2 	b.w	8011cd4 <with_errno>

08011d10 <__math_uflow>:
 8011d10:	b508      	push	{r3, lr}
 8011d12:	2200      	movs	r2, #0
 8011d14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8011d18:	f7ff ffe6 	bl	8011ce8 <xflow>
 8011d1c:	ec41 0b10 	vmov	d0, r0, r1
 8011d20:	bd08      	pop	{r3, pc}

08011d22 <__math_oflow>:
 8011d22:	b508      	push	{r3, lr}
 8011d24:	2200      	movs	r2, #0
 8011d26:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8011d2a:	f7ff ffdd 	bl	8011ce8 <xflow>
 8011d2e:	ec41 0b10 	vmov	d0, r0, r1
 8011d32:	bd08      	pop	{r3, pc}

08011d34 <__ieee754_sqrt>:
 8011d34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d38:	ec55 4b10 	vmov	r4, r5, d0
 8011d3c:	4e67      	ldr	r6, [pc, #412]	; (8011edc <__ieee754_sqrt+0x1a8>)
 8011d3e:	43ae      	bics	r6, r5
 8011d40:	ee10 0a10 	vmov	r0, s0
 8011d44:	ee10 2a10 	vmov	r2, s0
 8011d48:	4629      	mov	r1, r5
 8011d4a:	462b      	mov	r3, r5
 8011d4c:	d10d      	bne.n	8011d6a <__ieee754_sqrt+0x36>
 8011d4e:	f7ee fc8b 	bl	8000668 <__aeabi_dmul>
 8011d52:	4602      	mov	r2, r0
 8011d54:	460b      	mov	r3, r1
 8011d56:	4620      	mov	r0, r4
 8011d58:	4629      	mov	r1, r5
 8011d5a:	f7ee facf 	bl	80002fc <__adddf3>
 8011d5e:	4604      	mov	r4, r0
 8011d60:	460d      	mov	r5, r1
 8011d62:	ec45 4b10 	vmov	d0, r4, r5
 8011d66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d6a:	2d00      	cmp	r5, #0
 8011d6c:	dc0b      	bgt.n	8011d86 <__ieee754_sqrt+0x52>
 8011d6e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011d72:	4326      	orrs	r6, r4
 8011d74:	d0f5      	beq.n	8011d62 <__ieee754_sqrt+0x2e>
 8011d76:	b135      	cbz	r5, 8011d86 <__ieee754_sqrt+0x52>
 8011d78:	f7ee fabe 	bl	80002f8 <__aeabi_dsub>
 8011d7c:	4602      	mov	r2, r0
 8011d7e:	460b      	mov	r3, r1
 8011d80:	f7ee fd9c 	bl	80008bc <__aeabi_ddiv>
 8011d84:	e7eb      	b.n	8011d5e <__ieee754_sqrt+0x2a>
 8011d86:	1509      	asrs	r1, r1, #20
 8011d88:	f000 808d 	beq.w	8011ea6 <__ieee754_sqrt+0x172>
 8011d8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011d90:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8011d94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011d98:	07c9      	lsls	r1, r1, #31
 8011d9a:	bf5c      	itt	pl
 8011d9c:	005b      	lslpl	r3, r3, #1
 8011d9e:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8011da2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011da6:	bf58      	it	pl
 8011da8:	0052      	lslpl	r2, r2, #1
 8011daa:	2500      	movs	r5, #0
 8011dac:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011db0:	1076      	asrs	r6, r6, #1
 8011db2:	0052      	lsls	r2, r2, #1
 8011db4:	f04f 0e16 	mov.w	lr, #22
 8011db8:	46ac      	mov	ip, r5
 8011dba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011dbe:	eb0c 0001 	add.w	r0, ip, r1
 8011dc2:	4298      	cmp	r0, r3
 8011dc4:	bfde      	ittt	le
 8011dc6:	1a1b      	suble	r3, r3, r0
 8011dc8:	eb00 0c01 	addle.w	ip, r0, r1
 8011dcc:	186d      	addle	r5, r5, r1
 8011dce:	005b      	lsls	r3, r3, #1
 8011dd0:	f1be 0e01 	subs.w	lr, lr, #1
 8011dd4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011dd8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011ddc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011de0:	d1ed      	bne.n	8011dbe <__ieee754_sqrt+0x8a>
 8011de2:	4674      	mov	r4, lr
 8011de4:	2720      	movs	r7, #32
 8011de6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8011dea:	4563      	cmp	r3, ip
 8011dec:	eb01 000e 	add.w	r0, r1, lr
 8011df0:	dc02      	bgt.n	8011df8 <__ieee754_sqrt+0xc4>
 8011df2:	d113      	bne.n	8011e1c <__ieee754_sqrt+0xe8>
 8011df4:	4290      	cmp	r0, r2
 8011df6:	d811      	bhi.n	8011e1c <__ieee754_sqrt+0xe8>
 8011df8:	2800      	cmp	r0, #0
 8011dfa:	eb00 0e01 	add.w	lr, r0, r1
 8011dfe:	da57      	bge.n	8011eb0 <__ieee754_sqrt+0x17c>
 8011e00:	f1be 0f00 	cmp.w	lr, #0
 8011e04:	db54      	blt.n	8011eb0 <__ieee754_sqrt+0x17c>
 8011e06:	f10c 0801 	add.w	r8, ip, #1
 8011e0a:	eba3 030c 	sub.w	r3, r3, ip
 8011e0e:	4290      	cmp	r0, r2
 8011e10:	bf88      	it	hi
 8011e12:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8011e16:	1a12      	subs	r2, r2, r0
 8011e18:	440c      	add	r4, r1
 8011e1a:	46c4      	mov	ip, r8
 8011e1c:	005b      	lsls	r3, r3, #1
 8011e1e:	3f01      	subs	r7, #1
 8011e20:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011e24:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8011e28:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8011e2c:	d1dd      	bne.n	8011dea <__ieee754_sqrt+0xb6>
 8011e2e:	4313      	orrs	r3, r2
 8011e30:	d01b      	beq.n	8011e6a <__ieee754_sqrt+0x136>
 8011e32:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8011ee0 <__ieee754_sqrt+0x1ac>
 8011e36:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8011ee4 <__ieee754_sqrt+0x1b0>
 8011e3a:	e9da 0100 	ldrd	r0, r1, [sl]
 8011e3e:	e9db 2300 	ldrd	r2, r3, [fp]
 8011e42:	f7ee fa59 	bl	80002f8 <__aeabi_dsub>
 8011e46:	e9da 8900 	ldrd	r8, r9, [sl]
 8011e4a:	4602      	mov	r2, r0
 8011e4c:	460b      	mov	r3, r1
 8011e4e:	4640      	mov	r0, r8
 8011e50:	4649      	mov	r1, r9
 8011e52:	f7ee fe85 	bl	8000b60 <__aeabi_dcmple>
 8011e56:	b140      	cbz	r0, 8011e6a <__ieee754_sqrt+0x136>
 8011e58:	f1b4 3fff 	cmp.w	r4, #4294967295
 8011e5c:	e9da 0100 	ldrd	r0, r1, [sl]
 8011e60:	e9db 2300 	ldrd	r2, r3, [fp]
 8011e64:	d126      	bne.n	8011eb4 <__ieee754_sqrt+0x180>
 8011e66:	3501      	adds	r5, #1
 8011e68:	463c      	mov	r4, r7
 8011e6a:	106a      	asrs	r2, r5, #1
 8011e6c:	0863      	lsrs	r3, r4, #1
 8011e6e:	07e9      	lsls	r1, r5, #31
 8011e70:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011e74:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011e78:	bf48      	it	mi
 8011e7a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011e7e:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8011e82:	461c      	mov	r4, r3
 8011e84:	e76d      	b.n	8011d62 <__ieee754_sqrt+0x2e>
 8011e86:	0ad3      	lsrs	r3, r2, #11
 8011e88:	3815      	subs	r0, #21
 8011e8a:	0552      	lsls	r2, r2, #21
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d0fa      	beq.n	8011e86 <__ieee754_sqrt+0x152>
 8011e90:	02dc      	lsls	r4, r3, #11
 8011e92:	d50a      	bpl.n	8011eaa <__ieee754_sqrt+0x176>
 8011e94:	f1c1 0420 	rsb	r4, r1, #32
 8011e98:	fa22 f404 	lsr.w	r4, r2, r4
 8011e9c:	1e4d      	subs	r5, r1, #1
 8011e9e:	408a      	lsls	r2, r1
 8011ea0:	4323      	orrs	r3, r4
 8011ea2:	1b41      	subs	r1, r0, r5
 8011ea4:	e772      	b.n	8011d8c <__ieee754_sqrt+0x58>
 8011ea6:	4608      	mov	r0, r1
 8011ea8:	e7f0      	b.n	8011e8c <__ieee754_sqrt+0x158>
 8011eaa:	005b      	lsls	r3, r3, #1
 8011eac:	3101      	adds	r1, #1
 8011eae:	e7ef      	b.n	8011e90 <__ieee754_sqrt+0x15c>
 8011eb0:	46e0      	mov	r8, ip
 8011eb2:	e7aa      	b.n	8011e0a <__ieee754_sqrt+0xd6>
 8011eb4:	f7ee fa22 	bl	80002fc <__adddf3>
 8011eb8:	e9da 8900 	ldrd	r8, r9, [sl]
 8011ebc:	4602      	mov	r2, r0
 8011ebe:	460b      	mov	r3, r1
 8011ec0:	4640      	mov	r0, r8
 8011ec2:	4649      	mov	r1, r9
 8011ec4:	f7ee fe42 	bl	8000b4c <__aeabi_dcmplt>
 8011ec8:	b120      	cbz	r0, 8011ed4 <__ieee754_sqrt+0x1a0>
 8011eca:	1ca0      	adds	r0, r4, #2
 8011ecc:	bf08      	it	eq
 8011ece:	3501      	addeq	r5, #1
 8011ed0:	3402      	adds	r4, #2
 8011ed2:	e7ca      	b.n	8011e6a <__ieee754_sqrt+0x136>
 8011ed4:	3401      	adds	r4, #1
 8011ed6:	f024 0401 	bic.w	r4, r4, #1
 8011eda:	e7c6      	b.n	8011e6a <__ieee754_sqrt+0x136>
 8011edc:	7ff00000 	.word	0x7ff00000
 8011ee0:	20000360 	.word	0x20000360
 8011ee4:	20000368 	.word	0x20000368

08011ee8 <_init>:
 8011ee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011eea:	bf00      	nop
 8011eec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011eee:	bc08      	pop	{r3}
 8011ef0:	469e      	mov	lr, r3
 8011ef2:	4770      	bx	lr

08011ef4 <_fini>:
 8011ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011ef6:	bf00      	nop
 8011ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011efa:	bc08      	pop	{r3}
 8011efc:	469e      	mov	lr, r3
 8011efe:	4770      	bx	lr
